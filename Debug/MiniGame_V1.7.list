
MiniGame_V1.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  08019d90  08019d90  00029d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b214  0801b214  00030520  2**0
                  CONTENTS
  4 .ARM          00000008  0801b214  0801b214  0002b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b21c  0801b21c  00030520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b21c  0801b21c  0002b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b220  0801b220  0002b220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000520  20000000  0801b224  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000856c  20000520  0801b744  00030520  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20008a8c  0801b744  00038a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066de6  00000000  00000000  00030550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008e1d  00000000  00000000  00097336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002610  00000000  00000000  000a0158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002310  00000000  00000000  000a2768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e83d  00000000  00000000  000a4a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036544  00000000  00000000  000d32b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e998a  00000000  00000000  001097f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f3183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b278  00000000  00000000  001f31d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000520 	.word	0x20000520
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019d74 	.word	0x08019d74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000524 	.word	0x20000524
 80001cc:	08019d74 	.word	0x08019d74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8000fec:	b408      	push	{r3}
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b089      	sub	sp, #36	; 0x24
 8000ff2:	af02      	add	r7, sp, #8
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800100c:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d12e      	bne.n	800107a <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	617a      	str	r2, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1d1a      	adds	r2, r3, #4
 800103a:	617a      	str	r2, [r7, #20]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	617a      	str	r2, [r7, #20]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29a      	uxth	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6858      	ldr	r0, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8919      	ldrh	r1, [r3, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	2201      	movs	r2, #1
 8001060:	f000 f84e 	bl	8001100 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68d8      	ldr	r0, [r3, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8a19      	ldrh	r1, [r3, #16]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2201      	movs	r2, #1
 8001074:	f000 f844 	bl	8001100 <GPIOPinsInit>
 8001078:	e017      	b.n	80010aa <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	617a      	str	r2, [r7, #20]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	1d1a      	adds	r2, r3, #4
 8001092:	617a      	str	r2, [r7, #20]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	617a      	str	r2, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <BDCInit+0xd2>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010bc:	e018      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d105      	bne.n	80010d2 <BDCInit+0xe6>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010d0:	e00e      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d105      	bne.n	80010e6 <BDCInit+0xfa>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e4:	e004      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fa:	b001      	add	sp, #4
 80010fc:	4770      	bx	lr
	...

08001100 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <GPIOPinsInit+0x1cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f000 80af 	beq.w	8001288 <GPIOPinsInit+0x188>
 800112a:	4a68      	ldr	r2, [pc, #416]	; (80012cc <GPIOPinsInit+0x1cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f200 80ba 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001132:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <GPIOPinsInit+0x1d0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f000 8098 	beq.w	800126a <GPIOPinsInit+0x16a>
 800113a:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <GPIOPinsInit+0x1d0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f200 80b2 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001142:	4a64      	ldr	r2, [pc, #400]	; (80012d4 <GPIOPinsInit+0x1d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f000 8081 	beq.w	800124c <GPIOPinsInit+0x14c>
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <GPIOPinsInit+0x1d4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f200 80aa 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <GPIOPinsInit+0x1d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d06a      	beq.n	800122e <GPIOPinsInit+0x12e>
 8001158:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <GPIOPinsInit+0x1d8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f200 80a3 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001160:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d054      	beq.n	8001210 <GPIOPinsInit+0x110>
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	f200 809c 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800116e:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d03e      	beq.n	80011f2 <GPIOPinsInit+0xf2>
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f200 8095 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800117c:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <GPIOPinsInit+0x1e4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d028      	beq.n	80011d4 <GPIOPinsInit+0xd4>
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <GPIOPinsInit+0x1e4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f200 808e 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800118a:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <GPIOPinsInit+0x1e8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <GPIOPinsInit+0x98>
 8001190:	4a56      	ldr	r2, [pc, #344]	; (80012ec <GPIOPinsInit+0x1ec>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00f      	beq.n	80011b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001196:	e086      	b.n	80012a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80011b4:	e078      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80011d2:	e069      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80011f0:	e05a      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800120e:	e04b      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800122c:	e03c      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
	break;
 800124a:	e02d      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
	break;
 8001268:	e01e      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
	break;
 8001286:	e00f      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
	break;
 80012a4:	e000      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	default: break;
 80012a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80012b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f00b f8d0 	bl	800c464 <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3748      	adds	r7, #72	; 0x48
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40023800 	.word	0x40023800

080012f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a52      	ldr	r2, [pc, #328]	; (8001464 <PWMTimeBaseInit+0x170>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d103      	bne.n	8001328 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <PWMTimeBaseInit+0x174>)
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e057      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <PWMTimeBaseInit+0x178>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d104      	bne.n	800133a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e04e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <PWMTimeBaseInit+0x17c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d103      	bne.n	800134a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <PWMTimeBaseInit+0x180>)
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e046      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <PWMTimeBaseInit+0x184>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d103      	bne.n	800135a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <PWMTimeBaseInit+0x188>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e03e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <PWMTimeBaseInit+0x18c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d103      	bne.n	800136a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <PWMTimeBaseInit+0x190>)
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e036      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <PWMTimeBaseInit+0x194>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d103      	bne.n	800137a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <PWMTimeBaseInit+0x198>)
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e02e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <PWMTimeBaseInit+0x19c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d103      	bne.n	800138a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a43      	ldr	r2, [pc, #268]	; (8001494 <PWMTimeBaseInit+0x1a0>)
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e026      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <PWMTimeBaseInit+0x1a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <PWMTimeBaseInit+0x1a8>)
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e01e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <PWMTimeBaseInit+0x1ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d103      	bne.n	80013aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <PWMTimeBaseInit+0x1b0>)
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e016      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <PWMTimeBaseInit+0x1b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d103      	bne.n	80013ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <PWMTimeBaseInit+0x1b8>)
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e00e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <PWMTimeBaseInit+0x1bc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d103      	bne.n	80013ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <PWMTimeBaseInit+0x1c0>)
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e006      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <PWMTimeBaseInit+0x1c4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d102      	bne.n	80013d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a39      	ldr	r2, [pc, #228]	; (80014bc <PWMTimeBaseInit+0x1c8>)
 80013d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f00e fb38 	bl	800fa70 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001406:	f004 fa2d 	bl	8005864 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f00e fdd4 	bl	800ffc4 <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001422:	f004 fa1f 	bl	8005864 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f00e fb95 	bl	800fb56 <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001432:	f004 fa17 	bl	8005864 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f00f f9b9 	bl	80107bc <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001450:	f004 fa08 	bl	8005864 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f00e fb36 	bl	800fac6 <HAL_TIM_Base_Start>

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200066cc 	.word	0x200066cc
 8001468:	40010000 	.word	0x40010000
 800146c:	200067d0 	.word	0x200067d0
 8001470:	20006480 	.word	0x20006480
 8001474:	40000400 	.word	0x40000400
 8001478:	200062bc 	.word	0x200062bc
 800147c:	40000800 	.word	0x40000800
 8001480:	20006440 	.word	0x20006440
 8001484:	40000c00 	.word	0x40000c00
 8001488:	2000627c 	.word	0x2000627c
 800148c:	40010400 	.word	0x40010400
 8001490:	2000670c 	.word	0x2000670c
 8001494:	40014000 	.word	0x40014000
 8001498:	2000639c 	.word	0x2000639c
 800149c:	40014400 	.word	0x40014400
 80014a0:	200065e4 	.word	0x200065e4
 80014a4:	40014800 	.word	0x40014800
 80014a8:	200068f0 	.word	0x200068f0
 80014ac:	40001800 	.word	0x40001800
 80014b0:	20006564 	.word	0x20006564
 80014b4:	40001c00 	.word	0x40001c00
 80014b8:	200068b0 	.word	0x200068b0
 80014bc:	40002000 	.word	0x40002000

080014c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09a      	sub	sp, #104	; 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014f2:	2370      	movs	r3, #112	; 0x70
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014fe:	2308      	movs	r3, #8
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f00e fc8e 	bl	800fe38 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001522:	f004 f99f 	bl	8005864 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a95      	ldr	r2, [pc, #596]	; (8001780 <PWMChannelConfig+0x2c0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f000 80af 	beq.w	800168e <PWMChannelConfig+0x1ce>
 8001530:	4a93      	ldr	r2, [pc, #588]	; (8001780 <PWMChannelConfig+0x2c0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f200 80ba 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001538:	4a92      	ldr	r2, [pc, #584]	; (8001784 <PWMChannelConfig+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f000 8098 	beq.w	8001670 <PWMChannelConfig+0x1b0>
 8001540:	4a90      	ldr	r2, [pc, #576]	; (8001784 <PWMChannelConfig+0x2c4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	f200 80b2 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001548:	4a8f      	ldr	r2, [pc, #572]	; (8001788 <PWMChannelConfig+0x2c8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	f000 8081 	beq.w	8001652 <PWMChannelConfig+0x192>
 8001550:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <PWMChannelConfig+0x2c8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f200 80aa 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001558:	4a8c      	ldr	r2, [pc, #560]	; (800178c <PWMChannelConfig+0x2cc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d06a      	beq.n	8001634 <PWMChannelConfig+0x174>
 800155e:	4a8b      	ldr	r2, [pc, #556]	; (800178c <PWMChannelConfig+0x2cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f200 80a3 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <PWMChannelConfig+0x2d0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d054      	beq.n	8001616 <PWMChannelConfig+0x156>
 800156c:	4a88      	ldr	r2, [pc, #544]	; (8001790 <PWMChannelConfig+0x2d0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f200 809c 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001574:	4a87      	ldr	r2, [pc, #540]	; (8001794 <PWMChannelConfig+0x2d4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d03e      	beq.n	80015f8 <PWMChannelConfig+0x138>
 800157a:	4a86      	ldr	r2, [pc, #536]	; (8001794 <PWMChannelConfig+0x2d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f200 8095 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001582:	4a85      	ldr	r2, [pc, #532]	; (8001798 <PWMChannelConfig+0x2d8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d028      	beq.n	80015da <PWMChannelConfig+0x11a>
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <PWMChannelConfig+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f200 808e 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001590:	4a82      	ldr	r2, [pc, #520]	; (800179c <PWMChannelConfig+0x2dc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <PWMChannelConfig+0xde>
 8001596:	4a82      	ldr	r2, [pc, #520]	; (80017a0 <PWMChannelConfig+0x2e0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00f      	beq.n	80015bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800159c:	e086      	b.n	80016ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
 80015b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80015ba:	e078      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80015d8:	e069      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a70      	ldr	r2, [pc, #448]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80015f6:	e05a      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001614:	e04b      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001632:	e03c      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001650:	e02d      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
		break;
 800166e:	e01e      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
		break;
 800168c:	e00f      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
		break;
 80016aa:	e000      	b.n	80016ae <PWMChannelConfig+0x1ee>
		default: break;
 80016ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <PWMChannelConfig+0x2e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d102      	bne.n	80016cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80016ca:	e04b      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a37      	ldr	r2, [pc, #220]	; (80017ac <PWMChannelConfig+0x2ec>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80016d4:	2301      	movs	r3, #1
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d8:	e044      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <PWMChannelConfig+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016e6:	e03d      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <PWMChannelConfig+0x2f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80016f4:	e036      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <PWMChannelConfig+0x2f8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d102      	bne.n	8001704 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
 8001702:	e02f      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <PWMChannelConfig+0x2fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800170c:	2303      	movs	r3, #3
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001710:	e028      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <PWMChannelConfig+0x300>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800171a:	2303      	movs	r3, #3
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
 800171e:	e021      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <PWMChannelConfig+0x304>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001728:	2303      	movs	r3, #3
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
 800172c:	e01a      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <PWMChannelConfig+0x308>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d102      	bne.n	800173c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001736:	2303      	movs	r3, #3
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
 800173a:	e013      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <PWMChannelConfig+0x30c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001744:	2309      	movs	r3, #9
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
 8001748:	e00c      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <PWMChannelConfig+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001752:	2309      	movs	r3, #9
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
 8001756:	e005      	b.n	8001764 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <PWMChannelConfig+0x314>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001760:	2309      	movs	r3, #9
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f00a fe7a 	bl	800c464 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f00e fa1a 	bl	800fbac <HAL_TIM_PWM_Start>

}
 8001778:	bf00      	nop
 800177a:	3768      	adds	r7, #104	; 0x68
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40022000 	.word	0x40022000
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40021800 	.word	0x40021800
 800178c:	40021400 	.word	0x40021400
 8001790:	40021000 	.word	0x40021000
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	200066cc 	.word	0x200066cc
 80017ac:	200067d0 	.word	0x200067d0
 80017b0:	20006480 	.word	0x20006480
 80017b4:	200062bc 	.word	0x200062bc
 80017b8:	20006440 	.word	0x20006440
 80017bc:	2000627c 	.word	0x2000627c
 80017c0:	2000670c 	.word	0x2000670c
 80017c4:	2000639c 	.word	0x2000639c
 80017c8:	200065e4 	.word	0x200065e4
 80017cc:	200068f0 	.word	0x200068f0
 80017d0:	20006564 	.word	0x20006564
 80017d4:	200068b0 	.word	0x200068b0

080017d8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	72fb      	strb	r3, [r7, #11]
 80017e8:	4613      	mov	r3, r2
 80017ea:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	7afa      	ldrb	r2, [r7, #11]
 80017f0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	893a      	ldrh	r2, [r7, #8]
 80017fc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8bba      	ldrh	r2, [r7, #28]
 8001808:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001814:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8899      	ldrh	r1, [r3, #4]
 800181e:	2301      	movs	r3, #1
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	2201      	movs	r2, #1
 8001826:	f7ff fc6b 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6898      	ldr	r0, [r3, #8]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8999      	ldrh	r1, [r3, #12]
 8001832:	2301      	movs	r3, #1
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2302      	movs	r3, #2
 8001838:	2201      	movs	r2, #1
 800183a:	f7ff fc61 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6918      	ldr	r0, [r3, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8a99      	ldrh	r1, [r3, #20]
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	2201      	movs	r2, #1
 800184e:	f7ff fc57 	bl	8001100 <GPIOPinsInit>

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7d9b      	ldrb	r3, [r3, #22]
 8001866:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f00b f88e 	bl	800c994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	899b      	ldrh	r3, [r3, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	f00b f886 	bl	800c994 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001888:	7bba      	ldrb	r2, [r7, #14]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3206      	adds	r2, #6
 800188e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001892:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001894:	2308      	movs	r3, #8
 8001896:	737b      	strb	r3, [r7, #13]
 8001898:	e02a      	b.n	80018f0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da08      	bge.n	80018b4 <SHIFTREGShift+0x5a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6918      	ldr	r0, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a9b      	ldrh	r3, [r3, #20]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	f00b f871 	bl	800c994 <HAL_GPIO_WritePin>
 80018b2:	e007      	b.n	80018c4 <SHIFTREGShift+0x6a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6918      	ldr	r0, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a9b      	ldrh	r3, [r3, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f00b f868 	bl	800c994 <HAL_GPIO_WritePin>
			out <<= 1;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4619      	mov	r1, r3
 80018d6:	f00b f85d 	bl	800c994 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f00b f855 	bl	800c994 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1d1      	bne.n	800189a <SHIFTREGShift+0x40>
		}
	}while(i--);
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	73ba      	strb	r2, [r7, #14]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1c3      	bne.n	8001888 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	f00b f842 	bl	800c994 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	899b      	ldrh	r3, [r3, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f00b f83a 	bl	800c994 <HAL_GPIO_WritePin>

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_MspInit+0x54>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_MspInit+0x54>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x54>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_MspInit+0x54>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_MspInit+0x54>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_MspInit+0x54>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f009 fe45 	bl	800b5fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_CAN_MspInit+0x128>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d135      	bne.n	8001a0e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10d      	bne.n	80019d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80019ec:	2303      	movs	r3, #3
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019fc:	2309      	movs	r3, #9
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <HAL_CAN_MspInit+0x134>)
 8001a08:	f00a fd2c 	bl	800c464 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a0c:	e048      	b.n	8001aa0 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_CAN_MspInit+0x138>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d143      	bne.n	8001aa0 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10d      	bne.n	8001a62 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a90:	2309      	movs	r3, #9
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_CAN_MspInit+0x13c>)
 8001a9c:	f00a fce2 	bl	800c464 <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40006400 	.word	0x40006400
 8001aac:	2000053c 	.word	0x2000053c
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40006800 	.word	0x40006800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_I2C_MspInit+0x190>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12d      	bne.n	8001b3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b10:	2304      	movs	r3, #4
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	484f      	ldr	r0, [pc, #316]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b1c:	f00a fca2 	bl	800c464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b3c:	e083      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_I2C_MspInit+0x19c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12d      	bne.n	8001ba4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b76:	2304      	movs	r3, #4
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4835      	ldr	r0, [pc, #212]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b82:	f00a fc6f 	bl	800c464 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	e050      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_I2C_MspInit+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d14b      	bne.n	8001c46 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x1a4>)
 8001c04:	f00a fc2e 	bl	800c464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	; (8001c68 <HAL_I2C_MspInit+0x1a8>)
 8001c26:	f00a fc1d 	bl	800c464 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
}
 8001c46:	bf00      	nop
 8001c48:	3738      	adds	r7, #56	; 0x38
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40005800 	.word	0x40005800
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_I2C_MspDeInit+0xb8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d116      	bne.n	8001cac <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4827      	ldr	r0, [pc, #156]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c90:	f00a fd84 	bl	800c79c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c9a:	f00a fd7f 	bl	800c79c <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001c9e:	201f      	movs	r0, #31
 8001ca0:	f009 fcd6 	bl	800b650 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	f009 fcd3 	bl	800b650 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001caa:	e036      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_I2C_MspDeInit+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d116      	bne.n	8001ce4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cc8:	f00a fd68 	bl	800c79c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cd2:	f00a fd63 	bl	800c79c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f009 fcba 	bl	800b650 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001cdc:	2022      	movs	r0, #34	; 0x22
 8001cde:	f009 fcb7 	bl	800b650 <HAL_NVIC_DisableIRQ>
}
 8001ce2:	e01a      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_I2C_MspDeInit+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d115      	bne.n	8001d1a <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <HAL_I2C_MspDeInit+0xcc>)
 8001d00:	f00a fd4c 	bl	800c79c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_I2C_MspDeInit+0xd0>)
 8001d0a:	f00a fd47 	bl	800c79c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001d0e:	2048      	movs	r0, #72	; 0x48
 8001d10:	f009 fc9e 	bl	800b650 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001d14:	2049      	movs	r0, #73	; 0x49
 8001d16:	f009 fc9b 	bl	800b650 <HAL_NVIC_DisableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40005800 	.word	0x40005800
 8001d34:	40005c00 	.word	0x40005c00
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b091      	sub	sp, #68	; 0x44
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8d      	ldr	r2, [pc, #564]	; (8001f84 <HAL_TIM_PWM_MspInit+0x244>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8001d6e:	e102      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a81      	ldr	r2, [pc, #516]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d96:	e0ee      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_TIM_PWM_MspInit+0x24c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001dbe:	e0da      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_TIM_PWM_MspInit+0x250>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a6d      	ldr	r2, [pc, #436]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001de6:	e0c6      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_TIM_PWM_MspInit+0x254>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e0e:	e0b2      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_TIM_PWM_MspInit+0x258>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e36:	e09e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_TIM_PWM_MspInit+0x25c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e5e:	e08a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_TIM_PWM_MspInit+0x260>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
}
 8001e86:	e076      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x264>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
}
 8001eae:	e062      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x268>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	e04e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_TIM_PWM_MspInit+0x26c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
}
 8001efe:	e03a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x270>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
}
 8001f26:	e026      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_TIM_PWM_MspInit+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
}
 8001f4e:	e012      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_PWM_MspInit+0x278>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
}
 8001f76:	bf00      	nop
 8001f78:	3744      	adds	r7, #68	; 0x44
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40001000 	.word	0x40001000
 8001f9c:	40001400 	.word	0x40001400
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40001800 	.word	0x40001800
 8001fb4:	40001c00 	.word	0x40001c00
 8001fb8:	40002000 	.word	0x40002000

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b091      	sub	sp, #68	; 0x44
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a8d      	ldr	r2, [pc, #564]	; (8002200 <HAL_TIM_Base_MspInit+0x244>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd2:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a8b      	ldr	r2, [pc, #556]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8001fea:	e102      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002012:	e0ee      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7b      	ldr	r2, [pc, #492]	; (8002208 <HAL_TIM_Base_MspInit+0x24c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10e      	bne.n	800203c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800203a:	e0da      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_TIM_Base_MspInit+0x250>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a6d      	ldr	r2, [pc, #436]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002062:	e0c6      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_TIM_Base_MspInit+0x254>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10e      	bne.n	800208c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800208a:	e0b2      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a60      	ldr	r2, [pc, #384]	; (8002214 <HAL_TIM_Base_MspInit+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a59      	ldr	r2, [pc, #356]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020b2:	e09e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_TIM_Base_MspInit+0x25c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c8:	f043 0320 	orr.w	r3, r3, #32
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020da:	e08a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_TIM_Base_MspInit+0x260>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a45      	ldr	r2, [pc, #276]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
}
 8002102:	e076      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a45      	ldr	r2, [pc, #276]	; (8002220 <HAL_TIM_Base_MspInit+0x264>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10e      	bne.n	800212c <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
}
 800212a:	e062      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_TIM_Base_MspInit+0x268>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
}
 8002152:	e04e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_TIM_Base_MspInit+0x26c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10e      	bne.n	800217c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a27      	ldr	r2, [pc, #156]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
}
 800217a:	e03a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_TIM_Base_MspInit+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
}
 80021a2:	e026      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_TIM_Base_MspInit+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	e012      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_MspInit+0x278>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3744      	adds	r7, #68	; 0x44
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40001000 	.word	0x40001000
 8002218:	40001400 	.word	0x40001400
 800221c:	40010400 	.word	0x40010400
 8002220:	40014000 	.word	0x40014000
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800
 800222c:	40001800 	.word	0x40001800
 8002230:	40001c00 	.word	0x40001c00
 8002234:	40002000 	.word	0x40002000

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b094      	sub	sp, #80	; 0x50
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a8c      	ldr	r2, [pc, #560]	; (8002488 <HAL_UART_MspInit+0x250>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12d      	bne.n	80022b6 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_UART_MspInit+0x254>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_UART_MspInit+0x254>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_UART_MspInit+0x254>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_UART_MspInit+0x254>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_UART_MspInit+0x254>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_UART_MspInit+0x254>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ac:	4619      	mov	r1, r3
 80022ae:	4878      	ldr	r0, [pc, #480]	; (8002490 <HAL_UART_MspInit+0x258>)
 80022b0:	f00a f8d8 	bl	800c464 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 80022b4:	e12b      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_UART_MspInit+0x25c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12c      	bne.n	800231a <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_UART_MspInit+0x254>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a70      	ldr	r2, [pc, #448]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_UART_MspInit+0x254>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002308:	2307      	movs	r3, #7
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002310:	4619      	mov	r1, r3
 8002312:	4861      	ldr	r0, [pc, #388]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002314:	f00a f8a6 	bl	800c464 <HAL_GPIO_Init>
}
 8002318:	e0f9      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_UART_MspInit+0x264>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12d      	bne.n	8002380 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_UART_MspInit+0x254>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_UART_MspInit+0x254>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_UART_MspInit+0x254>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_UART_MspInit+0x254>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_UART_MspInit+0x254>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_UART_MspInit+0x254>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002376:	4619      	mov	r1, r3
 8002378:	4847      	ldr	r0, [pc, #284]	; (8002498 <HAL_UART_MspInit+0x260>)
 800237a:	f00a f873 	bl	800c464 <HAL_GPIO_Init>
}
 800237e:	e0c6      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_UART_MspInit+0x268>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12d      	bne.n	80023e6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_UART_MspInit+0x254>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a3e      	ldr	r2, [pc, #248]	; (800248c <HAL_UART_MspInit+0x254>)
 8002394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_UART_MspInit+0x254>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_UART_MspInit+0x254>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023d4:	2308      	movs	r3, #8
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023dc:	4619      	mov	r1, r3
 80023de:	4831      	ldr	r0, [pc, #196]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 80023e0:	f00a f840 	bl	800c464 <HAL_GPIO_Init>
}
 80023e4:	e093      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <HAL_UART_MspInit+0x270>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d15d      	bne.n	80024ac <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_UART_MspInit+0x254>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_UART_MspInit+0x254>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_UART_MspInit+0x254>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_UART_MspInit+0x254>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_UART_MspInit+0x254>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6313      	str	r3, [r2, #48]	; 0x30
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x254>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x254>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_UART_MspInit+0x254>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x254>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002456:	2308      	movs	r3, #8
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800245e:	4619      	mov	r1, r3
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 8002462:	f009 ffff 	bl	800c464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002466:	2304      	movs	r3, #4
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002476:	2308      	movs	r3, #8
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002482:	f009 ffef 	bl	800c464 <HAL_GPIO_Init>
}
 8002486:	e042      	b.n	800250e <HAL_UART_MspInit+0x2d6>
 8002488:	40011000 	.word	0x40011000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40004400 	.word	0x40004400
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40004800 	.word	0x40004800
 80024a0:	40004c00 	.word	0x40004c00
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_UART_MspInit+0x2e0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12b      	bne.n	800250e <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024fe:	2308      	movs	r3, #8
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_UART_MspInit+0x2e8>)
 800250a:	f009 ffab 	bl	800c464 <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3750      	adds	r7, #80	; 0x50
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40011400 	.word	0x40011400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800

08002524 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_SPI_MspInit+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13c      	bne.n	80025c0 <HAL_SPI_MspInit+0x9c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	4b69      	ldr	r3, [pc, #420]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a61      	ldr	r2, [pc, #388]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800257e:	2320      	movs	r3, #32
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4856      	ldr	r0, [pc, #344]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 800259a:	f009 ff63 	bl	800c464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800259e:	23c0      	movs	r3, #192	; 0xc0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	484e      	ldr	r0, [pc, #312]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 80025ba:	f009 ff53 	bl	800c464 <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


  }

}
 80025be:	e090      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
  }else if (hspi->Instance==SPI2){
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_SPI_MspInit+0x1d4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d13e      	bne.n	8002648 <HAL_SPI_MspInit+0x124>
	  __HAL_RCC_SPI2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002614:	2305      	movs	r3, #5
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4837      	ldr	r0, [pc, #220]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002620:	f009 ff20 	bl	800c464 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002624:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800262e:	2302      	movs	r3, #2
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002636:	2305      	movs	r3, #5
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	482e      	ldr	r0, [pc, #184]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002642:	f009 ff0f 	bl	800c464 <HAL_GPIO_Init>
}
 8002646:	e04c      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002680:	2308      	movs	r3, #8
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002690:	2306      	movs	r3, #6
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4818      	ldr	r0, [pc, #96]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 800269c:	f009 fee2 	bl	800c464 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a0:	2310      	movs	r3, #16
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b0:	2306      	movs	r3, #6
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4810      	ldr	r0, [pc, #64]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 80026bc:	f009 fed2 	bl	800c464 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ca:	2302      	movs	r3, #2
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d2:	2306      	movs	r3, #6
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_SPI_MspInit+0x1dc>)
 80026de:	f009 fec1 	bl	800c464 <HAL_GPIO_Init>
}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40013000 	.word	0x40013000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40003800 	.word	0x40003800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800

08002704 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	2230      	movs	r2, #48	; 0x30
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f012 fe6a 	bl	80153ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <SystemClock_Config+0xd0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <SystemClock_Config+0xd0>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <SystemClock_Config+0xd0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <SystemClock_Config+0xd4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <SystemClock_Config+0xd4>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <SystemClock_Config+0xd4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002760:	2301      	movs	r3, #1
 8002762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276a:	2302      	movs	r3, #2
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002774:	2308      	movs	r3, #8
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277e:	2302      	movs	r3, #2
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4618      	mov	r0, r3
 800278c:	f00c f964 	bl	800ea58 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002796:	f003 f865 	bl	8005864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2105      	movs	r1, #5
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00c fbbd 	bl	800ef38 <HAL_RCC_ClockConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027c4:	f003 f84e 	bl	8005864 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80027c8:	f00c fc9c 	bl	800f104 <HAL_RCC_EnableCSS>
}
 80027cc:	bf00      	nop
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000

080027dc <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <TIMxInit+0x290>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d105      	bne.n	800280e <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a9a      	ldr	r2, [pc, #616]	; (8002a70 <TIMxInit+0x294>)
 8002806:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002808:	2319      	movs	r3, #25
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e081      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <TIMxInit+0x298>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d106      	bne.n	8002824 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800281c:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 800281e:	231c      	movs	r3, #28
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e076      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a94      	ldr	r2, [pc, #592]	; (8002a78 <TIMxInit+0x29c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d105      	bne.n	8002838 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a93      	ldr	r2, [pc, #588]	; (8002a7c <TIMxInit+0x2a0>)
 8002830:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002832:	231d      	movs	r3, #29
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e06c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a91      	ldr	r2, [pc, #580]	; (8002a80 <TIMxInit+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d105      	bne.n	800284c <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <TIMxInit+0x2a8>)
 8002844:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002846:	231e      	movs	r3, #30
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e062      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a8e      	ldr	r2, [pc, #568]	; (8002a88 <TIMxInit+0x2ac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d105      	bne.n	8002860 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <TIMxInit+0x2b0>)
 8002858:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800285a:	2332      	movs	r3, #50	; 0x32
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e058      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a8b      	ldr	r2, [pc, #556]	; (8002a90 <TIMxInit+0x2b4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d105      	bne.n	8002874 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a8a      	ldr	r2, [pc, #552]	; (8002a94 <TIMxInit+0x2b8>)
 800286c:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 800286e:	2336      	movs	r3, #54	; 0x36
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e04e      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a88      	ldr	r2, [pc, #544]	; (8002a98 <TIMxInit+0x2bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d105      	bne.n	8002888 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <TIMxInit+0x2c0>)
 8002880:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002882:	2337      	movs	r3, #55	; 0x37
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e044      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <TIMxInit+0x2c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d105      	bne.n	800289c <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a84      	ldr	r2, [pc, #528]	; (8002aa4 <TIMxInit+0x2c8>)
 8002894:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002896:	232e      	movs	r3, #46	; 0x2e
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e03a      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a82      	ldr	r2, [pc, #520]	; (8002aa8 <TIMxInit+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d105      	bne.n	80028b0 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <TIMxInit+0x2d0>)
 80028a8:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 80028aa:	2318      	movs	r3, #24
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e030      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <TIMxInit+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d105      	bne.n	80028c4 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a7e      	ldr	r2, [pc, #504]	; (8002ab4 <TIMxInit+0x2d8>)
 80028bc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80028be:	2319      	movs	r3, #25
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e026      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <TIMxInit+0x2dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d105      	bne.n	80028d8 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <TIMxInit+0x2e0>)
 80028d0:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 80028d2:	231a      	movs	r3, #26
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e01c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <TIMxInit+0x2e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d105      	bne.n	80028ec <TIMxInit+0x110>
		htimx->Instance = TIM12;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <TIMxInit+0x2e8>)
 80028e4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 80028e6:	232b      	movs	r3, #43	; 0x2b
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e012      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <TIMxInit+0x2ec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d105      	bne.n	8002900 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <TIMxInit+0x2f0>)
 80028f8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 80028fa:	232c      	movs	r3, #44	; 0x2c
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e008      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <TIMxInit+0x2f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d104      	bne.n	8002912 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <TIMxInit+0x2f8>)
 800290c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 800290e:	232d      	movs	r3, #45	; 0x2d
 8002910:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002912:	883a      	ldrh	r2, [r7, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f00d f8a0 	bl	800fa70 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <TIMxInit+0x15e>
	{
		Error_Handler();
 8002936:	f002 ff95 	bl	8005864 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f00d ff37 	bl	80107bc <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <TIMxInit+0x17c>
	{
		Error_Handler();
 8002954:	f002 ff86 	bl	8005864 <Error_Handler>
	}

	if(htimx == &htim1){
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a44      	ldr	r2, [pc, #272]	; (8002a6c <TIMxInit+0x290>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f000 80cb 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <TIMxInit+0x298>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f000 80c6 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <TIMxInit+0x29c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	f000 80c1 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <TIMxInit+0x2a4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f000 80bc 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a41      	ldr	r2, [pc, #260]	; (8002a88 <TIMxInit+0x2ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f000 80b7 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <TIMxInit+0x2b4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10c      	bne.n	80029ac <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	2107      	movs	r1, #7
 800299a:	4618      	mov	r0, r3
 800299c:	f008 fe2e 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 fe45 	bl	800b634 <HAL_NVIC_EnableIRQ>
 80029aa:	e0a5      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <TIMxInit+0x2bc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10c      	bne.n	80029ce <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	210e      	movs	r1, #14
 80029bc:	4618      	mov	r0, r3
 80029be:	f008 fe1d 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f008 fe34 	bl	800b634 <HAL_NVIC_EnableIRQ>
 80029cc:	e094      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <TIMxInit+0x2c4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 8090 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <TIMxInit+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f000 808b 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <TIMxInit+0x2d4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	210e      	movs	r1, #14
 80029f2:	4618      	mov	r0, r3
 80029f4:	f008 fe02 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 fe19 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002a02:	e079      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <TIMxInit+0x2dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10c      	bne.n	8002a26 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	210e      	movs	r1, #14
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 fdf1 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 fe08 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002a24:	e068      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIMxInit+0x2e4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	210e      	movs	r1, #14
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fde0 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f008 fdf7 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002a46:	e057      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIMxInit+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d143      	bne.n	8002ad8 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	210e      	movs	r1, #14
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f008 fdcf 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f008 fde6 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002a68:	e046      	b.n	8002af8 <TIMxInit+0x31c>
 8002a6a:	bf00      	nop
 8002a6c:	200066cc 	.word	0x200066cc
 8002a70:	40010000 	.word	0x40010000
 8002a74:	200067d0 	.word	0x200067d0
 8002a78:	20006480 	.word	0x20006480
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	200062bc 	.word	0x200062bc
 8002a84:	40000800 	.word	0x40000800
 8002a88:	20006440 	.word	0x20006440
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	2000668c 	.word	0x2000668c
 8002a94:	40001000 	.word	0x40001000
 8002a98:	20006930 	.word	0x20006930
 8002a9c:	40001400 	.word	0x40001400
 8002aa0:	2000627c 	.word	0x2000627c
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	2000670c 	.word	0x2000670c
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	2000639c 	.word	0x2000639c
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	200065e4 	.word	0x200065e4
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	200068f0 	.word	0x200068f0
 8002ac4:	40001800 	.word	0x40001800
 8002ac8:	20006564 	.word	0x20006564
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	200068b0 	.word	0x200068b0
 8002ad4:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIMxInit+0x330>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10b      	bne.n	8002af8 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	210e      	movs	r1, #14
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f008 fd87 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f008 fd9e 	bl	800b634 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00c ffe4 	bl	800fac6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f00d f805 	bl	800fb0e <HAL_TIM_Base_Start_IT>

}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200068b0 	.word	0x200068b0

08002b10 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <UARTInit+0x1cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <UARTInit+0x26>
		huartx->Instance = USART1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a6d      	ldr	r2, [pc, #436]	; (8002ce0 <UARTInit+0x1d0>)
 8002b2a:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8002b2c:	2325      	movs	r3, #37	; 0x25
 8002b2e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <UARTInit+0x1d4>)
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e036      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a6b      	ldr	r2, [pc, #428]	; (8002ce8 <UARTInit+0x1d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d107      	bne.n	8002b4e <UARTInit+0x3e>
		huartx->Instance = USART2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <UARTInit+0x1dc>)
 8002b42:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8002b44:	2326      	movs	r3, #38	; 0x26
 8002b46:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8002b48:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <UARTInit+0x1e0>)
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e02a      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart3){
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <UARTInit+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d107      	bne.n	8002b66 <UARTInit+0x56>
		huartx->Instance = USART3;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <UARTInit+0x1e8>)
 8002b5a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8002b5c:	2327      	movs	r3, #39	; 0x27
 8002b5e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <UARTInit+0x1ec>)
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e01e      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <UARTInit+0x1f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <UARTInit+0x6e>
		huartx->Instance = UART4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <UARTInit+0x1f4>)
 8002b72:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8002b74:	2334      	movs	r3, #52	; 0x34
 8002b76:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <UARTInit+0x1f8>)
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e012      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart5){
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a62      	ldr	r2, [pc, #392]	; (8002d0c <UARTInit+0x1fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d107      	bne.n	8002b96 <UARTInit+0x86>
		huartx->Instance = UART5;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <UARTInit+0x200>)
 8002b8a:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8002b8c:	2335      	movs	r3, #53	; 0x35
 8002b8e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <UARTInit+0x204>)
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e006      	b.n	8002ba4 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a5f      	ldr	r2, [pc, #380]	; (8002d18 <UARTInit+0x208>)
 8002b9a:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8002b9c:	2347      	movs	r3, #71	; 0x47
 8002b9e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <UARTInit+0x20c>)
 8002ba2:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f00d fe84 	bl	80108dc <HAL_UART_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <UARTInit+0xce>
	{
		Error_Handler();
 8002bda:	f002 fe43 	bl	8005864 <Error_Handler>
	}

	if(rxstate == ENABLE){
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d176      	bne.n	8002cd2 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <UARTInit+0x1d8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f008 fd01 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f008 fd34 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f008 fd13 	bl	800b634 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 8002c1e:	e058      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <UARTInit+0x1e4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d119      	bne.n	8002c5c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	210e      	movs	r1, #14
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fce3 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f008 fd16 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f008 fcf5 	bl	800b634 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	60da      	str	r2, [r3, #12]
}
 8002c5a:	e03a      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <UARTInit+0x1f0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d119      	bne.n	8002c98 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2106      	movs	r1, #6
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f008 fcc5 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f008 fcf8 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f008 fcd7 	bl	800b634 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	60da      	str	r2, [r3, #12]
}
 8002c96:	e01c      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <UARTInit+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d118      	bne.n	8002cd2 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	210e      	movs	r1, #14
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 fca7 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f008 fcda 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f008 fcb9 	bl	800b634 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	60da      	str	r2, [r3, #12]
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	200065a4 	.word	0x200065a4
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	20006278 	.word	0x20006278
 8002ce8:	20006810 	.word	0x20006810
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	20006624 	.word	0x20006624
 8002cf4:	2000635c 	.word	0x2000635c
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	200064c1 	.word	0x200064c1
 8002d00:	20006790 	.word	0x20006790
 8002d04:	40004c00 	.word	0x40004c00
 8002d08:	2000678c 	.word	0x2000678c
 8002d0c:	200064c4 	.word	0x200064c4
 8002d10:	40005000 	.word	0x40005000
 8002d14:	2000643c 	.word	0x2000643c
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	200064c0 	.word	0x200064c0

08002d20 <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <UARTx_DMA_Rx_Init+0x180>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d119      	bne.n	8002d84 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 8002d50:	2310      	movs	r3, #16
 8002d52:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <UARTx_DMA_Rx_Init+0x184>)
 8002d58:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5e:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 fc47 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002d6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 fc7a 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002d78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f008 fc59 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002d82:	e058      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <UARTx_DMA_Rx_Init+0x188>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d119      	bne.n	8002dc0 <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a46      	ldr	r2, [pc, #280]	; (8002eac <UARTx_DMA_Rx_Init+0x18c>)
 8002d94:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002d9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002da0:	2200      	movs	r2, #0
 8002da2:	210e      	movs	r1, #14
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 fc29 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002daa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 fc5c 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002db4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f008 fc3b 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002dbe:	e03a      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <UARTx_DMA_Rx_Init+0x190>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d119      	bne.n	8002dfc <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 8002dc8:	230d      	movs	r3, #13
 8002dca:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a39      	ldr	r2, [pc, #228]	; (8002eb4 <UARTx_DMA_Rx_Init+0x194>)
 8002dd0:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dd6:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002dd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2106      	movs	r1, #6
 8002de0:	4618      	mov	r0, r3
 8002de2:	f008 fc0b 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002de6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f008 fc3e 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 fc1d 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8002dfa:	e01c      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <UARTx_DMA_Rx_Init+0x198>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d118      	bne.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 8002e04:	230b      	movs	r3, #11
 8002e06:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <UARTx_DMA_Rx_Init+0x19c>)
 8002e0c:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e12:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002e14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	210e      	movs	r1, #14
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f008 fbed 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f008 fc20 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002e2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 fbff 	bl	800b634 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8002e36:	2200      	movs	r2, #0
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff fe68 	bl	8002b10 <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e58:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f008 fc05 	bl	800b688 <HAL_DMA_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8002e84:	f002 fcee 	bl	8005864 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	20006218 	.word	0x20006218
 8002ea4:	40026088 	.word	0x40026088
 8002ea8:	200062fc 	.word	0x200062fc
 8002eac:	40026028 	.word	0x40026028
 8002eb0:	200061b8 	.word	0x200061b8
 8002eb4:	40026040 	.word	0x40026040
 8002eb8:	20006850 	.word	0x20006850
 8002ebc:	40026010 	.word	0x40026010

08002ec0 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <USART1_IRQHandler+0x10>)
 8002ec6:	f00d fe6f 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200065a4 	.word	0x200065a4

08002ed4 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART2_IRQHandler+0x10>)
 8002eda:	f00d fe65 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20006810 	.word	0x20006810

08002ee8 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <USART3_IRQHandler+0x10>)
 8002eee:	f00d fe5b 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000635c 	.word	0x2000635c

08002efc <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <UART4_IRQHandler+0x10>)
 8002f02:	f00d fe51 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20006790 	.word	0x20006790

08002f10 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <UART5_IRQHandler+0x10>)
 8002f16:	f00d fe47 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200064c4 	.word	0x200064c4

08002f24 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <USART6_IRQHandler+0x10>)
 8002f2a:	f00d fe3d 	bl	8010ba8 <HAL_UART_IRQHandler>
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000674c 	.word	0x2000674c

08002f38 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2228      	movs	r2, #40	; 0x28
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f012 fa49 	bl	80153ec <memset>

	if(hcanx == &hcan1){
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a53      	ldr	r2, [pc, #332]	; (80030ac <CANxInit+0x174>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d103      	bne.n	8002f6a <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <CANxInit+0x178>)
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e002      	b.n	8002f70 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <CANxInit+0x17c>)
 8002f6e:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8002f70:	897a      	ldrh	r2, [r7, #10]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8002f82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002f90:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f98:	615a      	str	r2, [r3, #20]
 8002f9a:	e00b      	b.n	8002fb4 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8002f9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8002faa:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8002fb2:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f007 fb87 	bl	800a6ec <HAL_CAN_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <CANxInit+0xb0>
	{
		Error_Handler();
 8002fe4:	f002 fc3e 	bl	8005864 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8002fe8:	230e      	movs	r3, #14
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 8003002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003006:	015b      	lsls	r3, r3, #5
 8003008:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003012:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f007 fc60 	bl	800a8e4 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a21      	ldr	r2, [pc, #132]	; (80030ac <CANxInit+0x174>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d11c      	bne.n	8003066 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	210e      	movs	r1, #14
 8003036:	2014      	movs	r0, #20
 8003038:	f008 fae0 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800303c:	2014      	movs	r0, #20
 800303e:	f008 faf9 	bl	800b634 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003042:	2102      	movs	r1, #2
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f007 ff93 	bl	800af70 <HAL_CAN_ActivateNotification>
 800304a:	e028      	b.n	800309e <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	210e      	movs	r1, #14
 8003050:	2015      	movs	r0, #21
 8003052:	f008 fad3 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003056:	2015      	movs	r0, #21
 8003058:	f008 faec 	bl	800b634 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 800305c:	2110      	movs	r1, #16
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f007 ff86 	bl	800af70 <HAL_CAN_ActivateNotification>
 8003064:	e01b      	b.n	800309e <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	210e      	movs	r1, #14
 8003070:	2040      	movs	r0, #64	; 0x40
 8003072:	f008 fac3 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003076:	2040      	movs	r0, #64	; 0x40
 8003078:	f008 fadc 	bl	800b634 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800307c:	2102      	movs	r1, #2
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f007 ff76 	bl	800af70 <HAL_CAN_ActivateNotification>
 8003084:	e00b      	b.n	800309e <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	210e      	movs	r1, #14
 800308a:	2041      	movs	r0, #65	; 0x41
 800308c:	f008 fab6 	bl	800b5fc <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003090:	2041      	movs	r0, #65	; 0x41
 8003092:	f008 facf 	bl	800b634 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003096:	2110      	movs	r1, #16
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f007 ff69 	bl	800af70 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f007 fd00 	bl	800aaa4 <HAL_CAN_Start>

}
 80030a4:	bf00      	nop
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20006c94 	.word	0x20006c94
 80030b0:	40006400 	.word	0x40006400
 80030b4:	40006800 	.word	0x40006800

080030b8 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b090      	sub	sp, #64	; 0x40
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80030c6:	bf00      	nop
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f007 fe0a 	bl	800ace2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f9      	beq.n	80030c8 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80030d8:	2300      	movs	r3, #0
 80030da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80030f6:	e00c      	b.n	8003112 <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003100:	1c51      	adds	r1, r2, #1
 8003102:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003104:	4611      	mov	r1, r2
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800310c:	440b      	add	r3, r1
 800310e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003112:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	873a      	strh	r2, [r7, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ed      	bne.n	80030f8 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 800311c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00f      	beq.n	8003142 <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 8003122:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	f107 0214 	add.w	r2, r7, #20
 800312e:	f107 0120 	add.w	r1, r7, #32
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f007 fcfa 	bl	800ab2c <HAL_CAN_AddTxMessage>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <CAN_TxMsg+0x8a>
			Error_Handler();
 800313e:	f002 fb91 	bl	8005864 <Error_Handler>
		}

	}

	return(canMailbox);
 8003142:	69fb      	ldr	r3, [r7, #28]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3740      	adds	r7, #64	; 0x40
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 800315a:	bf00      	nop
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f007 fdc0 	bl	800ace2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f9      	beq.n	800315c <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 800316c:	2300      	movs	r3, #0
 800316e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 800317c:	2304      	movs	r3, #4
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 800318a:	e01f      	b.n	80031cc <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003192:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003194:	1c51      	adds	r1, r2, #1
 8003196:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003198:	4611      	mov	r1, r2
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031a0:	440b      	add	r3, r1
 80031a2:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 80031a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d10f      	bne.n	80031cc <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	f107 0214 	add.w	r2, r7, #20
 80031b8:	f107 0120 	add.w	r1, r7, #32
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f007 fcb5 	bl	800ab2c <HAL_CAN_AddTxMessage>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <CAN_TxMsgEID+0x80>
				Error_Handler();
 80031c8:	f002 fb4c 	bl	8005864 <Error_Handler>
	while(datalen--)
 80031cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	873a      	strh	r2, [r7, #56]	; 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1da      	bne.n	800318c <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80031d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00f      	beq.n	80031fc <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80031dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	f107 0214 	add.w	r2, r7, #20
 80031e8:	f107 0120 	add.w	r1, r7, #32
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f007 fc9d 	bl	800ab2c <HAL_CAN_AddTxMessage>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80031f8:	f002 fb34 	bl	8005864 <Error_Handler>
		}

	}

	return(canMailbox);
 80031fc:	69fb      	ldr	r3, [r7, #28]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3740      	adds	r7, #64	; 0x40
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <GetSector>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

uint32_t GetSector(uint32_t Address)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  static uint32_t sector = 0;

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <GetSector+0xd8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <GetSector+0x20>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d303      	bcc.n	8003228 <GetSector+0x20>
  {
    sector = FLASH_SECTOR_0;
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <GetSector+0xdc>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e052      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <GetSector+0xe0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d807      	bhi.n	8003240 <GetSector+0x38>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <GetSector+0xe4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d303      	bcc.n	8003240 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <GetSector+0xdc>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e046      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <GetSector+0xe8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d807      	bhi.n	8003258 <GetSector+0x50>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <GetSector+0xec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d303      	bcc.n	8003258 <GetSector+0x50>
  {
    sector = FLASH_SECTOR_2;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <GetSector+0xdc>)
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e03a      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <GetSector+0xf0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d207      	bcs.n	8003270 <GetSector+0x68>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a26      	ldr	r2, [pc, #152]	; (80032fc <GetSector+0xf4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d303      	bcc.n	8003270 <GetSector+0x68>
  {
    sector = FLASH_SECTOR_3;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <GetSector+0xdc>)
 800326a:	2203      	movs	r2, #3
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e02e      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <GetSector+0xf8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d207      	bcs.n	8003288 <GetSector+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <GetSector+0xf0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d903      	bls.n	8003288 <GetSector+0x80>
  {
    sector = FLASH_SECTOR_4;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <GetSector+0xdc>)
 8003282:	2204      	movs	r2, #4
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e022      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <GetSector+0xfc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d207      	bcs.n	80032a0 <GetSector+0x98>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <GetSector+0xf8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d903      	bls.n	80032a0 <GetSector+0x98>
  {
    sector = FLASH_SECTOR_5;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <GetSector+0xdc>)
 800329a:	2205      	movs	r2, #5
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e016      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a19      	ldr	r2, [pc, #100]	; (8003308 <GetSector+0x100>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d207      	bcs.n	80032b8 <GetSector+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <GetSector+0xfc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d903      	bls.n	80032b8 <GetSector+0xb0>
  {
    sector = FLASH_SECTOR_6;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <GetSector+0xdc>)
 80032b2:	2206      	movs	r2, #6
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e00a      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <GetSector+0x104>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d206      	bcs.n	80032ce <GetSector+0xc6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a11      	ldr	r2, [pc, #68]	; (8003308 <GetSector+0x100>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d902      	bls.n	80032ce <GetSector+0xc6>
  {
    sector = FLASH_SECTOR_7;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <GetSector+0xdc>)
 80032ca:	2207      	movs	r2, #7
 80032cc:	601a      	str	r2, [r3, #0]
  }
  return sector;
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <GetSector+0xdc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	08003ffe 	.word	0x08003ffe
 80032e4:	20000540 	.word	0x20000540
 80032e8:	08007ffe 	.word	0x08007ffe
 80032ec:	08004000 	.word	0x08004000
 80032f0:	0800bffe 	.word	0x0800bffe
 80032f4:	08008000 	.word	0x08008000
 80032f8:	0800ffff 	.word	0x0800ffff
 80032fc:	0800c000 	.word	0x0800c000
 8003300:	0801ffff 	.word	0x0801ffff
 8003304:	0803ffff 	.word	0x0803ffff
 8003308:	0805ffff 	.word	0x0805ffff
 800330c:	0807ffff 	.word	0x0807ffff

08003310 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a9d      	ldr	r2, [pc, #628]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 800332a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b9b      	ldr	r3, [pc, #620]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a99      	ldr	r2, [pc, #612]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d11d      	bne.n	8003380 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a98      	ldr	r2, [pc, #608]	; (80035a8 <I2CX_DMA_RX_Init+0x298>)
 8003348:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a97      	ldr	r2, [pc, #604]	; (80035ac <I2CX_DMA_RX_Init+0x29c>)
 800334e:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003354:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003356:	230b      	movs	r3, #11
 8003358:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 800335a:	2320      	movs	r3, #32
 800335c:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 800335e:	231f      	movs	r3, #31
 8003360:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a8d      	ldr	r2, [pc, #564]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 800336c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	e022      	b.n	80033c6 <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a8b      	ldr	r2, [pc, #556]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10f      	bne.n	80033a8 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a8a      	ldr	r2, [pc, #552]	; (80035b4 <I2CX_DMA_RX_Init+0x2a4>)
 800338c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a89      	ldr	r2, [pc, #548]	; (80035b8 <I2CX_DMA_RX_Init+0x2a8>)
 8003392:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003394:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003398:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 800339a:	230e      	movs	r3, #14
 800339c:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 800339e:	2322      	movs	r3, #34	; 0x22
 80033a0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 80033a2:	2321      	movs	r3, #33	; 0x21
 80033a4:	777b      	strb	r3, [r7, #29]
 80033a6:	e00e      	b.n	80033c6 <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a84      	ldr	r2, [pc, #528]	; (80035bc <I2CX_DMA_RX_Init+0x2ac>)
 80033ac:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <I2CX_DMA_RX_Init+0x2b0>)
 80033b2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 80033b4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80033b8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 80033ba:	230d      	movs	r3, #13
 80033bc:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 80033be:	2349      	movs	r3, #73	; 0x49
 80033c0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 80033c2:	2348      	movs	r3, #72	; 0x48
 80033c4:	777b      	strb	r3, [r7, #29]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e2:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d118      	bne.n	8003436 <I2CX_DMA_RX_Init+0x126>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003404:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f008 f8f5 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003412:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003416:	4618      	mov	r0, r3
 8003418:	f008 f90c 	bl	800b634 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 800341c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003420:	2200      	movs	r2, #0
 8003422:	2108      	movs	r1, #8
 8003424:	4618      	mov	r0, r3
 8003426:	f008 f8e9 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 800342a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800342e:	4618      	mov	r0, r3
 8003430:	f008 f900 	bl	800b634 <HAL_NVIC_EnableIRQ>
 8003434:	e034      	b.n	80034a0 <I2CX_DMA_RX_Init+0x190>
	}else if(hi2cx == &hi2c2){
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d118      	bne.n	8003470 <I2CX_DMA_RX_Init+0x160>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 800343e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003442:	2200      	movs	r2, #0
 8003444:	210e      	movs	r1, #14
 8003446:	4618      	mov	r0, r3
 8003448:	f008 f8d8 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800344c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003450:	4618      	mov	r0, r3
 8003452:	f008 f8ef 	bl	800b634 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003456:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800345a:	2200      	movs	r2, #0
 800345c:	210e      	movs	r1, #14
 800345e:	4618      	mov	r0, r3
 8003460:	f008 f8cc 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003464:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003468:	4618      	mov	r0, r3
 800346a:	f008 f8e3 	bl	800b634 <HAL_NVIC_EnableIRQ>
 800346e:	e017      	b.n	80034a0 <I2CX_DMA_RX_Init+0x190>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003470:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003474:	2200      	movs	r2, #0
 8003476:	210e      	movs	r1, #14
 8003478:	4618      	mov	r0, r3
 800347a:	f008 f8bf 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800347e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003482:	4618      	mov	r0, r3
 8003484:	f008 f8d6 	bl	800b634 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003488:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800348c:	2200      	movs	r2, #0
 800348e:	210e      	movs	r1, #14
 8003490:	4618      	mov	r0, r3
 8003492:	f008 f8b3 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003496:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800349a:	4618      	mov	r0, r3
 800349c:	f008 f8ca 	bl	800b634 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f009 fa91 	bl	800c9c8 <HAL_I2C_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2CX_DMA_RX_Init+0x1a0>
	{

		Error_Handler();
 80034ac:	f002 f9da 	bl	8005864 <Error_Handler>
	}


	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c8:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e2:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2203      	movs	r2, #3
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f008 f8c1 	bl	800b688 <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2CX_DMA_RX_Init+0x200>
	{

		Error_Handler();
 800350c:	f002 f9aa 	bl	8005864 <Error_Handler>

	}


	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <I2CX_DMA_RX_Init+0x238>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003524:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003528:	2200      	movs	r2, #0
 800352a:	210a      	movs	r1, #10
 800352c:	4618      	mov	r0, r3
 800352e:	f008 f865 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003532:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003536:	4618      	mov	r0, r3
 8003538:	f008 f898 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800353c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003540:	4618      	mov	r0, r3
 8003542:	f008 f877 	bl	800b634 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
		HAL_NVIC_ClearPendingIRQ(nvic);
		HAL_NVIC_EnableIRQ(nvic);
	}

}
 8003546:	e026      	b.n	8003596 <I2CX_DMA_RX_Init+0x286>
	}else if(hi2cx == &hi2c2){
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <I2CX_DMA_RX_Init+0x264>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003554:	2200      	movs	r2, #0
 8003556:	210e      	movs	r1, #14
 8003558:	4618      	mov	r0, r3
 800355a:	f008 f84f 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800355e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003562:	4618      	mov	r0, r3
 8003564:	f008 f882 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800356c:	4618      	mov	r0, r3
 800356e:	f008 f861 	bl	800b634 <HAL_NVIC_EnableIRQ>
}
 8003572:	e010      	b.n	8003596 <I2CX_DMA_RX_Init+0x286>
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003574:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003578:	2200      	movs	r2, #0
 800357a:	210e      	movs	r1, #14
 800357c:	4618      	mov	r0, r3
 800357e:	f008 f83d 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003586:	4618      	mov	r0, r3
 8003588:	f008 f870 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800358c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003590:	4618      	mov	r0, r3
 8003592:	f008 f84f 	bl	800b634 <HAL_NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	20007248 	.word	0x20007248
 80035a8:	40005400 	.word	0x40005400
 80035ac:	40026010 	.word	0x40026010
 80035b0:	2000729c 	.word	0x2000729c
 80035b4:	40005800 	.word	0x40005800
 80035b8:	40026058 	.word	0x40026058
 80035bc:	40005c00 	.word	0x40005c00
 80035c0:	40026040 	.word	0x40026040

080035c4 <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <I2C1_EV_IRQHandler+0x10>)
 80035ca:	f009 fc87 	bl	800cedc <HAL_I2C_EV_IRQHandler>

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20007248 	.word	0x20007248

080035d8 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <I2C2_EV_IRQHandler+0x10>)
 80035de:	f009 fc7d 	bl	800cedc <HAL_I2C_EV_IRQHandler>


}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000729c 	.word	0x2000729c

080035ec <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <I2C2_ER_IRQHandler+0x10>)
 80035f2:	f009 fde0 	bl	800d1b6 <HAL_I2C_ER_IRQHandler>


}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000729c 	.word	0x2000729c

08003600 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <I2C3_EV_IRQHandler+0x10>)
 8003606:	f009 fc69 	bl	800cedc <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20006f58 	.word	0x20006f58

08003614 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef led_spi;

void ILI9341_Init() {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
//	ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 8003618:	f000 f910 	bl	800383c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 800361c:	2001      	movs	r0, #1
 800361e:	f000 fa35 	bl	8003a8c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8003622:	20cb      	movs	r0, #203	; 0xcb
 8003624:	f000 fa32 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8003628:	2039      	movs	r0, #57	; 0x39
 800362a:	f000 fa3e 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800362e:	202c      	movs	r0, #44	; 0x2c
 8003630:	f000 fa3b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f000 fa38 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800363a:	2034      	movs	r0, #52	; 0x34
 800363c:	f000 fa35 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8003640:	2002      	movs	r0, #2
 8003642:	f000 fa32 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8003646:	20cf      	movs	r0, #207	; 0xcf
 8003648:	f000 fa20 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800364c:	2000      	movs	r0, #0
 800364e:	f000 fa2c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003652:	20c1      	movs	r0, #193	; 0xc1
 8003654:	f000 fa29 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8003658:	2030      	movs	r0, #48	; 0x30
 800365a:	f000 fa26 	bl	8003aaa <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800365e:	20e8      	movs	r0, #232	; 0xe8
 8003660:	f000 fa14 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8003664:	2085      	movs	r0, #133	; 0x85
 8003666:	f000 fa20 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800366a:	2000      	movs	r0, #0
 800366c:	f000 fa1d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8003670:	2078      	movs	r0, #120	; 0x78
 8003672:	f000 fa1a 	bl	8003aaa <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8003676:	20ea      	movs	r0, #234	; 0xea
 8003678:	f000 fa08 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f000 fa14 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f000 fa11 	bl	8003aaa <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8003688:	20ed      	movs	r0, #237	; 0xed
 800368a:	f000 f9ff 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800368e:	2064      	movs	r0, #100	; 0x64
 8003690:	f000 fa0b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003694:	2003      	movs	r0, #3
 8003696:	f000 fa08 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800369a:	2012      	movs	r0, #18
 800369c:	f000 fa05 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80036a0:	2081      	movs	r0, #129	; 0x81
 80036a2:	f000 fa02 	bl	8003aaa <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80036a6:	20f7      	movs	r0, #247	; 0xf7
 80036a8:	f000 f9f0 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80036ac:	2020      	movs	r0, #32
 80036ae:	f000 f9fc 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80036b2:	20c0      	movs	r0, #192	; 0xc0
 80036b4:	f000 f9ea 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80036b8:	2010      	movs	r0, #16
 80036ba:	f000 f9f6 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80036be:	20c1      	movs	r0, #193	; 0xc1
 80036c0:	f000 f9e4 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80036c4:	2010      	movs	r0, #16
 80036c6:	f000 f9f0 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80036ca:	20c5      	movs	r0, #197	; 0xc5
 80036cc:	f000 f9de 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80036d0:	203e      	movs	r0, #62	; 0x3e
 80036d2:	f000 f9ea 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80036d6:	2028      	movs	r0, #40	; 0x28
 80036d8:	f000 f9e7 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80036dc:	20c7      	movs	r0, #199	; 0xc7
 80036de:	f000 f9d5 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80036e2:	2086      	movs	r0, #134	; 0x86
 80036e4:	f000 f9e1 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80036e8:	2036      	movs	r0, #54	; 0x36
 80036ea:	f000 f9cf 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80036ee:	2048      	movs	r0, #72	; 0x48
 80036f0:	f000 f9db 	bl	8003aaa <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80036f4:	203a      	movs	r0, #58	; 0x3a
 80036f6:	f000 f9c9 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80036fa:	2055      	movs	r0, #85	; 0x55
 80036fc:	f000 f9d5 	bl	8003aaa <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8003700:	20b1      	movs	r0, #177	; 0xb1
 8003702:	f000 f9c3 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003706:	2000      	movs	r0, #0
 8003708:	f000 f9cf 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 800370c:	2018      	movs	r0, #24
 800370e:	f000 f9cc 	bl	8003aaa <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8003712:	20b6      	movs	r0, #182	; 0xb6
 8003714:	f000 f9ba 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8003718:	2008      	movs	r0, #8
 800371a:	f000 f9c6 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 800371e:	2082      	movs	r0, #130	; 0x82
 8003720:	f000 f9c3 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8003724:	2027      	movs	r0, #39	; 0x27
 8003726:	f000 f9c0 	bl	8003aaa <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800372a:	20f2      	movs	r0, #242	; 0xf2
 800372c:	f000 f9ae 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f000 f9ba 	bl	8003aaa <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8003736:	2026      	movs	r0, #38	; 0x26
 8003738:	f000 f9a8 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 800373c:	2001      	movs	r0, #1
 800373e:	f000 f9b4 	bl	8003aaa <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8003742:	20e0      	movs	r0, #224	; 0xe0
 8003744:	f000 f9a2 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8003748:	200f      	movs	r0, #15
 800374a:	f000 f9ae 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800374e:	2031      	movs	r0, #49	; 0x31
 8003750:	f000 f9ab 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8003754:	202b      	movs	r0, #43	; 0x2b
 8003756:	f000 f9a8 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800375a:	200c      	movs	r0, #12
 800375c:	f000 f9a5 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003760:	200e      	movs	r0, #14
 8003762:	f000 f9a2 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003766:	2008      	movs	r0, #8
 8003768:	f000 f99f 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 800376c:	204e      	movs	r0, #78	; 0x4e
 800376e:	f000 f99c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8003772:	20f1      	movs	r0, #241	; 0xf1
 8003774:	f000 f999 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8003778:	2037      	movs	r0, #55	; 0x37
 800377a:	f000 f996 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800377e:	2007      	movs	r0, #7
 8003780:	f000 f993 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8003784:	2010      	movs	r0, #16
 8003786:	f000 f990 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800378a:	2003      	movs	r0, #3
 800378c:	f000 f98d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003790:	200e      	movs	r0, #14
 8003792:	f000 f98a 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8003796:	2009      	movs	r0, #9
 8003798:	f000 f987 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f000 f984 	bl	8003aaa <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80037a2:	20e1      	movs	r0, #225	; 0xe1
 80037a4:	f000 f972 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f000 f97e 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80037ae:	200e      	movs	r0, #14
 80037b0:	f000 f97b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80037b4:	2014      	movs	r0, #20
 80037b6:	f000 f978 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80037ba:	2003      	movs	r0, #3
 80037bc:	f000 f975 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80037c0:	2011      	movs	r0, #17
 80037c2:	f000 f972 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80037c6:	2007      	movs	r0, #7
 80037c8:	f000 f96f 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80037cc:	2031      	movs	r0, #49	; 0x31
 80037ce:	f000 f96c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80037d2:	20c1      	movs	r0, #193	; 0xc1
 80037d4:	f000 f969 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80037d8:	2048      	movs	r0, #72	; 0x48
 80037da:	f000 f966 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80037de:	2008      	movs	r0, #8
 80037e0:	f000 f963 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80037e4:	200f      	movs	r0, #15
 80037e6:	f000 f960 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80037ea:	200c      	movs	r0, #12
 80037ec:	f000 f95d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80037f0:	2031      	movs	r0, #49	; 0x31
 80037f2:	f000 f95a 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80037f6:	2036      	movs	r0, #54	; 0x36
 80037f8:	f000 f957 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80037fc:	200f      	movs	r0, #15
 80037fe:	f000 f954 	bl	8003aaa <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8003802:	2011      	movs	r0, #17
 8003804:	f000 f942 	bl	8003a8c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8003808:	2029      	movs	r0, #41	; 0x29
 800380a:	f000 f93f 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	f000 f94b 	bl	8003aaa <ILI9341_Send_Data>
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <ILI9341_SPI_Send>:
		Error_Handler();
	}
}

void ILI9341_SPI_Send(unsigned char data)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003822:	1df9      	adds	r1, r7, #7
 8003824:	2301      	movs	r3, #1
 8003826:	2201      	movs	r2, #1
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <ILI9341_SPI_Send+0x20>)
 800382a:	f00b fe23 	bl	800f474 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20008144 	.word	0x20008144

0800383c <ILI9341_Reset>:
{
	HAL_SPI_Transmit(&hspi1, &data, size, 10);
//	HAL_SPI_Transmit_DMA(&hspi1, &data, size);
}

void ILI9341_Reset() {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	RESET_ON;
 8003840:	2200      	movs	r2, #0
 8003842:	2110      	movs	r1, #16
 8003844:	4809      	ldr	r0, [pc, #36]	; (800386c <ILI9341_Reset+0x30>)
 8003846:	f009 f8a5 	bl	800c994 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800384a:	2032      	movs	r0, #50	; 0x32
 800384c:	f006 ff2a 	bl	800a6a4 <HAL_Delay>
	RESET_OFF;
 8003850:	2201      	movs	r2, #1
 8003852:	2110      	movs	r1, #16
 8003854:	4805      	ldr	r0, [pc, #20]	; (800386c <ILI9341_Reset+0x30>)
 8003856:	f009 f89d 	bl	800c994 <HAL_GPIO_WritePin>
	//CS_ON;
	HAL_Delay(50);
 800385a:	2032      	movs	r0, #50	; 0x32
 800385c:	f006 ff22 	bl	800a6a4 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8003860:	2001      	movs	r0, #1
 8003862:	f000 f913 	bl	8003a8c <ILI9341_Send_Command>
	//CS_OFF;
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020000 	.word	0x40020000

08003870 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
	//CS_ON;
	DC_COMMAND;
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	; 0x40
 8003880:	4813      	ldr	r0, [pc, #76]	; (80038d0 <ILI9341_SPI_Send_32+0x60>)
 8003882:	f009 f887 	bl	800c994 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ffc5 	bl	8003818 <ILI9341_SPI_Send>

	DC_DATA;
 800388e:	2201      	movs	r2, #1
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	480f      	ldr	r0, [pc, #60]	; (80038d0 <ILI9341_SPI_Send_32+0x60>)
 8003894:	f009 f87e 	bl	800c994 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	0e1b      	lsrs	r3, r3, #24
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ffba 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ffb4 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ffae 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ffa9 	bl	8003818 <ILI9341_SPI_Send>

}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020000 	.word	0x40020000

080038d4 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	617b      	str	r3, [r7, #20]
	t |= x2;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	202a      	movs	r0, #42	; 0x2a
 80038f8:	f7ff ffba 	bl	8003870 <ILI9341_SPI_Send_32>
	t = y1;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	617b      	str	r3, [r7, #20]
	t |= y2;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	202b      	movs	r0, #43	; 0x2b
 8003912:	f7ff ffad 	bl	8003870 <ILI9341_SPI_Send_32>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <ILI9341_Fill_Screen+0x40>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <ILI9341_Fill_Screen+0x44>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	2100      	movs	r1, #0
 8003936:	2000      	movs	r0, #0
 8003938:	f7ff ffcc 	bl	80038d4 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <ILI9341_Fill_Screen+0x40>)
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4611      	mov	r1, r2
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <ILI9341_Fill_Screen+0x44>)
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	fb02 f201 	mul.w	r2, r2, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f8b9 	bl	8003ac8 <ILI9341_Send_Burst>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <ILI9341_Draw_Filled_Rectangle>:
	ILI9341_SPI_Send(color>>8);
	ILI9341_SPI_Send(color);
}

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f7ff ffa9 	bl	80038d4 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	b298      	uxth	r0, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	3301      	adds	r3, #1
 800398e:	4619      	mov	r1, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	3301      	adds	r3, #1
 8003998:	fb03 f301 	mul.w	r3, r3, r1
 800399c:	4619      	mov	r1, r3
 800399e:	f000 f893 	bl	8003ac8 <ILI9341_Send_Burst>
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
	switch (size)
 80039ba:	7f3b      	ldrb	r3, [r7, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d028      	beq.n	8003a12 <ILI9341_Draw_String+0x66>
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d02b      	beq.n	8003a1c <ILI9341_Draw_String+0x70>
			x += hh*8;
			str++;
		}
	break;
	}
}
 80039c4:	e059      	b.n	8003a7a <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 80039c6:	7f3b      	ldrb	r3, [r7, #28]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	441a      	add	r2, r3
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <ILI9341_Draw_String+0xd8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d907      	bls.n	80039e8 <ILI9341_Draw_String+0x3c>
				x = 1;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80039dc:	7f3b      	ldrb	r3, [r7, #28]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4413      	add	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	7f3a      	ldrb	r2, [r7, #28]
 80039f2:	9201      	str	r2, [sp, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	f000 f919 	bl	8003c30 <ILI9341_Draw_Char>
			x += size*8-2;
 80039fe:	7f3b      	ldrb	r3, [r7, #28]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	60fb      	str	r3, [r7, #12]
			str++;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
		while (*str)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1d5      	bne.n	80039c6 <ILI9341_Draw_String+0x1a>
	break;
 8003a1a:	e02e      	b.n	8003a7a <ILI9341_Draw_String+0xce>
		hh=1;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <ILI9341_Draw_String+0xdc>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
		while (*str)
 8003a22:	e025      	b.n	8003a70 <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 8003a24:	7f3b      	ldrb	r3, [r7, #28]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	441a      	add	r2, r3
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <ILI9341_Draw_String+0xd8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d907      	bls.n	8003a46 <ILI9341_Draw_String+0x9a>
				x = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8003a3a:	7f3b      	ldrb	r3, [r7, #28]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4413      	add	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	7f3a      	ldrb	r2, [r7, #28]
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f000 f8ea 	bl	8003c30 <ILI9341_Draw_Char>
			x += hh*8;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <ILI9341_Draw_String+0xdc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
			str++;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1d5      	bne.n	8003a24 <ILI9341_Draw_String+0x78>
	break;
 8003a78:	bf00      	nop
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000
 8003a88:	200087a8 	.word	0x200087a8

08003a8c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8003a96:	f000 f995 	bl	8003dc4 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff febb 	bl	8003818 <ILI9341_SPI_Send>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8003ab4:	f000 f97a 	bl	8003dac <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feac 	bl	8003818 <ILI9341_SPI_Send>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	733b      	strb	r3, [r7, #12]
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	72fb      	strb	r3, [r7, #11]
	//CS_ON;
	DC_COMMAND;
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	4851      	ldr	r0, [pc, #324]	; (8003c2c <ILI9341_Send_Burst+0x164>)
 8003ae6:	f008 ff55 	bl	800c994 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8003aea:	202c      	movs	r0, #44	; 0x2c
 8003aec:	f7ff fe94 	bl	8003818 <ILI9341_SPI_Send>
	DC_DATA;
 8003af0:	2201      	movs	r2, #1
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	484d      	ldr	r0, [pc, #308]	; (8003c2c <ILI9341_Send_Burst+0x164>)
 8003af6:	f008 ff4d 	bl	800c994 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8003afa:	7b3b      	ldrb	r3, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fe8b 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe87 	bl	8003818 <ILI9341_SPI_Send>
	len--;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8003b16:	7b3a      	ldrb	r2, [r7, #12]
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d169      	bne.n	8003bf2 <ILI9341_Send_Burst+0x12a>
	{
		while (blocks--) {
 8003b1e:	e027      	b.n	8003b70 <ILI9341_Send_Burst+0xa8>
			i = 16;
 8003b20:	2310      	movs	r3, #16
 8003b22:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fe76 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fe72 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fe6e 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe6a 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fe66 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe62 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b54:	7afb      	ldrb	r3, [r7, #11]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fe5e 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fe5a 	bl	8003818 <ILI9341_SPI_Send>
			} while (--i);
 8003b64:	7b7b      	ldrb	r3, [r7, #13]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	737b      	strb	r3, [r7, #13]
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1d9      	bne.n	8003b24 <ILI9341_Send_Burst+0x5c>
		while (blocks--) {
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	1e5a      	subs	r2, r3, #1
 8003b74:	81fa      	strh	r2, [r7, #14]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d2      	bne.n	8003b20 <ILI9341_Send_Burst+0x58>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b82:	737b      	strb	r3, [r7, #13]
 8003b84:	e007      	b.n	8003b96 <ILI9341_Send_Burst+0xce>
			ILI9341_SPI_Send(low_bit);
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fe45 	bl	8003818 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe41 	bl	8003818 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003b96:	7b7b      	ldrb	r3, [r7, #13]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	737a      	strb	r2, [r7, #13]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f2      	bne.n	8003b86 <ILI9341_Send_Burst+0xbe>
			ILI9341_SPI_Send(high_bit);
			ILI9341_SPI_Send(low_bit);
		}
	}
	//CS_OFF;
}
 8003ba0:	e03f      	b.n	8003c22 <ILI9341_Send_Burst+0x15a>
			i = 16;
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	737b      	strb	r3, [r7, #13]
				ILI9341_SPI_Send(high_bit);
 8003ba6:	7b3b      	ldrb	r3, [r7, #12]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fe35 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe31 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bb6:	7b3b      	ldrb	r3, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe2d 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fe29 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bc6:	7b3b      	ldrb	r3, [r7, #12]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fe25 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bce:	7afb      	ldrb	r3, [r7, #11]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fe21 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bd6:	7b3b      	ldrb	r3, [r7, #12]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fe1d 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe19 	bl	8003818 <ILI9341_SPI_Send>
			} while (--i);
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	737b      	strb	r3, [r7, #13]
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <ILI9341_Send_Burst+0xde>
		while (blocks--) {
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	81fa      	strh	r2, [r7, #14]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1d2      	bne.n	8003ba2 <ILI9341_Send_Burst+0xda>
		for (i = (unsigned char) len & 63; i--;) {
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	737b      	strb	r3, [r7, #13]
 8003c06:	e007      	b.n	8003c18 <ILI9341_Send_Burst+0x150>
			ILI9341_SPI_Send(high_bit);
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fe04 	bl	8003818 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003c10:	7afb      	ldrb	r3, [r7, #11]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fe00 	bl	8003818 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003c18:	7b7b      	ldrb	r3, [r7, #13]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	737a      	strb	r2, [r7, #13]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <ILI9341_Send_Burst+0x140>
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40020000 	.word	0x40020000

08003c30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8003c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d002      	beq.n	8003c4c <ILI9341_Draw_Char+0x1c>
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d053      	beq.n	8003cf2 <ILI9341_Draw_Char+0xc2>
					}
				}
			}
		break;
	}
}
 8003c4a:	e0a5      	b.n	8003d98 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3305      	adds	r3, #5
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f7ff fe3b 	bl	80038d4 <ILI9341_Set_Address>
			DC_COMMAND;
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	484f      	ldr	r0, [pc, #316]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003c64:	f008 fe96 	bl	800c994 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003c68:	202c      	movs	r0, #44	; 0x2c
 8003c6a:	f7ff fdd5 	bl	8003818 <ILI9341_SPI_Send>
			DC_DATA;
 8003c6e:	2201      	movs	r2, #1
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	484b      	ldr	r0, [pc, #300]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003c74:	f008 fe8e 	bl	800c994 <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e035      	b.n	8003cea <ILI9341_Draw_Char+0xba>
				for(i=2;i<8;i++)
 8003c7e:	2302      	movs	r3, #2
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e02c      	b.n	8003cde <ILI9341_Draw_Char+0xae>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8003c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c88:	3b20      	subs	r3, #32
 8003c8a:	4a46      	ldr	r2, [pc, #280]	; (8003da4 <ILI9341_Draw_Char+0x174>)
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	441a      	add	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	fa42 f303 	asr.w	r3, r2, r3
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <ILI9341_Draw_Char+0x92>
						ILI9341_SPI_Send(color>>8);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fdb1 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fdac 	bl	8003818 <ILI9341_SPI_Send>
 8003cc0:	e00a      	b.n	8003cd8 <ILI9341_Draw_Char+0xa8>
						ILI9341_SPI_Send(phone>>8);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fda5 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fda0 	bl	8003818 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	ddcf      	ble.n	8003c84 <ILI9341_Draw_Char+0x54>
			for(h=0;h<8;h++)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b07      	cmp	r3, #7
 8003cee:	ddc6      	ble.n	8003c7e <ILI9341_Draw_Char+0x4e>
			break;
 8003cf0:	e052      	b.n	8003d98 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3307      	adds	r3, #7
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3310      	adds	r3, #16
 8003d00:	f7ff fde8 	bl	80038d4 <ILI9341_Set_Address>
			DC_COMMAND;
 8003d04:	2200      	movs	r2, #0
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	4825      	ldr	r0, [pc, #148]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003d0a:	f008 fe43 	bl	800c994 <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003d0e:	202c      	movs	r0, #44	; 0x2c
 8003d10:	f7ff fd82 	bl	8003818 <ILI9341_SPI_Send>
			DC_DATA;
 8003d14:	2201      	movs	r2, #1
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	4821      	ldr	r0, [pc, #132]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003d1a:	f008 fe3b 	bl	800c994 <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e035      	b.n	8003d90 <ILI9341_Draw_Char+0x160>
				for(i=0;i<8;i++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e02c      	b.n	8003d84 <ILI9341_Draw_Char+0x154>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8003d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d2e:	3b20      	subs	r3, #32
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <ILI9341_Draw_Char+0x178>)
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	441a      	add	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f1c3 0307 	rsb	r3, r3, #7
 8003d44:	fa42 f303 	asr.w	r3, r2, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <ILI9341_Draw_Char+0x138>
						ILI9341_SPI_Send(color>>8);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fd5e 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fd59 	bl	8003818 <ILI9341_SPI_Send>
 8003d66:	e00a      	b.n	8003d7e <ILI9341_Draw_Char+0x14e>
						ILI9341_SPI_Send(phone>>8);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fd52 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fd4d 	bl	8003818 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3301      	adds	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b07      	cmp	r3, #7
 8003d88:	ddcf      	ble.n	8003d2a <ILI9341_Draw_Char+0xfa>
			for(h=0;h<16;h++)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	ddc6      	ble.n	8003d24 <ILI9341_Draw_Char+0xf4>
		break;
 8003d96:	bf00      	nop
}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40020000 	.word	0x40020000
 8003da4:	0801a274 	.word	0x0801a274
 8003da8:	0801a54c 	.word	0x0801a54c

08003dac <Before_Sending_Data>:

static void Before_Sending_Data() {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <Before_Sending_Data+0x14>)
 8003db6:	f008 fded 	bl	800c994 <HAL_GPIO_WritePin>
//	CS_ON
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40020000 	.word	0x40020000

08003dc4 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_RESET);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <Before_Sending_Command+0x14>)
 8003dce:	f008 fde1 	bl	800c994 <HAL_GPIO_WritePin>
//	CS_ON
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020000 	.word	0x40020000

08003ddc <ILI9341_PrintLine>:

void ILI9341_PrintLine(char* mes, int* row){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	static int lastrow = 0;
	static int first = 1;
	if(first){
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <ILI9341_PrintLine+0x74>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <ILI9341_PrintLine+0x20>
		lastrow = *row;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <ILI9341_PrintLine+0x78>)
 8003df4:	6013      	str	r3, [r2, #0]
		first = 0;
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <ILI9341_PrintLine+0x74>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
	}
	if(*row > 310){
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003e04:	dd0d      	ble.n	8003e22 <ILI9341_PrintLine+0x46>
		*row = lastrow;
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <ILI9341_PrintLine+0x78>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	601a      	str	r2, [r3, #0]
		ILI9341_Draw_Filled_Rectangle(BLACK, 5, 45, 240, 320);
 8003e0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	23f0      	movs	r3, #240	; 0xf0
 8003e16:	222d      	movs	r2, #45	; 0x2d
 8003e18:	2105      	movs	r1, #5
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7ff fda4 	bl	8003968 <ILI9341_Draw_Filled_Rectangle>
 8003e20:	e005      	b.n	8003e2e <ILI9341_PrintLine+0x52>
	}else{
		*row += 15;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f103 020f 	add.w	r2, r3, #15
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
	}
	ILI9341_Draw_String(5, *row, WHITE, BLACK, mes, 2);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	2302      	movs	r3, #2
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e42:	2005      	movs	r0, #5
 8003e44:	f7ff fdb2 	bl	80039ac <ILI9341_Draw_String>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000008 	.word	0x20000008
 8003e54:	20000544 	.word	0x20000544

08003e58 <main>:
//#define DEBUG

int dir = 1;

int main(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0b2      	sub	sp, #200	; 0xc8
 8003e5c:	af00      	add	r7, sp, #0

	set();
 8003e5e:	f005 fcdb 	bl	8009818 <set>

	led3 = 1;
 8003e62:	4a9f      	ldr	r2, [pc, #636]	; (80040e0 <main+0x288>)
 8003e64:	7853      	ldrb	r3, [r2, #1]
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	7053      	strb	r3, [r2, #1]
	tuneRead();
 8003e6c:	f006 f864 	bl	8009f38 <tuneRead>
	const osThreadAttr_t MainTask_attributes = {
 8003e70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f011 fab7 	bl	80153ec <memset>
 8003e7e:	4b99      	ldr	r3, [pc, #612]	; (80040e4 <main+0x28c>)
 8003e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e8c:	2318      	movs	r3, #24
 8003e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t FlywheelPitchPIDTask_attributes = {
 8003e92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f011 faa6 	bl	80153ec <memset>
 8003ea0:	4b91      	ldr	r3, [pc, #580]	; (80040e8 <main+0x290>)
 8003ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eae:	2318      	movs	r3, #24
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			.name = "FlywheelPitchPIDTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t FlywheelYawPIDTask_attributes = {
 8003eb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f011 fa95 	bl	80153ec <memset>
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <main+0x294>)
 8003ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ecc:	2318      	movs	r3, #24
 8003ece:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "FlywheelYawPIDTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 8003ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f011 fa87 	bl	80153ec <memset>
 8003ede:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <main+0x298>)
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	2318      	movs	r3, #24
 8003eea:	653b      	str	r3, [r7, #80]	; 0x50
			.name = "EmergencyTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t TuneTask_attributes = {
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f011 fa79 	bl	80153ec <memset>
 8003efa:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <main+0x29c>)
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f04:	2320      	movs	r3, #32
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "TestTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osSemaphoreAttr_t TuneSemaphore_attributes = {
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <main+0x2a0>)
 8003f16:	607b      	str	r3, [r7, #4]

//	const osSemaphoreAttr_t ShootSemaphore_attributes = {
//			.name = "ShootSemaphore"
//	};

	HAL_UART_Receive_DMA(&huart4, &jetson.header, 1);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4978      	ldr	r1, [pc, #480]	; (80040fc <main+0x2a4>)
 8003f1c:	4878      	ldr	r0, [pc, #480]	; (8004100 <main+0x2a8>)
 8003f1e:	f00c fdc3 	bl	8010aa8 <HAL_UART_Receive_DMA>
	PIDSourceInit(&errorYaw, &yawDelay, &Pid_Camera);
 8003f22:	4a78      	ldr	r2, [pc, #480]	; (8004104 <main+0x2ac>)
 8003f24:	4978      	ldr	r1, [pc, #480]	; (8004108 <main+0x2b0>)
 8003f26:	4879      	ldr	r0, [pc, #484]	; (800410c <main+0x2b4>)
 8003f28:	f001 fca3 	bl	8005872 <PIDSourceInit>
	PIDGainInit(0.03, 1.0, 1.0/320.0, YAW_LONGEST_DELAY, yawP, yawI, yawD, 60.0, &Pid_Camera);
 8003f2c:	4b78      	ldr	r3, [pc, #480]	; (8004110 <main+0x2b8>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	4b78      	ldr	r3, [pc, #480]	; (8004114 <main+0x2bc>)
 8003f34:	ed93 7a00 	vldr	s14, [r3]
 8003f38:	4b77      	ldr	r3, [pc, #476]	; (8004118 <main+0x2c0>)
 8003f3a:	edd3 6a00 	vldr	s13, [r3]
 8003f3e:	4871      	ldr	r0, [pc, #452]	; (8004104 <main+0x2ac>)
 8003f40:	eddf 3a76 	vldr	s7, [pc, #472]	; 800411c <main+0x2c4>
 8003f44:	eeb0 3a66 	vmov.f32	s6, s13
 8003f48:	eef0 2a47 	vmov.f32	s5, s14
 8003f4c:	eeb0 2a67 	vmov.f32	s4, s15
 8003f50:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8003f54:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8004120 <main+0x2c8>
 8003f58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f5c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8004124 <main+0x2cc>
 8003f60:	f001 fc99 	bl	8005896 <PIDGainInit>
	lastyawP = 1.0; lastyawI = 2.0; lastyawD = 0.0;
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <main+0x2d0>)
 8003f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <main+0x2d4>)
 8003f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <main+0x2d8>)
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
	PIDSourceInit(&errorPitch, &pitchDelay, &Pid_Camera_Pitch);
 8003f7c:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <main+0x2dc>)
 8003f7e:	496e      	ldr	r1, [pc, #440]	; (8004138 <main+0x2e0>)
 8003f80:	486e      	ldr	r0, [pc, #440]	; (800413c <main+0x2e4>)
 8003f82:	f001 fc76 	bl	8005872 <PIDSourceInit>
	PIDGainInit(0.03, 1.0, 1.0/240.0, PITCH_LONGEST_DELAY, pitchP, pitchI, pitchD, 60.0, &Pid_Camera_Pitch);
 8003f86:	4b6e      	ldr	r3, [pc, #440]	; (8004140 <main+0x2e8>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <main+0x2ec>)
 8003f8e:	ed93 7a00 	vldr	s14, [r3]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <main+0x2f0>)
 8003f94:	edd3 6a00 	vldr	s13, [r3]
 8003f98:	4866      	ldr	r0, [pc, #408]	; (8004134 <main+0x2dc>)
 8003f9a:	eddf 3a60 	vldr	s7, [pc, #384]	; 800411c <main+0x2c4>
 8003f9e:	eeb0 3a66 	vmov.f32	s6, s13
 8003fa2:	eef0 2a47 	vmov.f32	s5, s14
 8003fa6:	eeb0 2a67 	vmov.f32	s4, s15
 8003faa:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003fae:	ed9f 1a67 	vldr	s2, [pc, #412]	; 800414c <main+0x2f4>
 8003fb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003fb6:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004124 <main+0x2cc>
 8003fba:	f001 fc6c 	bl	8005896 <PIDGainInit>
	lastpitchP = 2.1; lastpitchI = 3.3; lastpitchD = 0.0;
 8003fbe:	4b64      	ldr	r3, [pc, #400]	; (8004150 <main+0x2f8>)
 8003fc0:	4a64      	ldr	r2, [pc, #400]	; (8004154 <main+0x2fc>)
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <main+0x300>)
 8003fc6:	4a65      	ldr	r2, [pc, #404]	; (800415c <main+0x304>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <main+0x308>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

	led2 = 1;
 8003fd2:	4a43      	ldr	r2, [pc, #268]	; (80040e0 <main+0x288>)
 8003fd4:	7853      	ldrb	r3, [r2, #1]
 8003fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fda:	7053      	strb	r3, [r2, #1]
	ILI9341_Init();
 8003fdc:	f7ff fb1a 	bl	8003614 <ILI9341_Init>
	//	ILI9341_Set_Rotation(1);
	ILI9341_Fill_Screen(BLACK);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff fc9d 	bl	8003920 <ILI9341_Fill_Screen>

	ILI9341_Init_List();
 8003fe6:	f005 ffe7 	bl	8009fb8 <ILI9341_Init_List>
	sys.updateLCD = 1;
 8003fea:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <main+0x30c>)
 8003fec:	7813      	ldrb	r3, [r2, #0]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	7013      	strb	r3, [r2, #0]

	//	ServoInitPulseLimit(&servo, 300, 2500);
	//	ServoInitPulseLimit(&servo1, 300, 2500);

	ServoInitPulseLimit(&servo, DOWNMINYAWPULSE, DOWNMAXYAWPULSE);
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <main+0x310>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5c      	ldr	r2, [pc, #368]	; (800416c <main+0x314>)
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	485c      	ldr	r0, [pc, #368]	; (8004170 <main+0x318>)
 8004000:	f002 fb83 	bl	800670a <ServoInitPulseLimit>
	ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <main+0x31c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <main+0x320>)
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	485b      	ldr	r0, [pc, #364]	; (800417c <main+0x324>)
 8004010:	f002 fb7b 	bl	800670a <ServoInitPulseLimit>
	ServoSetPulse(&servo, DOWNLAGORIYAWPULSE);
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <main+0x328>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4855      	ldr	r0, [pc, #340]	; (8004170 <main+0x318>)
 800401c:	f002 fb2c 	bl	8006678 <ServoSetPulse>
	ServoSetPulse(&servo1, DOWNLAGORIPITCHPULSE);
 8004020:	4b58      	ldr	r3, [pc, #352]	; (8004184 <main+0x32c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	4855      	ldr	r0, [pc, #340]	; (800417c <main+0x324>)
 8004028:	f002 fb26 	bl	8006678 <ServoSetPulse>
	HAL_Delay(200);
 800402c:	20c8      	movs	r0, #200	; 0xc8
 800402e:	f006 fb39 	bl	800a6a4 <HAL_Delay>
	LOWER;
 8004032:	4b55      	ldr	r3, [pc, #340]	; (8004188 <main+0x330>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
	GATE_DOWN;
 800403a:	4a54      	ldr	r2, [pc, #336]	; (800418c <main+0x334>)
 800403c:	7f13      	ldrb	r3, [r2, #28]
 800403e:	f36f 1386 	bfc	r3, #6, #1
 8004042:	7713      	strb	r3, [r2, #28]

	osKernelInitialize();
 8004044:	f00d fcbc 	bl	80119c0 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800404c:	461a      	mov	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	484f      	ldr	r0, [pc, #316]	; (8004190 <main+0x338>)
 8004052:	f00d fcff 	bl	8011a54 <osThreadNew>
 8004056:	4603      	mov	r3, r0
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <main+0x33c>)
 800405a:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 800405c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004060:	461a      	mov	r2, r3
 8004062:	2100      	movs	r1, #0
 8004064:	484c      	ldr	r0, [pc, #304]	; (8004198 <main+0x340>)
 8004066:	f00d fcf5 	bl	8011a54 <osThreadNew>
 800406a:	4603      	mov	r3, r0
 800406c:	4a4b      	ldr	r2, [pc, #300]	; (800419c <main+0x344>)
 800406e:	6013      	str	r3, [r2, #0]
	FlywheelPitchPIDTaskHandle = osThreadNew(FlywheelPitchPIDTask, NULL, &FlywheelPitchPIDTask_attributes);
 8004070:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	4849      	ldr	r0, [pc, #292]	; (80041a0 <main+0x348>)
 800407a:	f00d fceb 	bl	8011a54 <osThreadNew>
 800407e:	4603      	mov	r3, r0
 8004080:	4a48      	ldr	r2, [pc, #288]	; (80041a4 <main+0x34c>)
 8004082:	6013      	str	r3, [r2, #0]
	FlywheelYawPIDTaskHandle = osThreadNew(FlywheelYawPIDTask, NULL, &FlywheelYawPIDTask_attributes);
 8004084:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004088:	461a      	mov	r2, r3
 800408a:	2100      	movs	r1, #0
 800408c:	4846      	ldr	r0, [pc, #280]	; (80041a8 <main+0x350>)
 800408e:	f00d fce1 	bl	8011a54 <osThreadNew>
 8004092:	4603      	mov	r3, r0
 8004094:	4a45      	ldr	r2, [pc, #276]	; (80041ac <main+0x354>)
 8004096:	6013      	str	r3, [r2, #0]
	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	461a      	mov	r2, r3
 800409e:	2100      	movs	r1, #0
 80040a0:	4843      	ldr	r0, [pc, #268]	; (80041b0 <main+0x358>)
 80040a2:	f00d fcd7 	bl	8011a54 <osThreadNew>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <main+0x35c>)
 80040aa:	6013      	str	r3, [r2, #0]
//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);

	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	461a      	mov	r2, r3
 80040b0:	2100      	movs	r1, #0
 80040b2:	2001      	movs	r0, #1
 80040b4:	f00d fdea 	bl	8011c8c <osSemaphoreNew>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4a3f      	ldr	r2, [pc, #252]	; (80041b8 <main+0x360>)
 80040bc:	6013      	str	r3, [r2, #0]
	osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <main+0x34c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00d fd58 	bl	8011b78 <osThreadSuspend>
	osThreadSuspend(FlywheelYawPIDTaskHandle);
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <main+0x354>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00d fd53 	bl	8011b78 <osThreadSuspend>

//	ShootSemaphore = osSemaphoreNew(1, 0, &ShootSemaphore_attributes);
	osKernelStart();
 80040d2:	f00d fc99 	bl	8011a08 <osKernelStart>
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	37c8      	adds	r7, #200	; 0xc8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40020814 	.word	0x40020814
 80040e4:	08019d90 	.word	0x08019d90
 80040e8:	08019d9c 	.word	0x08019d9c
 80040ec:	08019db4 	.word	0x08019db4
 80040f0:	08019dc8 	.word	0x08019dc8
 80040f4:	08019dd8 	.word	0x08019dd8
 80040f8:	08019de4 	.word	0x08019de4
 80040fc:	20008938 	.word	0x20008938
 8004100:	20006790 	.word	0x20006790
 8004104:	200087d4 	.word	0x200087d4
 8004108:	200088f0 	.word	0x200088f0
 800410c:	200088e8 	.word	0x200088e8
 8004110:	20008890 	.word	0x20008890
 8004114:	2000887c 	.word	0x2000887c
 8004118:	200087c8 	.word	0x200087c8
 800411c:	42700000 	.word	0x42700000
 8004120:	3b4ccccd 	.word	0x3b4ccccd
 8004124:	3cf5c28f 	.word	0x3cf5c28f
 8004128:	20008a00 	.word	0x20008a00
 800412c:	20008870 	.word	0x20008870
 8004130:	200088b8 	.word	0x200088b8
 8004134:	20008978 	.word	0x20008978
 8004138:	20008838 	.word	0x20008838
 800413c:	200088e4 	.word	0x200088e4
 8004140:	20008860 	.word	0x20008860
 8004144:	20008884 	.word	0x20008884
 8004148:	200088b0 	.word	0x200088b0
 800414c:	3b888889 	.word	0x3b888889
 8004150:	20008928 	.word	0x20008928
 8004154:	40066666 	.word	0x40066666
 8004158:	20008968 	.word	0x20008968
 800415c:	40533333 	.word	0x40533333
 8004160:	200089f8 	.word	0x200089f8
 8004164:	20008868 	.word	0x20008868
 8004168:	200089f0 	.word	0x200089f0
 800416c:	2000886c 	.word	0x2000886c
 8004170:	20007cc4 	.word	0x20007cc4
 8004174:	2000884c 	.word	0x2000884c
 8004178:	2000885c 	.word	0x2000885c
 800417c:	20007d3c 	.word	0x20007d3c
 8004180:	200088d0 	.word	0x200088d0
 8004184:	200089d4 	.word	0x200089d4
 8004188:	20006480 	.word	0x20006480
 800418c:	20007c4c 	.word	0x20007c4c
 8004190:	0800456d 	.word	0x0800456d
 8004194:	20008898 	.word	0x20008898
 8004198:	08005595 	.word	0x08005595
 800419c:	20008974 	.word	0x20008974
 80041a0:	08005355 	.word	0x08005355
 80041a4:	200088dc 	.word	0x200088dc
 80041a8:	08004f2d 	.word	0x08004f2d
 80041ac:	20008858 	.word	0x20008858
 80041b0:	08005629 	.word	0x08005629
 80041b4:	20008924 	.word	0x20008924
 80041b8:	200089e0 	.word	0x200089e0
 80041bc:	00000000 	.word	0x00000000

080041c0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	if(ps4.joyL_2 > 0.6){
 80041c6:	4baa      	ldr	r3, [pc, #680]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f9bc 	bl	8000548 <__aeabi_f2d>
 80041d0:	a39d      	add	r3, pc, #628	; (adr r3, 8004448 <TIM6_DAC_IRQHandler+0x288>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d046      	beq.n	800426e <TIM6_DAC_IRQHandler+0xae>
		rpm = rpm - 0.002;
 80041e0:	4ba4      	ldr	r3, [pc, #656]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f9af 	bl	8000548 <__aeabi_f2d>
 80041ea:	a399      	add	r3, pc, #612	; (adr r3, 8004450 <TIM6_DAC_IRQHandler+0x290>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f84a 	bl	8000288 <__aeabi_dsub>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	f7fc fcf4 	bl	8000be8 <__aeabi_d2f>
 8004200:	4603      	mov	r3, r0
 8004202:	4a9c      	ldr	r2, [pc, #624]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 8004204:	6013      	str	r3, [r2, #0]
		if(rpm < 0.2) rpm = 0.2;
 8004206:	4b9b      	ldr	r3, [pc, #620]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f99c 	bl	8000548 <__aeabi_f2d>
 8004210:	a391      	add	r3, pc, #580	; (adr r3, 8004458 <TIM6_DAC_IRQHandler+0x298>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc fc61 	bl	8000adc <__aeabi_dcmplt>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <TIM6_DAC_IRQHandler+0x66>
 8004220:	4b94      	ldr	r3, [pc, #592]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 8004222:	4a95      	ldr	r2, [pc, #596]	; (8004478 <TIM6_DAC_IRQHandler+0x2b8>)
 8004224:	601a      	str	r2, [r3, #0]
		rpm1 = rpm2 = rpm3 = previousAllRpm = rpm;
 8004226:	4b93      	ldr	r3, [pc, #588]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a94      	ldr	r2, [pc, #592]	; (800447c <TIM6_DAC_IRQHandler+0x2bc>)
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b93      	ldr	r3, [pc, #588]	; (800447c <TIM6_DAC_IRQHandler+0x2bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a93      	ldr	r2, [pc, #588]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b92      	ldr	r3, [pc, #584]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a92      	ldr	r2, [pc, #584]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a91      	ldr	r2, [pc, #580]	; (8004488 <TIM6_DAC_IRQHandler+0x2c8>)
 8004244:	6013      	str	r3, [r2, #0]
		sys.updateLCD = 1;
 8004246:	4a91      	ldr	r2, [pc, #580]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 8004248:	7813      	ldrb	r3, [r2, #0]
 800424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424e:	7013      	strb	r3, [r2, #0]
		led2 = !led2;
 8004250:	4b8f      	ldr	r3, [pc, #572]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4a8d      	ldr	r2, [pc, #564]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2d9      	uxtb	r1, r3
 8004266:	7853      	ldrb	r3, [r2, #1]
 8004268:	f361 1386 	bfi	r3, r1, #6, #1
 800426c:	7053      	strb	r3, [r2, #1]
	}
	if(ps4.joyR_2 > 0.6){
 800426e:	4b80      	ldr	r3, [pc, #512]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f968 	bl	8000548 <__aeabi_f2d>
 8004278:	a373      	add	r3, pc, #460	; (adr r3, 8004448 <TIM6_DAC_IRQHandler+0x288>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fc fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <TIM6_DAC_IRQHandler+0x150>
		rpm = rpm + 0.002;
 8004288:	4b7a      	ldr	r3, [pc, #488]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc f95b 	bl	8000548 <__aeabi_f2d>
 8004292:	a36f      	add	r3, pc, #444	; (adr r3, 8004450 <TIM6_DAC_IRQHandler+0x290>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fb fff8 	bl	800028c <__adddf3>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc fca0 	bl	8000be8 <__aeabi_d2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a72      	ldr	r2, [pc, #456]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 80042ac:	6013      	str	r3, [r2, #0]
		if(rpm > 0.7) rpm = 0.7;
 80042ae:	4b71      	ldr	r3, [pc, #452]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	a369      	add	r3, pc, #420	; (adr r3, 8004460 <TIM6_DAC_IRQHandler+0x2a0>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <TIM6_DAC_IRQHandler+0x10e>
 80042c8:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 80042ca:	4a72      	ldr	r2, [pc, #456]	; (8004494 <TIM6_DAC_IRQHandler+0x2d4>)
 80042cc:	601a      	str	r2, [r3, #0]
		rpm1 = rpm2 = rpm3 = previousAllRpm = rpm;
 80042ce:	4b69      	ldr	r3, [pc, #420]	; (8004474 <TIM6_DAC_IRQHandler+0x2b4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6a      	ldr	r2, [pc, #424]	; (800447c <TIM6_DAC_IRQHandler+0x2bc>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b69      	ldr	r3, [pc, #420]	; (800447c <TIM6_DAC_IRQHandler+0x2bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a69      	ldr	r2, [pc, #420]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b68      	ldr	r3, [pc, #416]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a68      	ldr	r2, [pc, #416]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b67      	ldr	r3, [pc, #412]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a67      	ldr	r2, [pc, #412]	; (8004488 <TIM6_DAC_IRQHandler+0x2c8>)
 80042ec:	6013      	str	r3, [r2, #0]
		sys.updateLCD = 1;
 80042ee:	4a67      	ldr	r2, [pc, #412]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 80042f0:	7813      	ldrb	r3, [r2, #0]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	7013      	strb	r3, [r2, #0]
		led3 = !led3;
 80042f8:	4b65      	ldr	r3, [pc, #404]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	4a64      	ldr	r2, [pc, #400]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 8004300:	43db      	mvns	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	b2d9      	uxtb	r1, r3
 8004308:	7853      	ldrb	r3, [r2, #1]
 800430a:	f361 13c7 	bfi	r3, r1, #7, #1
 800430e:	7053      	strb	r3, [r2, #1]
	}
	if(zoomCounter >= 1){
 8004310:	4b61      	ldr	r3, [pc, #388]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dd2e      	ble.n	8004376 <TIM6_DAC_IRQHandler+0x1b6>
		if(ps4.joyR_y >= 0.7){
 8004318:	4b55      	ldr	r3, [pc, #340]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f913 	bl	8000548 <__aeabi_f2d>
 8004322:	a34f      	add	r3, pc, #316	; (adr r3, 8004460 <TIM6_DAC_IRQHandler+0x2a0>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fc fbec 	bl	8000b04 <__aeabi_dcmpge>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <TIM6_DAC_IRQHandler+0x184>
			// 			while(ps4.joyR_y == 1.0);
			char c = 'z';
 8004332:	237a      	movs	r3, #122	; 0x7a
 8004334:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit(&huart4, (uint8_t *)&c, 1, 10);
 8004336:	1df9      	adds	r1, r7, #7
 8004338:	230a      	movs	r3, #10
 800433a:	2201      	movs	r2, #1
 800433c:	4857      	ldr	r0, [pc, #348]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 800433e:	f00c fb1a 	bl	8010976 <HAL_UART_Transmit>
 8004342:	e014      	b.n	800436e <TIM6_DAC_IRQHandler+0x1ae>
		}else if(ps4.joyR_y <= -0.7){
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f8fd 	bl	8000548 <__aeabi_f2d>
 800434e:	a346      	add	r3, pc, #280	; (adr r3, 8004468 <TIM6_DAC_IRQHandler+0x2a8>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc fbcc 	bl	8000af0 <__aeabi_dcmple>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <TIM6_DAC_IRQHandler+0x1ae>
			// 			while(ps4.joyR_y == -1.0);
			char c = 'x';
 800435e:	2378      	movs	r3, #120	; 0x78
 8004360:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&huart4, (uint8_t *)&c, 1, 10);
 8004362:	1db9      	adds	r1, r7, #6
 8004364:	230a      	movs	r3, #10
 8004366:	2201      	movs	r2, #1
 8004368:	484c      	ldr	r0, [pc, #304]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 800436a:	f00c fb04 	bl	8010976 <HAL_UART_Transmit>
		}
		zoomCounter = 0;
 800436e:	4b4a      	ldr	r3, [pc, #296]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e004      	b.n	8004380 <TIM6_DAC_IRQHandler+0x1c0>
	}else{
		zoomCounter = zoomCounter + 1;
 8004376:	4b48      	ldr	r3, [pc, #288]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a46      	ldr	r2, [pc, #280]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 800437e:	6013      	str	r3, [r2, #0]
	}


	if(!tracking){
 8004380:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <TIM6_DAC_IRQHandler+0x2e0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d145      	bne.n	8004414 <TIM6_DAC_IRQHandler+0x254>
		if(ps4.joyL_y > 0.5){
 8004388:	4b39      	ldr	r3, [pc, #228]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 800438a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800438e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	dd07      	ble.n	80043ac <TIM6_DAC_IRQHandler+0x1ec>
			Pitch(-PITCHSPEED);
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <TIM6_DAC_IRQHandler+0x2e4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	425b      	negs	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	4840      	ldr	r0, [pc, #256]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 80043a6:	f002 f9c2 	bl	800672e <ServoMovePulse>
 80043aa:	e00f      	b.n	80043cc <TIM6_DAC_IRQHandler+0x20c>
		}else if(ps4.joyL_y < -0.5){
 80043ac:	4b30      	ldr	r3, [pc, #192]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 80043ae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043b2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80043b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043be:	d505      	bpl.n	80043cc <TIM6_DAC_IRQHandler+0x20c>
			Pitch(PITCHSPEED);
 80043c0:	4b38      	ldr	r3, [pc, #224]	; (80044a4 <TIM6_DAC_IRQHandler+0x2e4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
 80043c6:	4838      	ldr	r0, [pc, #224]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 80043c8:	f002 f9b1 	bl	800672e <ServoMovePulse>
		}

		if(ps4.joyL_x > 0.5){
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 80043ce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	dd06      	ble.n	80043ee <TIM6_DAC_IRQHandler+0x22e>
			Yaw(YAWSPEED);
 80043e0:	4b32      	ldr	r3, [pc, #200]	; (80044ac <TIM6_DAC_IRQHandler+0x2ec>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4619      	mov	r1, r3
 80043e6:	4832      	ldr	r0, [pc, #200]	; (80044b0 <TIM6_DAC_IRQHandler+0x2f0>)
 80043e8:	f002 f9a1 	bl	800672e <ServoMovePulse>
 80043ec:	e09a      	b.n	8004524 <TIM6_DAC_IRQHandler+0x364>
		}else if(ps4.joyL_x < -0.5){
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 80043f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043f4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80043f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	f140 8090 	bpl.w	8004524 <TIM6_DAC_IRQHandler+0x364>
			Yaw(-YAWSPEED);
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <TIM6_DAC_IRQHandler+0x2ec>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	425b      	negs	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	4828      	ldr	r0, [pc, #160]	; (80044b0 <TIM6_DAC_IRQHandler+0x2f0>)
 800440e:	f002 f98e 	bl	800672e <ServoMovePulse>
 8004412:	e087      	b.n	8004524 <TIM6_DAC_IRQHandler+0x364>
		}
	}else{
		if(sys.pitchrun == 0){
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d156      	bne.n	80044d0 <TIM6_DAC_IRQHandler+0x310>
			if(ps4.joyL_y > 0.5){
 8004422:	4b13      	ldr	r3, [pc, #76]	; (8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 8004424:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004428:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800442c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	dd3e      	ble.n	80044b4 <TIM6_DAC_IRQHandler+0x2f4>
				Pitch(-5);
 8004436:	f06f 0104 	mvn.w	r1, #4
 800443a:	481b      	ldr	r0, [pc, #108]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 800443c:	f002 f977 	bl	800672e <ServoMovePulse>
 8004440:	e046      	b.n	80044d0 <TIM6_DAC_IRQHandler+0x310>
 8004442:	bf00      	nop
 8004444:	f3af 8000 	nop.w
 8004448:	33333333 	.word	0x33333333
 800444c:	3fe33333 	.word	0x3fe33333
 8004450:	d2f1a9fc 	.word	0xd2f1a9fc
 8004454:	3f60624d 	.word	0x3f60624d
 8004458:	9999999a 	.word	0x9999999a
 800445c:	3fc99999 	.word	0x3fc99999
 8004460:	66666666 	.word	0x66666666
 8004464:	3fe66666 	.word	0x3fe66666
 8004468:	66666666 	.word	0x66666666
 800446c:	bfe66666 	.word	0xbfe66666
 8004470:	20008460 	.word	0x20008460
 8004474:	200088ec 	.word	0x200088ec
 8004478:	3e4ccccd 	.word	0x3e4ccccd
 800447c:	200089d8 	.word	0x200089d8
 8004480:	200089f4 	.word	0x200089f4
 8004484:	200087b4 	.word	0x200087b4
 8004488:	20008910 	.word	0x20008910
 800448c:	20008868 	.word	0x20008868
 8004490:	40020814 	.word	0x40020814
 8004494:	3f333333 	.word	0x3f333333
 8004498:	20008a04 	.word	0x20008a04
 800449c:	20006790 	.word	0x20006790
 80044a0:	200088f8 	.word	0x200088f8
 80044a4:	20008894 	.word	0x20008894
 80044a8:	20007d3c 	.word	0x20007d3c
 80044ac:	200088c8 	.word	0x200088c8
 80044b0:	20007cc4 	.word	0x20007cc4
			}else if(ps4.joyL_y < -0.5){
 80044b4:	4b26      	ldr	r3, [pc, #152]	; (8004550 <TIM6_DAC_IRQHandler+0x390>)
 80044b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80044ba:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80044be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	d503      	bpl.n	80044d0 <TIM6_DAC_IRQHandler+0x310>
				Pitch(5);
 80044c8:	2105      	movs	r1, #5
 80044ca:	4822      	ldr	r0, [pc, #136]	; (8004554 <TIM6_DAC_IRQHandler+0x394>)
 80044cc:	f002 f92f 	bl	800672e <ServoMovePulse>
			}
		}
		if(sys.yawrun == 0){
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <TIM6_DAC_IRQHandler+0x398>)
 80044d2:	785b      	ldrb	r3, [r3, #1]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d11d      	bne.n	800451a <TIM6_DAC_IRQHandler+0x35a>
			if(ps4.joyL_x > 0.5){
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <TIM6_DAC_IRQHandler+0x390>)
 80044e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80044e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f0:	dd04      	ble.n	80044fc <TIM6_DAC_IRQHandler+0x33c>
				Yaw(2);
 80044f2:	2102      	movs	r1, #2
 80044f4:	4819      	ldr	r0, [pc, #100]	; (800455c <TIM6_DAC_IRQHandler+0x39c>)
 80044f6:	f002 f91a 	bl	800672e <ServoMovePulse>
 80044fa:	e00e      	b.n	800451a <TIM6_DAC_IRQHandler+0x35a>
			}else if(ps4.joyL_x < -0.5){
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <TIM6_DAC_IRQHandler+0x390>)
 80044fe:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004502:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d504      	bpl.n	800451a <TIM6_DAC_IRQHandler+0x35a>
				Yaw(-2);
 8004510:	f06f 0101 	mvn.w	r1, #1
 8004514:	4811      	ldr	r0, [pc, #68]	; (800455c <TIM6_DAC_IRQHandler+0x39c>)
 8004516:	f002 f90a 	bl	800672e <ServoMovePulse>
			}
		}
		jetson.timeout++;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <TIM6_DAC_IRQHandler+0x3a0>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	3301      	adds	r3, #1
 8004520:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <TIM6_DAC_IRQHandler+0x3a0>)
 8004522:	6153      	str	r3, [r2, #20]
	}
	led1 = !led1;
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <TIM6_DAC_IRQHandler+0x3a4>)
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <TIM6_DAC_IRQHandler+0x3a4>)
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2d9      	uxtb	r1, r3
 800453a:	7853      	ldrb	r3, [r2, #1]
 800453c:	f361 1345 	bfi	r3, r1, #5, #1
 8004540:	7053      	strb	r3, [r2, #1]
//		UARTPrintString(&huart2, data);
	HAL_TIM_IRQHandler(&htim6);
 8004542:	4809      	ldr	r0, [pc, #36]	; (8004568 <TIM6_DAC_IRQHandler+0x3a8>)
 8004544:	f00b fb70 	bl	800fc28 <HAL_TIM_IRQHandler>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20008460 	.word	0x20008460
 8004554:	20007d3c 	.word	0x20007d3c
 8004558:	20008868 	.word	0x20008868
 800455c:	20007cc4 	.word	0x20007cc4
 8004560:	20008938 	.word	0x20008938
 8004564:	40020814 	.word	0x40020814
 8004568:	2000668c 	.word	0x2000668c

0800456c <MainTask>:
		}
	}
}

void MainTask(void *argument)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

	jetson.header = 0; jetson.tail = 0;
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <MainTask+0xa0>)
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <MainTask+0xa0>)
 800457c:	2200      	movs	r2, #0
 800457e:	705a      	strb	r2, [r3, #1]
	sys.shootp1l=sys.shootp1r=0;
 8004580:	4a23      	ldr	r2, [pc, #140]	; (8004610 <MainTask+0xa4>)
 8004582:	7813      	ldrb	r3, [r2, #0]
 8004584:	f36f 1304 	bfc	r3, #4, #1
 8004588:	7013      	strb	r3, [r2, #0]
 800458a:	4b21      	ldr	r3, [pc, #132]	; (8004610 <MainTask+0xa4>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004592:	b2d9      	uxtb	r1, r3
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <MainTask+0xa4>)
 8004596:	7813      	ldrb	r3, [r2, #0]
 8004598:	f361 1345 	bfi	r3, r1, #5, #1
 800459c:	7013      	strb	r3, [r2, #0]
#ifdef USE_ONE_AXIS
	sys.shootp1r = 1;
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <MainTask+0xa4>)
 80045a0:	7813      	ldrb	r3, [r2, #0]
 80045a2:	f043 0310 	orr.w	r3, r3, #16
 80045a6:	7013      	strb	r3, [r2, #0]
#endif
	rpm1 = rpm2 = rpm3 = rpm;
 80045a8:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <MainTask+0xa8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <MainTask+0xac>)
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <MainTask+0xac>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <MainTask+0xb0>)
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b18      	ldr	r3, [pc, #96]	; (800461c <MainTask+0xb0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <MainTask+0xb4>)
 80045be:	6013      	str	r3, [r2, #0]
	while(1)
	{
		ServoSetPulse(&servo, servo.currentPulse);
 80045c0:	4b18      	ldr	r3, [pc, #96]	; (8004624 <MainTask+0xb8>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4619      	mov	r1, r3
 80045c6:	4817      	ldr	r0, [pc, #92]	; (8004624 <MainTask+0xb8>)
 80045c8:	f002 f856 	bl	8006678 <ServoSetPulse>
		ServoSetPulse(&servo1, servo1.currentPulse);
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <MainTask+0xbc>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4619      	mov	r1, r3
 80045d2:	4815      	ldr	r0, [pc, #84]	; (8004628 <MainTask+0xbc>)
 80045d4:	f002 f850 	bl	8006678 <ServoSetPulse>
		if(sys.elevate){
 80045d8:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <MainTask+0xa4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <MainTask+0xd8>
			if(servo.currentPulse <= 1920 && servo.currentPulse >= 1200){
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <MainTask+0xb8>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 80045ee:	d821      	bhi.n	8004634 <MainTask+0xc8>
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <MainTask+0xb8>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80045f8:	d31c      	bcc.n	8004634 <MainTask+0xc8>
				ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <MainTask+0xc0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a0c      	ldr	r2, [pc, #48]	; (8004630 <MainTask+0xc4>)
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	4808      	ldr	r0, [pc, #32]	; (8004628 <MainTask+0xbc>)
 8004606:	f002 f880 	bl	800670a <ServoInitPulseLimit>
 800460a:	e01b      	b.n	8004644 <MainTask+0xd8>
 800460c:	20008938 	.word	0x20008938
 8004610:	20008868 	.word	0x20008868
 8004614:	200088ec 	.word	0x200088ec
 8004618:	200089f4 	.word	0x200089f4
 800461c:	200087b4 	.word	0x200087b4
 8004620:	20008910 	.word	0x20008910
 8004624:	20007cc4 	.word	0x20007cc4
 8004628:	20007d3c 	.word	0x20007d3c
 800462c:	2000884c 	.word	0x2000884c
 8004630:	2000885c 	.word	0x2000885c
			}else{
				ServoInitPulseLimit(&servo1, UPMINPITCHPULSE, UPMAXPITCHPULSE);
 8004634:	4bb2      	ldr	r3, [pc, #712]	; (8004900 <MainTask+0x394>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4ab2      	ldr	r2, [pc, #712]	; (8004904 <MainTask+0x398>)
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	4619      	mov	r1, r3
 800463e:	48b2      	ldr	r0, [pc, #712]	; (8004908 <MainTask+0x39c>)
 8004640:	f002 f863 	bl	800670a <ServoInitPulseLimit>
			}
		}
		if(ps4.button == SELECT){
 8004644:	4bb1      	ldr	r3, [pc, #708]	; (800490c <MainTask+0x3a0>)
 8004646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d109      	bne.n	8004660 <MainTask+0xf4>
			while(ps4.button == SELECT);
 800464c:	bf00      	nop
 800464e:	4baf      	ldr	r3, [pc, #700]	; (800490c <MainTask+0x3a0>)
 8004650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d0fb      	beq.n	800464e <MainTask+0xe2>
			sys.updateLCD = 1;
 8004656:	4aae      	ldr	r2, [pc, #696]	; (8004910 <MainTask+0x3a4>)
 8004658:	7813      	ldrb	r3, [r2, #0]
 800465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800465e:	7013      	strb	r3, [r2, #0]
		}
		if(sys.updateLCD){
 8004660:	4bab      	ldr	r3, [pc, #684]	; (8004910 <MainTask+0x3a4>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d006      	beq.n	800467c <MainTask+0x110>
			ILI9341_Update_List();
 800466e:	f005 fcf3 	bl	800a058 <ILI9341_Update_List>
			sys.updateLCD = 0;
 8004672:	4aa7      	ldr	r2, [pc, #668]	; (8004910 <MainTask+0x3a4>)
 8004674:	7813      	ldrb	r3, [r2, #0]
 8004676:	f36f 1386 	bfc	r3, #6, #1
 800467a:	7013      	strb	r3, [r2, #0]
		}

		if(ps4.button == TRIANGLE){
 800467c:	4ba3      	ldr	r3, [pc, #652]	; (800490c <MainTask+0x3a0>)
 800467e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d120      	bne.n	80046c8 <MainTask+0x15c>
			while(ps4.button == TRIANGLE);
 8004686:	bf00      	nop
 8004688:	4ba0      	ldr	r3, [pc, #640]	; (800490c <MainTask+0x3a0>)
 800468a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d0fa      	beq.n	8004688 <MainTask+0x11c>
			led3 = !led3;
 8004692:	4ba0      	ldr	r3, [pc, #640]	; (8004914 <MainTask+0x3a8>)
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	b25b      	sxtb	r3, r3
 8004698:	4a9e      	ldr	r2, [pc, #632]	; (8004914 <MainTask+0x3a8>)
 800469a:	43db      	mvns	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	09db      	lsrs	r3, r3, #7
 80046a0:	b2d9      	uxtb	r1, r3
 80046a2:	7853      	ldrb	r3, [r2, #1]
 80046a4:	f361 13c7 	bfi	r3, r1, #7, #1
 80046a8:	7053      	strb	r3, [r2, #1]
			sys.vesc3run = !sys.vesc3run;
 80046aa:	4b99      	ldr	r3, [pc, #612]	; (8004910 <MainTask+0x3a4>)
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2d9      	uxtb	r1, r3
 80046be:	4a94      	ldr	r2, [pc, #592]	; (8004910 <MainTask+0x3a4>)
 80046c0:	7853      	ldrb	r3, [r2, #1]
 80046c2:	f361 0382 	bfi	r3, r1, #2, #1
 80046c6:	7053      	strb	r3, [r2, #1]
		}

		if(ps4.button == SQUARE){
 80046c8:	4b90      	ldr	r3, [pc, #576]	; (800490c <MainTask+0x3a0>)
 80046ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d0:	d135      	bne.n	800473e <MainTask+0x1d2>
			while(ps4.button == SQUARE);
 80046d2:	bf00      	nop
 80046d4:	4b8d      	ldr	r3, [pc, #564]	; (800490c <MainTask+0x3a0>)
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d0fa      	beq.n	80046d4 <MainTask+0x168>
			led3 = !led3;
 80046de:	4b8d      	ldr	r3, [pc, #564]	; (8004914 <MainTask+0x3a8>)
 80046e0:	785b      	ldrb	r3, [r3, #1]
 80046e2:	b25b      	sxtb	r3, r3
 80046e4:	4a8b      	ldr	r2, [pc, #556]	; (8004914 <MainTask+0x3a8>)
 80046e6:	43db      	mvns	r3, r3
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	09db      	lsrs	r3, r3, #7
 80046ec:	b2d9      	uxtb	r1, r3
 80046ee:	7853      	ldrb	r3, [r2, #1]
 80046f0:	f361 13c7 	bfi	r3, r1, #7, #1
 80046f4:	7053      	strb	r3, [r2, #1]
			if(tracking){
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <MainTask+0x3ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d011      	beq.n	8004722 <MainTask+0x1b6>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80046fe:	4b87      	ldr	r3, [pc, #540]	; (800491c <MainTask+0x3b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f00d fa38 	bl	8011b78 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004708:	4b85      	ldr	r3, [pc, #532]	; (8004920 <MainTask+0x3b4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f00d fa33 	bl	8011b78 <osThreadSuspend>
				yawDelay = 0;
 8004712:	4b84      	ldr	r3, [pc, #528]	; (8004924 <MainTask+0x3b8>)
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 800471a:	4b83      	ldr	r3, [pc, #524]	; (8004928 <MainTask+0x3bc>)
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
			}
				FEED;
 8004722:	4a82      	ldr	r2, [pc, #520]	; (800492c <MainTask+0x3c0>)
 8004724:	7f13      	ldrb	r3, [r2, #28]
 8004726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472a:	7713      	strb	r3, [r2, #28]
				osDelay(500);
 800472c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004730:	f00d fa91 	bl	8011c56 <osDelay>
				KEEP;
 8004734:	4a7d      	ldr	r2, [pc, #500]	; (800492c <MainTask+0x3c0>)
 8004736:	7f13      	ldrb	r3, [r2, #28]
 8004738:	f36f 13c7 	bfc	r3, #7, #1
 800473c:	7713      	strb	r3, [r2, #28]
//			}
		}

		if(ps4.button == L1){
 800473e:	4b73      	ldr	r3, [pc, #460]	; (800490c <MainTask+0x3a0>)
 8004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d173      	bne.n	8004830 <MainTask+0x2c4>
			while(ps4.button == L1);
 8004748:	bf00      	nop
 800474a:	4b70      	ldr	r3, [pc, #448]	; (800490c <MainTask+0x3a0>)
 800474c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d0fa      	beq.n	800474a <MainTask+0x1de>
			tracking = !tracking;
 8004754:	4b70      	ldr	r3, [pc, #448]	; (8004918 <MainTask+0x3ac>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	4b6c      	ldr	r3, [pc, #432]	; (8004918 <MainTask+0x3ac>)
 8004766:	601a      	str	r2, [r3, #0]
			led3 = !led3;
 8004768:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <MainTask+0x3a8>)
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	b25b      	sxtb	r3, r3
 800476e:	4a69      	ldr	r2, [pc, #420]	; (8004914 <MainTask+0x3a8>)
 8004770:	43db      	mvns	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	09db      	lsrs	r3, r3, #7
 8004776:	b2d9      	uxtb	r1, r3
 8004778:	7853      	ldrb	r3, [r2, #1]
 800477a:	f361 13c7 	bfi	r3, r1, #7, #1
 800477e:	7053      	strb	r3, [r2, #1]
			char command = 't';
 8004780:	2374      	movs	r3, #116	; 0x74
 8004782:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004784:	f107 010f 	add.w	r1, r7, #15
 8004788:	2301      	movs	r3, #1
 800478a:	2201      	movs	r2, #1
 800478c:	4868      	ldr	r0, [pc, #416]	; (8004930 <MainTask+0x3c4>)
 800478e:	f00c f8f2 	bl	8010976 <HAL_UART_Transmit>
			if(!tracking){
 8004792:	4b61      	ldr	r3, [pc, #388]	; (8004918 <MainTask+0x3ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d136      	bne.n	8004808 <MainTask+0x29c>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 800479a:	4b60      	ldr	r3, [pc, #384]	; (800491c <MainTask+0x3b0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f00d f9ea 	bl	8011b78 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 80047a4:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <MainTask+0x3b4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f00d f9e5 	bl	8011b78 <osThreadSuspend>
				yawDelay = 0;
 80047ae:	4b5d      	ldr	r3, [pc, #372]	; (8004924 <MainTask+0x3b8>)
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 80047b6:	4b5c      	ldr	r3, [pc, #368]	; (8004928 <MainTask+0x3bc>)
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
				jetson.x_pixel = 0;
 80047be:	4b5d      	ldr	r3, [pc, #372]	; (8004934 <MainTask+0x3c8>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
				jetson.y_pixel = 0;
 80047c4:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <MainTask+0x3c8>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
				sys.pid = 0;
 80047ca:	4a51      	ldr	r2, [pc, #324]	; (8004910 <MainTask+0x3a4>)
 80047cc:	7813      	ldrb	r3, [r2, #0]
 80047ce:	f36f 0341 	bfc	r3, #1, #1
 80047d2:	7013      	strb	r3, [r2, #0]
				sys.pidPitch = 0;
 80047d4:	4a4e      	ldr	r2, [pc, #312]	; (8004910 <MainTask+0x3a4>)
 80047d6:	7813      	ldrb	r3, [r2, #0]
 80047d8:	f36f 0382 	bfc	r3, #2, #1
 80047dc:	7013      	strb	r3, [r2, #0]
				PIDDelayInit(&Pid_Camera);
 80047de:	4856      	ldr	r0, [pc, #344]	; (8004938 <MainTask+0x3cc>)
 80047e0:	f001 f9c7 	bl	8005b72 <PIDDelayInit>
				PIDDelayInit(&Pid_Camera_Pitch);
 80047e4:	4855      	ldr	r0, [pc, #340]	; (800493c <MainTask+0x3d0>)
 80047e6:	f001 f9c4 	bl	8005b72 <PIDDelayInit>
				sys.shootp1l = sys.shootp1r = 0;
 80047ea:	4a49      	ldr	r2, [pc, #292]	; (8004910 <MainTask+0x3a4>)
 80047ec:	7813      	ldrb	r3, [r2, #0]
 80047ee:	f36f 1304 	bfc	r3, #4, #1
 80047f2:	7013      	strb	r3, [r2, #0]
 80047f4:	4b46      	ldr	r3, [pc, #280]	; (8004910 <MainTask+0x3a4>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80047fc:	b2d9      	uxtb	r1, r3
 80047fe:	4a44      	ldr	r2, [pc, #272]	; (8004910 <MainTask+0x3a4>)
 8004800:	7813      	ldrb	r3, [r2, #0]
 8004802:	f361 1345 	bfi	r3, r1, #5, #1
 8004806:	7013      	strb	r3, [r2, #0]
			}
			if(tracking){
 8004808:	4b43      	ldr	r3, [pc, #268]	; (8004918 <MainTask+0x3ac>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00f      	beq.n	8004830 <MainTask+0x2c4>
				osDelay(50);
 8004810:	2032      	movs	r0, #50	; 0x32
 8004812:	f00d fa20 	bl	8011c56 <osDelay>
				sys.pid = 1;
 8004816:	4a3e      	ldr	r2, [pc, #248]	; (8004910 <MainTask+0x3a4>)
 8004818:	7813      	ldrb	r3, [r2, #0]
 800481a:	f043 0302 	orr.w	r3, r3, #2
 800481e:	7013      	strb	r3, [r2, #0]
				osThreadResume(FlywheelYawPIDTaskHandle);
 8004820:	4b3f      	ldr	r3, [pc, #252]	; (8004920 <MainTask+0x3b4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f00d f9c8 	bl	8011bba <osThreadResume>
				jetson.update = 0;
 800482a:	4b42      	ldr	r3, [pc, #264]	; (8004934 <MainTask+0x3c8>)
 800482c:	2200      	movs	r2, #0
 800482e:	619a      	str	r2, [r3, #24]
				osThreadResume(FlywheelPitchPIDTaskHandle);
#endif
			}
		}

		if(ps4.button == OPTION){
 8004830:	4b36      	ldr	r3, [pc, #216]	; (800490c <MainTask+0x3a0>)
 8004832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d10d      	bne.n	8004856 <MainTask+0x2ea>
			while(ps4.button == OPTION);
 800483a:	bf00      	nop
 800483c:	4b33      	ldr	r3, [pc, #204]	; (800490c <MainTask+0x3a0>)
 800483e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d0fa      	beq.n	800483c <MainTask+0x2d0>
			sys.autoLagori = 1;
 8004846:	4a32      	ldr	r2, [pc, #200]	; (8004910 <MainTask+0x3a4>)
 8004848:	7853      	ldrb	r3, [r2, #1]
 800484a:	f043 0308 	orr.w	r3, r3, #8
 800484e:	7053      	strb	r3, [r2, #1]
			counter = 0;
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <MainTask+0x3d4>)
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
		}
		if(sys.autoLagori){
 8004856:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <MainTask+0x3a4>)
 8004858:	785b      	ldrb	r3, [r3, #1]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01f      	beq.n	80048a4 <MainTask+0x338>
			sys.vesc3run = 1;
 8004864:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <MainTask+0x3a4>)
 8004866:	7853      	ldrb	r3, [r2, #1]
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	7053      	strb	r3, [r2, #1]
			if(counter >= shootDelay){
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <MainTask+0x3d4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	4b33      	ldr	r3, [pc, #204]	; (8004944 <MainTask+0x3d8>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d313      	bcc.n	80048a4 <MainTask+0x338>
				FEED;
 800487c:	4a2b      	ldr	r2, [pc, #172]	; (800492c <MainTask+0x3c0>)
 800487e:	7f13      	ldrb	r3, [r2, #28]
 8004880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004884:	7713      	strb	r3, [r2, #28]
				osDelay(GATEDOWNDELAY);
 8004886:	4b30      	ldr	r3, [pc, #192]	; (8004948 <MainTask+0x3dc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f00d f9e3 	bl	8011c56 <osDelay>
				KEEP;
 8004890:	4a26      	ldr	r2, [pc, #152]	; (800492c <MainTask+0x3c0>)
 8004892:	7f13      	ldrb	r3, [r2, #28]
 8004894:	f36f 13c7 	bfc	r3, #7, #1
 8004898:	7713      	strb	r3, [r2, #28]
				sys.autoLagori = 0;
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <MainTask+0x3a4>)
 800489c:	7853      	ldrb	r3, [r2, #1]
 800489e:	f36f 03c3 	bfc	r3, #3, #1
 80048a2:	7053      	strb	r3, [r2, #1]
			}
		}
		// Run Flywheel

		if(sys.vesc3run){
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <MainTask+0x3a4>)
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <MainTask+0x376>
			comm_can_set_duty(VESC1, rpm1);
 80048b2:	4b26      	ldr	r3, [pc, #152]	; (800494c <MainTask+0x3e0>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	eeb0 0a67 	vmov.f32	s0, s15
 80048bc:	206f      	movs	r0, #111	; 0x6f
 80048be:	f003 ffbf 	bl	8008840 <comm_can_set_duty>
			comm_can_set_duty(VESC2, rpm2);
 80048c2:	4b23      	ldr	r3, [pc, #140]	; (8004950 <MainTask+0x3e4>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	eeb0 0a67 	vmov.f32	s0, s15
 80048cc:	2070      	movs	r0, #112	; 0x70
 80048ce:	f003 ffb7 	bl	8008840 <comm_can_set_duty>
			comm_can_set_duty(VESC3, rpm3);
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <MainTask+0x3e8>)
 80048d4:	edd3 7a00 	vldr	s15, [r3]
 80048d8:	eeb0 0a67 	vmov.f32	s0, s15
 80048dc:	2071      	movs	r0, #113	; 0x71
 80048de:	f003 ffaf 	bl	8008840 <comm_can_set_duty>
		}
		if(ps4.button == UP_CIRCLE){
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <MainTask+0x3a0>)
 80048e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e6:	f242 0210 	movw	r2, #8208	; 0x2010
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f040 808a 	bne.w	8004a04 <MainTask+0x498>
			while(ps4.button == UP_CIRCLE);
 80048f0:	bf00      	nop
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <MainTask+0x3a0>)
 80048f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f6:	f242 0210 	movw	r2, #8208	; 0x2010
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d0f9      	beq.n	80048f2 <MainTask+0x386>
 80048fe:	e02b      	b.n	8004958 <MainTask+0x3ec>
 8004900:	2000892c 	.word	0x2000892c
 8004904:	20008908 	.word	0x20008908
 8004908:	20007d3c 	.word	0x20007d3c
 800490c:	20008460 	.word	0x20008460
 8004910:	20008868 	.word	0x20008868
 8004914:	40020814 	.word	0x40020814
 8004918:	200088f8 	.word	0x200088f8
 800491c:	200088dc 	.word	0x200088dc
 8004920:	20008858 	.word	0x20008858
 8004924:	200088f0 	.word	0x200088f0
 8004928:	20008838 	.word	0x20008838
 800492c:	20007c4c 	.word	0x20007c4c
 8004930:	20006790 	.word	0x20006790
 8004934:	20008938 	.word	0x20008938
 8004938:	200087d4 	.word	0x200087d4
 800493c:	20008978 	.word	0x20008978
 8004940:	20007d88 	.word	0x20007d88
 8004944:	20008904 	.word	0x20008904
 8004948:	20008834 	.word	0x20008834
 800494c:	20008910 	.word	0x20008910
 8004950:	200087b4 	.word	0x200087b4
 8004954:	200089f4 	.word	0x200089f4
			sys.elevate = !sys.elevate;
 8004958:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <MainTask+0x5fc>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	bf0c      	ite	eq
 8004966:	2301      	moveq	r3, #1
 8004968:	2300      	movne	r3, #0
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	4a7e      	ldr	r2, [pc, #504]	; (8004b68 <MainTask+0x5fc>)
 800496e:	7813      	ldrb	r3, [r2, #0]
 8004970:	f361 03c3 	bfi	r3, r1, #3, #1
 8004974:	7013      	strb	r3, [r2, #0]
			if(sys.elevate){ //up
 8004976:	4b7c      	ldr	r3, [pc, #496]	; (8004b68 <MainTask+0x5fc>)
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01a      	beq.n	80049ba <MainTask+0x44e>
				ELEVATE;
 8004984:	4b79      	ldr	r3, [pc, #484]	; (8004b6c <MainTask+0x600>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
				ServoInitPulseLimit(&servo, UPMINYAWPULSE, UPMAXYAWPULSE);
 800498e:	4b78      	ldr	r3, [pc, #480]	; (8004b70 <MainTask+0x604>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a78      	ldr	r2, [pc, #480]	; (8004b74 <MainTask+0x608>)
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	4619      	mov	r1, r3
 8004998:	4877      	ldr	r0, [pc, #476]	; (8004b78 <MainTask+0x60c>)
 800499a:	f001 feb6 	bl	800670a <ServoInitPulseLimit>
				ServoInitPulseLimit(&servo1, UPMINPITCHPULSE, UPMAXPITCHPULSE);
 800499e:	4b77      	ldr	r3, [pc, #476]	; (8004b7c <MainTask+0x610>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a77      	ldr	r2, [pc, #476]	; (8004b80 <MainTask+0x614>)
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4876      	ldr	r0, [pc, #472]	; (8004b84 <MainTask+0x618>)
 80049aa:	f001 feae 	bl	800670a <ServoInitPulseLimit>
				GATE_UP;
 80049ae:	4a76      	ldr	r2, [pc, #472]	; (8004b88 <MainTask+0x61c>)
 80049b0:	7f13      	ldrb	r3, [r2, #28]
 80049b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b6:	7713      	strb	r3, [r2, #28]
 80049b8:	e024      	b.n	8004a04 <MainTask+0x498>
			}else{//down
				LOWER;
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <MainTask+0x600>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
				ServoInitPulseLimit(&servo, DOWNMINYAWPULSE, DOWNMAXYAWPULSE);
 80049c2:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <MainTask+0x620>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a72      	ldr	r2, [pc, #456]	; (8004b90 <MainTask+0x624>)
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	486a      	ldr	r0, [pc, #424]	; (8004b78 <MainTask+0x60c>)
 80049ce:	f001 fe9c 	bl	800670a <ServoInitPulseLimit>
				ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 80049d2:	4b70      	ldr	r3, [pc, #448]	; (8004b94 <MainTask+0x628>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a70      	ldr	r2, [pc, #448]	; (8004b98 <MainTask+0x62c>)
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	4619      	mov	r1, r3
 80049dc:	4869      	ldr	r0, [pc, #420]	; (8004b84 <MainTask+0x618>)
 80049de:	f001 fe94 	bl	800670a <ServoInitPulseLimit>
				ServoSetPulse(&servo, DOWNLAGORIYAWPULSE);
 80049e2:	4b6e      	ldr	r3, [pc, #440]	; (8004b9c <MainTask+0x630>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4863      	ldr	r0, [pc, #396]	; (8004b78 <MainTask+0x60c>)
 80049ea:	f001 fe45 	bl	8006678 <ServoSetPulse>
				ServoSetPulse(&servo1, DOWNLAGORIPITCHPULSE);
 80049ee:	4b6c      	ldr	r3, [pc, #432]	; (8004ba0 <MainTask+0x634>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4619      	mov	r1, r3
 80049f4:	4863      	ldr	r0, [pc, #396]	; (8004b84 <MainTask+0x618>)
 80049f6:	f001 fe3f 	bl	8006678 <ServoSetPulse>
				GATE_DOWN;
 80049fa:	4a63      	ldr	r2, [pc, #396]	; (8004b88 <MainTask+0x61c>)
 80049fc:	7f13      	ldrb	r3, [r2, #28]
 80049fe:	f36f 1386 	bfc	r3, #6, #1
 8004a02:	7713      	strb	r3, [r2, #28]
			}
		}

		if(!tracking){
 8004a04:	4b67      	ldr	r3, [pc, #412]	; (8004ba4 <MainTask+0x638>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d163      	bne.n	8004ad4 <MainTask+0x568>
			if(ps4.button == UP){
 8004a0c:	4b66      	ldr	r3, [pc, #408]	; (8004ba8 <MainTask+0x63c>)
 8004a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d10a      	bne.n	8004a2a <MainTask+0x4be>
				while(ps4.button == UP);
 8004a14:	bf00      	nop
 8004a16:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <MainTask+0x63c>)
 8004a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d0fb      	beq.n	8004a16 <MainTask+0x4aa>
				Pitch(-30);
 8004a1e:	f06f 011d 	mvn.w	r1, #29
 8004a22:	4858      	ldr	r0, [pc, #352]	; (8004b84 <MainTask+0x618>)
 8004a24:	f001 fe83 	bl	800672e <ServoMovePulse>
 8004a28:	e00c      	b.n	8004a44 <MainTask+0x4d8>
			}else if(ps4.button == DOWN){
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <MainTask+0x63c>)
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d108      	bne.n	8004a44 <MainTask+0x4d8>
				while(ps4.button == DOWN);
 8004a32:	bf00      	nop
 8004a34:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <MainTask+0x63c>)
 8004a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a38:	2b40      	cmp	r3, #64	; 0x40
 8004a3a:	d0fb      	beq.n	8004a34 <MainTask+0x4c8>
				Pitch(23);
 8004a3c:	2117      	movs	r1, #23
 8004a3e:	4851      	ldr	r0, [pc, #324]	; (8004b84 <MainTask+0x618>)
 8004a40:	f001 fe75 	bl	800672e <ServoMovePulse>
			}

			if(ps4.button == LEFT){
 8004a44:	4b58      	ldr	r3, [pc, #352]	; (8004ba8 <MainTask+0x63c>)
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	2b80      	cmp	r3, #128	; 0x80
 8004a4a:	d109      	bne.n	8004a60 <MainTask+0x4f4>
				while(ps4.button == LEFT);
 8004a4c:	bf00      	nop
 8004a4e:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <MainTask+0x63c>)
 8004a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a52:	2b80      	cmp	r3, #128	; 0x80
 8004a54:	d0fb      	beq.n	8004a4e <MainTask+0x4e2>
				Yaw(16);
 8004a56:	2110      	movs	r1, #16
 8004a58:	4847      	ldr	r0, [pc, #284]	; (8004b78 <MainTask+0x60c>)
 8004a5a:	f001 fe68 	bl	800672e <ServoMovePulse>
 8004a5e:	e00d      	b.n	8004a7c <MainTask+0x510>
			}else if(ps4.button == RIGHT){
 8004a60:	4b51      	ldr	r3, [pc, #324]	; (8004ba8 <MainTask+0x63c>)
 8004a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a64:	2b20      	cmp	r3, #32
 8004a66:	d109      	bne.n	8004a7c <MainTask+0x510>
				while(ps4.button == RIGHT);
 8004a68:	bf00      	nop
 8004a6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <MainTask+0x63c>)
 8004a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	d0fb      	beq.n	8004a6a <MainTask+0x4fe>
				Yaw(-16);
 8004a72:	f06f 010f 	mvn.w	r1, #15
 8004a76:	4840      	ldr	r0, [pc, #256]	; (8004b78 <MainTask+0x60c>)
 8004a78:	f001 fe59 	bl	800672e <ServoMovePulse>
			}

			if(jetson.state == 't' && sys.jetsonCorrection == 0){
 8004a7c:	4b4b      	ldr	r3, [pc, #300]	; (8004bac <MainTask+0x640>)
 8004a7e:	7c1b      	ldrb	r3, [r3, #16]
 8004a80:	2b74      	cmp	r3, #116	; 0x74
 8004a82:	d114      	bne.n	8004aae <MainTask+0x542>
 8004a84:	4b38      	ldr	r3, [pc, #224]	; (8004b68 <MainTask+0x5fc>)
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10d      	bne.n	8004aae <MainTask+0x542>
				char command = 't';
 8004a92:	2374      	movs	r3, #116	; 0x74
 8004a94:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004a96:	f107 010e 	add.w	r1, r7, #14
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4844      	ldr	r0, [pc, #272]	; (8004bb0 <MainTask+0x644>)
 8004aa0:	f00b ff69 	bl	8010976 <HAL_UART_Transmit>
				sys.jetsonCorrection = 1;
 8004aa4:	4a30      	ldr	r2, [pc, #192]	; (8004b68 <MainTask+0x5fc>)
 8004aa6:	7853      	ldrb	r3, [r2, #1]
 8004aa8:	f043 0320 	orr.w	r3, r3, #32
 8004aac:	7053      	strb	r3, [r2, #1]
			}

			if(jetson.state == 'd' && sys.jetsonCorrection){
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <MainTask+0x640>)
 8004ab0:	7c1b      	ldrb	r3, [r3, #16]
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	f040 8129 	bne.w	8004d0a <MainTask+0x79e>
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <MainTask+0x5fc>)
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8121 	beq.w	8004d0a <MainTask+0x79e>
				sys.jetsonCorrection = 0;
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <MainTask+0x5fc>)
 8004aca:	7853      	ldrb	r3, [r2, #1]
 8004acc:	f36f 1345 	bfc	r3, #5, #1
 8004ad0:	7053      	strb	r3, [r2, #1]
 8004ad2:	e11a      	b.n	8004d0a <MainTask+0x79e>
			}
		}else{
			if(ps4.button == LEFT){
 8004ad4:	4b34      	ldr	r3, [pc, #208]	; (8004ba8 <MainTask+0x63c>)
 8004ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d113      	bne.n	8004b04 <MainTask+0x598>
				while(ps4.button == LEFT);
 8004adc:	bf00      	nop
 8004ade:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <MainTask+0x63c>)
 8004ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d0fb      	beq.n	8004ade <MainTask+0x572>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004ae6:	4b33      	ldr	r3, [pc, #204]	; (8004bb4 <MainTask+0x648>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00d f844 	bl	8011b78 <osThreadSuspend>
				sys.yawrun = 0;
 8004af0:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <MainTask+0x5fc>)
 8004af2:	7853      	ldrb	r3, [r2, #1]
 8004af4:	f36f 0301 	bfc	r3, #0, #2
 8004af8:	7053      	strb	r3, [r2, #1]
				Yaw(16);
 8004afa:	2110      	movs	r1, #16
 8004afc:	481e      	ldr	r0, [pc, #120]	; (8004b78 <MainTask+0x60c>)
 8004afe:	f001 fe16 	bl	800672e <ServoMovePulse>
 8004b02:	e017      	b.n	8004b34 <MainTask+0x5c8>
			}else if(ps4.button == RIGHT){
 8004b04:	4b28      	ldr	r3, [pc, #160]	; (8004ba8 <MainTask+0x63c>)
 8004b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d113      	bne.n	8004b34 <MainTask+0x5c8>
				while(ps4.button == RIGHT);
 8004b0c:	bf00      	nop
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <MainTask+0x63c>)
 8004b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	d0fb      	beq.n	8004b0e <MainTask+0x5a2>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <MainTask+0x648>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f00d f82c 	bl	8011b78 <osThreadSuspend>
				sys.yawrun = 0;
 8004b20:	4a11      	ldr	r2, [pc, #68]	; (8004b68 <MainTask+0x5fc>)
 8004b22:	7853      	ldrb	r3, [r2, #1]
 8004b24:	f36f 0301 	bfc	r3, #0, #2
 8004b28:	7053      	strb	r3, [r2, #1]
				Yaw(-16);
 8004b2a:	f06f 010f 	mvn.w	r1, #15
 8004b2e:	4812      	ldr	r0, [pc, #72]	; (8004b78 <MainTask+0x60c>)
 8004b30:	f001 fdfd 	bl	800672e <ServoMovePulse>
			}

			if(ps4.button == UP){
 8004b34:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <MainTask+0x63c>)
 8004b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d13f      	bne.n	8004bbc <MainTask+0x650>
				while(ps4.button == UP);
 8004b3c:	bf00      	nop
 8004b3e:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <MainTask+0x63c>)
 8004b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d0fb      	beq.n	8004b3e <MainTask+0x5d2>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004b46:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <MainTask+0x64c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00d f814 	bl	8011b78 <osThreadSuspend>
				Pitch(-30);
 8004b50:	f06f 011d 	mvn.w	r1, #29
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <MainTask+0x618>)
 8004b56:	f001 fdea 	bl	800672e <ServoMovePulse>
				sys.pitchrun = 0;
 8004b5a:	4a03      	ldr	r2, [pc, #12]	; (8004b68 <MainTask+0x5fc>)
 8004b5c:	7813      	ldrb	r3, [r2, #0]
 8004b5e:	f36f 13c7 	bfc	r3, #7, #1
 8004b62:	7013      	strb	r3, [r2, #0]
 8004b64:	e041      	b.n	8004bea <MainTask+0x67e>
 8004b66:	bf00      	nop
 8004b68:	20008868 	.word	0x20008868
 8004b6c:	20006480 	.word	0x20006480
 8004b70:	20008844 	.word	0x20008844
 8004b74:	200089dc 	.word	0x200089dc
 8004b78:	20007cc4 	.word	0x20007cc4
 8004b7c:	2000892c 	.word	0x2000892c
 8004b80:	20008908 	.word	0x20008908
 8004b84:	20007d3c 	.word	0x20007d3c
 8004b88:	20007c4c 	.word	0x20007c4c
 8004b8c:	200089f0 	.word	0x200089f0
 8004b90:	2000886c 	.word	0x2000886c
 8004b94:	2000884c 	.word	0x2000884c
 8004b98:	2000885c 	.word	0x2000885c
 8004b9c:	200088d0 	.word	0x200088d0
 8004ba0:	200089d4 	.word	0x200089d4
 8004ba4:	200088f8 	.word	0x200088f8
 8004ba8:	20008460 	.word	0x20008460
 8004bac:	20008938 	.word	0x20008938
 8004bb0:	20006790 	.word	0x20006790
 8004bb4:	20008858 	.word	0x20008858
 8004bb8:	200088dc 	.word	0x200088dc
			}else if(ps4.button == DOWN){
 8004bbc:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <MainTask+0x7d0>)
 8004bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d112      	bne.n	8004bea <MainTask+0x67e>
				while(ps4.button == DOWN);
 8004bc4:	bf00      	nop
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <MainTask+0x7d0>)
 8004bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d0fb      	beq.n	8004bc6 <MainTask+0x65a>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <MainTask+0x7d4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f00c ffd0 	bl	8011b78 <osThreadSuspend>
				Pitch(23);
 8004bd8:	2117      	movs	r1, #23
 8004bda:	485a      	ldr	r0, [pc, #360]	; (8004d44 <MainTask+0x7d8>)
 8004bdc:	f001 fda7 	bl	800672e <ServoMovePulse>
				sys.pitchrun = 0;
 8004be0:	4a59      	ldr	r2, [pc, #356]	; (8004d48 <MainTask+0x7dc>)
 8004be2:	7813      	ldrb	r3, [r2, #0]
 8004be4:	f36f 13c7 	bfc	r3, #7, #1
 8004be8:	7013      	strb	r3, [r2, #0]
			}
			if(jetson.state == 'd' && sys.jetsonUpdate == 0){
 8004bea:	4b58      	ldr	r3, [pc, #352]	; (8004d4c <MainTask+0x7e0>)
 8004bec:	7c1b      	ldrb	r3, [r3, #16]
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d112      	bne.n	8004c18 <MainTask+0x6ac>
 8004bf2:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <MainTask+0x7dc>)
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <MainTask+0x6ac>
				jetson.state = 0;
 8004c00:	4b52      	ldr	r3, [pc, #328]	; (8004d4c <MainTask+0x7e0>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	741a      	strb	r2, [r3, #16]
				char command = 't';
 8004c06:	2374      	movs	r3, #116	; 0x74
 8004c08:	737b      	strb	r3, [r7, #13]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004c0a:	f107 010d 	add.w	r1, r7, #13
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2201      	movs	r2, #1
 8004c12:	484f      	ldr	r0, [pc, #316]	; (8004d50 <MainTask+0x7e4>)
 8004c14:	f00b feaf 	bl	8010976 <HAL_UART_Transmit>
			}

			if(jetson.state == 'd' && sys.jetsonUpdate == 1){
 8004c18:	4b4c      	ldr	r3, [pc, #304]	; (8004d4c <MainTask+0x7e0>)
 8004c1a:	7c1b      	ldrb	r3, [r3, #16]
 8004c1c:	2b64      	cmp	r3, #100	; 0x64
 8004c1e:	d126      	bne.n	8004c6e <MainTask+0x702>
 8004c20:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <MainTask+0x7dc>)
 8004c22:	785b      	ldrb	r3, [r3, #1]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01f      	beq.n	8004c6e <MainTask+0x702>
				led2 = !led2;
 8004c2e:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <MainTask+0x7e8>)
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4a46      	ldr	r2, [pc, #280]	; (8004d54 <MainTask+0x7e8>)
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2d9      	uxtb	r1, r3
 8004c44:	7853      	ldrb	r3, [r2, #1]
 8004c46:	f361 1386 	bfi	r3, r1, #6, #1
 8004c4a:	7053      	strb	r3, [r2, #1]
				char command = 't';
 8004c4c:	2374      	movs	r3, #116	; 0x74
 8004c4e:	733b      	strb	r3, [r7, #12]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004c50:	f107 010c 	add.w	r1, r7, #12
 8004c54:	2301      	movs	r3, #1
 8004c56:	2201      	movs	r2, #1
 8004c58:	483d      	ldr	r0, [pc, #244]	; (8004d50 <MainTask+0x7e4>)
 8004c5a:	f00b fe8c 	bl	8010976 <HAL_UART_Transmit>
				jetson.update = 0;
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <MainTask+0x7e0>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
				sys.jetsonUpdate = 0;
 8004c64:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <MainTask+0x7dc>)
 8004c66:	7853      	ldrb	r3, [r2, #1]
 8004c68:	f36f 1304 	bfc	r3, #4, #1
 8004c6c:	7053      	strb	r3, [r2, #1]
			}

			if(jetson.update >= jetsonUpdateDelay && sys.jetsonUpdate == 0){
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <MainTask+0x7e0>)
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	4b39      	ldr	r3, [pc, #228]	; (8004d58 <MainTask+0x7ec>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d317      	bcc.n	8004caa <MainTask+0x73e>
 8004c7a:	4b33      	ldr	r3, [pc, #204]	; (8004d48 <MainTask+0x7dc>)
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d110      	bne.n	8004caa <MainTask+0x73e>
//				led3 = !led3;
				char command = 't';
 8004c88:	2374      	movs	r3, #116	; 0x74
 8004c8a:	72fb      	strb	r3, [r7, #11]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004c8c:	f107 010b 	add.w	r1, r7, #11
 8004c90:	2301      	movs	r3, #1
 8004c92:	2201      	movs	r2, #1
 8004c94:	482e      	ldr	r0, [pc, #184]	; (8004d50 <MainTask+0x7e4>)
 8004c96:	f00b fe6e 	bl	8010976 <HAL_UART_Transmit>
				jetson.update = 0;
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <MainTask+0x7e0>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	619a      	str	r2, [r3, #24]
				sys.jetsonUpdate = 1;
 8004ca0:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <MainTask+0x7dc>)
 8004ca2:	7853      	ldrb	r3, [r2, #1]
 8004ca4:	f043 0310 	orr.w	r3, r3, #16
 8004ca8:	7053      	strb	r3, [r2, #1]
			}
			if(jetson.timeout >= jetsonTimeout){
 8004caa:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <MainTask+0x7e0>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <MainTask+0x7f0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d328      	bcc.n	8004d0a <MainTask+0x79e>
				tracking = 0;
 8004cb8:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <MainTask+0x7f4>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
				jetson.x_pixel = 0;
 8004cbe:	4b23      	ldr	r3, [pc, #140]	; (8004d4c <MainTask+0x7e0>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	605a      	str	r2, [r3, #4]
				jetson.y_pixel = 0;
 8004cc4:	4b21      	ldr	r3, [pc, #132]	; (8004d4c <MainTask+0x7e0>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
				sys.pid = 0;
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <MainTask+0x7dc>)
 8004ccc:	7813      	ldrb	r3, [r2, #0]
 8004cce:	f36f 0341 	bfc	r3, #1, #1
 8004cd2:	7013      	strb	r3, [r2, #0]
				jetson.timeout = 0;
 8004cd4:	4b1d      	ldr	r3, [pc, #116]	; (8004d4c <MainTask+0x7e0>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	615a      	str	r2, [r3, #20]
				PIDDelayInit(&Pid_Camera);
 8004cda:	4822      	ldr	r0, [pc, #136]	; (8004d64 <MainTask+0x7f8>)
 8004cdc:	f000 ff49 	bl	8005b72 <PIDDelayInit>
				PIDDelayInit(&Pid_Camera_Pitch);
 8004ce0:	4821      	ldr	r0, [pc, #132]	; (8004d68 <MainTask+0x7fc>)
 8004ce2:	f000 ff46 	bl	8005b72 <PIDDelayInit>
				yawDelay = 0;
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <MainTask+0x800>)
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <MainTask+0x804>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004cf6:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <MainTask+0x7d4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f00c ff3c 	bl	8011b78 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <MainTask+0x808>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f00c ff37 	bl	8011b78 <osThreadSuspend>
//			char command = 'l';
//			HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
//		}

		//update
		if(ps4.button == R1){
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <MainTask+0x7d0>)
 8004d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d12:	d14c      	bne.n	8004dae <MainTask+0x842>
			while(ps4.button == R1);
 8004d14:	bf00      	nop
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <MainTask+0x7d0>)
 8004d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1e:	d0fa      	beq.n	8004d16 <MainTask+0x7aa>
			if(sys.yawrun == 0){
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <MainTask+0x7dc>)
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d124      	bne.n	8004d78 <MainTask+0x80c>
				osThreadResume(FlywheelYawPIDTaskHandle);
 8004d2e:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <MainTask+0x808>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f00c ff41 	bl	8011bba <osThreadResume>
 8004d38:	e028      	b.n	8004d8c <MainTask+0x820>
 8004d3a:	bf00      	nop
 8004d3c:	20008460 	.word	0x20008460
 8004d40:	200088dc 	.word	0x200088dc
 8004d44:	20007d3c 	.word	0x20007d3c
 8004d48:	20008868 	.word	0x20008868
 8004d4c:	20008938 	.word	0x20008938
 8004d50:	20006790 	.word	0x20006790
 8004d54:	40020814 	.word	0x40020814
 8004d58:	200087b8 	.word	0x200087b8
 8004d5c:	200088bc 	.word	0x200088bc
 8004d60:	200088f8 	.word	0x200088f8
 8004d64:	200087d4 	.word	0x200087d4
 8004d68:	20008978 	.word	0x20008978
 8004d6c:	200088f0 	.word	0x200088f0
 8004d70:	20008838 	.word	0x20008838
 8004d74:	20008858 	.word	0x20008858
			}else{
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004d78:	4b57      	ldr	r3, [pc, #348]	; (8004ed8 <MainTask+0x96c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f00c fefb 	bl	8011b78 <osThreadSuspend>
				sys.yawrun = 0;
 8004d82:	4a56      	ldr	r2, [pc, #344]	; (8004edc <MainTask+0x970>)
 8004d84:	7853      	ldrb	r3, [r2, #1]
 8004d86:	f36f 0301 	bfc	r3, #0, #2
 8004d8a:	7053      	strb	r3, [r2, #1]
			}

			if(sys.pitchrun == 1){
 8004d8c:	4b53      	ldr	r3, [pc, #332]	; (8004edc <MainTask+0x970>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <MainTask+0x842>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004d9a:	4b51      	ldr	r3, [pc, #324]	; (8004ee0 <MainTask+0x974>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f00c feea 	bl	8011b78 <osThreadSuspend>
				sys.pitchrun = 0;
 8004da4:	4a4d      	ldr	r2, [pc, #308]	; (8004edc <MainTask+0x970>)
 8004da6:	7813      	ldrb	r3, [r2, #0]
 8004da8:	f36f 13c7 	bfc	r3, #7, #1
 8004dac:	7013      	strb	r3, [r2, #0]
			}
		}

		//Start tracking

		if(lastyawP != yawP || lastyawI != yawI || lastyawD != yawD){
 8004dae:	4b4d      	ldr	r3, [pc, #308]	; (8004ee4 <MainTask+0x978>)
 8004db0:	ed93 7a00 	vldr	s14, [r3]
 8004db4:	4b4c      	ldr	r3, [pc, #304]	; (8004ee8 <MainTask+0x97c>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	d115      	bne.n	8004df0 <MainTask+0x884>
 8004dc4:	4b49      	ldr	r3, [pc, #292]	; (8004eec <MainTask+0x980>)
 8004dc6:	ed93 7a00 	vldr	s14, [r3]
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <MainTask+0x984>)
 8004dcc:	edd3 7a00 	vldr	s15, [r3]
 8004dd0:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd8:	d10a      	bne.n	8004df0 <MainTask+0x884>
 8004dda:	4b46      	ldr	r3, [pc, #280]	; (8004ef4 <MainTask+0x988>)
 8004ddc:	ed93 7a00 	vldr	s14, [r3]
 8004de0:	4b45      	ldr	r3, [pc, #276]	; (8004ef8 <MainTask+0x98c>)
 8004de2:	edd3 7a00 	vldr	s15, [r3]
 8004de6:	eeb4 7a67 	vcmp.f32	s14, s15
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	d027      	beq.n	8004e40 <MainTask+0x8d4>
			PIDGainInit(0.03, 1.0, 1/320.0, YAW_LONGEST_DELAY, yawP, yawI, yawD, 60.0, &Pid_Camera);
 8004df0:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <MainTask+0x97c>)
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <MainTask+0x984>)
 8004df8:	ed93 7a00 	vldr	s14, [r3]
 8004dfc:	4b3e      	ldr	r3, [pc, #248]	; (8004ef8 <MainTask+0x98c>)
 8004dfe:	edd3 6a00 	vldr	s13, [r3]
 8004e02:	483e      	ldr	r0, [pc, #248]	; (8004efc <MainTask+0x990>)
 8004e04:	eddf 3a3e 	vldr	s7, [pc, #248]	; 8004f00 <MainTask+0x994>
 8004e08:	eeb0 3a66 	vmov.f32	s6, s13
 8004e0c:	eef0 2a47 	vmov.f32	s5, s14
 8004e10:	eeb0 2a67 	vmov.f32	s4, s15
 8004e14:	eef3 1a04 	vmov.f32	s3, #52	; 0x41a00000  20.0
 8004e18:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8004f04 <MainTask+0x998>
 8004e1c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004e20:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8004f08 <MainTask+0x99c>
 8004e24:	f000 fd37 	bl	8005896 <PIDGainInit>
			lastyawP = yawP;
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <MainTask+0x97c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <MainTask+0x978>)
 8004e2e:	6013      	str	r3, [r2, #0]
			lastyawI = yawI;
 8004e30:	4b2f      	ldr	r3, [pc, #188]	; (8004ef0 <MainTask+0x984>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <MainTask+0x980>)
 8004e36:	6013      	str	r3, [r2, #0]
			lastyawD = yawD;
 8004e38:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <MainTask+0x98c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <MainTask+0x988>)
 8004e3e:	6013      	str	r3, [r2, #0]
		}

		if(lastpitchP != pitchP || lastpitchI != pitchI || lastpitchD != pitchD){
 8004e40:	4b32      	ldr	r3, [pc, #200]	; (8004f0c <MainTask+0x9a0>)
 8004e42:	ed93 7a00 	vldr	s14, [r3]
 8004e46:	4b32      	ldr	r3, [pc, #200]	; (8004f10 <MainTask+0x9a4>)
 8004e48:	edd3 7a00 	vldr	s15, [r3]
 8004e4c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	d116      	bne.n	8004e84 <MainTask+0x918>
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <MainTask+0x9a8>)
 8004e58:	ed93 7a00 	vldr	s14, [r3]
 8004e5c:	4b2e      	ldr	r3, [pc, #184]	; (8004f18 <MainTask+0x9ac>)
 8004e5e:	edd3 7a00 	vldr	s15, [r3]
 8004e62:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6a:	d10b      	bne.n	8004e84 <MainTask+0x918>
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <MainTask+0x9b0>)
 8004e6e:	ed93 7a00 	vldr	s14, [r3]
 8004e72:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <MainTask+0x9b4>)
 8004e74:	edd3 7a00 	vldr	s15, [r3]
 8004e78:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e80:	f43f ab9e 	beq.w	80045c0 <MainTask+0x54>
			PIDGainInit(0.03, 1.0, 1/240.0, PITCH_LONGEST_DELAY, pitchP, pitchI, pitchD, 60.0, &Pid_Camera_Pitch);
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <MainTask+0x9a4>)
 8004e86:	edd3 7a00 	vldr	s15, [r3]
 8004e8a:	4b23      	ldr	r3, [pc, #140]	; (8004f18 <MainTask+0x9ac>)
 8004e8c:	ed93 7a00 	vldr	s14, [r3]
 8004e90:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <MainTask+0x9b4>)
 8004e92:	edd3 6a00 	vldr	s13, [r3]
 8004e96:	4823      	ldr	r0, [pc, #140]	; (8004f24 <MainTask+0x9b8>)
 8004e98:	eddf 3a19 	vldr	s7, [pc, #100]	; 8004f00 <MainTask+0x994>
 8004e9c:	eeb0 3a66 	vmov.f32	s6, s13
 8004ea0:	eef0 2a47 	vmov.f32	s5, s14
 8004ea4:	eeb0 2a67 	vmov.f32	s4, s15
 8004ea8:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8004eac:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8004f28 <MainTask+0x9bc>
 8004eb0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004eb4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004f08 <MainTask+0x99c>
 8004eb8:	f000 fced 	bl	8005896 <PIDGainInit>
			lastpitchP = pitchP;
 8004ebc:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <MainTask+0x9a4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a12      	ldr	r2, [pc, #72]	; (8004f0c <MainTask+0x9a0>)
 8004ec2:	6013      	str	r3, [r2, #0]
			lastpitchI = pitchI;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <MainTask+0x9ac>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <MainTask+0x9a8>)
 8004eca:	6013      	str	r3, [r2, #0]
			lastpitchD = pitchD;
 8004ecc:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <MainTask+0x9b4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <MainTask+0x9b0>)
 8004ed2:	6013      	str	r3, [r2, #0]
		ServoSetPulse(&servo, servo.currentPulse);
 8004ed4:	f7ff bb74 	b.w	80045c0 <MainTask+0x54>
 8004ed8:	20008858 	.word	0x20008858
 8004edc:	20008868 	.word	0x20008868
 8004ee0:	200088dc 	.word	0x200088dc
 8004ee4:	20008a00 	.word	0x20008a00
 8004ee8:	20008890 	.word	0x20008890
 8004eec:	20008870 	.word	0x20008870
 8004ef0:	2000887c 	.word	0x2000887c
 8004ef4:	200088b8 	.word	0x200088b8
 8004ef8:	200087c8 	.word	0x200087c8
 8004efc:	200087d4 	.word	0x200087d4
 8004f00:	42700000 	.word	0x42700000
 8004f04:	3b4ccccd 	.word	0x3b4ccccd
 8004f08:	3cf5c28f 	.word	0x3cf5c28f
 8004f0c:	20008928 	.word	0x20008928
 8004f10:	20008860 	.word	0x20008860
 8004f14:	20008968 	.word	0x20008968
 8004f18:	20008884 	.word	0x20008884
 8004f1c:	200089f8 	.word	0x200089f8
 8004f20:	200088b0 	.word	0x200088b0
 8004f24:	20008978 	.word	0x20008978
 8004f28:	3b888889 	.word	0x3b888889

08004f2c <FlywheelYawPIDTask>:
		}
	}
}

void FlywheelYawPIDTask(void *argument){
 8004f2c:	b5b0      	push	{r4, r5, r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	float yawDynamicCoarseTolerance, yawDynamicFineTolerance, dynamicJerkTime;
	uint32_t yawDelayAdd;
	while(1){
		sys.yawrun = 1;
 8004f34:	4aa2      	ldr	r2, [pc, #648]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 8004f36:	7853      	ldrb	r3, [r2, #1]
 8004f38:	2101      	movs	r1, #1
 8004f3a:	f361 0301 	bfi	r3, r1, #0, #2
 8004f3e:	7053      	strb	r3, [r2, #1]
		if(tracking){
 8004f40:	4ba0      	ldr	r3, [pc, #640]	; (80051c4 <FlywheelYawPIDTask+0x298>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f5      	beq.n	8004f34 <FlywheelYawPIDTask+0x8>
			errorYaw = jetson.x_pixel;
 8004f48:	4b9f      	ldr	r3, [pc, #636]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	ee07 3a90 	vmov	s15, r3
 8004f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f54:	4b9d      	ldr	r3, [pc, #628]	; (80051cc <FlywheelYawPIDTask+0x2a0>)
 8004f56:	edc3 7a00 	vstr	s15, [r3]

			if(jetson.area < 500.0){
 8004f5a:	4b9b      	ldr	r3, [pc, #620]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004f5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f60:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80051d0 <FlywheelYawPIDTask+0x2a4>
 8004f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f6c:	d503      	bpl.n	8004f76 <FlywheelYawPIDTask+0x4a>
				yawDelayAdd = yaw500da;
 8004f6e:	4b99      	ldr	r3, [pc, #612]	; (80051d4 <FlywheelYawPIDTask+0x2a8>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e0ad      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 1000.0){
 8004f76:	4b94      	ldr	r3, [pc, #592]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004f78:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f7c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80051d8 <FlywheelYawPIDTask+0x2ac>
 8004f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	d509      	bpl.n	8004f9e <FlywheelYawPIDTask+0x72>
				yawDynamicCoarseTolerance = 180.0;
 8004f8a:	4b94      	ldr	r3, [pc, #592]	; (80051dc <FlywheelYawPIDTask+0x2b0>)
 8004f8c:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 85.0;
 8004f8e:	4b94      	ldr	r3, [pc, #592]	; (80051e0 <FlywheelYawPIDTask+0x2b4>)
 8004f90:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 35;
 8004f92:	4b94      	ldr	r3, [pc, #592]	; (80051e4 <FlywheelYawPIDTask+0x2b8>)
 8004f94:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw1000da;
 8004f96:	4b94      	ldr	r3, [pc, #592]	; (80051e8 <FlywheelYawPIDTask+0x2bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	e099      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 2000){
 8004f9e:	4b8a      	ldr	r3, [pc, #552]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004fa0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fa4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80051ec <FlywheelYawPIDTask+0x2c0>
 8004fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	d509      	bpl.n	8004fc6 <FlywheelYawPIDTask+0x9a>
				yawDynamicCoarseTolerance = 130.0;
 8004fb2:	4b8f      	ldr	r3, [pc, #572]	; (80051f0 <FlywheelYawPIDTask+0x2c4>)
 8004fb4:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 60.0;
 8004fb6:	4b8f      	ldr	r3, [pc, #572]	; (80051f4 <FlywheelYawPIDTask+0x2c8>)
 8004fb8:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 25;
 8004fba:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <FlywheelYawPIDTask+0x2cc>)
 8004fbc:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw2000da;
 8004fbe:	4b8f      	ldr	r3, [pc, #572]	; (80051fc <FlywheelYawPIDTask+0x2d0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e085      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 4000){
 8004fc6:	4b80      	ldr	r3, [pc, #512]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004fc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004fcc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005200 <FlywheelYawPIDTask+0x2d4>
 8004fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	d509      	bpl.n	8004fee <FlywheelYawPIDTask+0xc2>
				yawDynamicCoarseTolerance = 120.0;
 8004fda:	4b8a      	ldr	r3, [pc, #552]	; (8005204 <FlywheelYawPIDTask+0x2d8>)
 8004fdc:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 20.0;
 8004fde:	4b8a      	ldr	r3, [pc, #552]	; (8005208 <FlywheelYawPIDTask+0x2dc>)
 8004fe0:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 19;
 8004fe2:	4b8a      	ldr	r3, [pc, #552]	; (800520c <FlywheelYawPIDTask+0x2e0>)
 8004fe4:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw4000da;
 8004fe6:	4b8a      	ldr	r3, [pc, #552]	; (8005210 <FlywheelYawPIDTask+0x2e4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e071      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 7000){
 8004fee:	4b76      	ldr	r3, [pc, #472]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8004ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ff4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8005214 <FlywheelYawPIDTask+0x2e8>
 8004ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005000:	d509      	bpl.n	8005016 <FlywheelYawPIDTask+0xea>
				yawDynamicCoarseTolerance = 70.0;
 8005002:	4b85      	ldr	r3, [pc, #532]	; (8005218 <FlywheelYawPIDTask+0x2ec>)
 8005004:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 18.0;
 8005006:	4b85      	ldr	r3, [pc, #532]	; (800521c <FlywheelYawPIDTask+0x2f0>)
 8005008:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 17;
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <FlywheelYawPIDTask+0x2f4>)
 800500c:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw7000da;
 800500e:	4b85      	ldr	r3, [pc, #532]	; (8005224 <FlywheelYawPIDTask+0x2f8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e05d      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 10000){
 8005016:	4b6c      	ldr	r3, [pc, #432]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8005018:	edd3 7a03 	vldr	s15, [r3, #12]
 800501c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8005228 <FlywheelYawPIDTask+0x2fc>
 8005020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005028:	d50a      	bpl.n	8005040 <FlywheelYawPIDTask+0x114>
				yawDynamicCoarseTolerance = 60.0;
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <FlywheelYawPIDTask+0x2c8>)
 800502c:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 16.0;
 800502e:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8005032:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 15;
 8005034:	4b7d      	ldr	r3, [pc, #500]	; (800522c <FlywheelYawPIDTask+0x300>)
 8005036:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw10000da;
 8005038:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <FlywheelYawPIDTask+0x304>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	e048      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 13000){
 8005040:	4b61      	ldr	r3, [pc, #388]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8005042:	edd3 7a03 	vldr	s15, [r3, #12]
 8005046:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8005234 <FlywheelYawPIDTask+0x308>
 800504a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d509      	bpl.n	8005068 <FlywheelYawPIDTask+0x13c>
				yawDynamicCoarseTolerance = 50.0;
 8005054:	4b78      	ldr	r3, [pc, #480]	; (8005238 <FlywheelYawPIDTask+0x30c>)
 8005056:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 14.0;
 8005058:	4b78      	ldr	r3, [pc, #480]	; (800523c <FlywheelYawPIDTask+0x310>)
 800505a:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 13;
 800505c:	4b78      	ldr	r3, [pc, #480]	; (8005240 <FlywheelYawPIDTask+0x314>)
 800505e:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw13000da;
 8005060:	4b78      	ldr	r3, [pc, #480]	; (8005244 <FlywheelYawPIDTask+0x318>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	61fb      	str	r3, [r7, #28]
 8005066:	e034      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 16000){
 8005068:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 800506a:	edd3 7a03 	vldr	s15, [r3, #12]
 800506e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8005248 <FlywheelYawPIDTask+0x31c>
 8005072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	d509      	bpl.n	8005090 <FlywheelYawPIDTask+0x164>
				yawDynamicCoarseTolerance = 40.0;
 800507c:	4b73      	ldr	r3, [pc, #460]	; (800524c <FlywheelYawPIDTask+0x320>)
 800507e:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 12.0;
 8005080:	4b73      	ldr	r3, [pc, #460]	; (8005250 <FlywheelYawPIDTask+0x324>)
 8005082:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 11;
 8005084:	4b73      	ldr	r3, [pc, #460]	; (8005254 <FlywheelYawPIDTask+0x328>)
 8005086:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw16000da;
 8005088:	4b73      	ldr	r3, [pc, #460]	; (8005258 <FlywheelYawPIDTask+0x32c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	e020      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 20000){
 8005090:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 8005092:	edd3 7a03 	vldr	s15, [r3, #12]
 8005096:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800525c <FlywheelYawPIDTask+0x330>
 800509a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a2:	d509      	bpl.n	80050b8 <FlywheelYawPIDTask+0x18c>
				yawDynamicCoarseTolerance = 30.0;
 80050a4:	4b6e      	ldr	r3, [pc, #440]	; (8005260 <FlywheelYawPIDTask+0x334>)
 80050a6:	61bb      	str	r3, [r7, #24]
				yawDynamicFineTolerance = 10.0;
 80050a8:	4b6e      	ldr	r3, [pc, #440]	; (8005264 <FlywheelYawPIDTask+0x338>)
 80050aa:	617b      	str	r3, [r7, #20]
				dynamicJerkTime = 9;
 80050ac:	4b6e      	ldr	r3, [pc, #440]	; (8005268 <FlywheelYawPIDTask+0x33c>)
 80050ae:	613b      	str	r3, [r7, #16]
				yawDelayAdd = yaw20000da;
 80050b0:	4b6e      	ldr	r3, [pc, #440]	; (800526c <FlywheelYawPIDTask+0x340>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e00c      	b.n	80050d2 <FlywheelYawPIDTask+0x1a6>
			}else if(jetson.area < 30000){
 80050b8:	4b43      	ldr	r3, [pc, #268]	; (80051c8 <FlywheelYawPIDTask+0x29c>)
 80050ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80050be:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005270 <FlywheelYawPIDTask+0x344>
 80050c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d502      	bpl.n	80050d2 <FlywheelYawPIDTask+0x1a6>
				yawDelayAdd = yaw30000da;
 80050cc:	4b69      	ldr	r3, [pc, #420]	; (8005274 <FlywheelYawPIDTask+0x348>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	61fb      	str	r3, [r7, #28]
//				yawDynamicCoarseTolerance = YAWCTOL;
//				yawDynamicFineTolerance = YAWFTOL;
//				dynamicJerkTime = JERKTIME;
//			}
			//Coarse Tolerance Fast response
			if(WITHIN_TOL(8.0)){
 80050d2:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <FlywheelYawPIDTask+0x2a0>)
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80050dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	db2e      	blt.n	8005144 <FlywheelYawPIDTask+0x218>
 80050e6:	4b39      	ldr	r3, [pc, #228]	; (80051cc <FlywheelYawPIDTask+0x2a0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80050f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f8:	d824      	bhi.n	8005144 <FlywheelYawPIDTask+0x218>
				sys.pid = 0;
 80050fa:	4a31      	ldr	r2, [pc, #196]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 80050fc:	7813      	ldrb	r3, [r2, #0]
 80050fe:	f36f 0341 	bfc	r3, #1, #1
 8005102:	7013      	strb	r3, [r2, #0]
				PIDDelayInit(&Pid_Camera);
 8005104:	485c      	ldr	r0, [pc, #368]	; (8005278 <FlywheelYawPIDTask+0x34c>)
 8005106:	f000 fd34 	bl	8005b72 <PIDDelayInit>
				yawDelay = 0;
 800510a:	4b5c      	ldr	r3, [pc, #368]	; (800527c <FlywheelYawPIDTask+0x350>)
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
				if(sys.shootp1l == 0){
 8005112:	4b2b      	ldr	r3, [pc, #172]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f040 80e7 	bne.w	80052f0 <FlywheelYawPIDTask+0x3c4>
					within_tolerance_counter ++;
 8005122:	4b57      	ldr	r3, [pc, #348]	; (8005280 <FlywheelYawPIDTask+0x354>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a55      	ldr	r2, [pc, #340]	; (8005280 <FlywheelYawPIDTask+0x354>)
 800512a:	6013      	str	r3, [r2, #0]
					if(within_tolerance_counter >= WITHIN_TIMES){
 800512c:	4b54      	ldr	r3, [pc, #336]	; (8005280 <FlywheelYawPIDTask+0x354>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005134:	f2c0 80dc 	blt.w	80052f0 <FlywheelYawPIDTask+0x3c4>
						sys.shootp1l = 1;
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 800513a:	7813      	ldrb	r3, [r2, #0]
 800513c:	f043 0320 	orr.w	r3, r3, #32
 8005140:	7013      	strb	r3, [r2, #0]
				if(sys.shootp1l == 0){
 8005142:	e0d5      	b.n	80052f0 <FlywheelYawPIDTask+0x3c4>
					}
				}
			}else{
				sys.pid = 1;
 8005144:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 8005146:	7813      	ldrb	r3, [r2, #0]
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	7013      	strb	r3, [r2, #0]
				sys.shootp1l = 0;
 800514e:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <FlywheelYawPIDTask+0x294>)
 8005150:	7813      	ldrb	r3, [r2, #0]
 8005152:	f36f 1345 	bfc	r3, #5, #1
 8005156:	7013      	strb	r3, [r2, #0]
				within_tolerance_counter = 0;
 8005158:	4b49      	ldr	r3, [pc, #292]	; (8005280 <FlywheelYawPIDTask+0x354>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
				if(errorYaw < 0){
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <FlywheelYawPIDTask+0x2a0>)
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516c:	f140 808e 	bpl.w	800528c <FlywheelYawPIDTask+0x360>
					Yaw(1);
 8005170:	2101      	movs	r1, #1
 8005172:	4844      	ldr	r0, [pc, #272]	; (8005284 <FlywheelYawPIDTask+0x358>)
 8005174:	f001 fadb 	bl	800672e <ServoMovePulse>
					//yawDelay(PID output) should be negative, the bigger the error, the bigger yawDelay
					//but we want the bigger the error, the smaller yawDelay, minimum is delay 1ms
					uint32_t delay = YAW_LONGEST_DELAY + yawDelay + yawDelayAdd;
 8005178:	4b40      	ldr	r3, [pc, #256]	; (800527c <FlywheelYawPIDTask+0x350>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fb f9e3 	bl	8000548 <__aeabi_f2d>
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	4b40      	ldr	r3, [pc, #256]	; (8005288 <FlywheelYawPIDTask+0x35c>)
 8005188:	f7fb f880 	bl	800028c <__adddf3>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4614      	mov	r4, r2
 8005192:	461d      	mov	r5, r3
 8005194:	69f8      	ldr	r0, [r7, #28]
 8005196:	f7fb f9b5 	bl	8000504 <__aeabi_ui2d>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f7fb f873 	bl	800028c <__adddf3>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fcfb 	bl	8000ba8 <__aeabi_d2uiz>
 80051b2:	4603      	mov	r3, r0
 80051b4:	60bb      	str	r3, [r7, #8]
					osDelay(delay);
 80051b6:	68b8      	ldr	r0, [r7, #8]
 80051b8:	f00c fd4d 	bl	8011c56 <osDelay>
 80051bc:	e099      	b.n	80052f2 <FlywheelYawPIDTask+0x3c6>
 80051be:	bf00      	nop
 80051c0:	20008868 	.word	0x20008868
 80051c4:	200088f8 	.word	0x200088f8
 80051c8:	20008938 	.word	0x20008938
 80051cc:	200088e8 	.word	0x200088e8
 80051d0:	43fa0000 	.word	0x43fa0000
 80051d4:	200088d8 	.word	0x200088d8
 80051d8:	447a0000 	.word	0x447a0000
 80051dc:	43340000 	.word	0x43340000
 80051e0:	42aa0000 	.word	0x42aa0000
 80051e4:	420c0000 	.word	0x420c0000
 80051e8:	20008874 	.word	0x20008874
 80051ec:	44fa0000 	.word	0x44fa0000
 80051f0:	43020000 	.word	0x43020000
 80051f4:	42700000 	.word	0x42700000
 80051f8:	41c80000 	.word	0x41c80000
 80051fc:	200088fc 	.word	0x200088fc
 8005200:	457a0000 	.word	0x457a0000
 8005204:	42f00000 	.word	0x42f00000
 8005208:	41a00000 	.word	0x41a00000
 800520c:	41980000 	.word	0x41980000
 8005210:	20008a08 	.word	0x20008a08
 8005214:	45dac000 	.word	0x45dac000
 8005218:	428c0000 	.word	0x428c0000
 800521c:	41900000 	.word	0x41900000
 8005220:	41880000 	.word	0x41880000
 8005224:	200088e0 	.word	0x200088e0
 8005228:	461c4000 	.word	0x461c4000
 800522c:	41700000 	.word	0x41700000
 8005230:	20008a0c 	.word	0x20008a0c
 8005234:	464b2000 	.word	0x464b2000
 8005238:	42480000 	.word	0x42480000
 800523c:	41600000 	.word	0x41600000
 8005240:	41500000 	.word	0x41500000
 8005244:	20008880 	.word	0x20008880
 8005248:	467a0000 	.word	0x467a0000
 800524c:	42200000 	.word	0x42200000
 8005250:	41400000 	.word	0x41400000
 8005254:	41300000 	.word	0x41300000
 8005258:	20008840 	.word	0x20008840
 800525c:	469c4000 	.word	0x469c4000
 8005260:	41f00000 	.word	0x41f00000
 8005264:	41200000 	.word	0x41200000
 8005268:	41100000 	.word	0x41100000
 800526c:	200088b4 	.word	0x200088b4
 8005270:	46ea6000 	.word	0x46ea6000
 8005274:	20008970 	.word	0x20008970
 8005278:	200087d4 	.word	0x200087d4
 800527c:	200088f0 	.word	0x200088f0
 8005280:	20008888 	.word	0x20008888
 8005284:	20007cc4 	.word	0x20007cc4
 8005288:	40340000 	.word	0x40340000
				}else if(errorYaw > 0){
 800528c:	4b2a      	ldr	r3, [pc, #168]	; (8005338 <FlywheelYawPIDTask+0x40c>)
 800528e:	edd3 7a00 	vldr	s15, [r3]
 8005292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	dd2a      	ble.n	80052f2 <FlywheelYawPIDTask+0x3c6>
					Yaw(-1);
 800529c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052a0:	4826      	ldr	r0, [pc, #152]	; (800533c <FlywheelYawPIDTask+0x410>)
 80052a2:	f001 fa44 	bl	800672e <ServoMovePulse>
					uint32_t delay = YAW_LONGEST_DELAY - yawDelay + yawDelayAdd;
 80052a6:	4b26      	ldr	r3, [pc, #152]	; (8005340 <FlywheelYawPIDTask+0x414>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fb f94c 	bl	8000548 <__aeabi_f2d>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	4922      	ldr	r1, [pc, #136]	; (8005344 <FlywheelYawPIDTask+0x418>)
 80052ba:	f7fa ffe5 	bl	8000288 <__aeabi_dsub>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4614      	mov	r4, r2
 80052c4:	461d      	mov	r5, r3
 80052c6:	69f8      	ldr	r0, [r7, #28]
 80052c8:	f7fb f91c 	bl	8000504 <__aeabi_ui2d>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4620      	mov	r0, r4
 80052d2:	4629      	mov	r1, r5
 80052d4:	f7fa ffda 	bl	800028c <__adddf3>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4610      	mov	r0, r2
 80052de:	4619      	mov	r1, r3
 80052e0:	f7fb fc62 	bl	8000ba8 <__aeabi_d2uiz>
 80052e4:	4603      	mov	r3, r0
 80052e6:	60fb      	str	r3, [r7, #12]
					osDelay(delay);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f00c fcb4 	bl	8011c56 <osDelay>
 80052ee:	e000      	b.n	80052f2 <FlywheelYawPIDTask+0x3c6>
				if(sys.shootp1l == 0){
 80052f0:	bf00      	nop
				}
			}
#ifndef TWO_AXIS_TOGETHER
			if(!sys.shootp1l){
 80052f2:	4b15      	ldr	r3, [pc, #84]	; (8005348 <FlywheelYawPIDTask+0x41c>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d105      	bne.n	800530c <FlywheelYawPIDTask+0x3e0>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <FlywheelYawPIDTask+0x420>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f00c fc37 	bl	8011b78 <osThreadSuspend>
 800530a:	e613      	b.n	8004f34 <FlywheelYawPIDTask+0x8>
//					Yaw(-1);
//					osDelay(dynamicJerkTime);
//				}
//			}
#ifndef TWO_AXIS_TOGETHER
			else if(sys.shootp1l && WITHIN_TOL(YAWFTOL)){
 800530c:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <FlywheelYawPIDTask+0x41c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	f43f ae0c 	beq.w	8004f34 <FlywheelYawPIDTask+0x8>
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <FlywheelYawPIDTask+0x424>)
 800531e:	edd3 7a00 	vldr	s15, [r3]
 8005322:	eeb1 7a67 	vneg.f32	s14, s15
 8005326:	4b04      	ldr	r3, [pc, #16]	; (8005338 <FlywheelYawPIDTask+0x40c>)
 8005328:	edd3 7a00 	vldr	s15, [r3]
 800532c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sys.yawrun = 1;
 8005334:	e5fe      	b.n	8004f34 <FlywheelYawPIDTask+0x8>
 8005336:	bf00      	nop
 8005338:	200088e8 	.word	0x200088e8
 800533c:	20007cc4 	.word	0x20007cc4
 8005340:	200088f0 	.word	0x200088f0
 8005344:	40340000 	.word	0x40340000
 8005348:	20008868 	.word	0x20008868
 800534c:	200088dc 	.word	0x200088dc
 8005350:	200088a8 	.word	0x200088a8

08005354 <FlywheelPitchPIDTask>:
#endif
		}
	}
}

void FlywheelPitchPIDTask(void *argument){
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	while(1){
		sys.pitchrun = 1;
 800535c:	4a81      	ldr	r2, [pc, #516]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 800535e:	7813      	ldrb	r3, [r2, #0]
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	7013      	strb	r3, [r2, #0]
		errorPitch = jetson.y_pixel;
 8005366:	4b80      	ldr	r3, [pc, #512]	; (8005568 <FlywheelPitchPIDTask+0x214>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005372:	4b7e      	ldr	r3, [pc, #504]	; (800556c <FlywheelPitchPIDTask+0x218>)
 8005374:	edc3 7a00 	vstr	s15, [r3]

		if(Y_WITHIN_TOL(PITCHCTOL)){
 8005378:	4b7d      	ldr	r3, [pc, #500]	; (8005570 <FlywheelPitchPIDTask+0x21c>)
 800537a:	edd3 7a00 	vldr	s15, [r3]
 800537e:	eeb1 7a67 	vneg.f32	s14, s15
 8005382:	4b7a      	ldr	r3, [pc, #488]	; (800556c <FlywheelPitchPIDTask+0x218>)
 8005384:	edd3 7a00 	vldr	s15, [r3]
 8005388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	d82d      	bhi.n	80053ee <FlywheelPitchPIDTask+0x9a>
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <FlywheelPitchPIDTask+0x218>)
 8005394:	ed93 7a00 	vldr	s14, [r3]
 8005398:	4b75      	ldr	r3, [pc, #468]	; (8005570 <FlywheelPitchPIDTask+0x21c>)
 800539a:	edd3 7a00 	vldr	s15, [r3]
 800539e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	d822      	bhi.n	80053ee <FlywheelPitchPIDTask+0x9a>
			sys.pidPitch = 0;
 80053a8:	4a6e      	ldr	r2, [pc, #440]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80053aa:	7813      	ldrb	r3, [r2, #0]
 80053ac:	f36f 0382 	bfc	r3, #2, #1
 80053b0:	7013      	strb	r3, [r2, #0]
			PIDDelayInit(&Pid_Camera_Pitch);
 80053b2:	4870      	ldr	r0, [pc, #448]	; (8005574 <FlywheelPitchPIDTask+0x220>)
 80053b4:	f000 fbdd 	bl	8005b72 <PIDDelayInit>
			pitchDelay = 0;
 80053b8:	4b6f      	ldr	r3, [pc, #444]	; (8005578 <FlywheelPitchPIDTask+0x224>)
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
			if(sys.shootp1r == 0){
 80053c0:	4b68      	ldr	r3, [pc, #416]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d174      	bne.n	80054b8 <FlywheelPitchPIDTask+0x164>
				y_within_tolerance_counter ++;
 80053ce:	4b6b      	ldr	r3, [pc, #428]	; (800557c <FlywheelPitchPIDTask+0x228>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a69      	ldr	r2, [pc, #420]	; (800557c <FlywheelPitchPIDTask+0x228>)
 80053d6:	6013      	str	r3, [r2, #0]
				if(y_within_tolerance_counter >= WITHIN_TIMES){
 80053d8:	4b68      	ldr	r3, [pc, #416]	; (800557c <FlywheelPitchPIDTask+0x228>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053e0:	db6a      	blt.n	80054b8 <FlywheelPitchPIDTask+0x164>
					sys.shootp1r = 1;
 80053e2:	4a60      	ldr	r2, [pc, #384]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80053e4:	7813      	ldrb	r3, [r2, #0]
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	7013      	strb	r3, [r2, #0]
			if(sys.shootp1r == 0){
 80053ec:	e064      	b.n	80054b8 <FlywheelPitchPIDTask+0x164>
				}
			}
		}else{
			sys.pidPitch = 1;
 80053ee:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80053f0:	7813      	ldrb	r3, [r2, #0]
 80053f2:	f043 0304 	orr.w	r3, r3, #4
 80053f6:	7013      	strb	r3, [r2, #0]
			sys.shootp1r = 0;
 80053f8:	4a5a      	ldr	r2, [pc, #360]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80053fa:	7813      	ldrb	r3, [r2, #0]
 80053fc:	f36f 1304 	bfc	r3, #4, #1
 8005400:	7013      	strb	r3, [r2, #0]
			y_within_tolerance_counter = 0;
 8005402:	4b5e      	ldr	r3, [pc, #376]	; (800557c <FlywheelPitchPIDTask+0x228>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
			if(errorPitch < 0){
 8005408:	4b58      	ldr	r3, [pc, #352]	; (800556c <FlywheelPitchPIDTask+0x218>)
 800540a:	edd3 7a00 	vldr	s15, [r3]
 800540e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	d521      	bpl.n	800545c <FlywheelPitchPIDTask+0x108>
				Pitch(1);
 8005418:	2101      	movs	r1, #1
 800541a:	4859      	ldr	r0, [pc, #356]	; (8005580 <FlywheelPitchPIDTask+0x22c>)
 800541c:	f001 f987 	bl	800672e <ServoMovePulse>
				uint32_t delay = PITCH_LONGEST_DELAY + pitchDelay + 1;
 8005420:	4b55      	ldr	r3, [pc, #340]	; (8005578 <FlywheelPitchPIDTask+0x224>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb f88f 	bl	8000548 <__aeabi_f2d>
 800542a:	f04f 0200 	mov.w	r2, #0
 800542e:	4b55      	ldr	r3, [pc, #340]	; (8005584 <FlywheelPitchPIDTask+0x230>)
 8005430:	f7fa ff2c 	bl	800028c <__adddf3>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	4b51      	ldr	r3, [pc, #324]	; (8005588 <FlywheelPitchPIDTask+0x234>)
 8005442:	f7fa ff23 	bl	800028c <__adddf3>
 8005446:	4602      	mov	r2, r0
 8005448:	460b      	mov	r3, r1
 800544a:	4610      	mov	r0, r2
 800544c:	4619      	mov	r1, r3
 800544e:	f7fb fbab 	bl	8000ba8 <__aeabi_d2uiz>
 8005452:	4603      	mov	r3, r0
 8005454:	60fb      	str	r3, [r7, #12]
				osDelay(delay);
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f00c fbfd 	bl	8011c56 <osDelay>
			}

			if(errorPitch > 0){
 800545c:	4b43      	ldr	r3, [pc, #268]	; (800556c <FlywheelPitchPIDTask+0x218>)
 800545e:	edd3 7a00 	vldr	s15, [r3]
 8005462:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546a:	dd26      	ble.n	80054ba <FlywheelPitchPIDTask+0x166>
				Pitch(-1);
 800546c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005470:	4843      	ldr	r0, [pc, #268]	; (8005580 <FlywheelPitchPIDTask+0x22c>)
 8005472:	f001 f95c 	bl	800672e <ServoMovePulse>
				uint32_t delay = PITCH_LONGEST_DELAY - pitchDelay + 1;
 8005476:	4b40      	ldr	r3, [pc, #256]	; (8005578 <FlywheelPitchPIDTask+0x224>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb f864 	bl	8000548 <__aeabi_f2d>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	493e      	ldr	r1, [pc, #248]	; (8005584 <FlywheelPitchPIDTask+0x230>)
 800548a:	f7fa fefd 	bl	8000288 <__aeabi_dsub>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <FlywheelPitchPIDTask+0x234>)
 800549c:	f7fa fef6 	bl	800028c <__adddf3>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4610      	mov	r0, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	f7fb fb7e 	bl	8000ba8 <__aeabi_d2uiz>
 80054ac:	4603      	mov	r3, r0
 80054ae:	60bb      	str	r3, [r7, #8]
				osDelay(delay);
 80054b0:	68b8      	ldr	r0, [r7, #8]
 80054b2:	f00c fbd0 	bl	8011c56 <osDelay>
 80054b6:	e000      	b.n	80054ba <FlywheelPitchPIDTask+0x166>
			if(sys.shootp1r == 0){
 80054b8:	bf00      	nop
			}
		}

		if(sys.shootp1r && !Y_WITHIN_TOL(PITCHFTOL)){
 80054ba:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <FlywheelPitchPIDTask+0x210>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f43f af49 	beq.w	800535c <FlywheelPitchPIDTask+0x8>
 80054ca:	4b30      	ldr	r3, [pc, #192]	; (800558c <FlywheelPitchPIDTask+0x238>)
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	eeb1 7a67 	vneg.f32	s14, s15
 80054d4:	4b25      	ldr	r3, [pc, #148]	; (800556c <FlywheelPitchPIDTask+0x218>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	bf94      	ite	ls
 80054e4:	2301      	movls	r3, #1
 80054e6:	2300      	movhi	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f083 0301 	eor.w	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <FlywheelPitchPIDTask+0x1c8>
 80054f4:	4b1d      	ldr	r3, [pc, #116]	; (800556c <FlywheelPitchPIDTask+0x218>)
 80054f6:	ed93 7a00 	vldr	s14, [r3]
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <FlywheelPitchPIDTask+0x238>)
 80054fc:	edd3 7a00 	vldr	s15, [r3]
 8005500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005508:	bf94      	ite	ls
 800550a:	2301      	movls	r3, #1
 800550c:	2300      	movhi	r3, #0
 800550e:	b2db      	uxtb	r3, r3
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	f43f af20 	beq.w	800535c <FlywheelPitchPIDTask+0x8>
			if(errorPitch < 0){
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <FlywheelPitchPIDTask+0x218>)
 800551e:	edd3 7a00 	vldr	s15, [r3]
 8005522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800552a:	d508      	bpl.n	800553e <FlywheelPitchPIDTask+0x1ea>
				Pitch(1);
 800552c:	2101      	movs	r1, #1
 800552e:	4814      	ldr	r0, [pc, #80]	; (8005580 <FlywheelPitchPIDTask+0x22c>)
 8005530:	f001 f8fd 	bl	800672e <ServoMovePulse>
				osDelay(PITCHJERKTIME);
 8005534:	4b16      	ldr	r3, [pc, #88]	; (8005590 <FlywheelPitchPIDTask+0x23c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f00c fb8c 	bl	8011c56 <osDelay>
			}

			if(errorPitch > 0){
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <FlywheelPitchPIDTask+0x218>)
 8005540:	edd3 7a00 	vldr	s15, [r3]
 8005544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	dd09      	ble.n	8005562 <FlywheelPitchPIDTask+0x20e>
				Pitch(-1);
 800554e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005552:	480b      	ldr	r0, [pc, #44]	; (8005580 <FlywheelPitchPIDTask+0x22c>)
 8005554:	f001 f8eb 	bl	800672e <ServoMovePulse>
				osDelay(PITCHJERKTIME);
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <FlywheelPitchPIDTask+0x23c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f00c fb7a 	bl	8011c56 <osDelay>
		sys.pitchrun = 1;
 8005562:	e6fb      	b.n	800535c <FlywheelPitchPIDTask+0x8>
 8005564:	20008868 	.word	0x20008868
 8005568:	20008938 	.word	0x20008938
 800556c:	200088e4 	.word	0x200088e4
 8005570:	20008a10 	.word	0x20008a10
 8005574:	20008978 	.word	0x20008978
 8005578:	20008838 	.word	0x20008838
 800557c:	2000882c 	.word	0x2000882c
 8005580:	20007d3c 	.word	0x20007d3c
 8005584:	40240000 	.word	0x40240000
 8005588:	3ff00000 	.word	0x3ff00000
 800558c:	2000889c 	.word	0x2000889c
 8005590:	20008900 	.word	0x20008900

08005594 <EmergencyTask>:
	}
}



void EmergencyTask(void *argument){
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

	while(1){

		if(ps4.button == TOUCH){
 800559c:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <EmergencyTask+0x74>)
 800559e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a4:	d1fa      	bne.n	800559c <EmergencyTask+0x8>
			RNSStop(&rns);
 80055a6:	4819      	ldr	r0, [pc, #100]	; (800560c <EmergencyTask+0x78>)
 80055a8:	f000 ff00 	bl	80063ac <RNSStop>
			VESCStop(&vesc1);
 80055ac:	4818      	ldr	r0, [pc, #96]	; (8005610 <EmergencyTask+0x7c>)
 80055ae:	f003 fb49 	bl	8008c44 <VESCStop>
			osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80055b2:	4b18      	ldr	r3, [pc, #96]	; (8005614 <EmergencyTask+0x80>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f00c fade 	bl	8011b78 <osThreadSuspend>
			osThreadSuspend(FlywheelYawPIDTaskHandle);
 80055bc:	4b16      	ldr	r3, [pc, #88]	; (8005618 <EmergencyTask+0x84>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f00c fad9 	bl	8011b78 <osThreadSuspend>
			osThreadTerminate(MainTaskHandle);
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <EmergencyTask+0x88>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f00c fb16 	bl	8011bfc <osThreadTerminate>
			osDelay(5);
 80055d0:	2005      	movs	r0, #5
 80055d2:	f00c fb40 	bl	8011c56 <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 80055d6:	f107 030c 	add.w	r3, r7, #12
 80055da:	2224      	movs	r2, #36	; 0x24
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f00f ff04 	bl	80153ec <memset>
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <EmergencyTask+0x8c>)
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	2318      	movs	r3, #24
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	461a      	mov	r2, r3
 80055f8:	2100      	movs	r1, #0
 80055fa:	480a      	ldr	r0, [pc, #40]	; (8005624 <EmergencyTask+0x90>)
 80055fc:	f00c fa2a 	bl	8011a54 <osThreadNew>
 8005600:	4603      	mov	r3, r0
 8005602:	4a06      	ldr	r2, [pc, #24]	; (800561c <EmergencyTask+0x88>)
 8005604:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 8005606:	e7c9      	b.n	800559c <EmergencyTask+0x8>
 8005608:	20008460 	.word	0x20008460
 800560c:	20007900 	.word	0x20007900
 8005610:	200071d4 	.word	0x200071d4
 8005614:	200088dc 	.word	0x200088dc
 8005618:	20008858 	.word	0x20008858
 800561c:	20008898 	.word	0x20008898
 8005620:	08019d90 	.word	0x08019d90
 8005624:	0800456d 	.word	0x0800456d

08005628 <TuneTask>:
		}

	}
}

void TuneTask(void *argument){
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	tunePending(&huart2);
 8005630:	4857      	ldr	r0, [pc, #348]	; (8005790 <TuneTask+0x168>)
 8005632:	f004 f97d 	bl	8009930 <tunePending>
	while(1){
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 8005636:	4b57      	ldr	r3, [pc, #348]	; (8005794 <TuneTask+0x16c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800563e:	4618      	mov	r0, r3
 8005640:	f00c fbae 	bl	8011da0 <osSemaphoreAcquire>
		osThreadSuspend(MainTaskHandle);
 8005644:	4b54      	ldr	r3, [pc, #336]	; (8005798 <TuneTask+0x170>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f00c fa95 	bl	8011b78 <osThreadSuspend>
		osThreadSuspend(EmergencyTaskHandle);
 800564e:	4b53      	ldr	r3, [pc, #332]	; (800579c <TuneTask+0x174>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f00c fa90 	bl	8011b78 <osThreadSuspend>
		osThreadSuspend(FlywheelYawPIDTaskHandle);
 8005658:	4b51      	ldr	r3, [pc, #324]	; (80057a0 <TuneTask+0x178>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f00c fa8b 	bl	8011b78 <osThreadSuspend>
		osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8005662:	4b50      	ldr	r3, [pc, #320]	; (80057a4 <TuneTask+0x17c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f00c fa86 	bl	8011b78 <osThreadSuspend>
		if(tuneCommand == 'i'){
 800566c:	4b4e      	ldr	r3, [pc, #312]	; (80057a8 <TuneTask+0x180>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b69      	cmp	r3, #105	; 0x69
 8005672:	d102      	bne.n	800567a <TuneTask+0x52>
			tuneInit(&huart2);
 8005674:	4846      	ldr	r0, [pc, #280]	; (8005790 <TuneTask+0x168>)
 8005676:	f004 f96b 	bl	8009950 <tuneInit>
		}

		if(tuneCommand == 'r'){
 800567a:	4b4b      	ldr	r3, [pc, #300]	; (80057a8 <TuneTask+0x180>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b72      	cmp	r3, #114	; 0x72
 8005680:	d102      	bne.n	8005688 <TuneTask+0x60>
			tuneUpdate(&huart2);
 8005682:	4843      	ldr	r0, [pc, #268]	; (8005790 <TuneTask+0x168>)
 8005684:	f004 fa62 	bl	8009b4c <tuneUpdate>
		}

		if(tuneCommand == 'w'){
 8005688:	4b47      	ldr	r3, [pc, #284]	; (80057a8 <TuneTask+0x180>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b77      	cmp	r3, #119	; 0x77
 800568e:	d14a      	bne.n	8005726 <TuneTask+0xfe>
			led3 = 0; led2 = 1;
 8005690:	4a46      	ldr	r2, [pc, #280]	; (80057ac <TuneTask+0x184>)
 8005692:	7853      	ldrb	r3, [r2, #1]
 8005694:	f36f 13c7 	bfc	r3, #7, #1
 8005698:	7053      	strb	r3, [r2, #1]
 800569a:	4a44      	ldr	r2, [pc, #272]	; (80057ac <TuneTask+0x184>)
 800569c:	7853      	ldrb	r3, [r2, #1]
 800569e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a2:	7053      	strb	r3, [r2, #1]
			led2 = 0;
 80056a4:	4a41      	ldr	r2, [pc, #260]	; (80057ac <TuneTask+0x184>)
 80056a6:	7853      	ldrb	r3, [r2, #1]
 80056a8:	f36f 1386 	bfc	r3, #6, #1
 80056ac:	7053      	strb	r3, [r2, #1]
			uint32_t writeSuccess=0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61fb      	str	r3, [r7, #28]
			writeSuccess += tuneWrite(SECTOR6, (NUM_INT_TUNE)*4);
 80056b2:	217c      	movs	r1, #124	; 0x7c
 80056b4:	483e      	ldr	r0, [pc, #248]	; (80057b0 <TuneTask+0x188>)
 80056b6:	f004 fba9 	bl	8009e0c <tuneWrite>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	61fb      	str	r3, [r7, #28]
			writeSuccess += tuneWrite(SECTOR7, (NUM_FLOAT_TUNE)*4);
 80056c2:	211c      	movs	r1, #28
 80056c4:	483b      	ldr	r0, [pc, #236]	; (80057b4 <TuneTask+0x18c>)
 80056c6:	f004 fba1 	bl	8009e0c <tuneWrite>
 80056ca:	4602      	mov	r2, r0
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	4413      	add	r3, r2
 80056d0:	61fb      	str	r3, [r7, #28]
			char mes[20];
			sprintf(mes, "writeSuccess = %lu", writeSuccess);
 80056d2:	f107 0308 	add.w	r3, r7, #8
 80056d6:	69fa      	ldr	r2, [r7, #28]
 80056d8:	4937      	ldr	r1, [pc, #220]	; (80057b8 <TuneTask+0x190>)
 80056da:	4618      	mov	r0, r3
 80056dc:	f010 fda6 	bl	801622c <siprintf>
			ILI9341_PrintLine(mes, &ILI9341row);
 80056e0:	f107 0308 	add.w	r3, r7, #8
 80056e4:	4935      	ldr	r1, [pc, #212]	; (80057bc <TuneTask+0x194>)
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fb78 	bl	8003ddc <ILI9341_PrintLine>
			if( writeSuccess == (NUM_INT_TUNE+NUM_FLOAT_TUNE) ){
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	2b26      	cmp	r3, #38	; 0x26
 80056f0:	d10b      	bne.n	800570a <TuneTask+0xe2>
				HAL_UART_Transmit(&huart2, (uint8_t *)((char *)"EEPROM WRITTEN\n"), 15, 10);
 80056f2:	230a      	movs	r3, #10
 80056f4:	220f      	movs	r2, #15
 80056f6:	4932      	ldr	r1, [pc, #200]	; (80057c0 <TuneTask+0x198>)
 80056f8:	4825      	ldr	r0, [pc, #148]	; (8005790 <TuneTask+0x168>)
 80056fa:	f00b f93c 	bl	8010976 <HAL_UART_Transmit>
				led2 = 1;
 80056fe:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <TuneTask+0x184>)
 8005700:	7853      	ldrb	r3, [r2, #1]
 8005702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005706:	7053      	strb	r3, [r2, #1]
 8005708:	e00a      	b.n	8005720 <TuneTask+0xf8>
			}else{
				HAL_UART_Transmit(&huart2, (uint8_t *)((char *)"EEPROM WRITE FAIL\n"), 18, 10);
 800570a:	230a      	movs	r3, #10
 800570c:	2212      	movs	r2, #18
 800570e:	492d      	ldr	r1, [pc, #180]	; (80057c4 <TuneTask+0x19c>)
 8005710:	481f      	ldr	r0, [pc, #124]	; (8005790 <TuneTask+0x168>)
 8005712:	f00b f930 	bl	8010976 <HAL_UART_Transmit>
				led3 = 1;
 8005716:	4a25      	ldr	r2, [pc, #148]	; (80057ac <TuneTask+0x184>)
 8005718:	7853      	ldrb	r3, [r2, #1]
 800571a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571e:	7053      	strb	r3, [r2, #1]
			}
			tunePending(&huart2);
 8005720:	481b      	ldr	r0, [pc, #108]	; (8005790 <TuneTask+0x168>)
 8005722:	f004 f905 	bl	8009930 <tunePending>
		}

		if(tuneCommand == 'e'){
 8005726:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <TuneTask+0x180>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b65      	cmp	r3, #101	; 0x65
 800572c:	d102      	bne.n	8005734 <TuneTask+0x10c>
			tuneEdit(&huart2);
 800572e:	4818      	ldr	r0, [pc, #96]	; (8005790 <TuneTask+0x168>)
 8005730:	f004 faca 	bl	8009cc8 <tuneEdit>
		}
		sys.updateLCD = 1;
 8005734:	4a24      	ldr	r2, [pc, #144]	; (80057c8 <TuneTask+0x1a0>)
 8005736:	7813      	ldrb	r3, [r2, #0]
 8005738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800573c:	7013      	strb	r3, [r2, #0]
		if(fabs(previousAllRpm - rpm)>5){
 800573e:	4b23      	ldr	r3, [pc, #140]	; (80057cc <TuneTask+0x1a4>)
 8005740:	ed93 7a00 	vldr	s14, [r3]
 8005744:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <TuneTask+0x1a8>)
 8005746:	edd3 7a00 	vldr	s15, [r3]
 800574a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800574e:	eef0 7ae7 	vabs.f32	s15, s15
 8005752:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575e:	dd0b      	ble.n	8005778 <TuneTask+0x150>
			rpm1 = rpm2 = rpm3 = rpm;
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <TuneTask+0x1a8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <TuneTask+0x1ac>)
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <TuneTask+0x1ac>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <TuneTask+0x1b0>)
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <TuneTask+0x1b0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <TuneTask+0x1b4>)
 8005776:	6013      	str	r3, [r2, #0]
		}
		osThreadResume(MainTaskHandle);
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <TuneTask+0x170>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f00c fa1c 	bl	8011bba <osThreadResume>
		osThreadResume(EmergencyTaskHandle);
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <TuneTask+0x174>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f00c fa17 	bl	8011bba <osThreadResume>
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 800578c:	e753      	b.n	8005636 <TuneTask+0xe>
 800578e:	bf00      	nop
 8005790:	20006810 	.word	0x20006810
 8005794:	200089e0 	.word	0x200089e0
 8005798:	20008898 	.word	0x20008898
 800579c:	20008974 	.word	0x20008974
 80057a0:	20008858 	.word	0x20008858
 80057a4:	200088dc 	.word	0x200088dc
 80057a8:	200088c0 	.word	0x200088c0
 80057ac:	40020814 	.word	0x40020814
 80057b0:	08040000 	.word	0x08040000
 80057b4:	08060004 	.word	0x08060004
 80057b8:	08019df4 	.word	0x08019df4
 80057bc:	20006f4c 	.word	0x20006f4c
 80057c0:	08019e08 	.word	0x08019e08
 80057c4:	08019e18 	.word	0x08019e18
 80057c8:	20008868 	.word	0x20008868
 80057cc:	200089d8 	.word	0x200089d8
 80057d0:	200088ec 	.word	0x200088ec
 80057d4:	200089f4 	.word	0x200089f4
 80057d8:	200087b4 	.word	0x200087b4
 80057dc:	20008910 	.word	0x20008910

080057e0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_UART_RxCpltCallback+0x6c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d105      	bne.n	80057fc <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(TuneSemaphore);
 80057f0:	4b17      	ldr	r3, [pc, #92]	; (8005850 <HAL_UART_RxCpltCallback+0x70>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f00c fb25 	bl	8011e44 <osSemaphoreRelease>
			PID(&Pid_Camera_Pitch);
		}else{
			PIDDelayInit(&Pid_Camera_Pitch);
		}
	}
}
 80057fa:	e022      	b.n	8005842 <HAL_UART_RxCpltCallback+0x62>
	}else if(huart == &huart4){
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	; (8005854 <HAL_UART_RxCpltCallback+0x74>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d11e      	bne.n	8005842 <HAL_UART_RxCpltCallback+0x62>
		jetsonHandler(&huart4);
 8005804:	4813      	ldr	r0, [pc, #76]	; (8005854 <HAL_UART_RxCpltCallback+0x74>)
 8005806:	f004 f839 	bl	800987c <jetsonHandler>
		if(sys.pid){
 800580a:	4b13      	ldr	r3, [pc, #76]	; (8005858 <HAL_UART_RxCpltCallback+0x78>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_UART_RxCpltCallback+0x40>
			PID(&Pid_Camera);
 8005818:	4810      	ldr	r0, [pc, #64]	; (800585c <HAL_UART_RxCpltCallback+0x7c>)
 800581a:	f000 f9c8 	bl	8005bae <PID>
 800581e:	e002      	b.n	8005826 <HAL_UART_RxCpltCallback+0x46>
			PIDDelayInit(&Pid_Camera);
 8005820:	480e      	ldr	r0, [pc, #56]	; (800585c <HAL_UART_RxCpltCallback+0x7c>)
 8005822:	f000 f9a6 	bl	8005b72 <PIDDelayInit>
		if(sys.pidPitch){
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_UART_RxCpltCallback+0x78>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_UART_RxCpltCallback+0x5c>
			PID(&Pid_Camera_Pitch);
 8005834:	480a      	ldr	r0, [pc, #40]	; (8005860 <HAL_UART_RxCpltCallback+0x80>)
 8005836:	f000 f9ba 	bl	8005bae <PID>
}
 800583a:	e002      	b.n	8005842 <HAL_UART_RxCpltCallback+0x62>
			PIDDelayInit(&Pid_Camera_Pitch);
 800583c:	4808      	ldr	r0, [pc, #32]	; (8005860 <HAL_UART_RxCpltCallback+0x80>)
 800583e:	f000 f998 	bl	8005b72 <PIDDelayInit>
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20006810 	.word	0x20006810
 8005850:	200089e0 	.word	0x200089e0
 8005854:	20006790 	.word	0x20006790
 8005858:	20008868 	.word	0x20008868
 800585c:	200087d4 	.word	0x200087d4
 8005860:	20008978 	.word	0x20008978

08005864 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0


}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
	pid->error = in;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
}
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b08a      	sub	sp, #40	; 0x28
 800589a:	af00      	add	r7, sp, #0
 800589c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80058a0:	edc7 0a08 	vstr	s1, [r7, #32]
 80058a4:	ed87 1a07 	vstr	s2, [r7, #28]
 80058a8:	edc7 1a06 	vstr	s3, [r7, #24]
 80058ac:	ed87 2a05 	vstr	s4, [r7, #20]
 80058b0:	edc7 2a04 	vstr	s5, [r7, #16]
 80058b4:	ed87 3a03 	vstr	s6, [r7, #12]
 80058b8:	edc7 3a02 	vstr	s7, [r7, #8]
 80058bc:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058c2:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f804 	bl	80058fc <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 80058f4:	bf00      	nop
 80058f6:	3728      	adds	r7, #40	; 0x28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <PIDCoeffCalc>:
	pid->K[a] = value;
	PIDCoeffCalc(pid);
}

void PIDCoeffCalc (PID_t *pid)
{
 80058fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	edd3 7a08 	vldr	s15, [r3, #32]
 800590c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005914:	d013      	beq.n	800593e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	ed93 7a03 	vldr	s14, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800592a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
 800593c:	e007      	b.n	800594e <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	edd3 7a07 	vldr	s15, [r3, #28]
 8005954:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	d108      	bne.n	8005970 <PIDCoeffCalc+0x74>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005964:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800596c:	f000 80ef 	beq.w	8005b4e <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	ed93 7a03 	vldr	s14, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800597c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005980:	ee17 0a90 	vmov	r0, s15
 8005984:	f7fa fde0 	bl	8000548 <__aeabi_f2d>
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005990:	f7fa fc7a 	bl	8000288 <__aeabi_dsub>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	ed93 7a03 	vldr	s14, [r3, #12]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80059a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ac:	ee17 0a90 	vmov	r0, s15
 80059b0:	f7fa fdca 	bl	8000548 <__aeabi_f2d>
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059bc:	f7fa fc66 	bl	800028c <__adddf3>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	f7fa ff40 	bl	800084c <__aeabi_ddiv>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4610      	mov	r0, r2
 80059d2:	4619      	mov	r1, r3
 80059d4:	f7fb f908 	bl	8000be8 <__aeabi_d2f>
 80059d8:	4603      	mov	r3, r0
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef1 7a67 	vneg.f32	s15, s15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fa fdab 	bl	8000548 <__aeabi_f2d>
 80059f2:	4604      	mov	r4, r0
 80059f4:	460d      	mov	r5, r1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fa fda4 	bl	8000548 <__aeabi_f2d>
 8005a00:	4602      	mov	r2, r0
 8005a02:	460b      	mov	r3, r1
 8005a04:	f7fa fc42 	bl	800028c <__adddf3>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	4699      	mov	r9, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fa fd97 	bl	8000548 <__aeabi_f2d>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4649      	mov	r1, r9
 8005a22:	f7fa fde9 	bl	80005f8 <__aeabi_dmul>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4690      	mov	r8, r2
 8005a2c:	4699      	mov	r9, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a3e:	ee17 0a90 	vmov	r0, s15
 8005a42:	f7fa fd81 	bl	8000548 <__aeabi_f2d>
 8005a46:	f04f 0200 	mov.w	r2, #0
 8005a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4640      	mov	r0, r8
 8005a58:	4649      	mov	r1, r9
 8005a5a:	f7fa fef7 	bl	800084c <__aeabi_ddiv>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fc11 	bl	800028c <__adddf3>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fb f8b9 	bl	8000be8 <__aeabi_d2f>
 8005a76:	4602      	mov	r2, r0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a8c:	ee17 0a90 	vmov	r0, s15
 8005a90:	f7fa fd5a 	bl	8000548 <__aeabi_f2d>
 8005a94:	f04f 0200 	mov.w	r2, #0
 8005a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a9c:	f7fa fbf4 	bl	8000288 <__aeabi_dsub>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	461d      	mov	r5, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7fa fd4b 	bl	8000548 <__aeabi_f2d>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fd9d 	bl	80005f8 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4614      	mov	r4, r2
 8005ac4:	461d      	mov	r5, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fd3c 	bl	8000548 <__aeabi_f2d>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	f7fa fbda 	bl	800028c <__adddf3>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4690      	mov	r8, r2
 8005ade:	4699      	mov	r9, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fa fd2f 	bl	8000548 <__aeabi_f2d>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4640      	mov	r0, r8
 8005af0:	4649      	mov	r1, r9
 8005af2:	f7fa fd81 	bl	80005f8 <__aeabi_dmul>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4620      	mov	r0, r4
 8005afc:	4629      	mov	r1, r5
 8005afe:	f7fa fbc3 	bl	8000288 <__aeabi_dsub>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4614      	mov	r4, r2
 8005b08:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	ee17 0a90 	vmov	r0, s15
 8005b1e:	f7fa fd13 	bl	8000548 <__aeabi_f2d>
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b2a:	f7fa fbaf 	bl	800028c <__adddf3>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005b32:	4620      	mov	r0, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	f7fa fe89 	bl	800084c <__aeabi_ddiv>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	f7fb f851 	bl	8000be8 <__aeabi_d2f>
 8005b46:	4602      	mov	r2, r0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b4c:	e00c      	b.n	8005b68 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005b66:	bf00      	nop
 8005b68:	bf00      	nop
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005b72 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005bc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bcc:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	edd3 7a08 	vldr	s15, [r3, #32]
 8005bde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be6:	d033      	beq.n	8005c50 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005c0a:	e003      	b.n	8005c14 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5e:	d107      	bne.n	8005c70 <PID+0xc2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005c66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6e:	d02c      	beq.n	8005cca <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c80:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cce:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cd6:	ed97 7a02 	vldr	s14, [r7, #8]
 8005cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	dd0f      	ble.n	8005d04 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	ed93 7a04 	vldr	s14, [r3, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	edd3 7a06 	vldr	s15, [r3, #24]
 8005cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf4:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	7813      	ldrb	r3, [r2, #0]
 8005cfc:	f36f 0300 	bfc	r3, #0, #1
 8005d00:	7013      	strb	r3, [r2, #0]
 8005d02:	e02b      	b.n	8005d5c <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d0a:	eef1 7a67 	vneg.f32	s15, s15
 8005d0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	d511      	bpl.n	8005d40 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2c:	eef1 7a67 	vneg.f32	s15, s15
 8005d30:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	7813      	ldrb	r3, [r2, #0]
 8005d38:	f36f 0300 	bfc	r3, #0, #1
 8005d3c:	7013      	strb	r3, [r2, #0]
 8005d3e:	e00d      	b.n	8005d5c <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	7813      	ldrb	r3, [r2, #0]
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 10) != HAL_OK;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	230a      	movs	r3, #10
 8005d80:	2188      	movs	r1, #136	; 0x88
 8005d82:	f006 ff95 	bl	800ccb0 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f817 	bl	8005dba <PSx_HandlerI2C>
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	665a      	str	r2, [r3, #100]	; 0x64
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 10);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	230a      	movs	r3, #10
 8005dac:	2188      	movs	r1, #136	; 0x88
 8005dae:	f006 ff7f 	bl	800ccb0 <HAL_I2C_Master_Receive_DMA>
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	785a      	ldrb	r2, [r3, #1]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	789a      	ldrb	r2, [r3, #2]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	795b      	ldrb	r3, [r3, #5]
 8005dee:	461a      	mov	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	799b      	ldrb	r3, [r3, #6]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	79db      	ldrb	r3, [r3, #7]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	7a1b      	ldrb	r3, [r3, #8]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7a5a      	ldrb	r2, [r3, #9]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	PSxBTGetXY(psxbt);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f807 	bl	8005e30 <PSxBTGetXY>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	0000      	movs	r0, r0
 8005e2c:	0000      	movs	r0, r0
	...

08005e30 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e44:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8006148 <PSxBTGetXY+0x318>
 8005e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	d53e      	bpl.n	8005ed0 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	ee17 0a90 	vmov	r0, s15
 8005e62:	f7fa fb71 	bl	8000548 <__aeabi_f2d>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	a1b5      	add	r1, pc, #724	; (adr r1, 8006140 <PSxBTGetXY+0x310>)
 8005e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	4bb2      	ldr	r3, [pc, #712]	; (800614c <PSxBTGetXY+0x31c>)
 8005e82:	f7fa fce3 	bl	800084c <__aeabi_ddiv>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa feab 	bl	8000be8 <__aeabi_d2f>
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea6:	d504      	bpl.n	8005eb2 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f04f 0200 	mov.w	r2, #0
 8005eae:	64da      	str	r2, [r3, #76]	; 0x4c
 8005eb0:	e05d      	b.n	8005f6e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec4:	dd53      	ble.n	8005f6e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005ecc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ece:	e04e      	b.n	8005f6e <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8006158 <PSxBTGetXY+0x328>
 8005ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee8:	dd3d      	ble.n	8005f66 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef6:	ee17 0a90 	vmov	r0, s15
 8005efa:	f7fa fb25 	bl	8000548 <__aeabi_f2d>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	4992      	ldr	r1, [pc, #584]	; (8006150 <PSxBTGetXY+0x320>)
 8005f08:	f7fa f9be 	bl	8000288 <__aeabi_dsub>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4610      	mov	r0, r2
 8005f12:	4619      	mov	r1, r3
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	4b8c      	ldr	r3, [pc, #560]	; (800614c <PSxBTGetXY+0x31c>)
 8005f1a:	f7fa fc97 	bl	800084c <__aeabi_ddiv>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	f7fa fe5f 	bl	8000be8 <__aeabi_d2f>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3e:	dd04      	ble.n	8005f4a <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f48:	e011      	b.n	8005f6e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005f50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	d507      	bpl.n	8005f6e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a7c      	ldr	r2, [pc, #496]	; (8006154 <PSxBTGetXY+0x324>)
 8005f62:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f64:	e003      	b.n	8005f6e <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006148 <PSxBTGetXY+0x318>
 8005f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	d53e      	bpl.n	8006006 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	ee17 0a90 	vmov	r0, s15
 8005f98:	f7fa fad6 	bl	8000548 <__aeabi_f2d>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	a167      	add	r1, pc, #412	; (adr r1, 8006140 <PSxBTGetXY+0x310>)
 8005fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa6:	f7fa f96f 	bl	8000288 <__aeabi_dsub>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	4b65      	ldr	r3, [pc, #404]	; (800614c <PSxBTGetXY+0x31c>)
 8005fb8:	f7fa fc48 	bl	800084c <__aeabi_ddiv>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7fa fe10 	bl	8000be8 <__aeabi_d2f>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005fd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fdc:	d504      	bpl.n	8005fe8 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	651a      	str	r2, [r3, #80]	; 0x50
 8005fe6:	e05d      	b.n	80060a4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	dd53      	ble.n	80060a4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006002:	651a      	str	r2, [r3, #80]	; 0x50
 8006004:	e04e      	b.n	80060a4 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8006158 <PSxBTGetXY+0x328>
 8006016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800601a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601e:	dd3d      	ble.n	800609c <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	ee17 0a90 	vmov	r0, s15
 8006030:	f7fa fa8a 	bl	8000548 <__aeabi_f2d>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	f04f 0000 	mov.w	r0, #0
 800603c:	4944      	ldr	r1, [pc, #272]	; (8006150 <PSxBTGetXY+0x320>)
 800603e:	f7fa f923 	bl	8000288 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <PSxBTGetXY+0x31c>)
 8006050:	f7fa fbfc 	bl	800084c <__aeabi_ddiv>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4610      	mov	r0, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f7fa fdc4 	bl	8000be8 <__aeabi_d2f>
 8006060:	4602      	mov	r2, r0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800606c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006074:	dd04      	ble.n	8006080 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	651a      	str	r2, [r3, #80]	; 0x50
 800607e:	e011      	b.n	80060a4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006086:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800608a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006092:	d507      	bpl.n	80060a4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a2f      	ldr	r2, [pc, #188]	; (8006154 <PSxBTGetXY+0x324>)
 8006098:	651a      	str	r2, [r3, #80]	; 0x50
 800609a:	e003      	b.n	80060a4 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006148 <PSxBTGetXY+0x318>
 80060b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	d54e      	bpl.n	800615c <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	ee17 0a90 	vmov	r0, s15
 80060ce:	f7fa fa3b 	bl	8000548 <__aeabi_f2d>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	a11a      	add	r1, pc, #104	; (adr r1, 8006140 <PSxBTGetXY+0x310>)
 80060d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060dc:	f7fa f8d4 	bl	8000288 <__aeabi_dsub>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4610      	mov	r0, r2
 80060e6:	4619      	mov	r1, r3
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	4b17      	ldr	r3, [pc, #92]	; (800614c <PSxBTGetXY+0x31c>)
 80060ee:	f7fa fbad 	bl	800084c <__aeabi_ddiv>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7fa fd75 	bl	8000be8 <__aeabi_d2f>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800610a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800610e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006112:	d504      	bpl.n	800611e <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
 800611c:	e06d      	b.n	80061fa <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	dd63      	ble.n	80061fa <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
 800613a:	e05e      	b.n	80061fa <PSxBTGetXY+0x3ca>
 800613c:	f3af 8000 	nop.w
 8006140:	00000000 	.word	0x00000000
 8006144:	405cc000 	.word	0x405cc000
 8006148:	42e60000 	.word	0x42e60000
 800614c:	40590000 	.word	0x40590000
 8006150:	40618000 	.word	0x40618000
 8006154:	bf800000 	.word	0xbf800000
 8006158:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006168:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8006158 <PSxBTGetXY+0x328>
 800616c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	dd3d      	ble.n	80061f2 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	ee17 0a90 	vmov	r0, s15
 8006186:	f7fa f9df 	bl	8000548 <__aeabi_f2d>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	f04f 0000 	mov.w	r0, #0
 8006192:	4981      	ldr	r1, [pc, #516]	; (8006398 <PSxBTGetXY+0x568>)
 8006194:	f7fa f878 	bl	8000288 <__aeabi_dsub>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4610      	mov	r0, r2
 800619e:	4619      	mov	r1, r3
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	4b7d      	ldr	r3, [pc, #500]	; (800639c <PSxBTGetXY+0x56c>)
 80061a6:	f7fa fb51 	bl	800084c <__aeabi_ddiv>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4610      	mov	r0, r2
 80061b0:	4619      	mov	r1, r3
 80061b2:	f7fa fd19 	bl	8000be8 <__aeabi_d2f>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80061c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	dd04      	ble.n	80061d6 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	655a      	str	r2, [r3, #84]	; 0x54
 80061d4:	e011      	b.n	80061fa <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80061dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80061e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e8:	d507      	bpl.n	80061fa <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a6c      	ldr	r2, [pc, #432]	; (80063a0 <PSxBTGetXY+0x570>)
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54
 80061f0:	e003      	b.n	80061fa <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80063a4 <PSxBTGetXY+0x574>
 800620a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006212:	d53e      	bpl.n	8006292 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006220:	ee17 0a90 	vmov	r0, s15
 8006224:	f7fa f990 	bl	8000548 <__aeabi_f2d>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	a156      	add	r1, pc, #344	; (adr r1, 8006388 <PSxBTGetXY+0x558>)
 800622e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006232:	f7fa f829 	bl	8000288 <__aeabi_dsub>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	4b56      	ldr	r3, [pc, #344]	; (800639c <PSxBTGetXY+0x56c>)
 8006244:	f7fa fb02 	bl	800084c <__aeabi_ddiv>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	f7fa fcca 	bl	8000be8 <__aeabi_d2f>
 8006254:	4602      	mov	r2, r0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006268:	d504      	bpl.n	8006274 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	659a      	str	r2, [r3, #88]	; 0x58
 8006272:	e05d      	b.n	8006330 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800627a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800627e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	dd53      	ble.n	8006330 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800628e:	659a      	str	r2, [r3, #88]	; 0x58
 8006290:	e04e      	b.n	8006330 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80063a8 <PSxBTGetXY+0x578>
 80062a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062aa:	dd3d      	ble.n	8006328 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b8:	ee17 0a90 	vmov	r0, s15
 80062bc:	f7fa f944 	bl	8000548 <__aeabi_f2d>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	4933      	ldr	r1, [pc, #204]	; (8006398 <PSxBTGetXY+0x568>)
 80062ca:	f7f9 ffdd 	bl	8000288 <__aeabi_dsub>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	4610      	mov	r0, r2
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <PSxBTGetXY+0x56c>)
 80062dc:	f7fa fab6 	bl	800084c <__aeabi_ddiv>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4610      	mov	r0, r2
 80062e6:	4619      	mov	r1, r3
 80062e8:	f7fa fc7e 	bl	8000be8 <__aeabi_d2f>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80062f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80062fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006300:	dd04      	ble.n	800630c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	659a      	str	r2, [r3, #88]	; 0x58
 800630a:	e011      	b.n	8006330 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006312:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800631a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631e:	d507      	bpl.n	8006330 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <PSxBTGetXY+0x570>)
 8006324:	659a      	str	r2, [r3, #88]	; 0x58
 8006326:	e003      	b.n	8006330 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa f8e5 	bl	8000504 <__aeabi_ui2d>
 800633a:	a315      	add	r3, pc, #84	; (adr r3, 8006390 <PSxBTGetXY+0x560>)
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f7fa fa84 	bl	800084c <__aeabi_ddiv>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	f7fa fc4c 	bl	8000be8 <__aeabi_d2f>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa f8d2 	bl	8000504 <__aeabi_ui2d>
 8006360:	a30b      	add	r3, pc, #44	; (adr r3, 8006390 <PSxBTGetXY+0x560>)
 8006362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006366:	f7fa fa71 	bl	800084c <__aeabi_ddiv>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	f7fa fc39 	bl	8000be8 <__aeabi_d2f>
 8006376:	4602      	mov	r2, r0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800637c:	bf00      	nop
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	f3af 8000 	nop.w
 8006388:	00000000 	.word	0x00000000
 800638c:	405cc000 	.word	0x405cc000
 8006390:	00000000 	.word	0x00000000
 8006394:	406fe000 	.word	0x406fe000
 8006398:	40618000 	.word	0x40618000
 800639c:	40590000 	.word	0x40590000
 80063a0:	bf800000 	.word	0xbf800000
 80063a4:	42e60000 	.word	0x42e60000
 80063a8:	430c0000 	.word	0x430c0000

080063ac <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2203      	movs	r2, #3
 80063b8:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <RNSStop+0x8c>)
 80063e4:	2211      	movs	r2, #17
 80063e6:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	791a      	ldrb	r2, [r3, #4]
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <RNSStop+0x8c>)
 80063ee:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	2302      	movs	r3, #2
 80063f6:	4a10      	ldr	r2, [pc, #64]	; (8006438 <RNSStop+0x8c>)
 80063f8:	2117      	movs	r1, #23
 80063fa:	f7fc fe5d 	bl	80030b8 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f103 0208 	add.w	r2, r3, #8
 8006408:	2308      	movs	r3, #8
 800640a:	2118      	movs	r1, #24
 800640c:	f7fc fe54 	bl	80030b8 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f103 0210 	add.w	r2, r3, #16
 800641a:	2308      	movs	r3, #8
 800641c:	2119      	movs	r1, #25
 800641e:	f7fc fe4b 	bl	80030b8 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8006422:	bf00      	nop
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800642a:	2b02      	cmp	r3, #2
 800642c:	d0fa      	beq.n	8006424 <RNSStop+0x78>


}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20008a14 	.word	0x20008a14

0800643c <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800644a:	f107 0318 	add.w	r3, r7, #24
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	609a      	str	r2, [r3, #8]
 8006456:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	4a6d      	ldr	r2, [pc, #436]	; (800661c <ServoxInit+0x1e0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d106      	bne.n	8006478 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4a6c      	ldr	r2, [pc, #432]	; (8006620 <ServoxInit+0x1e4>)
 800646e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	22a7      	movs	r2, #167	; 0xa7
 8006474:	605a      	str	r2, [r3, #4]
 8006476:	e078      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4a6a      	ldr	r2, [pc, #424]	; (8006624 <ServoxInit+0x1e8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d107      	bne.n	8006490 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006486:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2253      	movs	r2, #83	; 0x53
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e06c      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4a65      	ldr	r2, [pc, #404]	; (8006628 <ServoxInit+0x1ec>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d106      	bne.n	80064a6 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4a64      	ldr	r2, [pc, #400]	; (800662c <ServoxInit+0x1f0>)
 800649c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2253      	movs	r2, #83	; 0x53
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	e061      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	4a61      	ldr	r2, [pc, #388]	; (8006630 <ServoxInit+0x1f4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d106      	bne.n	80064bc <ServoxInit+0x80>
			htimx->Instance = TIM4;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4a60      	ldr	r2, [pc, #384]	; (8006634 <ServoxInit+0x1f8>)
 80064b2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2253      	movs	r2, #83	; 0x53
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	e056      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4a5e      	ldr	r2, [pc, #376]	; (8006638 <ServoxInit+0x1fc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d106      	bne.n	80064d2 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4a5d      	ldr	r2, [pc, #372]	; (800663c <ServoxInit+0x200>)
 80064c8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2253      	movs	r2, #83	; 0x53
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	e04b      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	4a5a      	ldr	r2, [pc, #360]	; (8006640 <ServoxInit+0x204>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d106      	bne.n	80064e8 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	4a59      	ldr	r2, [pc, #356]	; (8006644 <ServoxInit+0x208>)
 80064de:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	22a7      	movs	r2, #167	; 0xa7
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	e040      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a57      	ldr	r2, [pc, #348]	; (8006648 <ServoxInit+0x20c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d106      	bne.n	80064fe <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4a56      	ldr	r2, [pc, #344]	; (800664c <ServoxInit+0x210>)
 80064f4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	22a7      	movs	r2, #167	; 0xa7
 80064fa:	605a      	str	r2, [r3, #4]
 80064fc:	e035      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	4a53      	ldr	r2, [pc, #332]	; (8006650 <ServoxInit+0x214>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d106      	bne.n	8006514 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	4a52      	ldr	r2, [pc, #328]	; (8006654 <ServoxInit+0x218>)
 800650a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	22a7      	movs	r2, #167	; 0xa7
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	e02a      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4a50      	ldr	r2, [pc, #320]	; (8006658 <ServoxInit+0x21c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d106      	bne.n	800652a <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a4f      	ldr	r2, [pc, #316]	; (800665c <ServoxInit+0x220>)
 8006520:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	22a7      	movs	r2, #167	; 0xa7
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	e01f      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	4a4c      	ldr	r2, [pc, #304]	; (8006660 <ServoxInit+0x224>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d106      	bne.n	8006540 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4a4b      	ldr	r2, [pc, #300]	; (8006664 <ServoxInit+0x228>)
 8006536:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2253      	movs	r2, #83	; 0x53
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	e014      	b.n	800656a <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	4a49      	ldr	r2, [pc, #292]	; (8006668 <ServoxInit+0x22c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d106      	bne.n	8006556 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4a48      	ldr	r2, [pc, #288]	; (800666c <ServoxInit+0x230>)
 800654c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2253      	movs	r2, #83	; 0x53
 8006552:	605a      	str	r2, [r3, #4]
 8006554:	e009      	b.n	800656a <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a45      	ldr	r2, [pc, #276]	; (8006670 <ServoxInit+0x234>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d105      	bne.n	800656a <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	4a44      	ldr	r2, [pc, #272]	; (8006674 <ServoxInit+0x238>)
 8006562:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2253      	movs	r2, #83	; 0x53
 8006568:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006576:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2280      	movs	r2, #128	; 0x80
 8006582:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8006584:	68b8      	ldr	r0, [r7, #8]
 8006586:	f009 fa73 	bl	800fa70 <HAL_TIM_Base_Init>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <ServoxInit+0x158>
		  {
		    Error_Handler();
 8006590:	f7ff f968 	bl	8005864 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006598:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800659a:	f107 0318 	add.w	r3, r7, #24
 800659e:	4619      	mov	r1, r3
 80065a0:	68b8      	ldr	r0, [r7, #8]
 80065a2:	f009 fd0f 	bl	800ffc4 <HAL_TIM_ConfigClockSource>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <ServoxInit+0x174>
		  {
		    Error_Handler();
 80065ac:	f7ff f95a 	bl	8005864 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 80065b0:	68b8      	ldr	r0, [r7, #8]
 80065b2:	f009 fad0 	bl	800fb56 <HAL_TIM_PWM_Init>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <ServoxInit+0x184>
			{
				Error_Handler();
 80065bc:	f7ff f952 	bl	8005864 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80065c8:	f107 0310 	add.w	r3, r7, #16
 80065cc:	4619      	mov	r1, r3
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f00a f8f4 	bl	80107bc <HAL_TIMEx_MasterConfigSynchronization>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d001      	beq.n	80065de <ServoxInit+0x1a2>
		{
			Error_Handler();
 80065da:	f7ff f943 	bl	8005864 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 80065de:	68b8      	ldr	r0, [r7, #8]
 80065e0:	f009 fa71 	bl	800fac6 <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80065e4:	8879      	ldrh	r1, [r7, #2]
 80065e6:	2301      	movs	r3, #1
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2302      	movs	r3, #2
 80065ec:	2202      	movs	r2, #2
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fa fd86 	bl	8001100 <GPIOPinsInit>

	servo->htimx = htimx;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fe:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006606:	68b8      	ldr	r0, [r7, #8]
 8006608:	f7fa ff5a 	bl	80014c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200066cc 	.word	0x200066cc
 8006620:	40010000 	.word	0x40010000
 8006624:	200067d0 	.word	0x200067d0
 8006628:	20006480 	.word	0x20006480
 800662c:	40000400 	.word	0x40000400
 8006630:	200062bc 	.word	0x200062bc
 8006634:	40000800 	.word	0x40000800
 8006638:	20006440 	.word	0x20006440
 800663c:	40000c00 	.word	0x40000c00
 8006640:	2000627c 	.word	0x2000627c
 8006644:	40010400 	.word	0x40010400
 8006648:	2000670c 	.word	0x2000670c
 800664c:	40014000 	.word	0x40014000
 8006650:	2000639c 	.word	0x2000639c
 8006654:	40014400 	.word	0x40014400
 8006658:	200065e4 	.word	0x200065e4
 800665c:	40014800 	.word	0x40014800
 8006660:	200068f0 	.word	0x200068f0
 8006664:	40001800 	.word	0x40001800
 8006668:	20006564 	.word	0x20006564
 800666c:	40001c00 	.word	0x40001c00
 8006670:	200068b0 	.word	0x200068b0
 8006674:	40002000 	.word	0x40002000

08006678 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d204      	bcs.n	8006696 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695a      	ldr	r2, [r3, #20]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	621a      	str	r2, [r3, #32]
 8006694:	e00c      	b.n	80066b0 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d904      	bls.n	80066aa <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	621a      	str	r2, [r3, #32]
 80066a8:	e002      	b.n	80066b0 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <ServoSetPulse+0x4e>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6a12      	ldr	r2, [r2, #32]
 80066c2:	635a      	str	r2, [r3, #52]	; 0x34

}
 80066c4:	e01b      	b.n	80066fe <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d106      	bne.n	80066dc <ServoSetPulse+0x64>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80066da:	e010      	b.n	80066fe <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d106      	bne.n	80066f2 <ServoSetPulse+0x7a>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80066f0:	e005      	b.n	80066fe <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800670a:	b480      	push	{r7}
 800670c:	b085      	sub	sp, #20
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	619a      	str	r2, [r3, #24]
}
 8006722:	bf00      	nop
 8006724:	3714      	adds	r7, #20
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1a      	ldr	r2, [r3, #32]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	441a      	add	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	429a      	cmp	r2, r3
 800674e:	d203      	bcs.n	8006758 <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	429a      	cmp	r2, r3
 8006762:	d903      	bls.n	800676c <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699a      	ldr	r2, [r3, #24]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d106      	bne.n	8006782 <ServoMovePulse+0x54>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6a12      	ldr	r2, [r2, #32]
 800677e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006780:	e01b      	b.n	80067ba <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d106      	bne.n	8006798 <ServoMovePulse+0x6a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006796:	e010      	b.n	80067ba <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d106      	bne.n	80067ae <ServoMovePulse+0x80>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80067ac:	e005      	b.n	80067ba <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH);
 80067d8:	88f9      	ldrh	r1, [r7, #6]
 80067da:	2302      	movs	r3, #2
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2301      	movs	r3, #1
 80067e0:	2201      	movs	r2, #1
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f7fa fc8c 	bl	8001100 <GPIOPinsInit>

	if(hspix == &hspi1){
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <SPIxInit+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d105      	bne.n	80067fc <SPIxInit+0x34>
		hspix->Instance = SPI1;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a29      	ldr	r2, [pc, #164]	; (8006898 <SPIxInit+0xd0>)
 80067f4:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 80067f6:	2323      	movs	r3, #35	; 0x23
 80067f8:	75fb      	strb	r3, [r7, #23]
 80067fa:	e00e      	b.n	800681a <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4a27      	ldr	r2, [pc, #156]	; (800689c <SPIxInit+0xd4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d105      	bne.n	8006810 <SPIxInit+0x48>
		hspix->Instance = SPI2;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4a26      	ldr	r2, [pc, #152]	; (80068a0 <SPIxInit+0xd8>)
 8006808:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 800680a:	2324      	movs	r3, #36	; 0x24
 800680c:	75fb      	strb	r3, [r7, #23]
 800680e:	e004      	b.n	800681a <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a24      	ldr	r2, [pc, #144]	; (80068a4 <SPIxInit+0xdc>)
 8006814:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 8006816:	2333      	movs	r3, #51	; 0x33
 8006818:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	60da      	str	r2, [r3, #12]
	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	611a      	str	r2, [r3, #16]
	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	615a      	str	r2, [r3, #20]
//	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
	hspix->Init.NSS = SPI_NSS_SOFT ;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683e:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	625a      	str	r2, [r3, #36]	; 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	629a      	str	r2, [r3, #40]	; 0x28
	hspix->Init.CRCPolynomial = 10;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	220a      	movs	r2, #10
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800685e:	480d      	ldr	r0, [pc, #52]	; (8006894 <SPIxInit+0xcc>)
 8006860:	f008 fda4 	bl	800f3ac <HAL_SPI_Init>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <SPIxInit+0xa6>
	{
		Error_Handler();
 800686a:	f7fe fffb 	bl	8005864 <Error_Handler>
	}

	if(InterruptEnable){
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 8006874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006878:	2200      	movs	r2, #0
 800687a:	210e      	movs	r1, #14
 800687c:	4618      	mov	r0, r3
 800687e:	f004 febd 	bl	800b5fc <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8006882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006886:	4618      	mov	r0, r3
 8006888:	f004 fed4 	bl	800b634 <HAL_NVIC_EnableIRQ>
	}

}
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	20008144 	.word	0x20008144
 8006898:	40013000 	.word	0x40013000
 800689c:	20007000 	.word	0x20007000
 80068a0:	40003800 	.word	0x40003800
 80068a4:	40003c00 	.word	0x40003c00

080068a8 <SPIx_DMA_TX_Init>:


void SPIx_DMA_TX_Init(SPI_HandleTypeDef* hspix, DMA_HandleTypeDef* hdma_spix,
		GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode){
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	807b      	strh	r3, [r7, #2]

	__HAL_RCC_DMA2_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <SPIx_DMA_TX_Init+0xb4>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4a27      	ldr	r2, [pc, #156]	; (800695c <SPIx_DMA_TX_Init+0xb4>)
 80068c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068c4:	6313      	str	r3, [r2, #48]	; 0x30
 80068c6:	4b25      	ldr	r3, [pc, #148]	; (800695c <SPIx_DMA_TX_Init+0xb4>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, SPI1_TX_IRQ_PRIO, 0);
 80068d2:	2200      	movs	r2, #0
 80068d4:	210d      	movs	r1, #13
 80068d6:	2044      	movs	r0, #68	; 0x44
 80068d8:	f004 fe90 	bl	800b5fc <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 80068dc:	2044      	movs	r0, #68	; 0x44
 80068de:	f004 fec5 	bl	800b66c <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80068e2:	2044      	movs	r0, #68	; 0x44
 80068e4:	f004 fea6 	bl	800b634 <HAL_NVIC_EnableIRQ>

	SPIxInit(hspix, GPIOx_NSS, GPIO_Pin_NSS, Mode, DISABLE);
 80068e8:	887a      	ldrh	r2, [r7, #2]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff ff68 	bl	80067c8 <SPIxInit>

    hdma_spix->Instance = DMA2_Stream5;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	4a19      	ldr	r2, [pc, #100]	; (8006960 <SPIx_DMA_TX_Init+0xb8>)
 80068fc:	601a      	str	r2, [r3, #0]
    hdma_spix->Init.Channel = DMA_CHANNEL_3;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006904:	605a      	str	r2, [r3, #4]
    hdma_spix->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2240      	movs	r2, #64	; 0x40
 800690a:	609a      	str	r2, [r3, #8]
    hdma_spix->Init.PeriphInc = DMA_PINC_DISABLE;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2200      	movs	r2, #0
 8006910:	60da      	str	r2, [r3, #12]
    hdma_spix->Init.MemInc = DMA_MINC_ENABLE;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006918:	611a      	str	r2, [r3, #16]
    hdma_spix->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2200      	movs	r2, #0
 800691e:	615a      	str	r2, [r3, #20]
    hdma_spix->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	619a      	str	r2, [r3, #24]
    hdma_spix->Init.Mode = DMA_NORMAL;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	61da      	str	r2, [r3, #28]
    hdma_spix->Init.Priority = DMA_PRIORITY_LOW;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2200      	movs	r2, #0
 8006930:	621a      	str	r2, [r3, #32]
    hdma_spix->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2200      	movs	r2, #0
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(hdma_spix) != HAL_OK)
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	f004 fea5 	bl	800b688 <HAL_DMA_Init>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <SPIx_DMA_TX_Init+0xa0>
    {
      Error_Handler();
 8006944:	f7fe ff8e 	bl	8005864 <Error_Handler>
    }

    __HAL_LINKDMA(hspix,hdmatx,*hdma_spix);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	649a      	str	r2, [r3, #72]	; 0x48
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006954:	bf00      	nop
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40023800 	.word	0x40023800
 8006960:	40026488 	.word	0x40026488

08006964 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8006968:	4802      	ldr	r0, [pc, #8]	; (8006974 <SPI1_IRQHandler+0x10>)
 800696a:	f008 feb7 	bl	800f6dc <HAL_SPI_IRQHandler>
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20008144 	.word	0x20008144

08006978 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 800697c:	4802      	ldr	r0, [pc, #8]	; (8006988 <SPI2_IRQHandler+0x10>)
 800697e:	f008 fead 	bl	800f6dc <HAL_SPI_IRQHandler>
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20007000 	.word	0x20007000

0800698c <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8006990:	4802      	ldr	r0, [pc, #8]	; (800699c <SPI3_IRQHandler+0x10>)
 8006992:	f008 fea3 	bl	800f6dc <HAL_SPI_IRQHandler>
}
 8006996:	bf00      	nop
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	2000762c 	.word	0x2000762c

080069a0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80069a8:	4a04      	ldr	r2, [pc, #16]	; (80069bc <bldc_interface_init+0x1c>)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6013      	str	r3, [r2, #0]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	20000830 	.word	0x20000830

080069c0 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
	if (!len) {
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f001 8437 	beq.w	8008240 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 80069d2:	4bcd      	ldr	r3, [pc, #820]	; (8006d08 <bldc_interface_process_packet+0x348>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d006      	beq.n	80069e8 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 80069da:	4bcb      	ldr	r3, [pc, #812]	; (8006d08 <bldc_interface_process_packet+0x348>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	4798      	blx	r3
		return;
 80069e4:	f001 bc43 	b.w	800826e <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 80069f0:	2300      	movs	r3, #0
 80069f2:	61fb      	str	r3, [r7, #28]
	int i = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	74fb      	strb	r3, [r7, #19]
	data++;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3301      	adds	r3, #1
 8006a02:	607b      	str	r3, [r7, #4]
	len--;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	3b01      	subs	r3, #1
 8006a08:	603b      	str	r3, [r7, #0]

	switch (id) {
 8006a0a:	7cfb      	ldrb	r3, [r7, #19]
 8006a0c:	2b32      	cmp	r3, #50	; 0x32
 8006a0e:	f201 8419 	bhi.w	8008244 <bldc_interface_process_packet+0x1884>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <bldc_interface_process_packet+0x58>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006ae5 	.word	0x08006ae5
 8006a1c:	08008245 	.word	0x08008245
 8006a20:	08008245 	.word	0x08008245
 8006a24:	08008245 	.word	0x08008245
 8006a28:	08006b2f 	.word	0x08006b2f
 8006a2c:	08008245 	.word	0x08008245
 8006a30:	08008245 	.word	0x08008245
 8006a34:	08008245 	.word	0x08008245
 8006a38:	08008245 	.word	0x08008245
 8006a3c:	08008245 	.word	0x08008245
 8006a40:	08008245 	.word	0x08008245
 8006a44:	08008245 	.word	0x08008245
 8006a48:	08008245 	.word	0x08008245
 8006a4c:	08008221 	.word	0x08008221
 8006a50:	080071a9 	.word	0x080071a9
 8006a54:	080071a9 	.word	0x080071a9
 8006a58:	08008231 	.word	0x08008231
 8006a5c:	08007a65 	.word	0x08007a65
 8006a60:	08007a65 	.word	0x08007a65
 8006a64:	08008245 	.word	0x08008245
 8006a68:	08008245 	.word	0x08008245
 8006a6c:	08007129 	.word	0x08007129
 8006a70:	08007149 	.word	0x08007149
 8006a74:	08008245 	.word	0x08008245
 8006a78:	08008089 	.word	0x08008089
 8006a7c:	08008245 	.word	0x08008245
 8006a80:	08008245 	.word	0x08008245
 8006a84:	08008245 	.word	0x08008245
 8006a88:	08008245 	.word	0x08008245
 8006a8c:	08008245 	.word	0x08008245
 8006a90:	08008245 	.word	0x08008245
 8006a94:	08008131 	.word	0x08008131
 8006a98:	0800818d 	.word	0x0800818d
 8006a9c:	080081e9 	.word	0x080081e9
 8006aa0:	08008245 	.word	0x08008245
 8006aa4:	08008245 	.word	0x08008245
 8006aa8:	08008245 	.word	0x08008245
 8006aac:	08008245 	.word	0x08008245
 8006ab0:	08008245 	.word	0x08008245
 8006ab4:	08008245 	.word	0x08008245
 8006ab8:	08008245 	.word	0x08008245
 8006abc:	08008245 	.word	0x08008245
 8006ac0:	08008245 	.word	0x08008245
 8006ac4:	08008245 	.word	0x08008245
 8006ac8:	08008245 	.word	0x08008245
 8006acc:	08008245 	.word	0x08008245
 8006ad0:	08008245 	.word	0x08008245
 8006ad4:	08008245 	.word	0x08008245
 8006ad8:	08008245 	.word	0x08008245
 8006adc:	08008245 	.word	0x08008245
 8006ae0:	08006d6d 	.word	0x08006d6d
	case COMM_FW_VERSION:
		if (len == 2) {
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d117      	bne.n	8006b1a <bldc_interface_process_packet+0x15a>
			ind = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	60fa      	str	r2, [r7, #12]
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	4b83      	ldr	r3, [pc, #524]	; (8006d0c <bldc_interface_process_packet+0x34c>)
 8006b00:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	60fa      	str	r2, [r7, #12]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <bldc_interface_process_packet+0x350>)
 8006b14:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 8006b16:	f001 bbaa 	b.w	800826e <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 8006b1a:	4b7c      	ldr	r3, [pc, #496]	; (8006d0c <bldc_interface_process_packet+0x34c>)
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b20:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <bldc_interface_process_packet+0x350>)
 8006b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b28:	601a      	str	r2, [r3, #0]
		break;
 8006b2a:	f001 bba0 	b.w	800826e <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	4619      	mov	r1, r3
 8006b38:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f001 fca0 	bl	8008482 <buffer_get_float16>
 8006b42:	eef0 7a40 	vmov.f32	s15, s0
 8006b46:	4b73      	ldr	r3, [pc, #460]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006b48:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8006b4c:	f107 030c 	add.w	r3, r7, #12
 8006b50:	4619      	mov	r1, r3
 8006b52:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 fc93 	bl	8008482 <buffer_get_float16>
 8006b5c:	eef0 7a40 	vmov.f32	s15, s0
 8006b60:	4b6c      	ldr	r3, [pc, #432]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006b62:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8006b66:	f107 030c 	add.w	r3, r7, #12
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8006d18 <bldc_interface_process_packet+0x358>
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f001 fca1 	bl	80084b8 <buffer_get_float32>
 8006b76:	eef0 7a40 	vmov.f32	s15, s0
 8006b7a:	4b66      	ldr	r3, [pc, #408]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006b7c:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	4619      	mov	r1, r3
 8006b86:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8006d18 <bldc_interface_process_packet+0x358>
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fc94 	bl	80084b8 <buffer_get_float32>
 8006b90:	eef0 7a40 	vmov.f32	s15, s0
 8006b94:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006b96:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006d18 <bldc_interface_process_packet+0x358>
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fc87 	bl	80084b8 <buffer_get_float32>
 8006baa:	eef0 7a40 	vmov.f32	s15, s0
 8006bae:	4b59      	ldr	r3, [pc, #356]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006bb0:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	4619      	mov	r1, r3
 8006bba:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8006d18 <bldc_interface_process_packet+0x358>
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fc7a 	bl	80084b8 <buffer_get_float32>
 8006bc4:	eef0 7a40 	vmov.f32	s15, s0
 8006bc8:	4b52      	ldr	r3, [pc, #328]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006bca:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8006bce:	f107 030c 	add.w	r3, r7, #12
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006d1c <bldc_interface_process_packet+0x35c>
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fc52 	bl	8008482 <buffer_get_float16>
 8006bde:	eef0 7a40 	vmov.f32	s15, s0
 8006be2:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006be4:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8006be8:	f107 030c 	add.w	r3, r7, #12
 8006bec:	4619      	mov	r1, r3
 8006bee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fc60 	bl	80084b8 <buffer_get_float32>
 8006bf8:	eef0 7a40 	vmov.f32	s15, s0
 8006bfc:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006bfe:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4619      	mov	r1, r3
 8006c08:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fc38 	bl	8008482 <buffer_get_float16>
 8006c12:	eef0 7a40 	vmov.f32	s15, s0
 8006c16:	4b3f      	ldr	r3, [pc, #252]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c18:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8006c1c:	f107 030c 	add.w	r3, r7, #12
 8006c20:	4619      	mov	r1, r3
 8006c22:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8006d20 <bldc_interface_process_packet+0x360>
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 fc46 	bl	80084b8 <buffer_get_float32>
 8006c2c:	eef0 7a40 	vmov.f32	s15, s0
 8006c30:	4b38      	ldr	r3, [pc, #224]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006d20 <bldc_interface_process_packet+0x360>
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 fc39 	bl	80084b8 <buffer_get_float32>
 8006c46:	eef0 7a40 	vmov.f32	s15, s0
 8006c4a:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8006c50:	f107 030c 	add.w	r3, r7, #12
 8006c54:	4619      	mov	r1, r3
 8006c56:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006d20 <bldc_interface_process_packet+0x360>
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f001 fc2c 	bl	80084b8 <buffer_get_float32>
 8006c60:	eef0 7a40 	vmov.f32	s15, s0
 8006c64:	4b2b      	ldr	r3, [pc, #172]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c66:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	4619      	mov	r1, r3
 8006c70:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006d20 <bldc_interface_process_packet+0x360>
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fc1f 	bl	80084b8 <buffer_get_float32>
 8006c7a:	eef0 7a40 	vmov.f32	s15, s0
 8006c7e:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c80:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8006c84:	f107 030c 	add.w	r3, r7, #12
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fb99 	bl	80083c2 <buffer_get_int32>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a20      	ldr	r2, [pc, #128]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006c94:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fb90 	bl	80083c2 <buffer_get_int32>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006ca6:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	60fa      	str	r2, [r7, #12]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	4b17      	ldr	r3, [pc, #92]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	da0d      	bge.n	8006ce0 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4619      	mov	r1, r3
 8006cca:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006d24 <bldc_interface_process_packet+0x364>
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 fbf2 	bl	80084b8 <buffer_get_float32>
 8006cd4:	eef0 7a40 	vmov.f32	s15, s0
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006cda:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8006cde:	e003      	b.n	8006ce8 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	da1b      	bge.n	8006d28 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	60fa      	str	r2, [r7, #12]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	781a      	ldrb	r2, [r3, #0]
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <bldc_interface_process_packet+0x354>)
 8006d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006d04:	e014      	b.n	8006d30 <bldc_interface_process_packet+0x370>
 8006d06:	bf00      	nop
 8006d08:	20000834 	.word	0x20000834
 8006d0c:	200005a8 	.word	0x200005a8
 8006d10:	200005ac 	.word	0x200005ac
 8006d14:	20000548 	.word	0x20000548
 8006d18:	42c80000 	.word	0x42c80000
 8006d1c:	447a0000 	.word	0x447a0000
 8006d20:	461c4000 	.word	0x461c4000
 8006d24:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <bldc_interface_process_packet+0x39c>)
 8006d2a:	22ff      	movs	r2, #255	; 0xff
 8006d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <bldc_interface_process_packet+0x3a0>)
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <bldc_interface_process_packet+0x39c>)
 8006d34:	4610      	mov	r0, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	2360      	movs	r3, #96	; 0x60
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f00e fb48 	bl	80153d0 <memcpy>

		if (rx_value_func) {
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <bldc_interface_process_packet+0x3a4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 8006d48:	4b06      	ldr	r3, [pc, #24]	; (8006d64 <bldc_interface_process_packet+0x3a4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4803      	ldr	r0, [pc, #12]	; (8006d5c <bldc_interface_process_packet+0x39c>)
 8006d4e:	4798      	blx	r3
		}

		rx_value_complete = true;
 8006d50:	4b05      	ldr	r3, [pc, #20]	; (8006d68 <bldc_interface_process_packet+0x3a8>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	701a      	strb	r2, [r3, #0]

		break;
 8006d56:	f001 ba8a 	b.w	800826e <bldc_interface_process_packet+0x18ae>
 8006d5a:	bf00      	nop
 8006d5c:	20000548 	.word	0x20000548
 8006d60:	20007320 	.word	0x20007320
 8006d64:	20000838 	.word	0x20000838
 8006d68:	20008510 	.word	0x20008510

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 fb53 	bl	8008422 <buffer_get_uint32>
 8006d7c:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00e      	beq.n	8006da6 <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f001 fb75 	bl	8008482 <buffer_get_float16>
 8006d98:	eef0 7a40 	vmov.f32	s15, s0
 8006d9c:	4bc6      	ldr	r3, [pc, #792]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006d9e:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f003 0302 	and.w	r3, r3, #2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00e      	beq.n	8006dce <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4619      	mov	r1, r3
 8006db6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fb61 	bl	8008482 <buffer_get_float16>
 8006dc0:	eef0 7a40 	vmov.f32	s15, s0
 8006dc4:	4bbc      	ldr	r3, [pc, #752]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006dc6:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00e      	beq.n	8006df6 <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	4619      	mov	r1, r3
 8006dde:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 80070bc <bldc_interface_process_packet+0x6fc>
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fb68 	bl	80084b8 <buffer_get_float32>
 8006de8:	eef0 7a40 	vmov.f32	s15, s0
 8006dec:	4bb2      	ldr	r3, [pc, #712]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006dee:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 8006df2:	2302      	movs	r3, #2
 8006df4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f003 0308 	and.w	r3, r3, #8
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4619      	mov	r1, r3
 8006e06:	ed9f 0aad 	vldr	s0, [pc, #692]	; 80070bc <bldc_interface_process_packet+0x6fc>
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fb54 	bl	80084b8 <buffer_get_float32>
 8006e10:	eef0 7a40 	vmov.f32	s15, s0
 8006e14:	4ba8      	ldr	r3, [pc, #672]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006e16:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80070bc <bldc_interface_process_packet+0x6fc>
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fb40 	bl	80084b8 <buffer_get_float32>
 8006e38:	eef0 7a40 	vmov.f32	s15, s0
 8006e3c:	4b9e      	ldr	r3, [pc, #632]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006e3e:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 8006e42:	2304      	movs	r3, #4
 8006e44:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f003 0320 	and.w	r3, r3, #32
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	4619      	mov	r1, r3
 8006e56:	ed9f 0a99 	vldr	s0, [pc, #612]	; 80070bc <bldc_interface_process_packet+0x6fc>
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fb2c 	bl	80084b8 <buffer_get_float32>
 8006e60:	eef0 7a40 	vmov.f32	s15, s0
 8006e64:	4b94      	ldr	r3, [pc, #592]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006e66:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 8006e6a:	2305      	movs	r3, #5
 8006e6c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00e      	beq.n	8006e96 <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80070c8 <bldc_interface_process_packet+0x708>
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fafd 	bl	8008482 <buffer_get_float16>
 8006e88:	eef0 7a40 	vmov.f32	s15, s0
 8006e8c:	4b8a      	ldr	r3, [pc, #552]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006e8e:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 8006e92:	2306      	movs	r3, #6
 8006e94:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fb04 	bl	80084b8 <buffer_get_float32>
 8006eb0:	eef0 7a40 	vmov.f32	s15, s0
 8006eb4:	4b80      	ldr	r3, [pc, #512]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006eb6:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 8006eba:	2307      	movs	r3, #7
 8006ebc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4619      	mov	r1, r3
 8006ece:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fad5 	bl	8008482 <buffer_get_float16>
 8006ed8:	eef0 7a40 	vmov.f32	s15, s0
 8006edc:	4b76      	ldr	r3, [pc, #472]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006ede:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00e      	beq.n	8006f0e <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8006ef0:	f107 030c 	add.w	r3, r7, #12
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80070c0 <bldc_interface_process_packet+0x700>
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fadc 	bl	80084b8 <buffer_get_float32>
 8006f00:	eef0 7a40 	vmov.f32	s15, s0
 8006f04:	4b6c      	ldr	r3, [pc, #432]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006f06:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 8006f0a:	2309      	movs	r3, #9
 8006f0c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00e      	beq.n	8006f36 <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006f18:	f107 030c 	add.w	r3, r7, #12
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	ed9f 0a68 	vldr	s0, [pc, #416]	; 80070c0 <bldc_interface_process_packet+0x700>
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fac8 	bl	80084b8 <buffer_get_float32>
 8006f28:	eef0 7a40 	vmov.f32	s15, s0
 8006f2c:	4b62      	ldr	r3, [pc, #392]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006f2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 8006f32:	230a      	movs	r3, #10
 8006f34:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00e      	beq.n	8006f5e <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	4619      	mov	r1, r3
 8006f46:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80070c0 <bldc_interface_process_packet+0x700>
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f001 fab4 	bl	80084b8 <buffer_get_float32>
 8006f50:	eef0 7a40 	vmov.f32	s15, s0
 8006f54:	4b58      	ldr	r3, [pc, #352]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006f56:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 8006f5a:	230b      	movs	r3, #11
 8006f5c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80070c0 <bldc_interface_process_packet+0x700>
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 faa0 	bl	80084b8 <buffer_get_float32>
 8006f78:	eef0 7a40 	vmov.f32	s15, s0
 8006f7c:	4b4e      	ldr	r3, [pc, #312]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006f7e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 8006f82:	230c      	movs	r3, #12
 8006f84:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00a      	beq.n	8006fa6 <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fa13 	bl	80083c2 <buffer_get_int32>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	4a46      	ldr	r2, [pc, #280]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006fa0:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 8006fa2:	230d      	movs	r3, #13
 8006fa4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 fa03 	bl	80083c2 <buffer_get_int32>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4a3e      	ldr	r2, [pc, #248]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006fc0:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 8006fc2:	230e      	movs	r3, #14
 8006fc4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00b      	beq.n	8006fe8 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	60fa      	str	r2, [r7, #12]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	4b36      	ldr	r3, [pc, #216]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 8006fe4:	230f      	movs	r3, #15
 8006fe6:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00e      	beq.n	8007010 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8006ff2:	f107 030c 	add.w	r3, r7, #12
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80070c4 <bldc_interface_process_packet+0x704>
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 fa5b 	bl	80084b8 <buffer_get_float32>
 8007002:	eef0 7a40 	vmov.f32	s15, s0
 8007006:	4b2c      	ldr	r3, [pc, #176]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8007008:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 800700c:	2310      	movs	r3, #16
 800700e:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	60fa      	str	r2, [r7, #12]
 8007020:	461a      	mov	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 800702a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 800702e:	2311      	movs	r3, #17
 8007030:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d028      	beq.n	800708e <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4619      	mov	r1, r3
 8007042:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 fa1b 	bl	8008482 <buffer_get_float16>
 800704c:	eef0 7a40 	vmov.f32	s15, s0
 8007050:	4b19      	ldr	r3, [pc, #100]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8007052:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 8007056:	f107 030c 	add.w	r3, r7, #12
 800705a:	4619      	mov	r1, r3
 800705c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fa0e 	bl	8008482 <buffer_get_float16>
 8007066:	eef0 7a40 	vmov.f32	s15, s0
 800706a:	4b13      	ldr	r3, [pc, #76]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 800706c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	4619      	mov	r1, r3
 8007076:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fa01 	bl	8008482 <buffer_get_float16>
 8007080:	eef0 7a40 	vmov.f32	s15, s0
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 8007086:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 800708a:	2312      	movs	r3, #18
 800708c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d019      	beq.n	80070cc <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8007098:	f107 030c 	add.w	r3, r7, #12
 800709c:	4619      	mov	r1, r3
 800709e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80070c8 <bldc_interface_process_packet+0x708>
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fa08 	bl	80084b8 <buffer_get_float32>
 80070a8:	eef0 7a40 	vmov.f32	s15, s0
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <bldc_interface_process_packet+0x6f8>)
 80070ae:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 80070b2:	2313      	movs	r3, #19
 80070b4:	61fb      	str	r3, [r7, #28]
 80070b6:	e009      	b.n	80070cc <bldc_interface_process_packet+0x70c>
 80070b8:	20000548 	.word	0x20000548
 80070bc:	42c80000 	.word	0x42c80000
 80070c0:	461c4000 	.word	0x461c4000
 80070c4:	49742400 	.word	0x49742400
 80070c8:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00e      	beq.n	80070f4 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	4619      	mov	r1, r3
 80070dc:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 80070c8 <bldc_interface_process_packet+0x708>
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f9e9 	bl	80084b8 <buffer_get_float32>
 80070e6:	eef0 7a40 	vmov.f32	s15, s0
 80070ea:	4b26      	ldr	r3, [pc, #152]	; (8007184 <bldc_interface_process_packet+0x7c4>)
 80070ec:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 80070f0:	2314      	movs	r3, #20
 80070f2:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 80070f4:	4a24      	ldr	r2, [pc, #144]	; (8007188 <bldc_interface_process_packet+0x7c8>)
 80070f6:	4b23      	ldr	r3, [pc, #140]	; (8007184 <bldc_interface_process_packet+0x7c4>)
 80070f8:	4610      	mov	r0, r2
 80070fa:	4619      	mov	r1, r3
 80070fc:	2360      	movs	r3, #96	; 0x60
 80070fe:	461a      	mov	r2, r3
 8007100:	f00e f966 	bl	80153d0 <memcpy>

		if(rx_value_selective_print){
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <bldc_interface_process_packet+0x7cc>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 800710c:	4b20      	ldr	r3, [pc, #128]	; (8007190 <bldc_interface_process_packet+0x7d0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 8007114:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <bldc_interface_process_packet+0x7d0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	491a      	ldr	r1, [pc, #104]	; (8007184 <bldc_interface_process_packet+0x7c4>)
 800711a:	69f8      	ldr	r0, [r7, #28]
 800711c:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 800711e:	4b1d      	ldr	r3, [pc, #116]	; (8007194 <bldc_interface_process_packet+0x7d4>)
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
		break;
 8007124:	f001 b8a3 	b.w	800826e <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 8007128:	4b1b      	ldr	r3, [pc, #108]	; (8007198 <bldc_interface_process_packet+0x7d8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f001 808b 	beq.w	8008248 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	4413      	add	r3, r2
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 800713c:	4b16      	ldr	r3, [pc, #88]	; (8007198 <bldc_interface_process_packet+0x7d8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
		}
		break;
 8007144:	f001 b880 	b.w	8008248 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 800714c:	f107 030c 	add.w	r3, r7, #12
 8007150:	4619      	mov	r1, r3
 8007152:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800719c <bldc_interface_process_packet+0x7dc>
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 f9ae 	bl	80084b8 <buffer_get_float32>
 800715c:	eef0 7a40 	vmov.f32	s15, s0
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <bldc_interface_process_packet+0x7e0>)
 8007162:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <bldc_interface_process_packet+0x7e4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f001 806e 	beq.w	800824c <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <bldc_interface_process_packet+0x7e4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <bldc_interface_process_packet+0x7e0>)
 8007176:	edd2 7a00 	vldr	s15, [r2]
 800717a:	eeb0 0a67 	vmov.f32	s0, s15
 800717e:	4798      	blx	r3
		}
		break;
 8007180:	f001 b864 	b.w	800824c <bldc_interface_process_packet+0x188c>
 8007184:	20000548 	.word	0x20000548
 8007188:	20007320 	.word	0x20007320
 800718c:	20008740 	.word	0x20008740
 8007190:	2000083c 	.word	0x2000083c
 8007194:	20008510 	.word	0x20008510
 8007198:	20000840 	.word	0x20000840
 800719c:	47c35000 	.word	0x47c35000
 80071a0:	200005b0 	.word	0x200005b0
 80071a4:	20000844 	.word	0x20000844
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 80071ac:	f107 030c 	add.w	r3, r7, #12
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 f935 	bl	8008422 <buffer_get_uint32>
 80071b8:	4603      	mov	r3, r0
 80071ba:	4ac5      	ldr	r2, [pc, #788]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80071bc:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1c5a      	adds	r2, r3, #1
 80071c2:	60fa      	str	r2, [r7, #12]
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	4bc0      	ldr	r3, [pc, #768]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80071ce:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	60fa      	str	r2, [r7, #12]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4413      	add	r3, r2
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	4bbc      	ldr	r3, [pc, #752]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80071e0:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1c5a      	adds	r2, r3, #1
 80071e6:	60fa      	str	r2, [r7, #12]
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	781a      	ldrb	r2, [r3, #0]
 80071f0:	4bb7      	ldr	r3, [pc, #732]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80071f2:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	60fa      	str	r2, [r7, #12]
 80071fa:	461a      	mov	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	4bb3      	ldr	r3, [pc, #716]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007204:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f96d 	bl	80084ec <buffer_get_float32_auto>
 8007212:	eef0 7a40 	vmov.f32	s15, s0
 8007216:	4bae      	ldr	r3, [pc, #696]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007218:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 800721c:	f107 030c 	add.w	r3, r7, #12
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 f962 	bl	80084ec <buffer_get_float32_auto>
 8007228:	eef0 7a40 	vmov.f32	s15, s0
 800722c:	4ba8      	ldr	r3, [pc, #672]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800722e:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8007232:	f107 030c 	add.w	r3, r7, #12
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f957 	bl	80084ec <buffer_get_float32_auto>
 800723e:	eef0 7a40 	vmov.f32	s15, s0
 8007242:	4ba3      	ldr	r3, [pc, #652]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007244:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8007248:	f107 030c 	add.w	r3, r7, #12
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 f94c 	bl	80084ec <buffer_get_float32_auto>
 8007254:	eef0 7a40 	vmov.f32	s15, s0
 8007258:	4b9d      	ldr	r3, [pc, #628]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800725a:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 800725e:	f107 030c 	add.w	r3, r7, #12
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f941 	bl	80084ec <buffer_get_float32_auto>
 800726a:	eef0 7a40 	vmov.f32	s15, s0
 800726e:	4b98      	ldr	r3, [pc, #608]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007270:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8007274:	f107 030c 	add.w	r3, r7, #12
 8007278:	4619      	mov	r1, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 f936 	bl	80084ec <buffer_get_float32_auto>
 8007280:	eef0 7a40 	vmov.f32	s15, s0
 8007284:	4b92      	ldr	r3, [pc, #584]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007286:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f92b 	bl	80084ec <buffer_get_float32_auto>
 8007296:	eef0 7a40 	vmov.f32	s15, s0
 800729a:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800729c:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 80072a0:	f107 030c 	add.w	r3, r7, #12
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 f920 	bl	80084ec <buffer_get_float32_auto>
 80072ac:	eef0 7a40 	vmov.f32	s15, s0
 80072b0:	4b87      	ldr	r3, [pc, #540]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80072b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 80072b6:	f107 030c 	add.w	r3, r7, #12
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 f915 	bl	80084ec <buffer_get_float32_auto>
 80072c2:	eef0 7a40 	vmov.f32	s15, s0
 80072c6:	4b82      	ldr	r3, [pc, #520]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80072c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 80072cc:	f107 030c 	add.w	r3, r7, #12
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 f90a 	bl	80084ec <buffer_get_float32_auto>
 80072d8:	eef0 7a40 	vmov.f32	s15, s0
 80072dc:	4b7c      	ldr	r3, [pc, #496]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80072de:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 80072e2:	f107 030c 	add.w	r3, r7, #12
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 f8ff 	bl	80084ec <buffer_get_float32_auto>
 80072ee:	eef0 7a40 	vmov.f32	s15, s0
 80072f2:	4b77      	ldr	r3, [pc, #476]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80072f4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 80072f8:	f107 030c 	add.w	r3, r7, #12
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f8f4 	bl	80084ec <buffer_get_float32_auto>
 8007304:	eef0 7a40 	vmov.f32	s15, s0
 8007308:	4b71      	ldr	r3, [pc, #452]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800730a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 800730e:	f107 030c 	add.w	r3, r7, #12
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f001 f8e9 	bl	80084ec <buffer_get_float32_auto>
 800731a:	eef0 7a40 	vmov.f32	s15, s0
 800731e:	4b6c      	ldr	r3, [pc, #432]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007320:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8007324:	f107 030c 	add.w	r3, r7, #12
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 f8de 	bl	80084ec <buffer_get_float32_auto>
 8007330:	eef0 7a40 	vmov.f32	s15, s0
 8007334:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007336:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	60fa      	str	r2, [r7, #12]
 8007340:	461a      	mov	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2da      	uxtb	r2, r3
 8007352:	4b5f      	ldr	r3, [pc, #380]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8007358:	f107 030c 	add.w	r3, r7, #12
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f8c4 	bl	80084ec <buffer_get_float32_auto>
 8007364:	eef0 7a40 	vmov.f32	s15, s0
 8007368:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800736a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f8b9 	bl	80084ec <buffer_get_float32_auto>
 800737a:	eef0 7a40 	vmov.f32	s15, s0
 800737e:	4b54      	ldr	r3, [pc, #336]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007380:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8007384:	f107 030c 	add.w	r3, r7, #12
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f8ae 	bl	80084ec <buffer_get_float32_auto>
 8007390:	eef0 7a40 	vmov.f32	s15, s0
 8007394:	4b4e      	ldr	r3, [pc, #312]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007396:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 800739a:	f107 030c 	add.w	r3, r7, #12
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f001 f8a3 	bl	80084ec <buffer_get_float32_auto>
 80073a6:	eef0 7a40 	vmov.f32	s15, s0
 80073aa:	4b49      	ldr	r3, [pc, #292]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80073ac:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f001 f898 	bl	80084ec <buffer_get_float32_auto>
 80073bc:	eef0 7a40 	vmov.f32	s15, s0
 80073c0:	4b43      	ldr	r3, [pc, #268]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80073c2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f88d 	bl	80084ec <buffer_get_float32_auto>
 80073d2:	eef0 7a40 	vmov.f32	s15, s0
 80073d6:	4b3e      	ldr	r3, [pc, #248]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80073d8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f882 	bl	80084ec <buffer_get_float32_auto>
 80073e8:	eef0 7a40 	vmov.f32	s15, s0
 80073ec:	4b38      	ldr	r3, [pc, #224]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80073ee:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 80073f2:	f107 030c 	add.w	r3, r7, #12
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 f877 	bl	80084ec <buffer_get_float32_auto>
 80073fe:	eef0 7a40 	vmov.f32	s15, s0
 8007402:	4b33      	ldr	r3, [pc, #204]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007404:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8007408:	f107 030c 	add.w	r3, r7, #12
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 f86c 	bl	80084ec <buffer_get_float32_auto>
 8007414:	eef0 7a40 	vmov.f32	s15, s0
 8007418:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800741a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 800741e:	4b2c      	ldr	r3, [pc, #176]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007424:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800742c:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 800742e:	4b28      	ldr	r3, [pc, #160]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	4a27      	ldr	r2, [pc, #156]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007434:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8007436:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800743c:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 800743e:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007444:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8007446:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800744c:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 800744e:	f107 030c 	add.w	r3, r7, #12
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f849 	bl	80084ec <buffer_get_float32_auto>
 800745a:	eef0 7a40 	vmov.f32	s15, s0
 800745e:	4b1c      	ldr	r3, [pc, #112]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007460:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f83e 	bl	80084ec <buffer_get_float32_auto>
 8007470:	eef0 7a40 	vmov.f32	s15, s0
 8007474:	4b16      	ldr	r3, [pc, #88]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 8007476:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 800747a:	f107 030c 	add.w	r3, r7, #12
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f833 	bl	80084ec <buffer_get_float32_auto>
 8007486:	eef0 7a40 	vmov.f32	s15, s0
 800748a:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 800748c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 f828 	bl	80084ec <buffer_get_float32_auto>
 800749c:	eef0 7a40 	vmov.f32	s15, s0
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80074a2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 80074a6:	f107 030c 	add.w	r3, r7, #12
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f001 f81d 	bl	80084ec <buffer_get_float32_auto>
 80074b2:	eef0 7a40 	vmov.f32	s15, s0
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <bldc_interface_process_packet+0xb10>)
 80074b8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 80074bc:	f107 030c 	add.w	r3, r7, #12
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f812 	bl	80084ec <buffer_get_float32_auto>
 80074c8:	eef0 7a40 	vmov.f32	s15, s0
 80074cc:	e002      	b.n	80074d4 <bldc_interface_process_packet+0xb14>
 80074ce:	bf00      	nop
 80074d0:	200005b4 	.word	0x200005b4
 80074d4:	4bc7      	ldr	r3, [pc, #796]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80074d6:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f803 	bl	80084ec <buffer_get_float32_auto>
 80074e6:	eef0 7a40 	vmov.f32	s15, s0
 80074ea:	4bc2      	ldr	r3, [pc, #776]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80074ec:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	441a      	add	r2, r3
 80074f8:	4bbe      	ldr	r3, [pc, #760]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80074fa:	339c      	adds	r3, #156	; 0x9c
 80074fc:	6810      	ldr	r0, [r2, #0]
 80074fe:	6851      	ldr	r1, [r2, #4]
 8007500:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	3308      	adds	r3, #8
 8007506:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 ffec 	bl	80084ec <buffer_get_float32_auto>
 8007514:	eef0 7a40 	vmov.f32	s15, s0
 8007518:	4bb6      	ldr	r3, [pc, #728]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 800751a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 ffe1 	bl	80084ec <buffer_get_float32_auto>
 800752a:	eef0 7a40 	vmov.f32	s15, s0
 800752e:	4bb1      	ldr	r3, [pc, #708]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007530:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8007534:	f107 030c 	add.w	r3, r7, #12
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 ffd6 	bl	80084ec <buffer_get_float32_auto>
 8007540:	eef0 7a40 	vmov.f32	s15, s0
 8007544:	4bab      	ldr	r3, [pc, #684]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007546:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ffcb 	bl	80084ec <buffer_get_float32_auto>
 8007556:	eef0 7a40 	vmov.f32	s15, s0
 800755a:	4ba6      	ldr	r3, [pc, #664]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 800755c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8007560:	f107 030c 	add.w	r3, r7, #12
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 ffc0 	bl	80084ec <buffer_get_float32_auto>
 800756c:	eef0 7a40 	vmov.f32	s15, s0
 8007570:	4ba0      	ldr	r3, [pc, #640]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007572:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	60fa      	str	r2, [r7, #12]
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	bf14      	ite	ne
 8007588:	2301      	movne	r3, #1
 800758a:	2300      	moveq	r3, #0
 800758c:	b2da      	uxtb	r2, r3
 800758e:	4b99      	ldr	r3, [pc, #612]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007590:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 ffa6 	bl	80084ec <buffer_get_float32_auto>
 80075a0:	eef0 7a40 	vmov.f32	s15, s0
 80075a4:	4b93      	ldr	r3, [pc, #588]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80075a6:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 80075aa:	f107 030c 	add.w	r3, r7, #12
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 ff9b 	bl	80084ec <buffer_get_float32_auto>
 80075b6:	eef0 7a40 	vmov.f32	s15, s0
 80075ba:	4b8e      	ldr	r3, [pc, #568]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80075bc:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	60fa      	str	r2, [r7, #12]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80075d0:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 ff86 	bl	80084ec <buffer_get_float32_auto>
 80075e0:	eef0 7a40 	vmov.f32	s15, s0
 80075e4:	4b83      	ldr	r3, [pc, #524]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80075e6:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	4619      	mov	r1, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 ff7b 	bl	80084ec <buffer_get_float32_auto>
 80075f6:	eef0 7a40 	vmov.f32	s15, s0
 80075fa:	4b7e      	ldr	r3, [pc, #504]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80075fc:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 ff70 	bl	80084ec <buffer_get_float32_auto>
 800760c:	eef0 7a40 	vmov.f32	s15, s0
 8007610:	4b78      	ldr	r3, [pc, #480]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007612:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 8007616:	f107 030c 	add.w	r3, r7, #12
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 ff65 	bl	80084ec <buffer_get_float32_auto>
 8007622:	eef0 7a40 	vmov.f32	s15, s0
 8007626:	4b73      	ldr	r3, [pc, #460]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007628:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 ff5a 	bl	80084ec <buffer_get_float32_auto>
 8007638:	eef0 7a40 	vmov.f32	s15, s0
 800763c:	4b6d      	ldr	r3, [pc, #436]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 800763e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8007642:	f107 030c 	add.w	r3, r7, #12
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 ff4f 	bl	80084ec <buffer_get_float32_auto>
 800764e:	eef0 7a40 	vmov.f32	s15, s0
 8007652:	4b68      	ldr	r3, [pc, #416]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007654:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 8007658:	f107 030c 	add.w	r3, r7, #12
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 ff44 	bl	80084ec <buffer_get_float32_auto>
 8007664:	eef0 7a40 	vmov.f32	s15, s0
 8007668:	4b62      	ldr	r3, [pc, #392]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 800766a:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 800766e:	f107 030c 	add.w	r3, r7, #12
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 ff39 	bl	80084ec <buffer_get_float32_auto>
 800767a:	eef0 7a40 	vmov.f32	s15, s0
 800767e:	4b5d      	ldr	r3, [pc, #372]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007680:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8007684:	f107 030c 	add.w	r3, r7, #12
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 ff2e 	bl	80084ec <buffer_get_float32_auto>
 8007690:	eef0 7a40 	vmov.f32	s15, s0
 8007694:	4b57      	ldr	r3, [pc, #348]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007696:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800769a:	f107 030c 	add.w	r3, r7, #12
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 ff23 	bl	80084ec <buffer_get_float32_auto>
 80076a6:	eef0 7a40 	vmov.f32	s15, s0
 80076aa:	4b52      	ldr	r3, [pc, #328]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80076ac:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 80076b0:	f107 030c 	add.w	r3, r7, #12
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 ff18 	bl	80084ec <buffer_get_float32_auto>
 80076bc:	eef0 7a40 	vmov.f32	s15, s0
 80076c0:	4b4c      	ldr	r3, [pc, #304]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80076c2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 80076c6:	f107 030c 	add.w	r3, r7, #12
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 ff0d 	bl	80084ec <buffer_get_float32_auto>
 80076d2:	eef0 7a40 	vmov.f32	s15, s0
 80076d6:	4b47      	ldr	r3, [pc, #284]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80076d8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 ff02 	bl	80084ec <buffer_get_float32_auto>
 80076e8:	eef0 7a40 	vmov.f32	s15, s0
 80076ec:	4b41      	ldr	r3, [pc, #260]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80076ee:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80076f2:	f107 030c 	add.w	r3, r7, #12
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fef7 	bl	80084ec <buffer_get_float32_auto>
 80076fe:	eef0 7a40 	vmov.f32	s15, s0
 8007702:	4b3c      	ldr	r3, [pc, #240]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007704:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	461a      	mov	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	441a      	add	r2, r3
 8007710:	4b38      	ldr	r3, [pc, #224]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007712:	33fd      	adds	r3, #253	; 0xfd
 8007714:	6811      	ldr	r1, [r2, #0]
 8007716:	6852      	ldr	r2, [r2, #4]
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	605a      	str	r2, [r3, #4]
		ind += 8;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3308      	adds	r3, #8
 8007720:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8007722:	f107 030c 	add.w	r3, r7, #12
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fedf 	bl	80084ec <buffer_get_float32_auto>
 800772e:	eef0 7a40 	vmov.f32	s15, s0
 8007732:	4b30      	ldr	r3, [pc, #192]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007734:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	60fa      	str	r2, [r7, #12]
 800773e:	461a      	mov	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4413      	add	r3, r2
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf14      	ite	ne
 800774a:	2301      	movne	r3, #1
 800774c:	2300      	moveq	r3, #0
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b28      	ldr	r3, [pc, #160]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007752:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	60fa      	str	r2, [r7, #12]
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2da      	uxtb	r2, r3
 800776e:	4b21      	ldr	r3, [pc, #132]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007770:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 feb6 	bl	80084ec <buffer_get_float32_auto>
 8007780:	eef0 7a40 	vmov.f32	s15, s0
 8007784:	4b1b      	ldr	r3, [pc, #108]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 8007786:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	60fa      	str	r2, [r7, #12]
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80077a4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 80077a8:	f107 030c 	add.w	r3, r7, #12
 80077ac:	4619      	mov	r1, r3
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fe9c 	bl	80084ec <buffer_get_float32_auto>
 80077b4:	eef0 7a40 	vmov.f32	s15, s0
 80077b8:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80077ba:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 80077be:	f107 030c 	add.w	r3, r7, #12
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fe91 	bl	80084ec <buffer_get_float32_auto>
 80077ca:	eef0 7a40 	vmov.f32	s15, s0
 80077ce:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80077d0:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80077d4:	f107 030c 	add.w	r3, r7, #12
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fe86 	bl	80084ec <buffer_get_float32_auto>
 80077e0:	eef0 7a40 	vmov.f32	s15, s0
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <bldc_interface_process_packet+0xe34>)
 80077e6:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80077ea:	f107 030c 	add.w	r3, r7, #12
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	e001      	b.n	80077f8 <bldc_interface_process_packet+0xe38>
 80077f4:	200005b4 	.word	0x200005b4
 80077f8:	f000 fe78 	bl	80084ec <buffer_get_float32_auto>
 80077fc:	eef0 7a40 	vmov.f32	s15, s0
 8007800:	4b96      	ldr	r3, [pc, #600]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007802:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fe6d 	bl	80084ec <buffer_get_float32_auto>
 8007812:	eef0 7a40 	vmov.f32	s15, s0
 8007816:	4b91      	ldr	r3, [pc, #580]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007818:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800781c:	f107 030c 	add.w	r3, r7, #12
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fe62 	bl	80084ec <buffer_get_float32_auto>
 8007828:	eef0 7a40 	vmov.f32	s15, s0
 800782c:	4b8b      	ldr	r3, [pc, #556]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 800782e:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8007832:	f107 030c 	add.w	r3, r7, #12
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fe57 	bl	80084ec <buffer_get_float32_auto>
 800783e:	eef0 7a40 	vmov.f32	s15, s0
 8007842:	4b86      	ldr	r3, [pc, #536]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007844:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	60fa      	str	r2, [r7, #12]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf14      	ite	ne
 800785a:	2301      	movne	r3, #1
 800785c:	2300      	moveq	r3, #0
 800785e:	b2da      	uxtb	r2, r3
 8007860:	4b7e      	ldr	r3, [pc, #504]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007862:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 8007866:	f107 030c 	add.w	r3, r7, #12
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fe3d 	bl	80084ec <buffer_get_float32_auto>
 8007872:	eef0 7a40 	vmov.f32	s15, s0
 8007876:	4b79      	ldr	r3, [pc, #484]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007878:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fe32 	bl	80084ec <buffer_get_float32_auto>
 8007888:	eef0 7a40 	vmov.f32	s15, s0
 800788c:	4b73      	ldr	r3, [pc, #460]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 800788e:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8007892:	f107 030c 	add.w	r3, r7, #12
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fe27 	bl	80084ec <buffer_get_float32_auto>
 800789e:	eef0 7a40 	vmov.f32	s15, s0
 80078a2:	4b6e      	ldr	r3, [pc, #440]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80078a4:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80078a8:	f107 030c 	add.w	r3, r7, #12
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fe1c 	bl	80084ec <buffer_get_float32_auto>
 80078b4:	eef0 7a40 	vmov.f32	s15, s0
 80078b8:	4b68      	ldr	r3, [pc, #416]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80078ba:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 80078be:	f107 030c 	add.w	r3, r7, #12
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fe11 	bl	80084ec <buffer_get_float32_auto>
 80078ca:	eef0 7a40 	vmov.f32	s15, s0
 80078ce:	4b63      	ldr	r3, [pc, #396]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80078d0:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 80078d4:	f107 030c 	add.w	r3, r7, #12
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fe06 	bl	80084ec <buffer_get_float32_auto>
 80078e0:	eef0 7a40 	vmov.f32	s15, s0
 80078e4:	4b5d      	ldr	r3, [pc, #372]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80078e6:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fdfb 	bl	80084ec <buffer_get_float32_auto>
 80078f6:	eef0 7a40 	vmov.f32	s15, s0
 80078fa:	4b58      	ldr	r3, [pc, #352]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80078fc:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fdf0 	bl	80084ec <buffer_get_float32_auto>
 800790c:	eef0 7a40 	vmov.f32	s15, s0
 8007910:	4b52      	ldr	r3, [pc, #328]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007912:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8007916:	f107 030c 	add.w	r3, r7, #12
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fde5 	bl	80084ec <buffer_get_float32_auto>
 8007922:	eef0 7a40 	vmov.f32	s15, s0
 8007926:	4b4d      	ldr	r3, [pc, #308]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007928:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 800792c:	f107 030c 	add.w	r3, r7, #12
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fd45 	bl	80083c2 <buffer_get_int32>
 8007938:	4603      	mov	r3, r0
 800793a:	4a48      	ldr	r2, [pc, #288]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 800793c:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8007940:	f107 030c 	add.w	r3, r7, #12
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fdd0 	bl	80084ec <buffer_get_float32_auto>
 800794c:	eef0 7a40 	vmov.f32	s15, s0
 8007950:	4b42      	ldr	r3, [pc, #264]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007952:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8007956:	f107 030c 	add.w	r3, r7, #12
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fdc5 	bl	80084ec <buffer_get_float32_auto>
 8007962:	eef0 7a40 	vmov.f32	s15, s0
 8007966:	4b3d      	ldr	r3, [pc, #244]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007968:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fd55 	bl	8008422 <buffer_get_uint32>
 8007978:	4603      	mov	r3, r0
 800797a:	4a38      	ldr	r2, [pc, #224]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 800797c:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	60fa      	str	r2, [r7, #12]
 8007986:	461a      	mov	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4413      	add	r3, r2
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007990:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	60fa      	str	r2, [r7, #12]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	4b2b      	ldr	r3, [pc, #172]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80079ae:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	60fa      	str	r2, [r7, #12]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4413      	add	r3, r2
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	4b26      	ldr	r3, [pc, #152]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80079c2:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	60fa      	str	r2, [r7, #12]
 80079cc:	461a      	mov	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	4b21      	ldr	r3, [pc, #132]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80079d8:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fd82 	bl	80084ec <buffer_get_float32_auto>
 80079e8:	eef0 7a40 	vmov.f32	s15, s0
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 80079ee:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fd77 	bl	80084ec <buffer_get_float32_auto>
 80079fe:	eef0 7a40 	vmov.f32	s15, s0
 8007a02:	4b16      	ldr	r3, [pc, #88]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007a04:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8007a08:	f107 030c 	add.w	r3, r7, #12
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fd6c 	bl	80084ec <buffer_get_float32_auto>
 8007a14:	eef0 7a40 	vmov.f32	s15, s0
 8007a18:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007a1a:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8007a1e:	f107 030c 	add.w	r3, r7, #12
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fd61 	bl	80084ec <buffer_get_float32_auto>
 8007a2a:	eef0 7a40 	vmov.f32	s15, s0
 8007a2e:	4b0b      	ldr	r3, [pc, #44]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007a30:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	60fa      	str	r2, [r7, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007a44:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <bldc_interface_process_packet+0x10a0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 83ff 	beq.w	8008250 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 8007a52:	4b03      	ldr	r3, [pc, #12]	; (8007a60 <bldc_interface_process_packet+0x10a0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4801      	ldr	r0, [pc, #4]	; (8007a5c <bldc_interface_process_packet+0x109c>)
 8007a58:	4798      	blx	r3
		}
		break;
 8007a5a:	e3f9      	b.n	8008250 <bldc_interface_process_packet+0x1890>
 8007a5c:	200005b4 	.word	0x200005b4
 8007a60:	20000848 	.word	0x20000848

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcd7 	bl	8008422 <buffer_get_uint32>
 8007a74:	4603      	mov	r3, r0
 8007a76:	4aba      	ldr	r2, [pc, #744]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007a78:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	60fa      	str	r2, [r7, #12]
 8007a80:	461a      	mov	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	4bb5      	ldr	r3, [pc, #724]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007a8a:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8007a8c:	f107 030c 	add.w	r3, r7, #12
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fcc5 	bl	8008422 <buffer_get_uint32>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4ab1      	ldr	r2, [pc, #708]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007a9c:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8007a9e:	f107 030c 	add.w	r3, r7, #12
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fd21 	bl	80084ec <buffer_get_float32_auto>
 8007aaa:	eef0 7a40 	vmov.f32	s15, s0
 8007aae:	4bac      	ldr	r3, [pc, #688]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007ab0:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	60fa      	str	r2, [r7, #12]
 8007aba:	461a      	mov	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2301      	movne	r3, #1
 8007ac8:	2300      	moveq	r3, #0
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4ba4      	ldr	r3, [pc, #656]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007ace:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8007ad0:	f107 030c 	add.w	r3, r7, #12
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fc50 	bl	800837c <buffer_get_uint16>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	4b9f      	ldr	r3, [pc, #636]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007ae2:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	1c5a      	adds	r2, r3, #1
 8007ae8:	60fa      	str	r2, [r7, #12]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	4b9b      	ldr	r3, [pc, #620]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007af4:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	60fa      	str	r2, [r7, #12]
 8007afc:	461a      	mov	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	4b96      	ldr	r3, [pc, #600]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b06:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	60fa      	str	r2, [r7, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4413      	add	r3, r2
 8007b14:	781a      	ldrb	r2, [r3, #0]
 8007b16:	4b92      	ldr	r3, [pc, #584]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b18:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8007b1a:	f107 030c 	add.w	r3, r7, #12
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 fce3 	bl	80084ec <buffer_get_float32_auto>
 8007b26:	eef0 7a40 	vmov.f32	s15, s0
 8007b2a:	4b8d      	ldr	r3, [pc, #564]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b2c:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fcd8 	bl	80084ec <buffer_get_float32_auto>
 8007b3c:	eef0 7a40 	vmov.f32	s15, s0
 8007b40:	4b87      	ldr	r3, [pc, #540]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b42:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8007b46:	f107 030c 	add.w	r3, r7, #12
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fccd 	bl	80084ec <buffer_get_float32_auto>
 8007b52:	eef0 7a40 	vmov.f32	s15, s0
 8007b56:	4b82      	ldr	r3, [pc, #520]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b58:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8007b5c:	f107 030c 	add.w	r3, r7, #12
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fcc2 	bl	80084ec <buffer_get_float32_auto>
 8007b68:	eef0 7a40 	vmov.f32	s15, s0
 8007b6c:	4b7c      	ldr	r3, [pc, #496]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b6e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8007b72:	f107 030c 	add.w	r3, r7, #12
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fcb7 	bl	80084ec <buffer_get_float32_auto>
 8007b7e:	eef0 7a40 	vmov.f32	s15, s0
 8007b82:	4b77      	ldr	r3, [pc, #476]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007b84:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	60fa      	str	r2, [r7, #12]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf14      	ite	ne
 8007b9a:	2301      	movne	r3, #1
 8007b9c:	2300      	moveq	r3, #0
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	4b6f      	ldr	r3, [pc, #444]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	60fa      	str	r2, [r7, #12]
 8007bac:	461a      	mov	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bf14      	ite	ne
 8007bb8:	2301      	movne	r3, #1
 8007bba:	2300      	moveq	r3, #0
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	4b68      	ldr	r3, [pc, #416]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8007bc4:	f107 030c 	add.w	r3, r7, #12
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fc8e 	bl	80084ec <buffer_get_float32_auto>
 8007bd0:	eef0 7a40 	vmov.f32	s15, s0
 8007bd4:	4b62      	ldr	r3, [pc, #392]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007bd6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007bda:	f107 030c 	add.w	r3, r7, #12
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fc83 	bl	80084ec <buffer_get_float32_auto>
 8007be6:	eef0 7a40 	vmov.f32	s15, s0
 8007bea:	4b5d      	ldr	r3, [pc, #372]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007bec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	60fa      	str	r2, [r7, #12]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	4b58      	ldr	r3, [pc, #352]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fc6e 	bl	80084ec <buffer_get_float32_auto>
 8007c10:	eef0 7a40 	vmov.f32	s15, s0
 8007c14:	4b52      	ldr	r3, [pc, #328]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c16:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fc63 	bl	80084ec <buffer_get_float32_auto>
 8007c26:	eef0 7a40 	vmov.f32	s15, s0
 8007c2a:	4b4d      	ldr	r3, [pc, #308]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c2c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	60fa      	str	r2, [r7, #12]
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	4b45      	ldr	r3, [pc, #276]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	60fa      	str	r2, [r7, #12]
 8007c54:	461a      	mov	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4413      	add	r3, r2
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007c6c:	f107 030c 	add.w	r3, r7, #12
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc3a 	bl	80084ec <buffer_get_float32_auto>
 8007c78:	eef0 7a40 	vmov.f32	s15, s0
 8007c7c:	4b38      	ldr	r3, [pc, #224]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c7e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	60fa      	str	r2, [r7, #12]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	781a      	ldrb	r2, [r3, #0]
 8007c90:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007c92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fc25 	bl	80084ec <buffer_get_float32_auto>
 8007ca2:	eef0 7a40 	vmov.f32	s15, s0
 8007ca6:	4b2e      	ldr	r3, [pc, #184]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007ca8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8007cac:	f107 030c 	add.w	r3, r7, #12
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fc1a 	bl	80084ec <buffer_get_float32_auto>
 8007cb8:	eef0 7a40 	vmov.f32	s15, s0
 8007cbc:	4b28      	ldr	r3, [pc, #160]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007cbe:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8007cc2:	f107 030c 	add.w	r3, r7, #12
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc0f 	bl	80084ec <buffer_get_float32_auto>
 8007cce:	eef0 7a40 	vmov.f32	s15, s0
 8007cd2:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007cd4:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8007cd8:	f107 030c 	add.w	r3, r7, #12
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fc04 	bl	80084ec <buffer_get_float32_auto>
 8007ce4:	eef0 7a40 	vmov.f32	s15, s0
 8007ce8:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007cea:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8007cee:	f107 030c 	add.w	r3, r7, #12
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fbf9 	bl	80084ec <buffer_get_float32_auto>
 8007cfa:	eef0 7a40 	vmov.f32	s15, s0
 8007cfe:	4b18      	ldr	r3, [pc, #96]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007d00:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8007d04:	f107 030c 	add.w	r3, r7, #12
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fbee 	bl	80084ec <buffer_get_float32_auto>
 8007d10:	eef0 7a40 	vmov.f32	s15, s0
 8007d14:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007d16:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	60fa      	str	r2, [r7, #12]
 8007d20:	461a      	mov	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4413      	add	r3, r2
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf14      	ite	ne
 8007d2c:	2301      	movne	r3, #1
 8007d2e:	2300      	moveq	r3, #0
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007d34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	60fa      	str	r2, [r7, #12]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	bf14      	ite	ne
 8007d4a:	2301      	movne	r3, #1
 8007d4c:	2300      	moveq	r3, #0
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <bldc_interface_process_packet+0x13a0>)
 8007d52:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	60fa      	str	r2, [r7, #12]
 8007d5c:	e002      	b.n	8007d64 <bldc_interface_process_packet+0x13a4>
 8007d5e:	bf00      	nop
 8007d60:	2000073c 	.word	0x2000073c
 8007d64:	461a      	mov	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4413      	add	r3, r2
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	4bb7      	ldr	r3, [pc, #732]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007d78:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	60fa      	str	r2, [r7, #12]
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4413      	add	r3, r2
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bf14      	ite	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	2300      	moveq	r3, #0
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	4baf      	ldr	r3, [pc, #700]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007d96:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	60fa      	str	r2, [r7, #12]
 8007da0:	461a      	mov	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	4ba8      	ldr	r3, [pc, #672]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	60fa      	str	r2, [r7, #12]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bf14      	ite	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	2300      	moveq	r3, #0
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	4ba0      	ldr	r3, [pc, #640]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007dd2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8007dd6:	f107 030c 	add.w	r3, r7, #12
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fb85 	bl	80084ec <buffer_get_float32_auto>
 8007de2:	eef0 7a40 	vmov.f32	s15, s0
 8007de6:	4b9b      	ldr	r3, [pc, #620]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007de8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007dec:	f107 030c 	add.w	r3, r7, #12
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fb7a 	bl	80084ec <buffer_get_float32_auto>
 8007df8:	eef0 7a40 	vmov.f32	s15, s0
 8007dfc:	4b95      	ldr	r3, [pc, #596]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007dfe:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	60fa      	str	r2, [r7, #12]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	4b90      	ldr	r3, [pc, #576]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fb65 	bl	80084ec <buffer_get_float32_auto>
 8007e22:	eef0 7a40 	vmov.f32	s15, s0
 8007e26:	4b8b      	ldr	r3, [pc, #556]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e28:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fb5a 	bl	80084ec <buffer_get_float32_auto>
 8007e38:	eef0 7a40 	vmov.f32	s15, s0
 8007e3c:	4b85      	ldr	r3, [pc, #532]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e3e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	60fa      	str	r2, [r7, #12]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bf14      	ite	ne
 8007e54:	2301      	movne	r3, #1
 8007e56:	2300      	moveq	r3, #0
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b7e      	ldr	r3, [pc, #504]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e5c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	60fa      	str	r2, [r7, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bf14      	ite	ne
 8007e72:	2301      	movne	r3, #1
 8007e74:	2300      	moveq	r3, #0
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	4b76      	ldr	r3, [pc, #472]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e7a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007e7e:	f107 030c 	add.w	r3, r7, #12
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb31 	bl	80084ec <buffer_get_float32_auto>
 8007e8a:	eef0 7a40 	vmov.f32	s15, s0
 8007e8e:	4b71      	ldr	r3, [pc, #452]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007e90:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 8007e94:	f107 030c 	add.w	r3, r7, #12
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fa6e 	bl	800837c <buffer_get_uint16>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4b6b      	ldr	r3, [pc, #428]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007ea6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8007eaa:	f107 030c 	add.w	r3, r7, #12
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fab6 	bl	8008422 <buffer_get_uint32>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	4a66      	ldr	r2, [pc, #408]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007eba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	60fa      	str	r2, [r7, #12]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4413      	add	r3, r2
 8007eca:	781a      	ldrb	r2, [r3, #0]
 8007ecc:	4b61      	ldr	r3, [pc, #388]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007ece:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007ed2:	f107 030c 	add.w	r3, r7, #12
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fb07 	bl	80084ec <buffer_get_float32_auto>
 8007ede:	eef0 7a40 	vmov.f32	s15, s0
 8007ee2:	4b5c      	ldr	r3, [pc, #368]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007ee4:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007ee8:	f107 030c 	add.w	r3, r7, #12
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fafc 	bl	80084ec <buffer_get_float32_auto>
 8007ef4:	eef0 7a40 	vmov.f32	s15, s0
 8007ef8:	4b56      	ldr	r3, [pc, #344]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007efa:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007efe:	f107 030c 	add.w	r3, r7, #12
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 faf1 	bl	80084ec <buffer_get_float32_auto>
 8007f0a:	eef0 7a40 	vmov.f32	s15, s0
 8007f0e:	4b51      	ldr	r3, [pc, #324]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f10:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fae6 	bl	80084ec <buffer_get_float32_auto>
 8007f20:	eef0 7a40 	vmov.f32	s15, s0
 8007f24:	4b4b      	ldr	r3, [pc, #300]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f26:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8007f2a:	f107 030c 	add.w	r3, r7, #12
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fadb 	bl	80084ec <buffer_get_float32_auto>
 8007f36:	eef0 7a40 	vmov.f32	s15, s0
 8007f3a:	4b46      	ldr	r3, [pc, #280]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f3c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fad0 	bl	80084ec <buffer_get_float32_auto>
 8007f4c:	eef0 7a40 	vmov.f32	s15, s0
 8007f50:	4b40      	ldr	r3, [pc, #256]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f52:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	60fa      	str	r2, [r7, #12]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	781a      	ldrb	r2, [r3, #0]
 8007f64:	4b3b      	ldr	r3, [pc, #236]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f66:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	60fa      	str	r2, [r7, #12]
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bf14      	ite	ne
 8007f7c:	2301      	movne	r3, #1
 8007f7e:	2300      	moveq	r3, #0
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	4b34      	ldr	r3, [pc, #208]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007f84:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	60fa      	str	r2, [r7, #12]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bf14      	ite	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	2300      	moveq	r3, #0
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	4b2c      	ldr	r3, [pc, #176]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007fa2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa9d 	bl	80084ec <buffer_get_float32_auto>
 8007fb2:	eef0 7a40 	vmov.f32	s15, s0
 8007fb6:	4b27      	ldr	r3, [pc, #156]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007fb8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	60fa      	str	r2, [r7, #12]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	4b22      	ldr	r3, [pc, #136]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007fcc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	60fa      	str	r2, [r7, #12]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4413      	add	r3, r2
 8007fdc:	781a      	ldrb	r2, [r3, #0]
 8007fde:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007fe0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	60fa      	str	r2, [r7, #12]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4413      	add	r3, r2
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	4b18      	ldr	r3, [pc, #96]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8007ff4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	60fa      	str	r2, [r7, #12]
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4413      	add	r3, r2
 8008004:	781a      	ldrb	r2, [r3, #0]
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8008008:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	60fa      	str	r2, [r7, #12]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <bldc_interface_process_packet+0x1694>)
 800801c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	60fa      	str	r2, [r7, #12]
 8008026:	461a      	mov	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <bldc_interface_process_packet+0x1694>)
 8008030:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	441a      	add	r2, r3
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <bldc_interface_process_packet+0x1694>)
 800803e:	33c6      	adds	r3, #198	; 0xc6
 8008040:	8811      	ldrh	r1, [r2, #0]
 8008042:	7892      	ldrb	r2, [r2, #2]
 8008044:	8019      	strh	r1, [r3, #0]
 8008046:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	3303      	adds	r3, #3
 800804c:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	e002      	b.n	8008058 <bldc_interface_process_packet+0x1698>
 8008052:	bf00      	nop
 8008054:	2000073c 	.word	0x2000073c
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	60fa      	str	r2, [r7, #12]
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	2301      	movne	r3, #1
 800806a:	2300      	moveq	r3, #0
 800806c:	b2da      	uxtb	r2, r3
 800806e:	4b81      	ldr	r3, [pc, #516]	; (8008274 <bldc_interface_process_packet+0x18b4>)
 8008070:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 8008074:	4b80      	ldr	r3, [pc, #512]	; (8008278 <bldc_interface_process_packet+0x18b8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 80eb 	beq.w	8008254 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 800807e:	4b7e      	ldr	r3, [pc, #504]	; (8008278 <bldc_interface_process_packet+0x18b8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	487c      	ldr	r0, [pc, #496]	; (8008274 <bldc_interface_process_packet+0x18b4>)
 8008084:	4798      	blx	r3
		}
		break;
 8008086:	e0e5      	b.n	8008254 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 800808c:	f107 030c 	add.w	r3, r7, #12
 8008090:	4619      	mov	r1, r3
 8008092:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 800827c <bldc_interface_process_packet+0x18bc>
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa0e 	bl	80084b8 <buffer_get_float32>
 800809c:	eef0 7a40 	vmov.f32	s15, s0
 80080a0:	4b77      	ldr	r3, [pc, #476]	; (8008280 <bldc_interface_process_packet+0x18c0>)
 80080a2:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 80080a6:	f107 030c 	add.w	r3, r7, #12
 80080aa:	4619      	mov	r1, r3
 80080ac:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800827c <bldc_interface_process_packet+0x18bc>
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa01 	bl	80084b8 <buffer_get_float32>
 80080b6:	eef0 7a40 	vmov.f32	s15, s0
 80080ba:	4b72      	ldr	r3, [pc, #456]	; (8008284 <bldc_interface_process_packet+0x18c4>)
 80080bc:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	e00f      	b.n	80080e6 <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	60fa      	str	r2, [r7, #12]
 80080cc:	461a      	mov	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	b259      	sxtb	r1, r3
 80080d6:	4a6c      	ldr	r2, [pc, #432]	; (8008288 <bldc_interface_process_packet+0x18c8>)
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	4413      	add	r3, r2
 80080dc:	460a      	mov	r2, r1
 80080de:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	3301      	adds	r3, #1
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	2b07      	cmp	r3, #7
 80080ea:	ddec      	ble.n	80080c6 <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	60fa      	str	r2, [r7, #12]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b25a      	sxtb	r2, r3
 80080fc:	4b63      	ldr	r3, [pc, #396]	; (800828c <bldc_interface_process_packet+0x18cc>)
 80080fe:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8008100:	4b63      	ldr	r3, [pc, #396]	; (8008290 <bldc_interface_process_packet+0x18d0>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80a7 	beq.w	8008258 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 800810a:	4b61      	ldr	r3, [pc, #388]	; (8008290 <bldc_interface_process_packet+0x18d0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a5c      	ldr	r2, [pc, #368]	; (8008280 <bldc_interface_process_packet+0x18c0>)
 8008110:	edd2 7a00 	vldr	s15, [r2]
 8008114:	4a5b      	ldr	r2, [pc, #364]	; (8008284 <bldc_interface_process_packet+0x18c4>)
 8008116:	ed92 7a00 	vldr	s14, [r2]
 800811a:	4a5c      	ldr	r2, [pc, #368]	; (800828c <bldc_interface_process_packet+0x18cc>)
 800811c:	f992 2000 	ldrsb.w	r2, [r2]
 8008120:	4611      	mov	r1, r2
 8008122:	4859      	ldr	r0, [pc, #356]	; (8008288 <bldc_interface_process_packet+0x18c8>)
 8008124:	eef0 0a47 	vmov.f32	s1, s14
 8008128:	eeb0 0a67 	vmov.f32	s0, s15
 800812c:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 800812e:	e093      	b.n	8008258 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8008134:	f107 030c 	add.w	r3, r7, #12
 8008138:	4619      	mov	r1, r3
 800813a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8008294 <bldc_interface_process_packet+0x18d4>
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f9ba 	bl	80084b8 <buffer_get_float32>
 8008144:	eef0 7a40 	vmov.f32	s15, s0
 8008148:	4b53      	ldr	r3, [pc, #332]	; (8008298 <bldc_interface_process_packet+0x18d8>)
 800814a:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 800814e:	f107 030c 	add.w	r3, r7, #12
 8008152:	4619      	mov	r1, r3
 8008154:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8008294 <bldc_interface_process_packet+0x18d4>
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f9ad 	bl	80084b8 <buffer_get_float32>
 800815e:	eef0 7a40 	vmov.f32	s15, s0
 8008162:	4b4e      	ldr	r3, [pc, #312]	; (800829c <bldc_interface_process_packet+0x18dc>)
 8008164:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8008168:	4b4d      	ldr	r3, [pc, #308]	; (80082a0 <bldc_interface_process_packet+0x18e0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d075      	beq.n	800825c <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8008170:	4b4b      	ldr	r3, [pc, #300]	; (80082a0 <bldc_interface_process_packet+0x18e0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a48      	ldr	r2, [pc, #288]	; (8008298 <bldc_interface_process_packet+0x18d8>)
 8008176:	edd2 7a00 	vldr	s15, [r2]
 800817a:	4a48      	ldr	r2, [pc, #288]	; (800829c <bldc_interface_process_packet+0x18dc>)
 800817c:	ed92 7a00 	vldr	s14, [r2]
 8008180:	eef0 0a47 	vmov.f32	s1, s14
 8008184:	eeb0 0a67 	vmov.f32	s0, s15
 8008188:	4798      	blx	r3
		}
		break;
 800818a:	e067      	b.n	800825c <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4619      	mov	r1, r3
 8008196:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8008294 <bldc_interface_process_packet+0x18d4>
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f98c 	bl	80084b8 <buffer_get_float32>
 80081a0:	eef0 7a40 	vmov.f32	s15, s0
 80081a4:	4b3f      	ldr	r3, [pc, #252]	; (80082a4 <bldc_interface_process_packet+0x18e4>)
 80081a6:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 80081aa:	f107 030c 	add.w	r3, r7, #12
 80081ae:	4619      	mov	r1, r3
 80081b0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8008294 <bldc_interface_process_packet+0x18d4>
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f97f 	bl	80084b8 <buffer_get_float32>
 80081ba:	eef0 7a40 	vmov.f32	s15, s0
 80081be:	4b3a      	ldr	r3, [pc, #232]	; (80082a8 <bldc_interface_process_packet+0x18e8>)
 80081c0:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 80081c4:	4b39      	ldr	r3, [pc, #228]	; (80082ac <bldc_interface_process_packet+0x18ec>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d049      	beq.n	8008260 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 80081cc:	4b37      	ldr	r3, [pc, #220]	; (80082ac <bldc_interface_process_packet+0x18ec>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a34      	ldr	r2, [pc, #208]	; (80082a4 <bldc_interface_process_packet+0x18e4>)
 80081d2:	edd2 7a00 	vldr	s15, [r2]
 80081d6:	4a34      	ldr	r2, [pc, #208]	; (80082a8 <bldc_interface_process_packet+0x18e8>)
 80081d8:	ed92 7a00 	vldr	s14, [r2]
 80081dc:	eef0 0a47 	vmov.f32	s1, s14
 80081e0:	eeb0 0a67 	vmov.f32	s0, s15
 80081e4:	4798      	blx	r3
		}
		break;
 80081e6:	e03b      	b.n	8008260 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 80081ec:	f107 030c 	add.w	r3, r7, #12
 80081f0:	4619      	mov	r1, r3
 80081f2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8008294 <bldc_interface_process_packet+0x18d4>
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f95e 	bl	80084b8 <buffer_get_float32>
 80081fc:	eef0 7a40 	vmov.f32	s15, s0
 8008200:	4b2b      	ldr	r3, [pc, #172]	; (80082b0 <bldc_interface_process_packet+0x18f0>)
 8008202:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8008206:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <bldc_interface_process_packet+0x18f4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d02a      	beq.n	8008264 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 800820e:	4b29      	ldr	r3, [pc, #164]	; (80082b4 <bldc_interface_process_packet+0x18f4>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a27      	ldr	r2, [pc, #156]	; (80082b0 <bldc_interface_process_packet+0x18f0>)
 8008214:	edd2 7a00 	vldr	s15, [r2]
 8008218:	eeb0 0a67 	vmov.f32	s0, s15
 800821c:	4798      	blx	r3
		}
		break;
 800821e:	e021      	b.n	8008264 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8008220:	4b25      	ldr	r3, [pc, #148]	; (80082b8 <bldc_interface_process_packet+0x18f8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d01f      	beq.n	8008268 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 8008228:	4b23      	ldr	r3, [pc, #140]	; (80082b8 <bldc_interface_process_packet+0x18f8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4798      	blx	r3
		}
		break;
 800822e:	e01b      	b.n	8008268 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8008230:	4b22      	ldr	r3, [pc, #136]	; (80082bc <bldc_interface_process_packet+0x18fc>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d019      	beq.n	800826c <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 8008238:	4b20      	ldr	r3, [pc, #128]	; (80082bc <bldc_interface_process_packet+0x18fc>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4798      	blx	r3
		}
		break;
 800823e:	e015      	b.n	800826c <bldc_interface_process_packet+0x18ac>
		return;
 8008240:	bf00      	nop
 8008242:	e014      	b.n	800826e <bldc_interface_process_packet+0x18ae>

	default:
		break;
 8008244:	bf00      	nop
 8008246:	e012      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008248:	bf00      	nop
 800824a:	e010      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 800824c:	bf00      	nop
 800824e:	e00e      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008250:	bf00      	nop
 8008252:	e00c      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008254:	bf00      	nop
 8008256:	e00a      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008258:	bf00      	nop
 800825a:	e008      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 800825c:	bf00      	nop
 800825e:	e006      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008260:	bf00      	nop
 8008262:	e004      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008264:	bf00      	nop
 8008266:	e002      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 8008268:	bf00      	nop
 800826a:	e000      	b.n	800826e <bldc_interface_process_packet+0x18ae>
		break;
 800826c:	bf00      	nop
	}
}
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	2000073c 	.word	0x2000073c
 8008278:	2000084c 	.word	0x2000084c
 800827c:	447a0000 	.word	0x447a0000
 8008280:	20000808 	.word	0x20000808
 8008284:	2000080c 	.word	0x2000080c
 8008288:	20000810 	.word	0x20000810
 800828c:	20000818 	.word	0x20000818
 8008290:	20000850 	.word	0x20000850
 8008294:	49742400 	.word	0x49742400
 8008298:	2000081c 	.word	0x2000081c
 800829c:	20000820 	.word	0x20000820
 80082a0:	20000854 	.word	0x20000854
 80082a4:	20000824 	.word	0x20000824
 80082a8:	20000828 	.word	0x20000828
 80082ac:	20000858 	.word	0x20000858
 80082b0:	2000082c 	.word	0x2000082c
 80082b4:	2000085c 	.word	0x2000085c
 80082b8:	20000860 	.word	0x20000860
 80082bc:	20000864 	.word	0x20000864

080082c0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	1618      	asrs	r0, r3, #24
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	1c59      	adds	r1, r3, #1
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6011      	str	r1, [r2, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	b2c2      	uxtb	r2, r0
 80082e2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	1418      	asrs	r0, r3, #16
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	1c59      	adds	r1, r3, #1
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6011      	str	r1, [r2, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	b2c2      	uxtb	r2, r0
 80082fa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1218      	asrs	r0, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6011      	str	r1, [r2, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	b2c2      	uxtb	r2, r0
 8008312:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	1c59      	adds	r1, r3, #1
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6011      	str	r1, [r2, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4413      	add	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
}
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	461a      	mov	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	440b      	add	r3, r1
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800835e:	4313      	orrs	r3, r2
 8008360:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	1c9a      	adds	r2, r3, #2
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	601a      	str	r2, [r3, #0]
	return res;
 800836c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3301      	adds	r3, #1
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	440b      	add	r3, r1
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b21b      	sxth	r3, r3
 80083a8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	1c9a      	adds	r2, r3, #2
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	601a      	str	r2, [r3, #0]
	return res;
 80083b4:	89fb      	ldrh	r3, [r7, #14]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4413      	add	r3, r2
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3301      	adds	r3, #1
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	440b      	add	r3, r1
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80083e8:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3302      	adds	r3, #2
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	440b      	add	r3, r1
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 80083f8:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	3203      	adds	r2, #3
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	440a      	add	r2, r1
 8008404:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8008406:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008408:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	1d1a      	adds	r2, r3, #4
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	601a      	str	r2, [r3, #0]
	return res;
 8008414:	68fb      	ldr	r3, [r7, #12]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4413      	add	r3, r2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3301      	adds	r3, #1
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	440b      	add	r3, r1
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008448:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3302      	adds	r3, #2
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	440b      	add	r3, r1
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8008458:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	3203      	adds	r2, #3
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	440a      	add	r2, r1
 8008464:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	601a      	str	r2, [r3, #0]
	return res;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	ed87 0a02 	vstr	s0, [r7, #8]
 800848e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8008490:	6879      	ldr	r1, [r7, #4]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f7ff ff4f 	bl	8008336 <buffer_get_int16>
 8008498:	4603      	mov	r3, r0
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80084a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80084aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80084ae:	eeb0 0a67 	vmov.f32	s0, s15
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80084c4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f7ff ff7a 	bl	80083c2 <buffer_get_int32>
 80084ce:	ee07 0a90 	vmov	s15, r0
 80084d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80084d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80084da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80084de:	eef0 7a66 	vmov.f32	s15, s13
}
 80084e2:	eeb0 0a67 	vmov.f32	s0, s15
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff ff92 	bl	8008422 <buffer_get_uint32>
 80084fe:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	0ddb      	lsrs	r3, r3, #23
 8008504:	b2db      	uxtb	r3, r3
 8008506:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800850e:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	bf14      	ite	ne
 800851a:	2301      	movne	r3, #1
 800851c:	2300      	moveq	r3, #0
 800851e:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d102      	bne.n	8008532 <buffer_get_float32_auto+0x46>
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d021      	beq.n	8008576 <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	ee07 3a90 	vmov	s15, r3
 8008538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853c:	ee17 0a90 	vmov	r0, s15
 8008540:	f7f8 f802 	bl	8000548 <__aeabi_f2d>
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <buffer_get_float32_auto+0xb4>)
 800854a:	f7f8 f97f 	bl	800084c <__aeabi_ddiv>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <buffer_get_float32_auto+0xb8>)
 800855c:	f7f7 fe96 	bl	800028c <__adddf3>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f7f8 fb3e 	bl	8000be8 <__aeabi_d2f>
 800856c:	4603      	mov	r3, r0
 800856e:	61bb      	str	r3, [r7, #24]
		e -= 126;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3b7e      	subs	r3, #126	; 0x7e
 8008574:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 800857c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008580:	eef1 7a67 	vneg.f32	s15, s15
 8008584:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8008588:	69f8      	ldr	r0, [r7, #28]
 800858a:	ed97 0a06 	vldr	s0, [r7, #24]
 800858e:	f00d fdaf 	bl	80160f0 <ldexpf>
 8008592:	eef0 7a40 	vmov.f32	s15, s0
}
 8008596:	eeb0 0a67 	vmov.f32	s0, s15
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	41700000 	.word	0x41700000
 80085a4:	3fe00000 	.word	0x3fe00000

080085a8 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e016      	b.n	80085ea <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80085bc:	897b      	ldrh	r3, [r7, #10]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	4619      	mov	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	607a      	str	r2, [r7, #4]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	404b      	eors	r3, r1
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4a0b      	ldr	r2, [pc, #44]	; (8008600 <crc16+0x58>)
 80085d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d6:	b21a      	sxth	r2, r3
 80085d8:	897b      	ldrh	r3, [r7, #10]
 80085da:	021b      	lsls	r3, r3, #8
 80085dc:	b21b      	sxth	r3, r3
 80085de:	4053      	eors	r3, r2
 80085e0:	b21b      	sxth	r3, r3
 80085e2:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d3e4      	bcc.n	80085bc <crc16+0x14>
	}
	return cksum;
 80085f2:	897b      	ldrh	r3, [r7, #10]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	0801ab3c 	.word	0x0801ab3c

08008604 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b08e      	sub	sp, #56	; 0x38
 8008608:	af00      	add	r7, sp, #0
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
 8008614:	4613      	mov	r3, r2
 8008616:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b06      	cmp	r3, #6
 800861c:	d82b      	bhi.n	8008676 <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	61ba      	str	r2, [r7, #24]
 8008628:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800862c:	4413      	add	r3, r2
 800862e:	221e      	movs	r2, #30
 8008630:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	61ba      	str	r2, [r7, #24]
 800863a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800863e:	4413      	add	r3, r2
 8008640:	7bba      	ldrb	r2, [r7, #14]
 8008642:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 8008646:	f107 0210 	add.w	r2, r7, #16
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	4413      	add	r3, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	68b9      	ldr	r1, [r7, #8]
 8008652:	4618      	mov	r0, r3
 8008654:	f00c febc 	bl	80153d0 <memcpy>
		ind += len;
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	f107 0210 	add.w	r2, r7, #16
 800866e:	4872      	ldr	r0, [pc, #456]	; (8008838 <comm_can_send_buffer+0x234>)
 8008670:	f7fa fd6c 	bl	800314c <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 8008674:	e0dc      	b.n	8008830 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 8008676:	2300      	movs	r3, #0
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 800867a:	2300      	movs	r3, #0
 800867c:	633b      	str	r3, [r7, #48]	; 0x30
 800867e:	e03d      	b.n	80086fc <comm_can_send_buffer+0xf8>
			if (i > 255) {
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	2bff      	cmp	r3, #255	; 0xff
 8008684:	d83f      	bhi.n	8008706 <comm_can_send_buffer+0x102>
			end_a = i + 7;
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	3307      	adds	r3, #7
 800868a:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 800868c:	2307      	movs	r3, #7
 800868e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	b2db      	uxtb	r3, r3
 8008696:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	3307      	adds	r3, #7
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d30b      	bcc.n	80086ba <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 80086a2:	f107 0310 	add.w	r3, r7, #16
 80086a6:	3301      	adds	r3, #1
 80086a8:	68b9      	ldr	r1, [r7, #8]
 80086aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ac:	4411      	add	r1, r2
 80086ae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80086b2:	4618      	mov	r0, r3
 80086b4:	f00c fe8c 	bl	80153d0 <memcpy>
 80086b8:	e011      	b.n	80086de <comm_can_send_buffer+0xda>
				send_len = len - i;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 80086c8:	f107 0310 	add.w	r3, r7, #16
 80086cc:	3301      	adds	r3, #1
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d2:	4411      	add	r1, r2
 80086d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80086d8:	4618      	mov	r0, r3
 80086da:	f00c fe79 	bl	80153d0 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 80086e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086e8:	3301      	adds	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f107 0210 	add.w	r2, r7, #16
 80086f0:	4851      	ldr	r0, [pc, #324]	; (8008838 <comm_can_send_buffer+0x234>)
 80086f2:	f7fa fd2b 	bl	800314c <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	3307      	adds	r3, #7
 80086fa:	633b      	str	r3, [r7, #48]	; 0x30
 80086fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d3bd      	bcc.n	8008680 <comm_can_send_buffer+0x7c>
 8008704:	e000      	b.n	8008708 <comm_can_send_buffer+0x104>
				break;
 8008706:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	62bb      	str	r3, [r7, #40]	; 0x28
 800870c:	e03b      	b.n	8008786 <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800870e:	2306      	movs	r3, #6
 8008710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b2db      	uxtb	r3, r3
 800871a:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	b2db      	uxtb	r3, r3
 8008720:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	3306      	adds	r3, #6
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d30b      	bcc.n	8008744 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800872c:	f107 0310 	add.w	r3, r7, #16
 8008730:	3302      	adds	r3, #2
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008736:	4411      	add	r1, r2
 8008738:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800873c:	4618      	mov	r0, r3
 800873e:	f00c fe47 	bl	80153d0 <memcpy>
 8008742:	e011      	b.n	8008768 <comm_can_send_buffer+0x164>
				send_len = len - i;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	b2db      	uxtb	r3, r3
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 8008752:	f107 0310 	add.w	r3, r7, #16
 8008756:	3302      	adds	r3, #2
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875c:	4411      	add	r1, r2
 800875e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008762:	4618      	mov	r0, r3
 8008764:	f00c fe34 	bl	80153d0 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800876e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008772:	3302      	adds	r3, #2
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f107 0210 	add.w	r2, r7, #16
 800877a:	482f      	ldr	r0, [pc, #188]	; (8008838 <comm_can_send_buffer+0x234>)
 800877c:	f7fa fce6 	bl	800314c <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	3306      	adds	r3, #6
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
 8008786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	429a      	cmp	r2, r3
 800878c:	d3bf      	bcc.n	800870e <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 8008792:	6a3b      	ldr	r3, [r7, #32]
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	623a      	str	r2, [r7, #32]
 8008798:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800879c:	4413      	add	r3, r2
 800879e:	221e      	movs	r2, #30
 80087a0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	623a      	str	r2, [r7, #32]
 80087aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80087ae:	4413      	add	r3, r2
 80087b0:	7bba      	ldrb	r2, [r7, #14]
 80087b2:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	0a19      	lsrs	r1, r3, #8
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	623a      	str	r2, [r7, #32]
 80087c0:	b2ca      	uxtb	r2, r1
 80087c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80087c6:	440b      	add	r3, r1
 80087c8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	623a      	str	r2, [r7, #32]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80087da:	440b      	add	r3, r1
 80087dc:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	68b8      	ldr	r0, [r7, #8]
 80087e4:	f7ff fee0 	bl	80085a8 <crc16>
 80087e8:	4603      	mov	r3, r0
 80087ea:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 80087ec:	8bfb      	ldrh	r3, [r7, #30]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	b299      	uxth	r1, r3
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	623a      	str	r2, [r7, #32]
 80087f8:	b2ca      	uxtb	r2, r1
 80087fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80087fe:	440b      	add	r3, r1
 8008800:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	623a      	str	r2, [r7, #32]
 800880a:	8bfa      	ldrh	r2, [r7, #30]
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008812:	440b      	add	r3, r1
 8008814:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan1, controller_id |
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
					((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan1, controller_id |
 8008824:	b2db      	uxtb	r3, r3
 8008826:	f107 0210 	add.w	r2, r7, #16
 800882a:	4803      	ldr	r0, [pc, #12]	; (8008838 <comm_can_send_buffer+0x234>)
 800882c:	f7fa fc8e 	bl	800314c <CAN_TxMsgEID>
}
 8008830:	bf00      	nop
 8008832:	3738      	adds	r7, #56	; 0x38
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20006c94 	.word	0x20006c94
 800883c:	00000000 	.word	0x00000000

08008840 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	ed87 0a00 	vstr	s0, [r7]
 800884c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 8008852:	6838      	ldr	r0, [r7, #0]
 8008854:	f7f7 fe78 	bl	8000548 <__aeabi_f2d>
 8008858:	a310      	add	r3, pc, #64	; (adr r3, 800889c <comm_can_set_duty+0x5c>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fecb 	bl	80005f8 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	f7f8 f975 	bl	8000b58 <__aeabi_d2iz>
 800886e:	4601      	mov	r1, r0
 8008870:	f107 020c 	add.w	r2, r7, #12
 8008874:	f107 0308 	add.w	r3, r7, #8
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fd21 	bl	80082c0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 800887e:	79f9      	ldrb	r1, [r7, #7]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f107 0208 	add.w	r2, r7, #8
 8008888:	4803      	ldr	r0, [pc, #12]	; (8008898 <comm_can_set_duty+0x58>)
 800888a:	f7fa fc5f 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20006c94 	.word	0x20006c94
 800889c:	00000000 	.word	0x00000000
 80088a0:	40f86a00 	.word	0x40f86a00

080088a4 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	ed87 0a00 	vstr	s0, [r7]
 80088b0:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 80088b6:	6838      	ldr	r0, [r7, #0]
 80088b8:	f7f7 fe46 	bl	8000548 <__aeabi_f2d>
 80088bc:	f04f 0200 	mov.w	r2, #0
 80088c0:	4b0f      	ldr	r3, [pc, #60]	; (8008900 <comm_can_set_current+0x5c>)
 80088c2:	f7f7 fe99 	bl	80005f8 <__aeabi_dmul>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f8 f943 	bl	8000b58 <__aeabi_d2iz>
 80088d2:	4601      	mov	r1, r0
 80088d4:	f107 020c 	add.w	r2, r7, #12
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fcef 	bl	80082c0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f107 0208 	add.w	r2, r7, #8
 80088f0:	4804      	ldr	r0, [pc, #16]	; (8008904 <comm_can_set_current+0x60>)
 80088f2:	f7fa fc2b 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	408f4000 	.word	0x408f4000
 8008904:	20006c94 	.word	0x20006c94

08008908 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	ed87 0a00 	vstr	s0, [r7]
 8008914:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800891a:	edd7 7a00 	vldr	s15, [r7]
 800891e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008922:	f107 020c 	add.w	r2, r7, #12
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	ee17 1a90 	vmov	r1, s15
 800892e:	4618      	mov	r0, r3
 8008930:	f7ff fcc6 	bl	80082c0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f107 0208 	add.w	r2, r7, #8
 8008942:	4803      	ldr	r0, [pc, #12]	; (8008950 <comm_can_set_rpm+0x48>)
 8008944:	f7fa fc02 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20006c94 	.word	0x20006c94

08008954 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 8008954:	b5b0      	push	{r4, r5, r7, lr}
 8008956:	b090      	sub	sp, #64	; 0x40
 8008958:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;

	Vescmsg *rxmsg_tmp;
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 800895e:	e0dd      	b.n	8008b1c <decode_VESC+0x1c8>
		Vescmsg rxmsg = *rxmsg_tmp;
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	1d3c      	adds	r4, r7, #4
 8008964:	461d      	mov	r5, r3
 8008966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800896a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800896c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	6023      	str	r3, [r4, #0]

		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b04      	cmp	r3, #4
 8008976:	f040 80c6 	bne.w	8008b06 <decode_VESC+0x1b2>
			uint8_t id = rxmsg.Rxmsg.ExtId & 0xFF;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			if (id == 255 || id == RNS_TO_VESC) {
 8008988:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800898c:	2bff      	cmp	r3, #255	; 0xff
 800898e:	d004      	beq.n	800899a <decode_VESC+0x46>
 8008990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008994:	2b1e      	cmp	r3, #30
 8008996:	f040 80b6 	bne.w	8008b06 <decode_VESC+0x1b2>
				switch (cmd) {
 800899a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800899e:	3b05      	subs	r3, #5
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	f200 80b2 	bhi.w	8008b0a <decode_VESC+0x1b6>
 80089a6:	a201      	add	r2, pc, #4	; (adr r2, 80089ac <decode_VESC+0x58>)
 80089a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089d9 	.word	0x080089d9
 80089b4:	08008a0f 	.word	0x08008a0f
 80089b8:	08008ac7 	.word	0x08008ac7
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.Rxmsg.DLC - 1);
 80089bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089c0:	461a      	mov	r2, r3
 80089c2:	4b5c      	ldr	r3, [pc, #368]	; (8008b34 <decode_VESC+0x1e0>)
 80089c4:	18d0      	adds	r0, r2, r3
 80089c6:	1d3b      	adds	r3, r7, #4
 80089c8:	331c      	adds	r3, #28
 80089ca:	3301      	adds	r3, #1
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	3a01      	subs	r2, #1
 80089d0:	4619      	mov	r1, r3
 80089d2:	f00c fcfd 	bl	80153d0 <memcpy>
					break;
 80089d6:	e0a1      	b.n	8008b1c <decode_VESC+0x1c8>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 80089d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
					rxbuf_ind |= rxmsg.Data[1];
 80089e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80089e4:	461a      	mov	r2, r3
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	4313      	orrs	r3, r2
 80089ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f2:	f080 808c 	bcs.w	8008b0e <decode_VESC+0x1ba>
						memcpy(rx_buffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.Rxmsg.DLC - 2);
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	4a4e      	ldr	r2, [pc, #312]	; (8008b34 <decode_VESC+0x1e0>)
 80089fa:	1898      	adds	r0, r3, r2
 80089fc:	1d3b      	adds	r3, r7, #4
 80089fe:	331c      	adds	r3, #28
 8008a00:	3302      	adds	r3, #2
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	3a02      	subs	r2, #2
 8008a06:	4619      	mov	r1, r3
 8008a08:	f00c fce2 	bl	80153d0 <memcpy>
					}
					break;
 8008a0c:	e07f      	b.n	8008b0e <decode_VESC+0x1ba>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b44      	ldr	r3, [pc, #272]	; (8008b38 <decode_VESC+0x1e4>)
 8008a26:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 8008a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a32:	4413      	add	r3, r2
 8008a34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a46:	4413      	add	r3, r2
 8008a48:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
					rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a56:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	4313      	orrs	r3, r2
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c

					if (rxbuf_len > RX_BUFFER_SIZE) {
 8008a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a6e:	d850      	bhi.n	8008b12 <decode_VESC+0x1be>
						break;
					}

					crc_high = rxmsg.Data[ind++];
 8008a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a76:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					crc_low = rxmsg.Data[ind++];
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008a8e:	4413      	add	r3, r2
 8008a90:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (crc16(rx_buffer, rxbuf_len)
 8008a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a9a:	4826      	ldr	r0, [pc, #152]	; (8008b34 <decode_VESC+0x1e0>)
 8008a9c:	f7ff fd84 	bl	80085a8 <crc16>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 8008aa4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008aa8:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 8008aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008aae:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d130      	bne.n	8008b16 <decode_VESC+0x1c2>
						if(commands_send==1)
 8008ab4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d12c      	bne.n	8008b16 <decode_VESC+0x1c2>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 8008abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008abe:	481d      	ldr	r0, [pc, #116]	; (8008b34 <decode_VESC+0x1e0>)
 8008ac0:	f7fd ff7e 	bl	80069c0 <bldc_interface_process_packet>
					}
					break;
 8008ac4:	e027      	b.n	8008b16 <decode_VESC+0x1c2>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	63ba      	str	r2, [r7, #56]	; 0x38
 8008ad0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008ada:	461a      	mov	r2, r3
 8008adc:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <decode_VESC+0x1e4>)
 8008ade:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	63ba      	str	r2, [r7, #56]	; 0x38
 8008ae6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008aea:	4413      	add	r3, r2
 8008aec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008af0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					if(commands_send==1)
 8008af4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d10e      	bne.n	8008b1a <decode_VESC+0x1c6>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 8008afc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008afe:	480d      	ldr	r0, [pc, #52]	; (8008b34 <decode_VESC+0x1e0>)
 8008b00:	f7fd ff5e 	bl	80069c0 <bldc_interface_process_packet>
					break;
 8008b04:	e009      	b.n	8008b1a <decode_VESC+0x1c6>
				default:
					break;
				}
			}
 8008b06:	bf00      	nop
 8008b08:	e008      	b.n	8008b1c <decode_VESC+0x1c8>
					break;
 8008b0a:	bf00      	nop
 8008b0c:	e006      	b.n	8008b1c <decode_VESC+0x1c8>
					break;
 8008b0e:	bf00      	nop
 8008b10:	e004      	b.n	8008b1c <decode_VESC+0x1c8>
						break;
 8008b12:	bf00      	nop
 8008b14:	e002      	b.n	8008b1c <decode_VESC+0x1c8>
					break;
 8008b16:	bf00      	nop
 8008b18:	e000      	b.n	8008b1c <decode_VESC+0x1c8>
					break;
 8008b1a:	bf00      	nop
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 8008b1c:	f000 f80e 	bl	8008b3c <get_rx_frame>
 8008b20:	6378      	str	r0, [r7, #52]	; 0x34
 8008b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f47f af1b 	bne.w	8008960 <decode_VESC+0xc>
		}
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	bf00      	nop
 8008b2e:	3740      	adds	r7, #64	; 0x40
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bdb0      	pop	{r4, r5, r7, pc}
 8008b34:	20000868 	.word	0x20000868
 8008b38:	20000a68 	.word	0x20000a68

08008b3c <get_rx_frame>:

Vescmsg *get_rx_frame(void) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
	if (rx_frame_read != rx_frame_write){
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <get_rx_frame+0x4c>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <get_rx_frame+0x50>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d014      	beq.n	8008b78 <get_rx_frame+0x3c>
		Vescmsg *res = &rx_frames[rx_frame_read++];
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <get_rx_frame+0x4c>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	1c53      	adds	r3, r2, #1
 8008b54:	490c      	ldr	r1, [pc, #48]	; (8008b88 <get_rx_frame+0x4c>)
 8008b56:	600b      	str	r3, [r1, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	00db      	lsls	r3, r3, #3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4a0b      	ldr	r2, [pc, #44]	; (8008b90 <get_rx_frame+0x54>)
 8008b62:	4413      	add	r3, r2
 8008b64:	607b      	str	r3, [r7, #4]

		if (rx_frame_read == RX_FRAMES_SIZE){
 8008b66:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <get_rx_frame+0x4c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b64      	cmp	r3, #100	; 0x64
 8008b6c:	d102      	bne.n	8008b74 <get_rx_frame+0x38>
			rx_frame_read = 0;
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <get_rx_frame+0x4c>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
		}

		return res;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	e000      	b.n	8008b7a <get_rx_frame+0x3e>
	} else
		return 0;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	2000187c 	.word	0x2000187c
 8008b8c:	20001880 	.word	0x20001880
 8008b90:	20000a6c 	.word	0x20000a6c

08008b94 <set_rx_frames>:

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 8008b94:	b4b0      	push	{r4, r5, r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 8008b9c:	4b16      	ldr	r3, [pc, #88]	; (8008bf8 <set_rx_frames+0x64>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	1c53      	adds	r3, r2, #1
 8008ba2:	4915      	ldr	r1, [pc, #84]	; (8008bf8 <set_rx_frames+0x64>)
 8008ba4:	600b      	str	r3, [r1, #0]
 8008ba6:	4915      	ldr	r1, [pc, #84]	; (8008bfc <set_rx_frames+0x68>)
 8008ba8:	4613      	mov	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	4413      	add	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	18ca      	adds	r2, r1, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4614      	mov	r4, r2
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <set_rx_frames+0x64>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b64      	cmp	r3, #100	; 0x64
 8008bca:	d102      	bne.n	8008bd2 <set_rx_frames+0x3e>
		rx_frame_write = 0;
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <set_rx_frames+0x64>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	0a1b      	lsrs	r3, r3, #8
 8008bd8:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b07      	cmp	r3, #7
 8008bde:	d002      	beq.n	8008be6 <set_rx_frames+0x52>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b08      	cmp	r3, #8
 8008be4:	d101      	bne.n	8008bea <set_rx_frames+0x56>
		return 112;
 8008be6:	2370      	movs	r3, #112	; 0x70
 8008be8:	e000      	b.n	8008bec <set_rx_frames+0x58>
	else
		return 0;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bcb0      	pop	{r4, r5, r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20001880 	.word	0x20001880
 8008bfc:	20000a6c 	.word	0x20000a6c

08008c00 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	ed87 0a05 	vstr	s0, [r7, #20]
 8008c0a:	edc7 0a04 	vstr	s1, [r7, #16]
 8008c0e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008c12:	4603      	mov	r3, r0
 8008c14:	6079      	str	r1, [r7, #4]
 8008c16:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 8008c18:	4809      	ldr	r0, [pc, #36]	; (8008c40 <VESCInit+0x40>)
 8008c1a:	f7fd fec1 	bl	80069a0 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	897a      	ldrh	r2, [r7, #10]
 8008c34:	819a      	strh	r2, [r3, #12]
}
 8008c36:	bf00      	nop
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	08008cb9 	.word	0x08008cb9

08008c44 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7c1b      	ldrb	r3, [r3, #16]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d007      	beq.n	8008c6a <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	899b      	ldrh	r3, [r3, #12]
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8008cb4 <VESCStop+0x70>
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fdeb 	bl	8008840 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7c1b      	ldrb	r3, [r3, #16]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	899b      	ldrh	r3, [r3, #12]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008cb4 <VESCStop+0x70>
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff fe40 	bl	8008908 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7c1b      	ldrb	r3, [r3, #16]
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d007      	beq.n	8008ca6 <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	899b      	ldrh	r3, [r3, #12]
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008cb4 <VESCStop+0x70>
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff fdff 	bl	80088a4 <comm_can_set_current>
	}

	vesc->flags = 0;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	741a      	strb	r2, [r3, #16]
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	00000000 	.word	0x00000000

08008cb8 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
 8008cc4:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 8008cc6:	7bf8      	ldrb	r0, [r7, #15]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	68b9      	ldr	r1, [r7, #8]
 8008cce:	f7ff fc99 	bl	8008604 <comm_can_send_buffer>
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
	...

08008cdc <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008ce2:	f001 fc9d 	bl	800a620 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8008ce6:	f7f9 fd0d 	bl	8002704 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008cea:	2301      	movs	r3, #1
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	2302      	movs	r3, #2
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008cf6:	48c1      	ldr	r0, [pc, #772]	; (8008ffc <Initialize+0x320>)
 8008cf8:	f7f8 fa02 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2302      	movs	r3, #2
 8008d02:	2201      	movs	r2, #1
 8008d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d08:	48bc      	ldr	r0, [pc, #752]	; (8008ffc <Initialize+0x320>)
 8008d0a:	f7f8 f9f9 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008d0e:	2301      	movs	r3, #1
 8008d10:	9300      	str	r3, [sp, #0]
 8008d12:	2302      	movs	r3, #2
 8008d14:	2201      	movs	r2, #1
 8008d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d1a:	48b8      	ldr	r0, [pc, #736]	; (8008ffc <Initialize+0x320>)
 8008d1c:	f7f8 f9f0 	bl	8001100 <GPIOPinsInit>
	//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (SPI1_MOSI_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (UART3_Tx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008d20:	2301      	movs	r3, #1
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	2302      	movs	r3, #2
 8008d26:	2200      	movs	r2, #0
 8008d28:	2180      	movs	r1, #128	; 0x80
 8008d2a:	48b5      	ldr	r0, [pc, #724]	; (8009000 <Initialize+0x324>)
 8008d2c:	f7f8 f9e8 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008d30:	2301      	movs	r3, #1
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	2302      	movs	r3, #2
 8008d36:	2200      	movs	r2, #0
 8008d38:	2101      	movs	r1, #1
 8008d3a:	48b2      	ldr	r0, [pc, #712]	; (8009004 <Initialize+0x328>)
 8008d3c:	f7f8 f9e0 	bl	8001100 <GPIOPinsInit>

	//	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d40:	2301      	movs	r3, #1
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	2301      	movs	r3, #1
 8008d46:	2200      	movs	r2, #0
 8008d48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d4c:	48ad      	ldr	r0, [pc, #692]	; (8009004 <Initialize+0x328>)
 8008d4e:	f7f8 f9d7 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d52:	2301      	movs	r3, #1
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	2301      	movs	r3, #1
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d5e:	48a9      	ldr	r0, [pc, #676]	; (8009004 <Initialize+0x328>)
 8008d60:	f7f8 f9ce 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d64:	2301      	movs	r3, #1
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d70:	48a4      	ldr	r0, [pc, #656]	; (8009004 <Initialize+0x328>)
 8008d72:	f7f8 f9c5 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d76:	2301      	movs	r3, #1
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d82:	48a0      	ldr	r0, [pc, #640]	; (8009004 <Initialize+0x328>)
 8008d84:	f7f8 f9bc 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d88:	2301      	movs	r3, #1
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d94:	489a      	ldr	r0, [pc, #616]	; (8009000 <Initialize+0x324>)
 8008d96:	f7f8 f9b3 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2301      	movs	r3, #1
 8008da0:	2200      	movs	r2, #0
 8008da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008da6:	4896      	ldr	r0, [pc, #600]	; (8009000 <Initialize+0x324>)
 8008da8:	f7f8 f9aa 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008dac:	2301      	movs	r3, #1
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2301      	movs	r3, #1
 8008db2:	2200      	movs	r2, #0
 8008db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008db8:	4893      	ldr	r0, [pc, #588]	; (8009008 <Initialize+0x32c>)
 8008dba:	f7f8 f9a1 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008dca:	488f      	ldr	r0, [pc, #572]	; (8009008 <Initialize+0x32c>)
 8008dcc:	f7f8 f998 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008ddc:	4887      	ldr	r0, [pc, #540]	; (8008ffc <Initialize+0x320>)
 8008dde:	f7f8 f98f 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008de2:	2301      	movs	r3, #1
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2301      	movs	r3, #1
 8008de8:	2200      	movs	r2, #0
 8008dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008dee:	4887      	ldr	r0, [pc, #540]	; (800900c <Initialize+0x330>)
 8008df0:	f7f8 f986 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008df4:	2301      	movs	r3, #1
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2108      	movs	r1, #8
 8008dfe:	4882      	ldr	r0, [pc, #520]	; (8009008 <Initialize+0x32c>)
 8008e00:	f7f8 f97e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e04:	2301      	movs	r3, #1
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2110      	movs	r1, #16
 8008e0e:	487e      	ldr	r0, [pc, #504]	; (8009008 <Initialize+0x32c>)
 8008e10:	f7f8 f976 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e14:	2301      	movs	r3, #1
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2301      	movs	r3, #1
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2180      	movs	r1, #128	; 0x80
 8008e1e:	487a      	ldr	r0, [pc, #488]	; (8009008 <Initialize+0x32c>)
 8008e20:	f7f8 f96e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e24:	2301      	movs	r3, #1
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	2301      	movs	r3, #1
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2120      	movs	r1, #32
 8008e2e:	4874      	ldr	r0, [pc, #464]	; (8009000 <Initialize+0x324>)
 8008e30:	f7f8 f966 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e34:	2301      	movs	r3, #1
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2140      	movs	r1, #64	; 0x40
 8008e3e:	4870      	ldr	r0, [pc, #448]	; (8009000 <Initialize+0x324>)
 8008e40:	f7f8 f95e 	bl	8001100 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e44:	2301      	movs	r3, #1
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	2301      	movs	r3, #1
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	486b      	ldr	r0, [pc, #428]	; (8008ffc <Initialize+0x320>)
 8008e50:	f7f8 f956 	bl	8001100 <GPIOPinsInit>
	//	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e54:	2301      	movs	r3, #1
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	2301      	movs	r3, #1
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	4867      	ldr	r0, [pc, #412]	; (8008ffc <Initialize+0x320>)
 8008e60:	f7f8 f94e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e64:	2301      	movs	r3, #1
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2108      	movs	r1, #8
 8008e6e:	4863      	ldr	r0, [pc, #396]	; (8008ffc <Initialize+0x320>)
 8008e70:	f7f8 f946 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e74:	2301      	movs	r3, #1
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2301      	movs	r3, #1
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2110      	movs	r1, #16
 8008e7e:	485f      	ldr	r0, [pc, #380]	; (8008ffc <Initialize+0x320>)
 8008e80:	f7f8 f93e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008e84:	2301      	movs	r3, #1
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	2301      	movs	r3, #1
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2120      	movs	r1, #32
 8008e8e:	485b      	ldr	r0, [pc, #364]	; (8008ffc <Initialize+0x320>)
 8008e90:	f7f8 f936 	bl	8001100 <GPIOPinsInit>

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8008e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	4b5a      	ldr	r3, [pc, #360]	; (8009004 <Initialize+0x328>)
 8008e9c:	9302      	str	r3, [sp, #8]
 8008e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	4b57      	ldr	r3, [pc, #348]	; (8009004 <Initialize+0x328>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	4a56      	ldr	r2, [pc, #344]	; (8009004 <Initialize+0x328>)
 8008eac:	2101      	movs	r1, #1
 8008eae:	4858      	ldr	r0, [pc, #352]	; (8009010 <Initialize+0x334>)
 8008eb0:	f7f8 fc92 	bl	80017d8 <SHIFTREGInit>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008eb4:	2003      	movs	r0, #3
 8008eb6:	f002 fb96 	bl	800b5e6 <HAL_NVIC_SetPriorityGrouping>

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8008eba:	4b56      	ldr	r3, [pc, #344]	; (8009014 <Initialize+0x338>)
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	4956      	ldr	r1, [pc, #344]	; (8009018 <Initialize+0x33c>)
 8008ec0:	4856      	ldr	r0, [pc, #344]	; (800901c <Initialize+0x340>)
 8008ec2:	f7fa fa25 	bl	8003310 <I2CX_DMA_RX_Init>

	//Servo Driver
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9302      	str	r3, [sp, #8]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	4851      	ldr	r0, [pc, #324]	; (8009020 <Initialize+0x344>)
 8008eda:	f7fa f82d 	bl	8002f38 <CANxInit>

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 8008ede:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ee2:	4950      	ldr	r1, [pc, #320]	; (8009024 <Initialize+0x348>)
 8008ee4:	4850      	ldr	r0, [pc, #320]	; (8009028 <Initialize+0x34c>)
 8008ee6:	f7f9 ff1b 	bl	8002d20 <UARTx_DMA_Rx_Init>
	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
 8008eea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008eee:	494f      	ldr	r1, [pc, #316]	; (800902c <Initialize+0x350>)
 8008ef0:	484f      	ldr	r0, [pc, #316]	; (8009030 <Initialize+0x354>)
 8008ef2:	f7f9 ff15 	bl	8002d20 <UARTx_DMA_Rx_Init>

//	QEIInit(&htim1);
//	QEIInit(&htim4);
//	QEIInit(&htim8);

	PWMTimeBaseInit(&htim3, 2000, 35);
 8008ef6:	2223      	movs	r2, #35	; 0x23
 8008ef8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008efc:	484d      	ldr	r0, [pc, #308]	; (8009034 <Initialize+0x358>)
 8008efe:	f7f8 f9f9 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8008f02:	2301      	movs	r3, #1
 8008f04:	4a3e      	ldr	r2, [pc, #248]	; (8009000 <Initialize+0x324>)
 8008f06:	2108      	movs	r1, #8
 8008f08:	484a      	ldr	r0, [pc, #296]	; (8009034 <Initialize+0x358>)
 8008f0a:	f7f8 fad9 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 8008f0e:	2302      	movs	r3, #2
 8008f10:	4a3b      	ldr	r2, [pc, #236]	; (8009000 <Initialize+0x324>)
 8008f12:	210c      	movs	r1, #12
 8008f14:	4847      	ldr	r0, [pc, #284]	; (8009034 <Initialize+0x358>)
 8008f16:	f7f8 fad3 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 2000, 88);
 8008f1a:	2258      	movs	r2, #88	; 0x58
 8008f1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008f20:	4845      	ldr	r0, [pc, #276]	; (8009038 <Initialize+0x35c>)
 8008f22:	f7f8 f9e7 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8008f26:	2301      	movs	r3, #1
 8008f28:	4a38      	ldr	r2, [pc, #224]	; (800900c <Initialize+0x330>)
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4842      	ldr	r0, [pc, #264]	; (8009038 <Initialize+0x35c>)
 8008f2e:	f7f8 fac7 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8008f32:	2302      	movs	r3, #2
 8008f34:	4a35      	ldr	r2, [pc, #212]	; (800900c <Initialize+0x330>)
 8008f36:	2104      	movs	r1, #4
 8008f38:	483f      	ldr	r0, [pc, #252]	; (8009038 <Initialize+0x35c>)
 8008f3a:	f7f8 fac1 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8008f3e:	2304      	movs	r3, #4
 8008f40:	4a32      	ldr	r2, [pc, #200]	; (800900c <Initialize+0x330>)
 8008f42:	2108      	movs	r1, #8
 8008f44:	483c      	ldr	r0, [pc, #240]	; (8009038 <Initialize+0x35c>)
 8008f46:	f7f8 fabb 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8008f4a:	2308      	movs	r3, #8
 8008f4c:	4a2f      	ldr	r2, [pc, #188]	; (800900c <Initialize+0x330>)
 8008f4e:	210c      	movs	r1, #12
 8008f50:	4839      	ldr	r0, [pc, #228]	; (8009038 <Initialize+0x35c>)
 8008f52:	f7f8 fab5 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 2000, 4);
 8008f56:	2204      	movs	r2, #4
 8008f58:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008f5c:	4837      	ldr	r0, [pc, #220]	; (800903c <Initialize+0x360>)
 8008f5e:	f7f8 f9c9 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8008f62:	2320      	movs	r3, #32
 8008f64:	4a27      	ldr	r2, [pc, #156]	; (8009004 <Initialize+0x328>)
 8008f66:	2100      	movs	r1, #0
 8008f68:	4834      	ldr	r0, [pc, #208]	; (800903c <Initialize+0x360>)
 8008f6a:	f7f8 faa9 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8008f6e:	2340      	movs	r3, #64	; 0x40
 8008f70:	4a24      	ldr	r2, [pc, #144]	; (8009004 <Initialize+0x328>)
 8008f72:	2104      	movs	r1, #4
 8008f74:	4831      	ldr	r0, [pc, #196]	; (800903c <Initialize+0x360>)
 8008f76:	f7f8 faa3 	bl	80014c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8008f7a:	2380      	movs	r3, #128	; 0x80
 8008f7c:	9302      	str	r3, [sp, #8]
 8008f7e:	2340      	movs	r3, #64	; 0x40
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <Initialize+0x364>)
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	2300      	movs	r3, #0
 8008f88:	220c      	movs	r2, #12
 8008f8a:	492a      	ldr	r1, [pc, #168]	; (8009034 <Initialize+0x358>)
 8008f8c:	482d      	ldr	r0, [pc, #180]	; (8009044 <Initialize+0x368>)
 8008f8e:	f7f8 f82d 	bl	8000fec <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 8008f92:	2320      	movs	r3, #32
 8008f94:	9302      	str	r3, [sp, #8]
 8008f96:	2310      	movs	r3, #16
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	4b29      	ldr	r3, [pc, #164]	; (8009040 <Initialize+0x364>)
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2208      	movs	r2, #8
 8008fa2:	4924      	ldr	r1, [pc, #144]	; (8009034 <Initialize+0x358>)
 8008fa4:	4828      	ldr	r0, [pc, #160]	; (8009048 <Initialize+0x36c>)
 8008fa6:	f7f8 f821 	bl	8000fec <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8008faa:	2308      	movs	r3, #8
 8008fac:	9302      	str	r3, [sp, #8]
 8008fae:	2304      	movs	r3, #4
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	4b23      	ldr	r3, [pc, #140]	; (8009040 <Initialize+0x364>)
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	2200      	movs	r2, #0
 8008fba:	4920      	ldr	r1, [pc, #128]	; (800903c <Initialize+0x360>)
 8008fbc:	4823      	ldr	r0, [pc, #140]	; (800904c <Initialize+0x370>)
 8008fbe:	f7f8 f815 	bl	8000fec <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 8008fc2:	2302      	movs	r3, #2
 8008fc4:	9302      	str	r3, [sp, #8]
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	4b1d      	ldr	r3, [pc, #116]	; (8009040 <Initialize+0x364>)
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	491a      	ldr	r1, [pc, #104]	; (800903c <Initialize+0x360>)
 8008fd4:	481e      	ldr	r0, [pc, #120]	; (8009050 <Initialize+0x374>)
 8008fd6:	f7f8 f809 	bl	8000fec <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 8008fda:	2380      	movs	r3, #128	; 0x80
 8008fdc:	9302      	str	r3, [sp, #8]
 8008fde:	2340      	movs	r3, #64	; 0x40
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	4b1c      	ldr	r3, [pc, #112]	; (8009054 <Initialize+0x378>)
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	220c      	movs	r2, #12
 8008fea:	4913      	ldr	r1, [pc, #76]	; (8009038 <Initialize+0x35c>)
 8008fec:	481a      	ldr	r0, [pc, #104]	; (8009058 <Initialize+0x37c>)
 8008fee:	f7f7 fffd 	bl	8000fec <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8008ff2:	2320      	movs	r3, #32
 8008ff4:	9302      	str	r3, [sp, #8]
 8008ff6:	2310      	movs	r3, #16
 8008ff8:	9301      	str	r3, [sp, #4]
 8008ffa:	e02f      	b.n	800905c <Initialize+0x380>
 8008ffc:	40020800 	.word	0x40020800
 8009000:	40020400 	.word	0x40020400
 8009004:	40021000 	.word	0x40021000
 8009008:	40020c00 	.word	0x40020c00
 800900c:	40020000 	.word	0x40020000
 8009010:	20007c4c 	.word	0x20007c4c
 8009014:	00061a80 	.word	0x00061a80
 8009018:	200083fc 	.word	0x200083fc
 800901c:	20007248 	.word	0x20007248
 8009020:	20006c94 	.word	0x20006c94
 8009024:	20006218 	.word	0x20006218
 8009028:	20006810 	.word	0x20006810
 800902c:	200061b8 	.word	0x200061b8
 8009030:	20006790 	.word	0x20006790
 8009034:	20006480 	.word	0x20006480
 8009038:	20006440 	.word	0x20006440
 800903c:	2000670c 	.word	0x2000670c
 8009040:	20007c68 	.word	0x20007c68
 8009044:	200086a8 	.word	0x200086a8
 8009048:	200075d8 	.word	0x200075d8
 800904c:	200072f0 	.word	0x200072f0
 8009050:	20007d14 	.word	0x20007d14
 8009054:	20007c64 	.word	0x20007c64
 8009058:	20008584 	.word	0x20008584
 800905c:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <Initialize+0x3fc>)
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	2300      	movs	r3, #0
 8009062:	2208      	movs	r2, #8
 8009064:	491d      	ldr	r1, [pc, #116]	; (80090dc <Initialize+0x400>)
 8009066:	481e      	ldr	r0, [pc, #120]	; (80090e0 <Initialize+0x404>)
 8009068:	f7f7 ffc0 	bl	8000fec <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800906c:	2308      	movs	r3, #8
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	2304      	movs	r3, #4
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <Initialize+0x3fc>)
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	2204      	movs	r2, #4
 800907c:	4917      	ldr	r1, [pc, #92]	; (80090dc <Initialize+0x400>)
 800907e:	4819      	ldr	r0, [pc, #100]	; (80090e4 <Initialize+0x408>)
 8009080:	f7f7 ffb4 	bl	8000fec <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8009084:	2302      	movs	r3, #2
 8009086:	9302      	str	r3, [sp, #8]
 8009088:	2301      	movs	r3, #1
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <Initialize+0x3fc>)
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	4911      	ldr	r1, [pc, #68]	; (80090dc <Initialize+0x400>)
 8009096:	4814      	ldr	r0, [pc, #80]	; (80090e8 <Initialize+0x40c>)
 8009098:	f7f7 ffa8 	bl	8000fec <BDCInit>

//	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);

	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);
 800909c:	4913      	ldr	r1, [pc, #76]	; (80090ec <Initialize+0x410>)
 800909e:	206f      	movs	r0, #111	; 0x6f
 80090a0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80090f0 <Initialize+0x414>
 80090a4:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 80090a8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80090f4 <Initialize+0x418>
 80090ac:	f7ff fda8 	bl	8008c00 <VESCInit>

	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
 80090b0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2310      	movs	r3, #16
 80090b8:	4a0f      	ldr	r2, [pc, #60]	; (80090f8 <Initialize+0x41c>)
 80090ba:	4910      	ldr	r1, [pc, #64]	; (80090fc <Initialize+0x420>)
 80090bc:	4810      	ldr	r0, [pc, #64]	; (8009100 <Initialize+0x424>)
 80090be:	f7fd fbf3 	bl	80068a8 <SPIx_DMA_TX_Init>
	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80090c2:	2301      	movs	r3, #1
 80090c4:	9300      	str	r3, [sp, #0]
 80090c6:	2302      	movs	r3, #2
 80090c8:	2201      	movs	r2, #1
 80090ca:	2140      	movs	r1, #64	; 0x40
 80090cc:	480a      	ldr	r0, [pc, #40]	; (80090f8 <Initialize+0x41c>)
 80090ce:	f7f8 f817 	bl	8001100 <GPIOPinsInit>
}
 80090d2:	bf00      	nop
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20007c64 	.word	0x20007c64
 80090dc:	20006440 	.word	0x20006440
 80090e0:	20007d8c 	.word	0x20007d8c
 80090e4:	20007db0 	.word	0x20007db0
 80090e8:	20007384 	.word	0x20007384
 80090ec:	200071d4 	.word	0x200071d4
 80090f0:	3b727bb3 	.word	0x3b727bb3
 80090f4:	46f96000 	.word	0x46f96000
 80090f8:	40020000 	.word	0x40020000
 80090fc:	20008514 	.word	0x20008514
 8009100:	20008144 	.word	0x20008144

08009104 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 8009104:	b580      	push	{r7, lr}
 8009106:	af00      	add	r7, sp, #0
	//	led2 = !led2;
	HAL_CAN_IRQHandler(&hcan1);
 8009108:	4802      	ldr	r0, [pc, #8]	; (8009114 <CAN1_RX0_IRQHandler+0x10>)
 800910a:	f001 ff57 	bl	800afbc <HAL_CAN_IRQHandler>

}
 800910e:	bf00      	nop
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20006c94 	.word	0x20006c94

08009118 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 800911c:	4802      	ldr	r0, [pc, #8]	; (8009128 <CAN2_RX1_IRQHandler+0x10>)
 800911e:	f001 ff4d 	bl	800afbc <HAL_CAN_IRQHandler>

}
 8009122:	bf00      	nop
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20006c6c 	.word	0x20006c6c

0800912c <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <CAN_PROCESS+0x1a>
 800913c:	2b01      	cmp	r3, #1
 800913e:	d12f      	bne.n	80091a0 <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 8009140:	f7ff fc08 	bl	8008954 <decode_VESC>
		break;
 8009144:	e02c      	b.n	80091a0 <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 8009146:	4b18      	ldr	r3, [pc, #96]	; (80091a8 <CAN_PROCESS+0x7c>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <CAN_PROCESS+0x7c>)
 8009150:	785a      	ldrb	r2, [r3, #1]
 8009152:	4b16      	ldr	r3, [pc, #88]	; (80091ac <CAN_PROCESS+0x80>)
 8009154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 8009158:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <CAN_PROCESS+0x7c>)
 800915a:	2202      	movs	r2, #2
 800915c:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800915e:	4b12      	ldr	r3, [pc, #72]	; (80091a8 <CAN_PROCESS+0x7c>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b11      	cmp	r3, #17
 8009164:	d11b      	bne.n	800919e <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <CAN_PROCESS+0x84>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d117      	bne.n	800919e <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 800916e:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <CAN_PROCESS+0x7c>)
 8009170:	785a      	ldrb	r2, [r3, #1]
 8009172:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <CAN_PROCESS+0x80>)
 8009174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8009178:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <CAN_PROCESS+0x88>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a0b      	ldr	r2, [pc, #44]	; (80091ac <CAN_PROCESS+0x80>)
 800917e:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 8009180:	4b0c      	ldr	r3, [pc, #48]	; (80091b4 <CAN_PROCESS+0x88>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	4a09      	ldr	r2, [pc, #36]	; (80091ac <CAN_PROCESS+0x80>)
 8009186:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8009188:	4b0b      	ldr	r3, [pc, #44]	; (80091b8 <CAN_PROCESS+0x8c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a07      	ldr	r2, [pc, #28]	; (80091ac <CAN_PROCESS+0x80>)
 800918e:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <CAN_PROCESS+0x8c>)
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4a05      	ldr	r2, [pc, #20]	; (80091ac <CAN_PROCESS+0x80>)
 8009196:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 8009198:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <CAN_PROCESS+0x7c>)
 800919a:	2203      	movs	r2, #3
 800919c:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800919e:	bf00      	nop

	}

}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	2000715c 	.word	0x2000715c
 80091ac:	20007900 	.word	0x20007900
 80091b0:	20001884 	.word	0x20001884
 80091b4:	20008138 	.word	0x20008138
 80091b8:	20008288 	.word	0x20008288

080091bc <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 80091bc:	b5b0      	push	{r4, r5, r7, lr}
 80091be:	b094      	sub	sp, #80	; 0x50
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	6078      	str	r0, [r7, #4]
	//	led2 = !led2;
	uint8_t aData[8];
	PACKET_t source;
	if(hcan == &hcan1){
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4ab8      	ldr	r2, [pc, #736]	; (80094a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	f040 81af 	bne.w	800952c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 80091ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80091d2:	4ab6      	ldr	r2, [pc, #728]	; (80094ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80091d4:	2100      	movs	r1, #0
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fdb8 	bl	800ad4c <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_STD)
 80091dc:	4bb3      	ldr	r3, [pc, #716]	; (80094ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f040 819b 	bne.w	800951c <HAL_CAN_RxFifo0MsgPendingCallback+0x360>
		{
			switch(CAN1RxMessage.StdId){
 80091e6:	4bb1      	ldr	r3, [pc, #708]	; (80094ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f240 724f 	movw	r2, #1871	; 0x74f
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d028      	beq.n	8009244 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 80091f2:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 80091f6:	f080 8194 	bcs.w	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 80091fa:	f240 52cf 	movw	r2, #1487	; 0x5cf
 80091fe:	4293      	cmp	r3, r2
 8009200:	d025      	beq.n	800924e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8009202:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8009206:	f080 818c 	bcs.w	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800920a:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800920e:	4293      	cmp	r3, r2
 8009210:	f000 816c 	beq.w	80094ec <HAL_CAN_RxFifo0MsgPendingCallback+0x330>
 8009214:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
 8009218:	f080 8183 	bcs.w	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800921c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009220:	4293      	cmp	r3, r2
 8009222:	f000 8129 	beq.w	8009478 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
 8009226:	f5b3 7f74 	cmp.w	r3, #976	; 0x3d0
 800922a:	f080 817a 	bcs.w	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800922e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8009232:	4293      	cmp	r3, r2
 8009234:	f000 80f8 	beq.w	8009428 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>
 8009238:	f240 22cf 	movw	r2, #719	; 0x2cf
 800923c:	4293      	cmp	r3, r2
 800923e:	f000 8104 	beq.w	800944a <HAL_CAN_RxFifo0MsgPendingCallback+0x28e>
 8009242:	e16e      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			case 1871:
				ILI9341_PrintLine("FaulHaber Node 79 Boot Up", &ILI9341row);
 8009244:	499a      	ldr	r1, [pc, #616]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009246:	489b      	ldr	r0, [pc, #620]	; (80094b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8009248:	f7fa fdc8 	bl	8003ddc <ILI9341_PrintLine>
				break;
 800924c:	e169      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			case 1487:{
				Faul_t.can = 1;
 800924e:	4a9a      	ldr	r2, [pc, #616]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009250:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8009254:	f043 0301 	orr.w	r3, r3, #1
 8009258:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				//SDO Tx
				Faul_t.ODindex = *((uint16_t *)&aData[1]);
 800925c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009260:	3301      	adds	r3, #1
 8009262:	881a      	ldrh	r2, [r3, #0]
 8009264:	4b94      	ldr	r3, [pc, #592]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009266:	81da      	strh	r2, [r3, #14]
				Faul_t.ODsubindex = aData[3];
 8009268:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800926c:	4b92      	ldr	r3, [pc, #584]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800926e:	741a      	strb	r2, [r3, #16]

				if(aData[0] == 0x60){
 8009270:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009274:	2b60      	cmp	r3, #96	; 0x60
 8009276:	d117      	bne.n	80092a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
					//Faulhaber Response on Successful write to OD
					char temp[50];
					sprintf(temp, "%lu: SDO(tx)-WR 0x%x%x.%x", CAN1RxMessage.FilterMatchIndex, aData[2], aData[1], aData[3]);
 8009278:	4b8c      	ldr	r3, [pc, #560]	; (80094ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 800927a:	699a      	ldr	r2, [r3, #24]
 800927c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009280:	461c      	mov	r4, r3
 8009282:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009286:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800928a:	f107 0008 	add.w	r0, r7, #8
 800928e:	9101      	str	r1, [sp, #4]
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	4623      	mov	r3, r4
 8009294:	4989      	ldr	r1, [pc, #548]	; (80094bc <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 8009296:	f00c ffc9 	bl	801622c <siprintf>
					ILI9341_PrintLine(temp, &ILI9341row);
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4984      	ldr	r1, [pc, #528]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80092a0:	4618      	mov	r0, r3
 80092a2:	f7fa fd9b 	bl	8003ddc <ILI9341_PrintLine>
					}


				}
			}
			break;
 80092a6:	e13b      	b.n	8009520 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
					sprintf(temp, "%lu: SDO(tx)-RR 0x%x%x.%x", CAN1RxMessage.FilterMatchIndex, aData[2], aData[1], aData[3]);
 80092a8:	4b80      	ldr	r3, [pc, #512]	; (80094ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80092aa:	699a      	ldr	r2, [r3, #24]
 80092ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80092b0:	461c      	mov	r4, r3
 80092b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80092b6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80092ba:	f107 0008 	add.w	r0, r7, #8
 80092be:	9101      	str	r1, [sp, #4]
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	4623      	mov	r3, r4
 80092c4:	497e      	ldr	r1, [pc, #504]	; (80094c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 80092c6:	f00c ffb1 	bl	801622c <siprintf>
					ILI9341_PrintLine(temp, &ILI9341row);
 80092ca:	f107 0308 	add.w	r3, r7, #8
 80092ce:	4978      	ldr	r1, [pc, #480]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fa fd83 	bl	8003ddc <ILI9341_PrintLine>
					if(aData[0] == 0x4F){
 80092d6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80092da:	2b4f      	cmp	r3, #79	; 0x4f
 80092dc:	d107      	bne.n	80092ee <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
						Faul_t.num_valid = 1;
 80092de:	4b76      	ldr	r3, [pc, #472]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	745a      	strb	r2, [r3, #17]
						Faul_t.buffer[0] = aData[4];
 80092e4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80092e8:	4b73      	ldr	r3, [pc, #460]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092ea:	749a      	strb	r2, [r3, #18]
 80092ec:	e026      	b.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x4B){
 80092ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80092f2:	2b4b      	cmp	r3, #75	; 0x4b
 80092f4:	d107      	bne.n	8009306 <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
						Faul_t.num_valid = 2;
 80092f6:	4b70      	ldr	r3, [pc, #448]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092f8:	2202      	movs	r2, #2
 80092fa:	745a      	strb	r2, [r3, #17]
 80092fc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
						memcpy(Faul_t.buffer, &aData[4], 2);
 8009300:	4b6d      	ldr	r3, [pc, #436]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009302:	825a      	strh	r2, [r3, #18]
 8009304:	e01a      	b.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x47){
 8009306:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800930a:	2b47      	cmp	r3, #71	; 0x47
 800930c:	d10b      	bne.n	8009326 <HAL_CAN_RxFifo0MsgPendingCallback+0x16a>
						Faul_t.num_valid = 3;
 800930e:	4b6a      	ldr	r3, [pc, #424]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009310:	2203      	movs	r2, #3
 8009312:	745a      	strb	r2, [r3, #17]
						memcpy(Faul_t.buffer, &aData[4], 3);
 8009314:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009318:	3304      	adds	r3, #4
 800931a:	2203      	movs	r2, #3
 800931c:	4619      	mov	r1, r3
 800931e:	4869      	ldr	r0, [pc, #420]	; (80094c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8009320:	f00c f856 	bl	80153d0 <memcpy>
 8009324:	e00a      	b.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x43){
 8009326:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800932a:	2b43      	cmp	r3, #67	; 0x43
 800932c:	d106      	bne.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
						Faul_t.num_valid = 4;
 800932e:	4b62      	ldr	r3, [pc, #392]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009330:	2204      	movs	r2, #4
 8009332:	745a      	strb	r2, [r3, #17]
 8009334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
						memcpy(Faul_t.buffer, &aData[4], 4);
 8009336:	4a60      	ldr	r2, [pc, #384]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009338:	f8c2 3012 	str.w	r3, [r2, #18]
					switch(Faul_t.ODindex){
 800933c:	4b5e      	ldr	r3, [pc, #376]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800933e:	89db      	ldrh	r3, [r3, #14]
 8009340:	f246 027c 	movw	r2, #24700	; 0x607c
 8009344:	4293      	cmp	r3, r2
 8009346:	d029      	beq.n	800939c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 8009348:	f246 027c 	movw	r2, #24700	; 0x607c
 800934c:	4293      	cmp	r3, r2
 800934e:	f300 80e7 	bgt.w	8009520 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
 8009352:	f246 0264 	movw	r2, #24676	; 0x6064
 8009356:	4293      	cmp	r3, r2
 8009358:	d00d      	beq.n	8009376 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
 800935a:	f246 0264 	movw	r2, #24676	; 0x6064
 800935e:	4293      	cmp	r3, r2
 8009360:	f300 80de 	bgt.w	8009520 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
 8009364:	f242 3244 	movw	r2, #9028	; 0x2344
 8009368:	4293      	cmp	r3, r2
 800936a:	d02a      	beq.n	80093c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800936c:	f246 0260 	movw	r2, #24672	; 0x6060
 8009370:	4293      	cmp	r3, r2
 8009372:	d041      	beq.n	80093f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>
			break;
 8009374:	e0d4      	b.n	8009520 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
						Faul_t.pos_act = *((int *)&Faul_t.buffer);
 8009376:	4b53      	ldr	r3, [pc, #332]	; (80094c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a4f      	ldr	r2, [pc, #316]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800937c:	6053      	str	r3, [r2, #4]
						sprintf(temp, "%s = %d", varName(Faul_t.pos_act), Faul_t.pos_act);
 800937e:	4b4e      	ldr	r3, [pc, #312]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f107 0008 	add.w	r0, r7, #8
 8009386:	4a50      	ldr	r2, [pc, #320]	; (80094c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 8009388:	4950      	ldr	r1, [pc, #320]	; (80094cc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 800938a:	f00c ff4f 	bl	801622c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	4947      	ldr	r1, [pc, #284]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa fd21 	bl	8003ddc <ILI9341_PrintLine>
						break;
 800939a:	e044      	b.n	8009426 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						Faul_t.HomeOffset = *((int *)Faul_t.buffer);
 800939c:	4b49      	ldr	r3, [pc, #292]	; (80094c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a45      	ldr	r2, [pc, #276]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80093a2:	6193      	str	r3, [r2, #24]
						sprintf(temp, "%s = %d", varName(Faul_t.HomeOffset), Faul_t.HomeOffset);
 80093a4:	4b44      	ldr	r3, [pc, #272]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	f107 0008 	add.w	r0, r7, #8
 80093ac:	4a48      	ldr	r2, [pc, #288]	; (80094d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 80093ae:	4947      	ldr	r1, [pc, #284]	; (80094cc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80093b0:	f00c ff3c 	bl	801622c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	493d      	ldr	r1, [pc, #244]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fa fd0e 	bl	8003ddc <ILI9341_PrintLine>
						break;
 80093c0:	e031      	b.n	8009426 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						switch(Faul_t.ODsubindex){
 80093c2:	4b3d      	ldr	r3, [pc, #244]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80093c4:	7c1b      	ldrb	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d014      	beq.n	80093f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d12a      	bne.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
							Faul_t.velKp = *((uint32_t *)Faul_t.buffer);
 80093ce:	4b3d      	ldr	r3, [pc, #244]	; (80094c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a39      	ldr	r2, [pc, #228]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80093d4:	61d3      	str	r3, [r2, #28]
							sprintf(temp, "%s = %lu", varName(Faul_t.velKp), Faul_t.velKp);
 80093d6:	4b38      	ldr	r3, [pc, #224]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	f107 0008 	add.w	r0, r7, #8
 80093de:	4a3d      	ldr	r2, [pc, #244]	; (80094d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>)
 80093e0:	493d      	ldr	r1, [pc, #244]	; (80094d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 80093e2:	f00c ff23 	bl	801622c <siprintf>
							ILI9341_PrintLine(temp, &ILI9341row);
 80093e6:	f107 0308 	add.w	r3, r7, #8
 80093ea:	4931      	ldr	r1, [pc, #196]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fa fcf5 	bl	8003ddc <ILI9341_PrintLine>
						break;
 80093f2:	e017      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
							break;
 80093f4:	bf00      	nop
						break;
 80093f6:	e015      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
						Faul_t.modeOperation = *((int8_t *)Faul_t.buffer);
 80093f8:	4b32      	ldr	r3, [pc, #200]	; (80094c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 80093fa:	f993 2000 	ldrsb.w	r2, [r3]
 80093fe:	4b2e      	ldr	r3, [pc, #184]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009400:	f883 2020 	strb.w	r2, [r3, #32]
						sprintf(temp, "%s = %d", varName(Faul_t.modeOperation), Faul_t.modeOperation);
 8009404:	4b2c      	ldr	r3, [pc, #176]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009406:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800940a:	f107 0008 	add.w	r0, r7, #8
 800940e:	4a33      	ldr	r2, [pc, #204]	; (80094dc <HAL_CAN_RxFifo0MsgPendingCallback+0x320>)
 8009410:	492e      	ldr	r1, [pc, #184]	; (80094cc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8009412:	f00c ff0b 	bl	801622c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	4925      	ldr	r1, [pc, #148]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800941c:	4618      	mov	r0, r3
 800941e:	f7fa fcdd 	bl	8003ddc <ILI9341_PrintLine>
						break;
 8009422:	e000      	b.n	8009426 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						break;
 8009424:	bf00      	nop
			break;
 8009426:	e07b      	b.n	8009520 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>

			case 463:{
				//TxPDO1
				Faul_t.can = 1;
 8009428:	4a23      	ldr	r2, [pc, #140]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800942a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800942e:	f043 0301 	orr.w	r3, r3, #1
 8009432:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 8009436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800943a:	881a      	ldrh	r2, [r3, #0]
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800943e:	801a      	strh	r2, [r3, #0]
				ILI9341_PrintLine("TxPDO1", &ILI9341row);
 8009440:	491b      	ldr	r1, [pc, #108]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009442:	4827      	ldr	r0, [pc, #156]	; (80094e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x324>)
 8009444:	f7fa fcca 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 8009448:	e06b      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>

			case 719:{
				//TxPDO2
				Faul_t.can = 1;
 800944a:	4a1b      	ldr	r2, [pc, #108]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800944c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 8009458:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800945c:	881a      	ldrh	r2, [r3, #0]
 800945e:	4b16      	ldr	r3, [pc, #88]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009460:	801a      	strh	r2, [r3, #0]
				Faul_t.pos_act = *((int *)&aData[2]);
 8009462:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009466:	3302      	adds	r3, #2
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800946c:	6053      	str	r3, [r2, #4]
				ILI9341_PrintLine("TxPDO2", &ILI9341row);
 800946e:	4910      	ldr	r1, [pc, #64]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009470:	481c      	ldr	r0, [pc, #112]	; (80094e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>)
 8009472:	f7fa fcb3 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 8009476:	e054      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>

			case 975:{
				//TxPDO3
				Faul_t.can = 1;
 8009478:	4a0f      	ldr	r2, [pc, #60]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800947a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800947e:	f043 0301 	orr.w	r3, r3, #1
 8009482:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 8009486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800948e:	801a      	strh	r2, [r3, #0]
				Faul_t.vel_act = *((int *)&aData[2]);
 8009490:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009494:	3302      	adds	r3, #2
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a07      	ldr	r2, [pc, #28]	; (80094b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800949a:	6093      	str	r3, [r2, #8]
				ILI9341_PrintLine("TxPDO3", &ILI9341row);
 800949c:	4904      	ldr	r1, [pc, #16]	; (80094b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800949e:	4812      	ldr	r0, [pc, #72]	; (80094e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x32c>)
 80094a0:	f7fa fc9c 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 80094a4:	e03d      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 80094a6:	bf00      	nop
 80094a8:	20006c94 	.word	0x20006c94
 80094ac:	20006cbc 	.word	0x20006cbc
 80094b0:	20006f4c 	.word	0x20006f4c
 80094b4:	08019e38 	.word	0x08019e38
 80094b8:	2000819c 	.word	0x2000819c
 80094bc:	08019e54 	.word	0x08019e54
 80094c0:	08019e70 	.word	0x08019e70
 80094c4:	200081ae 	.word	0x200081ae
 80094c8:	08019e8c 	.word	0x08019e8c
 80094cc:	08019e9c 	.word	0x08019e9c
 80094d0:	08019ea4 	.word	0x08019ea4
 80094d4:	08019eb8 	.word	0x08019eb8
 80094d8:	08019ec8 	.word	0x08019ec8
 80094dc:	08019ed4 	.word	0x08019ed4
 80094e0:	08019eec 	.word	0x08019eec
 80094e4:	08019ef4 	.word	0x08019ef4
 80094e8:	08019efc 	.word	0x08019efc

			case 1231:{
				//TxPDO4
				Faul_t.can = 1;
 80094ec:	4a48      	ldr	r2, [pc, #288]	; (8009610 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 80094ee:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 80094fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094fe:	881a      	ldrh	r2, [r3, #0]
 8009500:	4b43      	ldr	r3, [pc, #268]	; (8009610 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8009502:	801a      	strh	r2, [r3, #0]
				Faul_t.tor_act = *((int *)&aData[2]);
 8009504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009508:	3302      	adds	r3, #2
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	b21a      	sxth	r2, r3
 800950e:	4b40      	ldr	r3, [pc, #256]	; (8009610 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8009510:	819a      	strh	r2, [r3, #12]
				ILI9341_PrintLine("TxPDO4", &ILI9341row);
 8009512:	4940      	ldr	r1, [pc, #256]	; (8009614 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8009514:	4840      	ldr	r0, [pc, #256]	; (8009618 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8009516:	f7fa fc61 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 800951a:	e002      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			}
		}
 800951c:	bf00      	nop
 800951e:	e000      	b.n	8009522 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			break;
 8009520:	bf00      	nop
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009522:	2102      	movs	r1, #2
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fd23 	bl	800af70 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 800952a:	e06c      	b.n	8009606 <HAL_CAN_RxFifo0MsgPendingCallback+0x44a>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800952c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009530:	4a3a      	ldr	r2, [pc, #232]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8009532:	2100      	movs	r1, #0
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fc09 	bl	800ad4c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800953a:	4b38      	ldr	r3, [pc, #224]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b04      	cmp	r3, #4
 8009540:	d118      	bne.n	8009574 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>
			vescmsg.Rxmsg = CAN2RxMessage;
 8009542:	4a37      	ldr	r2, [pc, #220]	; (8009620 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009544:	4b35      	ldr	r3, [pc, #212]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8009546:	4614      	mov	r4, r2
 8009548:	461d      	mov	r5, r3
 800954a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800954c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800954e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009556:	4b32      	ldr	r3, [pc, #200]	; (8009620 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009558:	331c      	adds	r3, #28
 800955a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800955e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009562:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009566:	482e      	ldr	r0, [pc, #184]	; (8009620 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009568:	f7ff fb14 	bl	8008b94 <set_rx_frames>
			source = VESC_PACKET;
 800956c:	2301      	movs	r3, #1
 800956e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009572:	e03f      	b.n	80095f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
			source = RNS_PACKET;
 8009574:	2300      	movs	r3, #0
 8009576:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			switch(CAN1RxMessage.StdId){
 800957a:	4b2a      	ldr	r3, [pc, #168]	; (8009624 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3b14      	subs	r3, #20
 8009580:	2b08      	cmp	r3, #8
 8009582:	d836      	bhi.n	80095f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x436>
 8009584:	a201      	add	r2, pc, #4	; (adr r2, 800958c <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095c9 	.word	0x080095c9
 8009594:	080095db 	.word	0x080095db
 8009598:	080095f3 	.word	0x080095f3
 800959c:	080095f3 	.word	0x080095f3
 80095a0:	080095f3 	.word	0x080095f3
 80095a4:	080095f3 	.word	0x080095f3
 80095a8:	080095f3 	.word	0x080095f3
 80095ac:	080095f3 	.word	0x080095f3
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 80095b0:	4b1a      	ldr	r3, [pc, #104]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095b8:	4619      	mov	r1, r3
 80095ba:	481b      	ldr	r0, [pc, #108]	; (8009628 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 80095bc:	f00b ff08 	bl	80153d0 <memcpy>
				buf2_flag = 0;
 80095c0:	4b1a      	ldr	r3, [pc, #104]	; (800962c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	701a      	strb	r2, [r3, #0]
				break;
 80095c6:	e015      	b.n	80095f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 80095c8:	4b14      	ldr	r3, [pc, #80]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80095ca:	691a      	ldr	r2, [r3, #16]
 80095cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095d0:	4619      	mov	r1, r3
 80095d2:	4817      	ldr	r0, [pc, #92]	; (8009630 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 80095d4:	f00b fefc 	bl	80153d0 <memcpy>
				break;
 80095d8:	e00c      	b.n	80095f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 80095da:	4b10      	ldr	r3, [pc, #64]	; (800961c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80095dc:	691a      	ldr	r2, [r3, #16]
 80095de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80095e2:	4619      	mov	r1, r3
 80095e4:	4813      	ldr	r0, [pc, #76]	; (8009634 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 80095e6:	f00b fef3 	bl	80153d0 <memcpy>
				buf2_flag = 1;
 80095ea:	4b10      	ldr	r3, [pc, #64]	; (800962c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 80095ec:	2201      	movs	r2, #1
 80095ee:	701a      	strb	r2, [r3, #0]
				break;
 80095f0:	e000      	b.n	80095f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				break;
 80095f2:	bf00      	nop
		CAN_PROCESS(source);
 80095f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7ff fd97 	bl	800912c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80095fe:	2110      	movs	r1, #16
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f001 fcb5 	bl	800af70 <HAL_CAN_ActivateNotification>
}
 8009606:	bf00      	nop
 8009608:	3748      	adds	r7, #72	; 0x48
 800960a:	46bd      	mov	sp, r7
 800960c:	bdb0      	pop	{r4, r5, r7, pc}
 800960e:	bf00      	nop
 8009610:	2000819c 	.word	0x2000819c
 8009614:	20006f4c 	.word	0x20006f4c
 8009618:	08019f04 	.word	0x08019f04
 800961c:	20006c28 	.word	0x20006c28
 8009620:	20007d64 	.word	0x20007d64
 8009624:	20006cbc 	.word	0x20006cbc
 8009628:	2000715c 	.word	0x2000715c
 800962c:	20001884 	.word	0x20001884
 8009630:	20008138 	.word	0x20008138
 8009634:	20008288 	.word	0x20008288

08009638 <HAL_CAN_RxFifo1MsgPendingCallback>:
//	}
//}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8009638:	b5b0      	push	{r4, r5, r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a6d      	ldr	r2, [pc, #436]	; (80097f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d16a      	bne.n	800971e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 8009648:	f107 030c 	add.w	r3, r7, #12
 800964c:	4a6b      	ldr	r2, [pc, #428]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800964e:	2101      	movs	r1, #1
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 fb7b 	bl	800ad4c <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 8009656:	4b69      	ldr	r3, [pc, #420]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	2b04      	cmp	r3, #4
 800965c:	d117      	bne.n	800968e <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800965e:	4a68      	ldr	r2, [pc, #416]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009660:	4b66      	ldr	r3, [pc, #408]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009662:	4614      	mov	r4, r2
 8009664:	461d      	mov	r5, r3
 8009666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800966a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800966e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009672:	4b63      	ldr	r3, [pc, #396]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009674:	331c      	adds	r3, #28
 8009676:	f107 020c 	add.w	r2, r7, #12
 800967a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800967e:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009682:	485f      	ldr	r0, [pc, #380]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009684:	f7ff fa86 	bl	8008b94 <set_rx_frames>
			source = VESC_PACKET;
 8009688:	2301      	movs	r3, #1
 800968a:	75fb      	strb	r3, [r7, #23]
 800968c:	e03e      	b.n	800970c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8009692:	4b5c      	ldr	r3, [pc, #368]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3b14      	subs	r3, #20
 8009698:	2b08      	cmp	r3, #8
 800969a:	d836      	bhi.n	800970a <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096c9 	.word	0x080096c9
 80096a8:	080096e1 	.word	0x080096e1
 80096ac:	080096f3 	.word	0x080096f3
 80096b0:	0800970b 	.word	0x0800970b
 80096b4:	0800970b 	.word	0x0800970b
 80096b8:	0800970b 	.word	0x0800970b
 80096bc:	0800970b 	.word	0x0800970b
 80096c0:	0800970b 	.word	0x0800970b
 80096c4:	0800970b 	.word	0x0800970b
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 80096c8:	4b4c      	ldr	r3, [pc, #304]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80096ca:	691a      	ldr	r2, [r3, #16]
 80096cc:	f107 030c 	add.w	r3, r7, #12
 80096d0:	4619      	mov	r1, r3
 80096d2:	484d      	ldr	r0, [pc, #308]	; (8009808 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 80096d4:	f00b fe7c 	bl	80153d0 <memcpy>
				buf2_flag = 0;
 80096d8:	4b4c      	ldr	r3, [pc, #304]	; (800980c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]

				break;
 80096de:	e015      	b.n	800970c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 80096e0:	4b46      	ldr	r3, [pc, #280]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80096e2:	691a      	ldr	r2, [r3, #16]
 80096e4:	f107 030c 	add.w	r3, r7, #12
 80096e8:	4619      	mov	r1, r3
 80096ea:	4849      	ldr	r0, [pc, #292]	; (8009810 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 80096ec:	f00b fe70 	bl	80153d0 <memcpy>

				break;
 80096f0:	e00c      	b.n	800970c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 80096f2:	4b42      	ldr	r3, [pc, #264]	; (80097fc <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80096f4:	691a      	ldr	r2, [r3, #16]
 80096f6:	f107 030c 	add.w	r3, r7, #12
 80096fa:	4619      	mov	r1, r3
 80096fc:	4845      	ldr	r0, [pc, #276]	; (8009814 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 80096fe:	f00b fe67 	bl	80153d0 <memcpy>
				buf2_flag = 1;
 8009702:	4b42      	ldr	r3, [pc, #264]	; (800980c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009704:	2201      	movs	r2, #1
 8009706:	701a      	strb	r2, [r3, #0]
				break;
 8009708:	e000      	b.n	800970c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 800970a:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff fd0c 	bl	800912c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009714:	2102      	movs	r1, #2
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fc2a 	bl	800af70 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800971c:	e068      	b.n	80097f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800971e:	f107 030c 	add.w	r3, r7, #12
 8009722:	4a38      	ldr	r2, [pc, #224]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009724:	2101      	movs	r1, #1
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f001 fb10 	bl	800ad4c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800972c:	4b35      	ldr	r3, [pc, #212]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	2b04      	cmp	r3, #4
 8009732:	d117      	bne.n	8009764 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 8009734:	4a32      	ldr	r2, [pc, #200]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009736:	4b33      	ldr	r3, [pc, #204]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009738:	4614      	mov	r4, r2
 800973a:	461d      	mov	r5, r3
 800973c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800973e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009740:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009748:	4b2d      	ldr	r3, [pc, #180]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800974a:	331c      	adds	r3, #28
 800974c:	f107 020c 	add.w	r2, r7, #12
 8009750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009754:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009758:	4829      	ldr	r0, [pc, #164]	; (8009800 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800975a:	f7ff fa1b 	bl	8008b94 <set_rx_frames>
			source = VESC_PACKET;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
 8009762:	e03d      	b.n	80097e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 8009764:	2300      	movs	r3, #0
 8009766:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8009768:	4b26      	ldr	r3, [pc, #152]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b14      	subs	r3, #20
 800976e:	2b08      	cmp	r3, #8
 8009770:	d835      	bhi.n	80097de <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	0800979d 	.word	0x0800979d
 800977c:	080097b5 	.word	0x080097b5
 8009780:	080097c7 	.word	0x080097c7
 8009784:	080097df 	.word	0x080097df
 8009788:	080097df 	.word	0x080097df
 800978c:	080097df 	.word	0x080097df
 8009790:	080097df 	.word	0x080097df
 8009794:	080097df 	.word	0x080097df
 8009798:	080097df 	.word	0x080097df
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 800979c:	4b19      	ldr	r3, [pc, #100]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	4619      	mov	r1, r3
 80097a6:	4818      	ldr	r0, [pc, #96]	; (8009808 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 80097a8:	f00b fe12 	bl	80153d0 <memcpy>
				buf2_flag = 0;
 80097ac:	4b17      	ldr	r3, [pc, #92]	; (800980c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	701a      	strb	r2, [r3, #0]
				break;
 80097b2:	e015      	b.n	80097e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 80097b4:	4b13      	ldr	r3, [pc, #76]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80097b6:	691a      	ldr	r2, [r3, #16]
 80097b8:	f107 030c 	add.w	r3, r7, #12
 80097bc:	4619      	mov	r1, r3
 80097be:	4814      	ldr	r0, [pc, #80]	; (8009810 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 80097c0:	f00b fe06 	bl	80153d0 <memcpy>
				break;
 80097c4:	e00c      	b.n	80097e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 80097c6:	4b0f      	ldr	r3, [pc, #60]	; (8009804 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80097c8:	691a      	ldr	r2, [r3, #16]
 80097ca:	f107 030c 	add.w	r3, r7, #12
 80097ce:	4619      	mov	r1, r3
 80097d0:	4810      	ldr	r0, [pc, #64]	; (8009814 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 80097d2:	f00b fdfd 	bl	80153d0 <memcpy>
				buf2_flag = 1;
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 80097d8:	2201      	movs	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
				break;
 80097dc:	e000      	b.n	80097e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 80097de:	bf00      	nop
		CAN_PROCESS(source);
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fca2 	bl	800912c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80097e8:	2110      	movs	r1, #16
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fbc0 	bl	800af70 <HAL_CAN_ActivateNotification>
}
 80097f0:	bf00      	nop
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bdb0      	pop	{r4, r5, r7, pc}
 80097f8:	20006c94 	.word	0x20006c94
 80097fc:	20006cbc 	.word	0x20006cbc
 8009800:	20007d64 	.word	0x20007d64
 8009804:	20006c28 	.word	0x20006c28
 8009808:	2000715c 	.word	0x2000715c
 800980c:	20001884 	.word	0x20001884
 8009810:	20008138 	.word	0x20008138
 8009814:	20008288 	.word	0x20008288

08009818 <set>:
/*********************************************/

#include "common.h"
#include "math.h"

void set(void) {
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af02      	add	r7, sp, #8

	Initialize();
 800981e:	f7ff fa5d 	bl	8008cdc <Initialize>
	PSxInitDMA(&ps4,&hi2c1);
 8009822:	490f      	ldr	r1, [pc, #60]	; (8009860 <set+0x48>)
 8009824:	480f      	ldr	r0, [pc, #60]	; (8009864 <set+0x4c>)
 8009826:	f7fc fab5 	bl	8005d94 <PSxInitDMA>
	TIMxInit(&htim6, 20000, 84);
 800982a:	2254      	movs	r2, #84	; 0x54
 800982c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8009830:	480d      	ldr	r0, [pc, #52]	; (8009868 <set+0x50>)
 8009832:	f7f8 ffd3 	bl	80027dc <TIMxInit>
//	RNS_config(&hcan1);

	ServoxInit(&servo, &htim1, IP2_PIN, TIM_CHANNEL_3);//YAW
 8009836:	2308      	movs	r3, #8
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800983e:	4a0b      	ldr	r2, [pc, #44]	; (800986c <set+0x54>)
 8009840:	490b      	ldr	r1, [pc, #44]	; (8009870 <set+0x58>)
 8009842:	480c      	ldr	r0, [pc, #48]	; (8009874 <set+0x5c>)
 8009844:	f7fc fdfa 	bl	800643c <ServoxInit>
	ServoxInit(&servo1, &htim1, IP3_PIN, TIM_CHANNEL_4);//PITCH
 8009848:	230c      	movs	r3, #12
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009850:	4a06      	ldr	r2, [pc, #24]	; (800986c <set+0x54>)
 8009852:	4907      	ldr	r1, [pc, #28]	; (8009870 <set+0x58>)
 8009854:	4808      	ldr	r0, [pc, #32]	; (8009878 <set+0x60>)
 8009856:	f7fc fdf1 	bl	800643c <ServoxInit>
}
 800985a:	bf00      	nop
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20007248 	.word	0x20007248
 8009864:	20008460 	.word	0x20008460
 8009868:	2000668c 	.word	0x2000668c
 800986c:	40021000 	.word	0x40021000
 8009870:	200066cc 	.word	0x200066cc
 8009874:	20007cc4 	.word	0x20007cc4
 8009878:	20007d3c 	.word	0x20007d3c

0800987c <jetsonHandler>:
}
void jetsonInit(UART_HandleTypeDef *huart){
	HAL_UART_Receive_DMA(huart, &jetson.header, 1);
}

void jetsonHandler(UART_HandleTypeDef* huartx){
 800987c:	b580      	push	{r7, lr}
 800987e:	b082      	sub	sp, #8
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
	if(jetson.header == 0x88 && imgproc[LAST_BYTE] == 0){
 8009884:	4b25      	ldr	r3, [pc, #148]	; (800991c <jetsonHandler+0xa0>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b88      	cmp	r3, #136	; 0x88
 800988a:	d109      	bne.n	80098a0 <jetsonHandler+0x24>
 800988c:	4b24      	ldr	r3, [pc, #144]	; (8009920 <jetsonHandler+0xa4>)
 800988e:	7b5b      	ldrb	r3, [r3, #13]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <jetsonHandler+0x24>
		HAL_UART_Receive_DMA(huartx, imgproc, TOTAL_BYTES);
 8009894:	220e      	movs	r2, #14
 8009896:	4922      	ldr	r1, [pc, #136]	; (8009920 <jetsonHandler+0xa4>)
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f007 f905 	bl	8010aa8 <HAL_UART_Receive_DMA>
 800989e:	e038      	b.n	8009912 <jetsonHandler+0x96>
	}else if(jetson.header == 0x88 && imgproc[LAST_BYTE] == 0x99){
 80098a0:	4b1e      	ldr	r3, [pc, #120]	; (800991c <jetsonHandler+0xa0>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b88      	cmp	r3, #136	; 0x88
 80098a6:	d12b      	bne.n	8009900 <jetsonHandler+0x84>
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <jetsonHandler+0xa4>)
 80098aa:	7b5b      	ldrb	r3, [r3, #13]
 80098ac:	2b99      	cmp	r3, #153	; 0x99
 80098ae:	d127      	bne.n	8009900 <jetsonHandler+0x84>
		jetson.x_pixel = *((int *)(imgproc));
 80098b0:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <jetsonHandler+0xa4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a19      	ldr	r2, [pc, #100]	; (800991c <jetsonHandler+0xa0>)
 80098b6:	6053      	str	r3, [r2, #4]
		jetson.y_pixel = *((int *)(&imgproc[4]));
 80098b8:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <jetsonHandler+0xa8>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a17      	ldr	r2, [pc, #92]	; (800991c <jetsonHandler+0xa0>)
 80098be:	6093      	str	r3, [r2, #8]
		jetson.state = imgproc[8];
 80098c0:	4b17      	ldr	r3, [pc, #92]	; (8009920 <jetsonHandler+0xa4>)
 80098c2:	7a1a      	ldrb	r2, [r3, #8]
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <jetsonHandler+0xa0>)
 80098c6:	741a      	strb	r2, [r3, #16]
		jetson.area = *((float *)(&imgproc[9]));
 80098c8:	4b17      	ldr	r3, [pc, #92]	; (8009928 <jetsonHandler+0xac>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a13      	ldr	r2, [pc, #76]	; (800991c <jetsonHandler+0xa0>)
 80098ce:	60d3      	str	r3, [r2, #12]
		imgproc[LAST_BYTE] = 0;
 80098d0:	4b13      	ldr	r3, [pc, #76]	; (8009920 <jetsonHandler+0xa4>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	735a      	strb	r2, [r3, #13]
		HAL_UART_Receive_DMA(huartx, &jetson.header, 1);
 80098d6:	2201      	movs	r2, #1
 80098d8:	4910      	ldr	r1, [pc, #64]	; (800991c <jetsonHandler+0xa0>)
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f007 f8e4 	bl	8010aa8 <HAL_UART_Receive_DMA>
		jetson.timeout = 0;
 80098e0:	4b0e      	ldr	r3, [pc, #56]	; (800991c <jetsonHandler+0xa0>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	615a      	str	r2, [r3, #20]
		led3 = !led3;
 80098e6:	4b11      	ldr	r3, [pc, #68]	; (800992c <jetsonHandler+0xb0>)
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	b25b      	sxtb	r3, r3
 80098ec:	4a0f      	ldr	r2, [pc, #60]	; (800992c <jetsonHandler+0xb0>)
 80098ee:	43db      	mvns	r3, r3
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	09db      	lsrs	r3, r3, #7
 80098f4:	b2d9      	uxtb	r1, r3
 80098f6:	7853      	ldrb	r3, [r2, #1]
 80098f8:	f361 13c7 	bfi	r3, r1, #7, #1
 80098fc:	7053      	strb	r3, [r2, #1]
 80098fe:	e008      	b.n	8009912 <jetsonHandler+0x96>
	}else{
		imgproc[LAST_BYTE] = 0;
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <jetsonHandler+0xa4>)
 8009902:	2200      	movs	r2, #0
 8009904:	735a      	strb	r2, [r3, #13]
		HAL_UART_Receive_DMA(huartx, &jetson.header, 1);
 8009906:	2201      	movs	r2, #1
 8009908:	4904      	ldr	r1, [pc, #16]	; (800991c <jetsonHandler+0xa0>)
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f007 f8cc 	bl	8010aa8 <HAL_UART_Receive_DMA>
	}
}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20008938 	.word	0x20008938
 8009920:	20008958 	.word	0x20008958
 8009924:	2000895c 	.word	0x2000895c
 8009928:	20008961 	.word	0x20008961
 800992c:	40020814 	.word	0x40020814

08009930 <tunePending>:
		{"yawDelay", &yawDelay, 0, 0},
		{"pitchDelay", &pitchDelay, 0, 0},
		{"Area", &(jetson.area), 0, 0},

};
void tunePending(UART_HandleTypeDef* huartx){
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huartx, (uint8_t *)&tuneCommand, 1);
 8009938:	2201      	movs	r2, #1
 800993a:	4904      	ldr	r1, [pc, #16]	; (800994c <tunePending+0x1c>)
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f007 f8b3 	bl	8010aa8 <HAL_UART_Receive_DMA>
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200088c0 	.word	0x200088c0

08009950 <tuneInit>:
void tuneInit(UART_HandleTypeDef* huartx){
 8009950:	b580      	push	{r7, lr}
 8009952:	b0a0      	sub	sp, #128	; 0x80
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
//[NUM_INT_TUNE][NUM_FLOAT_TUNE]
//[0x52][0x01][strlen][str...][*curValue...][min ...][max ...][0x31][0x40] format of INT
//[0x14][0x01][strlen][str...][*curValue...][minF...][maxF...][0x20][0x00] format of FLOAT

	uint8_t numVar[2] = {NUM_INT_TUNE, NUM_FLOAT_TUNE};
 8009958:	f240 731f 	movw	r3, #1823	; 0x71f
 800995c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	HAL_UART_Transmit(huartx, numVar, 2, 10);
 8009960:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8009964:	230a      	movs	r3, #10
 8009966:	2202      	movs	r2, #2
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f007 f804 	bl	8010976 <HAL_UART_Transmit>
	uint8_t sendBuf[100];
	for(int i=0; i<NUM_INT_TUNE; i++){
 800996e:	2300      	movs	r3, #0
 8009970:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009972:	e06b      	b.n	8009a4c <tuneInit+0xfc>
		sendBuf[0] = 0x52;
 8009974:	2352      	movs	r3, #82	; 0x52
 8009976:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 8009978:	2301      	movs	r3, #1
 800997a:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(TUNE_INT_LIST[i].varName);
 800997c:	4a71      	ldr	r2, [pc, #452]	; (8009b44 <tuneInit+0x1f4>)
 800997e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	4413      	add	r3, r2
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7f6 fc22 	bl	80001d0 <strlen>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		sendBuf[2] = strLen;
 8009992:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009996:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 1+1+1+strLen+4+4+4+1+1;
 8009998:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800999c:	3311      	adds	r3, #17
 800999e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 80099a2:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80099a6:	3b02      	subs	r3, #2
 80099a8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80099ac:	4413      	add	r3, r2
 80099ae:	2231      	movs	r2, #49	; 0x31
 80099b0:	f803 2c74 	strb.w	r2, [r3, #-116]
 80099b4:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80099b8:	3b01      	subs	r3, #1
 80099ba:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80099be:	4413      	add	r3, r2
 80099c0:	2240      	movs	r2, #64	; 0x40
 80099c2:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], TUNE_INT_LIST[i].varName, strLen);
 80099c6:	4a5f      	ldr	r2, [pc, #380]	; (8009b44 <tuneInit+0x1f4>)
 80099c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	4413      	add	r3, r2
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80099d4:	f107 030c 	add.w	r3, r7, #12
 80099d8:	3303      	adds	r3, #3
 80099da:	4618      	mov	r0, r3
 80099dc:	f00b fcf8 	bl	80153d0 <memcpy>
		memcpy(&sendBuf[3+strLen], TUNE_INT_LIST[i].ptr, 4);
 80099e0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80099e4:	3303      	adds	r3, #3
 80099e6:	f107 020c 	add.w	r2, r7, #12
 80099ea:	4413      	add	r3, r2
 80099ec:	4955      	ldr	r1, [pc, #340]	; (8009b44 <tuneInit+0x1f4>)
 80099ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80099f0:	0112      	lsls	r2, r2, #4
 80099f2:	440a      	add	r2, r1
 80099f4:	3204      	adds	r2, #4
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	6812      	ldr	r2, [r2, #0]
 80099fa:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &TUNE_INT_LIST[i].min, 4);
 80099fc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009a00:	3307      	adds	r3, #7
 8009a02:	f107 020c 	add.w	r2, r7, #12
 8009a06:	4413      	add	r3, r2
 8009a08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a0a:	0112      	lsls	r2, r2, #4
 8009a0c:	3208      	adds	r2, #8
 8009a0e:	494d      	ldr	r1, [pc, #308]	; (8009b44 <tuneInit+0x1f4>)
 8009a10:	440a      	add	r2, r1
 8009a12:	6812      	ldr	r2, [r2, #0]
 8009a14:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &TUNE_INT_LIST[i].max, 4);
 8009a16:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009a1a:	330b      	adds	r3, #11
 8009a1c:	f107 020c 	add.w	r2, r7, #12
 8009a20:	4413      	add	r3, r2
 8009a22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009a24:	0112      	lsls	r2, r2, #4
 8009a26:	3208      	adds	r2, #8
 8009a28:	4946      	ldr	r1, [pc, #280]	; (8009b44 <tuneInit+0x1f4>)
 8009a2a:	440a      	add	r2, r1
 8009a2c:	3204      	adds	r2, #4
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 1000);
 8009a32:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f107 010c 	add.w	r1, r7, #12
 8009a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f006 ff98 	bl	8010976 <HAL_UART_Transmit>
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a48:	3301      	adds	r3, #1
 8009a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a4e:	2b1e      	cmp	r3, #30
 8009a50:	dd90      	ble.n	8009974 <tuneInit+0x24>
	}

	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009a52:	2300      	movs	r3, #0
 8009a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a56:	e06a      	b.n	8009b2e <tuneInit+0x1de>
		sendBuf[0] = 0x14;
 8009a58:	2314      	movs	r3, #20
 8009a5a:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(TUNE_FLOAT_LIST[i].varName);
 8009a60:	4a39      	ldr	r2, [pc, #228]	; (8009b48 <tuneInit+0x1f8>)
 8009a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	4413      	add	r3, r2
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fbb0 	bl	80001d0 <strlen>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		sendBuf[2] = strLen;
 8009a76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a7a:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 3+strLen+4+4+4+1+1;
 8009a7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009a80:	3311      	adds	r3, #17
 8009a82:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 8009a86:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8009a8a:	3b02      	subs	r3, #2
 8009a8c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009a90:	4413      	add	r3, r2
 8009a92:	2220      	movs	r2, #32
 8009a94:	f803 2c74 	strb.w	r2, [r3, #-116]
 8009a98:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8009aa2:	4413      	add	r3, r2
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], TUNE_FLOAT_LIST[i].varName, strLen);
 8009aaa:	4a27      	ldr	r2, [pc, #156]	; (8009b48 <tuneInit+0x1f8>)
 8009aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	4413      	add	r3, r2
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8009ab8:	f107 030c 	add.w	r3, r7, #12
 8009abc:	3303      	adds	r3, #3
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f00b fc86 	bl	80153d0 <memcpy>
		memcpy(&sendBuf[3+strLen], TUNE_FLOAT_LIST[i].ptr, 4);
 8009ac4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ac8:	3303      	adds	r3, #3
 8009aca:	f107 020c 	add.w	r2, r7, #12
 8009ace:	4413      	add	r3, r2
 8009ad0:	491d      	ldr	r1, [pc, #116]	; (8009b48 <tuneInit+0x1f8>)
 8009ad2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009ad4:	0112      	lsls	r2, r2, #4
 8009ad6:	440a      	add	r2, r1
 8009ad8:	3204      	adds	r2, #4
 8009ada:	6812      	ldr	r2, [r2, #0]
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &TUNE_FLOAT_LIST[i].min, 4);
 8009ae0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009ae4:	3307      	adds	r3, #7
 8009ae6:	f107 020c 	add.w	r2, r7, #12
 8009aea:	4413      	add	r3, r2
 8009aec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009aee:	0112      	lsls	r2, r2, #4
 8009af0:	3208      	adds	r2, #8
 8009af2:	4915      	ldr	r1, [pc, #84]	; (8009b48 <tuneInit+0x1f8>)
 8009af4:	440a      	add	r2, r1
 8009af6:	6812      	ldr	r2, [r2, #0]
 8009af8:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &TUNE_FLOAT_LIST[i].max, 4);
 8009afa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009afe:	330b      	adds	r3, #11
 8009b00:	f107 020c 	add.w	r2, r7, #12
 8009b04:	4413      	add	r3, r2
 8009b06:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009b08:	0112      	lsls	r2, r2, #4
 8009b0a:	3208      	adds	r2, #8
 8009b0c:	490e      	ldr	r1, [pc, #56]	; (8009b48 <tuneInit+0x1f8>)
 8009b0e:	440a      	add	r2, r1
 8009b10:	3204      	adds	r2, #4
 8009b12:	6812      	ldr	r2, [r2, #0]
 8009b14:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 8009b16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	f107 010c 	add.w	r1, r7, #12
 8009b20:	2364      	movs	r3, #100	; 0x64
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f006 ff27 	bl	8010976 <HAL_UART_Transmit>
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b30:	2b06      	cmp	r3, #6
 8009b32:	dd91      	ble.n	8009a58 <tuneInit+0x108>
	}
	tunePending(huartx);
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fefb 	bl	8009930 <tunePending>
}
 8009b3a:	bf00      	nop
 8009b3c:	3780      	adds	r7, #128	; 0x80
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2000000c 	.word	0x2000000c
 8009b48:	200001fc 	.word	0x200001fc

08009b4c <tuneUpdate>:

void tuneUpdate(UART_HandleTypeDef* huartx){
 8009b4c:	b5b0      	push	{r4, r5, r7, lr}
 8009b4e:	b08a      	sub	sp, #40	; 0x28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
//[0x52][0x01][index][*curValue...][0x31][0x40] format of INT
//[0x14][0x01][index][*curValue...][0x20][0x00] format of FLOAT

	for(int i=0; i<NUM_INT_TUNE; i++){
 8009b54:	2300      	movs	r3, #0
 8009b56:	623b      	str	r3, [r7, #32]
 8009b58:	e050      	b.n	8009bfc <tuneUpdate+0xb0>
 8009b5a:	466b      	mov	r3, sp
 8009b5c:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 8009b5e:	2309      	movs	r3, #9
 8009b60:	613b      	str	r3, [r7, #16]
		uint8_t sendBuf[len];
 8009b62:	693c      	ldr	r4, [r7, #16]
 8009b64:	1e63      	subs	r3, r4, #1
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	4623      	mov	r3, r4
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f04f 0100 	mov.w	r1, #0
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	00cb      	lsls	r3, r1, #3
 8009b7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b7e:	00c2      	lsls	r2, r0, #3
 8009b80:	4623      	mov	r3, r4
 8009b82:	4618      	mov	r0, r3
 8009b84:	f04f 0100 	mov.w	r1, #0
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	00cb      	lsls	r3, r1, #3
 8009b92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009b96:	00c2      	lsls	r2, r0, #3
 8009b98:	4623      	mov	r3, r4
 8009b9a:	3307      	adds	r3, #7
 8009b9c:	08db      	lsrs	r3, r3, #3
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	ebad 0d03 	sub.w	sp, sp, r3
 8009ba4:	466b      	mov	r3, sp
 8009ba6:	3300      	adds	r3, #0
 8009ba8:	60bb      	str	r3, [r7, #8]
		sendBuf[0] = 0x52; sendBuf[1] = 0x01; sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2252      	movs	r2, #82	; 0x52
 8009bae:	701a      	strb	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	705a      	strb	r2, [r3, #1]
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	3b02      	subs	r3, #2
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	2131      	movs	r1, #49	; 0x31
 8009bbe:	54d1      	strb	r1, [r2, r3]
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	2140      	movs	r1, #64	; 0x40
 8009bc8:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], TUNE_INT_LIST[i].ptr, 4);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	3303      	adds	r3, #3
 8009bd6:	493a      	ldr	r1, [pc, #232]	; (8009cc0 <tuneUpdate+0x174>)
 8009bd8:	6a3a      	ldr	r2, [r7, #32]
 8009bda:	0112      	lsls	r2, r2, #4
 8009bdc:	440a      	add	r2, r1
 8009bde:	3204      	adds	r2, #4
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	2364      	movs	r3, #100	; 0x64
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f006 fec1 	bl	8010976 <HAL_UART_Transmit>
 8009bf4:	46ad      	mov	sp, r5
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	623b      	str	r3, [r7, #32]
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	2b1e      	cmp	r3, #30
 8009c00:	ddab      	ble.n	8009b5a <tuneUpdate+0xe>
	}

	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
 8009c06:	e050      	b.n	8009caa <tuneUpdate+0x15e>
 8009c08:	466b      	mov	r3, sp
 8009c0a:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 8009c0c:	2309      	movs	r3, #9
 8009c0e:	61fb      	str	r3, [r7, #28]
		uint8_t sendBuf[len];
 8009c10:	69fc      	ldr	r4, [r7, #28]
 8009c12:	1e63      	subs	r3, r4, #1
 8009c14:	61bb      	str	r3, [r7, #24]
 8009c16:	4623      	mov	r3, r4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f04f 0100 	mov.w	r1, #0
 8009c1e:	f04f 0200 	mov.w	r2, #0
 8009c22:	f04f 0300 	mov.w	r3, #0
 8009c26:	00cb      	lsls	r3, r1, #3
 8009c28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009c2c:	00c2      	lsls	r2, r0, #3
 8009c2e:	4623      	mov	r3, r4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f04f 0100 	mov.w	r1, #0
 8009c36:	f04f 0200 	mov.w	r2, #0
 8009c3a:	f04f 0300 	mov.w	r3, #0
 8009c3e:	00cb      	lsls	r3, r1, #3
 8009c40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009c44:	00c2      	lsls	r2, r0, #3
 8009c46:	4623      	mov	r3, r4
 8009c48:	3307      	adds	r3, #7
 8009c4a:	08db      	lsrs	r3, r3, #3
 8009c4c:	00db      	lsls	r3, r3, #3
 8009c4e:	ebad 0d03 	sub.w	sp, sp, r3
 8009c52:	466b      	mov	r3, sp
 8009c54:	3300      	adds	r3, #0
 8009c56:	617b      	str	r3, [r7, #20]
		sendBuf[0] = 0x14; sendBuf[1] = 0x01; sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2214      	movs	r2, #20
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2201      	movs	r2, #1
 8009c62:	705a      	strb	r2, [r3, #1]
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	3b02      	subs	r3, #2
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	2120      	movs	r1, #32
 8009c6c:	54d1      	strb	r1, [r2, r3]
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	2100      	movs	r1, #0
 8009c76:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], TUNE_FLOAT_LIST[i].ptr, 4);
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	3303      	adds	r3, #3
 8009c84:	490f      	ldr	r1, [pc, #60]	; (8009cc4 <tuneUpdate+0x178>)
 8009c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c88:	0112      	lsls	r2, r2, #4
 8009c8a:	440a      	add	r2, r1
 8009c8c:	3204      	adds	r2, #4
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	6812      	ldr	r2, [r2, #0]
 8009c92:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 8009c94:	6979      	ldr	r1, [r7, #20]
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	2364      	movs	r3, #100	; 0x64
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f006 fe6a 	bl	8010976 <HAL_UART_Transmit>
 8009ca2:	46ad      	mov	sp, r5
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	2b06      	cmp	r3, #6
 8009cae:	ddab      	ble.n	8009c08 <tuneUpdate+0xbc>
	}

	tunePending(huartx);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fe3d 	bl	8009930 <tunePending>
}
 8009cb6:	bf00      	nop
 8009cb8:	3728      	adds	r7, #40	; 0x28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	2000000c 	.word	0x2000000c
 8009cc4:	200001fc 	.word	0x200001fc

08009cc8 <tuneEdit>:

void tuneEdit(UART_HandleTypeDef* huartx){
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
//[0x52][0x01][index][editValue...][0x31][0x40] format of INT
//[0x14][0x01][index][editValue...][0x20][0x00] format of FLOAT
//[0x88][0x77] terminate, back to tune pending
	static uint8_t state = 0;

	switch(state){
 8009cd0:	4b47      	ldr	r3, [pc, #284]	; (8009df0 <tuneEdit+0x128>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	f200 8087 	bhi.w	8009de8 <tuneEdit+0x120>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <tuneEdit+0x18>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009cf1 	.word	0x08009cf1
 8009ce4:	08009d03 	.word	0x08009d03
 8009ce8:	08009d3f 	.word	0x08009d3f
 8009cec:	08009d81 	.word	0x08009d81
	case 0://When first received tuneCommand == 'e'
		HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	4940      	ldr	r1, [pc, #256]	; (8009df4 <tuneEdit+0x12c>)
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f006 fed7 	bl	8010aa8 <HAL_UART_Receive_DMA>
		state = 1;
 8009cfa:	4b3d      	ldr	r3, [pc, #244]	; (8009df0 <tuneEdit+0x128>)
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	701a      	strb	r2, [r3, #0]
		break;
 8009d00:	e072      	b.n	8009de8 <tuneEdit+0x120>
	case 1:
		if(tuneHeader == 0x52 || tuneHeader == 0x14 || tuneHeader == 0x88){
 8009d02:	4b3c      	ldr	r3, [pc, #240]	; (8009df4 <tuneEdit+0x12c>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b52      	cmp	r3, #82	; 0x52
 8009d08:	d007      	beq.n	8009d1a <tuneEdit+0x52>
 8009d0a:	4b3a      	ldr	r3, [pc, #232]	; (8009df4 <tuneEdit+0x12c>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b14      	cmp	r3, #20
 8009d10:	d003      	beq.n	8009d1a <tuneEdit+0x52>
 8009d12:	4b38      	ldr	r3, [pc, #224]	; (8009df4 <tuneEdit+0x12c>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b88      	cmp	r3, #136	; 0x88
 8009d18:	d108      	bne.n	8009d2c <tuneEdit+0x64>
			state = 2;
 8009d1a:	4b35      	ldr	r3, [pc, #212]	; (8009df0 <tuneEdit+0x128>)
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(huartx, &tuneHeader1, 1);
 8009d20:	2201      	movs	r2, #1
 8009d22:	4935      	ldr	r1, [pc, #212]	; (8009df8 <tuneEdit+0x130>)
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f006 febf 	bl	8010aa8 <HAL_UART_Receive_DMA>
		}
		else{
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
			state = 1;
		}
		break;
 8009d2a:	e05d      	b.n	8009de8 <tuneEdit+0x120>
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	4931      	ldr	r1, [pc, #196]	; (8009df4 <tuneEdit+0x12c>)
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f006 feb9 	bl	8010aa8 <HAL_UART_Receive_DMA>
			state = 1;
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <tuneEdit+0x128>)
 8009d38:	2201      	movs	r2, #1
 8009d3a:	701a      	strb	r2, [r3, #0]
		break;
 8009d3c:	e054      	b.n	8009de8 <tuneEdit+0x120>
	case 2:
		if(tuneHeader1 == 0x01){
 8009d3e:	4b2e      	ldr	r3, [pc, #184]	; (8009df8 <tuneEdit+0x130>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d108      	bne.n	8009d58 <tuneEdit+0x90>
			HAL_UART_Receive_DMA(huartx, tuneBuffer, 7);
 8009d46:	2207      	movs	r2, #7
 8009d48:	492c      	ldr	r1, [pc, #176]	; (8009dfc <tuneEdit+0x134>)
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f006 feac 	bl	8010aa8 <HAL_UART_Receive_DMA>
			state = 3;
 8009d50:	4b27      	ldr	r3, [pc, #156]	; (8009df0 <tuneEdit+0x128>)
 8009d52:	2203      	movs	r2, #3
 8009d54:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
			state = 1;
		}
		break;
 8009d56:	e047      	b.n	8009de8 <tuneEdit+0x120>
		else if(tuneHeader1 == 0x77){
 8009d58:	4b27      	ldr	r3, [pc, #156]	; (8009df8 <tuneEdit+0x130>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b77      	cmp	r3, #119	; 0x77
 8009d5e:	d106      	bne.n	8009d6e <tuneEdit+0xa6>
			tunePending(huartx);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff fde5 	bl	8009930 <tunePending>
			state = 0;
 8009d66:	4b22      	ldr	r3, [pc, #136]	; (8009df0 <tuneEdit+0x128>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	701a      	strb	r2, [r3, #0]
		break;
 8009d6c:	e03c      	b.n	8009de8 <tuneEdit+0x120>
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009d6e:	2201      	movs	r2, #1
 8009d70:	4920      	ldr	r1, [pc, #128]	; (8009df4 <tuneEdit+0x12c>)
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f006 fe98 	bl	8010aa8 <HAL_UART_Receive_DMA>
			state = 1;
 8009d78:	4b1d      	ldr	r3, [pc, #116]	; (8009df0 <tuneEdit+0x128>)
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	701a      	strb	r2, [r3, #0]
		break;
 8009d7e:	e033      	b.n	8009de8 <tuneEdit+0x120>
	case 3:
		if(tuneBuffer[5] == 0x31 && tuneBuffer[6] == 0x40){
 8009d80:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <tuneEdit+0x134>)
 8009d82:	795b      	ldrb	r3, [r3, #5]
 8009d84:	2b31      	cmp	r3, #49	; 0x31
 8009d86:	d10d      	bne.n	8009da4 <tuneEdit+0xdc>
 8009d88:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <tuneEdit+0x134>)
 8009d8a:	799b      	ldrb	r3, [r3, #6]
 8009d8c:	2b40      	cmp	r3, #64	; 0x40
 8009d8e:	d109      	bne.n	8009da4 <tuneEdit+0xdc>
			*((int *)(TUNE_INT_LIST[tuneBuffer[0]].ptr)) = *((int *)&tuneBuffer[1]);
 8009d90:	4a1b      	ldr	r2, [pc, #108]	; (8009e00 <tuneEdit+0x138>)
 8009d92:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <tuneEdit+0x134>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	491b      	ldr	r1, [pc, #108]	; (8009e04 <tuneEdit+0x13c>)
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6812      	ldr	r2, [r2, #0]
 8009da2:	601a      	str	r2, [r3, #0]
		}

		if(tuneBuffer[5] == 0x20 && tuneBuffer[6] == 0x00){
 8009da4:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <tuneEdit+0x134>)
 8009da6:	795b      	ldrb	r3, [r3, #5]
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d10d      	bne.n	8009dc8 <tuneEdit+0x100>
 8009dac:	4b13      	ldr	r3, [pc, #76]	; (8009dfc <tuneEdit+0x134>)
 8009dae:	799b      	ldrb	r3, [r3, #6]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d109      	bne.n	8009dc8 <tuneEdit+0x100>
			*(TUNE_FLOAT_LIST[tuneBuffer[0]].ptr) = *((float *)&tuneBuffer[1]);
 8009db4:	4a12      	ldr	r2, [pc, #72]	; (8009e00 <tuneEdit+0x138>)
 8009db6:	4b11      	ldr	r3, [pc, #68]	; (8009dfc <tuneEdit+0x134>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	4913      	ldr	r1, [pc, #76]	; (8009e08 <tuneEdit+0x140>)
 8009dbc:	011b      	lsls	r3, r3, #4
 8009dbe:	440b      	add	r3, r1
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6812      	ldr	r2, [r2, #0]
 8009dc6:	601a      	str	r2, [r3, #0]
		}
		tuneBuffer[5] = tuneBuffer[6] = 0;
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <tuneEdit+0x134>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	719a      	strb	r2, [r3, #6]
 8009dce:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <tuneEdit+0x134>)
 8009dd0:	799a      	ldrb	r2, [r3, #6]
 8009dd2:	4b0a      	ldr	r3, [pc, #40]	; (8009dfc <tuneEdit+0x134>)
 8009dd4:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4906      	ldr	r1, [pc, #24]	; (8009df4 <tuneEdit+0x12c>)
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f006 fe64 	bl	8010aa8 <HAL_UART_Receive_DMA>
		state = 1;
 8009de0:	4b03      	ldr	r3, [pc, #12]	; (8009df0 <tuneEdit+0x128>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
		break;
 8009de6:	bf00      	nop
	}
}
 8009de8:	bf00      	nop
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	20001885 	.word	0x20001885
 8009df4:	200088d4 	.word	0x200088d4
 8009df8:	2000891c 	.word	0x2000891c
 8009dfc:	200087cc 	.word	0x200087cc
 8009e00:	200087cd 	.word	0x200087cd
 8009e04:	2000000c 	.word	0x2000000c
 8009e08:	200001fc 	.word	0x200001fc

08009e0c <tuneWrite>:

uint32_t tuneWrite(uint32_t Address, uint32_t size){
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	; 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
	uint32_t success=0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 8009e1a:	f002 f893 	bl	800bf44 <HAL_FLASH_Unlock>
	uint32_t StartSector;
	if(Address == SECTOR6){
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a40      	ldr	r2, [pc, #256]	; (8009f24 <tuneWrite+0x118>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d102      	bne.n	8009e2c <tuneWrite+0x20>
		StartSector = FLASH_SECTOR_6;
 8009e26:	2306      	movs	r3, #6
 8009e28:	623b      	str	r3, [r7, #32]
 8009e2a:	e005      	b.n	8009e38 <tuneWrite+0x2c>
	}else if(Address == SECTOR7){
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a3e      	ldr	r2, [pc, #248]	; (8009f28 <tuneWrite+0x11c>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d101      	bne.n	8009e38 <tuneWrite+0x2c>
		StartSector = FLASH_SECTOR_7;
 8009e34:	2307      	movs	r3, #7
 8009e36:	623b      	str	r3, [r7, #32]
	}
	uint32_t EndSectorAddress = Address + size;
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
	uint32_t EndSector = GetSector(EndSectorAddress);
 8009e40:	6978      	ldr	r0, [r7, #20]
 8009e42:	f7f9 f9e1 	bl	8003208 <GetSector>
 8009e46:	6138      	str	r0, [r7, #16]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8009e48:	4b38      	ldr	r3, [pc, #224]	; (8009f2c <tuneWrite+0x120>)
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <tuneWrite+0x120>)
 8009e50:	2202      	movs	r2, #2
 8009e52:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 8009e54:	4a35      	ldr	r2, [pc, #212]	; (8009f2c <tuneWrite+0x120>)
 8009e56:	6a3b      	ldr	r3, [r7, #32]
 8009e58:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	3301      	adds	r3, #1
 8009e62:	4a32      	ldr	r2, [pc, #200]	; (8009f2c <tuneWrite+0x120>)
 8009e64:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8009e66:	f107 030c 	add.w	r3, r7, #12
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	482f      	ldr	r0, [pc, #188]	; (8009f2c <tuneWrite+0x120>)
 8009e6e:	f002 f9d7 	bl	800c220 <HAL_FLASHEx_Erase>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d003      	beq.n	8009e80 <tuneWrite+0x74>
	{
		return HAL_FLASH_GetError ();
 8009e78:	f002 f896 	bl	800bfa8 <HAL_FLASH_GetError>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	e04d      	b.n	8009f1c <tuneWrite+0x110>
	}
	if(Address == SECTOR6){
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a28      	ldr	r2, [pc, #160]	; (8009f24 <tuneWrite+0x118>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d120      	bne.n	8009eca <tuneWrite+0xbe>
		for(int i=0; i<NUM_INT_TUNE; i++){
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61fb      	str	r3, [r7, #28]
 8009e8c:	e019      	b.n	8009ec2 <tuneWrite+0xb6>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *((int *)(TUNE_INT_LIST[i].ptr)))==HAL_OK){
 8009e8e:	4a28      	ldr	r2, [pc, #160]	; (8009f30 <tuneWrite+0x124>)
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	011b      	lsls	r3, r3, #4
 8009e94:	4413      	add	r3, r2
 8009e96:	3304      	adds	r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	2002      	movs	r0, #2
 8009ea6:	f001 fff9 	bl	800be9c <HAL_FLASH_Program>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <tuneWrite+0xaa>
				success ++;
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
			}
			Address += 4;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3304      	adds	r3, #4
 8009eba:	607b      	str	r3, [r7, #4]
		for(int i=0; i<NUM_INT_TUNE; i++){
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	61fb      	str	r3, [r7, #28]
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	2b1e      	cmp	r3, #30
 8009ec6:	dde2      	ble.n	8009e8e <tuneWrite+0x82>
 8009ec8:	e025      	b.n	8009f16 <tuneWrite+0x10a>
		}
	}else if(Address == SECTOR7){
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a16      	ldr	r2, [pc, #88]	; (8009f28 <tuneWrite+0x11c>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d121      	bne.n	8009f16 <tuneWrite+0x10a>
		for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	61bb      	str	r3, [r7, #24]
 8009ed6:	e01b      	b.n	8009f10 <tuneWrite+0x104>
			uint32_t temp;
			memcpy(&temp, TUNE_FLOAT_LIST[i].ptr, 4);
 8009ed8:	4a16      	ldr	r2, [pc, #88]	; (8009f34 <tuneWrite+0x128>)
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	4413      	add	r3, r2
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	60bb      	str	r3, [r7, #8]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp)==HAL_OK){
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	2002      	movs	r0, #2
 8009ef4:	f001 ffd2 	bl	800be9c <HAL_FLASH_Program>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <tuneWrite+0xf8>
				success ++;
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	3301      	adds	r3, #1
 8009f02:	627b      	str	r3, [r7, #36]	; 0x24
			}
			Address += 4;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3304      	adds	r3, #4
 8009f08:	607b      	str	r3, [r7, #4]
		for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	61bb      	str	r3, [r7, #24]
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	2b06      	cmp	r3, #6
 8009f14:	dde0      	ble.n	8009ed8 <tuneWrite+0xcc>
		}
	}
	HAL_FLASH_Lock();
 8009f16:	f002 f837 	bl	800bf88 <HAL_FLASH_Lock>
	return success;
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	; 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	08040000 	.word	0x08040000
 8009f28:	08060004 	.word	0x08060004
 8009f2c:	20001888 	.word	0x20001888
 8009f30:	2000000c 	.word	0x2000000c
 8009f34:	200001fc 	.word	0x200001fc

08009f38 <tuneRead>:

void tuneRead(void){
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
	uint32_t Address = SECTOR6;
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	; (8009fa8 <tuneRead+0x70>)
 8009f40:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009f42:	2300      	movs	r3, #0
 8009f44:	60bb      	str	r3, [r7, #8]
 8009f46:	e00e      	b.n	8009f66 <tuneRead+0x2e>
		memcpy(TUNE_INT_LIST[i].ptr, (__IO uint32_t *)Address, 4);
 8009f48:	4a18      	ldr	r2, [pc, #96]	; (8009fac <tuneRead+0x74>)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	011b      	lsls	r3, r3, #4
 8009f4e:	4413      	add	r3, r2
 8009f50:	3304      	adds	r3, #4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	601a      	str	r2, [r3, #0]
		Address += 4;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b1e      	cmp	r3, #30
 8009f6a:	dded      	ble.n	8009f48 <tuneRead+0x10>
	}

	Address = SECTOR7;
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <tuneRead+0x78>)
 8009f6e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009f70:	2300      	movs	r3, #0
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e00e      	b.n	8009f94 <tuneRead+0x5c>
		memcpy(TUNE_FLOAT_LIST[i].ptr, (__IO uint32_t *)Address, 4);
 8009f76:	4a0f      	ldr	r2, [pc, #60]	; (8009fb4 <tuneRead+0x7c>)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	4413      	add	r3, r2
 8009f7e:	3304      	adds	r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	601a      	str	r2, [r3, #0]
		Address += 4;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3301      	adds	r3, #1
 8009f92:	607b      	str	r3, [r7, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b06      	cmp	r3, #6
 8009f98:	dded      	ble.n	8009f76 <tuneRead+0x3e>
	}
}
 8009f9a:	bf00      	nop
 8009f9c:	bf00      	nop
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	08040000 	.word	0x08040000
 8009fac:	2000000c 	.word	0x2000000c
 8009fb0:	08060004 	.word	0x08060004
 8009fb4:	200001fc 	.word	0x200001fc

08009fb8 <ILI9341_Init_List>:
		}
		Navi();
	}
}

void ILI9341_Init_List(void){
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af02      	add	r7, sp, #8
	ILI9341row = 5;
 8009fbe:	4b23      	ldr	r3, [pc, #140]	; (800a04c <ILI9341_Init_List+0x94>)
 8009fc0:	2205      	movs	r2, #5
 8009fc2:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	607b      	str	r3, [r7, #4]
 8009fc8:	e018      	b.n	8009ffc <ILI9341_Init_List+0x44>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdIntList[i].varName, 2);
 8009fca:	4b20      	ldr	r3, [pc, #128]	; (800a04c <ILI9341_Init_List+0x94>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4a1f      	ldr	r2, [pc, #124]	; (800a050 <ILI9341_Init_List+0x98>)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	011b      	lsls	r3, r3, #4
 8009fd6:	4413      	add	r3, r2
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	9201      	str	r2, [sp, #4]
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fe6:	2005      	movs	r0, #5
 8009fe8:	f7f9 fce0 	bl	80039ac <ILI9341_Draw_String>
		ILI9341row += 15;
 8009fec:	4b17      	ldr	r3, [pc, #92]	; (800a04c <ILI9341_Init_List+0x94>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	330f      	adds	r3, #15
 8009ff2:	4a16      	ldr	r2, [pc, #88]	; (800a04c <ILI9341_Init_List+0x94>)
 8009ff4:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	607b      	str	r3, [r7, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b07      	cmp	r3, #7
 800a000:	dde3      	ble.n	8009fca <ILI9341_Init_List+0x12>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800a002:	2300      	movs	r3, #0
 800a004:	603b      	str	r3, [r7, #0]
 800a006:	e018      	b.n	800a03a <ILI9341_Init_List+0x82>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdFloatList[i].varName, 2);
 800a008:	4b10      	ldr	r3, [pc, #64]	; (800a04c <ILI9341_Init_List+0x94>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	4a11      	ldr	r2, [pc, #68]	; (800a054 <ILI9341_Init_List+0x9c>)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	4413      	add	r3, r2
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2202      	movs	r2, #2
 800a01a:	9201      	str	r2, [sp, #4]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	2300      	movs	r3, #0
 800a020:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a024:	2005      	movs	r0, #5
 800a026:	f7f9 fcc1 	bl	80039ac <ILI9341_Draw_String>
		ILI9341row += 15;
 800a02a:	4b08      	ldr	r3, [pc, #32]	; (800a04c <ILI9341_Init_List+0x94>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	330f      	adds	r3, #15
 800a030:	4a06      	ldr	r2, [pc, #24]	; (800a04c <ILI9341_Init_List+0x94>)
 800a032:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	603b      	str	r3, [r7, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	dde3      	ble.n	800a008 <ILI9341_Init_List+0x50>
	}
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20006f4c 	.word	0x20006f4c
 800a050:	2000026c 	.word	0x2000026c
 800a054:	200002ec 	.word	0x200002ec

0800a058 <ILI9341_Update_List>:

void ILI9341_Update_List(void){
 800a058:	b580      	push	{r7, lr}
 800a05a:	b09e      	sub	sp, #120	; 0x78
 800a05c:	af02      	add	r7, sp, #8
	int updateRow=5;
 800a05e:	2305      	movs	r3, #5
 800a060:	66fb      	str	r3, [r7, #108]	; 0x6c
	char lcdData[100];
	for(int i=0; i<NUM_INT_UPDATE; i++){
 800a062:	2300      	movs	r3, #0
 800a064:	66bb      	str	r3, [r7, #104]	; 0x68
 800a066:	e01c      	b.n	800a0a2 <ILI9341_Update_List+0x4a>
		sprintf(lcdData, "%8d", *(lcdIntList[i].ptr));
 800a068:	4a25      	ldr	r2, [pc, #148]	; (800a100 <ILI9341_Update_List+0xa8>)
 800a06a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a06c:	011b      	lsls	r3, r3, #4
 800a06e:	4413      	add	r3, r2
 800a070:	3304      	adds	r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	463b      	mov	r3, r7
 800a078:	4922      	ldr	r1, [pc, #136]	; (800a104 <ILI9341_Update_List+0xac>)
 800a07a:	4618      	mov	r0, r3
 800a07c:	f00c f8d6 	bl	801622c <siprintf>
		ILI9341_Draw_String(110, updateRow, WHITE, BLACK, lcdData, 2);
 800a080:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a082:	2302      	movs	r3, #2
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	463b      	mov	r3, r7
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	2300      	movs	r3, #0
 800a08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a090:	206e      	movs	r0, #110	; 0x6e
 800a092:	f7f9 fc8b 	bl	80039ac <ILI9341_Draw_String>
		updateRow += 15;
 800a096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a098:	330f      	adds	r3, #15
 800a09a:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(int i=0; i<NUM_INT_UPDATE; i++){
 800a09c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a09e:	3301      	adds	r3, #1
 800a0a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a0a4:	2b07      	cmp	r3, #7
 800a0a6:	dddf      	ble.n	800a068 <ILI9341_Update_List+0x10>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a0ac:	e020      	b.n	800a0f0 <ILI9341_Update_List+0x98>
		sprintf(lcdData, "%8.3f", *(lcdFloatList[i].ptr));
 800a0ae:	4a16      	ldr	r2, [pc, #88]	; (800a108 <ILI9341_Update_List+0xb0>)
 800a0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	4413      	add	r3, r2
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7f6 fa43 	bl	8000548 <__aeabi_f2d>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	4910      	ldr	r1, [pc, #64]	; (800a10c <ILI9341_Update_List+0xb4>)
 800a0ca:	f00c f8af 	bl	801622c <siprintf>
		ILI9341_Draw_String(110, updateRow, WHITE, BLACK, lcdData, 2);
 800a0ce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	2300      	movs	r3, #0
 800a0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0de:	206e      	movs	r0, #110	; 0x6e
 800a0e0:	f7f9 fc64 	bl	80039ac <ILI9341_Draw_String>
		updateRow += 15;
 800a0e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0e6:	330f      	adds	r3, #15
 800a0e8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 800a0ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a0f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	dddb      	ble.n	800a0ae <ILI9341_Update_List+0x56>
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	3770      	adds	r7, #112	; 0x70
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	2000026c 	.word	0x2000026c
 800a104:	0801a250 	.word	0x0801a250
 800a108:	200002ec 	.word	0x200002ec
 800a10c:	0801a254 	.word	0x0801a254

0800a110 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800a114:	4802      	ldr	r0, [pc, #8]	; (800a120 <DMA1_Stream0_IRQHandler+0x10>)
 800a116:	f001 fc3d 	bl	800b994 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800a11a:	bf00      	nop
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	200083fc 	.word	0x200083fc

0800a124 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800a128:	4802      	ldr	r0, [pc, #8]	; (800a134 <DMA1_Stream3_IRQHandler+0x10>)
 800a12a:	f001 fc33 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a12e:	bf00      	nop
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20006d5c 	.word	0x20006d5c

0800a138 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800a13c:	4802      	ldr	r0, [pc, #8]	; (800a148 <DMA1_Stream2_IRQHandler+0x10>)
 800a13e:	f001 fc29 	bl	800b994 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800a142:	bf00      	nop
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	200061b8 	.word	0x200061b8

0800a14c <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800a150:	4802      	ldr	r0, [pc, #8]	; (800a15c <DMA1_Stream1_IRQHandler+0x10>)
 800a152:	f001 fc1f 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a156:	bf00      	nop
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	200062fc 	.word	0x200062fc

0800a160 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800a164:	4802      	ldr	r0, [pc, #8]	; (800a170 <DMA1_Stream4_IRQHandler+0x10>)
 800a166:	f001 fc15 	bl	800b994 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800a16a:	bf00      	nop
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20006970 	.word	0x20006970

0800a174 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a178:	4802      	ldr	r0, [pc, #8]	; (800a184 <DMA1_Stream5_IRQHandler+0x10>)
 800a17a:	f001 fc0b 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a17e:	bf00      	nop
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20006218 	.word	0x20006218

0800a188 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a18c:	4802      	ldr	r0, [pc, #8]	; (800a198 <DMA1_Stream6_IRQHandler+0x10>)
 800a18e:	f001 fc01 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a192:	bf00      	nop
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20006504 	.word	0x20006504

0800a19c <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800a1a0:	4802      	ldr	r0, [pc, #8]	; (800a1ac <DMA1_Stream7_IRQHandler+0x10>)
 800a1a2:	f001 fbf7 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a1a6:	bf00      	nop
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	200069d0 	.word	0x200069d0

0800a1b0 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 800a1b4:	4802      	ldr	r0, [pc, #8]	; (800a1c0 <DMA2_Stream0_IRQHandler+0x10>)
 800a1b6:	f001 fbed 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a1ba:	bf00      	nop
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20006b68 	.word	0x20006b68

0800a1c4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800a1c8:	4802      	ldr	r0, [pc, #8]	; (800a1d4 <DMA2_Stream1_IRQHandler+0x10>)
 800a1ca:	f001 fbe3 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a1ce:	bf00      	nop
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20006a78 	.word	0x20006a78

0800a1d8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800a1dc:	4802      	ldr	r0, [pc, #8]	; (800a1e8 <DMA2_Stream2_IRQHandler+0x10>)
 800a1de:	f001 fbd9 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a1e2:	bf00      	nop
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	2000839c 	.word	0x2000839c

0800a1ec <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800a1f0:	4802      	ldr	r0, [pc, #8]	; (800a1fc <DMA2_Stream3_IRQHandler+0x10>)
 800a1f2:	f001 fbcf 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a1f6:	bf00      	nop
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20006bc8 	.word	0x20006bc8

0800a200 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800a204:	4802      	ldr	r0, [pc, #8]	; (800a210 <DMA2_Stream5_IRQHandler+0x10>)
 800a206:	f001 fbc5 	bl	800b994 <HAL_DMA_IRQHandler>
}
 800a20a:	bf00      	nop
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20008514 	.word	0x20008514

0800a214 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0

}
 800a218:	bf00      	nop
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800a222:	b480      	push	{r7}
 800a224:	af00      	add	r7, sp, #0

}
 800a226:	bf00      	nop
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0

	while(1){
 800a234:	e7fe      	b.n	800a234 <MemManage_Handler+0x4>

0800a236 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800a236:	b480      	push	{r7}
 800a238:	af00      	add	r7, sp, #0

}
 800a23a:	bf00      	nop
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800a244:	b480      	push	{r7}
 800a246:	af00      	add	r7, sp, #0

}
 800a248:	bf00      	nop
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800a252:	b480      	push	{r7}
 800a254:	af00      	add	r7, sp, #0

}
 800a256:	bf00      	nop
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
		BIOS_QEI1.signbit -= 1;
	}
	htim1.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim1);
 800a264:	4803      	ldr	r0, [pc, #12]	; (800a274 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a266:	f005 fcdf 	bl	800fc28 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim10);
 800a26a:	4803      	ldr	r0, [pc, #12]	; (800a278 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800a26c:	f005 fcdc 	bl	800fc28 <HAL_TIM_IRQHandler>
	return;
 800a270:	bf00      	nop
}
 800a272:	bd80      	pop	{r7, pc}
 800a274:	200066cc 	.word	0x200066cc
 800a278:	2000639c 	.word	0x2000639c

0800a27c <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
	}
	htim4.Instance -> SR = 0;
	QEIDelay(100);

#else
	HAL_TIM_IRQHandler(&htim4);
 800a280:	4802      	ldr	r0, [pc, #8]	; (800a28c <TIM4_IRQHandler+0x10>)
 800a282:	f005 fcd1 	bl	800fc28 <HAL_TIM_IRQHandler>

	return;
 800a286:	bf00      	nop
#endif

}
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	200062bc 	.word	0x200062bc

0800a290 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800a294:	4803      	ldr	r0, [pc, #12]	; (800a2a4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800a296:	f005 fcc7 	bl	800fc28 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800a29a:	4803      	ldr	r0, [pc, #12]	; (800a2a8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800a29c:	f005 fcc4 	bl	800fc28 <HAL_TIM_IRQHandler>
	return;
 800a2a0:	bf00      	nop
}
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	2000627c 	.word	0x2000627c
 800a2a8:	20006564 	.word	0x20006564

0800a2ac <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800a2b0:	4802      	ldr	r0, [pc, #8]	; (800a2bc <TIM2_IRQHandler+0x10>)
 800a2b2:	f005 fcb9 	bl	800fc28 <HAL_TIM_IRQHandler>
}
 800a2b6:	bf00      	nop
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	200067d0 	.word	0x200067d0

0800a2c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d10e      	bne.n	800a2f0 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_IncTick();
 800a2d2:	f000 f9c7 	bl	800a664 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800a2d6:	4808      	ldr	r0, [pc, #32]	; (800a2f8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800a2d8:	f7f7 fabf 	bl	800185a <SHIFTREGShift>
		counter++;
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	4a06      	ldr	r2, [pc, #24]	; (800a2fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800a2e4:	6013      	str	r3, [r2, #0]
		jetson.update ++;
 800a2e6:	4b06      	ldr	r3, [pc, #24]	; (800a300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	4a04      	ldr	r2, [pc, #16]	; (800a300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800a2ee:	6193      	str	r3, [r2, #24]
//			PID(&Pid_Camera_Pitch);
//		}else{
//			PIDDelayInit(&Pid_Camera_Pitch);
//		}
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20007c4c 	.word	0x20007c4c
 800a2fc:	20007d88 	.word	0x20007d88
 800a300:	20008938 	.word	0x20008938

0800a304 <HAL_I2C_MasterRxCpltCallback>:
//}


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
	PSxConnectDMA(&ps4);
 800a30c:	4803      	ldr	r0, [pc, #12]	; (800a31c <HAL_I2C_MasterRxCpltCallback+0x18>)
 800a30e:	f7fb fd2f 	bl	8005d70 <PSxConnectDMA>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	20008460 	.word	0x20008460

0800a320 <I2C1_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C1.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_ER_IRQHandler(void){
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0

	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800a324:	480a      	ldr	r0, [pc, #40]	; (800a350 <I2C1_ER_IRQHandler+0x30>)
 800a326:	f001 fa5d 	bl	800b7e4 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800a32a:	480a      	ldr	r0, [pc, #40]	; (800a354 <I2C1_ER_IRQHandler+0x34>)
 800a32c:	f002 fc90 	bl	800cc50 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800a330:	4b09      	ldr	r3, [pc, #36]	; (800a358 <I2C1_ER_IRQHandler+0x38>)
 800a332:	2208      	movs	r2, #8
 800a334:	4906      	ldr	r1, [pc, #24]	; (800a350 <I2C1_ER_IRQHandler+0x30>)
 800a336:	4807      	ldr	r0, [pc, #28]	; (800a354 <I2C1_ER_IRQHandler+0x34>)
 800a338:	f7f8 ffea 	bl	8003310 <I2CX_DMA_RX_Init>

	HAL_I2C_ER_IRQHandler(&hi2c1);
 800a33c:	4805      	ldr	r0, [pc, #20]	; (800a354 <I2C1_ER_IRQHandler+0x34>)
 800a33e:	f002 ff3a 	bl	800d1b6 <HAL_I2C_ER_IRQHandler>

	PSxInitDMA(&ps4, &hi2c1);
 800a342:	4904      	ldr	r1, [pc, #16]	; (800a354 <I2C1_ER_IRQHandler+0x34>)
 800a344:	4805      	ldr	r0, [pc, #20]	; (800a35c <I2C1_ER_IRQHandler+0x3c>)
 800a346:	f7fb fd25 	bl	8005d94 <PSxInitDMA>

}
 800a34a:	bf00      	nop
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	200083fc 	.word	0x200083fc
 800a354:	20007248 	.word	0x20007248
 800a358:	00061a80 	.word	0x00061a80
 800a35c:	20008460 	.word	0x20008460

0800a360 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08c      	sub	sp, #48	; 0x30
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800a370:	2200      	movs	r2, #0
 800a372:	6879      	ldr	r1, [r7, #4]
 800a374:	201c      	movs	r0, #28
 800a376:	f001 f941 	bl	800b5fc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a37a:	201c      	movs	r0, #28
 800a37c:	f001 f95a 	bl	800b634 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	4b20      	ldr	r3, [pc, #128]	; (800a408 <HAL_InitTick+0xa8>)
 800a386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a388:	4a1f      	ldr	r2, [pc, #124]	; (800a408 <HAL_InitTick+0xa8>)
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	6413      	str	r3, [r2, #64]	; 0x40
 800a390:	4b1d      	ldr	r3, [pc, #116]	; (800a408 <HAL_InitTick+0xa8>)
 800a392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a39c:	f107 0210 	add.w	r2, r7, #16
 800a3a0:	f107 0314 	add.w	r3, r7, #20
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f004 ffce 	bl	800f348 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a3ac:	f004 ffa4 	bl	800f2f8 <HAL_RCC_GetPCLK1Freq>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	4a14      	ldr	r2, [pc, #80]	; (800a40c <HAL_InitTick+0xac>)
 800a3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a3be:	0c9b      	lsrs	r3, r3, #18
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800a3c4:	4b12      	ldr	r3, [pc, #72]	; (800a410 <HAL_InitTick+0xb0>)
 800a3c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a3ca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <HAL_InitTick+0xb0>)
 800a3ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a3d2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800a3d4:	4a0e      	ldr	r2, [pc, #56]	; (800a410 <HAL_InitTick+0xb0>)
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800a3da:	4b0d      	ldr	r3, [pc, #52]	; (800a410 <HAL_InitTick+0xb0>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <HAL_InitTick+0xb0>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800a3e6:	480a      	ldr	r0, [pc, #40]	; (800a410 <HAL_InitTick+0xb0>)
 800a3e8:	f005 fb42 	bl	800fa70 <HAL_TIM_Base_Init>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d104      	bne.n	800a3fc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800a3f2:	4807      	ldr	r0, [pc, #28]	; (800a410 <HAL_InitTick+0xb0>)
 800a3f4:	f005 fb8b 	bl	800fb0e <HAL_TIM_Base_Start_IT>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	e000      	b.n	800a3fe <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3730      	adds	r7, #48	; 0x30
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	40023800 	.word	0x40023800
 800a40c:	431bde83 	.word	0x431bde83
 800a410:	200067d0 	.word	0x200067d0

0800a414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
	return 1;
 800a418:	2301      	movs	r3, #1
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <_kill>:

int _kill(int pid, int sig)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a42e:	f00a ffa5 	bl	801537c <__errno>
 800a432:	4603      	mov	r3, r0
 800a434:	2216      	movs	r2, #22
 800a436:	601a      	str	r2, [r3, #0]
	return -1;
 800a438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <_exit>:

void _exit (int status)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a44c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff ffe7 	bl	800a424 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a456:	e7fe      	b.n	800a456 <_exit+0x12>

0800a458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e00a      	b.n	800a480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a46a:	f3af 8000 	nop.w
 800a46e:	4601      	mov	r1, r0
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	1c5a      	adds	r2, r3, #1
 800a474:	60ba      	str	r2, [r7, #8]
 800a476:	b2ca      	uxtb	r2, r1
 800a478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	3301      	adds	r3, #1
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	dbf0      	blt.n	800a46a <_read+0x12>
	}

return len;
 800a488:	687b      	ldr	r3, [r7, #4]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b086      	sub	sp, #24
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	e009      	b.n	800a4b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	60ba      	str	r2, [r7, #8]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	617b      	str	r3, [r7, #20]
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	dbf1      	blt.n	800a4a4 <_write+0x12>
	}
	return len;
 800a4c0:	687b      	ldr	r3, [r7, #4]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <_close>:

int _close(int file)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
	return -1;
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b083      	sub	sp, #12
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a4f2:	605a      	str	r2, [r3, #4]
	return 0;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <_isatty>:

int _isatty(int file)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
	return 1;
 800a50a:	2301      	movs	r3, #1
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
	return 0;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a53c:	4a14      	ldr	r2, [pc, #80]	; (800a590 <_sbrk+0x5c>)
 800a53e:	4b15      	ldr	r3, [pc, #84]	; (800a594 <_sbrk+0x60>)
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a548:	4b13      	ldr	r3, [pc, #76]	; (800a598 <_sbrk+0x64>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a550:	4b11      	ldr	r3, [pc, #68]	; (800a598 <_sbrk+0x64>)
 800a552:	4a12      	ldr	r2, [pc, #72]	; (800a59c <_sbrk+0x68>)
 800a554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a556:	4b10      	ldr	r3, [pc, #64]	; (800a598 <_sbrk+0x64>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4413      	add	r3, r2
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	429a      	cmp	r2, r3
 800a562:	d207      	bcs.n	800a574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a564:	f00a ff0a 	bl	801537c <__errno>
 800a568:	4603      	mov	r3, r0
 800a56a:	220c      	movs	r2, #12
 800a56c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a572:	e009      	b.n	800a588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a574:	4b08      	ldr	r3, [pc, #32]	; (800a598 <_sbrk+0x64>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a57a:	4b07      	ldr	r3, [pc, #28]	; (800a598 <_sbrk+0x64>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4413      	add	r3, r2
 800a582:	4a05      	ldr	r2, [pc, #20]	; (800a598 <_sbrk+0x64>)
 800a584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a586:	68fb      	ldr	r3, [r7, #12]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20020000 	.word	0x20020000
 800a594:	00000400 	.word	0x00000400
 800a598:	2000189c 	.word	0x2000189c
 800a59c:	20008a90 	.word	0x20008a90

0800a5a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a5a4:	4b08      	ldr	r3, [pc, #32]	; (800a5c8 <SystemInit+0x28>)
 800a5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5aa:	4a07      	ldr	r2, [pc, #28]	; (800a5c8 <SystemInit+0x28>)
 800a5ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a5b4:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <SystemInit+0x28>)
 800a5b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a5ba:	609a      	str	r2, [r3, #8]
#endif
}
 800a5bc:	bf00      	nop
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	e000ed00 	.word	0xe000ed00

0800a5cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a5cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a5d0:	480d      	ldr	r0, [pc, #52]	; (800a608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a5d2:	490e      	ldr	r1, [pc, #56]	; (800a60c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a5d4:	4a0e      	ldr	r2, [pc, #56]	; (800a610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a5d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a5d8:	e002      	b.n	800a5e0 <LoopCopyDataInit>

0800a5da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a5da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a5dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a5de:	3304      	adds	r3, #4

0800a5e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a5e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a5e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a5e4:	d3f9      	bcc.n	800a5da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a5e6:	4a0b      	ldr	r2, [pc, #44]	; (800a614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a5e8:	4c0b      	ldr	r4, [pc, #44]	; (800a618 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a5ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a5ec:	e001      	b.n	800a5f2 <LoopFillZerobss>

0800a5ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a5ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a5f0:	3204      	adds	r2, #4

0800a5f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a5f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a5f4:	d3fb      	bcc.n	800a5ee <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a5f6:	f7ff ffd3 	bl	800a5a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a5fa:	f00a fec5 	bl	8015388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a5fe:	f7f9 fc2b 	bl	8003e58 <main>
  bx  lr    
 800a602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a60c:	20000520 	.word	0x20000520
  ldr r2, =_sidata
 800a610:	0801b224 	.word	0x0801b224
  ldr r2, =_sbss
 800a614:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 800a618:	20008a8c 	.word	0x20008a8c

0800a61c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a61c:	e7fe      	b.n	800a61c <ADC_IRQHandler>
	...

0800a620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a624:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <HAL_Init+0x40>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a0d      	ldr	r2, [pc, #52]	; (800a660 <HAL_Init+0x40>)
 800a62a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a62e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a630:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <HAL_Init+0x40>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <HAL_Init+0x40>)
 800a636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a63a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a63c:	4b08      	ldr	r3, [pc, #32]	; (800a660 <HAL_Init+0x40>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a07      	ldr	r2, [pc, #28]	; (800a660 <HAL_Init+0x40>)
 800a642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a648:	2003      	movs	r0, #3
 800a64a:	f000 ffcc 	bl	800b5e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a64e:	2000      	movs	r0, #0
 800a650:	f7ff fe86 	bl	800a360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a654:	f7f7 f968 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	40023c00 	.word	0x40023c00

0800a664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a668:	4b06      	ldr	r3, [pc, #24]	; (800a684 <HAL_IncTick+0x20>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <HAL_IncTick+0x24>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4413      	add	r3, r2
 800a674:	4a04      	ldr	r2, [pc, #16]	; (800a688 <HAL_IncTick+0x24>)
 800a676:	6013      	str	r3, [r2, #0]
}
 800a678:	bf00      	nop
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000344 	.word	0x20000344
 800a688:	20008a18 	.word	0x20008a18

0800a68c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  return uwTick;
 800a690:	4b03      	ldr	r3, [pc, #12]	; (800a6a0 <HAL_GetTick+0x14>)
 800a692:	681b      	ldr	r3, [r3, #0]
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	20008a18 	.word	0x20008a18

0800a6a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a6ac:	f7ff ffee 	bl	800a68c <HAL_GetTick>
 800a6b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6bc:	d005      	beq.n	800a6ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a6be:	4b0a      	ldr	r3, [pc, #40]	; (800a6e8 <HAL_Delay+0x44>)
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	4413      	add	r3, r2
 800a6c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a6ca:	bf00      	nop
 800a6cc:	f7ff ffde 	bl	800a68c <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d8f7      	bhi.n	800a6cc <HAL_Delay+0x28>
  {
  }
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000344 	.word	0x20000344

0800a6ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e0ed      	b.n	800a8da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7f7 f938 	bl	8001980 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0202 	bic.w	r2, r2, #2
 800a71e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a720:	f7ff ffb4 	bl	800a68c <HAL_GetTick>
 800a724:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a726:	e012      	b.n	800a74e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a728:	f7ff ffb0 	bl	800a68c <HAL_GetTick>
 800a72c:	4602      	mov	r2, r0
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	2b0a      	cmp	r3, #10
 800a734:	d90b      	bls.n	800a74e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2205      	movs	r2, #5
 800a746:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e0c5      	b.n	800a8da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e5      	bne.n	800a728 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0201 	orr.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a76c:	f7ff ff8e 	bl	800a68c <HAL_GetTick>
 800a770:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a772:	e012      	b.n	800a79a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a774:	f7ff ff8a 	bl	800a68c <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	2b0a      	cmp	r3, #10
 800a780:	d90b      	bls.n	800a79a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2205      	movs	r2, #5
 800a792:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e09f      	b.n	800a8da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	f003 0301 	and.w	r3, r3, #1
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0e5      	beq.n	800a774 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7e1b      	ldrb	r3, [r3, #24]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d108      	bne.n	800a7c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	e007      	b.n	800a7d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7e5b      	ldrb	r3, [r3, #25]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d108      	bne.n	800a7ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	e007      	b.n	800a7fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	7e9b      	ldrb	r3, [r3, #26]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d108      	bne.n	800a816 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0220 	orr.w	r2, r2, #32
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	e007      	b.n	800a826 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0220 	bic.w	r2, r2, #32
 800a824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	7edb      	ldrb	r3, [r3, #27]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d108      	bne.n	800a840 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0210 	bic.w	r2, r2, #16
 800a83c:	601a      	str	r2, [r3, #0]
 800a83e:	e007      	b.n	800a850 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0210 	orr.w	r2, r2, #16
 800a84e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7f1b      	ldrb	r3, [r3, #28]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d108      	bne.n	800a86a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0208 	orr.w	r2, r2, #8
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	e007      	b.n	800a87a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f022 0208 	bic.w	r2, r2, #8
 800a878:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	7f5b      	ldrb	r3, [r3, #29]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d108      	bne.n	800a894 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f042 0204 	orr.w	r2, r2, #4
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e007      	b.n	800a8a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0204 	bic.w	r2, r2, #4
 800a8a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	431a      	orrs	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	ea42 0103 	orr.w	r1, r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	1e5a      	subs	r2, r3, #1
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	430a      	orrs	r2, r1
 800a8c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
	...

0800a8e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a8fc:	7cfb      	ldrb	r3, [r7, #19]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d003      	beq.n	800a90a <HAL_CAN_ConfigFilter+0x26>
 800a902:	7cfb      	ldrb	r3, [r7, #19]
 800a904:	2b02      	cmp	r3, #2
 800a906:	f040 80be 	bne.w	800aa86 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a90a:	4b65      	ldr	r3, [pc, #404]	; (800aaa0 <HAL_CAN_ConfigFilter+0x1bc>)
 800a90c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a914:	f043 0201 	orr.w	r2, r3, #1
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a924:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	021b      	lsls	r3, r3, #8
 800a93a:	431a      	orrs	r2, r3
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	f003 031f 	and.w	r3, r3, #31
 800a94a:	2201      	movs	r2, #1
 800a94c:	fa02 f303 	lsl.w	r3, r2, r3
 800a950:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	43db      	mvns	r3, r3
 800a95c:	401a      	ands	r2, r3
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d123      	bne.n	800a9b4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	43db      	mvns	r3, r3
 800a976:	401a      	ands	r2, r3
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a98e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	3248      	adds	r2, #72	; 0x48
 800a994:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a9a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a9aa:	6979      	ldr	r1, [r7, #20]
 800a9ac:	3348      	adds	r3, #72	; 0x48
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	440b      	add	r3, r1
 800a9b2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d122      	bne.n	800aa02 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a9dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	3248      	adds	r2, #72	; 0x48
 800a9e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a9f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a9f8:	6979      	ldr	r1, [r7, #20]
 800a9fa:	3348      	adds	r3, #72	; 0x48
 800a9fc:	00db      	lsls	r3, r3, #3
 800a9fe:	440b      	add	r3, r1
 800aa00:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	43db      	mvns	r3, r3
 800aa14:	401a      	ands	r2, r3
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800aa1c:	e007      	b.n	800aa2e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	431a      	orrs	r2, r3
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d109      	bne.n	800aa4a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	43db      	mvns	r3, r3
 800aa40:	401a      	ands	r2, r3
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800aa48:	e007      	b.n	800aa5a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	431a      	orrs	r2, r3
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d107      	bne.n	800aa72 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	431a      	orrs	r2, r3
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa78:	f023 0201 	bic.w	r2, r3, #1
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	e006      	b.n	800aa94 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
  }
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	371c      	adds	r7, #28
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	40006400 	.word	0x40006400

0800aaa4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d12e      	bne.n	800ab16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0201 	bic.w	r2, r2, #1
 800aace:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aad0:	f7ff fddc 	bl	800a68c <HAL_GetTick>
 800aad4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800aad6:	e012      	b.n	800aafe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aad8:	f7ff fdd8 	bl	800a68c <HAL_GetTick>
 800aadc:	4602      	mov	r2, r0
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	2b0a      	cmp	r3, #10
 800aae4:	d90b      	bls.n	800aafe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2205      	movs	r2, #5
 800aaf6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e012      	b.n	800ab24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1e5      	bne.n	800aad8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	e006      	b.n	800ab24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
  }
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b089      	sub	sp, #36	; 0x24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ab4a:	7ffb      	ldrb	r3, [r7, #31]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d003      	beq.n	800ab58 <HAL_CAN_AddTxMessage+0x2c>
 800ab50:	7ffb      	ldrb	r3, [r7, #31]
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	f040 80b8 	bne.w	800acc8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d105      	bne.n	800ab78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80a0 	beq.w	800acb8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	0e1b      	lsrs	r3, r3, #24
 800ab7c:	f003 0303 	and.w	r3, r3, #3
 800ab80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d907      	bls.n	800ab98 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e09e      	b.n	800acd6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ab98:	2201      	movs	r2, #1
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	409a      	lsls	r2, r3
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10d      	bne.n	800abc6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800abb4:	68f9      	ldr	r1, [r7, #12]
 800abb6:	6809      	ldr	r1, [r1, #0]
 800abb8:	431a      	orrs	r2, r3
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	3318      	adds	r3, #24
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	440b      	add	r3, r1
 800abc2:	601a      	str	r2, [r3, #0]
 800abc4:	e00f      	b.n	800abe6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800abd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800abda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	3318      	adds	r3, #24
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	440b      	add	r3, r1
 800abe4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6819      	ldr	r1, [r3, #0]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	691a      	ldr	r2, [r3, #16]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	3318      	adds	r3, #24
 800abf2:	011b      	lsls	r3, r3, #4
 800abf4:	440b      	add	r3, r1
 800abf6:	3304      	adds	r3, #4
 800abf8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	7d1b      	ldrb	r3, [r3, #20]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d111      	bne.n	800ac26 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	3318      	adds	r3, #24
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	3304      	adds	r3, #4
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	6811      	ldr	r1, [r2, #0]
 800ac16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	3318      	adds	r3, #24
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	440b      	add	r3, r1
 800ac22:	3304      	adds	r3, #4
 800ac24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	061a      	lsls	r2, r3, #24
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3306      	adds	r3, #6
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	041b      	lsls	r3, r3, #16
 800ac36:	431a      	orrs	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	3305      	adds	r3, #5
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	021b      	lsls	r3, r3, #8
 800ac40:	4313      	orrs	r3, r2
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	3204      	adds	r2, #4
 800ac46:	7812      	ldrb	r2, [r2, #0]
 800ac48:	4610      	mov	r0, r2
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	6811      	ldr	r1, [r2, #0]
 800ac4e:	ea43 0200 	orr.w	r2, r3, r0
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	440b      	add	r3, r1
 800ac58:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ac5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3303      	adds	r3, #3
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	061a      	lsls	r2, r3, #24
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	3302      	adds	r3, #2
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	041b      	lsls	r3, r3, #16
 800ac6e:	431a      	orrs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3301      	adds	r3, #1
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	021b      	lsls	r3, r3, #8
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	4610      	mov	r0, r2
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6811      	ldr	r1, [r2, #0]
 800ac84:	ea43 0200 	orr.w	r2, r3, r0
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	440b      	add	r3, r1
 800ac8e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ac92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	3318      	adds	r3, #24
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	4413      	add	r3, r2
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	6811      	ldr	r1, [r2, #0]
 800aca6:	f043 0201 	orr.w	r2, r3, #1
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	3318      	adds	r3, #24
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	440b      	add	r3, r1
 800acb2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	e00e      	b.n	800acd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e006      	b.n	800acd6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800accc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
  }
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3724      	adds	r7, #36	; 0x24
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800ace2:	b480      	push	{r7}
 800ace4:	b085      	sub	sp, #20
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acf4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800acf6:	7afb      	ldrb	r3, [r7, #11]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d002      	beq.n	800ad02 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d11d      	bne.n	800ad3e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3301      	adds	r3, #1
 800ad14:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d003      	beq.n	800ad70 <HAL_CAN_GetRxMessage+0x24>
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	f040 80f3 	bne.w	800af56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10e      	bne.n	800ad94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	f003 0303 	and.w	r3, r3, #3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d116      	bne.n	800adb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e0e7      	b.n	800af64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d107      	bne.n	800adb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e0d8      	b.n	800af64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	331b      	adds	r3, #27
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	4413      	add	r3, r2
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0204 	and.w	r2, r3, #4
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10c      	bne.n	800adea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	331b      	adds	r3, #27
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	4413      	add	r3, r2
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	0d5b      	lsrs	r3, r3, #21
 800ade0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	e00b      	b.n	800ae02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	331b      	adds	r3, #27
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	4413      	add	r3, r2
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	08db      	lsrs	r3, r3, #3
 800adfa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	331b      	adds	r3, #27
 800ae0a:	011b      	lsls	r3, r3, #4
 800ae0c:	4413      	add	r3, r2
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0202 	and.w	r2, r3, #2
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	331b      	adds	r3, #27
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	4413      	add	r3, r2
 800ae24:	3304      	adds	r3, #4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 020f 	and.w	r2, r3, #15
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	331b      	adds	r3, #27
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	4413      	add	r3, r2
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	0a1b      	lsrs	r3, r3, #8
 800ae42:	b2da      	uxtb	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	331b      	adds	r3, #27
 800ae50:	011b      	lsls	r3, r3, #4
 800ae52:	4413      	add	r3, r2
 800ae54:	3304      	adds	r3, #4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	0c1b      	lsrs	r3, r3, #16
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	4413      	add	r3, r2
 800ae6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	0a1a      	lsrs	r2, r3, #8
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	b2d2      	uxtb	r2, r2
 800ae8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	011b      	lsls	r3, r3, #4
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	0c1a      	lsrs	r2, r3, #16
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	3302      	adds	r3, #2
 800aea6:	b2d2      	uxtb	r2, r2
 800aea8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	011b      	lsls	r3, r3, #4
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	0e1a      	lsrs	r2, r3, #24
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	3303      	adds	r3, #3
 800aec0:	b2d2      	uxtb	r2, r2
 800aec2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	4413      	add	r3, r2
 800aece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	3304      	adds	r3, #4
 800aed8:	b2d2      	uxtb	r2, r2
 800aeda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	0a1a      	lsrs	r2, r3, #8
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	3305      	adds	r3, #5
 800aef2:	b2d2      	uxtb	r2, r2
 800aef4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	011b      	lsls	r3, r3, #4
 800aefe:	4413      	add	r3, r2
 800af00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	0c1a      	lsrs	r2, r3, #16
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	3306      	adds	r3, #6
 800af0c:	b2d2      	uxtb	r2, r2
 800af0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	4413      	add	r3, r2
 800af1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	0e1a      	lsrs	r2, r3, #24
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	3307      	adds	r3, #7
 800af26:	b2d2      	uxtb	r2, r2
 800af28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d108      	bne.n	800af42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68da      	ldr	r2, [r3, #12]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0220 	orr.w	r2, r2, #32
 800af3e:	60da      	str	r2, [r3, #12]
 800af40:	e007      	b.n	800af52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	691a      	ldr	r2, [r3, #16]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f042 0220 	orr.w	r2, r2, #32
 800af50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	e006      	b.n	800af64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
  }
}
 800af64:	4618      	mov	r0, r3
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800af82:	7bfb      	ldrb	r3, [r7, #15]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d002      	beq.n	800af8e <HAL_CAN_ActivateNotification+0x1e>
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d109      	bne.n	800afa2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	6959      	ldr	r1, [r3, #20]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	e006      	b.n	800afb0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
  }
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08a      	sub	sp, #40	; 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d07c      	beq.n	800b0fc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d023      	beq.n	800b054 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2201      	movs	r2, #1
 800b012:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f983 	bl	800b32a <HAL_CAN_TxMailbox0CompleteCallback>
 800b024:	e016      	b.n	800b054 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d004      	beq.n	800b03a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
 800b038:	e00c      	b.n	800b054 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	f003 0308 	and.w	r3, r3, #8
 800b040:	2b00      	cmp	r3, #0
 800b042:	d004      	beq.n	800b04e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
 800b04c:	e002      	b.n	800b054 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f989 	bl	800b366 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d024      	beq.n	800b0a8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b066:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f963 	bl	800b33e <HAL_CAN_TxMailbox1CompleteCallback>
 800b078:	e016      	b.n	800b0a8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
 800b08c:	e00c      	b.n	800b0a8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b094:	2b00      	cmp	r3, #0
 800b096:	d004      	beq.n	800b0a2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
 800b0a0:	e002      	b.n	800b0a8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 f969 	bl	800b37a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d024      	beq.n	800b0fc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b0ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 f943 	bl	800b352 <HAL_CAN_TxMailbox2CompleteCallback>
 800b0cc:	e016      	b.n	800b0fc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0de:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e0:	e00c      	b.n	800b0fc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d004      	beq.n	800b0f6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f4:	e002      	b.n	800b0fc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f949 	bl	800b38e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	f003 0308 	and.w	r3, r3, #8
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00c      	beq.n	800b120 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b116:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2210      	movs	r2, #16
 800b11e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	f003 0304 	and.w	r3, r3, #4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d00b      	beq.n	800b142 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f003 0308 	and.w	r3, r3, #8
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2208      	movs	r2, #8
 800b13a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f930 	bl	800b3a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d009      	beq.n	800b160 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d002      	beq.n	800b160 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f7fe f82e 	bl	80091bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00c      	beq.n	800b184 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	f003 0310 	and.w	r3, r3, #16
 800b170:	2b00      	cmp	r3, #0
 800b172:	d007      	beq.n	800b184 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2210      	movs	r2, #16
 800b182:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b184:	6a3b      	ldr	r3, [r7, #32]
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00b      	beq.n	800b1a6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	f003 0308 	and.w	r3, r3, #8
 800b194:	2b00      	cmp	r3, #0
 800b196:	d006      	beq.n	800b1a6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2208      	movs	r2, #8
 800b19e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f908 	bl	800b3b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f003 0310 	and.w	r3, r3, #16
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d009      	beq.n	800b1c4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7fe fa3a 	bl	8009638 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00b      	beq.n	800b1e6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	f003 0310 	and.w	r3, r3, #16
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d006      	beq.n	800b1e6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2210      	movs	r2, #16
 800b1de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f8f2 	bl	800b3ca <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f003 0308 	and.w	r3, r3, #8
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d006      	beq.n	800b208 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2208      	movs	r2, #8
 800b200:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f8eb 	bl	800b3de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d07b      	beq.n	800b30a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d072      	beq.n	800b302 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b222:	2b00      	cmp	r3, #0
 800b224:	d008      	beq.n	800b238 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d003      	beq.n	800b238 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	f043 0301 	orr.w	r3, r3, #1
 800b236:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d008      	beq.n	800b254 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d003      	beq.n	800b254 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	f043 0302 	orr.w	r3, r3, #2
 800b252:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b264:	2b00      	cmp	r3, #0
 800b266:	d003      	beq.n	800b270 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	f043 0304 	orr.w	r3, r3, #4
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b276:	2b00      	cmp	r3, #0
 800b278:	d043      	beq.n	800b302 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b280:	2b00      	cmp	r3, #0
 800b282:	d03e      	beq.n	800b302 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b28a:	2b60      	cmp	r3, #96	; 0x60
 800b28c:	d02b      	beq.n	800b2e6 <HAL_CAN_IRQHandler+0x32a>
 800b28e:	2b60      	cmp	r3, #96	; 0x60
 800b290:	d82e      	bhi.n	800b2f0 <HAL_CAN_IRQHandler+0x334>
 800b292:	2b50      	cmp	r3, #80	; 0x50
 800b294:	d022      	beq.n	800b2dc <HAL_CAN_IRQHandler+0x320>
 800b296:	2b50      	cmp	r3, #80	; 0x50
 800b298:	d82a      	bhi.n	800b2f0 <HAL_CAN_IRQHandler+0x334>
 800b29a:	2b40      	cmp	r3, #64	; 0x40
 800b29c:	d019      	beq.n	800b2d2 <HAL_CAN_IRQHandler+0x316>
 800b29e:	2b40      	cmp	r3, #64	; 0x40
 800b2a0:	d826      	bhi.n	800b2f0 <HAL_CAN_IRQHandler+0x334>
 800b2a2:	2b30      	cmp	r3, #48	; 0x30
 800b2a4:	d010      	beq.n	800b2c8 <HAL_CAN_IRQHandler+0x30c>
 800b2a6:	2b30      	cmp	r3, #48	; 0x30
 800b2a8:	d822      	bhi.n	800b2f0 <HAL_CAN_IRQHandler+0x334>
 800b2aa:	2b10      	cmp	r3, #16
 800b2ac:	d002      	beq.n	800b2b4 <HAL_CAN_IRQHandler+0x2f8>
 800b2ae:	2b20      	cmp	r3, #32
 800b2b0:	d005      	beq.n	800b2be <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b2b2:	e01d      	b.n	800b2f0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	f043 0308 	orr.w	r3, r3, #8
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2bc:	e019      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	f043 0310 	orr.w	r3, r3, #16
 800b2c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2c6:	e014      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	f043 0320 	orr.w	r3, r3, #32
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2d0:	e00f      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2da:	e00a      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2e4:	e005      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b2ee:	e000      	b.n	800b2f2 <HAL_CAN_IRQHandler+0x336>
            break;
 800b2f0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	699a      	ldr	r2, [r3, #24]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b300:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2204      	movs	r2, #4
 800b308:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d008      	beq.n	800b322 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	431a      	orrs	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f868 	bl	800b3f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b322:	bf00      	nop
 800b324:	3728      	adds	r7, #40	; 0x28
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b33e:	b480      	push	{r7}
 800b340:	b083      	sub	sp, #12
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b346:	bf00      	nop
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b3d2:	bf00      	nop
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b083      	sub	sp, #12
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b3e6:	bf00      	nop
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b083      	sub	sp, #12
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
	...

0800b408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b418:	4b0c      	ldr	r3, [pc, #48]	; (800b44c <__NVIC_SetPriorityGrouping+0x44>)
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b41e:	68ba      	ldr	r2, [r7, #8]
 800b420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b424:	4013      	ands	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b43a:	4a04      	ldr	r2, [pc, #16]	; (800b44c <__NVIC_SetPriorityGrouping+0x44>)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	60d3      	str	r3, [r2, #12]
}
 800b440:	bf00      	nop
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	e000ed00 	.word	0xe000ed00

0800b450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b454:	4b04      	ldr	r3, [pc, #16]	; (800b468 <__NVIC_GetPriorityGrouping+0x18>)
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	0a1b      	lsrs	r3, r3, #8
 800b45a:	f003 0307 	and.w	r3, r3, #7
}
 800b45e:	4618      	mov	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	e000ed00 	.word	0xe000ed00

0800b46c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	db0b      	blt.n	800b496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	f003 021f 	and.w	r2, r3, #31
 800b484:	4907      	ldr	r1, [pc, #28]	; (800b4a4 <__NVIC_EnableIRQ+0x38>)
 800b486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b48a:	095b      	lsrs	r3, r3, #5
 800b48c:	2001      	movs	r0, #1
 800b48e:	fa00 f202 	lsl.w	r2, r0, r2
 800b492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b496:	bf00      	nop
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	e000e100 	.word	0xe000e100

0800b4a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	db12      	blt.n	800b4e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4ba:	79fb      	ldrb	r3, [r7, #7]
 800b4bc:	f003 021f 	and.w	r2, r3, #31
 800b4c0:	490a      	ldr	r1, [pc, #40]	; (800b4ec <__NVIC_DisableIRQ+0x44>)
 800b4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4c6:	095b      	lsrs	r3, r3, #5
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	fa00 f202 	lsl.w	r2, r0, r2
 800b4ce:	3320      	adds	r3, #32
 800b4d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b4d4:	f3bf 8f4f 	dsb	sy
}
 800b4d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b4da:	f3bf 8f6f 	isb	sy
}
 800b4de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr
 800b4ec:	e000e100 	.word	0xe000e100

0800b4f0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	db0c      	blt.n	800b51c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	f003 021f 	and.w	r2, r3, #31
 800b508:	4907      	ldr	r1, [pc, #28]	; (800b528 <__NVIC_ClearPendingIRQ+0x38>)
 800b50a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b50e:	095b      	lsrs	r3, r3, #5
 800b510:	2001      	movs	r0, #1
 800b512:	fa00 f202 	lsl.w	r2, r0, r2
 800b516:	3360      	adds	r3, #96	; 0x60
 800b518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	e000e100 	.word	0xe000e100

0800b52c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	4603      	mov	r3, r0
 800b534:	6039      	str	r1, [r7, #0]
 800b536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	db0a      	blt.n	800b556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	b2da      	uxtb	r2, r3
 800b544:	490c      	ldr	r1, [pc, #48]	; (800b578 <__NVIC_SetPriority+0x4c>)
 800b546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b54a:	0112      	lsls	r2, r2, #4
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	440b      	add	r3, r1
 800b550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b554:	e00a      	b.n	800b56c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	4908      	ldr	r1, [pc, #32]	; (800b57c <__NVIC_SetPriority+0x50>)
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	3b04      	subs	r3, #4
 800b564:	0112      	lsls	r2, r2, #4
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	440b      	add	r3, r1
 800b56a:	761a      	strb	r2, [r3, #24]
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	e000e100 	.word	0xe000e100
 800b57c:	e000ed00 	.word	0xe000ed00

0800b580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	; 0x24
 800b584:	af00      	add	r7, sp, #0
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f1c3 0307 	rsb	r3, r3, #7
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	bf28      	it	cs
 800b59e:	2304      	movcs	r3, #4
 800b5a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	3304      	adds	r3, #4
 800b5a6:	2b06      	cmp	r3, #6
 800b5a8:	d902      	bls.n	800b5b0 <NVIC_EncodePriority+0x30>
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	3b03      	subs	r3, #3
 800b5ae:	e000      	b.n	800b5b2 <NVIC_EncodePriority+0x32>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b5be:	43da      	mvns	r2, r3
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	401a      	ands	r2, r3
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b5c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d2:	43d9      	mvns	r1, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5d8:	4313      	orrs	r3, r2
         );
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3724      	adds	r7, #36	; 0x24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b082      	sub	sp, #8
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff ff0a 	bl	800b408 <__NVIC_SetPriorityGrouping>
}
 800b5f4:	bf00      	nop
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
 800b608:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b60e:	f7ff ff1f 	bl	800b450 <__NVIC_GetPriorityGrouping>
 800b612:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	68b9      	ldr	r1, [r7, #8]
 800b618:	6978      	ldr	r0, [r7, #20]
 800b61a:	f7ff ffb1 	bl	800b580 <NVIC_EncodePriority>
 800b61e:	4602      	mov	r2, r0
 800b620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff ff80 	bl	800b52c <__NVIC_SetPriority>
}
 800b62c:	bf00      	nop
 800b62e:	3718      	adds	r7, #24
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	4603      	mov	r3, r0
 800b63c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff ff12 	bl	800b46c <__NVIC_EnableIRQ>
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	4603      	mov	r3, r0
 800b658:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b65a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff ff22 	bl	800b4a8 <__NVIC_DisableIRQ>
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff ff38 	bl	800b4f0 <__NVIC_ClearPendingIRQ>
}
 800b680:	bf00      	nop
 800b682:	3708      	adds	r7, #8
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b694:	f7fe fffa 	bl	800a68c <HAL_GetTick>
 800b698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e099      	b.n	800b7d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f022 0201 	bic.w	r2, r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b6c4:	e00f      	b.n	800b6e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b6c6:	f7fe ffe1 	bl	800a68c <HAL_GetTick>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	1ad3      	subs	r3, r2, r3
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	d908      	bls.n	800b6e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2203      	movs	r2, #3
 800b6de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	e078      	b.n	800b7d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e8      	bne.n	800b6c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	4b38      	ldr	r3, [pc, #224]	; (800b7e0 <HAL_DMA_Init+0x158>)
 800b700:	4013      	ands	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b71e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b72a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	4313      	orrs	r3, r2
 800b736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	2b04      	cmp	r3, #4
 800b73e:	d107      	bne.n	800b750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b748:	4313      	orrs	r3, r2
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	697a      	ldr	r2, [r7, #20]
 800b756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	f023 0307 	bic.w	r3, r3, #7
 800b766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	4313      	orrs	r3, r2
 800b770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b04      	cmp	r3, #4
 800b778:	d117      	bne.n	800b7aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77e:	697a      	ldr	r2, [r7, #20]
 800b780:	4313      	orrs	r3, r2
 800b782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00e      	beq.n	800b7aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fb09 	bl	800bda4 <DMA_CheckFifoParam>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d008      	beq.n	800b7aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2240      	movs	r2, #64	; 0x40
 800b79c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e016      	b.n	800b7d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	697a      	ldr	r2, [r7, #20]
 800b7b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fac0 	bl	800bd38 <DMA_CalcBaseAndBitshift>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c0:	223f      	movs	r2, #63	; 0x3f
 800b7c2:	409a      	lsls	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	f010803f 	.word	0xf010803f

0800b7e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e050      	b.n	800b898 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d101      	bne.n	800b806 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b802:	2302      	movs	r3, #2
 800b804:	e048      	b.n	800b898 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f022 0201 	bic.w	r2, r2, #1
 800b814:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2200      	movs	r2, #0
 800b81c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2200      	movs	r2, #0
 800b834:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2221      	movs	r2, #33	; 0x21
 800b844:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 fa76 	bl	800bd38 <DMA_CalcBaseAndBitshift>
 800b84c:	4603      	mov	r3, r0
 800b84e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b878:	223f      	movs	r2, #63	; 0x3f
 800b87a:	409a      	lsls	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d101      	bne.n	800b8c6 <HAL_DMA_Start_IT+0x26>
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	e040      	b.n	800b948 <HAL_DMA_Start_IT+0xa8>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d12f      	bne.n	800b93a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2202      	movs	r2, #2
 800b8de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 f9f4 	bl	800bcdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f8:	223f      	movs	r2, #63	; 0x3f
 800b8fa:	409a      	lsls	r2, r3
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0216 	orr.w	r2, r2, #22
 800b90e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b914:	2b00      	cmp	r3, #0
 800b916:	d007      	beq.n	800b928 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f042 0208 	orr.w	r2, r2, #8
 800b926:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f042 0201 	orr.w	r2, r2, #1
 800b936:	601a      	str	r2, [r3, #0]
 800b938:	e005      	b.n	800b946 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800b942:	2302      	movs	r3, #2
 800b944:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b946:	7dfb      	ldrb	r3, [r7, #23]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b02      	cmp	r3, #2
 800b962:	d004      	beq.n	800b96e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2280      	movs	r2, #128	; 0x80
 800b968:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e00c      	b.n	800b988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2205      	movs	r2, #5
 800b972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f022 0201 	bic.w	r2, r2, #1
 800b984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b9a0:	4b92      	ldr	r3, [pc, #584]	; (800bbec <HAL_DMA_IRQHandler+0x258>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a92      	ldr	r2, [pc, #584]	; (800bbf0 <HAL_DMA_IRQHandler+0x25c>)
 800b9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9aa:	0a9b      	lsrs	r3, r3, #10
 800b9ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9be:	2208      	movs	r2, #8
 800b9c0:	409a      	lsls	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d01a      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d013      	beq.n	800ba00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 0204 	bic.w	r2, r2, #4
 800b9e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	409a      	lsls	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f8:	f043 0201 	orr.w	r2, r3, #1
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba04:	2201      	movs	r2, #1
 800ba06:	409a      	lsls	r2, r3
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d012      	beq.n	800ba36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba22:	2201      	movs	r2, #1
 800ba24:	409a      	lsls	r2, r3
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2e:	f043 0202 	orr.w	r2, r3, #2
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba3a:	2204      	movs	r2, #4
 800ba3c:	409a      	lsls	r2, r3
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4013      	ands	r3, r2
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d012      	beq.n	800ba6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0302 	and.w	r3, r3, #2
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00b      	beq.n	800ba6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba58:	2204      	movs	r2, #4
 800ba5a:	409a      	lsls	r2, r3
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba64:	f043 0204 	orr.w	r2, r3, #4
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba70:	2210      	movs	r2, #16
 800ba72:	409a      	lsls	r2, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	4013      	ands	r3, r2
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d043      	beq.n	800bb04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0308 	and.w	r3, r3, #8
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d03c      	beq.n	800bb04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba8e:	2210      	movs	r2, #16
 800ba90:	409a      	lsls	r2, r3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d018      	beq.n	800bad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d108      	bne.n	800bac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d024      	beq.n	800bb04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	4798      	blx	r3
 800bac2:	e01f      	b.n	800bb04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01b      	beq.n	800bb04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	4798      	blx	r3
 800bad4:	e016      	b.n	800bb04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d107      	bne.n	800baf4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0208 	bic.w	r2, r2, #8
 800baf2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb08:	2220      	movs	r2, #32
 800bb0a:	409a      	lsls	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4013      	ands	r3, r2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f000 808e 	beq.w	800bc32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0310 	and.w	r3, r3, #16
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 8086 	beq.w	800bc32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb2a:	2220      	movs	r2, #32
 800bb2c:	409a      	lsls	r2, r3
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b05      	cmp	r3, #5
 800bb3c:	d136      	bne.n	800bbac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0216 	bic.w	r2, r2, #22
 800bb4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	695a      	ldr	r2, [r3, #20]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d103      	bne.n	800bb6e <HAL_DMA_IRQHandler+0x1da>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f022 0208 	bic.w	r2, r2, #8
 800bb7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb82:	223f      	movs	r2, #63	; 0x3f
 800bb84:	409a      	lsls	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d07d      	beq.n	800bc9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
        }
        return;
 800bbaa:	e078      	b.n	800bc9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d01c      	beq.n	800bbf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d108      	bne.n	800bbda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d030      	beq.n	800bc32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
 800bbd8:	e02b      	b.n	800bc32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d027      	beq.n	800bc32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	4798      	blx	r3
 800bbea:	e022      	b.n	800bc32 <HAL_DMA_IRQHandler+0x29e>
 800bbec:	2000033c 	.word	0x2000033c
 800bbf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d10f      	bne.n	800bc22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f022 0210 	bic.w	r2, r2, #16
 800bc10:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d032      	beq.n	800bca0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d022      	beq.n	800bc8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2205      	movs	r2, #5
 800bc4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60bb      	str	r3, [r7, #8]
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d307      	bcc.n	800bc7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f2      	bne.n	800bc5e <HAL_DMA_IRQHandler+0x2ca>
 800bc78:	e000      	b.n	800bc7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bc7a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	4798      	blx	r3
 800bc9c:	e000      	b.n	800bca0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800bc9e:	bf00      	nop
    }
  }
}
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop

0800bca8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bcb6:	b2db      	uxtb	r3, r3
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bcf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	2b40      	cmp	r3, #64	; 0x40
 800bd08:	d108      	bne.n	800bd1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bd1a:	e007      	b.n	800bd2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	60da      	str	r2, [r3, #12]
}
 800bd2c:	bf00      	nop
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	3b10      	subs	r3, #16
 800bd48:	4a14      	ldr	r2, [pc, #80]	; (800bd9c <DMA_CalcBaseAndBitshift+0x64>)
 800bd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4e:	091b      	lsrs	r3, r3, #4
 800bd50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bd52:	4a13      	ldr	r2, [pc, #76]	; (800bda0 <DMA_CalcBaseAndBitshift+0x68>)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	461a      	mov	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d909      	bls.n	800bd7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bd6e:	f023 0303 	bic.w	r3, r3, #3
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	659a      	str	r2, [r3, #88]	; 0x58
 800bd78:	e007      	b.n	800bd8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bd82:	f023 0303 	bic.w	r3, r3, #3
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	aaaaaaab 	.word	0xaaaaaaab
 800bda0:	0801ad54 	.word	0x0801ad54

0800bda4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdac:	2300      	movs	r3, #0
 800bdae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	699b      	ldr	r3, [r3, #24]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11f      	bne.n	800bdfe <DMA_CheckFifoParam+0x5a>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d856      	bhi.n	800be72 <DMA_CheckFifoParam+0xce>
 800bdc4:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <DMA_CheckFifoParam+0x28>)
 800bdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdca:	bf00      	nop
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800bdef 	.word	0x0800bdef
 800bdd4:	0800bddd 	.word	0x0800bddd
 800bdd8:	0800be73 	.word	0x0800be73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d046      	beq.n	800be76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bdec:	e043      	b.n	800be76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bdf6:	d140      	bne.n	800be7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bdfc:	e03d      	b.n	800be7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be06:	d121      	bne.n	800be4c <DMA_CheckFifoParam+0xa8>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d837      	bhi.n	800be7e <DMA_CheckFifoParam+0xda>
 800be0e:	a201      	add	r2, pc, #4	; (adr r2, 800be14 <DMA_CheckFifoParam+0x70>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be25 	.word	0x0800be25
 800be18:	0800be2b 	.word	0x0800be2b
 800be1c:	0800be25 	.word	0x0800be25
 800be20:	0800be3d 	.word	0x0800be3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	73fb      	strb	r3, [r7, #15]
      break;
 800be28:	e030      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be32:	2b00      	cmp	r3, #0
 800be34:	d025      	beq.n	800be82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be3a:	e022      	b.n	800be82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800be44:	d11f      	bne.n	800be86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800be4a:	e01c      	b.n	800be86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d903      	bls.n	800be5a <DMA_CheckFifoParam+0xb6>
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b03      	cmp	r3, #3
 800be56:	d003      	beq.n	800be60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800be58:	e018      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	73fb      	strb	r3, [r7, #15]
      break;
 800be5e:	e015      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00e      	beq.n	800be8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	73fb      	strb	r3, [r7, #15]
      break;
 800be70:	e00b      	b.n	800be8a <DMA_CheckFifoParam+0xe6>
      break;
 800be72:	bf00      	nop
 800be74:	e00a      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;
 800be76:	bf00      	nop
 800be78:	e008      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;
 800be7a:	bf00      	nop
 800be7c:	e006      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;
 800be7e:	bf00      	nop
 800be80:	e004      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;
 800be82:	bf00      	nop
 800be84:	e002      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;   
 800be86:	bf00      	nop
 800be88:	e000      	b.n	800be8c <DMA_CheckFifoParam+0xe8>
      break;
 800be8a:	bf00      	nop
    }
  } 
  
  return status; 
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop

0800be9c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800beae:	4b23      	ldr	r3, [pc, #140]	; (800bf3c <HAL_FLASH_Program+0xa0>)
 800beb0:	7e1b      	ldrb	r3, [r3, #24]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d101      	bne.n	800beba <HAL_FLASH_Program+0x1e>
 800beb6:	2302      	movs	r3, #2
 800beb8:	e03b      	b.n	800bf32 <HAL_FLASH_Program+0x96>
 800beba:	4b20      	ldr	r3, [pc, #128]	; (800bf3c <HAL_FLASH_Program+0xa0>)
 800bebc:	2201      	movs	r2, #1
 800bebe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bec4:	f000 f87c 	bl	800bfc0 <FLASH_WaitForLastOperation>
 800bec8:	4603      	mov	r3, r0
 800beca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d12b      	bne.n	800bf2a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d105      	bne.n	800bee4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800bed8:	783b      	ldrb	r3, [r7, #0]
 800beda:	4619      	mov	r1, r3
 800bedc:	68b8      	ldr	r0, [r7, #8]
 800bede:	f000 f927 	bl	800c130 <FLASH_Program_Byte>
 800bee2:	e016      	b.n	800bf12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d105      	bne.n	800bef6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800beea:	883b      	ldrh	r3, [r7, #0]
 800beec:	4619      	mov	r1, r3
 800beee:	68b8      	ldr	r0, [r7, #8]
 800bef0:	f000 f8fa 	bl	800c0e8 <FLASH_Program_HalfWord>
 800bef4:	e00d      	b.n	800bf12 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b02      	cmp	r3, #2
 800befa:	d105      	bne.n	800bf08 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	4619      	mov	r1, r3
 800bf00:	68b8      	ldr	r0, [r7, #8]
 800bf02:	f000 f8cf 	bl	800c0a4 <FLASH_Program_Word>
 800bf06:	e004      	b.n	800bf12 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800bf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf0c:	68b8      	ldr	r0, [r7, #8]
 800bf0e:	f000 f897 	bl	800c040 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bf12:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bf16:	f000 f853 	bl	800bfc0 <FLASH_WaitForLastOperation>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800bf1e:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <HAL_FLASH_Program+0xa4>)
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	4a07      	ldr	r2, [pc, #28]	; (800bf40 <HAL_FLASH_Program+0xa4>)
 800bf24:	f023 0301 	bic.w	r3, r3, #1
 800bf28:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bf2a:	4b04      	ldr	r3, [pc, #16]	; (800bf3c <HAL_FLASH_Program+0xa0>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	761a      	strb	r2, [r3, #24]
  
  return status;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20008a1c 	.word	0x20008a1c
 800bf40:	40023c00 	.word	0x40023c00

0800bf44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bf4e:	4b0b      	ldr	r3, [pc, #44]	; (800bf7c <HAL_FLASH_Unlock+0x38>)
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da0b      	bge.n	800bf6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bf56:	4b09      	ldr	r3, [pc, #36]	; (800bf7c <HAL_FLASH_Unlock+0x38>)
 800bf58:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <HAL_FLASH_Unlock+0x3c>)
 800bf5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800bf5c:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <HAL_FLASH_Unlock+0x38>)
 800bf5e:	4a09      	ldr	r2, [pc, #36]	; (800bf84 <HAL_FLASH_Unlock+0x40>)
 800bf60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bf62:	4b06      	ldr	r3, [pc, #24]	; (800bf7c <HAL_FLASH_Unlock+0x38>)
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	da01      	bge.n	800bf6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800bf6e:	79fb      	ldrb	r3, [r7, #7]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	40023c00 	.word	0x40023c00
 800bf80:	45670123 	.word	0x45670123
 800bf84:	cdef89ab 	.word	0xcdef89ab

0800bf88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800bf8c:	4b05      	ldr	r3, [pc, #20]	; (800bfa4 <HAL_FLASH_Lock+0x1c>)
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	4a04      	ldr	r2, [pc, #16]	; (800bfa4 <HAL_FLASH_Lock+0x1c>)
 800bf92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	40023c00 	.word	0x40023c00

0800bfa8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800bfa8:	b480      	push	{r7}
 800bfaa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800bfac:	4b03      	ldr	r3, [pc, #12]	; (800bfbc <HAL_FLASH_GetError+0x14>)
 800bfae:	69db      	ldr	r3, [r3, #28]
}  
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	20008a1c 	.word	0x20008a1c

0800bfc0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bfcc:	4b1a      	ldr	r3, [pc, #104]	; (800c038 <FLASH_WaitForLastOperation+0x78>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800bfd2:	f7fe fb5b 	bl	800a68c <HAL_GetTick>
 800bfd6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800bfd8:	e010      	b.n	800bffc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfe0:	d00c      	beq.n	800bffc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d007      	beq.n	800bff8 <FLASH_WaitForLastOperation+0x38>
 800bfe8:	f7fe fb50 	bl	800a68c <HAL_GetTick>
 800bfec:	4602      	mov	r2, r0
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d201      	bcs.n	800bffc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e019      	b.n	800c030 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800bffc:	4b0f      	ldr	r3, [pc, #60]	; (800c03c <FLASH_WaitForLastOperation+0x7c>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c004:	2b00      	cmp	r3, #0
 800c006:	d1e8      	bne.n	800bfda <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800c008:	4b0c      	ldr	r3, [pc, #48]	; (800c03c <FLASH_WaitForLastOperation+0x7c>)
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 0301 	and.w	r3, r3, #1
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c014:	4b09      	ldr	r3, [pc, #36]	; (800c03c <FLASH_WaitForLastOperation+0x7c>)
 800c016:	2201      	movs	r2, #1
 800c018:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800c01a:	4b08      	ldr	r3, [pc, #32]	; (800c03c <FLASH_WaitForLastOperation+0x7c>)
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800c026:	f000 f8a5 	bl	800c174 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800c02e:	2300      	movs	r3, #0
  
}  
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20008a1c 	.word	0x20008a1c
 800c03c:	40023c00 	.word	0x40023c00

0800c040 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c04c:	4b14      	ldr	r3, [pc, #80]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	4a13      	ldr	r2, [pc, #76]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c058:	4b11      	ldr	r3, [pc, #68]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	4a10      	ldr	r2, [pc, #64]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c05e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c064:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	4a0d      	ldr	r2, [pc, #52]	; (800c0a0 <FLASH_Program_DoubleWord+0x60>)
 800c06a:	f043 0301 	orr.w	r3, r3, #1
 800c06e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c076:	f3bf 8f6f 	isb	sy
}
 800c07a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800c07c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	f04f 0300 	mov.w	r3, #0
 800c088:	000a      	movs	r2, r1
 800c08a:	2300      	movs	r3, #0
 800c08c:	68f9      	ldr	r1, [r7, #12]
 800c08e:	3104      	adds	r1, #4
 800c090:	4613      	mov	r3, r2
 800c092:	600b      	str	r3, [r1, #0]
}
 800c094:	bf00      	nop
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	40023c00 	.word	0x40023c00

0800c0a4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	4a0c      	ldr	r2, [pc, #48]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800c0ba:	4b0a      	ldr	r3, [pc, #40]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	4a09      	ldr	r2, [pc, #36]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c0c6:	4b07      	ldr	r3, [pc, #28]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0c8:	691b      	ldr	r3, [r3, #16]
 800c0ca:	4a06      	ldr	r2, [pc, #24]	; (800c0e4 <FLASH_Program_Word+0x40>)
 800c0cc:	f043 0301 	orr.w	r3, r3, #1
 800c0d0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	601a      	str	r2, [r3, #0]
}
 800c0d8:	bf00      	nop
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	40023c00 	.word	0x40023c00

0800c0e8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	4a0c      	ldr	r2, [pc, #48]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c100:	4b0a      	ldr	r3, [pc, #40]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	4a09      	ldr	r2, [pc, #36]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c10a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c10c:	4b07      	ldr	r3, [pc, #28]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	4a06      	ldr	r2, [pc, #24]	; (800c12c <FLASH_Program_HalfWord+0x44>)
 800c112:	f043 0301 	orr.w	r3, r3, #1
 800c116:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	887a      	ldrh	r2, [r7, #2]
 800c11c:	801a      	strh	r2, [r3, #0]
}
 800c11e:	bf00      	nop
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	40023c00 	.word	0x40023c00

0800c130 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	460b      	mov	r3, r1
 800c13a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c13c:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	4a0b      	ldr	r2, [pc, #44]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800c148:	4b09      	ldr	r3, [pc, #36]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c14a:	4a09      	ldr	r2, [pc, #36]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	4a06      	ldr	r2, [pc, #24]	; (800c170 <FLASH_Program_Byte+0x40>)
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	701a      	strb	r2, [r3, #0]
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	40023c00 	.word	0x40023c00

0800c174 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800c174:	b480      	push	{r7}
 800c176:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800c178:	4b27      	ldr	r3, [pc, #156]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f003 0310 	and.w	r3, r3, #16
 800c180:	2b00      	cmp	r3, #0
 800c182:	d008      	beq.n	800c196 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f043 0310 	orr.w	r3, r3, #16
 800c18c:	4a23      	ldr	r2, [pc, #140]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c18e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800c190:	4b21      	ldr	r3, [pc, #132]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c192:	2210      	movs	r2, #16
 800c194:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800c196:	4b20      	ldr	r3, [pc, #128]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	f003 0320 	and.w	r3, r3, #32
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800c1a2:	4b1e      	ldr	r3, [pc, #120]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	f043 0308 	orr.w	r3, r3, #8
 800c1aa:	4a1c      	ldr	r2, [pc, #112]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1ac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c1ae:	4b1a      	ldr	r3, [pc, #104]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c1b4:	4b18      	ldr	r3, [pc, #96]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d008      	beq.n	800c1d2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c1c0:	4b16      	ldr	r3, [pc, #88]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	f043 0304 	orr.w	r3, r3, #4
 800c1c8:	4a14      	ldr	r2, [pc, #80]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c1cc:	4b12      	ldr	r3, [pc, #72]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1ce:	2240      	movs	r2, #64	; 0x40
 800c1d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c1d2:	4b11      	ldr	r3, [pc, #68]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d008      	beq.n	800c1f0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c1de:	4b0f      	ldr	r3, [pc, #60]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	f043 0302 	orr.w	r3, r3, #2
 800c1e6:	4a0d      	ldr	r2, [pc, #52]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1e8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c1ea:	4b0b      	ldr	r3, [pc, #44]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1ec:	2280      	movs	r2, #128	; 0x80
 800c1ee:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c1f0:	4b09      	ldr	r3, [pc, #36]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d008      	beq.n	800c20e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	f043 0320 	orr.w	r3, r3, #32
 800c204:	4a05      	ldr	r2, [pc, #20]	; (800c21c <FLASH_SetErrorCode+0xa8>)
 800c206:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c208:	4b03      	ldr	r3, [pc, #12]	; (800c218 <FLASH_SetErrorCode+0xa4>)
 800c20a:	2202      	movs	r2, #2
 800c20c:	60da      	str	r2, [r3, #12]
  }
}
 800c20e:	bf00      	nop
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	40023c00 	.word	0x40023c00
 800c21c:	20008a1c 	.word	0x20008a1c

0800c220 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800c22e:	2300      	movs	r3, #0
 800c230:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c232:	4b31      	ldr	r3, [pc, #196]	; (800c2f8 <HAL_FLASHEx_Erase+0xd8>)
 800c234:	7e1b      	ldrb	r3, [r3, #24]
 800c236:	2b01      	cmp	r3, #1
 800c238:	d101      	bne.n	800c23e <HAL_FLASHEx_Erase+0x1e>
 800c23a:	2302      	movs	r3, #2
 800c23c:	e058      	b.n	800c2f0 <HAL_FLASHEx_Erase+0xd0>
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <HAL_FLASHEx_Erase+0xd8>)
 800c240:	2201      	movs	r2, #1
 800c242:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c244:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c248:	f7ff feba 	bl	800bfc0 <FLASH_WaitForLastOperation>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d148      	bne.n	800c2e8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c25c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d115      	bne.n	800c292 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f000 f844 	bl	800c300 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c278:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c27c:	f7ff fea0 	bl	800bfc0 <FLASH_WaitForLastOperation>
 800c280:	4603      	mov	r3, r0
 800c282:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800c284:	4b1d      	ldr	r3, [pc, #116]	; (800c2fc <HAL_FLASHEx_Erase+0xdc>)
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	4a1c      	ldr	r2, [pc, #112]	; (800c2fc <HAL_FLASHEx_Erase+0xdc>)
 800c28a:	f023 0304 	bic.w	r3, r3, #4
 800c28e:	6113      	str	r3, [r2, #16]
 800c290:	e028      	b.n	800c2e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	60bb      	str	r3, [r7, #8]
 800c298:	e01c      	b.n	800c2d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	68b8      	ldr	r0, [r7, #8]
 800c2a4:	f000 f850 	bl	800c348 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c2a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c2ac:	f7ff fe88 	bl	800bfc0 <FLASH_WaitForLastOperation>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800c2b4:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <HAL_FLASHEx_Erase+0xdc>)
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	4a10      	ldr	r2, [pc, #64]	; (800c2fc <HAL_FLASHEx_Erase+0xdc>)
 800c2ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c2be:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	601a      	str	r2, [r3, #0]
          break;
 800c2cc:	e00a      	b.n	800c2e4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	60bb      	str	r3, [r7, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68da      	ldr	r2, [r3, #12]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d3da      	bcc.n	800c29a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800c2e4:	f000 f878 	bl	800c3d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c2e8:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <HAL_FLASHEx_Erase+0xd8>)
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	761a      	strb	r2, [r3, #24]

  return status;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20008a1c 	.word	0x20008a1c
 800c2fc:	40023c00 	.word	0x40023c00

0800c300 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800c300:	b480      	push	{r7}
 800c302:	b083      	sub	sp, #12
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	6039      	str	r1, [r7, #0]
 800c30a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c30c:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <FLASH_MassErase+0x44>)
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	4a0c      	ldr	r2, [pc, #48]	; (800c344 <FLASH_MassErase+0x44>)
 800c312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c316:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800c318:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <FLASH_MassErase+0x44>)
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	4a09      	ldr	r2, [pc, #36]	; (800c344 <FLASH_MassErase+0x44>)
 800c31e:	f043 0304 	orr.w	r3, r3, #4
 800c322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800c324:	4b07      	ldr	r3, [pc, #28]	; (800c344 <FLASH_MassErase+0x44>)
 800c326:	691a      	ldr	r2, [r3, #16]
 800c328:	79fb      	ldrb	r3, [r7, #7]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	4313      	orrs	r3, r2
 800c32e:	4a05      	ldr	r2, [pc, #20]	; (800c344 <FLASH_MassErase+0x44>)
 800c330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c334:	6113      	str	r3, [r2, #16]
}
 800c336:	bf00      	nop
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	40023c00 	.word	0x40023c00

0800c348 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c348:	b480      	push	{r7}
 800c34a:	b085      	sub	sp, #20
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	460b      	mov	r3, r1
 800c352:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c354:	2300      	movs	r3, #0
 800c356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c358:	78fb      	ldrb	r3, [r7, #3]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d102      	bne.n	800c364 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	e010      	b.n	800c386 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d103      	bne.n	800c372 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c36e:	60fb      	str	r3, [r7, #12]
 800c370:	e009      	b.n	800c386 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c372:	78fb      	ldrb	r3, [r7, #3]
 800c374:	2b02      	cmp	r3, #2
 800c376:	d103      	bne.n	800c380 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	e002      	b.n	800c386 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c380:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c384:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c386:	4b13      	ldr	r3, [pc, #76]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c388:	691b      	ldr	r3, [r3, #16]
 800c38a:	4a12      	ldr	r2, [pc, #72]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c390:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c392:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c394:	691a      	ldr	r2, [r3, #16]
 800c396:	490f      	ldr	r1, [pc, #60]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c39e:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	4a0c      	ldr	r2, [pc, #48]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c3a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c3aa:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3ac:	691a      	ldr	r2, [r3, #16]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	4a07      	ldr	r2, [pc, #28]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3b6:	f043 0302 	orr.w	r3, r3, #2
 800c3ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	4a04      	ldr	r2, [pc, #16]	; (800c3d4 <FLASH_Erase_Sector+0x8c>)
 800c3c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3c6:	6113      	str	r3, [r2, #16]
}
 800c3c8:	bf00      	nop
 800c3ca:	3714      	adds	r7, #20
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr
 800c3d4:	40023c00 	.word	0x40023c00

0800c3d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800c3dc:	4b20      	ldr	r3, [pc, #128]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d017      	beq.n	800c418 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c3e8:	4b1d      	ldr	r3, [pc, #116]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a1c      	ldr	r2, [pc, #112]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c3ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c3f4:	4b1a      	ldr	r3, [pc, #104]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a19      	ldr	r2, [pc, #100]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c3fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	4b17      	ldr	r3, [pc, #92]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a16      	ldr	r2, [pc, #88]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c40a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c40c:	4b14      	ldr	r3, [pc, #80]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a13      	ldr	r2, [pc, #76]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c416:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800c418:	4b11      	ldr	r3, [pc, #68]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c420:	2b00      	cmp	r3, #0
 800c422:	d017      	beq.n	800c454 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800c424:	4b0e      	ldr	r3, [pc, #56]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a0d      	ldr	r2, [pc, #52]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c42a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c42e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c430:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a0a      	ldr	r2, [pc, #40]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	4b08      	ldr	r3, [pc, #32]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a07      	ldr	r2, [pc, #28]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c446:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c448:	4b05      	ldr	r3, [pc, #20]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a04      	ldr	r2, [pc, #16]	; (800c460 <FLASH_FlushCaches+0x88>)
 800c44e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c452:	6013      	str	r3, [r2, #0]
  }
}
 800c454:	bf00      	nop
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	40023c00 	.word	0x40023c00

0800c464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c464:	b480      	push	{r7}
 800c466:	b089      	sub	sp, #36	; 0x24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c46e:	2300      	movs	r3, #0
 800c470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c472:	2300      	movs	r3, #0
 800c474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c476:	2300      	movs	r3, #0
 800c478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c47a:	2300      	movs	r3, #0
 800c47c:	61fb      	str	r3, [r7, #28]
 800c47e:	e16b      	b.n	800c758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c480:	2201      	movs	r2, #1
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	fa02 f303 	lsl.w	r3, r2, r3
 800c488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	4013      	ands	r3, r2
 800c492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	429a      	cmp	r2, r3
 800c49a:	f040 815a 	bne.w	800c752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d00b      	beq.n	800c4be <HAL_GPIO_Init+0x5a>
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d007      	beq.n	800c4be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c4b2:	2b11      	cmp	r3, #17
 800c4b4:	d003      	beq.n	800c4be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	2b12      	cmp	r3, #18
 800c4bc:	d130      	bne.n	800c520 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ce:	43db      	mvns	r3, r3
 800c4d0:	69ba      	ldr	r2, [r7, #24]
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	68da      	ldr	r2, [r3, #12]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4fc:	43db      	mvns	r3, r3
 800c4fe:	69ba      	ldr	r2, [r7, #24]
 800c500:	4013      	ands	r3, r2
 800c502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	091b      	lsrs	r3, r3, #4
 800c50a:	f003 0201 	and.w	r2, r3, #1
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	fa02 f303 	lsl.w	r3, r2, r3
 800c514:	69ba      	ldr	r2, [r7, #24]
 800c516:	4313      	orrs	r3, r2
 800c518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	2203      	movs	r2, #3
 800c52c:	fa02 f303 	lsl.w	r3, r2, r3
 800c530:	43db      	mvns	r3, r3
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	4013      	ands	r3, r2
 800c536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	689a      	ldr	r2, [r3, #8]
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	fa02 f303 	lsl.w	r3, r2, r3
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	4313      	orrs	r3, r2
 800c548:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69ba      	ldr	r2, [r7, #24]
 800c54e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	2b02      	cmp	r3, #2
 800c556:	d003      	beq.n	800c560 <HAL_GPIO_Init+0xfc>
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	2b12      	cmp	r3, #18
 800c55e:	d123      	bne.n	800c5a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	08da      	lsrs	r2, r3, #3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3208      	adds	r2, #8
 800c568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	f003 0307 	and.w	r3, r3, #7
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	220f      	movs	r2, #15
 800c578:	fa02 f303 	lsl.w	r3, r2, r3
 800c57c:	43db      	mvns	r3, r3
 800c57e:	69ba      	ldr	r2, [r7, #24]
 800c580:	4013      	ands	r3, r2
 800c582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	691a      	ldr	r2, [r3, #16]
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	fa02 f303 	lsl.w	r3, r2, r3
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	4313      	orrs	r3, r2
 800c598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	08da      	lsrs	r2, r3, #3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3208      	adds	r2, #8
 800c5a2:	69b9      	ldr	r1, [r7, #24]
 800c5a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	005b      	lsls	r3, r3, #1
 800c5b2:	2203      	movs	r2, #3
 800c5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b8:	43db      	mvns	r3, r3
 800c5ba:	69ba      	ldr	r2, [r7, #24]
 800c5bc:	4013      	ands	r3, r2
 800c5be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	f003 0203 	and.w	r2, r3, #3
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	005b      	lsls	r3, r3, #1
 800c5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 80b4 	beq.w	800c752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	4b60      	ldr	r3, [pc, #384]	; (800c770 <HAL_GPIO_Init+0x30c>)
 800c5f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5f2:	4a5f      	ldr	r2, [pc, #380]	; (800c770 <HAL_GPIO_Init+0x30c>)
 800c5f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5f8:	6453      	str	r3, [r2, #68]	; 0x44
 800c5fa:	4b5d      	ldr	r3, [pc, #372]	; (800c770 <HAL_GPIO_Init+0x30c>)
 800c5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c606:	4a5b      	ldr	r2, [pc, #364]	; (800c774 <HAL_GPIO_Init+0x310>)
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	089b      	lsrs	r3, r3, #2
 800c60c:	3302      	adds	r3, #2
 800c60e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	f003 0303 	and.w	r3, r3, #3
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	220f      	movs	r2, #15
 800c61e:	fa02 f303 	lsl.w	r3, r2, r3
 800c622:	43db      	mvns	r3, r3
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	4013      	ands	r3, r2
 800c628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a52      	ldr	r2, [pc, #328]	; (800c778 <HAL_GPIO_Init+0x314>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d02b      	beq.n	800c68a <HAL_GPIO_Init+0x226>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a51      	ldr	r2, [pc, #324]	; (800c77c <HAL_GPIO_Init+0x318>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d025      	beq.n	800c686 <HAL_GPIO_Init+0x222>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a50      	ldr	r2, [pc, #320]	; (800c780 <HAL_GPIO_Init+0x31c>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d01f      	beq.n	800c682 <HAL_GPIO_Init+0x21e>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a4f      	ldr	r2, [pc, #316]	; (800c784 <HAL_GPIO_Init+0x320>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d019      	beq.n	800c67e <HAL_GPIO_Init+0x21a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a4e      	ldr	r2, [pc, #312]	; (800c788 <HAL_GPIO_Init+0x324>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d013      	beq.n	800c67a <HAL_GPIO_Init+0x216>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a4d      	ldr	r2, [pc, #308]	; (800c78c <HAL_GPIO_Init+0x328>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d00d      	beq.n	800c676 <HAL_GPIO_Init+0x212>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a4c      	ldr	r2, [pc, #304]	; (800c790 <HAL_GPIO_Init+0x32c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d007      	beq.n	800c672 <HAL_GPIO_Init+0x20e>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a4b      	ldr	r2, [pc, #300]	; (800c794 <HAL_GPIO_Init+0x330>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d101      	bne.n	800c66e <HAL_GPIO_Init+0x20a>
 800c66a:	2307      	movs	r3, #7
 800c66c:	e00e      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c66e:	2308      	movs	r3, #8
 800c670:	e00c      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c672:	2306      	movs	r3, #6
 800c674:	e00a      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c676:	2305      	movs	r3, #5
 800c678:	e008      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c67a:	2304      	movs	r3, #4
 800c67c:	e006      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c67e:	2303      	movs	r3, #3
 800c680:	e004      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c682:	2302      	movs	r3, #2
 800c684:	e002      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c686:	2301      	movs	r3, #1
 800c688:	e000      	b.n	800c68c <HAL_GPIO_Init+0x228>
 800c68a:	2300      	movs	r3, #0
 800c68c:	69fa      	ldr	r2, [r7, #28]
 800c68e:	f002 0203 	and.w	r2, r2, #3
 800c692:	0092      	lsls	r2, r2, #2
 800c694:	4093      	lsls	r3, r2
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	4313      	orrs	r3, r2
 800c69a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c69c:	4935      	ldr	r1, [pc, #212]	; (800c774 <HAL_GPIO_Init+0x310>)
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	089b      	lsrs	r3, r3, #2
 800c6a2:	3302      	adds	r3, #2
 800c6a4:	69ba      	ldr	r2, [r7, #24]
 800c6a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c6aa:	4b3b      	ldr	r3, [pc, #236]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	43db      	mvns	r3, r3
 800c6b4:	69ba      	ldr	r2, [r7, #24]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	685b      	ldr	r3, [r3, #4]
 800c6be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d003      	beq.n	800c6ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c6ce:	4a32      	ldr	r2, [pc, #200]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c6d0:	69bb      	ldr	r3, [r7, #24]
 800c6d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c6d4:	4b30      	ldr	r3, [pc, #192]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	43db      	mvns	r3, r3
 800c6de:	69ba      	ldr	r2, [r7, #24]
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d003      	beq.n	800c6f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c6f0:	69ba      	ldr	r2, [r7, #24]
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c6f8:	4a27      	ldr	r2, [pc, #156]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c6fe:	4b26      	ldr	r3, [pc, #152]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	43db      	mvns	r3, r3
 800c708:	69ba      	ldr	r2, [r7, #24]
 800c70a:	4013      	ands	r3, r2
 800c70c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c71a:	69ba      	ldr	r2, [r7, #24]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	4313      	orrs	r3, r2
 800c720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c722:	4a1d      	ldr	r2, [pc, #116]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c728:	4b1b      	ldr	r3, [pc, #108]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	43db      	mvns	r3, r3
 800c732:	69ba      	ldr	r2, [r7, #24]
 800c734:	4013      	ands	r3, r2
 800c736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c744:	69ba      	ldr	r2, [r7, #24]
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	4313      	orrs	r3, r2
 800c74a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c74c:	4a12      	ldr	r2, [pc, #72]	; (800c798 <HAL_GPIO_Init+0x334>)
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	3301      	adds	r3, #1
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	2b0f      	cmp	r3, #15
 800c75c:	f67f ae90 	bls.w	800c480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	3724      	adds	r7, #36	; 0x24
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	40023800 	.word	0x40023800
 800c774:	40013800 	.word	0x40013800
 800c778:	40020000 	.word	0x40020000
 800c77c:	40020400 	.word	0x40020400
 800c780:	40020800 	.word	0x40020800
 800c784:	40020c00 	.word	0x40020c00
 800c788:	40021000 	.word	0x40021000
 800c78c:	40021400 	.word	0x40021400
 800c790:	40021800 	.word	0x40021800
 800c794:	40021c00 	.word	0x40021c00
 800c798:	40013c00 	.word	0x40013c00

0800c79c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	e0cd      	b.n	800c954 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	f040 80bd 	bne.w	800c94e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c7d4:	4a65      	ldr	r2, [pc, #404]	; (800c96c <HAL_GPIO_DeInit+0x1d0>)
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	089b      	lsrs	r3, r3, #2
 800c7da:	3302      	adds	r3, #2
 800c7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f003 0303 	and.w	r3, r3, #3
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	220f      	movs	r2, #15
 800c7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a5d      	ldr	r2, [pc, #372]	; (800c970 <HAL_GPIO_DeInit+0x1d4>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d02b      	beq.n	800c856 <HAL_GPIO_DeInit+0xba>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a5c      	ldr	r2, [pc, #368]	; (800c974 <HAL_GPIO_DeInit+0x1d8>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d025      	beq.n	800c852 <HAL_GPIO_DeInit+0xb6>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a5b      	ldr	r2, [pc, #364]	; (800c978 <HAL_GPIO_DeInit+0x1dc>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d01f      	beq.n	800c84e <HAL_GPIO_DeInit+0xb2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a5a      	ldr	r2, [pc, #360]	; (800c97c <HAL_GPIO_DeInit+0x1e0>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d019      	beq.n	800c84a <HAL_GPIO_DeInit+0xae>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a59      	ldr	r2, [pc, #356]	; (800c980 <HAL_GPIO_DeInit+0x1e4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d013      	beq.n	800c846 <HAL_GPIO_DeInit+0xaa>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a58      	ldr	r2, [pc, #352]	; (800c984 <HAL_GPIO_DeInit+0x1e8>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d00d      	beq.n	800c842 <HAL_GPIO_DeInit+0xa6>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a57      	ldr	r2, [pc, #348]	; (800c988 <HAL_GPIO_DeInit+0x1ec>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d007      	beq.n	800c83e <HAL_GPIO_DeInit+0xa2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a56      	ldr	r2, [pc, #344]	; (800c98c <HAL_GPIO_DeInit+0x1f0>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d101      	bne.n	800c83a <HAL_GPIO_DeInit+0x9e>
 800c836:	2307      	movs	r3, #7
 800c838:	e00e      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c83a:	2308      	movs	r3, #8
 800c83c:	e00c      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c83e:	2306      	movs	r3, #6
 800c840:	e00a      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c842:	2305      	movs	r3, #5
 800c844:	e008      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c846:	2304      	movs	r3, #4
 800c848:	e006      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c84a:	2303      	movs	r3, #3
 800c84c:	e004      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c84e:	2302      	movs	r3, #2
 800c850:	e002      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c852:	2301      	movs	r3, #1
 800c854:	e000      	b.n	800c858 <HAL_GPIO_DeInit+0xbc>
 800c856:	2300      	movs	r3, #0
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	f002 0203 	and.w	r2, r2, #3
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	4093      	lsls	r3, r2
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	429a      	cmp	r2, r3
 800c866:	d132      	bne.n	800c8ce <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c868:	4b49      	ldr	r3, [pc, #292]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	43db      	mvns	r3, r3
 800c870:	4947      	ldr	r1, [pc, #284]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c872:	4013      	ands	r3, r2
 800c874:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c876:	4b46      	ldr	r3, [pc, #280]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	43db      	mvns	r3, r3
 800c87e:	4944      	ldr	r1, [pc, #272]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c880:	4013      	ands	r3, r2
 800c882:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c884:	4b42      	ldr	r3, [pc, #264]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c886:	689a      	ldr	r2, [r3, #8]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	43db      	mvns	r3, r3
 800c88c:	4940      	ldr	r1, [pc, #256]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c88e:	4013      	ands	r3, r2
 800c890:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c892:	4b3f      	ldr	r3, [pc, #252]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c894:	68da      	ldr	r2, [r3, #12]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	43db      	mvns	r3, r3
 800c89a:	493d      	ldr	r1, [pc, #244]	; (800c990 <HAL_GPIO_DeInit+0x1f4>)
 800c89c:	4013      	ands	r3, r2
 800c89e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f003 0303 	and.w	r3, r3, #3
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	220f      	movs	r2, #15
 800c8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c8b0:	4a2e      	ldr	r2, [pc, #184]	; (800c96c <HAL_GPIO_DeInit+0x1d0>)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	089b      	lsrs	r3, r3, #2
 800c8b6:	3302      	adds	r3, #2
 800c8b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	43da      	mvns	r2, r3
 800c8c0:	482a      	ldr	r0, [pc, #168]	; (800c96c <HAL_GPIO_DeInit+0x1d0>)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	089b      	lsrs	r3, r3, #2
 800c8c6:	400a      	ands	r2, r1
 800c8c8:	3302      	adds	r3, #2
 800c8ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	2103      	movs	r1, #3
 800c8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c8dc:	43db      	mvns	r3, r3
 800c8de:	401a      	ands	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	08da      	lsrs	r2, r3, #3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3208      	adds	r2, #8
 800c8ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f003 0307 	and.w	r3, r3, #7
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	220f      	movs	r2, #15
 800c8fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fe:	43db      	mvns	r3, r3
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	08d2      	lsrs	r2, r2, #3
 800c904:	4019      	ands	r1, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3208      	adds	r2, #8
 800c90a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	2103      	movs	r1, #3
 800c918:	fa01 f303 	lsl.w	r3, r1, r3
 800c91c:	43db      	mvns	r3, r3
 800c91e:	401a      	ands	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685a      	ldr	r2, [r3, #4]
 800c928:	2101      	movs	r1, #1
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	fa01 f303 	lsl.w	r3, r1, r3
 800c930:	43db      	mvns	r3, r3
 800c932:	401a      	ands	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	2103      	movs	r1, #3
 800c942:	fa01 f303 	lsl.w	r3, r1, r3
 800c946:	43db      	mvns	r3, r3
 800c948:	401a      	ands	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	3301      	adds	r3, #1
 800c952:	617b      	str	r3, [r7, #20]
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	2b0f      	cmp	r3, #15
 800c958:	f67f af2e 	bls.w	800c7b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c95c:	bf00      	nop
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	40013800 	.word	0x40013800
 800c970:	40020000 	.word	0x40020000
 800c974:	40020400 	.word	0x40020400
 800c978:	40020800 	.word	0x40020800
 800c97c:	40020c00 	.word	0x40020c00
 800c980:	40021000 	.word	0x40021000
 800c984:	40021400 	.word	0x40021400
 800c988:	40021800 	.word	0x40021800
 800c98c:	40021c00 	.word	0x40021c00
 800c990:	40013c00 	.word	0x40013c00

0800c994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	460b      	mov	r3, r1
 800c99e:	807b      	strh	r3, [r7, #2]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c9a4:	787b      	ldrb	r3, [r7, #1]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d003      	beq.n	800c9b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c9aa:	887a      	ldrh	r2, [r7, #2]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c9b0:	e003      	b.n	800c9ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c9b2:	887b      	ldrh	r3, [r7, #2]
 800c9b4:	041a      	lsls	r2, r3, #16
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	619a      	str	r2, [r3, #24]
}
 800c9ba:	bf00      	nop
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr
	...

0800c9c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d101      	bne.n	800c9da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	e12b      	b.n	800cc32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f7f5 f866 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2224      	movs	r2, #36	; 0x24
 800c9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f022 0201 	bic.w	r2, r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ca2c:	f002 fc64 	bl	800f2f8 <HAL_RCC_GetPCLK1Freq>
 800ca30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	4a81      	ldr	r2, [pc, #516]	; (800cc3c <HAL_I2C_Init+0x274>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d807      	bhi.n	800ca4c <HAL_I2C_Init+0x84>
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4a80      	ldr	r2, [pc, #512]	; (800cc40 <HAL_I2C_Init+0x278>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	bf94      	ite	ls
 800ca44:	2301      	movls	r3, #1
 800ca46:	2300      	movhi	r3, #0
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	e006      	b.n	800ca5a <HAL_I2C_Init+0x92>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4a7d      	ldr	r2, [pc, #500]	; (800cc44 <HAL_I2C_Init+0x27c>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	bf94      	ite	ls
 800ca54:	2301      	movls	r3, #1
 800ca56:	2300      	movhi	r3, #0
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d001      	beq.n	800ca62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e0e7      	b.n	800cc32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	4a78      	ldr	r2, [pc, #480]	; (800cc48 <HAL_I2C_Init+0x280>)
 800ca66:	fba2 2303 	umull	r2, r3, r2, r3
 800ca6a:	0c9b      	lsrs	r3, r3, #18
 800ca6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	4a6a      	ldr	r2, [pc, #424]	; (800cc3c <HAL_I2C_Init+0x274>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d802      	bhi.n	800ca9c <HAL_I2C_Init+0xd4>
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	e009      	b.n	800cab0 <HAL_I2C_Init+0xe8>
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800caa2:	fb02 f303 	mul.w	r3, r2, r3
 800caa6:	4a69      	ldr	r2, [pc, #420]	; (800cc4c <HAL_I2C_Init+0x284>)
 800caa8:	fba2 2303 	umull	r2, r3, r2, r3
 800caac:	099b      	lsrs	r3, r3, #6
 800caae:	3301      	adds	r3, #1
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	6812      	ldr	r2, [r2, #0]
 800cab4:	430b      	orrs	r3, r1
 800cab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	69db      	ldr	r3, [r3, #28]
 800cabe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	495c      	ldr	r1, [pc, #368]	; (800cc3c <HAL_I2C_Init+0x274>)
 800cacc:	428b      	cmp	r3, r1
 800cace:	d819      	bhi.n	800cb04 <HAL_I2C_Init+0x13c>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	1e59      	subs	r1, r3, #1
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	005b      	lsls	r3, r3, #1
 800cada:	fbb1 f3f3 	udiv	r3, r1, r3
 800cade:	1c59      	adds	r1, r3, #1
 800cae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cae4:	400b      	ands	r3, r1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00a      	beq.n	800cb00 <HAL_I2C_Init+0x138>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	1e59      	subs	r1, r3, #1
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	fbb1 f3f3 	udiv	r3, r1, r3
 800caf8:	3301      	adds	r3, #1
 800cafa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cafe:	e051      	b.n	800cba4 <HAL_I2C_Init+0x1dc>
 800cb00:	2304      	movs	r3, #4
 800cb02:	e04f      	b.n	800cba4 <HAL_I2C_Init+0x1dc>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d111      	bne.n	800cb30 <HAL_I2C_Init+0x168>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	1e58      	subs	r0, r3, #1
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6859      	ldr	r1, [r3, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	005b      	lsls	r3, r3, #1
 800cb18:	440b      	add	r3, r1
 800cb1a:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb1e:	3301      	adds	r3, #1
 800cb20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	bf0c      	ite	eq
 800cb28:	2301      	moveq	r3, #1
 800cb2a:	2300      	movne	r3, #0
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	e012      	b.n	800cb56 <HAL_I2C_Init+0x18e>
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	1e58      	subs	r0, r3, #1
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6859      	ldr	r1, [r3, #4]
 800cb38:	460b      	mov	r3, r1
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	440b      	add	r3, r1
 800cb3e:	0099      	lsls	r1, r3, #2
 800cb40:	440b      	add	r3, r1
 800cb42:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb46:	3301      	adds	r3, #1
 800cb48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bf0c      	ite	eq
 800cb50:	2301      	moveq	r3, #1
 800cb52:	2300      	movne	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d001      	beq.n	800cb5e <HAL_I2C_Init+0x196>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e022      	b.n	800cba4 <HAL_I2C_Init+0x1dc>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d10e      	bne.n	800cb84 <HAL_I2C_Init+0x1bc>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	1e58      	subs	r0, r3, #1
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6859      	ldr	r1, [r3, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	005b      	lsls	r3, r3, #1
 800cb72:	440b      	add	r3, r1
 800cb74:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb78:	3301      	adds	r3, #1
 800cb7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb82:	e00f      	b.n	800cba4 <HAL_I2C_Init+0x1dc>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	1e58      	subs	r0, r3, #1
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6859      	ldr	r1, [r3, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	440b      	add	r3, r1
 800cb92:	0099      	lsls	r1, r3, #2
 800cb94:	440b      	add	r3, r1
 800cb96:	fbb0 f3f3 	udiv	r3, r0, r3
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cba4:	6879      	ldr	r1, [r7, #4]
 800cba6:	6809      	ldr	r1, [r1, #0]
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	69da      	ldr	r2, [r3, #28]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	430a      	orrs	r2, r1
 800cbc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800cbd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	6911      	ldr	r1, [r2, #16]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	68d2      	ldr	r2, [r2, #12]
 800cbde:	4311      	orrs	r1, r2
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	6812      	ldr	r2, [r2, #0]
 800cbe4:	430b      	orrs	r3, r1
 800cbe6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	695a      	ldr	r2, [r3, #20]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	430a      	orrs	r2, r1
 800cc02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f042 0201 	orr.w	r2, r2, #1
 800cc12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2220      	movs	r2, #32
 800cc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	000186a0 	.word	0x000186a0
 800cc40:	001e847f 	.word	0x001e847f
 800cc44:	003d08ff 	.word	0x003d08ff
 800cc48:	431bde83 	.word	0x431bde83
 800cc4c:	10624dd3 	.word	0x10624dd3

0800cc50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d101      	bne.n	800cc62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e021      	b.n	800cca6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2224      	movs	r2, #36	; 0x24
 800cc66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f022 0201 	bic.w	r2, r2, #1
 800cc78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7f4 fff6 	bl	8001c6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2200      	movs	r2, #0
 800cc92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
	...

0800ccb0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b086      	sub	sp, #24
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	60f8      	str	r0, [r7, #12]
 800ccb8:	607a      	str	r2, [r7, #4]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	817b      	strh	r3, [r7, #10]
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	2b20      	cmp	r3, #32
 800ccd2:	f040 80f4 	bne.w	800cebe <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ccd6:	4b7c      	ldr	r3, [pc, #496]	; (800cec8 <HAL_I2C_Master_Receive_DMA+0x218>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	08db      	lsrs	r3, r3, #3
 800ccdc:	4a7b      	ldr	r2, [pc, #492]	; (800cecc <HAL_I2C_Master_Receive_DMA+0x21c>)
 800ccde:	fba2 2303 	umull	r2, r3, r2, r3
 800cce2:	0a1a      	lsrs	r2, r3, #8
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	009a      	lsls	r2, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d116      	bne.n	800cd2a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2220      	movs	r2, #32
 800cd06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd16:	f043 0220 	orr.w	r2, r3, #32
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd26:	2301      	movs	r3, #1
 800cd28:	e0ca      	b.n	800cec0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d0db      	beq.n	800ccf0 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d101      	bne.n	800cd46 <HAL_I2C_Master_Receive_DMA+0x96>
 800cd42:	2302      	movs	r3, #2
 800cd44:	e0bc      	b.n	800cec0 <HAL_I2C_Master_Receive_DMA+0x210>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2201      	movs	r2, #1
 800cd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d007      	beq.n	800cd6c <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f042 0201 	orr.w	r2, r2, #1
 800cd6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cd7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2222      	movs	r2, #34	; 0x22
 800cd80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2210      	movs	r2, #16
 800cd88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	893a      	ldrh	r2, [r7, #8]
 800cd9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4a49      	ldr	r2, [pc, #292]	; (800ced0 <HAL_I2C_Master_Receive_DMA+0x220>)
 800cdac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cdae:	897a      	ldrh	r2, [r7, #10]
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d062      	beq.n	800ce82 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc0:	4a44      	ldr	r2, [pc, #272]	; (800ced4 <HAL_I2C_Master_Receive_DMA+0x224>)
 800cdc2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc8:	4a43      	ldr	r2, [pc, #268]	; (800ced8 <HAL_I2C_Master_Receive_DMA+0x228>)
 800cdca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd8:	2200      	movs	r2, #0
 800cdda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	2200      	movs	r2, #0
 800cde2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde8:	2200      	movs	r2, #0
 800cdea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3310      	adds	r3, #16
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce02:	f7fe fd4d 	bl	800b8a0 <HAL_DMA_Start_IT>
 800ce06:	4603      	mov	r3, r0
 800ce08:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d124      	bne.n	800ce5a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce1e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce2e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800ce46:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	685a      	ldr	r2, [r3, #4]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce56:	605a      	str	r2, [r3, #4]
 800ce58:	e02f      	b.n	800ceba <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2220      	movs	r2, #32
 800ce5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6e:	f043 0210 	orr.w	r2, r3, #16
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e01e      	b.n	800cec0 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce90:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cea0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ceb8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800ceba:	2300      	movs	r3, #0
 800cebc:	e000      	b.n	800cec0 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800cebe:	2302      	movs	r3, #2
  }
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	2000033c 	.word	0x2000033c
 800cecc:	14f8b589 	.word	0x14f8b589
 800ced0:	ffff0000 	.word	0xffff0000
 800ced4:	0800e649 	.word	0x0800e649
 800ced8:	0800e7f3 	.word	0x0800e7f3

0800cedc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b088      	sub	sp, #32
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cee4:	2300      	movs	r3, #0
 800cee6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cefc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
 800cf08:	2b10      	cmp	r3, #16
 800cf0a:	d003      	beq.n	800cf14 <HAL_I2C_EV_IRQHandler+0x38>
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	2b40      	cmp	r3, #64	; 0x40
 800cf10:	f040 80bd 	bne.w	800d08e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d10d      	bne.n	800cf4a <HAL_I2C_EV_IRQHandler+0x6e>
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cf34:	d003      	beq.n	800cf3e <HAL_I2C_EV_IRQHandler+0x62>
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cf3c:	d101      	bne.n	800cf42 <HAL_I2C_EV_IRQHandler+0x66>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e000      	b.n	800cf44 <HAL_I2C_EV_IRQHandler+0x68>
 800cf42:	2300      	movs	r3, #0
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	f000 812e 	beq.w	800d1a6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00c      	beq.n	800cf6e <HAL_I2C_EV_IRQHandler+0x92>
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	0a5b      	lsrs	r3, r3, #9
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d006      	beq.n	800cf6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f001 fd5d 	bl	800ea20 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fd58 	bl	800da1c <I2C_Master_SB>
 800cf6c:	e08e      	b.n	800d08c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d009      	beq.n	800cf8e <HAL_I2C_EV_IRQHandler+0xb2>
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	0a5b      	lsrs	r3, r3, #9
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fdce 	bl	800db28 <I2C_Master_ADD10>
 800cf8c:	e07e      	b.n	800d08c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	085b      	lsrs	r3, r3, #1
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d009      	beq.n	800cfae <HAL_I2C_EV_IRQHandler+0xd2>
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	0a5b      	lsrs	r3, r3, #9
 800cf9e:	f003 0301 	and.w	r3, r3, #1
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fde8 	bl	800db7c <I2C_Master_ADDR>
 800cfac:	e06e      	b.n	800d08c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	089b      	lsrs	r3, r3, #2
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d037      	beq.n	800d02a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfc8:	f000 80ef 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	09db      	lsrs	r3, r3, #7
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00f      	beq.n	800cff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	0a9b      	lsrs	r3, r3, #10
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d009      	beq.n	800cff8 <HAL_I2C_EV_IRQHandler+0x11c>
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	089b      	lsrs	r3, r3, #2
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 f9e5 	bl	800d3c0 <I2C_MasterTransmit_TXE>
 800cff6:	e049      	b.n	800d08c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	089b      	lsrs	r3, r3, #2
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 80d2 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	0a5b      	lsrs	r3, r3, #9
 800d00a:	f003 0301 	and.w	r3, r3, #1
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 80cb 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800d014:	7bfb      	ldrb	r3, [r7, #15]
 800d016:	2b10      	cmp	r3, #16
 800d018:	d103      	bne.n	800d022 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fa6c 	bl	800d4f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d020:	e0c3      	b.n	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fad0 	bl	800d5c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d028:	e0bf      	b.n	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d038:	f000 80b7 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	099b      	lsrs	r3, r3, #6
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00f      	beq.n	800d068 <HAL_I2C_EV_IRQHandler+0x18c>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	0a9b      	lsrs	r3, r3, #10
 800d04c:	f003 0301 	and.w	r3, r3, #1
 800d050:	2b00      	cmp	r3, #0
 800d052:	d009      	beq.n	800d068 <HAL_I2C_EV_IRQHandler+0x18c>
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	089b      	lsrs	r3, r3, #2
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d103      	bne.n	800d068 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fb40 	bl	800d6e6 <I2C_MasterReceive_RXNE>
 800d066:	e011      	b.n	800d08c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	089b      	lsrs	r3, r3, #2
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	f000 809a 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	0a5b      	lsrs	r3, r3, #9
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8093 	beq.w	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fbdf 	bl	800d848 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d08a:	e08e      	b.n	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
 800d08c:	e08d      	b.n	800d1aa <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	2b00      	cmp	r3, #0
 800d094:	d004      	beq.n	800d0a0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	695b      	ldr	r3, [r3, #20]
 800d09c:	61fb      	str	r3, [r7, #28]
 800d09e:	e007      	b.n	800d0b0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	085b      	lsrs	r3, r3, #1
 800d0b4:	f003 0301 	and.w	r3, r3, #1
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d012      	beq.n	800d0e2 <HAL_I2C_EV_IRQHandler+0x206>
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	0a5b      	lsrs	r3, r3, #9
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00c      	beq.n	800d0e2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d003      	beq.n	800d0d8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	699b      	ldr	r3, [r3, #24]
 800d0d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800d0d8:	69b9      	ldr	r1, [r7, #24]
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 ff9d 	bl	800e01a <I2C_Slave_ADDR>
 800d0e0:	e066      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	091b      	lsrs	r3, r3, #4
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <HAL_I2C_EV_IRQHandler+0x226>
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	0a5b      	lsrs	r3, r3, #9
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 ffd2 	bl	800e0a4 <I2C_Slave_STOPF>
 800d100:	e056      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	2b21      	cmp	r3, #33	; 0x21
 800d106:	d002      	beq.n	800d10e <HAL_I2C_EV_IRQHandler+0x232>
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	2b29      	cmp	r3, #41	; 0x29
 800d10c:	d125      	bne.n	800d15a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	09db      	lsrs	r3, r3, #7
 800d112:	f003 0301 	and.w	r3, r3, #1
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00f      	beq.n	800d13a <HAL_I2C_EV_IRQHandler+0x25e>
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	0a9b      	lsrs	r3, r3, #10
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	2b00      	cmp	r3, #0
 800d124:	d009      	beq.n	800d13a <HAL_I2C_EV_IRQHandler+0x25e>
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	089b      	lsrs	r3, r3, #2
 800d12a:	f003 0301 	and.w	r3, r3, #1
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d103      	bne.n	800d13a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 feb3 	bl	800de9e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d138:	e039      	b.n	800d1ae <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d13a:	69fb      	ldr	r3, [r7, #28]
 800d13c:	089b      	lsrs	r3, r3, #2
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	d033      	beq.n	800d1ae <HAL_I2C_EV_IRQHandler+0x2d2>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	0a5b      	lsrs	r3, r3, #9
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d02d      	beq.n	800d1ae <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fee0 	bl	800df18 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d158:	e029      	b.n	800d1ae <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	099b      	lsrs	r3, r3, #6
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00f      	beq.n	800d186 <HAL_I2C_EV_IRQHandler+0x2aa>
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	0a9b      	lsrs	r3, r3, #10
 800d16a:	f003 0301 	and.w	r3, r3, #1
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d009      	beq.n	800d186 <HAL_I2C_EV_IRQHandler+0x2aa>
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	089b      	lsrs	r3, r3, #2
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 feeb 	bl	800df5a <I2C_SlaveReceive_RXNE>
 800d184:	e014      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	089b      	lsrs	r3, r3, #2
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00e      	beq.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	0a5b      	lsrs	r3, r3, #9
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d008      	beq.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 ff19 	bl	800dfd6 <I2C_SlaveReceive_BTF>
 800d1a4:	e004      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800d1a6:	bf00      	nop
 800d1a8:	e002      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d1aa:	bf00      	nop
 800d1ac:	e000      	b.n	800d1b0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d1ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d1b0:	3720      	adds	r7, #32
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b08a      	sub	sp, #40	; 0x28
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	695b      	ldr	r3, [r3, #20]
 800d1c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d1d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	0a1b      	lsrs	r3, r3, #8
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00e      	beq.n	800d204 <HAL_I2C_ER_IRQHandler+0x4e>
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	0a1b      	lsrs	r3, r3, #8
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d008      	beq.n	800d204 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f4:	f043 0301 	orr.w	r3, r3, #1
 800d1f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d202:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	0a5b      	lsrs	r3, r3, #9
 800d208:	f003 0301 	and.w	r3, r3, #1
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00e      	beq.n	800d22e <HAL_I2C_ER_IRQHandler+0x78>
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	0a1b      	lsrs	r3, r3, #8
 800d214:	f003 0301 	and.w	r3, r3, #1
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d008      	beq.n	800d22e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	f043 0302 	orr.w	r3, r3, #2
 800d222:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d22c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	0a9b      	lsrs	r3, r3, #10
 800d232:	f003 0301 	and.w	r3, r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	d03f      	beq.n	800d2ba <HAL_I2C_ER_IRQHandler+0x104>
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	0a1b      	lsrs	r3, r3, #8
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	2b00      	cmp	r3, #0
 800d244:	d039      	beq.n	800d2ba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d246:	7efb      	ldrb	r3, [r7, #27]
 800d248:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d24e:	b29b      	uxth	r3, r3
 800d250:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d258:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d260:	7ebb      	ldrb	r3, [r7, #26]
 800d262:	2b20      	cmp	r3, #32
 800d264:	d112      	bne.n	800d28c <HAL_I2C_ER_IRQHandler+0xd6>
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d10f      	bne.n	800d28c <HAL_I2C_ER_IRQHandler+0xd6>
 800d26c:	7cfb      	ldrb	r3, [r7, #19]
 800d26e:	2b21      	cmp	r3, #33	; 0x21
 800d270:	d008      	beq.n	800d284 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d272:	7cfb      	ldrb	r3, [r7, #19]
 800d274:	2b29      	cmp	r3, #41	; 0x29
 800d276:	d005      	beq.n	800d284 <HAL_I2C_ER_IRQHandler+0xce>
 800d278:	7cfb      	ldrb	r3, [r7, #19]
 800d27a:	2b28      	cmp	r3, #40	; 0x28
 800d27c:	d106      	bne.n	800d28c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b21      	cmp	r3, #33	; 0x21
 800d282:	d103      	bne.n	800d28c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f001 f83d 	bl	800e304 <I2C_Slave_AF>
 800d28a:	e016      	b.n	800d2ba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d294:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d298:	f043 0304 	orr.w	r3, r3, #4
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d29e:	7efb      	ldrb	r3, [r7, #27]
 800d2a0:	2b10      	cmp	r3, #16
 800d2a2:	d002      	beq.n	800d2aa <HAL_I2C_ER_IRQHandler+0xf4>
 800d2a4:	7efb      	ldrb	r3, [r7, #27]
 800d2a6:	2b40      	cmp	r3, #64	; 0x40
 800d2a8:	d107      	bne.n	800d2ba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2b8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	0adb      	lsrs	r3, r3, #11
 800d2be:	f003 0301 	and.w	r3, r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00e      	beq.n	800d2e4 <HAL_I2C_ER_IRQHandler+0x12e>
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	0a1b      	lsrs	r3, r3, #8
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d008      	beq.n	800d2e4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d4:	f043 0308 	orr.w	r3, r3, #8
 800d2d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d2e2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d008      	beq.n	800d2fc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	431a      	orrs	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 f874 	bl	800e3e4 <I2C_ITError>
  }
}
 800d2fc:	bf00      	nop
 800d2fe:	3728      	adds	r7, #40	; 0x28
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	460b      	mov	r3, r1
 800d34a:	70fb      	strb	r3, [r7, #3]
 800d34c:	4613      	mov	r3, r2
 800d34e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d3a0:	bf00      	nop
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d3d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d150      	bne.n	800d488 <I2C_MasterTransmit_TXE+0xc8>
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	2b21      	cmp	r3, #33	; 0x21
 800d3ea:	d14d      	bne.n	800d488 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2b08      	cmp	r3, #8
 800d3f0:	d01d      	beq.n	800d42e <I2C_MasterTransmit_TXE+0x6e>
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	d01a      	beq.n	800d42e <I2C_MasterTransmit_TXE+0x6e>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3fe:	d016      	beq.n	800d42e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d40e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2211      	movs	r2, #17
 800d414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2220      	movs	r2, #32
 800d422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff ff6c 	bl	800d304 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d42c:	e060      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d43c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d44c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2200      	movs	r2, #0
 800d452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2220      	movs	r2, #32
 800d458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b40      	cmp	r3, #64	; 0x40
 800d466:	d107      	bne.n	800d478 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff ff7d 	bl	800d370 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d476:	e03b      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f7ff ff3f 	bl	800d304 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d486:	e033      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	2b21      	cmp	r3, #33	; 0x21
 800d48c:	d005      	beq.n	800d49a <I2C_MasterTransmit_TXE+0xda>
 800d48e:	7bbb      	ldrb	r3, [r7, #14]
 800d490:	2b40      	cmp	r3, #64	; 0x40
 800d492:	d12d      	bne.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	2b22      	cmp	r3, #34	; 0x22
 800d498:	d12a      	bne.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d108      	bne.n	800d4b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	685a      	ldr	r2, [r3, #4]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d4b4:	e01c      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b40      	cmp	r3, #64	; 0x40
 800d4c0:	d103      	bne.n	800d4ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f880 	bl	800d5c8 <I2C_MemoryTransmit_TXE_BTF>
}
 800d4c8:	e012      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	781a      	ldrb	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d4ee:	e7ff      	b.n	800d4f0 <I2C_MasterTransmit_TXE+0x130>
 800d4f0:	bf00      	nop
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b21      	cmp	r3, #33	; 0x21
 800d510:	d156      	bne.n	800d5c0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d516:	b29b      	uxth	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d012      	beq.n	800d542 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d520:	781a      	ldrb	r2, [r3, #0]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	1c5a      	adds	r2, r3, #1
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d536:	b29b      	uxth	r3, r3
 800d538:	3b01      	subs	r3, #1
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d540:	e03e      	b.n	800d5c0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b08      	cmp	r3, #8
 800d546:	d01d      	beq.n	800d584 <I2C_MasterTransmit_BTF+0x8c>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b20      	cmp	r3, #32
 800d54c:	d01a      	beq.n	800d584 <I2C_MasterTransmit_BTF+0x8c>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d554:	d016      	beq.n	800d584 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d564:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2211      	movs	r2, #17
 800d56a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2220      	movs	r2, #32
 800d578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f7ff fec1 	bl	800d304 <HAL_I2C_MasterTxCpltCallback>
}
 800d582:	e01d      	b.n	800d5c0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685a      	ldr	r2, [r3, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d592:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2220      	movs	r2, #32
 800d5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff fea2 	bl	800d304 <HAL_I2C_MasterTxCpltCallback>
}
 800d5c0:	bf00      	nop
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d11d      	bne.n	800d61c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d10b      	bne.n	800d600 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5f8:	1c9a      	adds	r2, r3, #2
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d5fe:	e06e      	b.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d604:	b29b      	uxth	r3, r3
 800d606:	121b      	asrs	r3, r3, #8
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d61a:	e060      	b.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d620:	2b01      	cmp	r3, #1
 800d622:	d10b      	bne.n	800d63c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d634:	1c5a      	adds	r2, r3, #1
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d63a:	e050      	b.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d640:	2b02      	cmp	r3, #2
 800d642:	d14c      	bne.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	2b22      	cmp	r3, #34	; 0x22
 800d648:	d108      	bne.n	800d65c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d658:	601a      	str	r2, [r3, #0]
}
 800d65a:	e040      	b.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d660:	b29b      	uxth	r3, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d015      	beq.n	800d692 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	2b21      	cmp	r3, #33	; 0x21
 800d66a:	d112      	bne.n	800d692 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	781a      	ldrb	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d686:	b29b      	uxth	r3, r3
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d690:	e025      	b.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d696:	b29b      	uxth	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d120      	bne.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
 800d69e:	2b21      	cmp	r3, #33	; 0x21
 800d6a0:	d11d      	bne.n	800d6de <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d6b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fe49 	bl	800d370 <HAL_I2C_MemTxCpltCallback>
}
 800d6de:	bf00      	nop
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b22      	cmp	r3, #34	; 0x22
 800d6f8:	f040 80a2 	bne.w	800d840 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d700:	b29b      	uxth	r3, r3
 800d702:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b03      	cmp	r3, #3
 800d708:	d921      	bls.n	800d74e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	691a      	ldr	r2, [r3, #16]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d726:	b29b      	uxth	r3, r3
 800d728:	3b01      	subs	r3, #1
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d734:	b29b      	uxth	r3, r3
 800d736:	2b03      	cmp	r3, #3
 800d738:	f040 8082 	bne.w	800d840 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d74a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d74c:	e078      	b.n	800d840 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d752:	2b02      	cmp	r3, #2
 800d754:	d074      	beq.n	800d840 <I2C_MasterReceive_RXNE+0x15a>
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d002      	beq.n	800d762 <I2C_MasterReceive_RXNE+0x7c>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d16e      	bne.n	800d840 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f001 f92a 	bl	800e9bc <I2C_WaitOnSTOPRequestThroughIT>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d142      	bne.n	800d7f4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d77c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d78c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	691a      	ldr	r2, [r3, #16]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	2b40      	cmp	r3, #64	; 0x40
 800d7c6:	d10a      	bne.n	800d7de <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff fdd4 	bl	800d384 <HAL_I2C_MemRxCpltCallback>
}
 800d7dc:	e030      	b.n	800d840 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2212      	movs	r2, #18
 800d7ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7fc fd89 	bl	800a304 <HAL_I2C_MasterRxCpltCallback>
}
 800d7f2:	e025      	b.n	800d840 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	685a      	ldr	r2, [r3, #4]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d802:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	691a      	ldr	r2, [r3, #16]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d80e:	b2d2      	uxtb	r2, r2
 800d810:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d820:	b29b      	uxth	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	b29a      	uxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2220      	movs	r2, #32
 800d82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff fdac 	bl	800d398 <HAL_I2C_ErrorCallback>
}
 800d840:	bf00      	nop
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d854:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	2b04      	cmp	r3, #4
 800d85e:	d11b      	bne.n	800d898 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	685a      	ldr	r2, [r3, #4]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d86e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	691a      	ldr	r2, [r3, #16]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	b2d2      	uxtb	r2, r2
 800d87c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d88c:	b29b      	uxth	r3, r3
 800d88e:	3b01      	subs	r3, #1
 800d890:	b29a      	uxth	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d896:	e0bd      	b.n	800da14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d129      	bne.n	800d8f6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8b0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b04      	cmp	r3, #4
 800d8b6:	d00a      	beq.n	800d8ce <I2C_MasterReceive_BTF+0x86>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2b02      	cmp	r3, #2
 800d8bc:	d007      	beq.n	800d8ce <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8cc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	691a      	ldr	r2, [r3, #16]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8d8:	b2d2      	uxtb	r2, r2
 800d8da:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d8f4:	e08e      	b.n	800da14 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d176      	bne.n	800d9ee <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b01      	cmp	r3, #1
 800d904:	d002      	beq.n	800d90c <I2C_MasterReceive_BTF+0xc4>
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b10      	cmp	r3, #16
 800d90a:	d108      	bne.n	800d91e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	e019      	b.n	800d952 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b04      	cmp	r3, #4
 800d922:	d002      	beq.n	800d92a <I2C_MasterReceive_BTF+0xe2>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b02      	cmp	r3, #2
 800d928:	d108      	bne.n	800d93c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d938:	601a      	str	r2, [r3, #0]
 800d93a:	e00a      	b.n	800d952 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b10      	cmp	r3, #16
 800d940:	d007      	beq.n	800d952 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d950:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	691a      	ldr	r2, [r3, #16]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d95c:	b2d2      	uxtb	r2, r2
 800d95e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	1c5a      	adds	r2, r3, #1
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d96e:	b29b      	uxth	r3, r3
 800d970:	3b01      	subs	r3, #1
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	691a      	ldr	r2, [r3, #16]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	1c5a      	adds	r2, r3, #1
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d994:	b29b      	uxth	r3, r3
 800d996:	3b01      	subs	r3, #1
 800d998:	b29a      	uxth	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d9ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2220      	movs	r2, #32
 800d9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b40      	cmp	r3, #64	; 0x40
 800d9c0:	d10a      	bne.n	800d9d8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f7ff fcd7 	bl	800d384 <HAL_I2C_MemRxCpltCallback>
}
 800d9d6:	e01d      	b.n	800da14 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2212      	movs	r2, #18
 800d9e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7fc fc8c 	bl	800a304 <HAL_I2C_MasterRxCpltCallback>
}
 800d9ec:	e012      	b.n	800da14 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	691a      	ldr	r2, [r3, #16]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f8:	b2d2      	uxtb	r2, r2
 800d9fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	3b01      	subs	r3, #1
 800da0e:	b29a      	uxth	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800da14:	bf00      	nop
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800da1c:	b480      	push	{r7}
 800da1e:	b083      	sub	sp, #12
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b40      	cmp	r3, #64	; 0x40
 800da2e:	d117      	bne.n	800da60 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da34:	2b00      	cmp	r3, #0
 800da36:	d109      	bne.n	800da4c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	461a      	mov	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800da48:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800da4a:	e067      	b.n	800db1c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f043 0301 	orr.w	r3, r3, #1
 800da56:	b2da      	uxtb	r2, r3
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	611a      	str	r2, [r3, #16]
}
 800da5e:	e05d      	b.n	800db1c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800da68:	d133      	bne.n	800dad2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b21      	cmp	r3, #33	; 0x21
 800da74:	d109      	bne.n	800da8a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	461a      	mov	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800da86:	611a      	str	r2, [r3, #16]
 800da88:	e008      	b.n	800da9c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f043 0301 	orr.w	r3, r3, #1
 800da94:	b2da      	uxtb	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d004      	beq.n	800daae <I2C_Master_SB+0x92>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d108      	bne.n	800dac0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d032      	beq.n	800db1c <I2C_Master_SB+0x100>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d02d      	beq.n	800db1c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dace:	605a      	str	r2, [r3, #4]
}
 800dad0:	e024      	b.n	800db1c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d10e      	bne.n	800daf8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dade:	b29b      	uxth	r3, r3
 800dae0:	11db      	asrs	r3, r3, #7
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	f003 0306 	and.w	r3, r3, #6
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	f063 030f 	orn	r3, r3, #15
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	611a      	str	r2, [r3, #16]
}
 800daf6:	e011      	b.n	800db1c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	d10d      	bne.n	800db1c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db04:	b29b      	uxth	r3, r3
 800db06:	11db      	asrs	r3, r3, #7
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 0306 	and.w	r3, r3, #6
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	f063 030e 	orn	r3, r3, #14
 800db14:	b2da      	uxtb	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	611a      	str	r2, [r3, #16]
}
 800db1c:	bf00      	nop
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db34:	b2da      	uxtb	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db40:	2b00      	cmp	r3, #0
 800db42:	d103      	bne.n	800db4c <I2C_Master_ADD10+0x24>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d011      	beq.n	800db70 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db52:	2b00      	cmp	r3, #0
 800db54:	d104      	bne.n	800db60 <I2C_Master_ADD10+0x38>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d007      	beq.n	800db70 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db6e:	605a      	str	r2, [r3, #4]
    }
  }
}
 800db70:	bf00      	nop
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b091      	sub	sp, #68	; 0x44
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800db8a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db98:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b22      	cmp	r3, #34	; 0x22
 800dba4:	f040 8169 	bne.w	800de7a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10f      	bne.n	800dbd0 <I2C_Master_ADDR+0x54>
 800dbb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dbb4:	2b40      	cmp	r3, #64	; 0x40
 800dbb6:	d10b      	bne.n	800dbd0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbb8:	2300      	movs	r3, #0
 800dbba:	633b      	str	r3, [r7, #48]	; 0x30
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	633b      	str	r3, [r7, #48]	; 0x30
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	633b      	str	r3, [r7, #48]	; 0x30
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	e160      	b.n	800de92 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d11d      	bne.n	800dc14 <I2C_Master_ADDR+0x98>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dbe0:	d118      	bne.n	800dc14 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	699b      	ldr	r3, [r3, #24]
 800dbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc06:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0c:	1c5a      	adds	r2, r3, #1
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	651a      	str	r2, [r3, #80]	; 0x50
 800dc12:	e13e      	b.n	800de92 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d113      	bne.n	800dc46 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc1e:	2300      	movs	r3, #0
 800dc20:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	695b      	ldr	r3, [r3, #20]
 800dc28:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	699b      	ldr	r3, [r3, #24]
 800dc30:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	e115      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	f040 808a 	bne.w	800dd66 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800dc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc58:	d137      	bne.n	800dcca <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc68:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc78:	d113      	bne.n	800dca2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc88:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	695b      	ldr	r3, [r3, #20]
 800dc94:	627b      	str	r3, [r7, #36]	; 0x24
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	627b      	str	r3, [r7, #36]	; 0x24
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca0:	e0e7      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dca2:	2300      	movs	r3, #0
 800dca4:	623b      	str	r3, [r7, #32]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	695b      	ldr	r3, [r3, #20]
 800dcac:	623b      	str	r3, [r7, #32]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcc6:	601a      	str	r2, [r3, #0]
 800dcc8:	e0d3      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	2b08      	cmp	r3, #8
 800dcce:	d02e      	beq.n	800dd2e <I2C_Master_ADDR+0x1b2>
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	2b20      	cmp	r3, #32
 800dcd4:	d02b      	beq.n	800dd2e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800dcd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd8:	2b12      	cmp	r3, #18
 800dcda:	d102      	bne.n	800dce2 <I2C_Master_ADDR+0x166>
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d125      	bne.n	800dd2e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce4:	2b04      	cmp	r3, #4
 800dce6:	d00e      	beq.n	800dd06 <I2C_Master_ADDR+0x18a>
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	2b02      	cmp	r3, #2
 800dcec:	d00b      	beq.n	800dd06 <I2C_Master_ADDR+0x18a>
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	2b10      	cmp	r3, #16
 800dcf2:	d008      	beq.n	800dd06 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e007      	b.n	800dd16 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd14:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd16:	2300      	movs	r3, #0
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	695b      	ldr	r3, [r3, #20]
 800dd20:	61fb      	str	r3, [r7, #28]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	61fb      	str	r3, [r7, #28]
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	e0a1      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd3c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dd3e:	2300      	movs	r3, #0
 800dd40:	61bb      	str	r3, [r7, #24]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	61bb      	str	r3, [r7, #24]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd62:	601a      	str	r2, [r3, #0]
 800dd64:	e085      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d14d      	bne.n	800de0c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	2b04      	cmp	r3, #4
 800dd74:	d016      	beq.n	800dda4 <I2C_Master_ADDR+0x228>
 800dd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d013      	beq.n	800dda4 <I2C_Master_ADDR+0x228>
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	d010      	beq.n	800dda4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd90:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	e007      	b.n	800ddb4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddb2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ddbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ddc2:	d117      	bne.n	800ddf4 <I2C_Master_ADDR+0x278>
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ddca:	d00b      	beq.n	800dde4 <I2C_Master_ADDR+0x268>
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d008      	beq.n	800dde4 <I2C_Master_ADDR+0x268>
 800ddd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd4:	2b08      	cmp	r3, #8
 800ddd6:	d005      	beq.n	800dde4 <I2C_Master_ADDR+0x268>
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	2b10      	cmp	r3, #16
 800dddc:	d002      	beq.n	800dde4 <I2C_Master_ADDR+0x268>
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	2b20      	cmp	r3, #32
 800dde2:	d107      	bne.n	800ddf4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	685a      	ldr	r2, [r3, #4]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ddf2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	617b      	str	r3, [r7, #20]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	699b      	ldr	r3, [r3, #24]
 800de06:	617b      	str	r3, [r7, #20]
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	e032      	b.n	800de72 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de1a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de2a:	d117      	bne.n	800de5c <I2C_Master_ADDR+0x2e0>
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800de32:	d00b      	beq.n	800de4c <I2C_Master_ADDR+0x2d0>
 800de34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de36:	2b01      	cmp	r3, #1
 800de38:	d008      	beq.n	800de4c <I2C_Master_ADDR+0x2d0>
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	2b08      	cmp	r3, #8
 800de3e:	d005      	beq.n	800de4c <I2C_Master_ADDR+0x2d0>
 800de40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de42:	2b10      	cmp	r3, #16
 800de44:	d002      	beq.n	800de4c <I2C_Master_ADDR+0x2d0>
 800de46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de48:	2b20      	cmp	r3, #32
 800de4a:	d107      	bne.n	800de5c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	685a      	ldr	r2, [r3, #4]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de5a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de5c:	2300      	movs	r3, #0
 800de5e:	613b      	str	r3, [r7, #16]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	613b      	str	r3, [r7, #16]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	613b      	str	r3, [r7, #16]
 800de70:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800de78:	e00b      	b.n	800de92 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de7a:	2300      	movs	r3, #0
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	695b      	ldr	r3, [r3, #20]
 800de84:	60fb      	str	r3, [r7, #12]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	60fb      	str	r3, [r7, #12]
 800de8e:	68fb      	ldr	r3, [r7, #12]
}
 800de90:	e7ff      	b.n	800de92 <I2C_Master_ADDR+0x316>
 800de92:	bf00      	nop
 800de94:	3744      	adds	r7, #68	; 0x44
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr

0800de9e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d02b      	beq.n	800df10 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	3b01      	subs	r3, #1
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d114      	bne.n	800df10 <I2C_SlaveTransmit_TXE+0x72>
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
 800dee8:	2b29      	cmp	r3, #41	; 0x29
 800deea:	d111      	bne.n	800df10 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685a      	ldr	r2, [r3, #4]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800defa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2221      	movs	r2, #33	; 0x21
 800df00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2228      	movs	r2, #40	; 0x28
 800df06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff fa04 	bl	800d318 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df24:	b29b      	uxth	r3, r3
 800df26:	2b00      	cmp	r3, #0
 800df28:	d011      	beq.n	800df4e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df2e:	781a      	ldrb	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df44:	b29b      	uxth	r3, r3
 800df46:	3b01      	subs	r3, #1
 800df48:	b29a      	uxth	r2, r3
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800df4e:	bf00      	nop
 800df50:	370c      	adds	r7, #12
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b084      	sub	sp, #16
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df6e:	b29b      	uxth	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d02c      	beq.n	800dfce <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	691a      	ldr	r2, [r3, #16]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df86:	1c5a      	adds	r2, r3, #1
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df90:	b29b      	uxth	r3, r3
 800df92:	3b01      	subs	r3, #1
 800df94:	b29a      	uxth	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d114      	bne.n	800dfce <I2C_SlaveReceive_RXNE+0x74>
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa8:	d111      	bne.n	800dfce <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfb8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2222      	movs	r2, #34	; 0x22
 800dfbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2228      	movs	r2, #40	; 0x28
 800dfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7ff f9af 	bl	800d32c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dfce:	bf00      	nop
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800dfd6:	b480      	push	{r7}
 800dfd8:	b083      	sub	sp, #12
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d012      	beq.n	800e00e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	691a      	ldr	r2, [r3, #16]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff2:	b2d2      	uxtb	r2, r2
 800dff4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	1c5a      	adds	r2, r3, #1
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e004:	b29b      	uxth	r3, r3
 800e006:	3b01      	subs	r3, #1
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800e00e:	bf00      	nop
 800e010:	370c      	adds	r7, #12
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr

0800e01a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
 800e022:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800e024:	2300      	movs	r3, #0
 800e026:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e034:	2b28      	cmp	r3, #40	; 0x28
 800e036:	d127      	bne.n	800e088 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e046:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	089b      	lsrs	r3, r3, #2
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800e054:	2301      	movs	r3, #1
 800e056:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	09db      	lsrs	r3, r3, #7
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d103      	bne.n	800e06c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	81bb      	strh	r3, [r7, #12]
 800e06a:	e002      	b.n	800e072 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	699b      	ldr	r3, [r3, #24]
 800e070:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800e07a:	89ba      	ldrh	r2, [r7, #12]
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	4619      	mov	r1, r3
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f7ff f95d 	bl	800d340 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e086:	e008      	b.n	800e09a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f06f 0202 	mvn.w	r2, #2
 800e090:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800e09a:	bf00      	nop
 800e09c:	3710      	adds	r7, #16
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
	...

0800e0a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	685a      	ldr	r2, [r3, #4]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e0c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	60bb      	str	r3, [r7, #8]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	695b      	ldr	r3, [r3, #20]
 800e0ce:	60bb      	str	r3, [r7, #8]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f042 0201 	orr.w	r2, r2, #1
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e100:	d172      	bne.n	800e1e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e102:	7bfb      	ldrb	r3, [r7, #15]
 800e104:	2b22      	cmp	r3, #34	; 0x22
 800e106:	d002      	beq.n	800e10e <I2C_Slave_STOPF+0x6a>
 800e108:	7bfb      	ldrb	r3, [r7, #15]
 800e10a:	2b2a      	cmp	r3, #42	; 0x2a
 800e10c:	d135      	bne.n	800e17a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	b29a      	uxth	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e120:	b29b      	uxth	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d005      	beq.n	800e132 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e12a:	f043 0204 	orr.w	r2, r3, #4
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	685a      	ldr	r2, [r3, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e140:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	4618      	mov	r0, r3
 800e148:	f7fd fdae 	bl	800bca8 <HAL_DMA_GetState>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d049      	beq.n	800e1e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e156:	4a69      	ldr	r2, [pc, #420]	; (800e2fc <I2C_Slave_STOPF+0x258>)
 800e158:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15e:	4618      	mov	r0, r3
 800e160:	f7fd fbf6 	bl	800b950 <HAL_DMA_Abort_IT>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d03d      	beq.n	800e1e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e170:	687a      	ldr	r2, [r7, #4]
 800e172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e174:	4610      	mov	r0, r2
 800e176:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e178:	e035      	b.n	800e1e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	b29a      	uxth	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d005      	beq.n	800e19e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e196:	f043 0204 	orr.w	r2, r3, #4
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd fd78 	bl	800bca8 <HAL_DMA_GetState>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d014      	beq.n	800e1e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c2:	4a4e      	ldr	r2, [pc, #312]	; (800e2fc <I2C_Slave_STOPF+0x258>)
 800e1c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fd fbc0 	bl	800b950 <HAL_DMA_Abort_IT>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d008      	beq.n	800e1e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
 800e1e4:	e000      	b.n	800e1e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e1e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d03e      	beq.n	800e270 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	695b      	ldr	r3, [r3, #20]
 800e1f8:	f003 0304 	and.w	r3, r3, #4
 800e1fc:	2b04      	cmp	r3, #4
 800e1fe:	d112      	bne.n	800e226 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	691a      	ldr	r2, [r3, #16]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e20a:	b2d2      	uxtb	r2, r2
 800e20c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e212:	1c5a      	adds	r2, r3, #1
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	3b01      	subs	r3, #1
 800e220:	b29a      	uxth	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e230:	2b40      	cmp	r3, #64	; 0x40
 800e232:	d112      	bne.n	800e25a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	691a      	ldr	r2, [r3, #16]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23e:	b2d2      	uxtb	r2, r2
 800e240:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	1c5a      	adds	r2, r3, #1
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e250:	b29b      	uxth	r3, r3
 800e252:	3b01      	subs	r3, #1
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e25e:	b29b      	uxth	r3, r3
 800e260:	2b00      	cmp	r3, #0
 800e262:	d005      	beq.n	800e270 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e268:	f043 0204 	orr.w	r2, r3, #4
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e274:	2b00      	cmp	r3, #0
 800e276:	d003      	beq.n	800e280 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f000 f8b3 	bl	800e3e4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e27e:	e039      	b.n	800e2f4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	2b2a      	cmp	r3, #42	; 0x2a
 800e284:	d109      	bne.n	800e29a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2228      	movs	r2, #40	; 0x28
 800e290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff f849 	bl	800d32c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	2b28      	cmp	r3, #40	; 0x28
 800e2a4:	d111      	bne.n	800e2ca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	4a15      	ldr	r2, [pc, #84]	; (800e300 <I2C_Slave_STOPF+0x25c>)
 800e2aa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2220      	movs	r2, #32
 800e2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f7ff f84a 	bl	800d35c <HAL_I2C_ListenCpltCallback>
}
 800e2c8:	e014      	b.n	800e2f4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ce:	2b22      	cmp	r3, #34	; 0x22
 800e2d0:	d002      	beq.n	800e2d8 <I2C_Slave_STOPF+0x234>
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
 800e2d4:	2b22      	cmp	r3, #34	; 0x22
 800e2d6:	d10d      	bne.n	800e2f4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2220      	movs	r2, #32
 800e2e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff f81c 	bl	800d32c <HAL_I2C_SlaveRxCpltCallback>
}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	0800e86d 	.word	0x0800e86d
 800e300:	ffff0000 	.word	0xffff0000

0800e304 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e312:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	2b08      	cmp	r3, #8
 800e31e:	d002      	beq.n	800e326 <I2C_Slave_AF+0x22>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2b20      	cmp	r3, #32
 800e324:	d129      	bne.n	800e37a <I2C_Slave_AF+0x76>
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	2b28      	cmp	r3, #40	; 0x28
 800e32a:	d126      	bne.n	800e37a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a2c      	ldr	r2, [pc, #176]	; (800e3e0 <I2C_Slave_AF+0xdc>)
 800e330:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e340:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e34a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681a      	ldr	r2, [r3, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e35a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2220      	movs	r2, #32
 800e366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7fe fff2 	bl	800d35c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e378:	e02e      	b.n	800e3d8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b21      	cmp	r3, #33	; 0x21
 800e37e:	d126      	bne.n	800e3ce <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a17      	ldr	r2, [pc, #92]	; (800e3e0 <I2C_Slave_AF+0xdc>)
 800e384:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2221      	movs	r2, #33	; 0x21
 800e38a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2220      	movs	r2, #32
 800e390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	685a      	ldr	r2, [r3, #4]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e3aa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3b4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e3c4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fe ffa6 	bl	800d318 <HAL_I2C_SlaveTxCpltCallback>
}
 800e3cc:	e004      	b.n	800e3d8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3d6:	615a      	str	r2, [r3, #20]
}
 800e3d8:	bf00      	nop
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	ffff0000 	.word	0xffff0000

0800e3e4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3f2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3fa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b10      	cmp	r3, #16
 800e400:	d002      	beq.n	800e408 <I2C_ITError+0x24>
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b40      	cmp	r3, #64	; 0x40
 800e406:	d10a      	bne.n	800e41e <I2C_ITError+0x3a>
 800e408:	7bfb      	ldrb	r3, [r7, #15]
 800e40a:	2b22      	cmp	r3, #34	; 0x22
 800e40c:	d107      	bne.n	800e41e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e41c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
 800e420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e424:	2b28      	cmp	r3, #40	; 0x28
 800e426:	d107      	bne.n	800e438 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2228      	movs	r2, #40	; 0x28
 800e432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e436:	e015      	b.n	800e464 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e446:	d00a      	beq.n	800e45e <I2C_ITError+0x7a>
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	2b60      	cmp	r3, #96	; 0x60
 800e44c:	d007      	beq.n	800e45e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2220      	movs	r2, #32
 800e452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2200      	movs	r2, #0
 800e462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e46e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e472:	d162      	bne.n	800e53a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685a      	ldr	r2, [r3, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e482:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d020      	beq.n	800e4d4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e496:	4a6a      	ldr	r2, [pc, #424]	; (800e640 <I2C_ITError+0x25c>)
 800e498:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fd fa56 	bl	800b950 <HAL_DMA_Abort_IT>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f000 8089 	beq.w	800e5be <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f022 0201 	bic.w	r2, r2, #1
 800e4ba:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2220      	movs	r2, #32
 800e4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4ca:	687a      	ldr	r2, [r7, #4]
 800e4cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	4798      	blx	r3
 800e4d2:	e074      	b.n	800e5be <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d8:	4a59      	ldr	r2, [pc, #356]	; (800e640 <I2C_ITError+0x25c>)
 800e4da:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fd fa35 	bl	800b950 <HAL_DMA_Abort_IT>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d068      	beq.n	800e5be <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f6:	2b40      	cmp	r3, #64	; 0x40
 800e4f8:	d10b      	bne.n	800e512 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	691a      	ldr	r2, [r3, #16]
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e504:	b2d2      	uxtb	r2, r2
 800e506:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e50c:	1c5a      	adds	r2, r3, #1
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f022 0201 	bic.w	r2, r2, #1
 800e520:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2220      	movs	r2, #32
 800e526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e530:	687a      	ldr	r2, [r7, #4]
 800e532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e534:	4610      	mov	r0, r2
 800e536:	4798      	blx	r3
 800e538:	e041      	b.n	800e5be <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b60      	cmp	r3, #96	; 0x60
 800e544:	d125      	bne.n	800e592 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2220      	movs	r2, #32
 800e54a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e55e:	2b40      	cmp	r3, #64	; 0x40
 800e560:	d10b      	bne.n	800e57a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	691a      	ldr	r2, [r3, #16]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f022 0201 	bic.w	r2, r2, #1
 800e588:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f7fe ff0e 	bl	800d3ac <HAL_I2C_AbortCpltCallback>
 800e590:	e015      	b.n	800e5be <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	695b      	ldr	r3, [r3, #20]
 800e598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e59c:	2b40      	cmp	r3, #64	; 0x40
 800e59e:	d10b      	bne.n	800e5b8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	691a      	ldr	r2, [r3, #16]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5aa:	b2d2      	uxtb	r2, r2
 800e5ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5b2:	1c5a      	adds	r2, r3, #1
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7fe feed 	bl	800d398 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f003 0301 	and.w	r3, r3, #1
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10e      	bne.n	800e5ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d109      	bne.n	800e5ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d104      	bne.n	800e5ec <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	685a      	ldr	r2, [r3, #4]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e5fa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e602:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e608:	f003 0304 	and.w	r3, r3, #4
 800e60c:	2b04      	cmp	r3, #4
 800e60e:	d113      	bne.n	800e638 <I2C_ITError+0x254>
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	2b28      	cmp	r3, #40	; 0x28
 800e614:	d110      	bne.n	800e638 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	4a0a      	ldr	r2, [pc, #40]	; (800e644 <I2C_ITError+0x260>)
 800e61a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2220      	movs	r2, #32
 800e626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f7fe fe92 	bl	800d35c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e638:	bf00      	nop
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}
 800e640:	0800e86d 	.word	0x0800e86d
 800e644:	ffff0000 	.word	0xffff0000

0800e648 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e654:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e65c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e664:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e67a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e680:	2b00      	cmp	r3, #0
 800e682:	d003      	beq.n	800e68c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e688:	2200      	movs	r2, #0
 800e68a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e690:	2b00      	cmp	r3, #0
 800e692:	d003      	beq.n	800e69c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e698:	2200      	movs	r2, #0
 800e69a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800e69c:	7cfb      	ldrb	r3, [r7, #19]
 800e69e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e6a2:	2b21      	cmp	r3, #33	; 0x21
 800e6a4:	d007      	beq.n	800e6b6 <I2C_DMAXferCplt+0x6e>
 800e6a6:	7cfb      	ldrb	r3, [r7, #19]
 800e6a8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e6ac:	2b22      	cmp	r3, #34	; 0x22
 800e6ae:	d131      	bne.n	800e714 <I2C_DMAXferCplt+0xcc>
 800e6b0:	7cbb      	ldrb	r3, [r7, #18]
 800e6b2:	2b20      	cmp	r3, #32
 800e6b4:	d12e      	bne.n	800e714 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	685a      	ldr	r2, [r3, #4]
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e6c4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e6cc:	7cfb      	ldrb	r3, [r7, #19]
 800e6ce:	2b29      	cmp	r3, #41	; 0x29
 800e6d0:	d10a      	bne.n	800e6e8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2221      	movs	r2, #33	; 0x21
 800e6d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2228      	movs	r2, #40	; 0x28
 800e6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e6e0:	6978      	ldr	r0, [r7, #20]
 800e6e2:	f7fe fe19 	bl	800d318 <HAL_I2C_SlaveTxCpltCallback>
 800e6e6:	e00c      	b.n	800e702 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e6e8:	7cfb      	ldrb	r3, [r7, #19]
 800e6ea:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ec:	d109      	bne.n	800e702 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2222      	movs	r2, #34	; 0x22
 800e6f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2228      	movs	r2, #40	; 0x28
 800e6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e6fc:	6978      	ldr	r0, [r7, #20]
 800e6fe:	f7fe fe15 	bl	800d32c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	685a      	ldr	r2, [r3, #4]
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e710:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800e712:	e06a      	b.n	800e7ea <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d064      	beq.n	800e7ea <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e724:	b29b      	uxth	r3, r3
 800e726:	2b01      	cmp	r3, #1
 800e728:	d107      	bne.n	800e73a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e738:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e748:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e750:	d009      	beq.n	800e766 <I2C_DMAXferCplt+0x11e>
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b08      	cmp	r3, #8
 800e756:	d006      	beq.n	800e766 <I2C_DMAXferCplt+0x11e>
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e75e:	d002      	beq.n	800e766 <I2C_DMAXferCplt+0x11e>
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2b20      	cmp	r3, #32
 800e764:	d107      	bne.n	800e776 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e774:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e784:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e794:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2200      	movs	r2, #0
 800e79a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d003      	beq.n	800e7ac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800e7a4:	6978      	ldr	r0, [r7, #20]
 800e7a6:	f7fe fdf7 	bl	800d398 <HAL_I2C_ErrorCallback>
}
 800e7aa:	e01e      	b.n	800e7ea <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	2b40      	cmp	r3, #64	; 0x40
 800e7be:	d10a      	bne.n	800e7d6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800e7ce:	6978      	ldr	r0, [r7, #20]
 800e7d0:	f7fe fdd8 	bl	800d384 <HAL_I2C_MemRxCpltCallback>
}
 800e7d4:	e009      	b.n	800e7ea <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2212      	movs	r2, #18
 800e7e2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800e7e4:	6978      	ldr	r0, [r7, #20]
 800e7e6:	f7fb fd8d 	bl	800a304 <HAL_I2C_MasterRxCpltCallback>
}
 800e7ea:	bf00      	nop
 800e7ec:	3718      	adds	r7, #24
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e80c:	2200      	movs	r2, #0
 800e80e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e814:	2b00      	cmp	r3, #0
 800e816:	d003      	beq.n	800e820 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81c:	2200      	movs	r2, #0
 800e81e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fd fa4f 	bl	800bcc4 <HAL_DMA_GetError>
 800e826:	4603      	mov	r3, r0
 800e828:	2b02      	cmp	r3, #2
 800e82a:	d01b      	beq.n	800e864 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e83a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2220      	movs	r2, #32
 800e846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e856:	f043 0210 	orr.w	r2, r3, #16
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e85e:	68f8      	ldr	r0, [r7, #12]
 800e860:	f7fe fd9a 	bl	800d398 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e864:	bf00      	nop
 800e866:	3710      	adds	r7, #16
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b086      	sub	sp, #24
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e874:	2300      	movs	r3, #0
 800e876:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e884:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e886:	4b4b      	ldr	r3, [pc, #300]	; (800e9b4 <I2C_DMAAbort+0x148>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	08db      	lsrs	r3, r3, #3
 800e88c:	4a4a      	ldr	r2, [pc, #296]	; (800e9b8 <I2C_DMAAbort+0x14c>)
 800e88e:	fba2 2303 	umull	r2, r3, r2, r3
 800e892:	0a1a      	lsrs	r2, r3, #8
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	00da      	lsls	r2, r3, #3
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8aa:	f043 0220 	orr.w	r2, r3, #32
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e8b2:	e00a      	b.n	800e8ca <I2C_DMAAbort+0x5e>
    }
    count--;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8c8:	d0ea      	beq.n	800e8a0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d003      	beq.n	800e8da <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d003      	beq.n	800e8ea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8f8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e904:	2b00      	cmp	r3, #0
 800e906:	d003      	beq.n	800e910 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e90c:	2200      	movs	r2, #0
 800e90e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e914:	2b00      	cmp	r3, #0
 800e916:	d003      	beq.n	800e920 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91c:	2200      	movs	r2, #0
 800e91e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f022 0201 	bic.w	r2, r2, #1
 800e92e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b60      	cmp	r3, #96	; 0x60
 800e93a:	d10e      	bne.n	800e95a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2220      	movs	r2, #32
 800e940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2200      	movs	r2, #0
 800e948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2200      	movs	r2, #0
 800e950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e952:	6978      	ldr	r0, [r7, #20]
 800e954:	f7fe fd2a 	bl	800d3ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e958:	e027      	b.n	800e9aa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e95a:	7cfb      	ldrb	r3, [r7, #19]
 800e95c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e960:	2b28      	cmp	r3, #40	; 0x28
 800e962:	d117      	bne.n	800e994 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	681a      	ldr	r2, [r3, #0]
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f042 0201 	orr.w	r2, r2, #1
 800e972:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e982:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2200      	movs	r2, #0
 800e988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2228      	movs	r2, #40	; 0x28
 800e98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e992:	e007      	b.n	800e9a4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2220      	movs	r2, #32
 800e998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e9a4:	6978      	ldr	r0, [r7, #20]
 800e9a6:	f7fe fcf7 	bl	800d398 <HAL_I2C_ErrorCallback>
}
 800e9aa:	bf00      	nop
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
 800e9b2:	bf00      	nop
 800e9b4:	2000033c 	.word	0x2000033c
 800e9b8:	14f8b589 	.word	0x14f8b589

0800e9bc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b085      	sub	sp, #20
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e9c8:	4b13      	ldr	r3, [pc, #76]	; (800ea18 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	08db      	lsrs	r3, r3, #3
 800e9ce:	4a13      	ldr	r2, [pc, #76]	; (800ea1c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9d4:	0a1a      	lsrs	r2, r3, #8
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d107      	bne.n	800e9fa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ee:	f043 0220 	orr.w	r2, r3, #32
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e008      	b.n	800ea0c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea08:	d0e9      	beq.n	800e9de <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3714      	adds	r7, #20
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	2000033c 	.word	0x2000033c
 800ea1c:	14f8b589 	.word	0x14f8b589

0800ea20 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ea30:	d103      	bne.n	800ea3a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2201      	movs	r2, #1
 800ea36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ea38:	e007      	b.n	800ea4a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ea42:	d102      	bne.n	800ea4a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2208      	movs	r2, #8
 800ea48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ea4a:	bf00      	nop
 800ea4c:	370c      	adds	r7, #12
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea54:	4770      	bx	lr
	...

0800ea58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d101      	bne.n	800ea6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e25b      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d075      	beq.n	800eb62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ea76:	4ba3      	ldr	r3, [pc, #652]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	f003 030c 	and.w	r3, r3, #12
 800ea7e:	2b04      	cmp	r3, #4
 800ea80:	d00c      	beq.n	800ea9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ea82:	4ba0      	ldr	r3, [pc, #640]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ea8a:	2b08      	cmp	r3, #8
 800ea8c:	d112      	bne.n	800eab4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ea8e:	4b9d      	ldr	r3, [pc, #628]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea9a:	d10b      	bne.n	800eab4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea9c:	4b99      	ldr	r3, [pc, #612]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d05b      	beq.n	800eb60 <HAL_RCC_OscConfig+0x108>
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d157      	bne.n	800eb60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e236      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eabc:	d106      	bne.n	800eacc <HAL_RCC_OscConfig+0x74>
 800eabe:	4b91      	ldr	r3, [pc, #580]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4a90      	ldr	r2, [pc, #576]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eac8:	6013      	str	r3, [r2, #0]
 800eaca:	e01d      	b.n	800eb08 <HAL_RCC_OscConfig+0xb0>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ead4:	d10c      	bne.n	800eaf0 <HAL_RCC_OscConfig+0x98>
 800ead6:	4b8b      	ldr	r3, [pc, #556]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a8a      	ldr	r2, [pc, #552]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eadc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eae0:	6013      	str	r3, [r2, #0]
 800eae2:	4b88      	ldr	r3, [pc, #544]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	4a87      	ldr	r2, [pc, #540]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eaec:	6013      	str	r3, [r2, #0]
 800eaee:	e00b      	b.n	800eb08 <HAL_RCC_OscConfig+0xb0>
 800eaf0:	4b84      	ldr	r3, [pc, #528]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a83      	ldr	r2, [pc, #524]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eaf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eafa:	6013      	str	r3, [r2, #0]
 800eafc:	4b81      	ldr	r3, [pc, #516]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a80      	ldr	r2, [pc, #512]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eb06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d013      	beq.n	800eb38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb10:	f7fb fdbc 	bl	800a68c <HAL_GetTick>
 800eb14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb16:	e008      	b.n	800eb2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb18:	f7fb fdb8 	bl	800a68c <HAL_GetTick>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2b64      	cmp	r3, #100	; 0x64
 800eb24:	d901      	bls.n	800eb2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eb26:	2303      	movs	r3, #3
 800eb28:	e1fb      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eb2a:	4b76      	ldr	r3, [pc, #472]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d0f0      	beq.n	800eb18 <HAL_RCC_OscConfig+0xc0>
 800eb36:	e014      	b.n	800eb62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb38:	f7fb fda8 	bl	800a68c <HAL_GetTick>
 800eb3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eb3e:	e008      	b.n	800eb52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eb40:	f7fb fda4 	bl	800a68c <HAL_GetTick>
 800eb44:	4602      	mov	r2, r0
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	1ad3      	subs	r3, r2, r3
 800eb4a:	2b64      	cmp	r3, #100	; 0x64
 800eb4c:	d901      	bls.n	800eb52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eb4e:	2303      	movs	r3, #3
 800eb50:	e1e7      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eb52:	4b6c      	ldr	r3, [pc, #432]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f0      	bne.n	800eb40 <HAL_RCC_OscConfig+0xe8>
 800eb5e:	e000      	b.n	800eb62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d063      	beq.n	800ec36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eb6e:	4b65      	ldr	r3, [pc, #404]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	f003 030c 	and.w	r3, r3, #12
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00b      	beq.n	800eb92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eb7a:	4b62      	ldr	r3, [pc, #392]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eb82:	2b08      	cmp	r3, #8
 800eb84:	d11c      	bne.n	800ebc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eb86:	4b5f      	ldr	r3, [pc, #380]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d116      	bne.n	800ebc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eb92:	4b5c      	ldr	r3, [pc, #368]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d005      	beq.n	800ebaa <HAL_RCC_OscConfig+0x152>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d001      	beq.n	800ebaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e1bb      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebaa:	4b56      	ldr	r3, [pc, #344]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	691b      	ldr	r3, [r3, #16]
 800ebb6:	00db      	lsls	r3, r3, #3
 800ebb8:	4952      	ldr	r1, [pc, #328]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ebba:	4313      	orrs	r3, r2
 800ebbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ebbe:	e03a      	b.n	800ec36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d020      	beq.n	800ec0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ebc8:	4b4f      	ldr	r3, [pc, #316]	; (800ed08 <HAL_RCC_OscConfig+0x2b0>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebce:	f7fb fd5d 	bl	800a68c <HAL_GetTick>
 800ebd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ebd4:	e008      	b.n	800ebe8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ebd6:	f7fb fd59 	bl	800a68c <HAL_GetTick>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	d901      	bls.n	800ebe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	e19c      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ebe8:	4b46      	ldr	r3, [pc, #280]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d0f0      	beq.n	800ebd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebf4:	4b43      	ldr	r3, [pc, #268]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	00db      	lsls	r3, r3, #3
 800ec02:	4940      	ldr	r1, [pc, #256]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ec04:	4313      	orrs	r3, r2
 800ec06:	600b      	str	r3, [r1, #0]
 800ec08:	e015      	b.n	800ec36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec0a:	4b3f      	ldr	r3, [pc, #252]	; (800ed08 <HAL_RCC_OscConfig+0x2b0>)
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec10:	f7fb fd3c 	bl	800a68c <HAL_GetTick>
 800ec14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec16:	e008      	b.n	800ec2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec18:	f7fb fd38 	bl	800a68c <HAL_GetTick>
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	1ad3      	subs	r3, r2, r3
 800ec22:	2b02      	cmp	r3, #2
 800ec24:	d901      	bls.n	800ec2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	e17b      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ec2a:	4b36      	ldr	r3, [pc, #216]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f003 0302 	and.w	r3, r3, #2
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1f0      	bne.n	800ec18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f003 0308 	and.w	r3, r3, #8
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d030      	beq.n	800eca4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d016      	beq.n	800ec78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ec4a:	4b30      	ldr	r3, [pc, #192]	; (800ed0c <HAL_RCC_OscConfig+0x2b4>)
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec50:	f7fb fd1c 	bl	800a68c <HAL_GetTick>
 800ec54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ec56:	e008      	b.n	800ec6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ec58:	f7fb fd18 	bl	800a68c <HAL_GetTick>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d901      	bls.n	800ec6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ec66:	2303      	movs	r3, #3
 800ec68:	e15b      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ec6a:	4b26      	ldr	r3, [pc, #152]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6e:	f003 0302 	and.w	r3, r3, #2
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0f0      	beq.n	800ec58 <HAL_RCC_OscConfig+0x200>
 800ec76:	e015      	b.n	800eca4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ec78:	4b24      	ldr	r3, [pc, #144]	; (800ed0c <HAL_RCC_OscConfig+0x2b4>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec7e:	f7fb fd05 	bl	800a68c <HAL_GetTick>
 800ec82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ec84:	e008      	b.n	800ec98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ec86:	f7fb fd01 	bl	800a68c <HAL_GetTick>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	2b02      	cmp	r3, #2
 800ec92:	d901      	bls.n	800ec98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ec94:	2303      	movs	r3, #3
 800ec96:	e144      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ec98:	4b1a      	ldr	r3, [pc, #104]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ec9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f0      	bne.n	800ec86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 0304 	and.w	r3, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 80a0 	beq.w	800edf2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ecb6:	4b13      	ldr	r3, [pc, #76]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ecb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10f      	bne.n	800ece2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	60bb      	str	r3, [r7, #8]
 800ecc6:	4b0f      	ldr	r3, [pc, #60]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ecc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecca:	4a0e      	ldr	r2, [pc, #56]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800eccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ecd0:	6413      	str	r3, [r2, #64]	; 0x40
 800ecd2:	4b0c      	ldr	r3, [pc, #48]	; (800ed04 <HAL_RCC_OscConfig+0x2ac>)
 800ecd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecda:	60bb      	str	r3, [r7, #8]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ecde:	2301      	movs	r3, #1
 800ece0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ece2:	4b0b      	ldr	r3, [pc, #44]	; (800ed10 <HAL_RCC_OscConfig+0x2b8>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d121      	bne.n	800ed32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ecee:	4b08      	ldr	r3, [pc, #32]	; (800ed10 <HAL_RCC_OscConfig+0x2b8>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	4a07      	ldr	r2, [pc, #28]	; (800ed10 <HAL_RCC_OscConfig+0x2b8>)
 800ecf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ecf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ecfa:	f7fb fcc7 	bl	800a68c <HAL_GetTick>
 800ecfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed00:	e011      	b.n	800ed26 <HAL_RCC_OscConfig+0x2ce>
 800ed02:	bf00      	nop
 800ed04:	40023800 	.word	0x40023800
 800ed08:	42470000 	.word	0x42470000
 800ed0c:	42470e80 	.word	0x42470e80
 800ed10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ed14:	f7fb fcba 	bl	800a68c <HAL_GetTick>
 800ed18:	4602      	mov	r2, r0
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	2b02      	cmp	r3, #2
 800ed20:	d901      	bls.n	800ed26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	e0fd      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed26:	4b81      	ldr	r3, [pc, #516]	; (800ef2c <HAL_RCC_OscConfig+0x4d4>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0f0      	beq.n	800ed14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d106      	bne.n	800ed48 <HAL_RCC_OscConfig+0x2f0>
 800ed3a:	4b7d      	ldr	r3, [pc, #500]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed3e:	4a7c      	ldr	r2, [pc, #496]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed40:	f043 0301 	orr.w	r3, r3, #1
 800ed44:	6713      	str	r3, [r2, #112]	; 0x70
 800ed46:	e01c      	b.n	800ed82 <HAL_RCC_OscConfig+0x32a>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	2b05      	cmp	r3, #5
 800ed4e:	d10c      	bne.n	800ed6a <HAL_RCC_OscConfig+0x312>
 800ed50:	4b77      	ldr	r3, [pc, #476]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed54:	4a76      	ldr	r2, [pc, #472]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed56:	f043 0304 	orr.w	r3, r3, #4
 800ed5a:	6713      	str	r3, [r2, #112]	; 0x70
 800ed5c:	4b74      	ldr	r3, [pc, #464]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed60:	4a73      	ldr	r2, [pc, #460]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed62:	f043 0301 	orr.w	r3, r3, #1
 800ed66:	6713      	str	r3, [r2, #112]	; 0x70
 800ed68:	e00b      	b.n	800ed82 <HAL_RCC_OscConfig+0x32a>
 800ed6a:	4b71      	ldr	r3, [pc, #452]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed6e:	4a70      	ldr	r2, [pc, #448]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed70:	f023 0301 	bic.w	r3, r3, #1
 800ed74:	6713      	str	r3, [r2, #112]	; 0x70
 800ed76:	4b6e      	ldr	r3, [pc, #440]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed7a:	4a6d      	ldr	r2, [pc, #436]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ed7c:	f023 0304 	bic.w	r3, r3, #4
 800ed80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d015      	beq.n	800edb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed8a:	f7fb fc7f 	bl	800a68c <HAL_GetTick>
 800ed8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ed90:	e00a      	b.n	800eda8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ed92:	f7fb fc7b 	bl	800a68c <HAL_GetTick>
 800ed96:	4602      	mov	r2, r0
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d901      	bls.n	800eda8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800eda4:	2303      	movs	r3, #3
 800eda6:	e0bc      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eda8:	4b61      	ldr	r3, [pc, #388]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800edaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edac:	f003 0302 	and.w	r3, r3, #2
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d0ee      	beq.n	800ed92 <HAL_RCC_OscConfig+0x33a>
 800edb4:	e014      	b.n	800ede0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edb6:	f7fb fc69 	bl	800a68c <HAL_GetTick>
 800edba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800edbc:	e00a      	b.n	800edd4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800edbe:	f7fb fc65 	bl	800a68c <HAL_GetTick>
 800edc2:	4602      	mov	r2, r0
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800edcc:	4293      	cmp	r3, r2
 800edce:	d901      	bls.n	800edd4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e0a6      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800edd4:	4b56      	ldr	r3, [pc, #344]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800edd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edd8:	f003 0302 	and.w	r3, r3, #2
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d1ee      	bne.n	800edbe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d105      	bne.n	800edf2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ede6:	4b52      	ldr	r3, [pc, #328]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ede8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edea:	4a51      	ldr	r2, [pc, #324]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800edec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800edf0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	699b      	ldr	r3, [r3, #24]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 8092 	beq.w	800ef20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800edfc:	4b4c      	ldr	r3, [pc, #304]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	f003 030c 	and.w	r3, r3, #12
 800ee04:	2b08      	cmp	r3, #8
 800ee06:	d05c      	beq.n	800eec2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	2b02      	cmp	r3, #2
 800ee0e:	d141      	bne.n	800ee94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee10:	4b48      	ldr	r3, [pc, #288]	; (800ef34 <HAL_RCC_OscConfig+0x4dc>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee16:	f7fb fc39 	bl	800a68c <HAL_GetTick>
 800ee1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee1c:	e008      	b.n	800ee30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee1e:	f7fb fc35 	bl	800a68c <HAL_GetTick>
 800ee22:	4602      	mov	r2, r0
 800ee24:	693b      	ldr	r3, [r7, #16]
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d901      	bls.n	800ee30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	e078      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ee30:	4b3f      	ldr	r3, [pc, #252]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d1f0      	bne.n	800ee1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	69da      	ldr	r2, [r3, #28]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6a1b      	ldr	r3, [r3, #32]
 800ee44:	431a      	orrs	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee4a:	019b      	lsls	r3, r3, #6
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee52:	085b      	lsrs	r3, r3, #1
 800ee54:	3b01      	subs	r3, #1
 800ee56:	041b      	lsls	r3, r3, #16
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5e:	061b      	lsls	r3, r3, #24
 800ee60:	4933      	ldr	r1, [pc, #204]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ee62:	4313      	orrs	r3, r2
 800ee64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ee66:	4b33      	ldr	r3, [pc, #204]	; (800ef34 <HAL_RCC_OscConfig+0x4dc>)
 800ee68:	2201      	movs	r2, #1
 800ee6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee6c:	f7fb fc0e 	bl	800a68c <HAL_GetTick>
 800ee70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee72:	e008      	b.n	800ee86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee74:	f7fb fc0a 	bl	800a68c <HAL_GetTick>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	693b      	ldr	r3, [r7, #16]
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d901      	bls.n	800ee86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ee82:	2303      	movs	r3, #3
 800ee84:	e04d      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee86:	4b2a      	ldr	r3, [pc, #168]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d0f0      	beq.n	800ee74 <HAL_RCC_OscConfig+0x41c>
 800ee92:	e045      	b.n	800ef20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee94:	4b27      	ldr	r3, [pc, #156]	; (800ef34 <HAL_RCC_OscConfig+0x4dc>)
 800ee96:	2200      	movs	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee9a:	f7fb fbf7 	bl	800a68c <HAL_GetTick>
 800ee9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eea0:	e008      	b.n	800eeb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eea2:	f7fb fbf3 	bl	800a68c <HAL_GetTick>
 800eea6:	4602      	mov	r2, r0
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d901      	bls.n	800eeb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800eeb0:	2303      	movs	r3, #3
 800eeb2:	e036      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eeb4:	4b1e      	ldr	r3, [pc, #120]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1f0      	bne.n	800eea2 <HAL_RCC_OscConfig+0x44a>
 800eec0:	e02e      	b.n	800ef20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	699b      	ldr	r3, [r3, #24]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d101      	bne.n	800eece <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800eeca:	2301      	movs	r3, #1
 800eecc:	e029      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eece:	4b18      	ldr	r3, [pc, #96]	; (800ef30 <HAL_RCC_OscConfig+0x4d8>)
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d11c      	bne.n	800ef1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d115      	bne.n	800ef1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800eef0:	68fa      	ldr	r2, [r7, #12]
 800eef2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800eef6:	4013      	ands	r3, r2
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d10d      	bne.n	800ef1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d106      	bne.n	800ef1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d001      	beq.n	800ef20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e000      	b.n	800ef22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800ef20:	2300      	movs	r3, #0
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	40007000 	.word	0x40007000
 800ef30:	40023800 	.word	0x40023800
 800ef34:	42470060 	.word	0x42470060

0800ef38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d101      	bne.n	800ef4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e0cc      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ef4c:	4b68      	ldr	r3, [pc, #416]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f003 030f 	and.w	r3, r3, #15
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d90c      	bls.n	800ef74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef5a:	4b65      	ldr	r3, [pc, #404]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	b2d2      	uxtb	r2, r2
 800ef60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef62:	4b63      	ldr	r3, [pc, #396]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 030f 	and.w	r3, r3, #15
 800ef6a:	683a      	ldr	r2, [r7, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d001      	beq.n	800ef74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ef70:	2301      	movs	r3, #1
 800ef72:	e0b8      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d020      	beq.n	800efc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f003 0304 	and.w	r3, r3, #4
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d005      	beq.n	800ef98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ef8c:	4b59      	ldr	r3, [pc, #356]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	4a58      	ldr	r2, [pc, #352]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ef96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f003 0308 	and.w	r3, r3, #8
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d005      	beq.n	800efb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800efa4:	4b53      	ldr	r3, [pc, #332]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	4a52      	ldr	r2, [pc, #328]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800efaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800efae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800efb0:	4b50      	ldr	r3, [pc, #320]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	494d      	ldr	r1, [pc, #308]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800efbe:	4313      	orrs	r3, r2
 800efc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 0301 	and.w	r3, r3, #1
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d044      	beq.n	800f058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d107      	bne.n	800efe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800efd6:	4b47      	ldr	r3, [pc, #284]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d119      	bne.n	800f016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800efe2:	2301      	movs	r3, #1
 800efe4:	e07f      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d003      	beq.n	800eff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d107      	bne.n	800f006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eff6:	4b3f      	ldr	r3, [pc, #252]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800effe:	2b00      	cmp	r3, #0
 800f000:	d109      	bne.n	800f016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f002:	2301      	movs	r3, #1
 800f004:	e06f      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f006:	4b3b      	ldr	r3, [pc, #236]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	f003 0302 	and.w	r3, r3, #2
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f012:	2301      	movs	r3, #1
 800f014:	e067      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f016:	4b37      	ldr	r3, [pc, #220]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	f023 0203 	bic.w	r2, r3, #3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	4934      	ldr	r1, [pc, #208]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f024:	4313      	orrs	r3, r2
 800f026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f028:	f7fb fb30 	bl	800a68c <HAL_GetTick>
 800f02c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f02e:	e00a      	b.n	800f046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f030:	f7fb fb2c 	bl	800a68c <HAL_GetTick>
 800f034:	4602      	mov	r2, r0
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f03e:	4293      	cmp	r3, r2
 800f040:	d901      	bls.n	800f046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f042:	2303      	movs	r3, #3
 800f044:	e04f      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f046:	4b2b      	ldr	r3, [pc, #172]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	f003 020c 	and.w	r2, r3, #12
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	429a      	cmp	r2, r3
 800f056:	d1eb      	bne.n	800f030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f058:	4b25      	ldr	r3, [pc, #148]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f003 030f 	and.w	r3, r3, #15
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d20c      	bcs.n	800f080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f066:	4b22      	ldr	r3, [pc, #136]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	b2d2      	uxtb	r2, r2
 800f06c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f06e:	4b20      	ldr	r3, [pc, #128]	; (800f0f0 <HAL_RCC_ClockConfig+0x1b8>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f003 030f 	and.w	r3, r3, #15
 800f076:	683a      	ldr	r2, [r7, #0]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d001      	beq.n	800f080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f07c:	2301      	movs	r3, #1
 800f07e:	e032      	b.n	800f0e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f003 0304 	and.w	r3, r3, #4
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d008      	beq.n	800f09e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f08c:	4b19      	ldr	r3, [pc, #100]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	4916      	ldr	r1, [pc, #88]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f09a:	4313      	orrs	r3, r2
 800f09c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f003 0308 	and.w	r3, r3, #8
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d009      	beq.n	800f0be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f0aa:	4b12      	ldr	r3, [pc, #72]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	00db      	lsls	r3, r3, #3
 800f0b8:	490e      	ldr	r1, [pc, #56]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f0be:	f000 f82d 	bl	800f11c <HAL_RCC_GetSysClockFreq>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	4b0b      	ldr	r3, [pc, #44]	; (800f0f4 <HAL_RCC_ClockConfig+0x1bc>)
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	091b      	lsrs	r3, r3, #4
 800f0ca:	f003 030f 	and.w	r3, r3, #15
 800f0ce:	490a      	ldr	r1, [pc, #40]	; (800f0f8 <HAL_RCC_ClockConfig+0x1c0>)
 800f0d0:	5ccb      	ldrb	r3, [r1, r3]
 800f0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800f0d6:	4a09      	ldr	r2, [pc, #36]	; (800f0fc <HAL_RCC_ClockConfig+0x1c4>)
 800f0d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <HAL_RCC_ClockConfig+0x1c8>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fb f93e 	bl	800a360 <HAL_InitTick>

  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	40023c00 	.word	0x40023c00
 800f0f4:	40023800 	.word	0x40023800
 800f0f8:	0801ad3c 	.word	0x0801ad3c
 800f0fc:	2000033c 	.word	0x2000033c
 800f100:	20000340 	.word	0x20000340

0800f104 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800f104:	b480      	push	{r7}
 800f106:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800f108:	4b03      	ldr	r3, [pc, #12]	; (800f118 <HAL_RCC_EnableCSS+0x14>)
 800f10a:	2201      	movs	r2, #1
 800f10c:	601a      	str	r2, [r3, #0]
}
 800f10e:	bf00      	nop
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	4247004c 	.word	0x4247004c

0800f11c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f11c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f120:	b084      	sub	sp, #16
 800f122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f124:	2300      	movs	r3, #0
 800f126:	607b      	str	r3, [r7, #4]
 800f128:	2300      	movs	r3, #0
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	2300      	movs	r3, #0
 800f12e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f130:	2300      	movs	r3, #0
 800f132:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f134:	4b67      	ldr	r3, [pc, #412]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	f003 030c 	and.w	r3, r3, #12
 800f13c:	2b08      	cmp	r3, #8
 800f13e:	d00d      	beq.n	800f15c <HAL_RCC_GetSysClockFreq+0x40>
 800f140:	2b08      	cmp	r3, #8
 800f142:	f200 80bd 	bhi.w	800f2c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <HAL_RCC_GetSysClockFreq+0x34>
 800f14a:	2b04      	cmp	r3, #4
 800f14c:	d003      	beq.n	800f156 <HAL_RCC_GetSysClockFreq+0x3a>
 800f14e:	e0b7      	b.n	800f2c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f150:	4b61      	ldr	r3, [pc, #388]	; (800f2d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f152:	60bb      	str	r3, [r7, #8]
       break;
 800f154:	e0b7      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f156:	4b61      	ldr	r3, [pc, #388]	; (800f2dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 800f158:	60bb      	str	r3, [r7, #8]
      break;
 800f15a:	e0b4      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f15c:	4b5d      	ldr	r3, [pc, #372]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f15e:	685b      	ldr	r3, [r3, #4]
 800f160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f164:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f166:	4b5b      	ldr	r3, [pc, #364]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d04d      	beq.n	800f20e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f172:	4b58      	ldr	r3, [pc, #352]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	099b      	lsrs	r3, r3, #6
 800f178:	461a      	mov	r2, r3
 800f17a:	f04f 0300 	mov.w	r3, #0
 800f17e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f182:	f04f 0100 	mov.w	r1, #0
 800f186:	ea02 0800 	and.w	r8, r2, r0
 800f18a:	ea03 0901 	and.w	r9, r3, r1
 800f18e:	4640      	mov	r0, r8
 800f190:	4649      	mov	r1, r9
 800f192:	f04f 0200 	mov.w	r2, #0
 800f196:	f04f 0300 	mov.w	r3, #0
 800f19a:	014b      	lsls	r3, r1, #5
 800f19c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f1a0:	0142      	lsls	r2, r0, #5
 800f1a2:	4610      	mov	r0, r2
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	ebb0 0008 	subs.w	r0, r0, r8
 800f1aa:	eb61 0109 	sbc.w	r1, r1, r9
 800f1ae:	f04f 0200 	mov.w	r2, #0
 800f1b2:	f04f 0300 	mov.w	r3, #0
 800f1b6:	018b      	lsls	r3, r1, #6
 800f1b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f1bc:	0182      	lsls	r2, r0, #6
 800f1be:	1a12      	subs	r2, r2, r0
 800f1c0:	eb63 0301 	sbc.w	r3, r3, r1
 800f1c4:	f04f 0000 	mov.w	r0, #0
 800f1c8:	f04f 0100 	mov.w	r1, #0
 800f1cc:	00d9      	lsls	r1, r3, #3
 800f1ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f1d2:	00d0      	lsls	r0, r2, #3
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	460b      	mov	r3, r1
 800f1d8:	eb12 0208 	adds.w	r2, r2, r8
 800f1dc:	eb43 0309 	adc.w	r3, r3, r9
 800f1e0:	f04f 0000 	mov.w	r0, #0
 800f1e4:	f04f 0100 	mov.w	r1, #0
 800f1e8:	0259      	lsls	r1, r3, #9
 800f1ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800f1ee:	0250      	lsls	r0, r2, #9
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4610      	mov	r0, r2
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f04f 0300 	mov.w	r3, #0
 800f200:	f7f1 fd42 	bl	8000c88 <__aeabi_uldivmod>
 800f204:	4602      	mov	r2, r0
 800f206:	460b      	mov	r3, r1
 800f208:	4613      	mov	r3, r2
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	e04a      	b.n	800f2a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f20e:	4b31      	ldr	r3, [pc, #196]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	099b      	lsrs	r3, r3, #6
 800f214:	461a      	mov	r2, r3
 800f216:	f04f 0300 	mov.w	r3, #0
 800f21a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f21e:	f04f 0100 	mov.w	r1, #0
 800f222:	ea02 0400 	and.w	r4, r2, r0
 800f226:	ea03 0501 	and.w	r5, r3, r1
 800f22a:	4620      	mov	r0, r4
 800f22c:	4629      	mov	r1, r5
 800f22e:	f04f 0200 	mov.w	r2, #0
 800f232:	f04f 0300 	mov.w	r3, #0
 800f236:	014b      	lsls	r3, r1, #5
 800f238:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f23c:	0142      	lsls	r2, r0, #5
 800f23e:	4610      	mov	r0, r2
 800f240:	4619      	mov	r1, r3
 800f242:	1b00      	subs	r0, r0, r4
 800f244:	eb61 0105 	sbc.w	r1, r1, r5
 800f248:	f04f 0200 	mov.w	r2, #0
 800f24c:	f04f 0300 	mov.w	r3, #0
 800f250:	018b      	lsls	r3, r1, #6
 800f252:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f256:	0182      	lsls	r2, r0, #6
 800f258:	1a12      	subs	r2, r2, r0
 800f25a:	eb63 0301 	sbc.w	r3, r3, r1
 800f25e:	f04f 0000 	mov.w	r0, #0
 800f262:	f04f 0100 	mov.w	r1, #0
 800f266:	00d9      	lsls	r1, r3, #3
 800f268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f26c:	00d0      	lsls	r0, r2, #3
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	1912      	adds	r2, r2, r4
 800f274:	eb45 0303 	adc.w	r3, r5, r3
 800f278:	f04f 0000 	mov.w	r0, #0
 800f27c:	f04f 0100 	mov.w	r1, #0
 800f280:	0299      	lsls	r1, r3, #10
 800f282:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f286:	0290      	lsls	r0, r2, #10
 800f288:	4602      	mov	r2, r0
 800f28a:	460b      	mov	r3, r1
 800f28c:	4610      	mov	r0, r2
 800f28e:	4619      	mov	r1, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	461a      	mov	r2, r3
 800f294:	f04f 0300 	mov.w	r3, #0
 800f298:	f7f1 fcf6 	bl	8000c88 <__aeabi_uldivmod>
 800f29c:	4602      	mov	r2, r0
 800f29e:	460b      	mov	r3, r1
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f2a4:	4b0b      	ldr	r3, [pc, #44]	; (800f2d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	0c1b      	lsrs	r3, r3, #16
 800f2aa:	f003 0303 	and.w	r3, r3, #3
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f2b4:	68fa      	ldr	r2, [r7, #12]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2bc:	60bb      	str	r3, [r7, #8]
      break;
 800f2be:	e002      	b.n	800f2c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f2c0:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f2c2:	60bb      	str	r3, [r7, #8]
      break;
 800f2c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f2c6:	68bb      	ldr	r3, [r7, #8]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f2d2:	bf00      	nop
 800f2d4:	40023800 	.word	0x40023800
 800f2d8:	00f42400 	.word	0x00f42400
 800f2dc:	007a1200 	.word	0x007a1200

0800f2e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f2e4:	4b03      	ldr	r3, [pc, #12]	; (800f2f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
 800f2f2:	bf00      	nop
 800f2f4:	2000033c 	.word	0x2000033c

0800f2f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f2fc:	f7ff fff0 	bl	800f2e0 <HAL_RCC_GetHCLKFreq>
 800f300:	4602      	mov	r2, r0
 800f302:	4b05      	ldr	r3, [pc, #20]	; (800f318 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	0a9b      	lsrs	r3, r3, #10
 800f308:	f003 0307 	and.w	r3, r3, #7
 800f30c:	4903      	ldr	r1, [pc, #12]	; (800f31c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f30e:	5ccb      	ldrb	r3, [r1, r3]
 800f310:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f314:	4618      	mov	r0, r3
 800f316:	bd80      	pop	{r7, pc}
 800f318:	40023800 	.word	0x40023800
 800f31c:	0801ad4c 	.word	0x0801ad4c

0800f320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f324:	f7ff ffdc 	bl	800f2e0 <HAL_RCC_GetHCLKFreq>
 800f328:	4602      	mov	r2, r0
 800f32a:	4b05      	ldr	r3, [pc, #20]	; (800f340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	0b5b      	lsrs	r3, r3, #13
 800f330:	f003 0307 	and.w	r3, r3, #7
 800f334:	4903      	ldr	r1, [pc, #12]	; (800f344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f336:	5ccb      	ldrb	r3, [r1, r3]
 800f338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	40023800 	.word	0x40023800
 800f344:	0801ad4c 	.word	0x0801ad4c

0800f348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	220f      	movs	r2, #15
 800f356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f358:	4b12      	ldr	r3, [pc, #72]	; (800f3a4 <HAL_RCC_GetClockConfig+0x5c>)
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	f003 0203 	and.w	r2, r3, #3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f364:	4b0f      	ldr	r3, [pc, #60]	; (800f3a4 <HAL_RCC_GetClockConfig+0x5c>)
 800f366:	689b      	ldr	r3, [r3, #8]
 800f368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f370:	4b0c      	ldr	r3, [pc, #48]	; (800f3a4 <HAL_RCC_GetClockConfig+0x5c>)
 800f372:	689b      	ldr	r3, [r3, #8]
 800f374:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <HAL_RCC_GetClockConfig+0x5c>)
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	08db      	lsrs	r3, r3, #3
 800f382:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f38a:	4b07      	ldr	r3, [pc, #28]	; (800f3a8 <HAL_RCC_GetClockConfig+0x60>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f003 020f 	and.w	r2, r3, #15
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	601a      	str	r2, [r3, #0]
}
 800f396:	bf00      	nop
 800f398:	370c      	adds	r7, #12
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	40023800 	.word	0x40023800
 800f3a8:	40023c00 	.word	0x40023c00

0800f3ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e056      	b.n	800f46c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d106      	bne.n	800f3de <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7f3 f8a3 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2202      	movs	r2, #2
 800f3e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	681a      	ldr	r2, [r3, #0]
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f3f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685a      	ldr	r2, [r3, #4]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	431a      	orrs	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	431a      	orrs	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	431a      	orrs	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	695b      	ldr	r3, [r3, #20]
 800f410:	431a      	orrs	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	699b      	ldr	r3, [r3, #24]
 800f416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f41a:	431a      	orrs	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	69db      	ldr	r3, [r3, #28]
 800f420:	431a      	orrs	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	ea42 0103 	orr.w	r1, r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	430a      	orrs	r2, r1
 800f434:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	699b      	ldr	r3, [r3, #24]
 800f43a:	0c1b      	lsrs	r3, r3, #16
 800f43c:	f003 0104 	and.w	r1, r3, #4
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	430a      	orrs	r2, r1
 800f44a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	69da      	ldr	r2, [r3, #28]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f45a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f46a:	2300      	movs	r3, #0
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3708      	adds	r7, #8
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}

0800f474 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b088      	sub	sp, #32
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	603b      	str	r3, [r7, #0]
 800f480:	4613      	mov	r3, r2
 800f482:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f484:	2300      	movs	r3, #0
 800f486:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d101      	bne.n	800f496 <HAL_SPI_Transmit+0x22>
 800f492:	2302      	movs	r3, #2
 800f494:	e11e      	b.n	800f6d4 <HAL_SPI_Transmit+0x260>
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2201      	movs	r2, #1
 800f49a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f49e:	f7fb f8f5 	bl	800a68c <HAL_GetTick>
 800f4a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d002      	beq.n	800f4ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f4b4:	2302      	movs	r3, #2
 800f4b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f4b8:	e103      	b.n	800f6c2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <HAL_SPI_Transmit+0x52>
 800f4c0:	88fb      	ldrh	r3, [r7, #6]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d102      	bne.n	800f4cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f4ca:	e0fa      	b.n	800f6c2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	2203      	movs	r2, #3
 800f4d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	88fa      	ldrh	r2, [r7, #6]
 800f4e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f512:	d107      	bne.n	800f524 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	681a      	ldr	r2, [r3, #0]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f522:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f52e:	2b40      	cmp	r3, #64	; 0x40
 800f530:	d007      	beq.n	800f542 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f540:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	68db      	ldr	r3, [r3, #12]
 800f546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f54a:	d14b      	bne.n	800f5e4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <HAL_SPI_Transmit+0xe6>
 800f554:	8afb      	ldrh	r3, [r7, #22]
 800f556:	2b01      	cmp	r3, #1
 800f558:	d13e      	bne.n	800f5d8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f55e:	881a      	ldrh	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f56a:	1c9a      	adds	r2, r3, #2
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f574:	b29b      	uxth	r3, r3
 800f576:	3b01      	subs	r3, #1
 800f578:	b29a      	uxth	r2, r3
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f57e:	e02b      	b.n	800f5d8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	689b      	ldr	r3, [r3, #8]
 800f586:	f003 0302 	and.w	r3, r3, #2
 800f58a:	2b02      	cmp	r3, #2
 800f58c:	d112      	bne.n	800f5b4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f592:	881a      	ldrh	r2, [r3, #0]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f59e:	1c9a      	adds	r2, r3, #2
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	86da      	strh	r2, [r3, #54]	; 0x36
 800f5b2:	e011      	b.n	800f5d8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5b4:	f7fb f86a 	bl	800a68c <HAL_GetTick>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d803      	bhi.n	800f5cc <HAL_SPI_Transmit+0x158>
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5ca:	d102      	bne.n	800f5d2 <HAL_SPI_Transmit+0x15e>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d102      	bne.n	800f5d8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800f5d2:	2303      	movs	r3, #3
 800f5d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f5d6:	e074      	b.n	800f6c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1ce      	bne.n	800f580 <HAL_SPI_Transmit+0x10c>
 800f5e2:	e04c      	b.n	800f67e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <HAL_SPI_Transmit+0x17e>
 800f5ec:	8afb      	ldrh	r3, [r7, #22]
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	d140      	bne.n	800f674 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	330c      	adds	r3, #12
 800f5fc:	7812      	ldrb	r2, [r2, #0]
 800f5fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f604:	1c5a      	adds	r2, r3, #1
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f60e:	b29b      	uxth	r3, r3
 800f610:	3b01      	subs	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f618:	e02c      	b.n	800f674 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	f003 0302 	and.w	r3, r3, #2
 800f624:	2b02      	cmp	r3, #2
 800f626:	d113      	bne.n	800f650 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	330c      	adds	r3, #12
 800f632:	7812      	ldrb	r2, [r2, #0]
 800f634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63a:	1c5a      	adds	r2, r3, #1
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f644:	b29b      	uxth	r3, r3
 800f646:	3b01      	subs	r3, #1
 800f648:	b29a      	uxth	r2, r3
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	86da      	strh	r2, [r3, #54]	; 0x36
 800f64e:	e011      	b.n	800f674 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f650:	f7fb f81c 	bl	800a68c <HAL_GetTick>
 800f654:	4602      	mov	r2, r0
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	683a      	ldr	r2, [r7, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d803      	bhi.n	800f668 <HAL_SPI_Transmit+0x1f4>
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f666:	d102      	bne.n	800f66e <HAL_SPI_Transmit+0x1fa>
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d102      	bne.n	800f674 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800f66e:	2303      	movs	r3, #3
 800f670:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f672:	e026      	b.n	800f6c2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f678:	b29b      	uxth	r3, r3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1cd      	bne.n	800f61a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f000 f9b2 	bl	800f9ec <SPI_EndRxTxTransaction>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d002      	beq.n	800f694 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2220      	movs	r2, #32
 800f692:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	689b      	ldr	r3, [r3, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d10a      	bne.n	800f6b2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f69c:	2300      	movs	r3, #0
 800f69e:	613b      	str	r3, [r7, #16]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	613b      	str	r3, [r7, #16]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	613b      	str	r3, [r7, #16]
 800f6b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d002      	beq.n	800f6c0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	77fb      	strb	r3, [r7, #31]
 800f6be:	e000      	b.n	800f6c2 <HAL_SPI_Transmit+0x24e>
  }

error:
 800f6c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f6d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3720      	adds	r7, #32
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b088      	sub	sp, #32
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	689b      	ldr	r3, [r3, #8]
 800f6f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	099b      	lsrs	r3, r3, #6
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10f      	bne.n	800f720 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f700:	69bb      	ldr	r3, [r7, #24]
 800f702:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00a      	beq.n	800f720 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f70a:	69fb      	ldr	r3, [r7, #28]
 800f70c:	099b      	lsrs	r3, r3, #6
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b00      	cmp	r3, #0
 800f714:	d004      	beq.n	800f720 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	4798      	blx	r3
    return;
 800f71e:	e0d7      	b.n	800f8d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	085b      	lsrs	r3, r3, #1
 800f724:	f003 0301 	and.w	r3, r3, #1
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00a      	beq.n	800f742 <HAL_SPI_IRQHandler+0x66>
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	09db      	lsrs	r3, r3, #7
 800f730:	f003 0301 	and.w	r3, r3, #1
 800f734:	2b00      	cmp	r3, #0
 800f736:	d004      	beq.n	800f742 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	4798      	blx	r3
    return;
 800f740:	e0c6      	b.n	800f8d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	095b      	lsrs	r3, r3, #5
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10c      	bne.n	800f768 <HAL_SPI_IRQHandler+0x8c>
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	099b      	lsrs	r3, r3, #6
 800f752:	f003 0301 	and.w	r3, r3, #1
 800f756:	2b00      	cmp	r3, #0
 800f758:	d106      	bne.n	800f768 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	0a1b      	lsrs	r3, r3, #8
 800f75e:	f003 0301 	and.w	r3, r3, #1
 800f762:	2b00      	cmp	r3, #0
 800f764:	f000 80b4 	beq.w	800f8d0 <HAL_SPI_IRQHandler+0x1f4>
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	095b      	lsrs	r3, r3, #5
 800f76c:	f003 0301 	and.w	r3, r3, #1
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 80ad 	beq.w	800f8d0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	099b      	lsrs	r3, r3, #6
 800f77a:	f003 0301 	and.w	r3, r3, #1
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d023      	beq.n	800f7ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d011      	beq.n	800f7b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f792:	f043 0204 	orr.w	r2, r3, #4
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f79a:	2300      	movs	r3, #0
 800f79c:	617b      	str	r3, [r7, #20]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	617b      	str	r3, [r7, #20]
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	617b      	str	r3, [r7, #20]
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	e00b      	b.n	800f7ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	613b      	str	r3, [r7, #16]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	613b      	str	r3, [r7, #16]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	613b      	str	r3, [r7, #16]
 800f7c6:	693b      	ldr	r3, [r7, #16]
        return;
 800f7c8:	e082      	b.n	800f8d0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	095b      	lsrs	r3, r3, #5
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d014      	beq.n	800f800 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7da:	f043 0201 	orr.w	r2, r3, #1
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60fb      	str	r3, [r7, #12]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7fc:	601a      	str	r2, [r3, #0]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	0a1b      	lsrs	r3, r3, #8
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00c      	beq.n	800f826 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f810:	f043 0208 	orr.w	r2, r3, #8
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f818:	2300      	movs	r3, #0
 800f81a:	60bb      	str	r3, [r7, #8]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	60bb      	str	r3, [r7, #8]
 800f824:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d04f      	beq.n	800f8ce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	685a      	ldr	r2, [r3, #4]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f83c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d104      	bne.n	800f85a <HAL_SPI_IRQHandler+0x17e>
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	2b00      	cmp	r3, #0
 800f858:	d034      	beq.n	800f8c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	685a      	ldr	r2, [r3, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f022 0203 	bic.w	r2, r2, #3
 800f868:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d011      	beq.n	800f896 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f876:	4a18      	ldr	r2, [pc, #96]	; (800f8d8 <HAL_SPI_IRQHandler+0x1fc>)
 800f878:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fc f866 	bl	800b950 <HAL_DMA_Abort_IT>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d005      	beq.n	800f896 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d016      	beq.n	800f8cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8a2:	4a0d      	ldr	r2, [pc, #52]	; (800f8d8 <HAL_SPI_IRQHandler+0x1fc>)
 800f8a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fc f850 	bl	800b950 <HAL_DMA_Abort_IT>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00a      	beq.n	800f8cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f8c2:	e003      	b.n	800f8cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f809 	bl	800f8dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f8ca:	e000      	b.n	800f8ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f8cc:	bf00      	nop
    return;
 800f8ce:	bf00      	nop
  }
}
 800f8d0:	3720      	adds	r7, #32
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0800f8f1 	.word	0x0800f8f1

0800f8dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f8e4:	bf00      	nop
 800f8e6:	370c      	adds	r7, #12
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ee:	4770      	bx	lr

0800f8f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2200      	movs	r2, #0
 800f908:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7ff ffe6 	bl	800f8dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f910:	bf00      	nop
 800f912:	3710      	adds	r7, #16
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	603b      	str	r3, [r7, #0]
 800f924:	4613      	mov	r3, r2
 800f926:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f928:	e04c      	b.n	800f9c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f930:	d048      	beq.n	800f9c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f932:	f7fa feab 	bl	800a68c <HAL_GetTick>
 800f936:	4602      	mov	r2, r0
 800f938:	69bb      	ldr	r3, [r7, #24]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d902      	bls.n	800f948 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d13d      	bne.n	800f9c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	685a      	ldr	r2, [r3, #4]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f956:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f960:	d111      	bne.n	800f986 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f96a:	d004      	beq.n	800f976 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f974:	d107      	bne.n	800f986 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f984:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f98e:	d10f      	bne.n	800f9b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e00f      	b.n	800f9e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	689a      	ldr	r2, [r3, #8]
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	4013      	ands	r3, r2
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	bf0c      	ite	eq
 800f9d4:	2301      	moveq	r3, #1
 800f9d6:	2300      	movne	r3, #0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	461a      	mov	r2, r3
 800f9dc:	79fb      	ldrb	r3, [r7, #7]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	d1a3      	bne.n	800f92a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af02      	add	r7, sp, #8
 800f9f2:	60f8      	str	r0, [r7, #12]
 800f9f4:	60b9      	str	r1, [r7, #8]
 800f9f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f9f8:	4b1b      	ldr	r3, [pc, #108]	; (800fa68 <SPI_EndRxTxTransaction+0x7c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a1b      	ldr	r2, [pc, #108]	; (800fa6c <SPI_EndRxTxTransaction+0x80>)
 800f9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800fa02:	0d5b      	lsrs	r3, r3, #21
 800fa04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa08:	fb02 f303 	mul.w	r3, r2, r3
 800fa0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa16:	d112      	bne.n	800fa3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	2180      	movs	r1, #128	; 0x80
 800fa22:	68f8      	ldr	r0, [r7, #12]
 800fa24:	f7ff ff78 	bl	800f918 <SPI_WaitFlagStateUntilTimeout>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d016      	beq.n	800fa5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa32:	f043 0220 	orr.w	r2, r3, #32
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	e00f      	b.n	800fa5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00a      	beq.n	800fa5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	3b01      	subs	r3, #1
 800fa48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa54:	2b80      	cmp	r3, #128	; 0x80
 800fa56:	d0f2      	beq.n	800fa3e <SPI_EndRxTxTransaction+0x52>
 800fa58:	e000      	b.n	800fa5c <SPI_EndRxTxTransaction+0x70>
        break;
 800fa5a:	bf00      	nop
  }

  return HAL_OK;
 800fa5c:	2300      	movs	r3, #0
}
 800fa5e:	4618      	mov	r0, r3
 800fa60:	3718      	adds	r7, #24
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	2000033c 	.word	0x2000033c
 800fa6c:	165e9f81 	.word	0x165e9f81

0800fa70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e01d      	b.n	800fabe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7f2 fa90 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	3304      	adds	r3, #4
 800faac:	4619      	mov	r1, r3
 800faae:	4610      	mov	r0, r2
 800fab0:	f000 fb74 	bl	801019c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2201      	movs	r2, #1
 800fab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}

0800fac6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fac6:	b480      	push	{r7}
 800fac8:	b085      	sub	sp, #20
 800faca:	af00      	add	r7, sp, #0
 800facc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2202      	movs	r2, #2
 800fad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	f003 0307 	and.w	r3, r3, #7
 800fae0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2b06      	cmp	r3, #6
 800fae6:	d007      	beq.n	800faf8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f042 0201 	orr.w	r2, r2, #1
 800faf6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2201      	movs	r2, #1
 800fafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800fb00:	2300      	movs	r3, #0
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr

0800fb0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b085      	sub	sp, #20
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	68da      	ldr	r2, [r3, #12]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	f042 0201 	orr.w	r2, r2, #1
 800fb24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	f003 0307 	and.w	r3, r3, #7
 800fb30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2b06      	cmp	r3, #6
 800fb36:	d007      	beq.n	800fb48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	f042 0201 	orr.w	r2, r2, #1
 800fb46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fb48:	2300      	movs	r3, #0
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b082      	sub	sp, #8
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb64:	2301      	movs	r3, #1
 800fb66:	e01d      	b.n	800fba4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d106      	bne.n	800fb82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7f2 f8df 	bl	8001d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2202      	movs	r2, #2
 800fb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	3304      	adds	r3, #4
 800fb92:	4619      	mov	r1, r3
 800fb94:	4610      	mov	r0, r2
 800fb96:	f000 fb01 	bl	801019c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2201      	movs	r2, #1
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f000 fdd6 	bl	8010770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a15      	ldr	r2, [pc, #84]	; (800fc20 <HAL_TIM_PWM_Start+0x74>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d004      	beq.n	800fbd8 <HAL_TIM_PWM_Start+0x2c>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	4a14      	ldr	r2, [pc, #80]	; (800fc24 <HAL_TIM_PWM_Start+0x78>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d101      	bne.n	800fbdc <HAL_TIM_PWM_Start+0x30>
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e000      	b.n	800fbde <HAL_TIM_PWM_Start+0x32>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d007      	beq.n	800fbf2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fbf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	f003 0307 	and.w	r3, r3, #7
 800fbfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	2b06      	cmp	r3, #6
 800fc02:	d007      	beq.n	800fc14 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681a      	ldr	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	f042 0201 	orr.w	r2, r2, #1
 800fc12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fc14:	2300      	movs	r3, #0
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	40010000 	.word	0x40010000
 800fc24:	40010400 	.word	0x40010400

0800fc28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d122      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f003 0302 	and.w	r3, r3, #2
 800fc48:	2b02      	cmp	r3, #2
 800fc4a:	d11b      	bne.n	800fc84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f06f 0202 	mvn.w	r2, #2
 800fc54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	699b      	ldr	r3, [r3, #24]
 800fc62:	f003 0303 	and.w	r3, r3, #3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d003      	beq.n	800fc72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fa78 	bl	8010160 <HAL_TIM_IC_CaptureCallback>
 800fc70:	e005      	b.n	800fc7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fa6a 	bl	801014c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fa7b 	bl	8010174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	691b      	ldr	r3, [r3, #16]
 800fc8a:	f003 0304 	and.w	r3, r3, #4
 800fc8e:	2b04      	cmp	r3, #4
 800fc90:	d122      	bne.n	800fcd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b04      	cmp	r3, #4
 800fc9e:	d11b      	bne.n	800fcd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f06f 0204 	mvn.w	r2, #4
 800fca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2202      	movs	r2, #2
 800fcae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 fa4e 	bl	8010160 <HAL_TIM_IC_CaptureCallback>
 800fcc4:	e005      	b.n	800fcd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f000 fa40 	bl	801014c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fa51 	bl	8010174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	691b      	ldr	r3, [r3, #16]
 800fcde:	f003 0308 	and.w	r3, r3, #8
 800fce2:	2b08      	cmp	r3, #8
 800fce4:	d122      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	f003 0308 	and.w	r3, r3, #8
 800fcf0:	2b08      	cmp	r3, #8
 800fcf2:	d11b      	bne.n	800fd2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f06f 0208 	mvn.w	r2, #8
 800fcfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2204      	movs	r2, #4
 800fd02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	69db      	ldr	r3, [r3, #28]
 800fd0a:	f003 0303 	and.w	r3, r3, #3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 fa24 	bl	8010160 <HAL_TIM_IC_CaptureCallback>
 800fd18:	e005      	b.n	800fd26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd1a:	6878      	ldr	r0, [r7, #4]
 800fd1c:	f000 fa16 	bl	801014c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fa27 	bl	8010174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	f003 0310 	and.w	r3, r3, #16
 800fd36:	2b10      	cmp	r3, #16
 800fd38:	d122      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	f003 0310 	and.w	r3, r3, #16
 800fd44:	2b10      	cmp	r3, #16
 800fd46:	d11b      	bne.n	800fd80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f06f 0210 	mvn.w	r2, #16
 800fd50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2208      	movs	r2, #8
 800fd56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	69db      	ldr	r3, [r3, #28]
 800fd5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d003      	beq.n	800fd6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f000 f9fa 	bl	8010160 <HAL_TIM_IC_CaptureCallback>
 800fd6c:	e005      	b.n	800fd7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f9ec 	bl	801014c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 f9fd 	bl	8010174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	f003 0301 	and.w	r3, r3, #1
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d10e      	bne.n	800fdac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d107      	bne.n	800fdac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f06f 0201 	mvn.w	r2, #1
 800fda4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7fa fa8a 	bl	800a2c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdb6:	2b80      	cmp	r3, #128	; 0x80
 800fdb8:	d10e      	bne.n	800fdd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdc4:	2b80      	cmp	r3, #128	; 0x80
 800fdc6:	d107      	bne.n	800fdd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fdd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f000 fd78 	bl	80108c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fde2:	2b40      	cmp	r3, #64	; 0x40
 800fde4:	d10e      	bne.n	800fe04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf0:	2b40      	cmp	r3, #64	; 0x40
 800fdf2:	d107      	bne.n	800fe04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fdfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 f9c2 	bl	8010188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	691b      	ldr	r3, [r3, #16]
 800fe0a:	f003 0320 	and.w	r3, r3, #32
 800fe0e:	2b20      	cmp	r3, #32
 800fe10:	d10e      	bne.n	800fe30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	f003 0320 	and.w	r3, r3, #32
 800fe1c:	2b20      	cmp	r3, #32
 800fe1e:	d107      	bne.n	800fe30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f06f 0220 	mvn.w	r2, #32
 800fe28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fd42 	bl	80108b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d101      	bne.n	800fe52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fe4e:	2302      	movs	r3, #2
 800fe50:	e0b4      	b.n	800ffbc <HAL_TIM_PWM_ConfigChannel+0x184>
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2201      	movs	r2, #1
 800fe56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2202      	movs	r2, #2
 800fe5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2b0c      	cmp	r3, #12
 800fe66:	f200 809f 	bhi.w	800ffa8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800fe6a:	a201      	add	r2, pc, #4	; (adr r2, 800fe70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800fe6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe70:	0800fea5 	.word	0x0800fea5
 800fe74:	0800ffa9 	.word	0x0800ffa9
 800fe78:	0800ffa9 	.word	0x0800ffa9
 800fe7c:	0800ffa9 	.word	0x0800ffa9
 800fe80:	0800fee5 	.word	0x0800fee5
 800fe84:	0800ffa9 	.word	0x0800ffa9
 800fe88:	0800ffa9 	.word	0x0800ffa9
 800fe8c:	0800ffa9 	.word	0x0800ffa9
 800fe90:	0800ff27 	.word	0x0800ff27
 800fe94:	0800ffa9 	.word	0x0800ffa9
 800fe98:	0800ffa9 	.word	0x0800ffa9
 800fe9c:	0800ffa9 	.word	0x0800ffa9
 800fea0:	0800ff67 	.word	0x0800ff67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	68b9      	ldr	r1, [r7, #8]
 800feaa:	4618      	mov	r0, r3
 800feac:	f000 fa16 	bl	80102dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	699a      	ldr	r2, [r3, #24]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f042 0208 	orr.w	r2, r2, #8
 800febe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	699a      	ldr	r2, [r3, #24]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f022 0204 	bic.w	r2, r2, #4
 800fece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	6999      	ldr	r1, [r3, #24]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	691a      	ldr	r2, [r3, #16]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	430a      	orrs	r2, r1
 800fee0:	619a      	str	r2, [r3, #24]
      break;
 800fee2:	e062      	b.n	800ffaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68b9      	ldr	r1, [r7, #8]
 800feea:	4618      	mov	r0, r3
 800feec:	f000 fa66 	bl	80103bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	699a      	ldr	r2, [r3, #24]
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fefe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	699a      	ldr	r2, [r3, #24]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	6999      	ldr	r1, [r3, #24]
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	691b      	ldr	r3, [r3, #16]
 800ff1a:	021a      	lsls	r2, r3, #8
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	430a      	orrs	r2, r1
 800ff22:	619a      	str	r2, [r3, #24]
      break;
 800ff24:	e041      	b.n	800ffaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	68b9      	ldr	r1, [r7, #8]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f000 fabb 	bl	80104a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	69da      	ldr	r2, [r3, #28]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f042 0208 	orr.w	r2, r2, #8
 800ff40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	69da      	ldr	r2, [r3, #28]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f022 0204 	bic.w	r2, r2, #4
 800ff50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	69d9      	ldr	r1, [r3, #28]
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	691a      	ldr	r2, [r3, #16]
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	430a      	orrs	r2, r1
 800ff62:	61da      	str	r2, [r3, #28]
      break;
 800ff64:	e021      	b.n	800ffaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	68b9      	ldr	r1, [r7, #8]
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f000 fb0f 	bl	8010590 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	69da      	ldr	r2, [r3, #28]
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	69da      	ldr	r2, [r3, #28]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	69d9      	ldr	r1, [r3, #28]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	021a      	lsls	r2, r3, #8
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	430a      	orrs	r2, r1
 800ffa4:	61da      	str	r2, [r3, #28]
      break;
 800ffa6:	e000      	b.n	800ffaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ffa8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b084      	sub	sp, #16
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	d101      	bne.n	800ffdc <HAL_TIM_ConfigClockSource+0x18>
 800ffd8:	2302      	movs	r3, #2
 800ffda:	e0b3      	b.n	8010144 <HAL_TIM_ConfigClockSource+0x180>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2202      	movs	r2, #2
 800ffe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	689b      	ldr	r3, [r3, #8]
 800fff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010002:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010014:	d03e      	beq.n	8010094 <HAL_TIM_ConfigClockSource+0xd0>
 8010016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801001a:	f200 8087 	bhi.w	801012c <HAL_TIM_ConfigClockSource+0x168>
 801001e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010022:	f000 8085 	beq.w	8010130 <HAL_TIM_ConfigClockSource+0x16c>
 8010026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801002a:	d87f      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 801002c:	2b70      	cmp	r3, #112	; 0x70
 801002e:	d01a      	beq.n	8010066 <HAL_TIM_ConfigClockSource+0xa2>
 8010030:	2b70      	cmp	r3, #112	; 0x70
 8010032:	d87b      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 8010034:	2b60      	cmp	r3, #96	; 0x60
 8010036:	d050      	beq.n	80100da <HAL_TIM_ConfigClockSource+0x116>
 8010038:	2b60      	cmp	r3, #96	; 0x60
 801003a:	d877      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 801003c:	2b50      	cmp	r3, #80	; 0x50
 801003e:	d03c      	beq.n	80100ba <HAL_TIM_ConfigClockSource+0xf6>
 8010040:	2b50      	cmp	r3, #80	; 0x50
 8010042:	d873      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 8010044:	2b40      	cmp	r3, #64	; 0x40
 8010046:	d058      	beq.n	80100fa <HAL_TIM_ConfigClockSource+0x136>
 8010048:	2b40      	cmp	r3, #64	; 0x40
 801004a:	d86f      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 801004c:	2b30      	cmp	r3, #48	; 0x30
 801004e:	d064      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x156>
 8010050:	2b30      	cmp	r3, #48	; 0x30
 8010052:	d86b      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 8010054:	2b20      	cmp	r3, #32
 8010056:	d060      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x156>
 8010058:	2b20      	cmp	r3, #32
 801005a:	d867      	bhi.n	801012c <HAL_TIM_ConfigClockSource+0x168>
 801005c:	2b00      	cmp	r3, #0
 801005e:	d05c      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x156>
 8010060:	2b10      	cmp	r3, #16
 8010062:	d05a      	beq.n	801011a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8010064:	e062      	b.n	801012c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6818      	ldr	r0, [r3, #0]
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	6899      	ldr	r1, [r3, #8]
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	685a      	ldr	r2, [r3, #4]
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	f000 fb5b 	bl	8010730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	609a      	str	r2, [r3, #8]
      break;
 8010092:	e04e      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6818      	ldr	r0, [r3, #0]
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	6899      	ldr	r1, [r3, #8]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	685a      	ldr	r2, [r3, #4]
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	f000 fb44 	bl	8010730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	689a      	ldr	r2, [r3, #8]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80100b6:	609a      	str	r2, [r3, #8]
      break;
 80100b8:	e03b      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6818      	ldr	r0, [r3, #0]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	6859      	ldr	r1, [r3, #4]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	461a      	mov	r2, r3
 80100c8:	f000 fab8 	bl	801063c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	2150      	movs	r1, #80	; 0x50
 80100d2:	4618      	mov	r0, r3
 80100d4:	f000 fb11 	bl	80106fa <TIM_ITRx_SetConfig>
      break;
 80100d8:	e02b      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6818      	ldr	r0, [r3, #0]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	6859      	ldr	r1, [r3, #4]
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	68db      	ldr	r3, [r3, #12]
 80100e6:	461a      	mov	r2, r3
 80100e8:	f000 fad7 	bl	801069a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	2160      	movs	r1, #96	; 0x60
 80100f2:	4618      	mov	r0, r3
 80100f4:	f000 fb01 	bl	80106fa <TIM_ITRx_SetConfig>
      break;
 80100f8:	e01b      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6818      	ldr	r0, [r3, #0]
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	6859      	ldr	r1, [r3, #4]
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	461a      	mov	r2, r3
 8010108:	f000 fa98 	bl	801063c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	2140      	movs	r1, #64	; 0x40
 8010112:	4618      	mov	r0, r3
 8010114:	f000 faf1 	bl	80106fa <TIM_ITRx_SetConfig>
      break;
 8010118:	e00b      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4619      	mov	r1, r3
 8010124:	4610      	mov	r0, r2
 8010126:	f000 fae8 	bl	80106fa <TIM_ITRx_SetConfig>
      break;
 801012a:	e002      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801012c:	bf00      	nop
 801012e:	e000      	b.n	8010132 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8010130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010154:	bf00      	nop
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr

08010160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010160:	b480      	push	{r7}
 8010162:	b083      	sub	sp, #12
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010168:	bf00      	nop
 801016a:	370c      	adds	r7, #12
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801017c:	bf00      	nop
 801017e:	370c      	adds	r7, #12
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr

08010188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010190:	bf00      	nop
 8010192:	370c      	adds	r7, #12
 8010194:	46bd      	mov	sp, r7
 8010196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019a:	4770      	bx	lr

0801019c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801019c:	b480      	push	{r7}
 801019e:	b085      	sub	sp, #20
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	4a40      	ldr	r2, [pc, #256]	; (80102b0 <TIM_Base_SetConfig+0x114>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d013      	beq.n	80101dc <TIM_Base_SetConfig+0x40>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101ba:	d00f      	beq.n	80101dc <TIM_Base_SetConfig+0x40>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	4a3d      	ldr	r2, [pc, #244]	; (80102b4 <TIM_Base_SetConfig+0x118>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d00b      	beq.n	80101dc <TIM_Base_SetConfig+0x40>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	4a3c      	ldr	r2, [pc, #240]	; (80102b8 <TIM_Base_SetConfig+0x11c>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d007      	beq.n	80101dc <TIM_Base_SetConfig+0x40>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a3b      	ldr	r2, [pc, #236]	; (80102bc <TIM_Base_SetConfig+0x120>)
 80101d0:	4293      	cmp	r3, r2
 80101d2:	d003      	beq.n	80101dc <TIM_Base_SetConfig+0x40>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4a3a      	ldr	r2, [pc, #232]	; (80102c0 <TIM_Base_SetConfig+0x124>)
 80101d8:	4293      	cmp	r3, r2
 80101da:	d108      	bne.n	80101ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a2f      	ldr	r2, [pc, #188]	; (80102b0 <TIM_Base_SetConfig+0x114>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d02b      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101fc:	d027      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a2c      	ldr	r2, [pc, #176]	; (80102b4 <TIM_Base_SetConfig+0x118>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d023      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	4a2b      	ldr	r2, [pc, #172]	; (80102b8 <TIM_Base_SetConfig+0x11c>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d01f      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	4a2a      	ldr	r2, [pc, #168]	; (80102bc <TIM_Base_SetConfig+0x120>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d01b      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a29      	ldr	r2, [pc, #164]	; (80102c0 <TIM_Base_SetConfig+0x124>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d017      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a28      	ldr	r2, [pc, #160]	; (80102c4 <TIM_Base_SetConfig+0x128>)
 8010222:	4293      	cmp	r3, r2
 8010224:	d013      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4a27      	ldr	r2, [pc, #156]	; (80102c8 <TIM_Base_SetConfig+0x12c>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d00f      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	4a26      	ldr	r2, [pc, #152]	; (80102cc <TIM_Base_SetConfig+0x130>)
 8010232:	4293      	cmp	r3, r2
 8010234:	d00b      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4a25      	ldr	r2, [pc, #148]	; (80102d0 <TIM_Base_SetConfig+0x134>)
 801023a:	4293      	cmp	r3, r2
 801023c:	d007      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4a24      	ldr	r2, [pc, #144]	; (80102d4 <TIM_Base_SetConfig+0x138>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d003      	beq.n	801024e <TIM_Base_SetConfig+0xb2>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	4a23      	ldr	r2, [pc, #140]	; (80102d8 <TIM_Base_SetConfig+0x13c>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d108      	bne.n	8010260 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	4313      	orrs	r3, r2
 801025e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	695b      	ldr	r3, [r3, #20]
 801026a:	4313      	orrs	r3, r2
 801026c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	689a      	ldr	r2, [r3, #8]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	4a0a      	ldr	r2, [pc, #40]	; (80102b0 <TIM_Base_SetConfig+0x114>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d003      	beq.n	8010294 <TIM_Base_SetConfig+0xf8>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	4a0c      	ldr	r2, [pc, #48]	; (80102c0 <TIM_Base_SetConfig+0x124>)
 8010290:	4293      	cmp	r3, r2
 8010292:	d103      	bne.n	801029c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	691a      	ldr	r2, [r3, #16]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	615a      	str	r2, [r3, #20]
}
 80102a2:	bf00      	nop
 80102a4:	3714      	adds	r7, #20
 80102a6:	46bd      	mov	sp, r7
 80102a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop
 80102b0:	40010000 	.word	0x40010000
 80102b4:	40000400 	.word	0x40000400
 80102b8:	40000800 	.word	0x40000800
 80102bc:	40000c00 	.word	0x40000c00
 80102c0:	40010400 	.word	0x40010400
 80102c4:	40014000 	.word	0x40014000
 80102c8:	40014400 	.word	0x40014400
 80102cc:	40014800 	.word	0x40014800
 80102d0:	40001800 	.word	0x40001800
 80102d4:	40001c00 	.word	0x40001c00
 80102d8:	40002000 	.word	0x40002000

080102dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80102dc:	b480      	push	{r7}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a1b      	ldr	r3, [r3, #32]
 80102ea:	f023 0201 	bic.w	r2, r3, #1
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	699b      	ldr	r3, [r3, #24]
 8010302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801030a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f023 0303 	bic.w	r3, r3, #3
 8010312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	68fa      	ldr	r2, [r7, #12]
 801031a:	4313      	orrs	r3, r2
 801031c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	f023 0302 	bic.w	r3, r3, #2
 8010324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	689b      	ldr	r3, [r3, #8]
 801032a:	697a      	ldr	r2, [r7, #20]
 801032c:	4313      	orrs	r3, r2
 801032e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4a20      	ldr	r2, [pc, #128]	; (80103b4 <TIM_OC1_SetConfig+0xd8>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d003      	beq.n	8010340 <TIM_OC1_SetConfig+0x64>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	4a1f      	ldr	r2, [pc, #124]	; (80103b8 <TIM_OC1_SetConfig+0xdc>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d10c      	bne.n	801035a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f023 0308 	bic.w	r3, r3, #8
 8010346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010348:	683b      	ldr	r3, [r7, #0]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	697a      	ldr	r2, [r7, #20]
 801034e:	4313      	orrs	r3, r2
 8010350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	f023 0304 	bic.w	r3, r3, #4
 8010358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4a15      	ldr	r2, [pc, #84]	; (80103b4 <TIM_OC1_SetConfig+0xd8>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d003      	beq.n	801036a <TIM_OC1_SetConfig+0x8e>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	4a14      	ldr	r2, [pc, #80]	; (80103b8 <TIM_OC1_SetConfig+0xdc>)
 8010366:	4293      	cmp	r3, r2
 8010368:	d111      	bne.n	801038e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	4313      	orrs	r3, r2
 8010382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	699b      	ldr	r3, [r3, #24]
 8010388:	693a      	ldr	r2, [r7, #16]
 801038a:	4313      	orrs	r3, r2
 801038c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	685a      	ldr	r2, [r3, #4]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	697a      	ldr	r2, [r7, #20]
 80103a6:	621a      	str	r2, [r3, #32]
}
 80103a8:	bf00      	nop
 80103aa:	371c      	adds	r7, #28
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	40010000 	.word	0x40010000
 80103b8:	40010400 	.word	0x40010400

080103bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80103bc:	b480      	push	{r7}
 80103be:	b087      	sub	sp, #28
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
 80103c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	f023 0210 	bic.w	r2, r3, #16
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	699b      	ldr	r3, [r3, #24]
 80103e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	021b      	lsls	r3, r3, #8
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	4313      	orrs	r3, r2
 80103fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	f023 0320 	bic.w	r3, r3, #32
 8010406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	689b      	ldr	r3, [r3, #8]
 801040c:	011b      	lsls	r3, r3, #4
 801040e:	697a      	ldr	r2, [r7, #20]
 8010410:	4313      	orrs	r3, r2
 8010412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4a22      	ldr	r2, [pc, #136]	; (80104a0 <TIM_OC2_SetConfig+0xe4>)
 8010418:	4293      	cmp	r3, r2
 801041a:	d003      	beq.n	8010424 <TIM_OC2_SetConfig+0x68>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	4a21      	ldr	r2, [pc, #132]	; (80104a4 <TIM_OC2_SetConfig+0xe8>)
 8010420:	4293      	cmp	r3, r2
 8010422:	d10d      	bne.n	8010440 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801042a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	011b      	lsls	r3, r3, #4
 8010432:	697a      	ldr	r2, [r7, #20]
 8010434:	4313      	orrs	r3, r2
 8010436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010438:	697b      	ldr	r3, [r7, #20]
 801043a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801043e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a17      	ldr	r2, [pc, #92]	; (80104a0 <TIM_OC2_SetConfig+0xe4>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d003      	beq.n	8010450 <TIM_OC2_SetConfig+0x94>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4a16      	ldr	r2, [pc, #88]	; (80104a4 <TIM_OC2_SetConfig+0xe8>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d113      	bne.n	8010478 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801045e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	695b      	ldr	r3, [r3, #20]
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	693a      	ldr	r2, [r7, #16]
 8010468:	4313      	orrs	r3, r2
 801046a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	699b      	ldr	r3, [r3, #24]
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	693a      	ldr	r2, [r7, #16]
 8010474:	4313      	orrs	r3, r2
 8010476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	693a      	ldr	r2, [r7, #16]
 801047c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	685a      	ldr	r2, [r3, #4]
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	697a      	ldr	r2, [r7, #20]
 8010490:	621a      	str	r2, [r3, #32]
}
 8010492:	bf00      	nop
 8010494:	371c      	adds	r7, #28
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	40010000 	.word	0x40010000
 80104a4:	40010400 	.word	0x40010400

080104a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80104a8:	b480      	push	{r7}
 80104aa:	b087      	sub	sp, #28
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
 80104b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6a1b      	ldr	r3, [r3, #32]
 80104b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6a1b      	ldr	r3, [r3, #32]
 80104c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	69db      	ldr	r3, [r3, #28]
 80104ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f023 0303 	bic.w	r3, r3, #3
 80104de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68fa      	ldr	r2, [r7, #12]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104f2:	683b      	ldr	r3, [r7, #0]
 80104f4:	689b      	ldr	r3, [r3, #8]
 80104f6:	021b      	lsls	r3, r3, #8
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	4313      	orrs	r3, r2
 80104fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	4a21      	ldr	r2, [pc, #132]	; (8010588 <TIM_OC3_SetConfig+0xe0>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d003      	beq.n	801050e <TIM_OC3_SetConfig+0x66>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	4a20      	ldr	r2, [pc, #128]	; (801058c <TIM_OC3_SetConfig+0xe4>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d10d      	bne.n	801052a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	021b      	lsls	r3, r3, #8
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	4313      	orrs	r3, r2
 8010520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a16      	ldr	r2, [pc, #88]	; (8010588 <TIM_OC3_SetConfig+0xe0>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d003      	beq.n	801053a <TIM_OC3_SetConfig+0x92>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a15      	ldr	r2, [pc, #84]	; (801058c <TIM_OC3_SetConfig+0xe4>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d113      	bne.n	8010562 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	695b      	ldr	r3, [r3, #20]
 801054e:	011b      	lsls	r3, r3, #4
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	4313      	orrs	r3, r2
 8010554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	011b      	lsls	r3, r3, #4
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	4313      	orrs	r3, r2
 8010560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	621a      	str	r2, [r3, #32]
}
 801057c:	bf00      	nop
 801057e:	371c      	adds	r7, #28
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	40010000 	.word	0x40010000
 801058c:	40010400 	.word	0x40010400

08010590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010590:	b480      	push	{r7}
 8010592:	b087      	sub	sp, #28
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	69db      	ldr	r3, [r3, #28]
 80105b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	021b      	lsls	r3, r3, #8
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	4313      	orrs	r3, r2
 80105d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	031b      	lsls	r3, r3, #12
 80105e2:	693a      	ldr	r2, [r7, #16]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4a12      	ldr	r2, [pc, #72]	; (8010634 <TIM_OC4_SetConfig+0xa4>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d003      	beq.n	80105f8 <TIM_OC4_SetConfig+0x68>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4a11      	ldr	r2, [pc, #68]	; (8010638 <TIM_OC4_SetConfig+0xa8>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d109      	bne.n	801060c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	019b      	lsls	r3, r3, #6
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	4313      	orrs	r3, r2
 801060a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	68fa      	ldr	r2, [r7, #12]
 8010616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	685a      	ldr	r2, [r3, #4]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	693a      	ldr	r2, [r7, #16]
 8010624:	621a      	str	r2, [r3, #32]
}
 8010626:	bf00      	nop
 8010628:	371c      	adds	r7, #28
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop
 8010634:	40010000 	.word	0x40010000
 8010638:	40010400 	.word	0x40010400

0801063c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801063c:	b480      	push	{r7}
 801063e:	b087      	sub	sp, #28
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	6a1b      	ldr	r3, [r3, #32]
 801064c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	f023 0201 	bic.w	r2, r3, #1
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	699b      	ldr	r3, [r3, #24]
 801065e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	693a      	ldr	r2, [r7, #16]
 801066e:	4313      	orrs	r3, r2
 8010670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	f023 030a 	bic.w	r3, r3, #10
 8010678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	4313      	orrs	r3, r2
 8010680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	693a      	ldr	r2, [r7, #16]
 8010686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	621a      	str	r2, [r3, #32]
}
 801068e:	bf00      	nop
 8010690:	371c      	adds	r7, #28
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr

0801069a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801069a:	b480      	push	{r7}
 801069c:	b087      	sub	sp, #28
 801069e:	af00      	add	r7, sp, #0
 80106a0:	60f8      	str	r0, [r7, #12]
 80106a2:	60b9      	str	r1, [r7, #8]
 80106a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6a1b      	ldr	r3, [r3, #32]
 80106aa:	f023 0210 	bic.w	r2, r3, #16
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	699b      	ldr	r3, [r3, #24]
 80106b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6a1b      	ldr	r3, [r3, #32]
 80106bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80106c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	031b      	lsls	r3, r3, #12
 80106ca:	697a      	ldr	r2, [r7, #20]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80106d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	011b      	lsls	r3, r3, #4
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	4313      	orrs	r3, r2
 80106e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	697a      	ldr	r2, [r7, #20]
 80106e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	621a      	str	r2, [r3, #32]
}
 80106ee:	bf00      	nop
 80106f0:	371c      	adds	r7, #28
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80106fa:	b480      	push	{r7}
 80106fc:	b085      	sub	sp, #20
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010712:	683a      	ldr	r2, [r7, #0]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4313      	orrs	r3, r2
 8010718:	f043 0307 	orr.w	r3, r3, #7
 801071c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	68fa      	ldr	r2, [r7, #12]
 8010722:	609a      	str	r2, [r3, #8]
}
 8010724:	bf00      	nop
 8010726:	3714      	adds	r7, #20
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	689b      	ldr	r3, [r3, #8]
 8010742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801074a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	021a      	lsls	r2, r3, #8
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	431a      	orrs	r2, r3
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	4313      	orrs	r3, r2
 8010758:	697a      	ldr	r2, [r7, #20]
 801075a:	4313      	orrs	r3, r2
 801075c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	697a      	ldr	r2, [r7, #20]
 8010762:	609a      	str	r2, [r3, #8]
}
 8010764:	bf00      	nop
 8010766:	371c      	adds	r7, #28
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010770:	b480      	push	{r7}
 8010772:	b087      	sub	sp, #28
 8010774:	af00      	add	r7, sp, #0
 8010776:	60f8      	str	r0, [r7, #12]
 8010778:	60b9      	str	r1, [r7, #8]
 801077a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f003 031f 	and.w	r3, r3, #31
 8010782:	2201      	movs	r2, #1
 8010784:	fa02 f303 	lsl.w	r3, r2, r3
 8010788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6a1a      	ldr	r2, [r3, #32]
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	43db      	mvns	r3, r3
 8010792:	401a      	ands	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6a1a      	ldr	r2, [r3, #32]
 801079c:	68bb      	ldr	r3, [r7, #8]
 801079e:	f003 031f 	and.w	r3, r3, #31
 80107a2:	6879      	ldr	r1, [r7, #4]
 80107a4:	fa01 f303 	lsl.w	r3, r1, r3
 80107a8:	431a      	orrs	r2, r3
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	621a      	str	r2, [r3, #32]
}
 80107ae:	bf00      	nop
 80107b0:	371c      	adds	r7, #28
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
	...

080107bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107bc:	b480      	push	{r7}
 80107be:	b085      	sub	sp, #20
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	d101      	bne.n	80107d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80107d0:	2302      	movs	r3, #2
 80107d2:	e05a      	b.n	801088a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2201      	movs	r2, #1
 80107d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2202      	movs	r2, #2
 80107e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	68fa      	ldr	r2, [r7, #12]
 8010802:	4313      	orrs	r3, r2
 8010804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	4a21      	ldr	r2, [pc, #132]	; (8010898 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8010814:	4293      	cmp	r3, r2
 8010816:	d022      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010820:	d01d      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a1d      	ldr	r2, [pc, #116]	; (801089c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d018      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4a1b      	ldr	r2, [pc, #108]	; (80108a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d013      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4a1a      	ldr	r2, [pc, #104]	; (80108a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801083c:	4293      	cmp	r3, r2
 801083e:	d00e      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a18      	ldr	r2, [pc, #96]	; (80108a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8010846:	4293      	cmp	r3, r2
 8010848:	d009      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4a17      	ldr	r2, [pc, #92]	; (80108ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8010850:	4293      	cmp	r3, r2
 8010852:	d004      	beq.n	801085e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a15      	ldr	r2, [pc, #84]	; (80108b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d10c      	bne.n	8010878 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	4313      	orrs	r3, r2
 801086e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	68ba      	ldr	r2, [r7, #8]
 8010876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2201      	movs	r2, #1
 801087c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3714      	adds	r7, #20
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr
 8010896:	bf00      	nop
 8010898:	40010000 	.word	0x40010000
 801089c:	40000400 	.word	0x40000400
 80108a0:	40000800 	.word	0x40000800
 80108a4:	40000c00 	.word	0x40000c00
 80108a8:	40010400 	.word	0x40010400
 80108ac:	40014000 	.word	0x40014000
 80108b0:	40001800 	.word	0x40001800

080108b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80108bc:	bf00      	nop
 80108be:	370c      	adds	r7, #12
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr

080108c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80108d0:	bf00      	nop
 80108d2:	370c      	adds	r7, #12
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr

080108dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d101      	bne.n	80108ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80108ea:	2301      	movs	r3, #1
 80108ec:	e03f      	b.n	801096e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7f1 fc98 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2224      	movs	r2, #36	; 0x24
 801090c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68da      	ldr	r2, [r3, #12]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801091e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 fc6d 	bl	8011200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	691a      	ldr	r2, [r3, #16]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	695a      	ldr	r2, [r3, #20]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68da      	ldr	r2, [r3, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	2200      	movs	r2, #0
 801095a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2220      	movs	r2, #32
 8010960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2220      	movs	r2, #32
 8010968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b088      	sub	sp, #32
 801097a:	af02      	add	r7, sp, #8
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	60b9      	str	r1, [r7, #8]
 8010980:	603b      	str	r3, [r7, #0]
 8010982:	4613      	mov	r3, r2
 8010984:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8010986:	2300      	movs	r3, #0
 8010988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010990:	b2db      	uxtb	r3, r3
 8010992:	2b20      	cmp	r3, #32
 8010994:	f040 8083 	bne.w	8010a9e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d002      	beq.n	80109a4 <HAL_UART_Transmit+0x2e>
 801099e:	88fb      	ldrh	r3, [r7, #6]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d101      	bne.n	80109a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	e07b      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d101      	bne.n	80109b6 <HAL_UART_Transmit+0x40>
 80109b2:	2302      	movs	r3, #2
 80109b4:	e074      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2201      	movs	r2, #1
 80109ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2221      	movs	r2, #33	; 0x21
 80109c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80109cc:	f7f9 fe5e 	bl	800a68c <HAL_GetTick>
 80109d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	88fa      	ldrh	r2, [r7, #6]
 80109d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	88fa      	ldrh	r2, [r7, #6]
 80109dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80109e6:	e042      	b.n	8010a6e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	3b01      	subs	r3, #1
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80109fe:	d122      	bne.n	8010a46 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	9300      	str	r3, [sp, #0]
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	2200      	movs	r2, #0
 8010a08:	2180      	movs	r1, #128	; 0x80
 8010a0a:	68f8      	ldr	r0, [r7, #12]
 8010a0c:	f000 fa76 	bl	8010efc <UART_WaitOnFlagUntilTimeout>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8010a16:	2303      	movs	r3, #3
 8010a18:	e042      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	461a      	mov	r2, r3
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010a2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	691b      	ldr	r3, [r3, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d103      	bne.n	8010a3e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	3302      	adds	r3, #2
 8010a3a:	60bb      	str	r3, [r7, #8]
 8010a3c:	e017      	b.n	8010a6e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	3301      	adds	r3, #1
 8010a42:	60bb      	str	r3, [r7, #8]
 8010a44:	e013      	b.n	8010a6e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	9300      	str	r3, [sp, #0]
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2180      	movs	r1, #128	; 0x80
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f000 fa53 	bl	8010efc <UART_WaitOnFlagUntilTimeout>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8010a5c:	2303      	movs	r3, #3
 8010a5e:	e01f      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	1c5a      	adds	r2, r3, #1
 8010a64:	60ba      	str	r2, [r7, #8]
 8010a66:	781a      	ldrb	r2, [r3, #0]
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010a72:	b29b      	uxth	r3, r3
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d1b7      	bne.n	80109e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2140      	movs	r1, #64	; 0x40
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 fa3a 	bl	8010efc <UART_WaitOnFlagUntilTimeout>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d001      	beq.n	8010a92 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8010a8e:	2303      	movs	r3, #3
 8010a90:	e006      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2220      	movs	r2, #32
 8010a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	e000      	b.n	8010aa0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8010a9e:	2302      	movs	r3, #2
  }
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3718      	adds	r7, #24
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b086      	sub	sp, #24
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	2b20      	cmp	r3, #32
 8010ac0:	d166      	bne.n	8010b90 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d002      	beq.n	8010ace <HAL_UART_Receive_DMA+0x26>
 8010ac8:	88fb      	ldrh	r3, [r7, #6]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010ace:	2301      	movs	r3, #1
 8010ad0:	e05f      	b.n	8010b92 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d101      	bne.n	8010ae0 <HAL_UART_Receive_DMA+0x38>
 8010adc:	2302      	movs	r3, #2
 8010ade:	e058      	b.n	8010b92 <HAL_UART_Receive_DMA+0xea>
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010ae8:	68ba      	ldr	r2, [r7, #8]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	88fa      	ldrh	r2, [r7, #6]
 8010af2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2222      	movs	r2, #34	; 0x22
 8010afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b06:	4a25      	ldr	r2, [pc, #148]	; (8010b9c <HAL_UART_Receive_DMA+0xf4>)
 8010b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b0e:	4a24      	ldr	r2, [pc, #144]	; (8010ba0 <HAL_UART_Receive_DMA+0xf8>)
 8010b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b16:	4a23      	ldr	r2, [pc, #140]	; (8010ba4 <HAL_UART_Receive_DMA+0xfc>)
 8010b18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1e:	2200      	movs	r2, #0
 8010b20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8010b22:	f107 0308 	add.w	r3, r7, #8
 8010b26:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3304      	adds	r3, #4
 8010b32:	4619      	mov	r1, r3
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	88fb      	ldrh	r3, [r7, #6]
 8010b3a:	f7fa feb1 	bl	800b8a0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010b3e:	2300      	movs	r3, #0
 8010b40:	613b      	str	r3, [r7, #16]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	613b      	str	r3, [r7, #16]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	613b      	str	r3, [r7, #16]
 8010b52:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68da      	ldr	r2, [r3, #12]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	695a      	ldr	r2, [r3, #20]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f042 0201 	orr.w	r2, r2, #1
 8010b7a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	695a      	ldr	r2, [r3, #20]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010b8a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	e000      	b.n	8010b92 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010b90:	2302      	movs	r3, #2
  }
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3718      	adds	r7, #24
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	08010de5 	.word	0x08010de5
 8010ba0:	08010e4d 	.word	0x08010e4d
 8010ba4:	08010e69 	.word	0x08010e69

08010ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b088      	sub	sp, #32
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	f003 030f 	and.w	r3, r3, #15
 8010bd6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10d      	bne.n	8010bfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	f003 0320 	and.w	r3, r3, #32
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d008      	beq.n	8010bfa <HAL_UART_IRQHandler+0x52>
 8010be8:	69bb      	ldr	r3, [r7, #24]
 8010bea:	f003 0320 	and.w	r3, r3, #32
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d003      	beq.n	8010bfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 fa82 	bl	80110fc <UART_Receive_IT>
      return;
 8010bf8:	e0d0      	b.n	8010d9c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f000 80b0 	beq.w	8010d62 <HAL_UART_IRQHandler+0x1ba>
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	f003 0301 	and.w	r3, r3, #1
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d105      	bne.n	8010c18 <HAL_UART_IRQHandler+0x70>
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f000 80a5 	beq.w	8010d62 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	f003 0301 	and.w	r3, r3, #1
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00a      	beq.n	8010c38 <HAL_UART_IRQHandler+0x90>
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d005      	beq.n	8010c38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c30:	f043 0201 	orr.w	r2, r3, #1
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	f003 0304 	and.w	r3, r3, #4
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00a      	beq.n	8010c58 <HAL_UART_IRQHandler+0xb0>
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d005      	beq.n	8010c58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c50:	f043 0202 	orr.w	r2, r3, #2
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c58:	69fb      	ldr	r3, [r7, #28]
 8010c5a:	f003 0302 	and.w	r3, r3, #2
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00a      	beq.n	8010c78 <HAL_UART_IRQHandler+0xd0>
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d005      	beq.n	8010c78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c70:	f043 0204 	orr.w	r2, r3, #4
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	f003 0308 	and.w	r3, r3, #8
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00f      	beq.n	8010ca2 <HAL_UART_IRQHandler+0xfa>
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	f003 0320 	and.w	r3, r3, #32
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d104      	bne.n	8010c96 <HAL_UART_IRQHandler+0xee>
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d005      	beq.n	8010ca2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c9a:	f043 0208 	orr.w	r2, r3, #8
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d077      	beq.n	8010d9a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	f003 0320 	and.w	r3, r3, #32
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d007      	beq.n	8010cc4 <HAL_UART_IRQHandler+0x11c>
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	f003 0320 	and.w	r3, r3, #32
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d002      	beq.n	8010cc4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fa1c 	bl	80110fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cce:	2b40      	cmp	r3, #64	; 0x40
 8010cd0:	bf0c      	ite	eq
 8010cd2:	2301      	moveq	r3, #1
 8010cd4:	2300      	movne	r3, #0
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cde:	f003 0308 	and.w	r3, r3, #8
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d102      	bne.n	8010cec <HAL_UART_IRQHandler+0x144>
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d031      	beq.n	8010d50 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f000 f965 	bl	8010fbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	695b      	ldr	r3, [r3, #20]
 8010cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cfc:	2b40      	cmp	r3, #64	; 0x40
 8010cfe:	d123      	bne.n	8010d48 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	695a      	ldr	r2, [r3, #20]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d0e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d013      	beq.n	8010d40 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d1c:	4a21      	ldr	r2, [pc, #132]	; (8010da4 <HAL_UART_IRQHandler+0x1fc>)
 8010d1e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fa fe13 	bl	800b950 <HAL_DMA_Abort_IT>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d016      	beq.n	8010d5e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d3e:	e00e      	b.n	8010d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f000 f845 	bl	8010dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d46:	e00a      	b.n	8010d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	f000 f841 	bl	8010dd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d4e:	e006      	b.n	8010d5e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 f83d 	bl	8010dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010d5c:	e01d      	b.n	8010d9a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d5e:	bf00      	nop
    return;
 8010d60:	e01b      	b.n	8010d9a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d008      	beq.n	8010d7e <HAL_UART_IRQHandler+0x1d6>
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d003      	beq.n	8010d7e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	f000 f952 	bl	8011020 <UART_Transmit_IT>
    return;
 8010d7c:	e00e      	b.n	8010d9c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010d7e:	69fb      	ldr	r3, [r7, #28]
 8010d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d009      	beq.n	8010d9c <HAL_UART_IRQHandler+0x1f4>
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d004      	beq.n	8010d9c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f000 f99a 	bl	80110cc <UART_EndTransmit_IT>
    return;
 8010d98:	e000      	b.n	8010d9c <HAL_UART_IRQHandler+0x1f4>
    return;
 8010d9a:	bf00      	nop
  }
}
 8010d9c:	3720      	adds	r7, #32
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	08010ff9 	.word	0x08010ff9

08010da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010db0:	bf00      	nop
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010dd8:	bf00      	nop
 8010dda:	370c      	adds	r7, #12
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010df0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d11e      	bne.n	8010e3e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	2200      	movs	r2, #0
 8010e04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e14:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	695a      	ldr	r2, [r3, #20]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f022 0201 	bic.w	r2, r2, #1
 8010e24:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	695a      	ldr	r2, [r3, #20]
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e34:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2220      	movs	r2, #32
 8010e3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f7f4 fcce 	bl	80057e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e44:	bf00      	nop
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010e5a:	68f8      	ldr	r0, [r7, #12]
 8010e5c:	f7ff ffae 	bl	8010dbc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e60:	bf00      	nop
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b084      	sub	sp, #16
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010e70:	2300      	movs	r3, #0
 8010e72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	695b      	ldr	r3, [r3, #20]
 8010e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e84:	2b80      	cmp	r3, #128	; 0x80
 8010e86:	bf0c      	ite	eq
 8010e88:	2301      	moveq	r3, #1
 8010e8a:	2300      	movne	r3, #0
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b21      	cmp	r3, #33	; 0x21
 8010e9a:	d108      	bne.n	8010eae <UART_DMAError+0x46>
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d005      	beq.n	8010eae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010ea8:	68b8      	ldr	r0, [r7, #8]
 8010eaa:	f000 f871 	bl	8010f90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eb8:	2b40      	cmp	r3, #64	; 0x40
 8010eba:	bf0c      	ite	eq
 8010ebc:	2301      	moveq	r3, #1
 8010ebe:	2300      	movne	r3, #0
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b22      	cmp	r3, #34	; 0x22
 8010ece:	d108      	bne.n	8010ee2 <UART_DMAError+0x7a>
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d005      	beq.n	8010ee2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010edc:	68b8      	ldr	r0, [r7, #8]
 8010ede:	f000 f86d 	bl	8010fbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ee6:	f043 0210 	orr.w	r2, r3, #16
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010eee:	68b8      	ldr	r0, [r7, #8]
 8010ef0:	f7ff ff6e 	bl	8010dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ef4:	bf00      	nop
 8010ef6:	3710      	adds	r7, #16
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	60b9      	str	r1, [r7, #8]
 8010f06:	603b      	str	r3, [r7, #0]
 8010f08:	4613      	mov	r3, r2
 8010f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f0c:	e02c      	b.n	8010f68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f0e:	69bb      	ldr	r3, [r7, #24]
 8010f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f14:	d028      	beq.n	8010f68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010f16:	69bb      	ldr	r3, [r7, #24]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d007      	beq.n	8010f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8010f1c:	f7f9 fbb6 	bl	800a68c <HAL_GetTick>
 8010f20:	4602      	mov	r2, r0
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	1ad3      	subs	r3, r2, r3
 8010f26:	69ba      	ldr	r2, [r7, #24]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d21d      	bcs.n	8010f68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010f3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	695a      	ldr	r2, [r3, #20]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f022 0201 	bic.w	r2, r2, #1
 8010f4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2220      	movs	r2, #32
 8010f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	2220      	movs	r2, #32
 8010f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010f64:	2303      	movs	r3, #3
 8010f66:	e00f      	b.n	8010f88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	4013      	ands	r3, r2
 8010f72:	68ba      	ldr	r2, [r7, #8]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	bf0c      	ite	eq
 8010f78:	2301      	moveq	r3, #1
 8010f7a:	2300      	movne	r3, #0
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	461a      	mov	r2, r3
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d0c3      	beq.n	8010f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	68da      	ldr	r2, [r3, #12]
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010fa6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2220      	movs	r2, #32
 8010fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010fb0:	bf00      	nop
 8010fb2:	370c      	adds	r7, #12
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fba:	4770      	bx	lr

08010fbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	68da      	ldr	r2, [r3, #12]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010fd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	695a      	ldr	r2, [r3, #20]
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f022 0201 	bic.w	r2, r2, #1
 8010fe2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2220      	movs	r2, #32
 8010fe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010fec:	bf00      	nop
 8010fee:	370c      	adds	r7, #12
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff6:	4770      	bx	lr

08010ff8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011004:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	2200      	movs	r2, #0
 801100a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f7ff fedc 	bl	8010dd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011018:	bf00      	nop
 801101a:	3710      	adds	r7, #16
 801101c:	46bd      	mov	sp, r7
 801101e:	bd80      	pop	{r7, pc}

08011020 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801102e:	b2db      	uxtb	r3, r3
 8011030:	2b21      	cmp	r3, #33	; 0x21
 8011032:	d144      	bne.n	80110be <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801103c:	d11a      	bne.n	8011074 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a1b      	ldr	r3, [r3, #32]
 8011042:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	461a      	mov	r2, r3
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011052:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d105      	bne.n	8011068 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a1b      	ldr	r3, [r3, #32]
 8011060:	1c9a      	adds	r2, r3, #2
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	621a      	str	r2, [r3, #32]
 8011066:	e00e      	b.n	8011086 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a1b      	ldr	r3, [r3, #32]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	621a      	str	r2, [r3, #32]
 8011072:	e008      	b.n	8011086 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	1c59      	adds	r1, r3, #1
 801107a:	687a      	ldr	r2, [r7, #4]
 801107c:	6211      	str	r1, [r2, #32]
 801107e:	781a      	ldrb	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801108a:	b29b      	uxth	r3, r3
 801108c:	3b01      	subs	r3, #1
 801108e:	b29b      	uxth	r3, r3
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	4619      	mov	r1, r3
 8011094:	84d1      	strh	r1, [r2, #38]	; 0x26
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10f      	bne.n	80110ba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	68da      	ldr	r2, [r3, #12]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80110a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68da      	ldr	r2, [r3, #12]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80110b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80110ba:	2300      	movs	r3, #0
 80110bc:	e000      	b.n	80110c0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80110be:	2302      	movs	r3, #2
  }
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3714      	adds	r7, #20
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68da      	ldr	r2, [r3, #12]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80110e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2220      	movs	r2, #32
 80110e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f7ff fe5b 	bl	8010da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b22      	cmp	r3, #34	; 0x22
 801110e:	d171      	bne.n	80111f4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	689b      	ldr	r3, [r3, #8]
 8011114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011118:	d123      	bne.n	8011162 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801111e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	691b      	ldr	r3, [r3, #16]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d10e      	bne.n	8011146 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	b29b      	uxth	r3, r3
 8011130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011134:	b29a      	uxth	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801113e:	1c9a      	adds	r2, r3, #2
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	629a      	str	r2, [r3, #40]	; 0x28
 8011144:	e029      	b.n	801119a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	b29b      	uxth	r3, r3
 801114e:	b2db      	uxtb	r3, r3
 8011150:	b29a      	uxth	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	629a      	str	r2, [r3, #40]	; 0x28
 8011160:	e01b      	b.n	801119a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10a      	bne.n	8011180 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	6858      	ldr	r0, [r3, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011174:	1c59      	adds	r1, r3, #1
 8011176:	687a      	ldr	r2, [r7, #4]
 8011178:	6291      	str	r1, [r2, #40]	; 0x28
 801117a:	b2c2      	uxtb	r2, r0
 801117c:	701a      	strb	r2, [r3, #0]
 801117e:	e00c      	b.n	801119a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118c:	1c58      	adds	r0, r3, #1
 801118e:	6879      	ldr	r1, [r7, #4]
 8011190:	6288      	str	r0, [r1, #40]	; 0x28
 8011192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011196:	b2d2      	uxtb	r2, r2
 8011198:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801119e:	b29b      	uxth	r3, r3
 80111a0:	3b01      	subs	r3, #1
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	4619      	mov	r1, r3
 80111a8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d120      	bne.n	80111f0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68da      	ldr	r2, [r3, #12]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	f022 0220 	bic.w	r2, r2, #32
 80111bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	68da      	ldr	r2, [r3, #12]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80111cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	695a      	ldr	r2, [r3, #20]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f022 0201 	bic.w	r2, r2, #1
 80111dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2220      	movs	r2, #32
 80111e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7f4 fafa 	bl	80057e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80111ec:	2300      	movs	r3, #0
 80111ee:	e002      	b.n	80111f6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80111f0:	2300      	movs	r3, #0
 80111f2:	e000      	b.n	80111f6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80111f4:	2302      	movs	r3, #2
  }
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	b0bd      	sub	sp, #244	; 0xf4
 8011206:	af00      	add	r7, sp, #0
 8011208:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801120c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801121c:	68d9      	ldr	r1, [r3, #12]
 801121e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	ea40 0301 	orr.w	r3, r0, r1
 8011228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801122a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801122e:	689a      	ldr	r2, [r3, #8]
 8011230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011234:	691b      	ldr	r3, [r3, #16]
 8011236:	431a      	orrs	r2, r3
 8011238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801123c:	695b      	ldr	r3, [r3, #20]
 801123e:	431a      	orrs	r2, r3
 8011240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011244:	69db      	ldr	r3, [r3, #28]
 8011246:	4313      	orrs	r3, r2
 8011248:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801124c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	68db      	ldr	r3, [r3, #12]
 8011254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8011258:	f021 010c 	bic.w	r1, r1, #12
 801125c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011266:	430b      	orrs	r3, r1
 8011268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801126a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	695b      	ldr	r3, [r3, #20]
 8011272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8011276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801127a:	6999      	ldr	r1, [r3, #24]
 801127c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011280:	681a      	ldr	r2, [r3, #0]
 8011282:	ea40 0301 	orr.w	r3, r0, r1
 8011286:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011292:	f040 81a5 	bne.w	80115e0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	4bcd      	ldr	r3, [pc, #820]	; (80115d4 <UART_SetConfig+0x3d4>)
 801129e:	429a      	cmp	r2, r3
 80112a0:	d006      	beq.n	80112b0 <UART_SetConfig+0xb0>
 80112a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	4bcb      	ldr	r3, [pc, #812]	; (80115d8 <UART_SetConfig+0x3d8>)
 80112aa:	429a      	cmp	r2, r3
 80112ac:	f040 80cb 	bne.w	8011446 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80112b0:	f7fe f836 	bl	800f320 <HAL_RCC_GetPCLK2Freq>
 80112b4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80112b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112bc:	461c      	mov	r4, r3
 80112be:	f04f 0500 	mov.w	r5, #0
 80112c2:	4622      	mov	r2, r4
 80112c4:	462b      	mov	r3, r5
 80112c6:	1891      	adds	r1, r2, r2
 80112c8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80112cc:	415b      	adcs	r3, r3
 80112ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80112d2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80112d6:	1912      	adds	r2, r2, r4
 80112d8:	eb45 0303 	adc.w	r3, r5, r3
 80112dc:	f04f 0000 	mov.w	r0, #0
 80112e0:	f04f 0100 	mov.w	r1, #0
 80112e4:	00d9      	lsls	r1, r3, #3
 80112e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80112ea:	00d0      	lsls	r0, r2, #3
 80112ec:	4602      	mov	r2, r0
 80112ee:	460b      	mov	r3, r1
 80112f0:	1911      	adds	r1, r2, r4
 80112f2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80112f6:	416b      	adcs	r3, r5
 80112f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80112fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	461a      	mov	r2, r3
 8011304:	f04f 0300 	mov.w	r3, #0
 8011308:	1891      	adds	r1, r2, r2
 801130a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801130e:	415b      	adcs	r3, r3
 8011310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011314:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011318:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801131c:	f7ef fcb4 	bl	8000c88 <__aeabi_uldivmod>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	4bad      	ldr	r3, [pc, #692]	; (80115dc <UART_SetConfig+0x3dc>)
 8011326:	fba3 2302 	umull	r2, r3, r3, r2
 801132a:	095b      	lsrs	r3, r3, #5
 801132c:	011e      	lsls	r6, r3, #4
 801132e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011332:	461c      	mov	r4, r3
 8011334:	f04f 0500 	mov.w	r5, #0
 8011338:	4622      	mov	r2, r4
 801133a:	462b      	mov	r3, r5
 801133c:	1891      	adds	r1, r2, r2
 801133e:	67b9      	str	r1, [r7, #120]	; 0x78
 8011340:	415b      	adcs	r3, r3
 8011342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011344:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8011348:	1912      	adds	r2, r2, r4
 801134a:	eb45 0303 	adc.w	r3, r5, r3
 801134e:	f04f 0000 	mov.w	r0, #0
 8011352:	f04f 0100 	mov.w	r1, #0
 8011356:	00d9      	lsls	r1, r3, #3
 8011358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801135c:	00d0      	lsls	r0, r2, #3
 801135e:	4602      	mov	r2, r0
 8011360:	460b      	mov	r3, r1
 8011362:	1911      	adds	r1, r2, r4
 8011364:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8011368:	416b      	adcs	r3, r5
 801136a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801136e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	461a      	mov	r2, r3
 8011376:	f04f 0300 	mov.w	r3, #0
 801137a:	1891      	adds	r1, r2, r2
 801137c:	6739      	str	r1, [r7, #112]	; 0x70
 801137e:	415b      	adcs	r3, r3
 8011380:	677b      	str	r3, [r7, #116]	; 0x74
 8011382:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011386:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801138a:	f7ef fc7d 	bl	8000c88 <__aeabi_uldivmod>
 801138e:	4602      	mov	r2, r0
 8011390:	460b      	mov	r3, r1
 8011392:	4b92      	ldr	r3, [pc, #584]	; (80115dc <UART_SetConfig+0x3dc>)
 8011394:	fba3 1302 	umull	r1, r3, r3, r2
 8011398:	095b      	lsrs	r3, r3, #5
 801139a:	2164      	movs	r1, #100	; 0x64
 801139c:	fb01 f303 	mul.w	r3, r1, r3
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	00db      	lsls	r3, r3, #3
 80113a4:	3332      	adds	r3, #50	; 0x32
 80113a6:	4a8d      	ldr	r2, [pc, #564]	; (80115dc <UART_SetConfig+0x3dc>)
 80113a8:	fba2 2303 	umull	r2, r3, r2, r3
 80113ac:	095b      	lsrs	r3, r3, #5
 80113ae:	005b      	lsls	r3, r3, #1
 80113b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80113b4:	441e      	add	r6, r3
 80113b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113ba:	4618      	mov	r0, r3
 80113bc:	f04f 0100 	mov.w	r1, #0
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	1894      	adds	r4, r2, r2
 80113c6:	66bc      	str	r4, [r7, #104]	; 0x68
 80113c8:	415b      	adcs	r3, r3
 80113ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80113cc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80113d0:	1812      	adds	r2, r2, r0
 80113d2:	eb41 0303 	adc.w	r3, r1, r3
 80113d6:	f04f 0400 	mov.w	r4, #0
 80113da:	f04f 0500 	mov.w	r5, #0
 80113de:	00dd      	lsls	r5, r3, #3
 80113e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80113e4:	00d4      	lsls	r4, r2, #3
 80113e6:	4622      	mov	r2, r4
 80113e8:	462b      	mov	r3, r5
 80113ea:	1814      	adds	r4, r2, r0
 80113ec:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80113f0:	414b      	adcs	r3, r1
 80113f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80113f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	461a      	mov	r2, r3
 80113fe:	f04f 0300 	mov.w	r3, #0
 8011402:	1891      	adds	r1, r2, r2
 8011404:	6639      	str	r1, [r7, #96]	; 0x60
 8011406:	415b      	adcs	r3, r3
 8011408:	667b      	str	r3, [r7, #100]	; 0x64
 801140a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801140e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8011412:	f7ef fc39 	bl	8000c88 <__aeabi_uldivmod>
 8011416:	4602      	mov	r2, r0
 8011418:	460b      	mov	r3, r1
 801141a:	4b70      	ldr	r3, [pc, #448]	; (80115dc <UART_SetConfig+0x3dc>)
 801141c:	fba3 1302 	umull	r1, r3, r3, r2
 8011420:	095b      	lsrs	r3, r3, #5
 8011422:	2164      	movs	r1, #100	; 0x64
 8011424:	fb01 f303 	mul.w	r3, r1, r3
 8011428:	1ad3      	subs	r3, r2, r3
 801142a:	00db      	lsls	r3, r3, #3
 801142c:	3332      	adds	r3, #50	; 0x32
 801142e:	4a6b      	ldr	r2, [pc, #428]	; (80115dc <UART_SetConfig+0x3dc>)
 8011430:	fba2 2303 	umull	r2, r3, r2, r3
 8011434:	095b      	lsrs	r3, r3, #5
 8011436:	f003 0207 	and.w	r2, r3, #7
 801143a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	4432      	add	r2, r6
 8011442:	609a      	str	r2, [r3, #8]
 8011444:	e26d      	b.n	8011922 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8011446:	f7fd ff57 	bl	800f2f8 <HAL_RCC_GetPCLK1Freq>
 801144a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801144e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011452:	461c      	mov	r4, r3
 8011454:	f04f 0500 	mov.w	r5, #0
 8011458:	4622      	mov	r2, r4
 801145a:	462b      	mov	r3, r5
 801145c:	1891      	adds	r1, r2, r2
 801145e:	65b9      	str	r1, [r7, #88]	; 0x58
 8011460:	415b      	adcs	r3, r3
 8011462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011464:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8011468:	1912      	adds	r2, r2, r4
 801146a:	eb45 0303 	adc.w	r3, r5, r3
 801146e:	f04f 0000 	mov.w	r0, #0
 8011472:	f04f 0100 	mov.w	r1, #0
 8011476:	00d9      	lsls	r1, r3, #3
 8011478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801147c:	00d0      	lsls	r0, r2, #3
 801147e:	4602      	mov	r2, r0
 8011480:	460b      	mov	r3, r1
 8011482:	1911      	adds	r1, r2, r4
 8011484:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8011488:	416b      	adcs	r3, r5
 801148a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801148e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	461a      	mov	r2, r3
 8011496:	f04f 0300 	mov.w	r3, #0
 801149a:	1891      	adds	r1, r2, r2
 801149c:	6539      	str	r1, [r7, #80]	; 0x50
 801149e:	415b      	adcs	r3, r3
 80114a0:	657b      	str	r3, [r7, #84]	; 0x54
 80114a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80114a6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80114aa:	f7ef fbed 	bl	8000c88 <__aeabi_uldivmod>
 80114ae:	4602      	mov	r2, r0
 80114b0:	460b      	mov	r3, r1
 80114b2:	4b4a      	ldr	r3, [pc, #296]	; (80115dc <UART_SetConfig+0x3dc>)
 80114b4:	fba3 2302 	umull	r2, r3, r3, r2
 80114b8:	095b      	lsrs	r3, r3, #5
 80114ba:	011e      	lsls	r6, r3, #4
 80114bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114c0:	461c      	mov	r4, r3
 80114c2:	f04f 0500 	mov.w	r5, #0
 80114c6:	4622      	mov	r2, r4
 80114c8:	462b      	mov	r3, r5
 80114ca:	1891      	adds	r1, r2, r2
 80114cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80114ce:	415b      	adcs	r3, r3
 80114d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80114d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80114d6:	1912      	adds	r2, r2, r4
 80114d8:	eb45 0303 	adc.w	r3, r5, r3
 80114dc:	f04f 0000 	mov.w	r0, #0
 80114e0:	f04f 0100 	mov.w	r1, #0
 80114e4:	00d9      	lsls	r1, r3, #3
 80114e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80114ea:	00d0      	lsls	r0, r2, #3
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	1911      	adds	r1, r2, r4
 80114f2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80114f6:	416b      	adcs	r3, r5
 80114f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80114fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	461a      	mov	r2, r3
 8011504:	f04f 0300 	mov.w	r3, #0
 8011508:	1891      	adds	r1, r2, r2
 801150a:	6439      	str	r1, [r7, #64]	; 0x40
 801150c:	415b      	adcs	r3, r3
 801150e:	647b      	str	r3, [r7, #68]	; 0x44
 8011510:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011514:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011518:	f7ef fbb6 	bl	8000c88 <__aeabi_uldivmod>
 801151c:	4602      	mov	r2, r0
 801151e:	460b      	mov	r3, r1
 8011520:	4b2e      	ldr	r3, [pc, #184]	; (80115dc <UART_SetConfig+0x3dc>)
 8011522:	fba3 1302 	umull	r1, r3, r3, r2
 8011526:	095b      	lsrs	r3, r3, #5
 8011528:	2164      	movs	r1, #100	; 0x64
 801152a:	fb01 f303 	mul.w	r3, r1, r3
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	00db      	lsls	r3, r3, #3
 8011532:	3332      	adds	r3, #50	; 0x32
 8011534:	4a29      	ldr	r2, [pc, #164]	; (80115dc <UART_SetConfig+0x3dc>)
 8011536:	fba2 2303 	umull	r2, r3, r2, r3
 801153a:	095b      	lsrs	r3, r3, #5
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8011542:	441e      	add	r6, r3
 8011544:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011548:	4618      	mov	r0, r3
 801154a:	f04f 0100 	mov.w	r1, #0
 801154e:	4602      	mov	r2, r0
 8011550:	460b      	mov	r3, r1
 8011552:	1894      	adds	r4, r2, r2
 8011554:	63bc      	str	r4, [r7, #56]	; 0x38
 8011556:	415b      	adcs	r3, r3
 8011558:	63fb      	str	r3, [r7, #60]	; 0x3c
 801155a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801155e:	1812      	adds	r2, r2, r0
 8011560:	eb41 0303 	adc.w	r3, r1, r3
 8011564:	f04f 0400 	mov.w	r4, #0
 8011568:	f04f 0500 	mov.w	r5, #0
 801156c:	00dd      	lsls	r5, r3, #3
 801156e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011572:	00d4      	lsls	r4, r2, #3
 8011574:	4622      	mov	r2, r4
 8011576:	462b      	mov	r3, r5
 8011578:	1814      	adds	r4, r2, r0
 801157a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801157e:	414b      	adcs	r3, r1
 8011580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	461a      	mov	r2, r3
 801158c:	f04f 0300 	mov.w	r3, #0
 8011590:	1891      	adds	r1, r2, r2
 8011592:	6339      	str	r1, [r7, #48]	; 0x30
 8011594:	415b      	adcs	r3, r3
 8011596:	637b      	str	r3, [r7, #52]	; 0x34
 8011598:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801159c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80115a0:	f7ef fb72 	bl	8000c88 <__aeabi_uldivmod>
 80115a4:	4602      	mov	r2, r0
 80115a6:	460b      	mov	r3, r1
 80115a8:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <UART_SetConfig+0x3dc>)
 80115aa:	fba3 1302 	umull	r1, r3, r3, r2
 80115ae:	095b      	lsrs	r3, r3, #5
 80115b0:	2164      	movs	r1, #100	; 0x64
 80115b2:	fb01 f303 	mul.w	r3, r1, r3
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	00db      	lsls	r3, r3, #3
 80115ba:	3332      	adds	r3, #50	; 0x32
 80115bc:	4a07      	ldr	r2, [pc, #28]	; (80115dc <UART_SetConfig+0x3dc>)
 80115be:	fba2 2303 	umull	r2, r3, r2, r3
 80115c2:	095b      	lsrs	r3, r3, #5
 80115c4:	f003 0207 	and.w	r2, r3, #7
 80115c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4432      	add	r2, r6
 80115d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80115d2:	e1a6      	b.n	8011922 <UART_SetConfig+0x722>
 80115d4:	40011000 	.word	0x40011000
 80115d8:	40011400 	.word	0x40011400
 80115dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80115e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	4bd1      	ldr	r3, [pc, #836]	; (801192c <UART_SetConfig+0x72c>)
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d006      	beq.n	80115fa <UART_SetConfig+0x3fa>
 80115ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	4bcf      	ldr	r3, [pc, #828]	; (8011930 <UART_SetConfig+0x730>)
 80115f4:	429a      	cmp	r2, r3
 80115f6:	f040 80ca 	bne.w	801178e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80115fa:	f7fd fe91 	bl	800f320 <HAL_RCC_GetPCLK2Freq>
 80115fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011606:	461c      	mov	r4, r3
 8011608:	f04f 0500 	mov.w	r5, #0
 801160c:	4622      	mov	r2, r4
 801160e:	462b      	mov	r3, r5
 8011610:	1891      	adds	r1, r2, r2
 8011612:	62b9      	str	r1, [r7, #40]	; 0x28
 8011614:	415b      	adcs	r3, r3
 8011616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801161c:	1912      	adds	r2, r2, r4
 801161e:	eb45 0303 	adc.w	r3, r5, r3
 8011622:	f04f 0000 	mov.w	r0, #0
 8011626:	f04f 0100 	mov.w	r1, #0
 801162a:	00d9      	lsls	r1, r3, #3
 801162c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011630:	00d0      	lsls	r0, r2, #3
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	eb12 0a04 	adds.w	sl, r2, r4
 801163a:	eb43 0b05 	adc.w	fp, r3, r5
 801163e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	4618      	mov	r0, r3
 8011646:	f04f 0100 	mov.w	r1, #0
 801164a:	f04f 0200 	mov.w	r2, #0
 801164e:	f04f 0300 	mov.w	r3, #0
 8011652:	008b      	lsls	r3, r1, #2
 8011654:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011658:	0082      	lsls	r2, r0, #2
 801165a:	4650      	mov	r0, sl
 801165c:	4659      	mov	r1, fp
 801165e:	f7ef fb13 	bl	8000c88 <__aeabi_uldivmod>
 8011662:	4602      	mov	r2, r0
 8011664:	460b      	mov	r3, r1
 8011666:	4bb3      	ldr	r3, [pc, #716]	; (8011934 <UART_SetConfig+0x734>)
 8011668:	fba3 2302 	umull	r2, r3, r3, r2
 801166c:	095b      	lsrs	r3, r3, #5
 801166e:	011e      	lsls	r6, r3, #4
 8011670:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011674:	4618      	mov	r0, r3
 8011676:	f04f 0100 	mov.w	r1, #0
 801167a:	4602      	mov	r2, r0
 801167c:	460b      	mov	r3, r1
 801167e:	1894      	adds	r4, r2, r2
 8011680:	623c      	str	r4, [r7, #32]
 8011682:	415b      	adcs	r3, r3
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
 8011686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801168a:	1812      	adds	r2, r2, r0
 801168c:	eb41 0303 	adc.w	r3, r1, r3
 8011690:	f04f 0400 	mov.w	r4, #0
 8011694:	f04f 0500 	mov.w	r5, #0
 8011698:	00dd      	lsls	r5, r3, #3
 801169a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801169e:	00d4      	lsls	r4, r2, #3
 80116a0:	4622      	mov	r2, r4
 80116a2:	462b      	mov	r3, r5
 80116a4:	1814      	adds	r4, r2, r0
 80116a6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80116aa:	414b      	adcs	r3, r1
 80116ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80116b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	4618      	mov	r0, r3
 80116b8:	f04f 0100 	mov.w	r1, #0
 80116bc:	f04f 0200 	mov.w	r2, #0
 80116c0:	f04f 0300 	mov.w	r3, #0
 80116c4:	008b      	lsls	r3, r1, #2
 80116c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80116ca:	0082      	lsls	r2, r0, #2
 80116cc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80116d0:	f7ef fada 	bl	8000c88 <__aeabi_uldivmod>
 80116d4:	4602      	mov	r2, r0
 80116d6:	460b      	mov	r3, r1
 80116d8:	4b96      	ldr	r3, [pc, #600]	; (8011934 <UART_SetConfig+0x734>)
 80116da:	fba3 1302 	umull	r1, r3, r3, r2
 80116de:	095b      	lsrs	r3, r3, #5
 80116e0:	2164      	movs	r1, #100	; 0x64
 80116e2:	fb01 f303 	mul.w	r3, r1, r3
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	011b      	lsls	r3, r3, #4
 80116ea:	3332      	adds	r3, #50	; 0x32
 80116ec:	4a91      	ldr	r2, [pc, #580]	; (8011934 <UART_SetConfig+0x734>)
 80116ee:	fba2 2303 	umull	r2, r3, r2, r3
 80116f2:	095b      	lsrs	r3, r3, #5
 80116f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116f8:	441e      	add	r6, r3
 80116fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80116fe:	4618      	mov	r0, r3
 8011700:	f04f 0100 	mov.w	r1, #0
 8011704:	4602      	mov	r2, r0
 8011706:	460b      	mov	r3, r1
 8011708:	1894      	adds	r4, r2, r2
 801170a:	61bc      	str	r4, [r7, #24]
 801170c:	415b      	adcs	r3, r3
 801170e:	61fb      	str	r3, [r7, #28]
 8011710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011714:	1812      	adds	r2, r2, r0
 8011716:	eb41 0303 	adc.w	r3, r1, r3
 801171a:	f04f 0400 	mov.w	r4, #0
 801171e:	f04f 0500 	mov.w	r5, #0
 8011722:	00dd      	lsls	r5, r3, #3
 8011724:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011728:	00d4      	lsls	r4, r2, #3
 801172a:	4622      	mov	r2, r4
 801172c:	462b      	mov	r3, r5
 801172e:	1814      	adds	r4, r2, r0
 8011730:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8011734:	414b      	adcs	r3, r1
 8011736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801173a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	4618      	mov	r0, r3
 8011742:	f04f 0100 	mov.w	r1, #0
 8011746:	f04f 0200 	mov.w	r2, #0
 801174a:	f04f 0300 	mov.w	r3, #0
 801174e:	008b      	lsls	r3, r1, #2
 8011750:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011754:	0082      	lsls	r2, r0, #2
 8011756:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801175a:	f7ef fa95 	bl	8000c88 <__aeabi_uldivmod>
 801175e:	4602      	mov	r2, r0
 8011760:	460b      	mov	r3, r1
 8011762:	4b74      	ldr	r3, [pc, #464]	; (8011934 <UART_SetConfig+0x734>)
 8011764:	fba3 1302 	umull	r1, r3, r3, r2
 8011768:	095b      	lsrs	r3, r3, #5
 801176a:	2164      	movs	r1, #100	; 0x64
 801176c:	fb01 f303 	mul.w	r3, r1, r3
 8011770:	1ad3      	subs	r3, r2, r3
 8011772:	011b      	lsls	r3, r3, #4
 8011774:	3332      	adds	r3, #50	; 0x32
 8011776:	4a6f      	ldr	r2, [pc, #444]	; (8011934 <UART_SetConfig+0x734>)
 8011778:	fba2 2303 	umull	r2, r3, r2, r3
 801177c:	095b      	lsrs	r3, r3, #5
 801177e:	f003 020f 	and.w	r2, r3, #15
 8011782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	4432      	add	r2, r6
 801178a:	609a      	str	r2, [r3, #8]
 801178c:	e0c9      	b.n	8011922 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801178e:	f7fd fdb3 	bl	800f2f8 <HAL_RCC_GetPCLK1Freq>
 8011792:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011796:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801179a:	461c      	mov	r4, r3
 801179c:	f04f 0500 	mov.w	r5, #0
 80117a0:	4622      	mov	r2, r4
 80117a2:	462b      	mov	r3, r5
 80117a4:	1891      	adds	r1, r2, r2
 80117a6:	6139      	str	r1, [r7, #16]
 80117a8:	415b      	adcs	r3, r3
 80117aa:	617b      	str	r3, [r7, #20]
 80117ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80117b0:	1912      	adds	r2, r2, r4
 80117b2:	eb45 0303 	adc.w	r3, r5, r3
 80117b6:	f04f 0000 	mov.w	r0, #0
 80117ba:	f04f 0100 	mov.w	r1, #0
 80117be:	00d9      	lsls	r1, r3, #3
 80117c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80117c4:	00d0      	lsls	r0, r2, #3
 80117c6:	4602      	mov	r2, r0
 80117c8:	460b      	mov	r3, r1
 80117ca:	eb12 0804 	adds.w	r8, r2, r4
 80117ce:	eb43 0905 	adc.w	r9, r3, r5
 80117d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	4618      	mov	r0, r3
 80117da:	f04f 0100 	mov.w	r1, #0
 80117de:	f04f 0200 	mov.w	r2, #0
 80117e2:	f04f 0300 	mov.w	r3, #0
 80117e6:	008b      	lsls	r3, r1, #2
 80117e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80117ec:	0082      	lsls	r2, r0, #2
 80117ee:	4640      	mov	r0, r8
 80117f0:	4649      	mov	r1, r9
 80117f2:	f7ef fa49 	bl	8000c88 <__aeabi_uldivmod>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4b4e      	ldr	r3, [pc, #312]	; (8011934 <UART_SetConfig+0x734>)
 80117fc:	fba3 2302 	umull	r2, r3, r3, r2
 8011800:	095b      	lsrs	r3, r3, #5
 8011802:	011e      	lsls	r6, r3, #4
 8011804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011808:	4618      	mov	r0, r3
 801180a:	f04f 0100 	mov.w	r1, #0
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	1894      	adds	r4, r2, r2
 8011814:	60bc      	str	r4, [r7, #8]
 8011816:	415b      	adcs	r3, r3
 8011818:	60fb      	str	r3, [r7, #12]
 801181a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801181e:	1812      	adds	r2, r2, r0
 8011820:	eb41 0303 	adc.w	r3, r1, r3
 8011824:	f04f 0400 	mov.w	r4, #0
 8011828:	f04f 0500 	mov.w	r5, #0
 801182c:	00dd      	lsls	r5, r3, #3
 801182e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011832:	00d4      	lsls	r4, r2, #3
 8011834:	4622      	mov	r2, r4
 8011836:	462b      	mov	r3, r5
 8011838:	1814      	adds	r4, r2, r0
 801183a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801183e:	414b      	adcs	r3, r1
 8011840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	4618      	mov	r0, r3
 801184c:	f04f 0100 	mov.w	r1, #0
 8011850:	f04f 0200 	mov.w	r2, #0
 8011854:	f04f 0300 	mov.w	r3, #0
 8011858:	008b      	lsls	r3, r1, #2
 801185a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801185e:	0082      	lsls	r2, r0, #2
 8011860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8011864:	f7ef fa10 	bl	8000c88 <__aeabi_uldivmod>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	4b31      	ldr	r3, [pc, #196]	; (8011934 <UART_SetConfig+0x734>)
 801186e:	fba3 1302 	umull	r1, r3, r3, r2
 8011872:	095b      	lsrs	r3, r3, #5
 8011874:	2164      	movs	r1, #100	; 0x64
 8011876:	fb01 f303 	mul.w	r3, r1, r3
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	011b      	lsls	r3, r3, #4
 801187e:	3332      	adds	r3, #50	; 0x32
 8011880:	4a2c      	ldr	r2, [pc, #176]	; (8011934 <UART_SetConfig+0x734>)
 8011882:	fba2 2303 	umull	r2, r3, r2, r3
 8011886:	095b      	lsrs	r3, r3, #5
 8011888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801188c:	441e      	add	r6, r3
 801188e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011892:	4618      	mov	r0, r3
 8011894:	f04f 0100 	mov.w	r1, #0
 8011898:	4602      	mov	r2, r0
 801189a:	460b      	mov	r3, r1
 801189c:	1894      	adds	r4, r2, r2
 801189e:	603c      	str	r4, [r7, #0]
 80118a0:	415b      	adcs	r3, r3
 80118a2:	607b      	str	r3, [r7, #4]
 80118a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80118a8:	1812      	adds	r2, r2, r0
 80118aa:	eb41 0303 	adc.w	r3, r1, r3
 80118ae:	f04f 0400 	mov.w	r4, #0
 80118b2:	f04f 0500 	mov.w	r5, #0
 80118b6:	00dd      	lsls	r5, r3, #3
 80118b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80118bc:	00d4      	lsls	r4, r2, #3
 80118be:	4622      	mov	r2, r4
 80118c0:	462b      	mov	r3, r5
 80118c2:	1814      	adds	r4, r2, r0
 80118c4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80118c8:	414b      	adcs	r3, r1
 80118ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80118ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	4618      	mov	r0, r3
 80118d6:	f04f 0100 	mov.w	r1, #0
 80118da:	f04f 0200 	mov.w	r2, #0
 80118de:	f04f 0300 	mov.w	r3, #0
 80118e2:	008b      	lsls	r3, r1, #2
 80118e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80118e8:	0082      	lsls	r2, r0, #2
 80118ea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80118ee:	f7ef f9cb 	bl	8000c88 <__aeabi_uldivmod>
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	4b0f      	ldr	r3, [pc, #60]	; (8011934 <UART_SetConfig+0x734>)
 80118f8:	fba3 1302 	umull	r1, r3, r3, r2
 80118fc:	095b      	lsrs	r3, r3, #5
 80118fe:	2164      	movs	r1, #100	; 0x64
 8011900:	fb01 f303 	mul.w	r3, r1, r3
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	011b      	lsls	r3, r3, #4
 8011908:	3332      	adds	r3, #50	; 0x32
 801190a:	4a0a      	ldr	r2, [pc, #40]	; (8011934 <UART_SetConfig+0x734>)
 801190c:	fba2 2303 	umull	r2, r3, r2, r3
 8011910:	095b      	lsrs	r3, r3, #5
 8011912:	f003 020f 	and.w	r2, r3, #15
 8011916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4432      	add	r2, r6
 801191e:	609a      	str	r2, [r3, #8]
}
 8011920:	e7ff      	b.n	8011922 <UART_SetConfig+0x722>
 8011922:	bf00      	nop
 8011924:	37f4      	adds	r7, #244	; 0xf4
 8011926:	46bd      	mov	sp, r7
 8011928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192c:	40011000 	.word	0x40011000
 8011930:	40011400 	.word	0x40011400
 8011934:	51eb851f 	.word	0x51eb851f

08011938 <__NVIC_SetPriority>:
{
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	6039      	str	r1, [r7, #0]
 8011942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011948:	2b00      	cmp	r3, #0
 801194a:	db0a      	blt.n	8011962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	b2da      	uxtb	r2, r3
 8011950:	490c      	ldr	r1, [pc, #48]	; (8011984 <__NVIC_SetPriority+0x4c>)
 8011952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011956:	0112      	lsls	r2, r2, #4
 8011958:	b2d2      	uxtb	r2, r2
 801195a:	440b      	add	r3, r1
 801195c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011960:	e00a      	b.n	8011978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	b2da      	uxtb	r2, r3
 8011966:	4908      	ldr	r1, [pc, #32]	; (8011988 <__NVIC_SetPriority+0x50>)
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	f003 030f 	and.w	r3, r3, #15
 801196e:	3b04      	subs	r3, #4
 8011970:	0112      	lsls	r2, r2, #4
 8011972:	b2d2      	uxtb	r2, r2
 8011974:	440b      	add	r3, r1
 8011976:	761a      	strb	r2, [r3, #24]
}
 8011978:	bf00      	nop
 801197a:	370c      	adds	r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr
 8011984:	e000e100 	.word	0xe000e100
 8011988:	e000ed00 	.word	0xe000ed00

0801198c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011990:	4b05      	ldr	r3, [pc, #20]	; (80119a8 <SysTick_Handler+0x1c>)
 8011992:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011994:	f002 fb8c 	bl	80140b0 <xTaskGetSchedulerState>
 8011998:	4603      	mov	r3, r0
 801199a:	2b01      	cmp	r3, #1
 801199c:	d001      	beq.n	80119a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801199e:	f003 fa73 	bl	8014e88 <xPortSysTickHandler>
  }
}
 80119a2:	bf00      	nop
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	e000e010 	.word	0xe000e010

080119ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80119ac:	b580      	push	{r7, lr}
 80119ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80119b0:	2100      	movs	r1, #0
 80119b2:	f06f 0004 	mvn.w	r0, #4
 80119b6:	f7ff ffbf 	bl	8011938 <__NVIC_SetPriority>
#endif
}
 80119ba:	bf00      	nop
 80119bc:	bd80      	pop	{r7, pc}
	...

080119c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80119c0:	b480      	push	{r7}
 80119c2:	b083      	sub	sp, #12
 80119c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119c6:	f3ef 8305 	mrs	r3, IPSR
 80119ca:	603b      	str	r3, [r7, #0]
  return(result);
 80119cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d003      	beq.n	80119da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80119d2:	f06f 0305 	mvn.w	r3, #5
 80119d6:	607b      	str	r3, [r7, #4]
 80119d8:	e00c      	b.n	80119f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80119da:	4b0a      	ldr	r3, [pc, #40]	; (8011a04 <osKernelInitialize+0x44>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d105      	bne.n	80119ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80119e2:	4b08      	ldr	r3, [pc, #32]	; (8011a04 <osKernelInitialize+0x44>)
 80119e4:	2201      	movs	r2, #1
 80119e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80119e8:	2300      	movs	r3, #0
 80119ea:	607b      	str	r3, [r7, #4]
 80119ec:	e002      	b.n	80119f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80119ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80119f4:	687b      	ldr	r3, [r7, #4]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	200018a0 	.word	0x200018a0

08011a08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a0e:	f3ef 8305 	mrs	r3, IPSR
 8011a12:	603b      	str	r3, [r7, #0]
  return(result);
 8011a14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d003      	beq.n	8011a22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011a1a:	f06f 0305 	mvn.w	r3, #5
 8011a1e:	607b      	str	r3, [r7, #4]
 8011a20:	e010      	b.n	8011a44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011a22:	4b0b      	ldr	r3, [pc, #44]	; (8011a50 <osKernelStart+0x48>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b01      	cmp	r3, #1
 8011a28:	d109      	bne.n	8011a3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011a2a:	f7ff ffbf 	bl	80119ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011a2e:	4b08      	ldr	r3, [pc, #32]	; (8011a50 <osKernelStart+0x48>)
 8011a30:	2202      	movs	r2, #2
 8011a32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011a34:	f001 fef4 	bl	8013820 <vTaskStartScheduler>
      stat = osOK;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	607b      	str	r3, [r7, #4]
 8011a3c:	e002      	b.n	8011a44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011a44:	687b      	ldr	r3, [r7, #4]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3708      	adds	r7, #8
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	200018a0 	.word	0x200018a0

08011a54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b08e      	sub	sp, #56	; 0x38
 8011a58:	af04      	add	r7, sp, #16
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011a60:	2300      	movs	r3, #0
 8011a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a64:	f3ef 8305 	mrs	r3, IPSR
 8011a68:	617b      	str	r3, [r7, #20]
  return(result);
 8011a6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d17e      	bne.n	8011b6e <osThreadNew+0x11a>
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d07b      	beq.n	8011b6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011a76:	2380      	movs	r3, #128	; 0x80
 8011a78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011a7a:	2318      	movs	r3, #24
 8011a7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d045      	beq.n	8011b1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d002      	beq.n	8011a9c <osThreadNew+0x48>
        name = attr->name;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d008      	beq.n	8011ac2 <osThreadNew+0x6e>
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	2b38      	cmp	r3, #56	; 0x38
 8011ab4:	d805      	bhi.n	8011ac2 <osThreadNew+0x6e>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	685b      	ldr	r3, [r3, #4]
 8011aba:	f003 0301 	and.w	r3, r3, #1
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d001      	beq.n	8011ac6 <osThreadNew+0x72>
        return (NULL);
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e054      	b.n	8011b70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	695b      	ldr	r3, [r3, #20]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	695b      	ldr	r3, [r3, #20]
 8011ad2:	089b      	lsrs	r3, r3, #2
 8011ad4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00e      	beq.n	8011afc <osThreadNew+0xa8>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	2b5b      	cmp	r3, #91	; 0x5b
 8011ae4:	d90a      	bls.n	8011afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d006      	beq.n	8011afc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d002      	beq.n	8011afc <osThreadNew+0xa8>
        mem = 1;
 8011af6:	2301      	movs	r3, #1
 8011af8:	61bb      	str	r3, [r7, #24]
 8011afa:	e010      	b.n	8011b1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d10c      	bne.n	8011b1e <osThreadNew+0xca>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d108      	bne.n	8011b1e <osThreadNew+0xca>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d104      	bne.n	8011b1e <osThreadNew+0xca>
          mem = 0;
 8011b14:	2300      	movs	r3, #0
 8011b16:	61bb      	str	r3, [r7, #24]
 8011b18:	e001      	b.n	8011b1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	d110      	bne.n	8011b46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011b28:	687a      	ldr	r2, [r7, #4]
 8011b2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011b2c:	9202      	str	r2, [sp, #8]
 8011b2e:	9301      	str	r3, [sp, #4]
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	6a3a      	ldr	r2, [r7, #32]
 8011b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f001 fabc 	bl	80130b8 <xTaskCreateStatic>
 8011b40:	4603      	mov	r3, r0
 8011b42:	613b      	str	r3, [r7, #16]
 8011b44:	e013      	b.n	8011b6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d110      	bne.n	8011b6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011b4c:	6a3b      	ldr	r3, [r7, #32]
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	f107 0310 	add.w	r3, r7, #16
 8011b54:	9301      	str	r3, [sp, #4]
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f001 fb07 	bl	8013172 <xTaskCreate>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d001      	beq.n	8011b6e <osThreadNew+0x11a>
            hTask = NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011b6e:	693b      	ldr	r3, [r7, #16]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3728      	adds	r7, #40	; 0x28
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b84:	f3ef 8305 	mrs	r3, IPSR
 8011b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d003      	beq.n	8011b98 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8011b90:	f06f 0305 	mvn.w	r3, #5
 8011b94:	617b      	str	r3, [r7, #20]
 8011b96:	e00b      	b.n	8011bb0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d103      	bne.n	8011ba6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8011b9e:	f06f 0303 	mvn.w	r3, #3
 8011ba2:	617b      	str	r3, [r7, #20]
 8011ba4:	e004      	b.n	8011bb0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011baa:	6938      	ldr	r0, [r7, #16]
 8011bac:	f001 fd32 	bl	8013614 <vTaskSuspend>
  }

  return (stat);
 8011bb0:	697b      	ldr	r3, [r7, #20]
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3718      	adds	r7, #24
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b086      	sub	sp, #24
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bc6:	f3ef 8305 	mrs	r3, IPSR
 8011bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d003      	beq.n	8011bda <osThreadResume+0x20>
    stat = osErrorISR;
 8011bd2:	f06f 0305 	mvn.w	r3, #5
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	e00b      	b.n	8011bf2 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d103      	bne.n	8011be8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8011be0:	f06f 0303 	mvn.w	r3, #3
 8011be4:	617b      	str	r3, [r7, #20]
 8011be6:	e004      	b.n	8011bf2 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8011be8:	2300      	movs	r3, #0
 8011bea:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8011bec:	6938      	ldr	r0, [r7, #16]
 8011bee:	f001 fdb9 	bl	8013764 <vTaskResume>
  }

  return (stat);
 8011bf2:	697b      	ldr	r3, [r7, #20]
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3718      	adds	r7, #24
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}

08011bfc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b086      	sub	sp, #24
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c08:	f3ef 8305 	mrs	r3, IPSR
 8011c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c0e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d003      	beq.n	8011c1c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011c14:	f06f 0305 	mvn.w	r3, #5
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	e017      	b.n	8011c4c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d103      	bne.n	8011c2a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011c22:	f06f 0303 	mvn.w	r3, #3
 8011c26:	617b      	str	r3, [r7, #20]
 8011c28:	e010      	b.n	8011c4c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8011c2a:	6938      	ldr	r0, [r7, #16]
 8011c2c:	f001 fc8c 	bl	8013548 <eTaskGetState>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
 8011c36:	2b04      	cmp	r3, #4
 8011c38:	d005      	beq.n	8011c46 <osThreadTerminate+0x4a>
      stat = osOK;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011c3e:	6938      	ldr	r0, [r7, #16]
 8011c40:	f001 fbdc 	bl	80133fc <vTaskDelete>
 8011c44:	e002      	b.n	8011c4c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011c46:	f06f 0302 	mvn.w	r3, #2
 8011c4a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011c4c:	697b      	ldr	r3, [r7, #20]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3718      	adds	r7, #24
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b084      	sub	sp, #16
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c5e:	f3ef 8305 	mrs	r3, IPSR
 8011c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8011c64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d003      	beq.n	8011c72 <osDelay+0x1c>
    stat = osErrorISR;
 8011c6a:	f06f 0305 	mvn.w	r3, #5
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	e007      	b.n	8011c82 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f001 fc2f 	bl	80134e0 <vTaskDelay>
    }
  }

  return (stat);
 8011c82:	68fb      	ldr	r3, [r7, #12]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3710      	adds	r7, #16
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}

08011c8c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b08a      	sub	sp, #40	; 0x28
 8011c90:	af02      	add	r7, sp, #8
 8011c92:	60f8      	str	r0, [r7, #12]
 8011c94:	60b9      	str	r1, [r7, #8]
 8011c96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c9c:	f3ef 8305 	mrs	r3, IPSR
 8011ca0:	613b      	str	r3, [r7, #16]
  return(result);
 8011ca2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d175      	bne.n	8011d94 <osSemaphoreNew+0x108>
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d072      	beq.n	8011d94 <osSemaphoreNew+0x108>
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d86e      	bhi.n	8011d94 <osSemaphoreNew+0x108>
    mem = -1;
 8011cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011cba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d015      	beq.n	8011cee <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d006      	beq.n	8011cd8 <osSemaphoreNew+0x4c>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	2b4f      	cmp	r3, #79	; 0x4f
 8011cd0:	d902      	bls.n	8011cd8 <osSemaphoreNew+0x4c>
        mem = 1;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	61bb      	str	r3, [r7, #24]
 8011cd6:	e00c      	b.n	8011cf2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d108      	bne.n	8011cf2 <osSemaphoreNew+0x66>
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d104      	bne.n	8011cf2 <osSemaphoreNew+0x66>
          mem = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	61bb      	str	r3, [r7, #24]
 8011cec:	e001      	b.n	8011cf2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011cf2:	69bb      	ldr	r3, [r7, #24]
 8011cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cf8:	d04c      	beq.n	8011d94 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d128      	bne.n	8011d52 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d10a      	bne.n	8011d1c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	689b      	ldr	r3, [r3, #8]
 8011d0a:	2203      	movs	r2, #3
 8011d0c:	9200      	str	r2, [sp, #0]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	2100      	movs	r1, #0
 8011d12:	2001      	movs	r0, #1
 8011d14:	f000 fa2a 	bl	801216c <xQueueGenericCreateStatic>
 8011d18:	61f8      	str	r0, [r7, #28]
 8011d1a:	e005      	b.n	8011d28 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011d1c:	2203      	movs	r2, #3
 8011d1e:	2100      	movs	r1, #0
 8011d20:	2001      	movs	r0, #1
 8011d22:	f000 fa9b 	bl	801225c <xQueueGenericCreate>
 8011d26:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d022      	beq.n	8011d74 <osSemaphoreNew+0xe8>
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d01f      	beq.n	8011d74 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011d34:	2300      	movs	r3, #0
 8011d36:	2200      	movs	r2, #0
 8011d38:	2100      	movs	r1, #0
 8011d3a:	69f8      	ldr	r0, [r7, #28]
 8011d3c:	f000 fb56 	bl	80123ec <xQueueGenericSend>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b01      	cmp	r3, #1
 8011d44:	d016      	beq.n	8011d74 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011d46:	69f8      	ldr	r0, [r7, #28]
 8011d48:	f000 ffe2 	bl	8012d10 <vQueueDelete>
            hSemaphore = NULL;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	61fb      	str	r3, [r7, #28]
 8011d50:	e010      	b.n	8011d74 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d108      	bne.n	8011d6a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	689b      	ldr	r3, [r3, #8]
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	68b9      	ldr	r1, [r7, #8]
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f000 fad8 	bl	8012316 <xQueueCreateCountingSemaphoreStatic>
 8011d66:	61f8      	str	r0, [r7, #28]
 8011d68:	e004      	b.n	8011d74 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011d6a:	68b9      	ldr	r1, [r7, #8]
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f000 fb09 	bl	8012384 <xQueueCreateCountingSemaphore>
 8011d72:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00c      	beq.n	8011d94 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d003      	beq.n	8011d88 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	617b      	str	r3, [r7, #20]
 8011d86:	e001      	b.n	8011d8c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011d8c:	6979      	ldr	r1, [r7, #20]
 8011d8e:	69f8      	ldr	r0, [r7, #28]
 8011d90:	f001 f90a 	bl	8012fa8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011d94:	69fb      	ldr	r3, [r7, #28]
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3720      	adds	r7, #32
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
	...

08011da0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b086      	sub	sp, #24
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011dae:	2300      	movs	r3, #0
 8011db0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d103      	bne.n	8011dc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011db8:	f06f 0303 	mvn.w	r3, #3
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e039      	b.n	8011e34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011dc0:	f3ef 8305 	mrs	r3, IPSR
 8011dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011dc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d022      	beq.n	8011e12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d003      	beq.n	8011dda <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011dd2:	f06f 0303 	mvn.w	r3, #3
 8011dd6:	617b      	str	r3, [r7, #20]
 8011dd8:	e02c      	b.n	8011e34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011dde:	f107 0308 	add.w	r3, r7, #8
 8011de2:	461a      	mov	r2, r3
 8011de4:	2100      	movs	r1, #0
 8011de6:	6938      	ldr	r0, [r7, #16]
 8011de8:	f000 ff12 	bl	8012c10 <xQueueReceiveFromISR>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d003      	beq.n	8011dfa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011df2:	f06f 0302 	mvn.w	r3, #2
 8011df6:	617b      	str	r3, [r7, #20]
 8011df8:	e01c      	b.n	8011e34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d019      	beq.n	8011e34 <osSemaphoreAcquire+0x94>
 8011e00:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <osSemaphoreAcquire+0xa0>)
 8011e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e06:	601a      	str	r2, [r3, #0]
 8011e08:	f3bf 8f4f 	dsb	sy
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	e010      	b.n	8011e34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011e12:	6839      	ldr	r1, [r7, #0]
 8011e14:	6938      	ldr	r0, [r7, #16]
 8011e16:	f000 fdef 	bl	80129f8 <xQueueSemaphoreTake>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d009      	beq.n	8011e34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011e26:	f06f 0301 	mvn.w	r3, #1
 8011e2a:	617b      	str	r3, [r7, #20]
 8011e2c:	e002      	b.n	8011e34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011e2e:	f06f 0302 	mvn.w	r3, #2
 8011e32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011e34:	697b      	ldr	r3, [r7, #20]
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3718      	adds	r7, #24
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	e000ed04 	.word	0xe000ed04

08011e44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b086      	sub	sp, #24
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d103      	bne.n	8011e62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011e5a:	f06f 0303 	mvn.w	r3, #3
 8011e5e:	617b      	str	r3, [r7, #20]
 8011e60:	e02c      	b.n	8011ebc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e62:	f3ef 8305 	mrs	r3, IPSR
 8011e66:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d01a      	beq.n	8011ea4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011e72:	f107 0308 	add.w	r3, r7, #8
 8011e76:	4619      	mov	r1, r3
 8011e78:	6938      	ldr	r0, [r7, #16]
 8011e7a:	f000 fc50 	bl	801271e <xQueueGiveFromISR>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b01      	cmp	r3, #1
 8011e82:	d003      	beq.n	8011e8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011e84:	f06f 0302 	mvn.w	r3, #2
 8011e88:	617b      	str	r3, [r7, #20]
 8011e8a:	e017      	b.n	8011ebc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d014      	beq.n	8011ebc <osSemaphoreRelease+0x78>
 8011e92:	4b0d      	ldr	r3, [pc, #52]	; (8011ec8 <osSemaphoreRelease+0x84>)
 8011e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	f3bf 8f4f 	dsb	sy
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	e00b      	b.n	8011ebc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	6938      	ldr	r0, [r7, #16]
 8011eac:	f000 fa9e 	bl	80123ec <xQueueGenericSend>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d002      	beq.n	8011ebc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011eb6:	f06f 0302 	mvn.w	r3, #2
 8011eba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011ebc:	697b      	ldr	r3, [r7, #20]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3718      	adds	r7, #24
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	e000ed04 	.word	0xe000ed04

08011ecc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011ecc:	b480      	push	{r7}
 8011ece:	b085      	sub	sp, #20
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	60f8      	str	r0, [r7, #12]
 8011ed4:	60b9      	str	r1, [r7, #8]
 8011ed6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	4a07      	ldr	r2, [pc, #28]	; (8011ef8 <vApplicationGetIdleTaskMemory+0x2c>)
 8011edc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	4a06      	ldr	r2, [pc, #24]	; (8011efc <vApplicationGetIdleTaskMemory+0x30>)
 8011ee2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2280      	movs	r2, #128	; 0x80
 8011ee8:	601a      	str	r2, [r3, #0]
}
 8011eea:	bf00      	nop
 8011eec:	3714      	adds	r7, #20
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	200018a4 	.word	0x200018a4
 8011efc:	20001900 	.word	0x20001900

08011f00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011f00:	b480      	push	{r7}
 8011f02:	b085      	sub	sp, #20
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	4a07      	ldr	r2, [pc, #28]	; (8011f2c <vApplicationGetTimerTaskMemory+0x2c>)
 8011f10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	4a06      	ldr	r2, [pc, #24]	; (8011f30 <vApplicationGetTimerTaskMemory+0x30>)
 8011f16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011f1e:	601a      	str	r2, [r3, #0]
}
 8011f20:	bf00      	nop
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr
 8011f2c:	20001b00 	.word	0x20001b00
 8011f30:	20001b5c 	.word	0x20001b5c

08011f34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f103 0208 	add.w	r2, r3, #8
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f103 0208 	add.w	r2, r3, #8
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f103 0208 	add.w	r2, r3, #8
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2200      	movs	r2, #0
 8011f66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f68:	bf00      	nop
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011f82:	bf00      	nop
 8011f84:	370c      	adds	r7, #12
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr

08011f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011f8e:	b480      	push	{r7}
 8011f90:	b085      	sub	sp, #20
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
 8011f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	689a      	ldr	r2, [r3, #8]
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	689b      	ldr	r3, [r3, #8]
 8011fb0:	683a      	ldr	r2, [r7, #0]
 8011fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	1c5a      	adds	r2, r3, #1
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	601a      	str	r2, [r3, #0]
}
 8011fca:	bf00      	nop
 8011fcc:	3714      	adds	r7, #20
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fd6:	b480      	push	{r7}
 8011fd8:	b085      	sub	sp, #20
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
 8011fde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fec:	d103      	bne.n	8011ff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	691b      	ldr	r3, [r3, #16]
 8011ff2:	60fb      	str	r3, [r7, #12]
 8011ff4:	e00c      	b.n	8012010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	3308      	adds	r3, #8
 8011ffa:	60fb      	str	r3, [r7, #12]
 8011ffc:	e002      	b.n	8012004 <vListInsert+0x2e>
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	685b      	ldr	r3, [r3, #4]
 8012002:	60fb      	str	r3, [r7, #12]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	68ba      	ldr	r2, [r7, #8]
 801200c:	429a      	cmp	r2, r3
 801200e:	d2f6      	bcs.n	8011ffe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	685a      	ldr	r2, [r3, #4]
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	683a      	ldr	r2, [r7, #0]
 801201e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	683a      	ldr	r2, [r7, #0]
 801202a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	687a      	ldr	r2, [r7, #4]
 8012030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	1c5a      	adds	r2, r3, #1
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	601a      	str	r2, [r3, #0]
}
 801203c:	bf00      	nop
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012048:	b480      	push	{r7}
 801204a:	b085      	sub	sp, #20
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	691b      	ldr	r3, [r3, #16]
 8012054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	6892      	ldr	r2, [r2, #8]
 801205e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	6852      	ldr	r2, [r2, #4]
 8012068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	687a      	ldr	r2, [r7, #4]
 8012070:	429a      	cmp	r2, r3
 8012072:	d103      	bne.n	801207c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	689a      	ldr	r2, [r3, #8]
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	1e5a      	subs	r2, r3, #1
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	681b      	ldr	r3, [r3, #0]
}
 8012090:	4618      	mov	r0, r3
 8012092:	3714      	adds	r7, #20
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr

0801209c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
 80120a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d10a      	bne.n	80120c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80120c6:	f002 fe4d 	bl	8014d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120d2:	68f9      	ldr	r1, [r7, #12]
 80120d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120d6:	fb01 f303 	mul.w	r3, r1, r3
 80120da:	441a      	add	r2, r3
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120f6:	3b01      	subs	r3, #1
 80120f8:	68f9      	ldr	r1, [r7, #12]
 80120fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80120fc:	fb01 f303 	mul.w	r3, r1, r3
 8012100:	441a      	add	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	22ff      	movs	r2, #255	; 0xff
 801210a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	22ff      	movs	r2, #255	; 0xff
 8012112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012116:	683b      	ldr	r3, [r7, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d114      	bne.n	8012146 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	691b      	ldr	r3, [r3, #16]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d01a      	beq.n	801215a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	3310      	adds	r3, #16
 8012128:	4618      	mov	r0, r3
 801212a:	f001 fe03 	bl	8013d34 <xTaskRemoveFromEventList>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d012      	beq.n	801215a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012134:	4b0c      	ldr	r3, [pc, #48]	; (8012168 <xQueueGenericReset+0xcc>)
 8012136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	f3bf 8f6f 	isb	sy
 8012144:	e009      	b.n	801215a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	3310      	adds	r3, #16
 801214a:	4618      	mov	r0, r3
 801214c:	f7ff fef2 	bl	8011f34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	3324      	adds	r3, #36	; 0x24
 8012154:	4618      	mov	r0, r3
 8012156:	f7ff feed 	bl	8011f34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801215a:	f002 fe33 	bl	8014dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801215e:	2301      	movs	r3, #1
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	e000ed04 	.word	0xe000ed04

0801216c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08e      	sub	sp, #56	; 0x38
 8012170:	af02      	add	r7, sp, #8
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
 8012178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10a      	bne.n	8012196 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012192:	bf00      	nop
 8012194:	e7fe      	b.n	8012194 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10a      	bne.n	80121b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801219c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a0:	f383 8811 	msr	BASEPRI, r3
 80121a4:	f3bf 8f6f 	isb	sy
 80121a8:	f3bf 8f4f 	dsb	sy
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121ae:	bf00      	nop
 80121b0:	e7fe      	b.n	80121b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d002      	beq.n	80121be <xQueueGenericCreateStatic+0x52>
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d001      	beq.n	80121c2 <xQueueGenericCreateStatic+0x56>
 80121be:	2301      	movs	r3, #1
 80121c0:	e000      	b.n	80121c4 <xQueueGenericCreateStatic+0x58>
 80121c2:	2300      	movs	r3, #0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d10a      	bne.n	80121de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80121c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121cc:	f383 8811 	msr	BASEPRI, r3
 80121d0:	f3bf 8f6f 	isb	sy
 80121d4:	f3bf 8f4f 	dsb	sy
 80121d8:	623b      	str	r3, [r7, #32]
}
 80121da:	bf00      	nop
 80121dc:	e7fe      	b.n	80121dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d102      	bne.n	80121ea <xQueueGenericCreateStatic+0x7e>
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d101      	bne.n	80121ee <xQueueGenericCreateStatic+0x82>
 80121ea:	2301      	movs	r3, #1
 80121ec:	e000      	b.n	80121f0 <xQueueGenericCreateStatic+0x84>
 80121ee:	2300      	movs	r3, #0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10a      	bne.n	801220a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	61fb      	str	r3, [r7, #28]
}
 8012206:	bf00      	nop
 8012208:	e7fe      	b.n	8012208 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801220a:	2350      	movs	r3, #80	; 0x50
 801220c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	2b50      	cmp	r3, #80	; 0x50
 8012212:	d00a      	beq.n	801222a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012218:	f383 8811 	msr	BASEPRI, r3
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f3bf 8f4f 	dsb	sy
 8012224:	61bb      	str	r3, [r7, #24]
}
 8012226:	bf00      	nop
 8012228:	e7fe      	b.n	8012228 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801222a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00d      	beq.n	8012252 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012238:	2201      	movs	r2, #1
 801223a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801223e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012244:	9300      	str	r3, [sp, #0]
 8012246:	4613      	mov	r3, r2
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	68b9      	ldr	r1, [r7, #8]
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	f000 f83f 	bl	80122d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012254:	4618      	mov	r0, r3
 8012256:	3730      	adds	r7, #48	; 0x30
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08a      	sub	sp, #40	; 0x28
 8012260:	af02      	add	r7, sp, #8
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	4613      	mov	r3, r2
 8012268:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10a      	bne.n	8012286 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012274:	f383 8811 	msr	BASEPRI, r3
 8012278:	f3bf 8f6f 	isb	sy
 801227c:	f3bf 8f4f 	dsb	sy
 8012280:	613b      	str	r3, [r7, #16]
}
 8012282:	bf00      	nop
 8012284:	e7fe      	b.n	8012284 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	68ba      	ldr	r2, [r7, #8]
 801228a:	fb02 f303 	mul.w	r3, r2, r3
 801228e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	3350      	adds	r3, #80	; 0x50
 8012294:	4618      	mov	r0, r3
 8012296:	f002 fe87 	bl	8014fa8 <pvPortMalloc>
 801229a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d011      	beq.n	80122c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80122a6:	697b      	ldr	r3, [r7, #20]
 80122a8:	3350      	adds	r3, #80	; 0x50
 80122aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80122ac:	69bb      	ldr	r3, [r7, #24]
 80122ae:	2200      	movs	r2, #0
 80122b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80122b4:	79fa      	ldrb	r2, [r7, #7]
 80122b6:	69bb      	ldr	r3, [r7, #24]
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	4613      	mov	r3, r2
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	68b9      	ldr	r1, [r7, #8]
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f000 f805 	bl	80122d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80122c6:	69bb      	ldr	r3, [r7, #24]
	}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3720      	adds	r7, #32
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b084      	sub	sp, #16
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	607a      	str	r2, [r7, #4]
 80122dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d103      	bne.n	80122ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	69ba      	ldr	r2, [r7, #24]
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	e002      	b.n	80122f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	68fa      	ldr	r2, [r7, #12]
 80122f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80122f8:	69bb      	ldr	r3, [r7, #24]
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80122fe:	2101      	movs	r1, #1
 8012300:	69b8      	ldr	r0, [r7, #24]
 8012302:	f7ff fecb 	bl	801209c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	78fa      	ldrb	r2, [r7, #3]
 801230a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801230e:	bf00      	nop
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}

08012316 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012316:	b580      	push	{r7, lr}
 8012318:	b08a      	sub	sp, #40	; 0x28
 801231a:	af02      	add	r7, sp, #8
 801231c:	60f8      	str	r0, [r7, #12]
 801231e:	60b9      	str	r1, [r7, #8]
 8012320:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10a      	bne.n	801233e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	61bb      	str	r3, [r7, #24]
}
 801233a:	bf00      	nop
 801233c:	e7fe      	b.n	801233c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801233e:	68ba      	ldr	r2, [r7, #8]
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	429a      	cmp	r2, r3
 8012344:	d90a      	bls.n	801235c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	617b      	str	r3, [r7, #20]
}
 8012358:	bf00      	nop
 801235a:	e7fe      	b.n	801235a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801235c:	2302      	movs	r3, #2
 801235e:	9300      	str	r3, [sp, #0]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	2100      	movs	r1, #0
 8012366:	68f8      	ldr	r0, [r7, #12]
 8012368:	f7ff ff00 	bl	801216c <xQueueGenericCreateStatic>
 801236c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d002      	beq.n	801237a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	68ba      	ldr	r2, [r7, #8]
 8012378:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801237a:	69fb      	ldr	r3, [r7, #28]
	}
 801237c:	4618      	mov	r0, r3
 801237e:	3720      	adds	r7, #32
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012384:	b580      	push	{r7, lr}
 8012386:	b086      	sub	sp, #24
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
 801238c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d10a      	bne.n	80123aa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012398:	f383 8811 	msr	BASEPRI, r3
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	613b      	str	r3, [r7, #16]
}
 80123a6:	bf00      	nop
 80123a8:	e7fe      	b.n	80123a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80123aa:	683a      	ldr	r2, [r7, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d90a      	bls.n	80123c8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80123b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b6:	f383 8811 	msr	BASEPRI, r3
 80123ba:	f3bf 8f6f 	isb	sy
 80123be:	f3bf 8f4f 	dsb	sy
 80123c2:	60fb      	str	r3, [r7, #12]
}
 80123c4:	bf00      	nop
 80123c6:	e7fe      	b.n	80123c6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80123c8:	2202      	movs	r2, #2
 80123ca:	2100      	movs	r1, #0
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff ff45 	bl	801225c <xQueueGenericCreate>
 80123d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d002      	beq.n	80123e0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	683a      	ldr	r2, [r7, #0]
 80123de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80123e0:	697b      	ldr	r3, [r7, #20]
	}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3718      	adds	r7, #24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
	...

080123ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08e      	sub	sp, #56	; 0x38
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80123fa:	2300      	movs	r3, #0
 80123fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10a      	bne.n	801241e <xQueueGenericSend+0x32>
	__asm volatile
 8012408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801241a:	bf00      	nop
 801241c:	e7fe      	b.n	801241c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d103      	bne.n	801242c <xQueueGenericSend+0x40>
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012428:	2b00      	cmp	r3, #0
 801242a:	d101      	bne.n	8012430 <xQueueGenericSend+0x44>
 801242c:	2301      	movs	r3, #1
 801242e:	e000      	b.n	8012432 <xQueueGenericSend+0x46>
 8012430:	2300      	movs	r3, #0
 8012432:	2b00      	cmp	r3, #0
 8012434:	d10a      	bne.n	801244c <xQueueGenericSend+0x60>
	__asm volatile
 8012436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243a:	f383 8811 	msr	BASEPRI, r3
 801243e:	f3bf 8f6f 	isb	sy
 8012442:	f3bf 8f4f 	dsb	sy
 8012446:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012448:	bf00      	nop
 801244a:	e7fe      	b.n	801244a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801244c:	683b      	ldr	r3, [r7, #0]
 801244e:	2b02      	cmp	r3, #2
 8012450:	d103      	bne.n	801245a <xQueueGenericSend+0x6e>
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012456:	2b01      	cmp	r3, #1
 8012458:	d101      	bne.n	801245e <xQueueGenericSend+0x72>
 801245a:	2301      	movs	r3, #1
 801245c:	e000      	b.n	8012460 <xQueueGenericSend+0x74>
 801245e:	2300      	movs	r3, #0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d10a      	bne.n	801247a <xQueueGenericSend+0x8e>
	__asm volatile
 8012464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012468:	f383 8811 	msr	BASEPRI, r3
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	623b      	str	r3, [r7, #32]
}
 8012476:	bf00      	nop
 8012478:	e7fe      	b.n	8012478 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801247a:	f001 fe19 	bl	80140b0 <xTaskGetSchedulerState>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	d102      	bne.n	801248a <xQueueGenericSend+0x9e>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d101      	bne.n	801248e <xQueueGenericSend+0xa2>
 801248a:	2301      	movs	r3, #1
 801248c:	e000      	b.n	8012490 <xQueueGenericSend+0xa4>
 801248e:	2300      	movs	r3, #0
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10a      	bne.n	80124aa <xQueueGenericSend+0xbe>
	__asm volatile
 8012494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012498:	f383 8811 	msr	BASEPRI, r3
 801249c:	f3bf 8f6f 	isb	sy
 80124a0:	f3bf 8f4f 	dsb	sy
 80124a4:	61fb      	str	r3, [r7, #28]
}
 80124a6:	bf00      	nop
 80124a8:	e7fe      	b.n	80124a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80124aa:	f002 fc5b 	bl	8014d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d302      	bcc.n	80124c0 <xQueueGenericSend+0xd4>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b02      	cmp	r3, #2
 80124be:	d129      	bne.n	8012514 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124c0:	683a      	ldr	r2, [r7, #0]
 80124c2:	68b9      	ldr	r1, [r7, #8]
 80124c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c6:	f000 fc5e 	bl	8012d86 <prvCopyDataToQueue>
 80124ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d010      	beq.n	80124f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d6:	3324      	adds	r3, #36	; 0x24
 80124d8:	4618      	mov	r0, r3
 80124da:	f001 fc2b 	bl	8013d34 <xTaskRemoveFromEventList>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d013      	beq.n	801250c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80124e4:	4b3f      	ldr	r3, [pc, #252]	; (80125e4 <xQueueGenericSend+0x1f8>)
 80124e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ea:	601a      	str	r2, [r3, #0]
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	e00a      	b.n	801250c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80124f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d007      	beq.n	801250c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80124fc:	4b39      	ldr	r3, [pc, #228]	; (80125e4 <xQueueGenericSend+0x1f8>)
 80124fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012502:	601a      	str	r2, [r3, #0]
 8012504:	f3bf 8f4f 	dsb	sy
 8012508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801250c:	f002 fc5a 	bl	8014dc4 <vPortExitCritical>
				return pdPASS;
 8012510:	2301      	movs	r3, #1
 8012512:	e063      	b.n	80125dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d103      	bne.n	8012522 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801251a:	f002 fc53 	bl	8014dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801251e:	2300      	movs	r3, #0
 8012520:	e05c      	b.n	80125dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012528:	f107 0314 	add.w	r3, r7, #20
 801252c:	4618      	mov	r0, r3
 801252e:	f001 fc65 	bl	8013dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012532:	2301      	movs	r3, #1
 8012534:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012536:	f002 fc45 	bl	8014dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801253a:	f001 f9d7 	bl	80138ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801253e:	f002 fc11 	bl	8014d64 <vPortEnterCritical>
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012548:	b25b      	sxtb	r3, r3
 801254a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801254e:	d103      	bne.n	8012558 <xQueueGenericSend+0x16c>
 8012550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012552:	2200      	movs	r2, #0
 8012554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801255e:	b25b      	sxtb	r3, r3
 8012560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012564:	d103      	bne.n	801256e <xQueueGenericSend+0x182>
 8012566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012568:	2200      	movs	r2, #0
 801256a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801256e:	f002 fc29 	bl	8014dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012572:	1d3a      	adds	r2, r7, #4
 8012574:	f107 0314 	add.w	r3, r7, #20
 8012578:	4611      	mov	r1, r2
 801257a:	4618      	mov	r0, r3
 801257c:	f001 fc54 	bl	8013e28 <xTaskCheckForTimeOut>
 8012580:	4603      	mov	r3, r0
 8012582:	2b00      	cmp	r3, #0
 8012584:	d124      	bne.n	80125d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012588:	f000 fcf5 	bl	8012f76 <prvIsQueueFull>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d018      	beq.n	80125c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	3310      	adds	r3, #16
 8012596:	687a      	ldr	r2, [r7, #4]
 8012598:	4611      	mov	r1, r2
 801259a:	4618      	mov	r0, r3
 801259c:	f001 fb7a 	bl	8013c94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80125a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125a2:	f000 fc80 	bl	8012ea6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80125a6:	f001 f9af 	bl	8013908 <xTaskResumeAll>
 80125aa:	4603      	mov	r3, r0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f47f af7c 	bne.w	80124aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80125b2:	4b0c      	ldr	r3, [pc, #48]	; (80125e4 <xQueueGenericSend+0x1f8>)
 80125b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b8:	601a      	str	r2, [r3, #0]
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	e772      	b.n	80124aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80125c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125c6:	f000 fc6e 	bl	8012ea6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80125ca:	f001 f99d 	bl	8013908 <xTaskResumeAll>
 80125ce:	e76c      	b.n	80124aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80125d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125d2:	f000 fc68 	bl	8012ea6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80125d6:	f001 f997 	bl	8013908 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80125da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3738      	adds	r7, #56	; 0x38
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	e000ed04 	.word	0xe000ed04

080125e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b090      	sub	sp, #64	; 0x40
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
 80125f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80125fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10a      	bne.n	8012616 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012612:	bf00      	nop
 8012614:	e7fe      	b.n	8012614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d103      	bne.n	8012624 <xQueueGenericSendFromISR+0x3c>
 801261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012620:	2b00      	cmp	r3, #0
 8012622:	d101      	bne.n	8012628 <xQueueGenericSendFromISR+0x40>
 8012624:	2301      	movs	r3, #1
 8012626:	e000      	b.n	801262a <xQueueGenericSendFromISR+0x42>
 8012628:	2300      	movs	r3, #0
 801262a:	2b00      	cmp	r3, #0
 801262c:	d10a      	bne.n	8012644 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012640:	bf00      	nop
 8012642:	e7fe      	b.n	8012642 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	2b02      	cmp	r3, #2
 8012648:	d103      	bne.n	8012652 <xQueueGenericSendFromISR+0x6a>
 801264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801264e:	2b01      	cmp	r3, #1
 8012650:	d101      	bne.n	8012656 <xQueueGenericSendFromISR+0x6e>
 8012652:	2301      	movs	r3, #1
 8012654:	e000      	b.n	8012658 <xQueueGenericSendFromISR+0x70>
 8012656:	2300      	movs	r3, #0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d10a      	bne.n	8012672 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012660:	f383 8811 	msr	BASEPRI, r3
 8012664:	f3bf 8f6f 	isb	sy
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	623b      	str	r3, [r7, #32]
}
 801266e:	bf00      	nop
 8012670:	e7fe      	b.n	8012670 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012672:	f002 fc59 	bl	8014f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012676:	f3ef 8211 	mrs	r2, BASEPRI
 801267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267e:	f383 8811 	msr	BASEPRI, r3
 8012682:	f3bf 8f6f 	isb	sy
 8012686:	f3bf 8f4f 	dsb	sy
 801268a:	61fa      	str	r2, [r7, #28]
 801268c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801268e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012690:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801269a:	429a      	cmp	r2, r3
 801269c:	d302      	bcc.n	80126a4 <xQueueGenericSendFromISR+0xbc>
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	2b02      	cmp	r3, #2
 80126a2:	d12f      	bne.n	8012704 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80126a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80126aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	68b9      	ldr	r1, [r7, #8]
 80126b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80126ba:	f000 fb64 	bl	8012d86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80126be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80126c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80126c6:	d112      	bne.n	80126ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d016      	beq.n	80126fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d2:	3324      	adds	r3, #36	; 0x24
 80126d4:	4618      	mov	r0, r3
 80126d6:	f001 fb2d 	bl	8013d34 <xTaskRemoveFromEventList>
 80126da:	4603      	mov	r3, r0
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00e      	beq.n	80126fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00b      	beq.n	80126fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2201      	movs	r2, #1
 80126ea:	601a      	str	r2, [r3, #0]
 80126ec:	e007      	b.n	80126fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80126ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80126f2:	3301      	adds	r3, #1
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	b25a      	sxtb	r2, r3
 80126f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80126fe:	2301      	movs	r3, #1
 8012700:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012702:	e001      	b.n	8012708 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012704:	2300      	movs	r3, #0
 8012706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801270c:	697b      	ldr	r3, [r7, #20]
 801270e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012712:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012716:	4618      	mov	r0, r3
 8012718:	3740      	adds	r7, #64	; 0x40
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b08e      	sub	sp, #56	; 0x38
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272e:	2b00      	cmp	r3, #0
 8012730:	d10a      	bne.n	8012748 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012736:	f383 8811 	msr	BASEPRI, r3
 801273a:	f3bf 8f6f 	isb	sy
 801273e:	f3bf 8f4f 	dsb	sy
 8012742:	623b      	str	r3, [r7, #32]
}
 8012744:	bf00      	nop
 8012746:	e7fe      	b.n	8012746 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00a      	beq.n	8012766 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	61fb      	str	r3, [r7, #28]
}
 8012762:	bf00      	nop
 8012764:	e7fe      	b.n	8012764 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d103      	bne.n	8012776 <xQueueGiveFromISR+0x58>
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d101      	bne.n	801277a <xQueueGiveFromISR+0x5c>
 8012776:	2301      	movs	r3, #1
 8012778:	e000      	b.n	801277c <xQueueGiveFromISR+0x5e>
 801277a:	2300      	movs	r3, #0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10a      	bne.n	8012796 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	61bb      	str	r3, [r7, #24]
}
 8012792:	bf00      	nop
 8012794:	e7fe      	b.n	8012794 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012796:	f002 fbc7 	bl	8014f28 <vPortValidateInterruptPriority>
	__asm volatile
 801279a:	f3ef 8211 	mrs	r2, BASEPRI
 801279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a2:	f383 8811 	msr	BASEPRI, r3
 80127a6:	f3bf 8f6f 	isb	sy
 80127aa:	f3bf 8f4f 	dsb	sy
 80127ae:	617a      	str	r2, [r7, #20]
 80127b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80127b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80127b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80127bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d22b      	bcs.n	801281e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80127c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80127d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d2:	1c5a      	adds	r2, r3, #1
 80127d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80127d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127e0:	d112      	bne.n	8012808 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d016      	beq.n	8012818 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	3324      	adds	r3, #36	; 0x24
 80127ee:	4618      	mov	r0, r3
 80127f0:	f001 faa0 	bl	8013d34 <xTaskRemoveFromEventList>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00e      	beq.n	8012818 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00b      	beq.n	8012818 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	2201      	movs	r2, #1
 8012804:	601a      	str	r2, [r3, #0]
 8012806:	e007      	b.n	8012818 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801280c:	3301      	adds	r3, #1
 801280e:	b2db      	uxtb	r3, r3
 8012810:	b25a      	sxtb	r2, r3
 8012812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012818:	2301      	movs	r3, #1
 801281a:	637b      	str	r3, [r7, #52]	; 0x34
 801281c:	e001      	b.n	8012822 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801281e:	2300      	movs	r3, #0
 8012820:	637b      	str	r3, [r7, #52]	; 0x34
 8012822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012824:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f383 8811 	msr	BASEPRI, r3
}
 801282c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012830:	4618      	mov	r0, r3
 8012832:	3738      	adds	r7, #56	; 0x38
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}

08012838 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b08c      	sub	sp, #48	; 0x30
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012844:	2300      	movs	r3, #0
 8012846:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10a      	bne.n	8012868 <xQueueReceive+0x30>
	__asm volatile
 8012852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012856:	f383 8811 	msr	BASEPRI, r3
 801285a:	f3bf 8f6f 	isb	sy
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	623b      	str	r3, [r7, #32]
}
 8012864:	bf00      	nop
 8012866:	e7fe      	b.n	8012866 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d103      	bne.n	8012876 <xQueueReceive+0x3e>
 801286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012872:	2b00      	cmp	r3, #0
 8012874:	d101      	bne.n	801287a <xQueueReceive+0x42>
 8012876:	2301      	movs	r3, #1
 8012878:	e000      	b.n	801287c <xQueueReceive+0x44>
 801287a:	2300      	movs	r3, #0
 801287c:	2b00      	cmp	r3, #0
 801287e:	d10a      	bne.n	8012896 <xQueueReceive+0x5e>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	61fb      	str	r3, [r7, #28]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012896:	f001 fc0b 	bl	80140b0 <xTaskGetSchedulerState>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	d102      	bne.n	80128a6 <xQueueReceive+0x6e>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d101      	bne.n	80128aa <xQueueReceive+0x72>
 80128a6:	2301      	movs	r3, #1
 80128a8:	e000      	b.n	80128ac <xQueueReceive+0x74>
 80128aa:	2300      	movs	r3, #0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d10a      	bne.n	80128c6 <xQueueReceive+0x8e>
	__asm volatile
 80128b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b4:	f383 8811 	msr	BASEPRI, r3
 80128b8:	f3bf 8f6f 	isb	sy
 80128bc:	f3bf 8f4f 	dsb	sy
 80128c0:	61bb      	str	r3, [r7, #24]
}
 80128c2:	bf00      	nop
 80128c4:	e7fe      	b.n	80128c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128c6:	f002 fa4d 	bl	8014d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d01f      	beq.n	8012916 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80128d6:	68b9      	ldr	r1, [r7, #8]
 80128d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128da:	f000 fabe 	bl	8012e5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80128de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e0:	1e5a      	subs	r2, r3, #1
 80128e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	691b      	ldr	r3, [r3, #16]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00f      	beq.n	801290e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f0:	3310      	adds	r3, #16
 80128f2:	4618      	mov	r0, r3
 80128f4:	f001 fa1e 	bl	8013d34 <xTaskRemoveFromEventList>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d007      	beq.n	801290e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128fe:	4b3d      	ldr	r3, [pc, #244]	; (80129f4 <xQueueReceive+0x1bc>)
 8012900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801290e:	f002 fa59 	bl	8014dc4 <vPortExitCritical>
				return pdPASS;
 8012912:	2301      	movs	r3, #1
 8012914:	e069      	b.n	80129ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d103      	bne.n	8012924 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801291c:	f002 fa52 	bl	8014dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012920:	2300      	movs	r3, #0
 8012922:	e062      	b.n	80129ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012926:	2b00      	cmp	r3, #0
 8012928:	d106      	bne.n	8012938 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801292a:	f107 0310 	add.w	r3, r7, #16
 801292e:	4618      	mov	r0, r3
 8012930:	f001 fa64 	bl	8013dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012934:	2301      	movs	r3, #1
 8012936:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012938:	f002 fa44 	bl	8014dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801293c:	f000 ffd6 	bl	80138ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012940:	f002 fa10 	bl	8014d64 <vPortEnterCritical>
 8012944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801294a:	b25b      	sxtb	r3, r3
 801294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012950:	d103      	bne.n	801295a <xQueueReceive+0x122>
 8012952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012954:	2200      	movs	r2, #0
 8012956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801295a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801295c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012960:	b25b      	sxtb	r3, r3
 8012962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012966:	d103      	bne.n	8012970 <xQueueReceive+0x138>
 8012968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801296a:	2200      	movs	r2, #0
 801296c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012970:	f002 fa28 	bl	8014dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012974:	1d3a      	adds	r2, r7, #4
 8012976:	f107 0310 	add.w	r3, r7, #16
 801297a:	4611      	mov	r1, r2
 801297c:	4618      	mov	r0, r3
 801297e:	f001 fa53 	bl	8013e28 <xTaskCheckForTimeOut>
 8012982:	4603      	mov	r3, r0
 8012984:	2b00      	cmp	r3, #0
 8012986:	d123      	bne.n	80129d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801298a:	f000 fade 	bl	8012f4a <prvIsQueueEmpty>
 801298e:	4603      	mov	r3, r0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d017      	beq.n	80129c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012996:	3324      	adds	r3, #36	; 0x24
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	4611      	mov	r1, r2
 801299c:	4618      	mov	r0, r3
 801299e:	f001 f979 	bl	8013c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80129a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129a4:	f000 fa7f 	bl	8012ea6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129a8:	f000 ffae 	bl	8013908 <xTaskResumeAll>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d189      	bne.n	80128c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80129b2:	4b10      	ldr	r3, [pc, #64]	; (80129f4 <xQueueReceive+0x1bc>)
 80129b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	f3bf 8f6f 	isb	sy
 80129c2:	e780      	b.n	80128c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80129c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c6:	f000 fa6e 	bl	8012ea6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129ca:	f000 ff9d 	bl	8013908 <xTaskResumeAll>
 80129ce:	e77a      	b.n	80128c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80129d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129d2:	f000 fa68 	bl	8012ea6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129d6:	f000 ff97 	bl	8013908 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129dc:	f000 fab5 	bl	8012f4a <prvIsQueueEmpty>
 80129e0:	4603      	mov	r3, r0
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	f43f af6f 	beq.w	80128c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80129e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3730      	adds	r7, #48	; 0x30
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	e000ed04 	.word	0xe000ed04

080129f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b08e      	sub	sp, #56	; 0x38
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012a02:	2300      	movs	r3, #0
 8012a04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10a      	bne.n	8012a2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	623b      	str	r3, [r7, #32]
}
 8012a26:	bf00      	nop
 8012a28:	e7fe      	b.n	8012a28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00a      	beq.n	8012a48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a36:	f383 8811 	msr	BASEPRI, r3
 8012a3a:	f3bf 8f6f 	isb	sy
 8012a3e:	f3bf 8f4f 	dsb	sy
 8012a42:	61fb      	str	r3, [r7, #28]
}
 8012a44:	bf00      	nop
 8012a46:	e7fe      	b.n	8012a46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a48:	f001 fb32 	bl	80140b0 <xTaskGetSchedulerState>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d102      	bne.n	8012a58 <xQueueSemaphoreTake+0x60>
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d101      	bne.n	8012a5c <xQueueSemaphoreTake+0x64>
 8012a58:	2301      	movs	r3, #1
 8012a5a:	e000      	b.n	8012a5e <xQueueSemaphoreTake+0x66>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d10a      	bne.n	8012a78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a66:	f383 8811 	msr	BASEPRI, r3
 8012a6a:	f3bf 8f6f 	isb	sy
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	61bb      	str	r3, [r7, #24]
}
 8012a74:	bf00      	nop
 8012a76:	e7fe      	b.n	8012a76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a78:	f002 f974 	bl	8014d64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d024      	beq.n	8012ad2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8a:	1e5a      	subs	r2, r3, #1
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d104      	bne.n	8012aa2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012a98:	f001 fc80 	bl	801439c <pvTaskIncrementMutexHeldCount>
 8012a9c:	4602      	mov	r2, r0
 8012a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00f      	beq.n	8012aca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aac:	3310      	adds	r3, #16
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f001 f940 	bl	8013d34 <xTaskRemoveFromEventList>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d007      	beq.n	8012aca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012aba:	4b54      	ldr	r3, [pc, #336]	; (8012c0c <xQueueSemaphoreTake+0x214>)
 8012abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ac0:	601a      	str	r2, [r3, #0]
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012aca:	f002 f97b 	bl	8014dc4 <vPortExitCritical>
				return pdPASS;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e097      	b.n	8012c02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d111      	bne.n	8012afc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00a      	beq.n	8012af4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	617b      	str	r3, [r7, #20]
}
 8012af0:	bf00      	nop
 8012af2:	e7fe      	b.n	8012af2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012af4:	f002 f966 	bl	8014dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012af8:	2300      	movs	r3, #0
 8012afa:	e082      	b.n	8012c02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d106      	bne.n	8012b10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b02:	f107 030c 	add.w	r3, r7, #12
 8012b06:	4618      	mov	r0, r3
 8012b08:	f001 f978 	bl	8013dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b10:	f002 f958 	bl	8014dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b14:	f000 feea 	bl	80138ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012b18:	f002 f924 	bl	8014d64 <vPortEnterCritical>
 8012b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b22:	b25b      	sxtb	r3, r3
 8012b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b28:	d103      	bne.n	8012b32 <xQueueSemaphoreTake+0x13a>
 8012b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b38:	b25b      	sxtb	r3, r3
 8012b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b3e:	d103      	bne.n	8012b48 <xQueueSemaphoreTake+0x150>
 8012b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b42:	2200      	movs	r2, #0
 8012b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b48:	f002 f93c 	bl	8014dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b4c:	463a      	mov	r2, r7
 8012b4e:	f107 030c 	add.w	r3, r7, #12
 8012b52:	4611      	mov	r1, r2
 8012b54:	4618      	mov	r0, r3
 8012b56:	f001 f967 	bl	8013e28 <xTaskCheckForTimeOut>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d132      	bne.n	8012bc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b62:	f000 f9f2 	bl	8012f4a <prvIsQueueEmpty>
 8012b66:	4603      	mov	r3, r0
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d026      	beq.n	8012bba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d109      	bne.n	8012b88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012b74:	f002 f8f6 	bl	8014d64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f001 fab5 	bl	80140ec <xTaskPriorityInherit>
 8012b82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012b84:	f002 f91e 	bl	8014dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	3324      	adds	r3, #36	; 0x24
 8012b8c:	683a      	ldr	r2, [r7, #0]
 8012b8e:	4611      	mov	r1, r2
 8012b90:	4618      	mov	r0, r3
 8012b92:	f001 f87f 	bl	8013c94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b98:	f000 f985 	bl	8012ea6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b9c:	f000 feb4 	bl	8013908 <xTaskResumeAll>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f47f af68 	bne.w	8012a78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012ba8:	4b18      	ldr	r3, [pc, #96]	; (8012c0c <xQueueSemaphoreTake+0x214>)
 8012baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bae:	601a      	str	r2, [r3, #0]
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	f3bf 8f6f 	isb	sy
 8012bb8:	e75e      	b.n	8012a78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bbc:	f000 f973 	bl	8012ea6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012bc0:	f000 fea2 	bl	8013908 <xTaskResumeAll>
 8012bc4:	e758      	b.n	8012a78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012bc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bc8:	f000 f96d 	bl	8012ea6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012bcc:	f000 fe9c 	bl	8013908 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bd2:	f000 f9ba 	bl	8012f4a <prvIsQueueEmpty>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f43f af4d 	beq.w	8012a78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d00d      	beq.n	8012c00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012be4:	f002 f8be 	bl	8014d64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bea:	f000 f8b4 	bl	8012d56 <prvGetDisinheritPriorityAfterTimeout>
 8012bee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bf2:	689b      	ldr	r3, [r3, #8]
 8012bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f001 fb4e 	bl	8014298 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012bfc:	f002 f8e2 	bl	8014dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3738      	adds	r7, #56	; 0x38
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	e000ed04 	.word	0xe000ed04

08012c10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b08e      	sub	sp, #56	; 0x38
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	60f8      	str	r0, [r7, #12]
 8012c18:	60b9      	str	r1, [r7, #8]
 8012c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d10a      	bne.n	8012c3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2a:	f383 8811 	msr	BASEPRI, r3
 8012c2e:	f3bf 8f6f 	isb	sy
 8012c32:	f3bf 8f4f 	dsb	sy
 8012c36:	623b      	str	r3, [r7, #32]
}
 8012c38:	bf00      	nop
 8012c3a:	e7fe      	b.n	8012c3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d103      	bne.n	8012c4a <xQueueReceiveFromISR+0x3a>
 8012c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <xQueueReceiveFromISR+0x3e>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <xQueueReceiveFromISR+0x40>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10a      	bne.n	8012c6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	61fb      	str	r3, [r7, #28]
}
 8012c66:	bf00      	nop
 8012c68:	e7fe      	b.n	8012c68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c6a:	f002 f95d 	bl	8014f28 <vPortValidateInterruptPriority>
	__asm volatile
 8012c6e:	f3ef 8211 	mrs	r2, BASEPRI
 8012c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c76:	f383 8811 	msr	BASEPRI, r3
 8012c7a:	f3bf 8f6f 	isb	sy
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	61ba      	str	r2, [r7, #24]
 8012c84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012c86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d02f      	beq.n	8012cf6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012ca0:	68b9      	ldr	r1, [r7, #8]
 8012ca2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ca4:	f000 f8d9 	bl	8012e5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	1e5a      	subs	r2, r3, #1
 8012cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012cb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cb8:	d112      	bne.n	8012ce0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cbc:	691b      	ldr	r3, [r3, #16]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d016      	beq.n	8012cf0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc4:	3310      	adds	r3, #16
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f001 f834 	bl	8013d34 <xTaskRemoveFromEventList>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d00e      	beq.n	8012cf0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d00b      	beq.n	8012cf0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2201      	movs	r2, #1
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	e007      	b.n	8012cf0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	b25a      	sxtb	r2, r3
 8012cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8012cf4:	e001      	b.n	8012cfa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8012cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012cfe:	693b      	ldr	r3, [r7, #16]
 8012d00:	f383 8811 	msr	BASEPRI, r3
}
 8012d04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3738      	adds	r7, #56	; 0x38
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10a      	bne.n	8012d38 <vQueueDelete+0x28>
	__asm volatile
 8012d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d26:	f383 8811 	msr	BASEPRI, r3
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	60bb      	str	r3, [r7, #8]
}
 8012d34:	bf00      	nop
 8012d36:	e7fe      	b.n	8012d36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f000 f95f 	bl	8012ffc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d102      	bne.n	8012d4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f002 f9f9 	bl	8015140 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d4e:	bf00      	nop
 8012d50:	3710      	adds	r7, #16
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}

08012d56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d56:	b480      	push	{r7}
 8012d58:	b085      	sub	sp, #20
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d006      	beq.n	8012d74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012d70:	60fb      	str	r3, [r7, #12]
 8012d72:	e001      	b.n	8012d78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012d74:	2300      	movs	r3, #0
 8012d76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012d78:	68fb      	ldr	r3, [r7, #12]
	}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3714      	adds	r7, #20
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b086      	sub	sp, #24
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	60f8      	str	r0, [r7, #12]
 8012d8e:	60b9      	str	r1, [r7, #8]
 8012d90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012d92:	2300      	movs	r3, #0
 8012d94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d10d      	bne.n	8012dc0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d14d      	bne.n	8012e48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f001 fa03 	bl	80141bc <xTaskPriorityDisinherit>
 8012db6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	609a      	str	r2, [r3, #8]
 8012dbe:	e043      	b.n	8012e48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d119      	bne.n	8012dfa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6858      	ldr	r0, [r3, #4]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dce:	461a      	mov	r2, r3
 8012dd0:	68b9      	ldr	r1, [r7, #8]
 8012dd2:	f002 fafd 	bl	80153d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	685a      	ldr	r2, [r3, #4]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dde:	441a      	add	r2, r3
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	685a      	ldr	r2, [r3, #4]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	689b      	ldr	r3, [r3, #8]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d32b      	bcc.n	8012e48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	605a      	str	r2, [r3, #4]
 8012df8:	e026      	b.n	8012e48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	68d8      	ldr	r0, [r3, #12]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e02:	461a      	mov	r2, r3
 8012e04:	68b9      	ldr	r1, [r7, #8]
 8012e06:	f002 fae3 	bl	80153d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	68da      	ldr	r2, [r3, #12]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e12:	425b      	negs	r3, r3
 8012e14:	441a      	add	r2, r3
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	68da      	ldr	r2, [r3, #12]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d207      	bcs.n	8012e36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	689a      	ldr	r2, [r3, #8]
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e2e:	425b      	negs	r3, r3
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b02      	cmp	r3, #2
 8012e3a:	d105      	bne.n	8012e48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d002      	beq.n	8012e48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	3b01      	subs	r3, #1
 8012e46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	1c5a      	adds	r2, r3, #1
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e50:	697b      	ldr	r3, [r7, #20]
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3718      	adds	r7, #24
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b082      	sub	sp, #8
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
 8012e62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d018      	beq.n	8012e9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	68da      	ldr	r2, [r3, #12]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e74:	441a      	add	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	68da      	ldr	r2, [r3, #12]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	689b      	ldr	r3, [r3, #8]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d303      	bcc.n	8012e8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	68d9      	ldr	r1, [r3, #12]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e96:	461a      	mov	r2, r3
 8012e98:	6838      	ldr	r0, [r7, #0]
 8012e9a:	f002 fa99 	bl	80153d0 <memcpy>
	}
}
 8012e9e:	bf00      	nop
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b084      	sub	sp, #16
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012eae:	f001 ff59 	bl	8014d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012eba:	e011      	b.n	8012ee0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d012      	beq.n	8012eea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	3324      	adds	r3, #36	; 0x24
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f000 ff33 	bl	8013d34 <xTaskRemoveFromEventList>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d001      	beq.n	8012ed8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ed4:	f001 f80a 	bl	8013eec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ed8:	7bfb      	ldrb	r3, [r7, #15]
 8012eda:	3b01      	subs	r3, #1
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	dce9      	bgt.n	8012ebc <prvUnlockQueue+0x16>
 8012ee8:	e000      	b.n	8012eec <prvUnlockQueue+0x46>
					break;
 8012eea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	22ff      	movs	r2, #255	; 0xff
 8012ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ef4:	f001 ff66 	bl	8014dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012ef8:	f001 ff34 	bl	8014d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f02:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f04:	e011      	b.n	8012f2a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	691b      	ldr	r3, [r3, #16]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d012      	beq.n	8012f34 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	3310      	adds	r3, #16
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 ff0e 	bl	8013d34 <xTaskRemoveFromEventList>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d001      	beq.n	8012f22 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f1e:	f000 ffe5 	bl	8013eec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f22:	7bbb      	ldrb	r3, [r7, #14]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	dce9      	bgt.n	8012f06 <prvUnlockQueue+0x60>
 8012f32:	e000      	b.n	8012f36 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f34:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	22ff      	movs	r2, #255	; 0xff
 8012f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f3e:	f001 ff41 	bl	8014dc4 <vPortExitCritical>
}
 8012f42:	bf00      	nop
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b084      	sub	sp, #16
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f52:	f001 ff07 	bl	8014d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d102      	bne.n	8012f64 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	60fb      	str	r3, [r7, #12]
 8012f62:	e001      	b.n	8012f68 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f64:	2300      	movs	r3, #0
 8012f66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f68:	f001 ff2c 	bl	8014dc4 <vPortExitCritical>

	return xReturn;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f76:	b580      	push	{r7, lr}
 8012f78:	b084      	sub	sp, #16
 8012f7a:	af00      	add	r7, sp, #0
 8012f7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f7e:	f001 fef1 	bl	8014d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d102      	bne.n	8012f94 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012f8e:	2301      	movs	r3, #1
 8012f90:	60fb      	str	r3, [r7, #12]
 8012f92:	e001      	b.n	8012f98 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012f94:	2300      	movs	r3, #0
 8012f96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f98:	f001 ff14 	bl	8014dc4 <vPortExitCritical>

	return xReturn;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
	...

08012fa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012fa8:	b480      	push	{r7}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e014      	b.n	8012fe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fb8:	4a0f      	ldr	r2, [pc, #60]	; (8012ff8 <vQueueAddToRegistry+0x50>)
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d10b      	bne.n	8012fdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fc4:	490c      	ldr	r1, [pc, #48]	; (8012ff8 <vQueueAddToRegistry+0x50>)
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	683a      	ldr	r2, [r7, #0]
 8012fca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012fce:	4a0a      	ldr	r2, [pc, #40]	; (8012ff8 <vQueueAddToRegistry+0x50>)
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	00db      	lsls	r3, r3, #3
 8012fd4:	4413      	add	r3, r2
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012fda:	e006      	b.n	8012fea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	60fb      	str	r3, [r7, #12]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	2b07      	cmp	r3, #7
 8012fe6:	d9e7      	bls.n	8012fb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012fe8:	bf00      	nop
 8012fea:	bf00      	nop
 8012fec:	3714      	adds	r7, #20
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop
 8012ff8:	20008a3c 	.word	0x20008a3c

08012ffc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b085      	sub	sp, #20
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013004:	2300      	movs	r3, #0
 8013006:	60fb      	str	r3, [r7, #12]
 8013008:	e016      	b.n	8013038 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801300a:	4a10      	ldr	r2, [pc, #64]	; (801304c <vQueueUnregisterQueue+0x50>)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	00db      	lsls	r3, r3, #3
 8013010:	4413      	add	r3, r2
 8013012:	685b      	ldr	r3, [r3, #4]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	429a      	cmp	r2, r3
 8013018:	d10b      	bne.n	8013032 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801301a:	4a0c      	ldr	r2, [pc, #48]	; (801304c <vQueueUnregisterQueue+0x50>)
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2100      	movs	r1, #0
 8013020:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013024:	4a09      	ldr	r2, [pc, #36]	; (801304c <vQueueUnregisterQueue+0x50>)
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	4413      	add	r3, r2
 801302c:	2200      	movs	r2, #0
 801302e:	605a      	str	r2, [r3, #4]
				break;
 8013030:	e006      	b.n	8013040 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	3301      	adds	r3, #1
 8013036:	60fb      	str	r3, [r7, #12]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b07      	cmp	r3, #7
 801303c:	d9e5      	bls.n	801300a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801303e:	bf00      	nop
 8013040:	bf00      	nop
 8013042:	3714      	adds	r7, #20
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr
 801304c:	20008a3c 	.word	0x20008a3c

08013050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013050:	b580      	push	{r7, lr}
 8013052:	b086      	sub	sp, #24
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013060:	f001 fe80 	bl	8014d64 <vPortEnterCritical>
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801306a:	b25b      	sxtb	r3, r3
 801306c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013070:	d103      	bne.n	801307a <vQueueWaitForMessageRestricted+0x2a>
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	2200      	movs	r2, #0
 8013076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013080:	b25b      	sxtb	r3, r3
 8013082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013086:	d103      	bne.n	8013090 <vQueueWaitForMessageRestricted+0x40>
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	2200      	movs	r2, #0
 801308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013090:	f001 fe98 	bl	8014dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013094:	697b      	ldr	r3, [r7, #20]
 8013096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013098:	2b00      	cmp	r3, #0
 801309a:	d106      	bne.n	80130aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	3324      	adds	r3, #36	; 0x24
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	68b9      	ldr	r1, [r7, #8]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f000 fe19 	bl	8013cdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80130aa:	6978      	ldr	r0, [r7, #20]
 80130ac:	f7ff fefb 	bl	8012ea6 <prvUnlockQueue>
	}
 80130b0:	bf00      	nop
 80130b2:	3718      	adds	r7, #24
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}

080130b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b08e      	sub	sp, #56	; 0x38
 80130bc:	af04      	add	r7, sp, #16
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
 80130c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d10a      	bne.n	80130e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80130cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d0:	f383 8811 	msr	BASEPRI, r3
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	f3bf 8f4f 	dsb	sy
 80130dc:	623b      	str	r3, [r7, #32]
}
 80130de:	bf00      	nop
 80130e0:	e7fe      	b.n	80130e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80130e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d10a      	bne.n	80130fe <xTaskCreateStatic+0x46>
	__asm volatile
 80130e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ec:	f383 8811 	msr	BASEPRI, r3
 80130f0:	f3bf 8f6f 	isb	sy
 80130f4:	f3bf 8f4f 	dsb	sy
 80130f8:	61fb      	str	r3, [r7, #28]
}
 80130fa:	bf00      	nop
 80130fc:	e7fe      	b.n	80130fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80130fe:	235c      	movs	r3, #92	; 0x5c
 8013100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013102:	693b      	ldr	r3, [r7, #16]
 8013104:	2b5c      	cmp	r3, #92	; 0x5c
 8013106:	d00a      	beq.n	801311e <xTaskCreateStatic+0x66>
	__asm volatile
 8013108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801310c:	f383 8811 	msr	BASEPRI, r3
 8013110:	f3bf 8f6f 	isb	sy
 8013114:	f3bf 8f4f 	dsb	sy
 8013118:	61bb      	str	r3, [r7, #24]
}
 801311a:	bf00      	nop
 801311c:	e7fe      	b.n	801311c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801311e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013122:	2b00      	cmp	r3, #0
 8013124:	d01e      	beq.n	8013164 <xTaskCreateStatic+0xac>
 8013126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013128:	2b00      	cmp	r3, #0
 801312a:	d01b      	beq.n	8013164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	2202      	movs	r2, #2
 801313a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801313e:	2300      	movs	r3, #0
 8013140:	9303      	str	r3, [sp, #12]
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	9302      	str	r3, [sp, #8]
 8013146:	f107 0314 	add.w	r3, r7, #20
 801314a:	9301      	str	r3, [sp, #4]
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	9300      	str	r3, [sp, #0]
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	687a      	ldr	r2, [r7, #4]
 8013154:	68b9      	ldr	r1, [r7, #8]
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f000 f850 	bl	80131fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801315c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801315e:	f000 f8dd 	bl	801331c <prvAddNewTaskToReadyList>
 8013162:	e001      	b.n	8013168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013164:	2300      	movs	r3, #0
 8013166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013168:	697b      	ldr	r3, [r7, #20]
	}
 801316a:	4618      	mov	r0, r3
 801316c:	3728      	adds	r7, #40	; 0x28
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}

08013172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013172:	b580      	push	{r7, lr}
 8013174:	b08c      	sub	sp, #48	; 0x30
 8013176:	af04      	add	r7, sp, #16
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	60b9      	str	r1, [r7, #8]
 801317c:	603b      	str	r3, [r7, #0]
 801317e:	4613      	mov	r3, r2
 8013180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013182:	88fb      	ldrh	r3, [r7, #6]
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	4618      	mov	r0, r3
 8013188:	f001 ff0e 	bl	8014fa8 <pvPortMalloc>
 801318c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d00e      	beq.n	80131b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013194:	205c      	movs	r0, #92	; 0x5c
 8013196:	f001 ff07 	bl	8014fa8 <pvPortMalloc>
 801319a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d003      	beq.n	80131aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80131a2:	69fb      	ldr	r3, [r7, #28]
 80131a4:	697a      	ldr	r2, [r7, #20]
 80131a6:	631a      	str	r2, [r3, #48]	; 0x30
 80131a8:	e005      	b.n	80131b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80131aa:	6978      	ldr	r0, [r7, #20]
 80131ac:	f001 ffc8 	bl	8015140 <vPortFree>
 80131b0:	e001      	b.n	80131b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131b2:	2300      	movs	r3, #0
 80131b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131b6:	69fb      	ldr	r3, [r7, #28]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d017      	beq.n	80131ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	2200      	movs	r2, #0
 80131c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131c4:	88fa      	ldrh	r2, [r7, #6]
 80131c6:	2300      	movs	r3, #0
 80131c8:	9303      	str	r3, [sp, #12]
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	9302      	str	r3, [sp, #8]
 80131ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	68b9      	ldr	r1, [r7, #8]
 80131da:	68f8      	ldr	r0, [r7, #12]
 80131dc:	f000 f80e 	bl	80131fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131e0:	69f8      	ldr	r0, [r7, #28]
 80131e2:	f000 f89b 	bl	801331c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131e6:	2301      	movs	r3, #1
 80131e8:	61bb      	str	r3, [r7, #24]
 80131ea:	e002      	b.n	80131f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80131ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80131f2:	69bb      	ldr	r3, [r7, #24]
	}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3720      	adds	r7, #32
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b088      	sub	sp, #32
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
 8013208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	461a      	mov	r2, r3
 8013214:	21a5      	movs	r1, #165	; 0xa5
 8013216:	f002 f8e9 	bl	80153ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013224:	3b01      	subs	r3, #1
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	4413      	add	r3, r2
 801322a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801322c:	69bb      	ldr	r3, [r7, #24]
 801322e:	f023 0307 	bic.w	r3, r3, #7
 8013232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	f003 0307 	and.w	r3, r3, #7
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00a      	beq.n	8013254 <prvInitialiseNewTask+0x58>
	__asm volatile
 801323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013242:	f383 8811 	msr	BASEPRI, r3
 8013246:	f3bf 8f6f 	isb	sy
 801324a:	f3bf 8f4f 	dsb	sy
 801324e:	617b      	str	r3, [r7, #20]
}
 8013250:	bf00      	nop
 8013252:	e7fe      	b.n	8013252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d01f      	beq.n	801329a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801325a:	2300      	movs	r3, #0
 801325c:	61fb      	str	r3, [r7, #28]
 801325e:	e012      	b.n	8013286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013260:	68ba      	ldr	r2, [r7, #8]
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	4413      	add	r3, r2
 8013266:	7819      	ldrb	r1, [r3, #0]
 8013268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801326a:	69fb      	ldr	r3, [r7, #28]
 801326c:	4413      	add	r3, r2
 801326e:	3334      	adds	r3, #52	; 0x34
 8013270:	460a      	mov	r2, r1
 8013272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	4413      	add	r3, r2
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d006      	beq.n	801328e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013280:	69fb      	ldr	r3, [r7, #28]
 8013282:	3301      	adds	r3, #1
 8013284:	61fb      	str	r3, [r7, #28]
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	2b0f      	cmp	r3, #15
 801328a:	d9e9      	bls.n	8013260 <prvInitialiseNewTask+0x64>
 801328c:	e000      	b.n	8013290 <prvInitialiseNewTask+0x94>
			{
				break;
 801328e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013292:	2200      	movs	r2, #0
 8013294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013298:	e003      	b.n	80132a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329c:	2200      	movs	r2, #0
 801329e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80132a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a4:	2b37      	cmp	r3, #55	; 0x37
 80132a6:	d901      	bls.n	80132ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80132a8:	2337      	movs	r3, #55	; 0x37
 80132aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80132ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80132b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80132b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ba:	2200      	movs	r2, #0
 80132bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c0:	3304      	adds	r3, #4
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fe fe56 	bl	8011f74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ca:	3318      	adds	r3, #24
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fe fe51 	bl	8011f74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80132de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ea:	2200      	movs	r2, #0
 80132ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	2200      	movs	r2, #0
 80132f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80132f6:	683a      	ldr	r2, [r7, #0]
 80132f8:	68f9      	ldr	r1, [r7, #12]
 80132fa:	69b8      	ldr	r0, [r7, #24]
 80132fc:	f001 fc04 	bl	8014b08 <pxPortInitialiseStack>
 8013300:	4602      	mov	r2, r0
 8013302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013312:	bf00      	nop
 8013314:	3720      	adds	r7, #32
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013324:	f001 fd1e 	bl	8014d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013328:	4b2d      	ldr	r3, [pc, #180]	; (80133e0 <prvAddNewTaskToReadyList+0xc4>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	3301      	adds	r3, #1
 801332e:	4a2c      	ldr	r2, [pc, #176]	; (80133e0 <prvAddNewTaskToReadyList+0xc4>)
 8013330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013332:	4b2c      	ldr	r3, [pc, #176]	; (80133e4 <prvAddNewTaskToReadyList+0xc8>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d109      	bne.n	801334e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801333a:	4a2a      	ldr	r2, [pc, #168]	; (80133e4 <prvAddNewTaskToReadyList+0xc8>)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013340:	4b27      	ldr	r3, [pc, #156]	; (80133e0 <prvAddNewTaskToReadyList+0xc4>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d110      	bne.n	801336a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013348:	f000 fdf4 	bl	8013f34 <prvInitialiseTaskLists>
 801334c:	e00d      	b.n	801336a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801334e:	4b26      	ldr	r3, [pc, #152]	; (80133e8 <prvAddNewTaskToReadyList+0xcc>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d109      	bne.n	801336a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013356:	4b23      	ldr	r3, [pc, #140]	; (80133e4 <prvAddNewTaskToReadyList+0xc8>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013360:	429a      	cmp	r2, r3
 8013362:	d802      	bhi.n	801336a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013364:	4a1f      	ldr	r2, [pc, #124]	; (80133e4 <prvAddNewTaskToReadyList+0xc8>)
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801336a:	4b20      	ldr	r3, [pc, #128]	; (80133ec <prvAddNewTaskToReadyList+0xd0>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	3301      	adds	r3, #1
 8013370:	4a1e      	ldr	r2, [pc, #120]	; (80133ec <prvAddNewTaskToReadyList+0xd0>)
 8013372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013374:	4b1d      	ldr	r3, [pc, #116]	; (80133ec <prvAddNewTaskToReadyList+0xd0>)
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013380:	4b1b      	ldr	r3, [pc, #108]	; (80133f0 <prvAddNewTaskToReadyList+0xd4>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	429a      	cmp	r2, r3
 8013386:	d903      	bls.n	8013390 <prvAddNewTaskToReadyList+0x74>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801338c:	4a18      	ldr	r2, [pc, #96]	; (80133f0 <prvAddNewTaskToReadyList+0xd4>)
 801338e:	6013      	str	r3, [r2, #0]
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013394:	4613      	mov	r3, r2
 8013396:	009b      	lsls	r3, r3, #2
 8013398:	4413      	add	r3, r2
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	4a15      	ldr	r2, [pc, #84]	; (80133f4 <prvAddNewTaskToReadyList+0xd8>)
 801339e:	441a      	add	r2, r3
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	3304      	adds	r3, #4
 80133a4:	4619      	mov	r1, r3
 80133a6:	4610      	mov	r0, r2
 80133a8:	f7fe fdf1 	bl	8011f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133ac:	f001 fd0a 	bl	8014dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133b0:	4b0d      	ldr	r3, [pc, #52]	; (80133e8 <prvAddNewTaskToReadyList+0xcc>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d00e      	beq.n	80133d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133b8:	4b0a      	ldr	r3, [pc, #40]	; (80133e4 <prvAddNewTaskToReadyList+0xc8>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d207      	bcs.n	80133d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133c6:	4b0c      	ldr	r3, [pc, #48]	; (80133f8 <prvAddNewTaskToReadyList+0xdc>)
 80133c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133cc:	601a      	str	r2, [r3, #0]
 80133ce:	f3bf 8f4f 	dsb	sy
 80133d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133d6:	bf00      	nop
 80133d8:	3708      	adds	r7, #8
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	20002430 	.word	0x20002430
 80133e4:	20001f5c 	.word	0x20001f5c
 80133e8:	2000243c 	.word	0x2000243c
 80133ec:	2000244c 	.word	0x2000244c
 80133f0:	20002438 	.word	0x20002438
 80133f4:	20001f60 	.word	0x20001f60
 80133f8:	e000ed04 	.word	0xe000ed04

080133fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013404:	f001 fcae 	bl	8014d64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d102      	bne.n	8013414 <vTaskDelete+0x18>
 801340e:	4b2c      	ldr	r3, [pc, #176]	; (80134c0 <vTaskDelete+0xc4>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	e000      	b.n	8013416 <vTaskDelete+0x1a>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	3304      	adds	r3, #4
 801341c:	4618      	mov	r0, r3
 801341e:	f7fe fe13 	bl	8012048 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013426:	2b00      	cmp	r3, #0
 8013428:	d004      	beq.n	8013434 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	3318      	adds	r3, #24
 801342e:	4618      	mov	r0, r3
 8013430:	f7fe fe0a 	bl	8012048 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013434:	4b23      	ldr	r3, [pc, #140]	; (80134c4 <vTaskDelete+0xc8>)
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	3301      	adds	r3, #1
 801343a:	4a22      	ldr	r2, [pc, #136]	; (80134c4 <vTaskDelete+0xc8>)
 801343c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801343e:	4b20      	ldr	r3, [pc, #128]	; (80134c0 <vTaskDelete+0xc4>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	429a      	cmp	r2, r3
 8013446:	d10b      	bne.n	8013460 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	3304      	adds	r3, #4
 801344c:	4619      	mov	r1, r3
 801344e:	481e      	ldr	r0, [pc, #120]	; (80134c8 <vTaskDelete+0xcc>)
 8013450:	f7fe fd9d 	bl	8011f8e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013454:	4b1d      	ldr	r3, [pc, #116]	; (80134cc <vTaskDelete+0xd0>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	3301      	adds	r3, #1
 801345a:	4a1c      	ldr	r2, [pc, #112]	; (80134cc <vTaskDelete+0xd0>)
 801345c:	6013      	str	r3, [r2, #0]
 801345e:	e009      	b.n	8013474 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8013460:	4b1b      	ldr	r3, [pc, #108]	; (80134d0 <vTaskDelete+0xd4>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	3b01      	subs	r3, #1
 8013466:	4a1a      	ldr	r2, [pc, #104]	; (80134d0 <vTaskDelete+0xd4>)
 8013468:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801346a:	68f8      	ldr	r0, [r7, #12]
 801346c:	f000 fdd0 	bl	8014010 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013470:	f000 fdfe 	bl	8014070 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013474:	f001 fca6 	bl	8014dc4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013478:	4b16      	ldr	r3, [pc, #88]	; (80134d4 <vTaskDelete+0xd8>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d01b      	beq.n	80134b8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8013480:	4b0f      	ldr	r3, [pc, #60]	; (80134c0 <vTaskDelete+0xc4>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	68fa      	ldr	r2, [r7, #12]
 8013486:	429a      	cmp	r2, r3
 8013488:	d116      	bne.n	80134b8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801348a:	4b13      	ldr	r3, [pc, #76]	; (80134d8 <vTaskDelete+0xdc>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d00a      	beq.n	80134a8 <vTaskDelete+0xac>
	__asm volatile
 8013492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013496:	f383 8811 	msr	BASEPRI, r3
 801349a:	f3bf 8f6f 	isb	sy
 801349e:	f3bf 8f4f 	dsb	sy
 80134a2:	60bb      	str	r3, [r7, #8]
}
 80134a4:	bf00      	nop
 80134a6:	e7fe      	b.n	80134a6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80134a8:	4b0c      	ldr	r3, [pc, #48]	; (80134dc <vTaskDelete+0xe0>)
 80134aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134ae:	601a      	str	r2, [r3, #0]
 80134b0:	f3bf 8f4f 	dsb	sy
 80134b4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80134b8:	bf00      	nop
 80134ba:	3710      	adds	r7, #16
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	20001f5c 	.word	0x20001f5c
 80134c4:	2000244c 	.word	0x2000244c
 80134c8:	20002404 	.word	0x20002404
 80134cc:	20002418 	.word	0x20002418
 80134d0:	20002430 	.word	0x20002430
 80134d4:	2000243c 	.word	0x2000243c
 80134d8:	20002458 	.word	0x20002458
 80134dc:	e000ed04 	.word	0xe000ed04

080134e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80134e8:	2300      	movs	r3, #0
 80134ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d017      	beq.n	8013522 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80134f2:	4b13      	ldr	r3, [pc, #76]	; (8013540 <vTaskDelay+0x60>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d00a      	beq.n	8013510 <vTaskDelay+0x30>
	__asm volatile
 80134fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	60bb      	str	r3, [r7, #8]
}
 801350c:	bf00      	nop
 801350e:	e7fe      	b.n	801350e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013510:	f000 f9ec 	bl	80138ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013514:	2100      	movs	r1, #0
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 ff54 	bl	80143c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801351c:	f000 f9f4 	bl	8013908 <xTaskResumeAll>
 8013520:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d107      	bne.n	8013538 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013528:	4b06      	ldr	r3, [pc, #24]	; (8013544 <vTaskDelay+0x64>)
 801352a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801352e:	601a      	str	r2, [r3, #0]
 8013530:	f3bf 8f4f 	dsb	sy
 8013534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013538:	bf00      	nop
 801353a:	3710      	adds	r7, #16
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20002458 	.word	0x20002458
 8013544:	e000ed04 	.word	0xe000ed04

08013548 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013548:	b580      	push	{r7, lr}
 801354a:	b088      	sub	sp, #32
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10a      	bne.n	8013570 <eTaskGetState+0x28>
	__asm volatile
 801355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801355e:	f383 8811 	msr	BASEPRI, r3
 8013562:	f3bf 8f6f 	isb	sy
 8013566:	f3bf 8f4f 	dsb	sy
 801356a:	60bb      	str	r3, [r7, #8]
}
 801356c:	bf00      	nop
 801356e:	e7fe      	b.n	801356e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8013570:	4b23      	ldr	r3, [pc, #140]	; (8013600 <eTaskGetState+0xb8>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	69ba      	ldr	r2, [r7, #24]
 8013576:	429a      	cmp	r2, r3
 8013578:	d102      	bne.n	8013580 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801357a:	2300      	movs	r3, #0
 801357c:	77fb      	strb	r3, [r7, #31]
 801357e:	e03a      	b.n	80135f6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8013580:	f001 fbf0 	bl	8014d64 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801358a:	4b1e      	ldr	r3, [pc, #120]	; (8013604 <eTaskGetState+0xbc>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013590:	4b1d      	ldr	r3, [pc, #116]	; (8013608 <eTaskGetState+0xc0>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013596:	f001 fc15 	bl	8014dc4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d003      	beq.n	80135aa <eTaskGetState+0x62>
 80135a2:	697a      	ldr	r2, [r7, #20]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d102      	bne.n	80135b0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80135aa:	2302      	movs	r3, #2
 80135ac:	77fb      	strb	r3, [r7, #31]
 80135ae:	e022      	b.n	80135f6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	4a16      	ldr	r2, [pc, #88]	; (801360c <eTaskGetState+0xc4>)
 80135b4:	4293      	cmp	r3, r2
 80135b6:	d112      	bne.n	80135de <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d10b      	bne.n	80135d8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d102      	bne.n	80135d2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80135cc:	2302      	movs	r3, #2
 80135ce:	77fb      	strb	r3, [r7, #31]
 80135d0:	e011      	b.n	80135f6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80135d2:	2303      	movs	r3, #3
 80135d4:	77fb      	strb	r3, [r7, #31]
 80135d6:	e00e      	b.n	80135f6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80135d8:	2302      	movs	r3, #2
 80135da:	77fb      	strb	r3, [r7, #31]
 80135dc:	e00b      	b.n	80135f6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	4a0b      	ldr	r2, [pc, #44]	; (8013610 <eTaskGetState+0xc8>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d002      	beq.n	80135ec <eTaskGetState+0xa4>
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d102      	bne.n	80135f2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80135ec:	2304      	movs	r3, #4
 80135ee:	77fb      	strb	r3, [r7, #31]
 80135f0:	e001      	b.n	80135f6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80135f2:	2301      	movs	r3, #1
 80135f4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80135f6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80135f8:	4618      	mov	r0, r3
 80135fa:	3720      	adds	r7, #32
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	20001f5c 	.word	0x20001f5c
 8013604:	200023e8 	.word	0x200023e8
 8013608:	200023ec 	.word	0x200023ec
 801360c:	2000241c 	.word	0x2000241c
 8013610:	20002404 	.word	0x20002404

08013614 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801361c:	f001 fba2 	bl	8014d64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d102      	bne.n	801362c <vTaskSuspend+0x18>
 8013626:	4b30      	ldr	r3, [pc, #192]	; (80136e8 <vTaskSuspend+0xd4>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	e000      	b.n	801362e <vTaskSuspend+0x1a>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	3304      	adds	r3, #4
 8013634:	4618      	mov	r0, r3
 8013636:	f7fe fd07 	bl	8012048 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801363e:	2b00      	cmp	r3, #0
 8013640:	d004      	beq.n	801364c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	3318      	adds	r3, #24
 8013646:	4618      	mov	r0, r3
 8013648:	f7fe fcfe 	bl	8012048 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	3304      	adds	r3, #4
 8013650:	4619      	mov	r1, r3
 8013652:	4826      	ldr	r0, [pc, #152]	; (80136ec <vTaskSuspend+0xd8>)
 8013654:	f7fe fc9b 	bl	8011f8e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801365e:	b2db      	uxtb	r3, r3
 8013660:	2b01      	cmp	r3, #1
 8013662:	d103      	bne.n	801366c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2200      	movs	r2, #0
 8013668:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801366c:	f001 fbaa 	bl	8014dc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013670:	4b1f      	ldr	r3, [pc, #124]	; (80136f0 <vTaskSuspend+0xdc>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d005      	beq.n	8013684 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013678:	f001 fb74 	bl	8014d64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801367c:	f000 fcf8 	bl	8014070 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013680:	f001 fba0 	bl	8014dc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013684:	4b18      	ldr	r3, [pc, #96]	; (80136e8 <vTaskSuspend+0xd4>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	68fa      	ldr	r2, [r7, #12]
 801368a:	429a      	cmp	r2, r3
 801368c:	d127      	bne.n	80136de <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801368e:	4b18      	ldr	r3, [pc, #96]	; (80136f0 <vTaskSuspend+0xdc>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d017      	beq.n	80136c6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013696:	4b17      	ldr	r3, [pc, #92]	; (80136f4 <vTaskSuspend+0xe0>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d00a      	beq.n	80136b4 <vTaskSuspend+0xa0>
	__asm volatile
 801369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	60bb      	str	r3, [r7, #8]
}
 80136b0:	bf00      	nop
 80136b2:	e7fe      	b.n	80136b2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80136b4:	4b10      	ldr	r3, [pc, #64]	; (80136f8 <vTaskSuspend+0xe4>)
 80136b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136ba:	601a      	str	r2, [r3, #0]
 80136bc:	f3bf 8f4f 	dsb	sy
 80136c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80136c4:	e00b      	b.n	80136de <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80136c6:	4b09      	ldr	r3, [pc, #36]	; (80136ec <vTaskSuspend+0xd8>)
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	4b0c      	ldr	r3, [pc, #48]	; (80136fc <vTaskSuspend+0xe8>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	429a      	cmp	r2, r3
 80136d0:	d103      	bne.n	80136da <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80136d2:	4b05      	ldr	r3, [pc, #20]	; (80136e8 <vTaskSuspend+0xd4>)
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
	}
 80136d8:	e001      	b.n	80136de <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80136da:	f000 fa7d 	bl	8013bd8 <vTaskSwitchContext>
	}
 80136de:	bf00      	nop
 80136e0:	3710      	adds	r7, #16
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	20001f5c 	.word	0x20001f5c
 80136ec:	2000241c 	.word	0x2000241c
 80136f0:	2000243c 	.word	0x2000243c
 80136f4:	20002458 	.word	0x20002458
 80136f8:	e000ed04 	.word	0xe000ed04
 80136fc:	20002430 	.word	0x20002430

08013700 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013700:	b480      	push	{r7}
 8013702:	b087      	sub	sp, #28
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013708:	2300      	movs	r3, #0
 801370a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d10a      	bne.n	801372c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371a:	f383 8811 	msr	BASEPRI, r3
 801371e:	f3bf 8f6f 	isb	sy
 8013722:	f3bf 8f4f 	dsb	sy
 8013726:	60fb      	str	r3, [r7, #12]
}
 8013728:	bf00      	nop
 801372a:	e7fe      	b.n	801372a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	695b      	ldr	r3, [r3, #20]
 8013730:	4a0a      	ldr	r2, [pc, #40]	; (801375c <prvTaskIsTaskSuspended+0x5c>)
 8013732:	4293      	cmp	r3, r2
 8013734:	d10a      	bne.n	801374c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801373a:	4a09      	ldr	r2, [pc, #36]	; (8013760 <prvTaskIsTaskSuspended+0x60>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d005      	beq.n	801374c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013744:	2b00      	cmp	r3, #0
 8013746:	d101      	bne.n	801374c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013748:	2301      	movs	r3, #1
 801374a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801374c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801374e:	4618      	mov	r0, r3
 8013750:	371c      	adds	r7, #28
 8013752:	46bd      	mov	sp, r7
 8013754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	2000241c 	.word	0x2000241c
 8013760:	200023f0 	.word	0x200023f0

08013764 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d10a      	bne.n	801378c <vTaskResume+0x28>
	__asm volatile
 8013776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377a:	f383 8811 	msr	BASEPRI, r3
 801377e:	f3bf 8f6f 	isb	sy
 8013782:	f3bf 8f4f 	dsb	sy
 8013786:	60bb      	str	r3, [r7, #8]
}
 8013788:	bf00      	nop
 801378a:	e7fe      	b.n	801378a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801378c:	4b20      	ldr	r3, [pc, #128]	; (8013810 <vTaskResume+0xac>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	68fa      	ldr	r2, [r7, #12]
 8013792:	429a      	cmp	r2, r3
 8013794:	d038      	beq.n	8013808 <vTaskResume+0xa4>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d035      	beq.n	8013808 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801379c:	f001 fae2 	bl	8014d64 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f7ff ffad 	bl	8013700 <prvTaskIsTaskSuspended>
 80137a6:	4603      	mov	r3, r0
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d02b      	beq.n	8013804 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3304      	adds	r3, #4
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fc49 	bl	8012048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ba:	4b16      	ldr	r3, [pc, #88]	; (8013814 <vTaskResume+0xb0>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d903      	bls.n	80137ca <vTaskResume+0x66>
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137c6:	4a13      	ldr	r2, [pc, #76]	; (8013814 <vTaskResume+0xb0>)
 80137c8:	6013      	str	r3, [r2, #0]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ce:	4613      	mov	r3, r2
 80137d0:	009b      	lsls	r3, r3, #2
 80137d2:	4413      	add	r3, r2
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	4a10      	ldr	r2, [pc, #64]	; (8013818 <vTaskResume+0xb4>)
 80137d8:	441a      	add	r2, r3
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	3304      	adds	r3, #4
 80137de:	4619      	mov	r1, r3
 80137e0:	4610      	mov	r0, r2
 80137e2:	f7fe fbd4 	bl	8011f8e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ea:	4b09      	ldr	r3, [pc, #36]	; (8013810 <vTaskResume+0xac>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d307      	bcc.n	8013804 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80137f4:	4b09      	ldr	r3, [pc, #36]	; (801381c <vTaskResume+0xb8>)
 80137f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137fa:	601a      	str	r2, [r3, #0]
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8013804:	f001 fade 	bl	8014dc4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013808:	bf00      	nop
 801380a:	3710      	adds	r7, #16
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}
 8013810:	20001f5c 	.word	0x20001f5c
 8013814:	20002438 	.word	0x20002438
 8013818:	20001f60 	.word	0x20001f60
 801381c:	e000ed04 	.word	0xe000ed04

08013820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b08a      	sub	sp, #40	; 0x28
 8013824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013826:	2300      	movs	r3, #0
 8013828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801382a:	2300      	movs	r3, #0
 801382c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801382e:	463a      	mov	r2, r7
 8013830:	1d39      	adds	r1, r7, #4
 8013832:	f107 0308 	add.w	r3, r7, #8
 8013836:	4618      	mov	r0, r3
 8013838:	f7fe fb48 	bl	8011ecc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801383c:	6839      	ldr	r1, [r7, #0]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	68ba      	ldr	r2, [r7, #8]
 8013842:	9202      	str	r2, [sp, #8]
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	2300      	movs	r3, #0
 8013848:	9300      	str	r3, [sp, #0]
 801384a:	2300      	movs	r3, #0
 801384c:	460a      	mov	r2, r1
 801384e:	4921      	ldr	r1, [pc, #132]	; (80138d4 <vTaskStartScheduler+0xb4>)
 8013850:	4821      	ldr	r0, [pc, #132]	; (80138d8 <vTaskStartScheduler+0xb8>)
 8013852:	f7ff fc31 	bl	80130b8 <xTaskCreateStatic>
 8013856:	4603      	mov	r3, r0
 8013858:	4a20      	ldr	r2, [pc, #128]	; (80138dc <vTaskStartScheduler+0xbc>)
 801385a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801385c:	4b1f      	ldr	r3, [pc, #124]	; (80138dc <vTaskStartScheduler+0xbc>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d002      	beq.n	801386a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013864:	2301      	movs	r3, #1
 8013866:	617b      	str	r3, [r7, #20]
 8013868:	e001      	b.n	801386e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801386a:	2300      	movs	r3, #0
 801386c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	2b01      	cmp	r3, #1
 8013872:	d102      	bne.n	801387a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013874:	f000 fdfa 	bl	801446c <xTimerCreateTimerTask>
 8013878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801387a:	697b      	ldr	r3, [r7, #20]
 801387c:	2b01      	cmp	r3, #1
 801387e:	d116      	bne.n	80138ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8013880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013884:	f383 8811 	msr	BASEPRI, r3
 8013888:	f3bf 8f6f 	isb	sy
 801388c:	f3bf 8f4f 	dsb	sy
 8013890:	613b      	str	r3, [r7, #16]
}
 8013892:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013894:	4b12      	ldr	r3, [pc, #72]	; (80138e0 <vTaskStartScheduler+0xc0>)
 8013896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801389a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801389c:	4b11      	ldr	r3, [pc, #68]	; (80138e4 <vTaskStartScheduler+0xc4>)
 801389e:	2201      	movs	r2, #1
 80138a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80138a2:	4b11      	ldr	r3, [pc, #68]	; (80138e8 <vTaskStartScheduler+0xc8>)
 80138a4:	2200      	movs	r2, #0
 80138a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80138a8:	f001 f9ba 	bl	8014c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80138ac:	e00e      	b.n	80138cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b4:	d10a      	bne.n	80138cc <vTaskStartScheduler+0xac>
	__asm volatile
 80138b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ba:	f383 8811 	msr	BASEPRI, r3
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	f3bf 8f4f 	dsb	sy
 80138c6:	60fb      	str	r3, [r7, #12]
}
 80138c8:	bf00      	nop
 80138ca:	e7fe      	b.n	80138ca <vTaskStartScheduler+0xaa>
}
 80138cc:	bf00      	nop
 80138ce:	3718      	adds	r7, #24
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	0801a25c 	.word	0x0801a25c
 80138d8:	08013f05 	.word	0x08013f05
 80138dc:	20002454 	.word	0x20002454
 80138e0:	20002450 	.word	0x20002450
 80138e4:	2000243c 	.word	0x2000243c
 80138e8:	20002434 	.word	0x20002434

080138ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80138ec:	b480      	push	{r7}
 80138ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80138f0:	4b04      	ldr	r3, [pc, #16]	; (8013904 <vTaskSuspendAll+0x18>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	3301      	adds	r3, #1
 80138f6:	4a03      	ldr	r2, [pc, #12]	; (8013904 <vTaskSuspendAll+0x18>)
 80138f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80138fa:	bf00      	nop
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr
 8013904:	20002458 	.word	0x20002458

08013908 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013908:	b580      	push	{r7, lr}
 801390a:	b084      	sub	sp, #16
 801390c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801390e:	2300      	movs	r3, #0
 8013910:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013912:	2300      	movs	r3, #0
 8013914:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013916:	4b42      	ldr	r3, [pc, #264]	; (8013a20 <xTaskResumeAll+0x118>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d10a      	bne.n	8013934 <xTaskResumeAll+0x2c>
	__asm volatile
 801391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013922:	f383 8811 	msr	BASEPRI, r3
 8013926:	f3bf 8f6f 	isb	sy
 801392a:	f3bf 8f4f 	dsb	sy
 801392e:	603b      	str	r3, [r7, #0]
}
 8013930:	bf00      	nop
 8013932:	e7fe      	b.n	8013932 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013934:	f001 fa16 	bl	8014d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013938:	4b39      	ldr	r3, [pc, #228]	; (8013a20 <xTaskResumeAll+0x118>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	3b01      	subs	r3, #1
 801393e:	4a38      	ldr	r2, [pc, #224]	; (8013a20 <xTaskResumeAll+0x118>)
 8013940:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013942:	4b37      	ldr	r3, [pc, #220]	; (8013a20 <xTaskResumeAll+0x118>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d162      	bne.n	8013a10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801394a:	4b36      	ldr	r3, [pc, #216]	; (8013a24 <xTaskResumeAll+0x11c>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d05e      	beq.n	8013a10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013952:	e02f      	b.n	80139b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013954:	4b34      	ldr	r3, [pc, #208]	; (8013a28 <xTaskResumeAll+0x120>)
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	68db      	ldr	r3, [r3, #12]
 801395a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	3318      	adds	r3, #24
 8013960:	4618      	mov	r0, r3
 8013962:	f7fe fb71 	bl	8012048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	3304      	adds	r3, #4
 801396a:	4618      	mov	r0, r3
 801396c:	f7fe fb6c 	bl	8012048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013974:	4b2d      	ldr	r3, [pc, #180]	; (8013a2c <xTaskResumeAll+0x124>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	429a      	cmp	r2, r3
 801397a:	d903      	bls.n	8013984 <xTaskResumeAll+0x7c>
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013980:	4a2a      	ldr	r2, [pc, #168]	; (8013a2c <xTaskResumeAll+0x124>)
 8013982:	6013      	str	r3, [r2, #0]
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013988:	4613      	mov	r3, r2
 801398a:	009b      	lsls	r3, r3, #2
 801398c:	4413      	add	r3, r2
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4a27      	ldr	r2, [pc, #156]	; (8013a30 <xTaskResumeAll+0x128>)
 8013992:	441a      	add	r2, r3
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3304      	adds	r3, #4
 8013998:	4619      	mov	r1, r3
 801399a:	4610      	mov	r0, r2
 801399c:	f7fe faf7 	bl	8011f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139a4:	4b23      	ldr	r3, [pc, #140]	; (8013a34 <xTaskResumeAll+0x12c>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139aa:	429a      	cmp	r2, r3
 80139ac:	d302      	bcc.n	80139b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80139ae:	4b22      	ldr	r3, [pc, #136]	; (8013a38 <xTaskResumeAll+0x130>)
 80139b0:	2201      	movs	r2, #1
 80139b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80139b4:	4b1c      	ldr	r3, [pc, #112]	; (8013a28 <xTaskResumeAll+0x120>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1cb      	bne.n	8013954 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d001      	beq.n	80139c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80139c2:	f000 fb55 	bl	8014070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80139c6:	4b1d      	ldr	r3, [pc, #116]	; (8013a3c <xTaskResumeAll+0x134>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d010      	beq.n	80139f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80139d2:	f000 f847 	bl	8013a64 <xTaskIncrementTick>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d002      	beq.n	80139e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80139dc:	4b16      	ldr	r3, [pc, #88]	; (8013a38 <xTaskResumeAll+0x130>)
 80139de:	2201      	movs	r2, #1
 80139e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	3b01      	subs	r3, #1
 80139e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d1f1      	bne.n	80139d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80139ee:	4b13      	ldr	r3, [pc, #76]	; (8013a3c <xTaskResumeAll+0x134>)
 80139f0:	2200      	movs	r2, #0
 80139f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80139f4:	4b10      	ldr	r3, [pc, #64]	; (8013a38 <xTaskResumeAll+0x130>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d009      	beq.n	8013a10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80139fc:	2301      	movs	r3, #1
 80139fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013a00:	4b0f      	ldr	r3, [pc, #60]	; (8013a40 <xTaskResumeAll+0x138>)
 8013a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a06:	601a      	str	r2, [r3, #0]
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013a10:	f001 f9d8 	bl	8014dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8013a14:	68bb      	ldr	r3, [r7, #8]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3710      	adds	r7, #16
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	20002458 	.word	0x20002458
 8013a24:	20002430 	.word	0x20002430
 8013a28:	200023f0 	.word	0x200023f0
 8013a2c:	20002438 	.word	0x20002438
 8013a30:	20001f60 	.word	0x20001f60
 8013a34:	20001f5c 	.word	0x20001f5c
 8013a38:	20002444 	.word	0x20002444
 8013a3c:	20002440 	.word	0x20002440
 8013a40:	e000ed04 	.word	0xe000ed04

08013a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013a44:	b480      	push	{r7}
 8013a46:	b083      	sub	sp, #12
 8013a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013a4a:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <xTaskGetTickCount+0x1c>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013a50:	687b      	ldr	r3, [r7, #4]
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr
 8013a5e:	bf00      	nop
 8013a60:	20002434 	.word	0x20002434

08013a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b086      	sub	sp, #24
 8013a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a6e:	4b4f      	ldr	r3, [pc, #316]	; (8013bac <xTaskIncrementTick+0x148>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f040 808f 	bne.w	8013b96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013a78:	4b4d      	ldr	r3, [pc, #308]	; (8013bb0 <xTaskIncrementTick+0x14c>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	3301      	adds	r3, #1
 8013a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013a80:	4a4b      	ldr	r2, [pc, #300]	; (8013bb0 <xTaskIncrementTick+0x14c>)
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013a86:	693b      	ldr	r3, [r7, #16]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d120      	bne.n	8013ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013a8c:	4b49      	ldr	r3, [pc, #292]	; (8013bb4 <xTaskIncrementTick+0x150>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00a      	beq.n	8013aac <xTaskIncrementTick+0x48>
	__asm volatile
 8013a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a9a:	f383 8811 	msr	BASEPRI, r3
 8013a9e:	f3bf 8f6f 	isb	sy
 8013aa2:	f3bf 8f4f 	dsb	sy
 8013aa6:	603b      	str	r3, [r7, #0]
}
 8013aa8:	bf00      	nop
 8013aaa:	e7fe      	b.n	8013aaa <xTaskIncrementTick+0x46>
 8013aac:	4b41      	ldr	r3, [pc, #260]	; (8013bb4 <xTaskIncrementTick+0x150>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	60fb      	str	r3, [r7, #12]
 8013ab2:	4b41      	ldr	r3, [pc, #260]	; (8013bb8 <xTaskIncrementTick+0x154>)
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	4a3f      	ldr	r2, [pc, #252]	; (8013bb4 <xTaskIncrementTick+0x150>)
 8013ab8:	6013      	str	r3, [r2, #0]
 8013aba:	4a3f      	ldr	r2, [pc, #252]	; (8013bb8 <xTaskIncrementTick+0x154>)
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6013      	str	r3, [r2, #0]
 8013ac0:	4b3e      	ldr	r3, [pc, #248]	; (8013bbc <xTaskIncrementTick+0x158>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	4a3d      	ldr	r2, [pc, #244]	; (8013bbc <xTaskIncrementTick+0x158>)
 8013ac8:	6013      	str	r3, [r2, #0]
 8013aca:	f000 fad1 	bl	8014070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ace:	4b3c      	ldr	r3, [pc, #240]	; (8013bc0 <xTaskIncrementTick+0x15c>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	693a      	ldr	r2, [r7, #16]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d349      	bcc.n	8013b6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ad8:	4b36      	ldr	r3, [pc, #216]	; (8013bb4 <xTaskIncrementTick+0x150>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d104      	bne.n	8013aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ae2:	4b37      	ldr	r3, [pc, #220]	; (8013bc0 <xTaskIncrementTick+0x15c>)
 8013ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ae8:	601a      	str	r2, [r3, #0]
					break;
 8013aea:	e03f      	b.n	8013b6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013aec:	4b31      	ldr	r3, [pc, #196]	; (8013bb4 <xTaskIncrementTick+0x150>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	68db      	ldr	r3, [r3, #12]
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013afc:	693a      	ldr	r2, [r7, #16]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d203      	bcs.n	8013b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013b04:	4a2e      	ldr	r2, [pc, #184]	; (8013bc0 <xTaskIncrementTick+0x15c>)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013b0a:	e02f      	b.n	8013b6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	3304      	adds	r3, #4
 8013b10:	4618      	mov	r0, r3
 8013b12:	f7fe fa99 	bl	8012048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d004      	beq.n	8013b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	3318      	adds	r3, #24
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fe fa90 	bl	8012048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b2c:	4b25      	ldr	r3, [pc, #148]	; (8013bc4 <xTaskIncrementTick+0x160>)
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d903      	bls.n	8013b3c <xTaskIncrementTick+0xd8>
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b38:	4a22      	ldr	r2, [pc, #136]	; (8013bc4 <xTaskIncrementTick+0x160>)
 8013b3a:	6013      	str	r3, [r2, #0]
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b40:	4613      	mov	r3, r2
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	4413      	add	r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4a1f      	ldr	r2, [pc, #124]	; (8013bc8 <xTaskIncrementTick+0x164>)
 8013b4a:	441a      	add	r2, r3
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	4619      	mov	r1, r3
 8013b52:	4610      	mov	r0, r2
 8013b54:	f7fe fa1b 	bl	8011f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b5c:	4b1b      	ldr	r3, [pc, #108]	; (8013bcc <xTaskIncrementTick+0x168>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d3b8      	bcc.n	8013ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013b66:	2301      	movs	r3, #1
 8013b68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013b6a:	e7b5      	b.n	8013ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013b6c:	4b17      	ldr	r3, [pc, #92]	; (8013bcc <xTaskIncrementTick+0x168>)
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b72:	4915      	ldr	r1, [pc, #84]	; (8013bc8 <xTaskIncrementTick+0x164>)
 8013b74:	4613      	mov	r3, r2
 8013b76:	009b      	lsls	r3, r3, #2
 8013b78:	4413      	add	r3, r2
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	440b      	add	r3, r1
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d901      	bls.n	8013b88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013b84:	2301      	movs	r3, #1
 8013b86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013b88:	4b11      	ldr	r3, [pc, #68]	; (8013bd0 <xTaskIncrementTick+0x16c>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d007      	beq.n	8013ba0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013b90:	2301      	movs	r3, #1
 8013b92:	617b      	str	r3, [r7, #20]
 8013b94:	e004      	b.n	8013ba0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013b96:	4b0f      	ldr	r3, [pc, #60]	; (8013bd4 <xTaskIncrementTick+0x170>)
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	3301      	adds	r3, #1
 8013b9c:	4a0d      	ldr	r2, [pc, #52]	; (8013bd4 <xTaskIncrementTick+0x170>)
 8013b9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013ba0:	697b      	ldr	r3, [r7, #20]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3718      	adds	r7, #24
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	20002458 	.word	0x20002458
 8013bb0:	20002434 	.word	0x20002434
 8013bb4:	200023e8 	.word	0x200023e8
 8013bb8:	200023ec 	.word	0x200023ec
 8013bbc:	20002448 	.word	0x20002448
 8013bc0:	20002450 	.word	0x20002450
 8013bc4:	20002438 	.word	0x20002438
 8013bc8:	20001f60 	.word	0x20001f60
 8013bcc:	20001f5c 	.word	0x20001f5c
 8013bd0:	20002444 	.word	0x20002444
 8013bd4:	20002440 	.word	0x20002440

08013bd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b085      	sub	sp, #20
 8013bdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013bde:	4b28      	ldr	r3, [pc, #160]	; (8013c80 <vTaskSwitchContext+0xa8>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d003      	beq.n	8013bee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013be6:	4b27      	ldr	r3, [pc, #156]	; (8013c84 <vTaskSwitchContext+0xac>)
 8013be8:	2201      	movs	r2, #1
 8013bea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013bec:	e041      	b.n	8013c72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013bee:	4b25      	ldr	r3, [pc, #148]	; (8013c84 <vTaskSwitchContext+0xac>)
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bf4:	4b24      	ldr	r3, [pc, #144]	; (8013c88 <vTaskSwitchContext+0xb0>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	60fb      	str	r3, [r7, #12]
 8013bfa:	e010      	b.n	8013c1e <vTaskSwitchContext+0x46>
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d10a      	bne.n	8013c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8013c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c06:	f383 8811 	msr	BASEPRI, r3
 8013c0a:	f3bf 8f6f 	isb	sy
 8013c0e:	f3bf 8f4f 	dsb	sy
 8013c12:	607b      	str	r3, [r7, #4]
}
 8013c14:	bf00      	nop
 8013c16:	e7fe      	b.n	8013c16 <vTaskSwitchContext+0x3e>
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	3b01      	subs	r3, #1
 8013c1c:	60fb      	str	r3, [r7, #12]
 8013c1e:	491b      	ldr	r1, [pc, #108]	; (8013c8c <vTaskSwitchContext+0xb4>)
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	4613      	mov	r3, r2
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	4413      	add	r3, r2
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	440b      	add	r3, r1
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d0e4      	beq.n	8013bfc <vTaskSwitchContext+0x24>
 8013c32:	68fa      	ldr	r2, [r7, #12]
 8013c34:	4613      	mov	r3, r2
 8013c36:	009b      	lsls	r3, r3, #2
 8013c38:	4413      	add	r3, r2
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	4a13      	ldr	r2, [pc, #76]	; (8013c8c <vTaskSwitchContext+0xb4>)
 8013c3e:	4413      	add	r3, r2
 8013c40:	60bb      	str	r3, [r7, #8]
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	605a      	str	r2, [r3, #4]
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	685a      	ldr	r2, [r3, #4]
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	3308      	adds	r3, #8
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d104      	bne.n	8013c62 <vTaskSwitchContext+0x8a>
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	685a      	ldr	r2, [r3, #4]
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	605a      	str	r2, [r3, #4]
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	4a09      	ldr	r2, [pc, #36]	; (8013c90 <vTaskSwitchContext+0xb8>)
 8013c6a:	6013      	str	r3, [r2, #0]
 8013c6c:	4a06      	ldr	r2, [pc, #24]	; (8013c88 <vTaskSwitchContext+0xb0>)
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	6013      	str	r3, [r2, #0]
}
 8013c72:	bf00      	nop
 8013c74:	3714      	adds	r7, #20
 8013c76:	46bd      	mov	sp, r7
 8013c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop
 8013c80:	20002458 	.word	0x20002458
 8013c84:	20002444 	.word	0x20002444
 8013c88:	20002438 	.word	0x20002438
 8013c8c:	20001f60 	.word	0x20001f60
 8013c90:	20001f5c 	.word	0x20001f5c

08013c94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b084      	sub	sp, #16
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10a      	bne.n	8013cba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca8:	f383 8811 	msr	BASEPRI, r3
 8013cac:	f3bf 8f6f 	isb	sy
 8013cb0:	f3bf 8f4f 	dsb	sy
 8013cb4:	60fb      	str	r3, [r7, #12]
}
 8013cb6:	bf00      	nop
 8013cb8:	e7fe      	b.n	8013cb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013cba:	4b07      	ldr	r3, [pc, #28]	; (8013cd8 <vTaskPlaceOnEventList+0x44>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	3318      	adds	r3, #24
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7fe f987 	bl	8011fd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013cc8:	2101      	movs	r1, #1
 8013cca:	6838      	ldr	r0, [r7, #0]
 8013ccc:	f000 fb7a 	bl	80143c4 <prvAddCurrentTaskToDelayedList>
}
 8013cd0:	bf00      	nop
 8013cd2:	3710      	adds	r7, #16
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20001f5c 	.word	0x20001f5c

08013cdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b086      	sub	sp, #24
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d10a      	bne.n	8013d04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf2:	f383 8811 	msr	BASEPRI, r3
 8013cf6:	f3bf 8f6f 	isb	sy
 8013cfa:	f3bf 8f4f 	dsb	sy
 8013cfe:	617b      	str	r3, [r7, #20]
}
 8013d00:	bf00      	nop
 8013d02:	e7fe      	b.n	8013d02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013d04:	4b0a      	ldr	r3, [pc, #40]	; (8013d30 <vTaskPlaceOnEventListRestricted+0x54>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	3318      	adds	r3, #24
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	68f8      	ldr	r0, [r7, #12]
 8013d0e:	f7fe f93e 	bl	8011f8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d002      	beq.n	8013d1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	68b8      	ldr	r0, [r7, #8]
 8013d22:	f000 fb4f 	bl	80143c4 <prvAddCurrentTaskToDelayedList>
	}
 8013d26:	bf00      	nop
 8013d28:	3718      	adds	r7, #24
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	20001f5c 	.word	0x20001f5c

08013d34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	68db      	ldr	r3, [r3, #12]
 8013d42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d10a      	bne.n	8013d60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4e:	f383 8811 	msr	BASEPRI, r3
 8013d52:	f3bf 8f6f 	isb	sy
 8013d56:	f3bf 8f4f 	dsb	sy
 8013d5a:	60fb      	str	r3, [r7, #12]
}
 8013d5c:	bf00      	nop
 8013d5e:	e7fe      	b.n	8013d5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	3318      	adds	r3, #24
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fe f96f 	bl	8012048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d6a:	4b1e      	ldr	r3, [pc, #120]	; (8013de4 <xTaskRemoveFromEventList+0xb0>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d11d      	bne.n	8013dae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	3304      	adds	r3, #4
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7fe f966 	bl	8012048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d80:	4b19      	ldr	r3, [pc, #100]	; (8013de8 <xTaskRemoveFromEventList+0xb4>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d903      	bls.n	8013d90 <xTaskRemoveFromEventList+0x5c>
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d8c:	4a16      	ldr	r2, [pc, #88]	; (8013de8 <xTaskRemoveFromEventList+0xb4>)
 8013d8e:	6013      	str	r3, [r2, #0]
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d94:	4613      	mov	r3, r2
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	4413      	add	r3, r2
 8013d9a:	009b      	lsls	r3, r3, #2
 8013d9c:	4a13      	ldr	r2, [pc, #76]	; (8013dec <xTaskRemoveFromEventList+0xb8>)
 8013d9e:	441a      	add	r2, r3
 8013da0:	693b      	ldr	r3, [r7, #16]
 8013da2:	3304      	adds	r3, #4
 8013da4:	4619      	mov	r1, r3
 8013da6:	4610      	mov	r0, r2
 8013da8:	f7fe f8f1 	bl	8011f8e <vListInsertEnd>
 8013dac:	e005      	b.n	8013dba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	3318      	adds	r3, #24
 8013db2:	4619      	mov	r1, r3
 8013db4:	480e      	ldr	r0, [pc, #56]	; (8013df0 <xTaskRemoveFromEventList+0xbc>)
 8013db6:	f7fe f8ea 	bl	8011f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dbe:	4b0d      	ldr	r3, [pc, #52]	; (8013df4 <xTaskRemoveFromEventList+0xc0>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d905      	bls.n	8013dd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013dcc:	4b0a      	ldr	r3, [pc, #40]	; (8013df8 <xTaskRemoveFromEventList+0xc4>)
 8013dce:	2201      	movs	r2, #1
 8013dd0:	601a      	str	r2, [r3, #0]
 8013dd2:	e001      	b.n	8013dd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013dd8:	697b      	ldr	r3, [r7, #20]
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3718      	adds	r7, #24
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}
 8013de2:	bf00      	nop
 8013de4:	20002458 	.word	0x20002458
 8013de8:	20002438 	.word	0x20002438
 8013dec:	20001f60 	.word	0x20001f60
 8013df0:	200023f0 	.word	0x200023f0
 8013df4:	20001f5c 	.word	0x20001f5c
 8013df8:	20002444 	.word	0x20002444

08013dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013e04:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <vTaskInternalSetTimeOutState+0x24>)
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013e0c:	4b05      	ldr	r3, [pc, #20]	; (8013e24 <vTaskInternalSetTimeOutState+0x28>)
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	605a      	str	r2, [r3, #4]
}
 8013e14:	bf00      	nop
 8013e16:	370c      	adds	r7, #12
 8013e18:	46bd      	mov	sp, r7
 8013e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1e:	4770      	bx	lr
 8013e20:	20002448 	.word	0x20002448
 8013e24:	20002434 	.word	0x20002434

08013e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b088      	sub	sp, #32
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
 8013e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d10a      	bne.n	8013e4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e3c:	f383 8811 	msr	BASEPRI, r3
 8013e40:	f3bf 8f6f 	isb	sy
 8013e44:	f3bf 8f4f 	dsb	sy
 8013e48:	613b      	str	r3, [r7, #16]
}
 8013e4a:	bf00      	nop
 8013e4c:	e7fe      	b.n	8013e4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10a      	bne.n	8013e6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e58:	f383 8811 	msr	BASEPRI, r3
 8013e5c:	f3bf 8f6f 	isb	sy
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	60fb      	str	r3, [r7, #12]
}
 8013e66:	bf00      	nop
 8013e68:	e7fe      	b.n	8013e68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013e6a:	f000 ff7b 	bl	8014d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013e6e:	4b1d      	ldr	r3, [pc, #116]	; (8013ee4 <xTaskCheckForTimeOut+0xbc>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	69ba      	ldr	r2, [r7, #24]
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e86:	d102      	bne.n	8013e8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	61fb      	str	r3, [r7, #28]
 8013e8c:	e023      	b.n	8013ed6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	4b15      	ldr	r3, [pc, #84]	; (8013ee8 <xTaskCheckForTimeOut+0xc0>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d007      	beq.n	8013eaa <xTaskCheckForTimeOut+0x82>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	69ba      	ldr	r2, [r7, #24]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d302      	bcc.n	8013eaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	61fb      	str	r3, [r7, #28]
 8013ea8:	e015      	b.n	8013ed6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013eaa:	683b      	ldr	r3, [r7, #0]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	697a      	ldr	r2, [r7, #20]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d20b      	bcs.n	8013ecc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	697b      	ldr	r3, [r7, #20]
 8013eba:	1ad2      	subs	r2, r2, r3
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f7ff ff9b 	bl	8013dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	61fb      	str	r3, [r7, #28]
 8013eca:	e004      	b.n	8013ed6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ed6:	f000 ff75 	bl	8014dc4 <vPortExitCritical>

	return xReturn;
 8013eda:	69fb      	ldr	r3, [r7, #28]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3720      	adds	r7, #32
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	20002434 	.word	0x20002434
 8013ee8:	20002448 	.word	0x20002448

08013eec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013ef0:	4b03      	ldr	r3, [pc, #12]	; (8013f00 <vTaskMissedYield+0x14>)
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	601a      	str	r2, [r3, #0]
}
 8013ef6:	bf00      	nop
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr
 8013f00:	20002444 	.word	0x20002444

08013f04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013f0c:	f000 f852 	bl	8013fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013f10:	4b06      	ldr	r3, [pc, #24]	; (8013f2c <prvIdleTask+0x28>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d9f9      	bls.n	8013f0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013f18:	4b05      	ldr	r3, [pc, #20]	; (8013f30 <prvIdleTask+0x2c>)
 8013f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f1e:	601a      	str	r2, [r3, #0]
 8013f20:	f3bf 8f4f 	dsb	sy
 8013f24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013f28:	e7f0      	b.n	8013f0c <prvIdleTask+0x8>
 8013f2a:	bf00      	nop
 8013f2c:	20001f60 	.word	0x20001f60
 8013f30:	e000ed04 	.word	0xe000ed04

08013f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b082      	sub	sp, #8
 8013f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	607b      	str	r3, [r7, #4]
 8013f3e:	e00c      	b.n	8013f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	4613      	mov	r3, r2
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	4413      	add	r3, r2
 8013f48:	009b      	lsls	r3, r3, #2
 8013f4a:	4a12      	ldr	r2, [pc, #72]	; (8013f94 <prvInitialiseTaskLists+0x60>)
 8013f4c:	4413      	add	r3, r2
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7fd fff0 	bl	8011f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	3301      	adds	r3, #1
 8013f58:	607b      	str	r3, [r7, #4]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2b37      	cmp	r3, #55	; 0x37
 8013f5e:	d9ef      	bls.n	8013f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013f60:	480d      	ldr	r0, [pc, #52]	; (8013f98 <prvInitialiseTaskLists+0x64>)
 8013f62:	f7fd ffe7 	bl	8011f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013f66:	480d      	ldr	r0, [pc, #52]	; (8013f9c <prvInitialiseTaskLists+0x68>)
 8013f68:	f7fd ffe4 	bl	8011f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013f6c:	480c      	ldr	r0, [pc, #48]	; (8013fa0 <prvInitialiseTaskLists+0x6c>)
 8013f6e:	f7fd ffe1 	bl	8011f34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013f72:	480c      	ldr	r0, [pc, #48]	; (8013fa4 <prvInitialiseTaskLists+0x70>)
 8013f74:	f7fd ffde 	bl	8011f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013f78:	480b      	ldr	r0, [pc, #44]	; (8013fa8 <prvInitialiseTaskLists+0x74>)
 8013f7a:	f7fd ffdb 	bl	8011f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013f7e:	4b0b      	ldr	r3, [pc, #44]	; (8013fac <prvInitialiseTaskLists+0x78>)
 8013f80:	4a05      	ldr	r2, [pc, #20]	; (8013f98 <prvInitialiseTaskLists+0x64>)
 8013f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013f84:	4b0a      	ldr	r3, [pc, #40]	; (8013fb0 <prvInitialiseTaskLists+0x7c>)
 8013f86:	4a05      	ldr	r2, [pc, #20]	; (8013f9c <prvInitialiseTaskLists+0x68>)
 8013f88:	601a      	str	r2, [r3, #0]
}
 8013f8a:	bf00      	nop
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}
 8013f92:	bf00      	nop
 8013f94:	20001f60 	.word	0x20001f60
 8013f98:	200023c0 	.word	0x200023c0
 8013f9c:	200023d4 	.word	0x200023d4
 8013fa0:	200023f0 	.word	0x200023f0
 8013fa4:	20002404 	.word	0x20002404
 8013fa8:	2000241c 	.word	0x2000241c
 8013fac:	200023e8 	.word	0x200023e8
 8013fb0:	200023ec 	.word	0x200023ec

08013fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013fba:	e019      	b.n	8013ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013fbc:	f000 fed2 	bl	8014d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fc0:	4b10      	ldr	r3, [pc, #64]	; (8014004 <prvCheckTasksWaitingTermination+0x50>)
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	3304      	adds	r3, #4
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7fe f83b 	bl	8012048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013fd2:	4b0d      	ldr	r3, [pc, #52]	; (8014008 <prvCheckTasksWaitingTermination+0x54>)
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	3b01      	subs	r3, #1
 8013fd8:	4a0b      	ldr	r2, [pc, #44]	; (8014008 <prvCheckTasksWaitingTermination+0x54>)
 8013fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013fdc:	4b0b      	ldr	r3, [pc, #44]	; (801400c <prvCheckTasksWaitingTermination+0x58>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	3b01      	subs	r3, #1
 8013fe2:	4a0a      	ldr	r2, [pc, #40]	; (801400c <prvCheckTasksWaitingTermination+0x58>)
 8013fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013fe6:	f000 feed 	bl	8014dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f000 f810 	bl	8014010 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013ff0:	4b06      	ldr	r3, [pc, #24]	; (801400c <prvCheckTasksWaitingTermination+0x58>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d1e1      	bne.n	8013fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013ff8:	bf00      	nop
 8013ffa:	bf00      	nop
 8013ffc:	3708      	adds	r7, #8
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bd80      	pop	{r7, pc}
 8014002:	bf00      	nop
 8014004:	20002404 	.word	0x20002404
 8014008:	20002430 	.word	0x20002430
 801400c:	20002418 	.word	0x20002418

08014010 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014010:	b580      	push	{r7, lr}
 8014012:	b084      	sub	sp, #16
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801401e:	2b00      	cmp	r3, #0
 8014020:	d108      	bne.n	8014034 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014026:	4618      	mov	r0, r3
 8014028:	f001 f88a 	bl	8015140 <vPortFree>
				vPortFree( pxTCB );
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f001 f887 	bl	8015140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014032:	e018      	b.n	8014066 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801403a:	2b01      	cmp	r3, #1
 801403c:	d103      	bne.n	8014046 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f001 f87e 	bl	8015140 <vPortFree>
	}
 8014044:	e00f      	b.n	8014066 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801404c:	2b02      	cmp	r3, #2
 801404e:	d00a      	beq.n	8014066 <prvDeleteTCB+0x56>
	__asm volatile
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	f383 8811 	msr	BASEPRI, r3
 8014058:	f3bf 8f6f 	isb	sy
 801405c:	f3bf 8f4f 	dsb	sy
 8014060:	60fb      	str	r3, [r7, #12]
}
 8014062:	bf00      	nop
 8014064:	e7fe      	b.n	8014064 <prvDeleteTCB+0x54>
	}
 8014066:	bf00      	nop
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
	...

08014070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014070:	b480      	push	{r7}
 8014072:	b083      	sub	sp, #12
 8014074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014076:	4b0c      	ldr	r3, [pc, #48]	; (80140a8 <prvResetNextTaskUnblockTime+0x38>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d104      	bne.n	801408a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <prvResetNextTaskUnblockTime+0x3c>)
 8014082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014088:	e008      	b.n	801409c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801408a:	4b07      	ldr	r3, [pc, #28]	; (80140a8 <prvResetNextTaskUnblockTime+0x38>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	68db      	ldr	r3, [r3, #12]
 8014092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	4a04      	ldr	r2, [pc, #16]	; (80140ac <prvResetNextTaskUnblockTime+0x3c>)
 801409a:	6013      	str	r3, [r2, #0]
}
 801409c:	bf00      	nop
 801409e:	370c      	adds	r7, #12
 80140a0:	46bd      	mov	sp, r7
 80140a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a6:	4770      	bx	lr
 80140a8:	200023e8 	.word	0x200023e8
 80140ac:	20002450 	.word	0x20002450

080140b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80140b0:	b480      	push	{r7}
 80140b2:	b083      	sub	sp, #12
 80140b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80140b6:	4b0b      	ldr	r3, [pc, #44]	; (80140e4 <xTaskGetSchedulerState+0x34>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d102      	bne.n	80140c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80140be:	2301      	movs	r3, #1
 80140c0:	607b      	str	r3, [r7, #4]
 80140c2:	e008      	b.n	80140d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80140c4:	4b08      	ldr	r3, [pc, #32]	; (80140e8 <xTaskGetSchedulerState+0x38>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d102      	bne.n	80140d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80140cc:	2302      	movs	r3, #2
 80140ce:	607b      	str	r3, [r7, #4]
 80140d0:	e001      	b.n	80140d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80140d2:	2300      	movs	r3, #0
 80140d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80140d6:	687b      	ldr	r3, [r7, #4]
	}
 80140d8:	4618      	mov	r0, r3
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr
 80140e4:	2000243c 	.word	0x2000243c
 80140e8:	20002458 	.word	0x20002458

080140ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80140ec:	b580      	push	{r7, lr}
 80140ee:	b084      	sub	sp, #16
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80140f8:	2300      	movs	r3, #0
 80140fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d051      	beq.n	80141a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014106:	4b2a      	ldr	r3, [pc, #168]	; (80141b0 <xTaskPriorityInherit+0xc4>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801410c:	429a      	cmp	r2, r3
 801410e:	d241      	bcs.n	8014194 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	699b      	ldr	r3, [r3, #24]
 8014114:	2b00      	cmp	r3, #0
 8014116:	db06      	blt.n	8014126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014118:	4b25      	ldr	r3, [pc, #148]	; (80141b0 <xTaskPriorityInherit+0xc4>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801411e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	6959      	ldr	r1, [r3, #20]
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801412e:	4613      	mov	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4413      	add	r3, r2
 8014134:	009b      	lsls	r3, r3, #2
 8014136:	4a1f      	ldr	r2, [pc, #124]	; (80141b4 <xTaskPriorityInherit+0xc8>)
 8014138:	4413      	add	r3, r2
 801413a:	4299      	cmp	r1, r3
 801413c:	d122      	bne.n	8014184 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	3304      	adds	r3, #4
 8014142:	4618      	mov	r0, r3
 8014144:	f7fd ff80 	bl	8012048 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014148:	4b19      	ldr	r3, [pc, #100]	; (80141b0 <xTaskPriorityInherit+0xc4>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014156:	4b18      	ldr	r3, [pc, #96]	; (80141b8 <xTaskPriorityInherit+0xcc>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	429a      	cmp	r2, r3
 801415c:	d903      	bls.n	8014166 <xTaskPriorityInherit+0x7a>
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014162:	4a15      	ldr	r2, [pc, #84]	; (80141b8 <xTaskPriorityInherit+0xcc>)
 8014164:	6013      	str	r3, [r2, #0]
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801416a:	4613      	mov	r3, r2
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	4413      	add	r3, r2
 8014170:	009b      	lsls	r3, r3, #2
 8014172:	4a10      	ldr	r2, [pc, #64]	; (80141b4 <xTaskPriorityInherit+0xc8>)
 8014174:	441a      	add	r2, r3
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	3304      	adds	r3, #4
 801417a:	4619      	mov	r1, r3
 801417c:	4610      	mov	r0, r2
 801417e:	f7fd ff06 	bl	8011f8e <vListInsertEnd>
 8014182:	e004      	b.n	801418e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014184:	4b0a      	ldr	r3, [pc, #40]	; (80141b0 <xTaskPriorityInherit+0xc4>)
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801418e:	2301      	movs	r3, #1
 8014190:	60fb      	str	r3, [r7, #12]
 8014192:	e008      	b.n	80141a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014198:	4b05      	ldr	r3, [pc, #20]	; (80141b0 <xTaskPriorityInherit+0xc4>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801419e:	429a      	cmp	r2, r3
 80141a0:	d201      	bcs.n	80141a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80141a2:	2301      	movs	r3, #1
 80141a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141a6:	68fb      	ldr	r3, [r7, #12]
	}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3710      	adds	r7, #16
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20001f5c 	.word	0x20001f5c
 80141b4:	20001f60 	.word	0x20001f60
 80141b8:	20002438 	.word	0x20002438

080141bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b086      	sub	sp, #24
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80141c8:	2300      	movs	r3, #0
 80141ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d056      	beq.n	8014280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80141d2:	4b2e      	ldr	r3, [pc, #184]	; (801428c <xTaskPriorityDisinherit+0xd0>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	693a      	ldr	r2, [r7, #16]
 80141d8:	429a      	cmp	r2, r3
 80141da:	d00a      	beq.n	80141f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80141dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e0:	f383 8811 	msr	BASEPRI, r3
 80141e4:	f3bf 8f6f 	isb	sy
 80141e8:	f3bf 8f4f 	dsb	sy
 80141ec:	60fb      	str	r3, [r7, #12]
}
 80141ee:	bf00      	nop
 80141f0:	e7fe      	b.n	80141f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10a      	bne.n	8014210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80141fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	60bb      	str	r3, [r7, #8]
}
 801420c:	bf00      	nop
 801420e:	e7fe      	b.n	801420e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014214:	1e5a      	subs	r2, r3, #1
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014222:	429a      	cmp	r2, r3
 8014224:	d02c      	beq.n	8014280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801422a:	2b00      	cmp	r3, #0
 801422c:	d128      	bne.n	8014280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	3304      	adds	r3, #4
 8014232:	4618      	mov	r0, r3
 8014234:	f7fd ff08 	bl	8012048 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014248:	693b      	ldr	r3, [r7, #16]
 801424a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014250:	4b0f      	ldr	r3, [pc, #60]	; (8014290 <xTaskPriorityDisinherit+0xd4>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	429a      	cmp	r2, r3
 8014256:	d903      	bls.n	8014260 <xTaskPriorityDisinherit+0xa4>
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801425c:	4a0c      	ldr	r2, [pc, #48]	; (8014290 <xTaskPriorityDisinherit+0xd4>)
 801425e:	6013      	str	r3, [r2, #0]
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014264:	4613      	mov	r3, r2
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	4413      	add	r3, r2
 801426a:	009b      	lsls	r3, r3, #2
 801426c:	4a09      	ldr	r2, [pc, #36]	; (8014294 <xTaskPriorityDisinherit+0xd8>)
 801426e:	441a      	add	r2, r3
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	3304      	adds	r3, #4
 8014274:	4619      	mov	r1, r3
 8014276:	4610      	mov	r0, r2
 8014278:	f7fd fe89 	bl	8011f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801427c:	2301      	movs	r3, #1
 801427e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014280:	697b      	ldr	r3, [r7, #20]
	}
 8014282:	4618      	mov	r0, r3
 8014284:	3718      	adds	r7, #24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	20001f5c 	.word	0x20001f5c
 8014290:	20002438 	.word	0x20002438
 8014294:	20001f60 	.word	0x20001f60

08014298 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014298:	b580      	push	{r7, lr}
 801429a:	b088      	sub	sp, #32
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80142a6:	2301      	movs	r3, #1
 80142a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d06a      	beq.n	8014386 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d10a      	bne.n	80142ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80142b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142bc:	f383 8811 	msr	BASEPRI, r3
 80142c0:	f3bf 8f6f 	isb	sy
 80142c4:	f3bf 8f4f 	dsb	sy
 80142c8:	60fb      	str	r3, [r7, #12]
}
 80142ca:	bf00      	nop
 80142cc:	e7fe      	b.n	80142cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142d2:	683a      	ldr	r2, [r7, #0]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d902      	bls.n	80142de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	61fb      	str	r3, [r7, #28]
 80142dc:	e002      	b.n	80142e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80142de:	69bb      	ldr	r3, [r7, #24]
 80142e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80142e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142e8:	69fa      	ldr	r2, [r7, #28]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d04b      	beq.n	8014386 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80142f2:	697a      	ldr	r2, [r7, #20]
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d146      	bne.n	8014386 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80142f8:	4b25      	ldr	r3, [pc, #148]	; (8014390 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	69ba      	ldr	r2, [r7, #24]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d10a      	bne.n	8014318 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8014302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014306:	f383 8811 	msr	BASEPRI, r3
 801430a:	f3bf 8f6f 	isb	sy
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	60bb      	str	r3, [r7, #8]
}
 8014314:	bf00      	nop
 8014316:	e7fe      	b.n	8014316 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014318:	69bb      	ldr	r3, [r7, #24]
 801431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801431c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	69fa      	ldr	r2, [r7, #28]
 8014322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014324:	69bb      	ldr	r3, [r7, #24]
 8014326:	699b      	ldr	r3, [r3, #24]
 8014328:	2b00      	cmp	r3, #0
 801432a:	db04      	blt.n	8014336 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014332:	69bb      	ldr	r3, [r7, #24]
 8014334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014336:	69bb      	ldr	r3, [r7, #24]
 8014338:	6959      	ldr	r1, [r3, #20]
 801433a:	693a      	ldr	r2, [r7, #16]
 801433c:	4613      	mov	r3, r2
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	4413      	add	r3, r2
 8014342:	009b      	lsls	r3, r3, #2
 8014344:	4a13      	ldr	r2, [pc, #76]	; (8014394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014346:	4413      	add	r3, r2
 8014348:	4299      	cmp	r1, r3
 801434a:	d11c      	bne.n	8014386 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	3304      	adds	r3, #4
 8014350:	4618      	mov	r0, r3
 8014352:	f7fd fe79 	bl	8012048 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801435a:	4b0f      	ldr	r3, [pc, #60]	; (8014398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d903      	bls.n	801436a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014366:	4a0c      	ldr	r2, [pc, #48]	; (8014398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014368:	6013      	str	r3, [r2, #0]
 801436a:	69bb      	ldr	r3, [r7, #24]
 801436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436e:	4613      	mov	r3, r2
 8014370:	009b      	lsls	r3, r3, #2
 8014372:	4413      	add	r3, r2
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	4a07      	ldr	r2, [pc, #28]	; (8014394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8014378:	441a      	add	r2, r3
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	3304      	adds	r3, #4
 801437e:	4619      	mov	r1, r3
 8014380:	4610      	mov	r0, r2
 8014382:	f7fd fe04 	bl	8011f8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014386:	bf00      	nop
 8014388:	3720      	adds	r7, #32
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	20001f5c 	.word	0x20001f5c
 8014394:	20001f60 	.word	0x20001f60
 8014398:	20002438 	.word	0x20002438

0801439c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801439c:	b480      	push	{r7}
 801439e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80143a0:	4b07      	ldr	r3, [pc, #28]	; (80143c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d004      	beq.n	80143b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80143a8:	4b05      	ldr	r3, [pc, #20]	; (80143c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143ae:	3201      	adds	r2, #1
 80143b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80143b2:	4b03      	ldr	r3, [pc, #12]	; (80143c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80143b4:	681b      	ldr	r3, [r3, #0]
	}
 80143b6:	4618      	mov	r0, r3
 80143b8:	46bd      	mov	sp, r7
 80143ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143be:	4770      	bx	lr
 80143c0:	20001f5c 	.word	0x20001f5c

080143c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
 80143cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80143ce:	4b21      	ldr	r3, [pc, #132]	; (8014454 <prvAddCurrentTaskToDelayedList+0x90>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80143d4:	4b20      	ldr	r3, [pc, #128]	; (8014458 <prvAddCurrentTaskToDelayedList+0x94>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	3304      	adds	r3, #4
 80143da:	4618      	mov	r0, r3
 80143dc:	f7fd fe34 	bl	8012048 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143e6:	d10a      	bne.n	80143fe <prvAddCurrentTaskToDelayedList+0x3a>
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d007      	beq.n	80143fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80143ee:	4b1a      	ldr	r3, [pc, #104]	; (8014458 <prvAddCurrentTaskToDelayedList+0x94>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	3304      	adds	r3, #4
 80143f4:	4619      	mov	r1, r3
 80143f6:	4819      	ldr	r0, [pc, #100]	; (801445c <prvAddCurrentTaskToDelayedList+0x98>)
 80143f8:	f7fd fdc9 	bl	8011f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80143fc:	e026      	b.n	801444c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80143fe:	68fa      	ldr	r2, [r7, #12]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	4413      	add	r3, r2
 8014404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014406:	4b14      	ldr	r3, [pc, #80]	; (8014458 <prvAddCurrentTaskToDelayedList+0x94>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	68ba      	ldr	r2, [r7, #8]
 801440c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801440e:	68ba      	ldr	r2, [r7, #8]
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	429a      	cmp	r2, r3
 8014414:	d209      	bcs.n	801442a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014416:	4b12      	ldr	r3, [pc, #72]	; (8014460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014418:	681a      	ldr	r2, [r3, #0]
 801441a:	4b0f      	ldr	r3, [pc, #60]	; (8014458 <prvAddCurrentTaskToDelayedList+0x94>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	3304      	adds	r3, #4
 8014420:	4619      	mov	r1, r3
 8014422:	4610      	mov	r0, r2
 8014424:	f7fd fdd7 	bl	8011fd6 <vListInsert>
}
 8014428:	e010      	b.n	801444c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801442a:	4b0e      	ldr	r3, [pc, #56]	; (8014464 <prvAddCurrentTaskToDelayedList+0xa0>)
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <prvAddCurrentTaskToDelayedList+0x94>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	3304      	adds	r3, #4
 8014434:	4619      	mov	r1, r3
 8014436:	4610      	mov	r0, r2
 8014438:	f7fd fdcd 	bl	8011fd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801443c:	4b0a      	ldr	r3, [pc, #40]	; (8014468 <prvAddCurrentTaskToDelayedList+0xa4>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	68ba      	ldr	r2, [r7, #8]
 8014442:	429a      	cmp	r2, r3
 8014444:	d202      	bcs.n	801444c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014446:	4a08      	ldr	r2, [pc, #32]	; (8014468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	6013      	str	r3, [r2, #0]
}
 801444c:	bf00      	nop
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}
 8014454:	20002434 	.word	0x20002434
 8014458:	20001f5c 	.word	0x20001f5c
 801445c:	2000241c 	.word	0x2000241c
 8014460:	200023ec 	.word	0x200023ec
 8014464:	200023e8 	.word	0x200023e8
 8014468:	20002450 	.word	0x20002450

0801446c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b08a      	sub	sp, #40	; 0x28
 8014470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014472:	2300      	movs	r3, #0
 8014474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014476:	f000 fb07 	bl	8014a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801447a:	4b1c      	ldr	r3, [pc, #112]	; (80144ec <xTimerCreateTimerTask+0x80>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d021      	beq.n	80144c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014482:	2300      	movs	r3, #0
 8014484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014486:	2300      	movs	r3, #0
 8014488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801448a:	1d3a      	adds	r2, r7, #4
 801448c:	f107 0108 	add.w	r1, r7, #8
 8014490:	f107 030c 	add.w	r3, r7, #12
 8014494:	4618      	mov	r0, r3
 8014496:	f7fd fd33 	bl	8011f00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801449a:	6879      	ldr	r1, [r7, #4]
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	9202      	str	r2, [sp, #8]
 80144a2:	9301      	str	r3, [sp, #4]
 80144a4:	2302      	movs	r3, #2
 80144a6:	9300      	str	r3, [sp, #0]
 80144a8:	2300      	movs	r3, #0
 80144aa:	460a      	mov	r2, r1
 80144ac:	4910      	ldr	r1, [pc, #64]	; (80144f0 <xTimerCreateTimerTask+0x84>)
 80144ae:	4811      	ldr	r0, [pc, #68]	; (80144f4 <xTimerCreateTimerTask+0x88>)
 80144b0:	f7fe fe02 	bl	80130b8 <xTaskCreateStatic>
 80144b4:	4603      	mov	r3, r0
 80144b6:	4a10      	ldr	r2, [pc, #64]	; (80144f8 <xTimerCreateTimerTask+0x8c>)
 80144b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80144ba:	4b0f      	ldr	r3, [pc, #60]	; (80144f8 <xTimerCreateTimerTask+0x8c>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d001      	beq.n	80144c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80144c2:	2301      	movs	r3, #1
 80144c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d10a      	bne.n	80144e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80144cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d0:	f383 8811 	msr	BASEPRI, r3
 80144d4:	f3bf 8f6f 	isb	sy
 80144d8:	f3bf 8f4f 	dsb	sy
 80144dc:	613b      	str	r3, [r7, #16]
}
 80144de:	bf00      	nop
 80144e0:	e7fe      	b.n	80144e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80144e2:	697b      	ldr	r3, [r7, #20]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3718      	adds	r7, #24
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	2000248c 	.word	0x2000248c
 80144f0:	0801a264 	.word	0x0801a264
 80144f4:	08014631 	.word	0x08014631
 80144f8:	20002490 	.word	0x20002490

080144fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b08a      	sub	sp, #40	; 0x28
 8014500:	af00      	add	r7, sp, #0
 8014502:	60f8      	str	r0, [r7, #12]
 8014504:	60b9      	str	r1, [r7, #8]
 8014506:	607a      	str	r2, [r7, #4]
 8014508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801450a:	2300      	movs	r3, #0
 801450c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d10a      	bne.n	801452a <xTimerGenericCommand+0x2e>
	__asm volatile
 8014514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014518:	f383 8811 	msr	BASEPRI, r3
 801451c:	f3bf 8f6f 	isb	sy
 8014520:	f3bf 8f4f 	dsb	sy
 8014524:	623b      	str	r3, [r7, #32]
}
 8014526:	bf00      	nop
 8014528:	e7fe      	b.n	8014528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801452a:	4b1a      	ldr	r3, [pc, #104]	; (8014594 <xTimerGenericCommand+0x98>)
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d02a      	beq.n	8014588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2b05      	cmp	r3, #5
 8014542:	dc18      	bgt.n	8014576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014544:	f7ff fdb4 	bl	80140b0 <xTaskGetSchedulerState>
 8014548:	4603      	mov	r3, r0
 801454a:	2b02      	cmp	r3, #2
 801454c:	d109      	bne.n	8014562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801454e:	4b11      	ldr	r3, [pc, #68]	; (8014594 <xTimerGenericCommand+0x98>)
 8014550:	6818      	ldr	r0, [r3, #0]
 8014552:	f107 0110 	add.w	r1, r7, #16
 8014556:	2300      	movs	r3, #0
 8014558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801455a:	f7fd ff47 	bl	80123ec <xQueueGenericSend>
 801455e:	6278      	str	r0, [r7, #36]	; 0x24
 8014560:	e012      	b.n	8014588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014562:	4b0c      	ldr	r3, [pc, #48]	; (8014594 <xTimerGenericCommand+0x98>)
 8014564:	6818      	ldr	r0, [r3, #0]
 8014566:	f107 0110 	add.w	r1, r7, #16
 801456a:	2300      	movs	r3, #0
 801456c:	2200      	movs	r2, #0
 801456e:	f7fd ff3d 	bl	80123ec <xQueueGenericSend>
 8014572:	6278      	str	r0, [r7, #36]	; 0x24
 8014574:	e008      	b.n	8014588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014576:	4b07      	ldr	r3, [pc, #28]	; (8014594 <xTimerGenericCommand+0x98>)
 8014578:	6818      	ldr	r0, [r3, #0]
 801457a:	f107 0110 	add.w	r1, r7, #16
 801457e:	2300      	movs	r3, #0
 8014580:	683a      	ldr	r2, [r7, #0]
 8014582:	f7fe f831 	bl	80125e8 <xQueueGenericSendFromISR>
 8014586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801458a:	4618      	mov	r0, r3
 801458c:	3728      	adds	r7, #40	; 0x28
 801458e:	46bd      	mov	sp, r7
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	2000248c 	.word	0x2000248c

08014598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b088      	sub	sp, #32
 801459c:	af02      	add	r7, sp, #8
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145a2:	4b22      	ldr	r3, [pc, #136]	; (801462c <prvProcessExpiredTimer+0x94>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80145ac:	697b      	ldr	r3, [r7, #20]
 80145ae:	3304      	adds	r3, #4
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7fd fd49 	bl	8012048 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145bc:	f003 0304 	and.w	r3, r3, #4
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d022      	beq.n	801460a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	699a      	ldr	r2, [r3, #24]
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	18d1      	adds	r1, r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	683a      	ldr	r2, [r7, #0]
 80145d0:	6978      	ldr	r0, [r7, #20]
 80145d2:	f000 f8d1 	bl	8014778 <prvInsertTimerInActiveList>
 80145d6:	4603      	mov	r3, r0
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d01f      	beq.n	801461c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80145dc:	2300      	movs	r3, #0
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	2300      	movs	r3, #0
 80145e2:	687a      	ldr	r2, [r7, #4]
 80145e4:	2100      	movs	r1, #0
 80145e6:	6978      	ldr	r0, [r7, #20]
 80145e8:	f7ff ff88 	bl	80144fc <xTimerGenericCommand>
 80145ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80145ee:	693b      	ldr	r3, [r7, #16]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d113      	bne.n	801461c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80145f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f8:	f383 8811 	msr	BASEPRI, r3
 80145fc:	f3bf 8f6f 	isb	sy
 8014600:	f3bf 8f4f 	dsb	sy
 8014604:	60fb      	str	r3, [r7, #12]
}
 8014606:	bf00      	nop
 8014608:	e7fe      	b.n	8014608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014610:	f023 0301 	bic.w	r3, r3, #1
 8014614:	b2da      	uxtb	r2, r3
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	6a1b      	ldr	r3, [r3, #32]
 8014620:	6978      	ldr	r0, [r7, #20]
 8014622:	4798      	blx	r3
}
 8014624:	bf00      	nop
 8014626:	3718      	adds	r7, #24
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}
 801462c:	20002484 	.word	0x20002484

08014630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014638:	f107 0308 	add.w	r3, r7, #8
 801463c:	4618      	mov	r0, r3
 801463e:	f000 f857 	bl	80146f0 <prvGetNextExpireTime>
 8014642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	4619      	mov	r1, r3
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f000 f803 	bl	8014654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801464e:	f000 f8d5 	bl	80147fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014652:	e7f1      	b.n	8014638 <prvTimerTask+0x8>

08014654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b084      	sub	sp, #16
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801465e:	f7ff f945 	bl	80138ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014662:	f107 0308 	add.w	r3, r7, #8
 8014666:	4618      	mov	r0, r3
 8014668:	f000 f866 	bl	8014738 <prvSampleTimeNow>
 801466c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d130      	bne.n	80146d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d10a      	bne.n	8014690 <prvProcessTimerOrBlockTask+0x3c>
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	429a      	cmp	r2, r3
 8014680:	d806      	bhi.n	8014690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014682:	f7ff f941 	bl	8013908 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014686:	68f9      	ldr	r1, [r7, #12]
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7ff ff85 	bl	8014598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801468e:	e024      	b.n	80146da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014690:	683b      	ldr	r3, [r7, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d008      	beq.n	80146a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014696:	4b13      	ldr	r3, [pc, #76]	; (80146e4 <prvProcessTimerOrBlockTask+0x90>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <prvProcessTimerOrBlockTask+0x50>
 80146a0:	2301      	movs	r3, #1
 80146a2:	e000      	b.n	80146a6 <prvProcessTimerOrBlockTask+0x52>
 80146a4:	2300      	movs	r3, #0
 80146a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80146a8:	4b0f      	ldr	r3, [pc, #60]	; (80146e8 <prvProcessTimerOrBlockTask+0x94>)
 80146aa:	6818      	ldr	r0, [r3, #0]
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	683a      	ldr	r2, [r7, #0]
 80146b4:	4619      	mov	r1, r3
 80146b6:	f7fe fccb 	bl	8013050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80146ba:	f7ff f925 	bl	8013908 <xTaskResumeAll>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d10a      	bne.n	80146da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80146c4:	4b09      	ldr	r3, [pc, #36]	; (80146ec <prvProcessTimerOrBlockTask+0x98>)
 80146c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146ca:	601a      	str	r2, [r3, #0]
 80146cc:	f3bf 8f4f 	dsb	sy
 80146d0:	f3bf 8f6f 	isb	sy
}
 80146d4:	e001      	b.n	80146da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80146d6:	f7ff f917 	bl	8013908 <xTaskResumeAll>
}
 80146da:	bf00      	nop
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}
 80146e2:	bf00      	nop
 80146e4:	20002488 	.word	0x20002488
 80146e8:	2000248c 	.word	0x2000248c
 80146ec:	e000ed04 	.word	0xe000ed04

080146f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80146f8:	4b0e      	ldr	r3, [pc, #56]	; (8014734 <prvGetNextExpireTime+0x44>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d101      	bne.n	8014706 <prvGetNextExpireTime+0x16>
 8014702:	2201      	movs	r2, #1
 8014704:	e000      	b.n	8014708 <prvGetNextExpireTime+0x18>
 8014706:	2200      	movs	r2, #0
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d105      	bne.n	8014720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014714:	4b07      	ldr	r3, [pc, #28]	; (8014734 <prvGetNextExpireTime+0x44>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	68db      	ldr	r3, [r3, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	60fb      	str	r3, [r7, #12]
 801471e:	e001      	b.n	8014724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014720:	2300      	movs	r3, #0
 8014722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014724:	68fb      	ldr	r3, [r7, #12]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	20002484 	.word	0x20002484

08014738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014740:	f7ff f980 	bl	8013a44 <xTaskGetTickCount>
 8014744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014746:	4b0b      	ldr	r3, [pc, #44]	; (8014774 <prvSampleTimeNow+0x3c>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	429a      	cmp	r2, r3
 801474e:	d205      	bcs.n	801475c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014750:	f000 f936 	bl	80149c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2201      	movs	r2, #1
 8014758:	601a      	str	r2, [r3, #0]
 801475a:	e002      	b.n	8014762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2200      	movs	r2, #0
 8014760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014762:	4a04      	ldr	r2, [pc, #16]	; (8014774 <prvSampleTimeNow+0x3c>)
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014768:	68fb      	ldr	r3, [r7, #12]
}
 801476a:	4618      	mov	r0, r3
 801476c:	3710      	adds	r7, #16
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	20002494 	.word	0x20002494

08014778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b086      	sub	sp, #24
 801477c:	af00      	add	r7, sp, #0
 801477e:	60f8      	str	r0, [r7, #12]
 8014780:	60b9      	str	r1, [r7, #8]
 8014782:	607a      	str	r2, [r7, #4]
 8014784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014786:	2300      	movs	r3, #0
 8014788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	68ba      	ldr	r2, [r7, #8]
 801478e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	68fa      	ldr	r2, [r7, #12]
 8014794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014796:	68ba      	ldr	r2, [r7, #8]
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	429a      	cmp	r2, r3
 801479c:	d812      	bhi.n	80147c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	1ad2      	subs	r2, r2, r3
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	699b      	ldr	r3, [r3, #24]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d302      	bcc.n	80147b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80147ac:	2301      	movs	r3, #1
 80147ae:	617b      	str	r3, [r7, #20]
 80147b0:	e01b      	b.n	80147ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80147b2:	4b10      	ldr	r3, [pc, #64]	; (80147f4 <prvInsertTimerInActiveList+0x7c>)
 80147b4:	681a      	ldr	r2, [r3, #0]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	3304      	adds	r3, #4
 80147ba:	4619      	mov	r1, r3
 80147bc:	4610      	mov	r0, r2
 80147be:	f7fd fc0a 	bl	8011fd6 <vListInsert>
 80147c2:	e012      	b.n	80147ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d206      	bcs.n	80147da <prvInsertTimerInActiveList+0x62>
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	429a      	cmp	r2, r3
 80147d2:	d302      	bcc.n	80147da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80147d4:	2301      	movs	r3, #1
 80147d6:	617b      	str	r3, [r7, #20]
 80147d8:	e007      	b.n	80147ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80147da:	4b07      	ldr	r3, [pc, #28]	; (80147f8 <prvInsertTimerInActiveList+0x80>)
 80147dc:	681a      	ldr	r2, [r3, #0]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	3304      	adds	r3, #4
 80147e2:	4619      	mov	r1, r3
 80147e4:	4610      	mov	r0, r2
 80147e6:	f7fd fbf6 	bl	8011fd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80147ea:	697b      	ldr	r3, [r7, #20]
}
 80147ec:	4618      	mov	r0, r3
 80147ee:	3718      	adds	r7, #24
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	20002488 	.word	0x20002488
 80147f8:	20002484 	.word	0x20002484

080147fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b08e      	sub	sp, #56	; 0x38
 8014800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014802:	e0ca      	b.n	801499a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	da18      	bge.n	801483c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801480a:	1d3b      	adds	r3, r7, #4
 801480c:	3304      	adds	r3, #4
 801480e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014812:	2b00      	cmp	r3, #0
 8014814:	d10a      	bne.n	801482c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801481a:	f383 8811 	msr	BASEPRI, r3
 801481e:	f3bf 8f6f 	isb	sy
 8014822:	f3bf 8f4f 	dsb	sy
 8014826:	61fb      	str	r3, [r7, #28]
}
 8014828:	bf00      	nop
 801482a:	e7fe      	b.n	801482a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014832:	6850      	ldr	r0, [r2, #4]
 8014834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014836:	6892      	ldr	r2, [r2, #8]
 8014838:	4611      	mov	r1, r2
 801483a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	f2c0 80aa 	blt.w	8014998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484a:	695b      	ldr	r3, [r3, #20]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d004      	beq.n	801485a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014852:	3304      	adds	r3, #4
 8014854:	4618      	mov	r0, r3
 8014856:	f7fd fbf7 	bl	8012048 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801485a:	463b      	mov	r3, r7
 801485c:	4618      	mov	r0, r3
 801485e:	f7ff ff6b 	bl	8014738 <prvSampleTimeNow>
 8014862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b09      	cmp	r3, #9
 8014868:	f200 8097 	bhi.w	801499a <prvProcessReceivedCommands+0x19e>
 801486c:	a201      	add	r2, pc, #4	; (adr r2, 8014874 <prvProcessReceivedCommands+0x78>)
 801486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014872:	bf00      	nop
 8014874:	0801489d 	.word	0x0801489d
 8014878:	0801489d 	.word	0x0801489d
 801487c:	0801489d 	.word	0x0801489d
 8014880:	08014911 	.word	0x08014911
 8014884:	08014925 	.word	0x08014925
 8014888:	0801496f 	.word	0x0801496f
 801488c:	0801489d 	.word	0x0801489d
 8014890:	0801489d 	.word	0x0801489d
 8014894:	08014911 	.word	0x08014911
 8014898:	08014925 	.word	0x08014925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148a2:	f043 0301 	orr.w	r3, r3, #1
 80148a6:	b2da      	uxtb	r2, r3
 80148a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80148ae:	68ba      	ldr	r2, [r7, #8]
 80148b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b2:	699b      	ldr	r3, [r3, #24]
 80148b4:	18d1      	adds	r1, r2, r3
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148bc:	f7ff ff5c 	bl	8014778 <prvInsertTimerInActiveList>
 80148c0:	4603      	mov	r3, r0
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d069      	beq.n	801499a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	6a1b      	ldr	r3, [r3, #32]
 80148ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80148ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80148d4:	f003 0304 	and.w	r3, r3, #4
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d05e      	beq.n	801499a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80148dc:	68ba      	ldr	r2, [r7, #8]
 80148de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	441a      	add	r2, r3
 80148e4:	2300      	movs	r3, #0
 80148e6:	9300      	str	r3, [sp, #0]
 80148e8:	2300      	movs	r3, #0
 80148ea:	2100      	movs	r1, #0
 80148ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148ee:	f7ff fe05 	bl	80144fc <xTimerGenericCommand>
 80148f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80148f4:	6a3b      	ldr	r3, [r7, #32]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d14f      	bne.n	801499a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80148fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fe:	f383 8811 	msr	BASEPRI, r3
 8014902:	f3bf 8f6f 	isb	sy
 8014906:	f3bf 8f4f 	dsb	sy
 801490a:	61bb      	str	r3, [r7, #24]
}
 801490c:	bf00      	nop
 801490e:	e7fe      	b.n	801490e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014916:	f023 0301 	bic.w	r3, r3, #1
 801491a:	b2da      	uxtb	r2, r3
 801491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014922:	e03a      	b.n	801499a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801492a:	f043 0301 	orr.w	r3, r3, #1
 801492e:	b2da      	uxtb	r2, r3
 8014930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014936:	68ba      	ldr	r2, [r7, #8]
 8014938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	699b      	ldr	r3, [r3, #24]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d10a      	bne.n	801495a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014948:	f383 8811 	msr	BASEPRI, r3
 801494c:	f3bf 8f6f 	isb	sy
 8014950:	f3bf 8f4f 	dsb	sy
 8014954:	617b      	str	r3, [r7, #20]
}
 8014956:	bf00      	nop
 8014958:	e7fe      	b.n	8014958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495c:	699a      	ldr	r2, [r3, #24]
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	18d1      	adds	r1, r2, r3
 8014962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014968:	f7ff ff06 	bl	8014778 <prvInsertTimerInActiveList>
					break;
 801496c:	e015      	b.n	801499a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014974:	f003 0302 	and.w	r3, r3, #2
 8014978:	2b00      	cmp	r3, #0
 801497a:	d103      	bne.n	8014984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801497c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801497e:	f000 fbdf 	bl	8015140 <vPortFree>
 8014982:	e00a      	b.n	801499a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801498a:	f023 0301 	bic.w	r3, r3, #1
 801498e:	b2da      	uxtb	r2, r3
 8014990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014996:	e000      	b.n	801499a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801499a:	4b08      	ldr	r3, [pc, #32]	; (80149bc <prvProcessReceivedCommands+0x1c0>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	1d39      	adds	r1, r7, #4
 80149a0:	2200      	movs	r2, #0
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fd ff48 	bl	8012838 <xQueueReceive>
 80149a8:	4603      	mov	r3, r0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	f47f af2a 	bne.w	8014804 <prvProcessReceivedCommands+0x8>
	}
}
 80149b0:	bf00      	nop
 80149b2:	bf00      	nop
 80149b4:	3730      	adds	r7, #48	; 0x30
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	2000248c 	.word	0x2000248c

080149c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	b088      	sub	sp, #32
 80149c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80149c6:	e048      	b.n	8014a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80149c8:	4b2d      	ldr	r3, [pc, #180]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	68db      	ldr	r3, [r3, #12]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80149d2:	4b2b      	ldr	r3, [pc, #172]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	68db      	ldr	r3, [r3, #12]
 80149da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	3304      	adds	r3, #4
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7fd fb31 	bl	8012048 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	6a1b      	ldr	r3, [r3, #32]
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149f4:	f003 0304 	and.w	r3, r3, #4
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d02e      	beq.n	8014a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	699b      	ldr	r3, [r3, #24]
 8014a00:	693a      	ldr	r2, [r7, #16]
 8014a02:	4413      	add	r3, r2
 8014a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014a06:	68ba      	ldr	r2, [r7, #8]
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d90e      	bls.n	8014a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	68ba      	ldr	r2, [r7, #8]
 8014a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	68fa      	ldr	r2, [r7, #12]
 8014a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014a1a:	4b19      	ldr	r3, [pc, #100]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	3304      	adds	r3, #4
 8014a22:	4619      	mov	r1, r3
 8014a24:	4610      	mov	r0, r2
 8014a26:	f7fd fad6 	bl	8011fd6 <vListInsert>
 8014a2a:	e016      	b.n	8014a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	9300      	str	r3, [sp, #0]
 8014a30:	2300      	movs	r3, #0
 8014a32:	693a      	ldr	r2, [r7, #16]
 8014a34:	2100      	movs	r1, #0
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f7ff fd60 	bl	80144fc <xTimerGenericCommand>
 8014a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d10a      	bne.n	8014a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a48:	f383 8811 	msr	BASEPRI, r3
 8014a4c:	f3bf 8f6f 	isb	sy
 8014a50:	f3bf 8f4f 	dsb	sy
 8014a54:	603b      	str	r3, [r7, #0]
}
 8014a56:	bf00      	nop
 8014a58:	e7fe      	b.n	8014a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014a5a:	4b09      	ldr	r3, [pc, #36]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d1b1      	bne.n	80149c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014a64:	4b06      	ldr	r3, [pc, #24]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014a6a:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <prvSwitchTimerLists+0xc4>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	4a04      	ldr	r2, [pc, #16]	; (8014a80 <prvSwitchTimerLists+0xc0>)
 8014a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014a72:	4a04      	ldr	r2, [pc, #16]	; (8014a84 <prvSwitchTimerLists+0xc4>)
 8014a74:	697b      	ldr	r3, [r7, #20]
 8014a76:	6013      	str	r3, [r2, #0]
}
 8014a78:	bf00      	nop
 8014a7a:	3718      	adds	r7, #24
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	20002484 	.word	0x20002484
 8014a84:	20002488 	.word	0x20002488

08014a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014a8e:	f000 f969 	bl	8014d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014a92:	4b15      	ldr	r3, [pc, #84]	; (8014ae8 <prvCheckForValidListAndQueue+0x60>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d120      	bne.n	8014adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014a9a:	4814      	ldr	r0, [pc, #80]	; (8014aec <prvCheckForValidListAndQueue+0x64>)
 8014a9c:	f7fd fa4a 	bl	8011f34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014aa0:	4813      	ldr	r0, [pc, #76]	; (8014af0 <prvCheckForValidListAndQueue+0x68>)
 8014aa2:	f7fd fa47 	bl	8011f34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014aa6:	4b13      	ldr	r3, [pc, #76]	; (8014af4 <prvCheckForValidListAndQueue+0x6c>)
 8014aa8:	4a10      	ldr	r2, [pc, #64]	; (8014aec <prvCheckForValidListAndQueue+0x64>)
 8014aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014aac:	4b12      	ldr	r3, [pc, #72]	; (8014af8 <prvCheckForValidListAndQueue+0x70>)
 8014aae:	4a10      	ldr	r2, [pc, #64]	; (8014af0 <prvCheckForValidListAndQueue+0x68>)
 8014ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	4b11      	ldr	r3, [pc, #68]	; (8014afc <prvCheckForValidListAndQueue+0x74>)
 8014ab8:	4a11      	ldr	r2, [pc, #68]	; (8014b00 <prvCheckForValidListAndQueue+0x78>)
 8014aba:	2110      	movs	r1, #16
 8014abc:	200a      	movs	r0, #10
 8014abe:	f7fd fb55 	bl	801216c <xQueueGenericCreateStatic>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	4a08      	ldr	r2, [pc, #32]	; (8014ae8 <prvCheckForValidListAndQueue+0x60>)
 8014ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014ac8:	4b07      	ldr	r3, [pc, #28]	; (8014ae8 <prvCheckForValidListAndQueue+0x60>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d005      	beq.n	8014adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014ad0:	4b05      	ldr	r3, [pc, #20]	; (8014ae8 <prvCheckForValidListAndQueue+0x60>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	490b      	ldr	r1, [pc, #44]	; (8014b04 <prvCheckForValidListAndQueue+0x7c>)
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7fe fa66 	bl	8012fa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014adc:	f000 f972 	bl	8014dc4 <vPortExitCritical>
}
 8014ae0:	bf00      	nop
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}
 8014ae6:	bf00      	nop
 8014ae8:	2000248c 	.word	0x2000248c
 8014aec:	2000245c 	.word	0x2000245c
 8014af0:	20002470 	.word	0x20002470
 8014af4:	20002484 	.word	0x20002484
 8014af8:	20002488 	.word	0x20002488
 8014afc:	20002538 	.word	0x20002538
 8014b00:	20002498 	.word	0x20002498
 8014b04:	0801a26c 	.word	0x0801a26c

08014b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	3b04      	subs	r3, #4
 8014b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	3b04      	subs	r3, #4
 8014b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	f023 0201 	bic.w	r2, r3, #1
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3b04      	subs	r3, #4
 8014b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b38:	4a0c      	ldr	r2, [pc, #48]	; (8014b6c <pxPortInitialiseStack+0x64>)
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3b14      	subs	r3, #20
 8014b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3b04      	subs	r3, #4
 8014b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f06f 0202 	mvn.w	r2, #2
 8014b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3b20      	subs	r3, #32
 8014b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	08014b71 	.word	0x08014b71

08014b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b7a:	4b12      	ldr	r3, [pc, #72]	; (8014bc4 <prvTaskExitError+0x54>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b82:	d00a      	beq.n	8014b9a <prvTaskExitError+0x2a>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	60fb      	str	r3, [r7, #12]
}
 8014b96:	bf00      	nop
 8014b98:	e7fe      	b.n	8014b98 <prvTaskExitError+0x28>
	__asm volatile
 8014b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	60bb      	str	r3, [r7, #8]
}
 8014bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014bae:	bf00      	nop
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d0fc      	beq.n	8014bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014bb6:	bf00      	nop
 8014bb8:	bf00      	nop
 8014bba:	3714      	adds	r7, #20
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc2:	4770      	bx	lr
 8014bc4:	20000348 	.word	0x20000348
	...

08014bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014bd0:	4b07      	ldr	r3, [pc, #28]	; (8014bf0 <pxCurrentTCBConst2>)
 8014bd2:	6819      	ldr	r1, [r3, #0]
 8014bd4:	6808      	ldr	r0, [r1, #0]
 8014bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bda:	f380 8809 	msr	PSP, r0
 8014bde:	f3bf 8f6f 	isb	sy
 8014be2:	f04f 0000 	mov.w	r0, #0
 8014be6:	f380 8811 	msr	BASEPRI, r0
 8014bea:	4770      	bx	lr
 8014bec:	f3af 8000 	nop.w

08014bf0 <pxCurrentTCBConst2>:
 8014bf0:	20001f5c 	.word	0x20001f5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014bf4:	bf00      	nop
 8014bf6:	bf00      	nop

08014bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014bf8:	4808      	ldr	r0, [pc, #32]	; (8014c1c <prvPortStartFirstTask+0x24>)
 8014bfa:	6800      	ldr	r0, [r0, #0]
 8014bfc:	6800      	ldr	r0, [r0, #0]
 8014bfe:	f380 8808 	msr	MSP, r0
 8014c02:	f04f 0000 	mov.w	r0, #0
 8014c06:	f380 8814 	msr	CONTROL, r0
 8014c0a:	b662      	cpsie	i
 8014c0c:	b661      	cpsie	f
 8014c0e:	f3bf 8f4f 	dsb	sy
 8014c12:	f3bf 8f6f 	isb	sy
 8014c16:	df00      	svc	0
 8014c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c1a:	bf00      	nop
 8014c1c:	e000ed08 	.word	0xe000ed08

08014c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b086      	sub	sp, #24
 8014c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014c26:	4b46      	ldr	r3, [pc, #280]	; (8014d40 <xPortStartScheduler+0x120>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a46      	ldr	r2, [pc, #280]	; (8014d44 <xPortStartScheduler+0x124>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	d10a      	bne.n	8014c46 <xPortStartScheduler+0x26>
	__asm volatile
 8014c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c34:	f383 8811 	msr	BASEPRI, r3
 8014c38:	f3bf 8f6f 	isb	sy
 8014c3c:	f3bf 8f4f 	dsb	sy
 8014c40:	613b      	str	r3, [r7, #16]
}
 8014c42:	bf00      	nop
 8014c44:	e7fe      	b.n	8014c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014c46:	4b3e      	ldr	r3, [pc, #248]	; (8014d40 <xPortStartScheduler+0x120>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	4a3f      	ldr	r2, [pc, #252]	; (8014d48 <xPortStartScheduler+0x128>)
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	d10a      	bne.n	8014c66 <xPortStartScheduler+0x46>
	__asm volatile
 8014c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c54:	f383 8811 	msr	BASEPRI, r3
 8014c58:	f3bf 8f6f 	isb	sy
 8014c5c:	f3bf 8f4f 	dsb	sy
 8014c60:	60fb      	str	r3, [r7, #12]
}
 8014c62:	bf00      	nop
 8014c64:	e7fe      	b.n	8014c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c66:	4b39      	ldr	r3, [pc, #228]	; (8014d4c <xPortStartScheduler+0x12c>)
 8014c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	781b      	ldrb	r3, [r3, #0]
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	22ff      	movs	r2, #255	; 0xff
 8014c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c78:	697b      	ldr	r3, [r7, #20]
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c80:	78fb      	ldrb	r3, [r7, #3]
 8014c82:	b2db      	uxtb	r3, r3
 8014c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014c88:	b2da      	uxtb	r2, r3
 8014c8a:	4b31      	ldr	r3, [pc, #196]	; (8014d50 <xPortStartScheduler+0x130>)
 8014c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c8e:	4b31      	ldr	r3, [pc, #196]	; (8014d54 <xPortStartScheduler+0x134>)
 8014c90:	2207      	movs	r2, #7
 8014c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c94:	e009      	b.n	8014caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014c96:	4b2f      	ldr	r3, [pc, #188]	; (8014d54 <xPortStartScheduler+0x134>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	3b01      	subs	r3, #1
 8014c9c:	4a2d      	ldr	r2, [pc, #180]	; (8014d54 <xPortStartScheduler+0x134>)
 8014c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014ca0:	78fb      	ldrb	r3, [r7, #3]
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	005b      	lsls	r3, r3, #1
 8014ca6:	b2db      	uxtb	r3, r3
 8014ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014caa:	78fb      	ldrb	r3, [r7, #3]
 8014cac:	b2db      	uxtb	r3, r3
 8014cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014cb2:	2b80      	cmp	r3, #128	; 0x80
 8014cb4:	d0ef      	beq.n	8014c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014cb6:	4b27      	ldr	r3, [pc, #156]	; (8014d54 <xPortStartScheduler+0x134>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	f1c3 0307 	rsb	r3, r3, #7
 8014cbe:	2b04      	cmp	r3, #4
 8014cc0:	d00a      	beq.n	8014cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc6:	f383 8811 	msr	BASEPRI, r3
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	60bb      	str	r3, [r7, #8]
}
 8014cd4:	bf00      	nop
 8014cd6:	e7fe      	b.n	8014cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014cd8:	4b1e      	ldr	r3, [pc, #120]	; (8014d54 <xPortStartScheduler+0x134>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	021b      	lsls	r3, r3, #8
 8014cde:	4a1d      	ldr	r2, [pc, #116]	; (8014d54 <xPortStartScheduler+0x134>)
 8014ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ce2:	4b1c      	ldr	r3, [pc, #112]	; (8014d54 <xPortStartScheduler+0x134>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014cea:	4a1a      	ldr	r2, [pc, #104]	; (8014d54 <xPortStartScheduler+0x134>)
 8014cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	b2da      	uxtb	r2, r3
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014cf6:	4b18      	ldr	r3, [pc, #96]	; (8014d58 <xPortStartScheduler+0x138>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a17      	ldr	r2, [pc, #92]	; (8014d58 <xPortStartScheduler+0x138>)
 8014cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014d02:	4b15      	ldr	r3, [pc, #84]	; (8014d58 <xPortStartScheduler+0x138>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	4a14      	ldr	r2, [pc, #80]	; (8014d58 <xPortStartScheduler+0x138>)
 8014d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014d0e:	f000 f8dd 	bl	8014ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014d12:	4b12      	ldr	r3, [pc, #72]	; (8014d5c <xPortStartScheduler+0x13c>)
 8014d14:	2200      	movs	r2, #0
 8014d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014d18:	f000 f8fc 	bl	8014f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014d1c:	4b10      	ldr	r3, [pc, #64]	; (8014d60 <xPortStartScheduler+0x140>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a0f      	ldr	r2, [pc, #60]	; (8014d60 <xPortStartScheduler+0x140>)
 8014d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014d28:	f7ff ff66 	bl	8014bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d2c:	f7fe ff54 	bl	8013bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8014d30:	f7ff ff1e 	bl	8014b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d34:	2300      	movs	r3, #0
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3718      	adds	r7, #24
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	e000ed00 	.word	0xe000ed00
 8014d44:	410fc271 	.word	0x410fc271
 8014d48:	410fc270 	.word	0x410fc270
 8014d4c:	e000e400 	.word	0xe000e400
 8014d50:	20002588 	.word	0x20002588
 8014d54:	2000258c 	.word	0x2000258c
 8014d58:	e000ed20 	.word	0xe000ed20
 8014d5c:	20000348 	.word	0x20000348
 8014d60:	e000ef34 	.word	0xe000ef34

08014d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d64:	b480      	push	{r7}
 8014d66:	b083      	sub	sp, #12
 8014d68:	af00      	add	r7, sp, #0
	__asm volatile
 8014d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d6e:	f383 8811 	msr	BASEPRI, r3
 8014d72:	f3bf 8f6f 	isb	sy
 8014d76:	f3bf 8f4f 	dsb	sy
 8014d7a:	607b      	str	r3, [r7, #4]
}
 8014d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d7e:	4b0f      	ldr	r3, [pc, #60]	; (8014dbc <vPortEnterCritical+0x58>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3301      	adds	r3, #1
 8014d84:	4a0d      	ldr	r2, [pc, #52]	; (8014dbc <vPortEnterCritical+0x58>)
 8014d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d88:	4b0c      	ldr	r3, [pc, #48]	; (8014dbc <vPortEnterCritical+0x58>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b01      	cmp	r3, #1
 8014d8e:	d10f      	bne.n	8014db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d90:	4b0b      	ldr	r3, [pc, #44]	; (8014dc0 <vPortEnterCritical+0x5c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d00a      	beq.n	8014db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8014d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d9e:	f383 8811 	msr	BASEPRI, r3
 8014da2:	f3bf 8f6f 	isb	sy
 8014da6:	f3bf 8f4f 	dsb	sy
 8014daa:	603b      	str	r3, [r7, #0]
}
 8014dac:	bf00      	nop
 8014dae:	e7fe      	b.n	8014dae <vPortEnterCritical+0x4a>
	}
}
 8014db0:	bf00      	nop
 8014db2:	370c      	adds	r7, #12
 8014db4:	46bd      	mov	sp, r7
 8014db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dba:	4770      	bx	lr
 8014dbc:	20000348 	.word	0x20000348
 8014dc0:	e000ed04 	.word	0xe000ed04

08014dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014dca:	4b12      	ldr	r3, [pc, #72]	; (8014e14 <vPortExitCritical+0x50>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d10a      	bne.n	8014de8 <vPortExitCritical+0x24>
	__asm volatile
 8014dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd6:	f383 8811 	msr	BASEPRI, r3
 8014dda:	f3bf 8f6f 	isb	sy
 8014dde:	f3bf 8f4f 	dsb	sy
 8014de2:	607b      	str	r3, [r7, #4]
}
 8014de4:	bf00      	nop
 8014de6:	e7fe      	b.n	8014de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014de8:	4b0a      	ldr	r3, [pc, #40]	; (8014e14 <vPortExitCritical+0x50>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	3b01      	subs	r3, #1
 8014dee:	4a09      	ldr	r2, [pc, #36]	; (8014e14 <vPortExitCritical+0x50>)
 8014df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014df2:	4b08      	ldr	r3, [pc, #32]	; (8014e14 <vPortExitCritical+0x50>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d105      	bne.n	8014e06 <vPortExitCritical+0x42>
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	f383 8811 	msr	BASEPRI, r3
}
 8014e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014e06:	bf00      	nop
 8014e08:	370c      	adds	r7, #12
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
 8014e12:	bf00      	nop
 8014e14:	20000348 	.word	0x20000348
	...

08014e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014e20:	f3ef 8009 	mrs	r0, PSP
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	4b15      	ldr	r3, [pc, #84]	; (8014e80 <pxCurrentTCBConst>)
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	f01e 0f10 	tst.w	lr, #16
 8014e30:	bf08      	it	eq
 8014e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3a:	6010      	str	r0, [r2, #0]
 8014e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014e44:	f380 8811 	msr	BASEPRI, r0
 8014e48:	f3bf 8f4f 	dsb	sy
 8014e4c:	f3bf 8f6f 	isb	sy
 8014e50:	f7fe fec2 	bl	8013bd8 <vTaskSwitchContext>
 8014e54:	f04f 0000 	mov.w	r0, #0
 8014e58:	f380 8811 	msr	BASEPRI, r0
 8014e5c:	bc09      	pop	{r0, r3}
 8014e5e:	6819      	ldr	r1, [r3, #0]
 8014e60:	6808      	ldr	r0, [r1, #0]
 8014e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e66:	f01e 0f10 	tst.w	lr, #16
 8014e6a:	bf08      	it	eq
 8014e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e70:	f380 8809 	msr	PSP, r0
 8014e74:	f3bf 8f6f 	isb	sy
 8014e78:	4770      	bx	lr
 8014e7a:	bf00      	nop
 8014e7c:	f3af 8000 	nop.w

08014e80 <pxCurrentTCBConst>:
 8014e80:	20001f5c 	.word	0x20001f5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e84:	bf00      	nop
 8014e86:	bf00      	nop

08014e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e92:	f383 8811 	msr	BASEPRI, r3
 8014e96:	f3bf 8f6f 	isb	sy
 8014e9a:	f3bf 8f4f 	dsb	sy
 8014e9e:	607b      	str	r3, [r7, #4]
}
 8014ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ea2:	f7fe fddf 	bl	8013a64 <xTaskIncrementTick>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d003      	beq.n	8014eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014eac:	4b06      	ldr	r3, [pc, #24]	; (8014ec8 <xPortSysTickHandler+0x40>)
 8014eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014eb2:	601a      	str	r2, [r3, #0]
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	f383 8811 	msr	BASEPRI, r3
}
 8014ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ec0:	bf00      	nop
 8014ec2:	3708      	adds	r7, #8
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	e000ed04 	.word	0xe000ed04

08014ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014ecc:	b480      	push	{r7}
 8014ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ed0:	4b0b      	ldr	r3, [pc, #44]	; (8014f00 <vPortSetupTimerInterrupt+0x34>)
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014ed6:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <vPortSetupTimerInterrupt+0x38>)
 8014ed8:	2200      	movs	r2, #0
 8014eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014edc:	4b0a      	ldr	r3, [pc, #40]	; (8014f08 <vPortSetupTimerInterrupt+0x3c>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	4a0a      	ldr	r2, [pc, #40]	; (8014f0c <vPortSetupTimerInterrupt+0x40>)
 8014ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8014ee6:	099b      	lsrs	r3, r3, #6
 8014ee8:	4a09      	ldr	r2, [pc, #36]	; (8014f10 <vPortSetupTimerInterrupt+0x44>)
 8014eea:	3b01      	subs	r3, #1
 8014eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014eee:	4b04      	ldr	r3, [pc, #16]	; (8014f00 <vPortSetupTimerInterrupt+0x34>)
 8014ef0:	2207      	movs	r2, #7
 8014ef2:	601a      	str	r2, [r3, #0]
}
 8014ef4:	bf00      	nop
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efc:	4770      	bx	lr
 8014efe:	bf00      	nop
 8014f00:	e000e010 	.word	0xe000e010
 8014f04:	e000e018 	.word	0xe000e018
 8014f08:	2000033c 	.word	0x2000033c
 8014f0c:	10624dd3 	.word	0x10624dd3
 8014f10:	e000e014 	.word	0xe000e014

08014f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014f24 <vPortEnableVFP+0x10>
 8014f18:	6801      	ldr	r1, [r0, #0]
 8014f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014f1e:	6001      	str	r1, [r0, #0]
 8014f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014f22:	bf00      	nop
 8014f24:	e000ed88 	.word	0xe000ed88

08014f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014f28:	b480      	push	{r7}
 8014f2a:	b085      	sub	sp, #20
 8014f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f2e:	f3ef 8305 	mrs	r3, IPSR
 8014f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2b0f      	cmp	r3, #15
 8014f38:	d914      	bls.n	8014f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f3a:	4a17      	ldr	r2, [pc, #92]	; (8014f98 <vPortValidateInterruptPriority+0x70>)
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	4413      	add	r3, r2
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f44:	4b15      	ldr	r3, [pc, #84]	; (8014f9c <vPortValidateInterruptPriority+0x74>)
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	7afa      	ldrb	r2, [r7, #11]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d20a      	bcs.n	8014f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	607b      	str	r3, [r7, #4]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f64:	4b0e      	ldr	r3, [pc, #56]	; (8014fa0 <vPortValidateInterruptPriority+0x78>)
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014f6c:	4b0d      	ldr	r3, [pc, #52]	; (8014fa4 <vPortValidateInterruptPriority+0x7c>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d90a      	bls.n	8014f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f78:	f383 8811 	msr	BASEPRI, r3
 8014f7c:	f3bf 8f6f 	isb	sy
 8014f80:	f3bf 8f4f 	dsb	sy
 8014f84:	603b      	str	r3, [r7, #0]
}
 8014f86:	bf00      	nop
 8014f88:	e7fe      	b.n	8014f88 <vPortValidateInterruptPriority+0x60>
	}
 8014f8a:	bf00      	nop
 8014f8c:	3714      	adds	r7, #20
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop
 8014f98:	e000e3f0 	.word	0xe000e3f0
 8014f9c:	20002588 	.word	0x20002588
 8014fa0:	e000ed0c 	.word	0xe000ed0c
 8014fa4:	2000258c 	.word	0x2000258c

08014fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b08a      	sub	sp, #40	; 0x28
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014fb4:	f7fe fc9a 	bl	80138ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014fb8:	4b5b      	ldr	r3, [pc, #364]	; (8015128 <pvPortMalloc+0x180>)
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d101      	bne.n	8014fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014fc0:	f000 f920 	bl	8015204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014fc4:	4b59      	ldr	r3, [pc, #356]	; (801512c <pvPortMalloc+0x184>)
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	4013      	ands	r3, r2
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	f040 8093 	bne.w	80150f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d01d      	beq.n	8015014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014fd8:	2208      	movs	r2, #8
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4413      	add	r3, r2
 8014fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f003 0307 	and.w	r3, r3, #7
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d014      	beq.n	8015014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f023 0307 	bic.w	r3, r3, #7
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f003 0307 	and.w	r3, r3, #7
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d00a      	beq.n	8015014 <pvPortMalloc+0x6c>
	__asm volatile
 8014ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015002:	f383 8811 	msr	BASEPRI, r3
 8015006:	f3bf 8f6f 	isb	sy
 801500a:	f3bf 8f4f 	dsb	sy
 801500e:	617b      	str	r3, [r7, #20]
}
 8015010:	bf00      	nop
 8015012:	e7fe      	b.n	8015012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d06e      	beq.n	80150f8 <pvPortMalloc+0x150>
 801501a:	4b45      	ldr	r3, [pc, #276]	; (8015130 <pvPortMalloc+0x188>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	429a      	cmp	r2, r3
 8015022:	d869      	bhi.n	80150f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015024:	4b43      	ldr	r3, [pc, #268]	; (8015134 <pvPortMalloc+0x18c>)
 8015026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015028:	4b42      	ldr	r3, [pc, #264]	; (8015134 <pvPortMalloc+0x18c>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801502e:	e004      	b.n	801503a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503c:	685b      	ldr	r3, [r3, #4]
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	429a      	cmp	r2, r3
 8015042:	d903      	bls.n	801504c <pvPortMalloc+0xa4>
 8015044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d1f1      	bne.n	8015030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801504c:	4b36      	ldr	r3, [pc, #216]	; (8015128 <pvPortMalloc+0x180>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015052:	429a      	cmp	r2, r3
 8015054:	d050      	beq.n	80150f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015056:	6a3b      	ldr	r3, [r7, #32]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	2208      	movs	r2, #8
 801505c:	4413      	add	r3, r2
 801505e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506a:	685a      	ldr	r2, [r3, #4]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	1ad2      	subs	r2, r2, r3
 8015070:	2308      	movs	r3, #8
 8015072:	005b      	lsls	r3, r3, #1
 8015074:	429a      	cmp	r2, r3
 8015076:	d91f      	bls.n	80150b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	4413      	add	r3, r2
 801507e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015080:	69bb      	ldr	r3, [r7, #24]
 8015082:	f003 0307 	and.w	r3, r3, #7
 8015086:	2b00      	cmp	r3, #0
 8015088:	d00a      	beq.n	80150a0 <pvPortMalloc+0xf8>
	__asm volatile
 801508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801508e:	f383 8811 	msr	BASEPRI, r3
 8015092:	f3bf 8f6f 	isb	sy
 8015096:	f3bf 8f4f 	dsb	sy
 801509a:	613b      	str	r3, [r7, #16]
}
 801509c:	bf00      	nop
 801509e:	e7fe      	b.n	801509e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80150a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a2:	685a      	ldr	r2, [r3, #4]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	1ad2      	subs	r2, r2, r3
 80150a8:	69bb      	ldr	r3, [r7, #24]
 80150aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80150ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80150b2:	69b8      	ldr	r0, [r7, #24]
 80150b4:	f000 f908 	bl	80152c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80150b8:	4b1d      	ldr	r3, [pc, #116]	; (8015130 <pvPortMalloc+0x188>)
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	4a1b      	ldr	r2, [pc, #108]	; (8015130 <pvPortMalloc+0x188>)
 80150c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80150c6:	4b1a      	ldr	r3, [pc, #104]	; (8015130 <pvPortMalloc+0x188>)
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	4b1b      	ldr	r3, [pc, #108]	; (8015138 <pvPortMalloc+0x190>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d203      	bcs.n	80150da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80150d2:	4b17      	ldr	r3, [pc, #92]	; (8015130 <pvPortMalloc+0x188>)
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	4a18      	ldr	r2, [pc, #96]	; (8015138 <pvPortMalloc+0x190>)
 80150d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150dc:	685a      	ldr	r2, [r3, #4]
 80150de:	4b13      	ldr	r3, [pc, #76]	; (801512c <pvPortMalloc+0x184>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	431a      	orrs	r2, r3
 80150e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ea:	2200      	movs	r2, #0
 80150ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80150ee:	4b13      	ldr	r3, [pc, #76]	; (801513c <pvPortMalloc+0x194>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	3301      	adds	r3, #1
 80150f4:	4a11      	ldr	r2, [pc, #68]	; (801513c <pvPortMalloc+0x194>)
 80150f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150f8:	f7fe fc06 	bl	8013908 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	f003 0307 	and.w	r3, r3, #7
 8015102:	2b00      	cmp	r3, #0
 8015104:	d00a      	beq.n	801511c <pvPortMalloc+0x174>
	__asm volatile
 8015106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801510a:	f383 8811 	msr	BASEPRI, r3
 801510e:	f3bf 8f6f 	isb	sy
 8015112:	f3bf 8f4f 	dsb	sy
 8015116:	60fb      	str	r3, [r7, #12]
}
 8015118:	bf00      	nop
 801511a:	e7fe      	b.n	801511a <pvPortMalloc+0x172>
	return pvReturn;
 801511c:	69fb      	ldr	r3, [r7, #28]
}
 801511e:	4618      	mov	r0, r3
 8015120:	3728      	adds	r7, #40	; 0x28
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	20006198 	.word	0x20006198
 801512c:	200061ac 	.word	0x200061ac
 8015130:	2000619c 	.word	0x2000619c
 8015134:	20006190 	.word	0x20006190
 8015138:	200061a0 	.word	0x200061a0
 801513c:	200061a4 	.word	0x200061a4

08015140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d04d      	beq.n	80151ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015152:	2308      	movs	r3, #8
 8015154:	425b      	negs	r3, r3
 8015156:	697a      	ldr	r2, [r7, #20]
 8015158:	4413      	add	r3, r2
 801515a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015160:	693b      	ldr	r3, [r7, #16]
 8015162:	685a      	ldr	r2, [r3, #4]
 8015164:	4b24      	ldr	r3, [pc, #144]	; (80151f8 <vPortFree+0xb8>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4013      	ands	r3, r2
 801516a:	2b00      	cmp	r3, #0
 801516c:	d10a      	bne.n	8015184 <vPortFree+0x44>
	__asm volatile
 801516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015172:	f383 8811 	msr	BASEPRI, r3
 8015176:	f3bf 8f6f 	isb	sy
 801517a:	f3bf 8f4f 	dsb	sy
 801517e:	60fb      	str	r3, [r7, #12]
}
 8015180:	bf00      	nop
 8015182:	e7fe      	b.n	8015182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00a      	beq.n	80151a2 <vPortFree+0x62>
	__asm volatile
 801518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015190:	f383 8811 	msr	BASEPRI, r3
 8015194:	f3bf 8f6f 	isb	sy
 8015198:	f3bf 8f4f 	dsb	sy
 801519c:	60bb      	str	r3, [r7, #8]
}
 801519e:	bf00      	nop
 80151a0:	e7fe      	b.n	80151a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	685a      	ldr	r2, [r3, #4]
 80151a6:	4b14      	ldr	r3, [pc, #80]	; (80151f8 <vPortFree+0xb8>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	4013      	ands	r3, r2
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d01e      	beq.n	80151ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d11a      	bne.n	80151ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	685a      	ldr	r2, [r3, #4]
 80151bc:	4b0e      	ldr	r3, [pc, #56]	; (80151f8 <vPortFree+0xb8>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	43db      	mvns	r3, r3
 80151c2:	401a      	ands	r2, r3
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80151c8:	f7fe fb90 	bl	80138ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	685a      	ldr	r2, [r3, #4]
 80151d0:	4b0a      	ldr	r3, [pc, #40]	; (80151fc <vPortFree+0xbc>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	4413      	add	r3, r2
 80151d6:	4a09      	ldr	r2, [pc, #36]	; (80151fc <vPortFree+0xbc>)
 80151d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151da:	6938      	ldr	r0, [r7, #16]
 80151dc:	f000 f874 	bl	80152c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80151e0:	4b07      	ldr	r3, [pc, #28]	; (8015200 <vPortFree+0xc0>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	3301      	adds	r3, #1
 80151e6:	4a06      	ldr	r2, [pc, #24]	; (8015200 <vPortFree+0xc0>)
 80151e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80151ea:	f7fe fb8d 	bl	8013908 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151ee:	bf00      	nop
 80151f0:	3718      	adds	r7, #24
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
 80151f6:	bf00      	nop
 80151f8:	200061ac 	.word	0x200061ac
 80151fc:	2000619c 	.word	0x2000619c
 8015200:	200061a8 	.word	0x200061a8

08015204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015204:	b480      	push	{r7}
 8015206:	b085      	sub	sp, #20
 8015208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801520a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801520e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015210:	4b27      	ldr	r3, [pc, #156]	; (80152b0 <prvHeapInit+0xac>)
 8015212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	f003 0307 	and.w	r3, r3, #7
 801521a:	2b00      	cmp	r3, #0
 801521c:	d00c      	beq.n	8015238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	3307      	adds	r3, #7
 8015222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	f023 0307 	bic.w	r3, r3, #7
 801522a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801522c:	68ba      	ldr	r2, [r7, #8]
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	1ad3      	subs	r3, r2, r3
 8015232:	4a1f      	ldr	r2, [pc, #124]	; (80152b0 <prvHeapInit+0xac>)
 8015234:	4413      	add	r3, r2
 8015236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801523c:	4a1d      	ldr	r2, [pc, #116]	; (80152b4 <prvHeapInit+0xb0>)
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015242:	4b1c      	ldr	r3, [pc, #112]	; (80152b4 <prvHeapInit+0xb0>)
 8015244:	2200      	movs	r2, #0
 8015246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	4413      	add	r3, r2
 801524e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015250:	2208      	movs	r2, #8
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	1a9b      	subs	r3, r3, r2
 8015256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f023 0307 	bic.w	r3, r3, #7
 801525e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4a15      	ldr	r2, [pc, #84]	; (80152b8 <prvHeapInit+0xb4>)
 8015264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015266:	4b14      	ldr	r3, [pc, #80]	; (80152b8 <prvHeapInit+0xb4>)
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2200      	movs	r2, #0
 801526c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801526e:	4b12      	ldr	r3, [pc, #72]	; (80152b8 <prvHeapInit+0xb4>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2200      	movs	r2, #0
 8015274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	1ad2      	subs	r2, r2, r3
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015284:	4b0c      	ldr	r3, [pc, #48]	; (80152b8 <prvHeapInit+0xb4>)
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	4a0a      	ldr	r2, [pc, #40]	; (80152bc <prvHeapInit+0xb8>)
 8015292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	4a09      	ldr	r2, [pc, #36]	; (80152c0 <prvHeapInit+0xbc>)
 801529a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801529c:	4b09      	ldr	r3, [pc, #36]	; (80152c4 <prvHeapInit+0xc0>)
 801529e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80152a2:	601a      	str	r2, [r3, #0]
}
 80152a4:	bf00      	nop
 80152a6:	3714      	adds	r7, #20
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr
 80152b0:	20002590 	.word	0x20002590
 80152b4:	20006190 	.word	0x20006190
 80152b8:	20006198 	.word	0x20006198
 80152bc:	200061a0 	.word	0x200061a0
 80152c0:	2000619c 	.word	0x2000619c
 80152c4:	200061ac 	.word	0x200061ac

080152c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80152c8:	b480      	push	{r7}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80152d0:	4b28      	ldr	r3, [pc, #160]	; (8015374 <prvInsertBlockIntoFreeList+0xac>)
 80152d2:	60fb      	str	r3, [r7, #12]
 80152d4:	e002      	b.n	80152dc <prvInsertBlockIntoFreeList+0x14>
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	60fb      	str	r3, [r7, #12]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d8f7      	bhi.n	80152d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	685b      	ldr	r3, [r3, #4]
 80152ee:	68ba      	ldr	r2, [r7, #8]
 80152f0:	4413      	add	r3, r2
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d108      	bne.n	801530a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	685a      	ldr	r2, [r3, #4]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	441a      	add	r2, r3
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	68ba      	ldr	r2, [r7, #8]
 8015314:	441a      	add	r2, r3
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	429a      	cmp	r2, r3
 801531c:	d118      	bne.n	8015350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681a      	ldr	r2, [r3, #0]
 8015322:	4b15      	ldr	r3, [pc, #84]	; (8015378 <prvInsertBlockIntoFreeList+0xb0>)
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	429a      	cmp	r2, r3
 8015328:	d00d      	beq.n	8015346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	685a      	ldr	r2, [r3, #4]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	441a      	add	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	681a      	ldr	r2, [r3, #0]
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	e008      	b.n	8015358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015346:	4b0c      	ldr	r3, [pc, #48]	; (8015378 <prvInsertBlockIntoFreeList+0xb0>)
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	601a      	str	r2, [r3, #0]
 801534e:	e003      	b.n	8015358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681a      	ldr	r2, [r3, #0]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	429a      	cmp	r2, r3
 801535e:	d002      	beq.n	8015366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015366:	bf00      	nop
 8015368:	3714      	adds	r7, #20
 801536a:	46bd      	mov	sp, r7
 801536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	20006190 	.word	0x20006190
 8015378:	20006198 	.word	0x20006198

0801537c <__errno>:
 801537c:	4b01      	ldr	r3, [pc, #4]	; (8015384 <__errno+0x8>)
 801537e:	6818      	ldr	r0, [r3, #0]
 8015380:	4770      	bx	lr
 8015382:	bf00      	nop
 8015384:	2000034c 	.word	0x2000034c

08015388 <__libc_init_array>:
 8015388:	b570      	push	{r4, r5, r6, lr}
 801538a:	4d0d      	ldr	r5, [pc, #52]	; (80153c0 <__libc_init_array+0x38>)
 801538c:	4c0d      	ldr	r4, [pc, #52]	; (80153c4 <__libc_init_array+0x3c>)
 801538e:	1b64      	subs	r4, r4, r5
 8015390:	10a4      	asrs	r4, r4, #2
 8015392:	2600      	movs	r6, #0
 8015394:	42a6      	cmp	r6, r4
 8015396:	d109      	bne.n	80153ac <__libc_init_array+0x24>
 8015398:	4d0b      	ldr	r5, [pc, #44]	; (80153c8 <__libc_init_array+0x40>)
 801539a:	4c0c      	ldr	r4, [pc, #48]	; (80153cc <__libc_init_array+0x44>)
 801539c:	f004 fcea 	bl	8019d74 <_init>
 80153a0:	1b64      	subs	r4, r4, r5
 80153a2:	10a4      	asrs	r4, r4, #2
 80153a4:	2600      	movs	r6, #0
 80153a6:	42a6      	cmp	r6, r4
 80153a8:	d105      	bne.n	80153b6 <__libc_init_array+0x2e>
 80153aa:	bd70      	pop	{r4, r5, r6, pc}
 80153ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80153b0:	4798      	blx	r3
 80153b2:	3601      	adds	r6, #1
 80153b4:	e7ee      	b.n	8015394 <__libc_init_array+0xc>
 80153b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80153ba:	4798      	blx	r3
 80153bc:	3601      	adds	r6, #1
 80153be:	e7f2      	b.n	80153a6 <__libc_init_array+0x1e>
 80153c0:	0801b21c 	.word	0x0801b21c
 80153c4:	0801b21c 	.word	0x0801b21c
 80153c8:	0801b21c 	.word	0x0801b21c
 80153cc:	0801b220 	.word	0x0801b220

080153d0 <memcpy>:
 80153d0:	440a      	add	r2, r1
 80153d2:	4291      	cmp	r1, r2
 80153d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80153d8:	d100      	bne.n	80153dc <memcpy+0xc>
 80153da:	4770      	bx	lr
 80153dc:	b510      	push	{r4, lr}
 80153de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153e6:	4291      	cmp	r1, r2
 80153e8:	d1f9      	bne.n	80153de <memcpy+0xe>
 80153ea:	bd10      	pop	{r4, pc}

080153ec <memset>:
 80153ec:	4402      	add	r2, r0
 80153ee:	4603      	mov	r3, r0
 80153f0:	4293      	cmp	r3, r2
 80153f2:	d100      	bne.n	80153f6 <memset+0xa>
 80153f4:	4770      	bx	lr
 80153f6:	f803 1b01 	strb.w	r1, [r3], #1
 80153fa:	e7f9      	b.n	80153f0 <memset+0x4>

080153fc <__cvt>:
 80153fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015400:	ec55 4b10 	vmov	r4, r5, d0
 8015404:	2d00      	cmp	r5, #0
 8015406:	460e      	mov	r6, r1
 8015408:	4619      	mov	r1, r3
 801540a:	462b      	mov	r3, r5
 801540c:	bfbb      	ittet	lt
 801540e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015412:	461d      	movlt	r5, r3
 8015414:	2300      	movge	r3, #0
 8015416:	232d      	movlt	r3, #45	; 0x2d
 8015418:	700b      	strb	r3, [r1, #0]
 801541a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801541c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015420:	4691      	mov	r9, r2
 8015422:	f023 0820 	bic.w	r8, r3, #32
 8015426:	bfbc      	itt	lt
 8015428:	4622      	movlt	r2, r4
 801542a:	4614      	movlt	r4, r2
 801542c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015430:	d005      	beq.n	801543e <__cvt+0x42>
 8015432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015436:	d100      	bne.n	801543a <__cvt+0x3e>
 8015438:	3601      	adds	r6, #1
 801543a:	2102      	movs	r1, #2
 801543c:	e000      	b.n	8015440 <__cvt+0x44>
 801543e:	2103      	movs	r1, #3
 8015440:	ab03      	add	r3, sp, #12
 8015442:	9301      	str	r3, [sp, #4]
 8015444:	ab02      	add	r3, sp, #8
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	ec45 4b10 	vmov	d0, r4, r5
 801544c:	4653      	mov	r3, sl
 801544e:	4632      	mov	r2, r6
 8015450:	f001 feb2 	bl	80171b8 <_dtoa_r>
 8015454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015458:	4607      	mov	r7, r0
 801545a:	d102      	bne.n	8015462 <__cvt+0x66>
 801545c:	f019 0f01 	tst.w	r9, #1
 8015460:	d022      	beq.n	80154a8 <__cvt+0xac>
 8015462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015466:	eb07 0906 	add.w	r9, r7, r6
 801546a:	d110      	bne.n	801548e <__cvt+0x92>
 801546c:	783b      	ldrb	r3, [r7, #0]
 801546e:	2b30      	cmp	r3, #48	; 0x30
 8015470:	d10a      	bne.n	8015488 <__cvt+0x8c>
 8015472:	2200      	movs	r2, #0
 8015474:	2300      	movs	r3, #0
 8015476:	4620      	mov	r0, r4
 8015478:	4629      	mov	r1, r5
 801547a:	f7eb fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 801547e:	b918      	cbnz	r0, 8015488 <__cvt+0x8c>
 8015480:	f1c6 0601 	rsb	r6, r6, #1
 8015484:	f8ca 6000 	str.w	r6, [sl]
 8015488:	f8da 3000 	ldr.w	r3, [sl]
 801548c:	4499      	add	r9, r3
 801548e:	2200      	movs	r2, #0
 8015490:	2300      	movs	r3, #0
 8015492:	4620      	mov	r0, r4
 8015494:	4629      	mov	r1, r5
 8015496:	f7eb fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 801549a:	b108      	cbz	r0, 80154a0 <__cvt+0xa4>
 801549c:	f8cd 900c 	str.w	r9, [sp, #12]
 80154a0:	2230      	movs	r2, #48	; 0x30
 80154a2:	9b03      	ldr	r3, [sp, #12]
 80154a4:	454b      	cmp	r3, r9
 80154a6:	d307      	bcc.n	80154b8 <__cvt+0xbc>
 80154a8:	9b03      	ldr	r3, [sp, #12]
 80154aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154ac:	1bdb      	subs	r3, r3, r7
 80154ae:	4638      	mov	r0, r7
 80154b0:	6013      	str	r3, [r2, #0]
 80154b2:	b004      	add	sp, #16
 80154b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b8:	1c59      	adds	r1, r3, #1
 80154ba:	9103      	str	r1, [sp, #12]
 80154bc:	701a      	strb	r2, [r3, #0]
 80154be:	e7f0      	b.n	80154a2 <__cvt+0xa6>

080154c0 <__exponent>:
 80154c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154c2:	4603      	mov	r3, r0
 80154c4:	2900      	cmp	r1, #0
 80154c6:	bfb8      	it	lt
 80154c8:	4249      	neglt	r1, r1
 80154ca:	f803 2b02 	strb.w	r2, [r3], #2
 80154ce:	bfb4      	ite	lt
 80154d0:	222d      	movlt	r2, #45	; 0x2d
 80154d2:	222b      	movge	r2, #43	; 0x2b
 80154d4:	2909      	cmp	r1, #9
 80154d6:	7042      	strb	r2, [r0, #1]
 80154d8:	dd2a      	ble.n	8015530 <__exponent+0x70>
 80154da:	f10d 0407 	add.w	r4, sp, #7
 80154de:	46a4      	mov	ip, r4
 80154e0:	270a      	movs	r7, #10
 80154e2:	46a6      	mov	lr, r4
 80154e4:	460a      	mov	r2, r1
 80154e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80154ea:	fb07 1516 	mls	r5, r7, r6, r1
 80154ee:	3530      	adds	r5, #48	; 0x30
 80154f0:	2a63      	cmp	r2, #99	; 0x63
 80154f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80154f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80154fa:	4631      	mov	r1, r6
 80154fc:	dcf1      	bgt.n	80154e2 <__exponent+0x22>
 80154fe:	3130      	adds	r1, #48	; 0x30
 8015500:	f1ae 0502 	sub.w	r5, lr, #2
 8015504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015508:	1c44      	adds	r4, r0, #1
 801550a:	4629      	mov	r1, r5
 801550c:	4561      	cmp	r1, ip
 801550e:	d30a      	bcc.n	8015526 <__exponent+0x66>
 8015510:	f10d 0209 	add.w	r2, sp, #9
 8015514:	eba2 020e 	sub.w	r2, r2, lr
 8015518:	4565      	cmp	r5, ip
 801551a:	bf88      	it	hi
 801551c:	2200      	movhi	r2, #0
 801551e:	4413      	add	r3, r2
 8015520:	1a18      	subs	r0, r3, r0
 8015522:	b003      	add	sp, #12
 8015524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015526:	f811 2b01 	ldrb.w	r2, [r1], #1
 801552a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801552e:	e7ed      	b.n	801550c <__exponent+0x4c>
 8015530:	2330      	movs	r3, #48	; 0x30
 8015532:	3130      	adds	r1, #48	; 0x30
 8015534:	7083      	strb	r3, [r0, #2]
 8015536:	70c1      	strb	r1, [r0, #3]
 8015538:	1d03      	adds	r3, r0, #4
 801553a:	e7f1      	b.n	8015520 <__exponent+0x60>

0801553c <_printf_float>:
 801553c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015540:	ed2d 8b02 	vpush	{d8}
 8015544:	b08d      	sub	sp, #52	; 0x34
 8015546:	460c      	mov	r4, r1
 8015548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801554c:	4616      	mov	r6, r2
 801554e:	461f      	mov	r7, r3
 8015550:	4605      	mov	r5, r0
 8015552:	f002 ff8d 	bl	8018470 <_localeconv_r>
 8015556:	f8d0 a000 	ldr.w	sl, [r0]
 801555a:	4650      	mov	r0, sl
 801555c:	f7ea fe38 	bl	80001d0 <strlen>
 8015560:	2300      	movs	r3, #0
 8015562:	930a      	str	r3, [sp, #40]	; 0x28
 8015564:	6823      	ldr	r3, [r4, #0]
 8015566:	9305      	str	r3, [sp, #20]
 8015568:	f8d8 3000 	ldr.w	r3, [r8]
 801556c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015570:	3307      	adds	r3, #7
 8015572:	f023 0307 	bic.w	r3, r3, #7
 8015576:	f103 0208 	add.w	r2, r3, #8
 801557a:	f8c8 2000 	str.w	r2, [r8]
 801557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801558a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801558e:	9307      	str	r3, [sp, #28]
 8015590:	f8cd 8018 	str.w	r8, [sp, #24]
 8015594:	ee08 0a10 	vmov	s16, r0
 8015598:	4b9f      	ldr	r3, [pc, #636]	; (8015818 <_printf_float+0x2dc>)
 801559a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801559e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155a2:	f7eb fac3 	bl	8000b2c <__aeabi_dcmpun>
 80155a6:	bb88      	cbnz	r0, 801560c <_printf_float+0xd0>
 80155a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80155ac:	4b9a      	ldr	r3, [pc, #616]	; (8015818 <_printf_float+0x2dc>)
 80155ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80155b2:	f7eb fa9d 	bl	8000af0 <__aeabi_dcmple>
 80155b6:	bb48      	cbnz	r0, 801560c <_printf_float+0xd0>
 80155b8:	2200      	movs	r2, #0
 80155ba:	2300      	movs	r3, #0
 80155bc:	4640      	mov	r0, r8
 80155be:	4649      	mov	r1, r9
 80155c0:	f7eb fa8c 	bl	8000adc <__aeabi_dcmplt>
 80155c4:	b110      	cbz	r0, 80155cc <_printf_float+0x90>
 80155c6:	232d      	movs	r3, #45	; 0x2d
 80155c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155cc:	4b93      	ldr	r3, [pc, #588]	; (801581c <_printf_float+0x2e0>)
 80155ce:	4894      	ldr	r0, [pc, #592]	; (8015820 <_printf_float+0x2e4>)
 80155d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80155d4:	bf94      	ite	ls
 80155d6:	4698      	movls	r8, r3
 80155d8:	4680      	movhi	r8, r0
 80155da:	2303      	movs	r3, #3
 80155dc:	6123      	str	r3, [r4, #16]
 80155de:	9b05      	ldr	r3, [sp, #20]
 80155e0:	f023 0204 	bic.w	r2, r3, #4
 80155e4:	6022      	str	r2, [r4, #0]
 80155e6:	f04f 0900 	mov.w	r9, #0
 80155ea:	9700      	str	r7, [sp, #0]
 80155ec:	4633      	mov	r3, r6
 80155ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80155f0:	4621      	mov	r1, r4
 80155f2:	4628      	mov	r0, r5
 80155f4:	f000 f9d8 	bl	80159a8 <_printf_common>
 80155f8:	3001      	adds	r0, #1
 80155fa:	f040 8090 	bne.w	801571e <_printf_float+0x1e2>
 80155fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015602:	b00d      	add	sp, #52	; 0x34
 8015604:	ecbd 8b02 	vpop	{d8}
 8015608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801560c:	4642      	mov	r2, r8
 801560e:	464b      	mov	r3, r9
 8015610:	4640      	mov	r0, r8
 8015612:	4649      	mov	r1, r9
 8015614:	f7eb fa8a 	bl	8000b2c <__aeabi_dcmpun>
 8015618:	b140      	cbz	r0, 801562c <_printf_float+0xf0>
 801561a:	464b      	mov	r3, r9
 801561c:	2b00      	cmp	r3, #0
 801561e:	bfbc      	itt	lt
 8015620:	232d      	movlt	r3, #45	; 0x2d
 8015622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015626:	487f      	ldr	r0, [pc, #508]	; (8015824 <_printf_float+0x2e8>)
 8015628:	4b7f      	ldr	r3, [pc, #508]	; (8015828 <_printf_float+0x2ec>)
 801562a:	e7d1      	b.n	80155d0 <_printf_float+0x94>
 801562c:	6863      	ldr	r3, [r4, #4]
 801562e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015632:	9206      	str	r2, [sp, #24]
 8015634:	1c5a      	adds	r2, r3, #1
 8015636:	d13f      	bne.n	80156b8 <_printf_float+0x17c>
 8015638:	2306      	movs	r3, #6
 801563a:	6063      	str	r3, [r4, #4]
 801563c:	9b05      	ldr	r3, [sp, #20]
 801563e:	6861      	ldr	r1, [r4, #4]
 8015640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015644:	2300      	movs	r3, #0
 8015646:	9303      	str	r3, [sp, #12]
 8015648:	ab0a      	add	r3, sp, #40	; 0x28
 801564a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801564e:	ab09      	add	r3, sp, #36	; 0x24
 8015650:	ec49 8b10 	vmov	d0, r8, r9
 8015654:	9300      	str	r3, [sp, #0]
 8015656:	6022      	str	r2, [r4, #0]
 8015658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801565c:	4628      	mov	r0, r5
 801565e:	f7ff fecd 	bl	80153fc <__cvt>
 8015662:	9b06      	ldr	r3, [sp, #24]
 8015664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015666:	2b47      	cmp	r3, #71	; 0x47
 8015668:	4680      	mov	r8, r0
 801566a:	d108      	bne.n	801567e <_printf_float+0x142>
 801566c:	1cc8      	adds	r0, r1, #3
 801566e:	db02      	blt.n	8015676 <_printf_float+0x13a>
 8015670:	6863      	ldr	r3, [r4, #4]
 8015672:	4299      	cmp	r1, r3
 8015674:	dd41      	ble.n	80156fa <_printf_float+0x1be>
 8015676:	f1ab 0b02 	sub.w	fp, fp, #2
 801567a:	fa5f fb8b 	uxtb.w	fp, fp
 801567e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015682:	d820      	bhi.n	80156c6 <_printf_float+0x18a>
 8015684:	3901      	subs	r1, #1
 8015686:	465a      	mov	r2, fp
 8015688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801568c:	9109      	str	r1, [sp, #36]	; 0x24
 801568e:	f7ff ff17 	bl	80154c0 <__exponent>
 8015692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015694:	1813      	adds	r3, r2, r0
 8015696:	2a01      	cmp	r2, #1
 8015698:	4681      	mov	r9, r0
 801569a:	6123      	str	r3, [r4, #16]
 801569c:	dc02      	bgt.n	80156a4 <_printf_float+0x168>
 801569e:	6822      	ldr	r2, [r4, #0]
 80156a0:	07d2      	lsls	r2, r2, #31
 80156a2:	d501      	bpl.n	80156a8 <_printf_float+0x16c>
 80156a4:	3301      	adds	r3, #1
 80156a6:	6123      	str	r3, [r4, #16]
 80156a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d09c      	beq.n	80155ea <_printf_float+0xae>
 80156b0:	232d      	movs	r3, #45	; 0x2d
 80156b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80156b6:	e798      	b.n	80155ea <_printf_float+0xae>
 80156b8:	9a06      	ldr	r2, [sp, #24]
 80156ba:	2a47      	cmp	r2, #71	; 0x47
 80156bc:	d1be      	bne.n	801563c <_printf_float+0x100>
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1bc      	bne.n	801563c <_printf_float+0x100>
 80156c2:	2301      	movs	r3, #1
 80156c4:	e7b9      	b.n	801563a <_printf_float+0xfe>
 80156c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80156ca:	d118      	bne.n	80156fe <_printf_float+0x1c2>
 80156cc:	2900      	cmp	r1, #0
 80156ce:	6863      	ldr	r3, [r4, #4]
 80156d0:	dd0b      	ble.n	80156ea <_printf_float+0x1ae>
 80156d2:	6121      	str	r1, [r4, #16]
 80156d4:	b913      	cbnz	r3, 80156dc <_printf_float+0x1a0>
 80156d6:	6822      	ldr	r2, [r4, #0]
 80156d8:	07d0      	lsls	r0, r2, #31
 80156da:	d502      	bpl.n	80156e2 <_printf_float+0x1a6>
 80156dc:	3301      	adds	r3, #1
 80156de:	440b      	add	r3, r1
 80156e0:	6123      	str	r3, [r4, #16]
 80156e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80156e4:	f04f 0900 	mov.w	r9, #0
 80156e8:	e7de      	b.n	80156a8 <_printf_float+0x16c>
 80156ea:	b913      	cbnz	r3, 80156f2 <_printf_float+0x1b6>
 80156ec:	6822      	ldr	r2, [r4, #0]
 80156ee:	07d2      	lsls	r2, r2, #31
 80156f0:	d501      	bpl.n	80156f6 <_printf_float+0x1ba>
 80156f2:	3302      	adds	r3, #2
 80156f4:	e7f4      	b.n	80156e0 <_printf_float+0x1a4>
 80156f6:	2301      	movs	r3, #1
 80156f8:	e7f2      	b.n	80156e0 <_printf_float+0x1a4>
 80156fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80156fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015700:	4299      	cmp	r1, r3
 8015702:	db05      	blt.n	8015710 <_printf_float+0x1d4>
 8015704:	6823      	ldr	r3, [r4, #0]
 8015706:	6121      	str	r1, [r4, #16]
 8015708:	07d8      	lsls	r0, r3, #31
 801570a:	d5ea      	bpl.n	80156e2 <_printf_float+0x1a6>
 801570c:	1c4b      	adds	r3, r1, #1
 801570e:	e7e7      	b.n	80156e0 <_printf_float+0x1a4>
 8015710:	2900      	cmp	r1, #0
 8015712:	bfd4      	ite	le
 8015714:	f1c1 0202 	rsble	r2, r1, #2
 8015718:	2201      	movgt	r2, #1
 801571a:	4413      	add	r3, r2
 801571c:	e7e0      	b.n	80156e0 <_printf_float+0x1a4>
 801571e:	6823      	ldr	r3, [r4, #0]
 8015720:	055a      	lsls	r2, r3, #21
 8015722:	d407      	bmi.n	8015734 <_printf_float+0x1f8>
 8015724:	6923      	ldr	r3, [r4, #16]
 8015726:	4642      	mov	r2, r8
 8015728:	4631      	mov	r1, r6
 801572a:	4628      	mov	r0, r5
 801572c:	47b8      	blx	r7
 801572e:	3001      	adds	r0, #1
 8015730:	d12c      	bne.n	801578c <_printf_float+0x250>
 8015732:	e764      	b.n	80155fe <_printf_float+0xc2>
 8015734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015738:	f240 80e0 	bls.w	80158fc <_printf_float+0x3c0>
 801573c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015740:	2200      	movs	r2, #0
 8015742:	2300      	movs	r3, #0
 8015744:	f7eb f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 8015748:	2800      	cmp	r0, #0
 801574a:	d034      	beq.n	80157b6 <_printf_float+0x27a>
 801574c:	4a37      	ldr	r2, [pc, #220]	; (801582c <_printf_float+0x2f0>)
 801574e:	2301      	movs	r3, #1
 8015750:	4631      	mov	r1, r6
 8015752:	4628      	mov	r0, r5
 8015754:	47b8      	blx	r7
 8015756:	3001      	adds	r0, #1
 8015758:	f43f af51 	beq.w	80155fe <_printf_float+0xc2>
 801575c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015760:	429a      	cmp	r2, r3
 8015762:	db02      	blt.n	801576a <_printf_float+0x22e>
 8015764:	6823      	ldr	r3, [r4, #0]
 8015766:	07d8      	lsls	r0, r3, #31
 8015768:	d510      	bpl.n	801578c <_printf_float+0x250>
 801576a:	ee18 3a10 	vmov	r3, s16
 801576e:	4652      	mov	r2, sl
 8015770:	4631      	mov	r1, r6
 8015772:	4628      	mov	r0, r5
 8015774:	47b8      	blx	r7
 8015776:	3001      	adds	r0, #1
 8015778:	f43f af41 	beq.w	80155fe <_printf_float+0xc2>
 801577c:	f04f 0800 	mov.w	r8, #0
 8015780:	f104 091a 	add.w	r9, r4, #26
 8015784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015786:	3b01      	subs	r3, #1
 8015788:	4543      	cmp	r3, r8
 801578a:	dc09      	bgt.n	80157a0 <_printf_float+0x264>
 801578c:	6823      	ldr	r3, [r4, #0]
 801578e:	079b      	lsls	r3, r3, #30
 8015790:	f100 8105 	bmi.w	801599e <_printf_float+0x462>
 8015794:	68e0      	ldr	r0, [r4, #12]
 8015796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015798:	4298      	cmp	r0, r3
 801579a:	bfb8      	it	lt
 801579c:	4618      	movlt	r0, r3
 801579e:	e730      	b.n	8015602 <_printf_float+0xc6>
 80157a0:	2301      	movs	r3, #1
 80157a2:	464a      	mov	r2, r9
 80157a4:	4631      	mov	r1, r6
 80157a6:	4628      	mov	r0, r5
 80157a8:	47b8      	blx	r7
 80157aa:	3001      	adds	r0, #1
 80157ac:	f43f af27 	beq.w	80155fe <_printf_float+0xc2>
 80157b0:	f108 0801 	add.w	r8, r8, #1
 80157b4:	e7e6      	b.n	8015784 <_printf_float+0x248>
 80157b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	dc39      	bgt.n	8015830 <_printf_float+0x2f4>
 80157bc:	4a1b      	ldr	r2, [pc, #108]	; (801582c <_printf_float+0x2f0>)
 80157be:	2301      	movs	r3, #1
 80157c0:	4631      	mov	r1, r6
 80157c2:	4628      	mov	r0, r5
 80157c4:	47b8      	blx	r7
 80157c6:	3001      	adds	r0, #1
 80157c8:	f43f af19 	beq.w	80155fe <_printf_float+0xc2>
 80157cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157d0:	4313      	orrs	r3, r2
 80157d2:	d102      	bne.n	80157da <_printf_float+0x29e>
 80157d4:	6823      	ldr	r3, [r4, #0]
 80157d6:	07d9      	lsls	r1, r3, #31
 80157d8:	d5d8      	bpl.n	801578c <_printf_float+0x250>
 80157da:	ee18 3a10 	vmov	r3, s16
 80157de:	4652      	mov	r2, sl
 80157e0:	4631      	mov	r1, r6
 80157e2:	4628      	mov	r0, r5
 80157e4:	47b8      	blx	r7
 80157e6:	3001      	adds	r0, #1
 80157e8:	f43f af09 	beq.w	80155fe <_printf_float+0xc2>
 80157ec:	f04f 0900 	mov.w	r9, #0
 80157f0:	f104 0a1a 	add.w	sl, r4, #26
 80157f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f6:	425b      	negs	r3, r3
 80157f8:	454b      	cmp	r3, r9
 80157fa:	dc01      	bgt.n	8015800 <_printf_float+0x2c4>
 80157fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157fe:	e792      	b.n	8015726 <_printf_float+0x1ea>
 8015800:	2301      	movs	r3, #1
 8015802:	4652      	mov	r2, sl
 8015804:	4631      	mov	r1, r6
 8015806:	4628      	mov	r0, r5
 8015808:	47b8      	blx	r7
 801580a:	3001      	adds	r0, #1
 801580c:	f43f aef7 	beq.w	80155fe <_printf_float+0xc2>
 8015810:	f109 0901 	add.w	r9, r9, #1
 8015814:	e7ee      	b.n	80157f4 <_printf_float+0x2b8>
 8015816:	bf00      	nop
 8015818:	7fefffff 	.word	0x7fefffff
 801581c:	0801ad60 	.word	0x0801ad60
 8015820:	0801ad64 	.word	0x0801ad64
 8015824:	0801ad6c 	.word	0x0801ad6c
 8015828:	0801ad68 	.word	0x0801ad68
 801582c:	0801ad70 	.word	0x0801ad70
 8015830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015834:	429a      	cmp	r2, r3
 8015836:	bfa8      	it	ge
 8015838:	461a      	movge	r2, r3
 801583a:	2a00      	cmp	r2, #0
 801583c:	4691      	mov	r9, r2
 801583e:	dc37      	bgt.n	80158b0 <_printf_float+0x374>
 8015840:	f04f 0b00 	mov.w	fp, #0
 8015844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015848:	f104 021a 	add.w	r2, r4, #26
 801584c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801584e:	9305      	str	r3, [sp, #20]
 8015850:	eba3 0309 	sub.w	r3, r3, r9
 8015854:	455b      	cmp	r3, fp
 8015856:	dc33      	bgt.n	80158c0 <_printf_float+0x384>
 8015858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801585c:	429a      	cmp	r2, r3
 801585e:	db3b      	blt.n	80158d8 <_printf_float+0x39c>
 8015860:	6823      	ldr	r3, [r4, #0]
 8015862:	07da      	lsls	r2, r3, #31
 8015864:	d438      	bmi.n	80158d8 <_printf_float+0x39c>
 8015866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015868:	9b05      	ldr	r3, [sp, #20]
 801586a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	eba2 0901 	sub.w	r9, r2, r1
 8015872:	4599      	cmp	r9, r3
 8015874:	bfa8      	it	ge
 8015876:	4699      	movge	r9, r3
 8015878:	f1b9 0f00 	cmp.w	r9, #0
 801587c:	dc35      	bgt.n	80158ea <_printf_float+0x3ae>
 801587e:	f04f 0800 	mov.w	r8, #0
 8015882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015886:	f104 0a1a 	add.w	sl, r4, #26
 801588a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801588e:	1a9b      	subs	r3, r3, r2
 8015890:	eba3 0309 	sub.w	r3, r3, r9
 8015894:	4543      	cmp	r3, r8
 8015896:	f77f af79 	ble.w	801578c <_printf_float+0x250>
 801589a:	2301      	movs	r3, #1
 801589c:	4652      	mov	r2, sl
 801589e:	4631      	mov	r1, r6
 80158a0:	4628      	mov	r0, r5
 80158a2:	47b8      	blx	r7
 80158a4:	3001      	adds	r0, #1
 80158a6:	f43f aeaa 	beq.w	80155fe <_printf_float+0xc2>
 80158aa:	f108 0801 	add.w	r8, r8, #1
 80158ae:	e7ec      	b.n	801588a <_printf_float+0x34e>
 80158b0:	4613      	mov	r3, r2
 80158b2:	4631      	mov	r1, r6
 80158b4:	4642      	mov	r2, r8
 80158b6:	4628      	mov	r0, r5
 80158b8:	47b8      	blx	r7
 80158ba:	3001      	adds	r0, #1
 80158bc:	d1c0      	bne.n	8015840 <_printf_float+0x304>
 80158be:	e69e      	b.n	80155fe <_printf_float+0xc2>
 80158c0:	2301      	movs	r3, #1
 80158c2:	4631      	mov	r1, r6
 80158c4:	4628      	mov	r0, r5
 80158c6:	9205      	str	r2, [sp, #20]
 80158c8:	47b8      	blx	r7
 80158ca:	3001      	adds	r0, #1
 80158cc:	f43f ae97 	beq.w	80155fe <_printf_float+0xc2>
 80158d0:	9a05      	ldr	r2, [sp, #20]
 80158d2:	f10b 0b01 	add.w	fp, fp, #1
 80158d6:	e7b9      	b.n	801584c <_printf_float+0x310>
 80158d8:	ee18 3a10 	vmov	r3, s16
 80158dc:	4652      	mov	r2, sl
 80158de:	4631      	mov	r1, r6
 80158e0:	4628      	mov	r0, r5
 80158e2:	47b8      	blx	r7
 80158e4:	3001      	adds	r0, #1
 80158e6:	d1be      	bne.n	8015866 <_printf_float+0x32a>
 80158e8:	e689      	b.n	80155fe <_printf_float+0xc2>
 80158ea:	9a05      	ldr	r2, [sp, #20]
 80158ec:	464b      	mov	r3, r9
 80158ee:	4442      	add	r2, r8
 80158f0:	4631      	mov	r1, r6
 80158f2:	4628      	mov	r0, r5
 80158f4:	47b8      	blx	r7
 80158f6:	3001      	adds	r0, #1
 80158f8:	d1c1      	bne.n	801587e <_printf_float+0x342>
 80158fa:	e680      	b.n	80155fe <_printf_float+0xc2>
 80158fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158fe:	2a01      	cmp	r2, #1
 8015900:	dc01      	bgt.n	8015906 <_printf_float+0x3ca>
 8015902:	07db      	lsls	r3, r3, #31
 8015904:	d538      	bpl.n	8015978 <_printf_float+0x43c>
 8015906:	2301      	movs	r3, #1
 8015908:	4642      	mov	r2, r8
 801590a:	4631      	mov	r1, r6
 801590c:	4628      	mov	r0, r5
 801590e:	47b8      	blx	r7
 8015910:	3001      	adds	r0, #1
 8015912:	f43f ae74 	beq.w	80155fe <_printf_float+0xc2>
 8015916:	ee18 3a10 	vmov	r3, s16
 801591a:	4652      	mov	r2, sl
 801591c:	4631      	mov	r1, r6
 801591e:	4628      	mov	r0, r5
 8015920:	47b8      	blx	r7
 8015922:	3001      	adds	r0, #1
 8015924:	f43f ae6b 	beq.w	80155fe <_printf_float+0xc2>
 8015928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801592c:	2200      	movs	r2, #0
 801592e:	2300      	movs	r3, #0
 8015930:	f7eb f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8015934:	b9d8      	cbnz	r0, 801596e <_printf_float+0x432>
 8015936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015938:	f108 0201 	add.w	r2, r8, #1
 801593c:	3b01      	subs	r3, #1
 801593e:	4631      	mov	r1, r6
 8015940:	4628      	mov	r0, r5
 8015942:	47b8      	blx	r7
 8015944:	3001      	adds	r0, #1
 8015946:	d10e      	bne.n	8015966 <_printf_float+0x42a>
 8015948:	e659      	b.n	80155fe <_printf_float+0xc2>
 801594a:	2301      	movs	r3, #1
 801594c:	4652      	mov	r2, sl
 801594e:	4631      	mov	r1, r6
 8015950:	4628      	mov	r0, r5
 8015952:	47b8      	blx	r7
 8015954:	3001      	adds	r0, #1
 8015956:	f43f ae52 	beq.w	80155fe <_printf_float+0xc2>
 801595a:	f108 0801 	add.w	r8, r8, #1
 801595e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015960:	3b01      	subs	r3, #1
 8015962:	4543      	cmp	r3, r8
 8015964:	dcf1      	bgt.n	801594a <_printf_float+0x40e>
 8015966:	464b      	mov	r3, r9
 8015968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801596c:	e6dc      	b.n	8015728 <_printf_float+0x1ec>
 801596e:	f04f 0800 	mov.w	r8, #0
 8015972:	f104 0a1a 	add.w	sl, r4, #26
 8015976:	e7f2      	b.n	801595e <_printf_float+0x422>
 8015978:	2301      	movs	r3, #1
 801597a:	4642      	mov	r2, r8
 801597c:	e7df      	b.n	801593e <_printf_float+0x402>
 801597e:	2301      	movs	r3, #1
 8015980:	464a      	mov	r2, r9
 8015982:	4631      	mov	r1, r6
 8015984:	4628      	mov	r0, r5
 8015986:	47b8      	blx	r7
 8015988:	3001      	adds	r0, #1
 801598a:	f43f ae38 	beq.w	80155fe <_printf_float+0xc2>
 801598e:	f108 0801 	add.w	r8, r8, #1
 8015992:	68e3      	ldr	r3, [r4, #12]
 8015994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015996:	1a5b      	subs	r3, r3, r1
 8015998:	4543      	cmp	r3, r8
 801599a:	dcf0      	bgt.n	801597e <_printf_float+0x442>
 801599c:	e6fa      	b.n	8015794 <_printf_float+0x258>
 801599e:	f04f 0800 	mov.w	r8, #0
 80159a2:	f104 0919 	add.w	r9, r4, #25
 80159a6:	e7f4      	b.n	8015992 <_printf_float+0x456>

080159a8 <_printf_common>:
 80159a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159ac:	4616      	mov	r6, r2
 80159ae:	4699      	mov	r9, r3
 80159b0:	688a      	ldr	r2, [r1, #8]
 80159b2:	690b      	ldr	r3, [r1, #16]
 80159b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80159b8:	4293      	cmp	r3, r2
 80159ba:	bfb8      	it	lt
 80159bc:	4613      	movlt	r3, r2
 80159be:	6033      	str	r3, [r6, #0]
 80159c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80159c4:	4607      	mov	r7, r0
 80159c6:	460c      	mov	r4, r1
 80159c8:	b10a      	cbz	r2, 80159ce <_printf_common+0x26>
 80159ca:	3301      	adds	r3, #1
 80159cc:	6033      	str	r3, [r6, #0]
 80159ce:	6823      	ldr	r3, [r4, #0]
 80159d0:	0699      	lsls	r1, r3, #26
 80159d2:	bf42      	ittt	mi
 80159d4:	6833      	ldrmi	r3, [r6, #0]
 80159d6:	3302      	addmi	r3, #2
 80159d8:	6033      	strmi	r3, [r6, #0]
 80159da:	6825      	ldr	r5, [r4, #0]
 80159dc:	f015 0506 	ands.w	r5, r5, #6
 80159e0:	d106      	bne.n	80159f0 <_printf_common+0x48>
 80159e2:	f104 0a19 	add.w	sl, r4, #25
 80159e6:	68e3      	ldr	r3, [r4, #12]
 80159e8:	6832      	ldr	r2, [r6, #0]
 80159ea:	1a9b      	subs	r3, r3, r2
 80159ec:	42ab      	cmp	r3, r5
 80159ee:	dc26      	bgt.n	8015a3e <_printf_common+0x96>
 80159f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80159f4:	1e13      	subs	r3, r2, #0
 80159f6:	6822      	ldr	r2, [r4, #0]
 80159f8:	bf18      	it	ne
 80159fa:	2301      	movne	r3, #1
 80159fc:	0692      	lsls	r2, r2, #26
 80159fe:	d42b      	bmi.n	8015a58 <_printf_common+0xb0>
 8015a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a04:	4649      	mov	r1, r9
 8015a06:	4638      	mov	r0, r7
 8015a08:	47c0      	blx	r8
 8015a0a:	3001      	adds	r0, #1
 8015a0c:	d01e      	beq.n	8015a4c <_printf_common+0xa4>
 8015a0e:	6823      	ldr	r3, [r4, #0]
 8015a10:	68e5      	ldr	r5, [r4, #12]
 8015a12:	6832      	ldr	r2, [r6, #0]
 8015a14:	f003 0306 	and.w	r3, r3, #6
 8015a18:	2b04      	cmp	r3, #4
 8015a1a:	bf08      	it	eq
 8015a1c:	1aad      	subeq	r5, r5, r2
 8015a1e:	68a3      	ldr	r3, [r4, #8]
 8015a20:	6922      	ldr	r2, [r4, #16]
 8015a22:	bf0c      	ite	eq
 8015a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a28:	2500      	movne	r5, #0
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	bfc4      	itt	gt
 8015a2e:	1a9b      	subgt	r3, r3, r2
 8015a30:	18ed      	addgt	r5, r5, r3
 8015a32:	2600      	movs	r6, #0
 8015a34:	341a      	adds	r4, #26
 8015a36:	42b5      	cmp	r5, r6
 8015a38:	d11a      	bne.n	8015a70 <_printf_common+0xc8>
 8015a3a:	2000      	movs	r0, #0
 8015a3c:	e008      	b.n	8015a50 <_printf_common+0xa8>
 8015a3e:	2301      	movs	r3, #1
 8015a40:	4652      	mov	r2, sl
 8015a42:	4649      	mov	r1, r9
 8015a44:	4638      	mov	r0, r7
 8015a46:	47c0      	blx	r8
 8015a48:	3001      	adds	r0, #1
 8015a4a:	d103      	bne.n	8015a54 <_printf_common+0xac>
 8015a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a54:	3501      	adds	r5, #1
 8015a56:	e7c6      	b.n	80159e6 <_printf_common+0x3e>
 8015a58:	18e1      	adds	r1, r4, r3
 8015a5a:	1c5a      	adds	r2, r3, #1
 8015a5c:	2030      	movs	r0, #48	; 0x30
 8015a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015a62:	4422      	add	r2, r4
 8015a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015a6c:	3302      	adds	r3, #2
 8015a6e:	e7c7      	b.n	8015a00 <_printf_common+0x58>
 8015a70:	2301      	movs	r3, #1
 8015a72:	4622      	mov	r2, r4
 8015a74:	4649      	mov	r1, r9
 8015a76:	4638      	mov	r0, r7
 8015a78:	47c0      	blx	r8
 8015a7a:	3001      	adds	r0, #1
 8015a7c:	d0e6      	beq.n	8015a4c <_printf_common+0xa4>
 8015a7e:	3601      	adds	r6, #1
 8015a80:	e7d9      	b.n	8015a36 <_printf_common+0x8e>
	...

08015a84 <_printf_i>:
 8015a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015a88:	460c      	mov	r4, r1
 8015a8a:	4691      	mov	r9, r2
 8015a8c:	7e27      	ldrb	r7, [r4, #24]
 8015a8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015a90:	2f78      	cmp	r7, #120	; 0x78
 8015a92:	4680      	mov	r8, r0
 8015a94:	469a      	mov	sl, r3
 8015a96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a9a:	d807      	bhi.n	8015aac <_printf_i+0x28>
 8015a9c:	2f62      	cmp	r7, #98	; 0x62
 8015a9e:	d80a      	bhi.n	8015ab6 <_printf_i+0x32>
 8015aa0:	2f00      	cmp	r7, #0
 8015aa2:	f000 80d8 	beq.w	8015c56 <_printf_i+0x1d2>
 8015aa6:	2f58      	cmp	r7, #88	; 0x58
 8015aa8:	f000 80a3 	beq.w	8015bf2 <_printf_i+0x16e>
 8015aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ab4:	e03a      	b.n	8015b2c <_printf_i+0xa8>
 8015ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015aba:	2b15      	cmp	r3, #21
 8015abc:	d8f6      	bhi.n	8015aac <_printf_i+0x28>
 8015abe:	a001      	add	r0, pc, #4	; (adr r0, 8015ac4 <_printf_i+0x40>)
 8015ac0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015ac4:	08015b1d 	.word	0x08015b1d
 8015ac8:	08015b31 	.word	0x08015b31
 8015acc:	08015aad 	.word	0x08015aad
 8015ad0:	08015aad 	.word	0x08015aad
 8015ad4:	08015aad 	.word	0x08015aad
 8015ad8:	08015aad 	.word	0x08015aad
 8015adc:	08015b31 	.word	0x08015b31
 8015ae0:	08015aad 	.word	0x08015aad
 8015ae4:	08015aad 	.word	0x08015aad
 8015ae8:	08015aad 	.word	0x08015aad
 8015aec:	08015aad 	.word	0x08015aad
 8015af0:	08015c3d 	.word	0x08015c3d
 8015af4:	08015b61 	.word	0x08015b61
 8015af8:	08015c1f 	.word	0x08015c1f
 8015afc:	08015aad 	.word	0x08015aad
 8015b00:	08015aad 	.word	0x08015aad
 8015b04:	08015c5f 	.word	0x08015c5f
 8015b08:	08015aad 	.word	0x08015aad
 8015b0c:	08015b61 	.word	0x08015b61
 8015b10:	08015aad 	.word	0x08015aad
 8015b14:	08015aad 	.word	0x08015aad
 8015b18:	08015c27 	.word	0x08015c27
 8015b1c:	680b      	ldr	r3, [r1, #0]
 8015b1e:	1d1a      	adds	r2, r3, #4
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	600a      	str	r2, [r1, #0]
 8015b24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	e0a3      	b.n	8015c78 <_printf_i+0x1f4>
 8015b30:	6825      	ldr	r5, [r4, #0]
 8015b32:	6808      	ldr	r0, [r1, #0]
 8015b34:	062e      	lsls	r6, r5, #24
 8015b36:	f100 0304 	add.w	r3, r0, #4
 8015b3a:	d50a      	bpl.n	8015b52 <_printf_i+0xce>
 8015b3c:	6805      	ldr	r5, [r0, #0]
 8015b3e:	600b      	str	r3, [r1, #0]
 8015b40:	2d00      	cmp	r5, #0
 8015b42:	da03      	bge.n	8015b4c <_printf_i+0xc8>
 8015b44:	232d      	movs	r3, #45	; 0x2d
 8015b46:	426d      	negs	r5, r5
 8015b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b4c:	485e      	ldr	r0, [pc, #376]	; (8015cc8 <_printf_i+0x244>)
 8015b4e:	230a      	movs	r3, #10
 8015b50:	e019      	b.n	8015b86 <_printf_i+0x102>
 8015b52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015b56:	6805      	ldr	r5, [r0, #0]
 8015b58:	600b      	str	r3, [r1, #0]
 8015b5a:	bf18      	it	ne
 8015b5c:	b22d      	sxthne	r5, r5
 8015b5e:	e7ef      	b.n	8015b40 <_printf_i+0xbc>
 8015b60:	680b      	ldr	r3, [r1, #0]
 8015b62:	6825      	ldr	r5, [r4, #0]
 8015b64:	1d18      	adds	r0, r3, #4
 8015b66:	6008      	str	r0, [r1, #0]
 8015b68:	0628      	lsls	r0, r5, #24
 8015b6a:	d501      	bpl.n	8015b70 <_printf_i+0xec>
 8015b6c:	681d      	ldr	r5, [r3, #0]
 8015b6e:	e002      	b.n	8015b76 <_printf_i+0xf2>
 8015b70:	0669      	lsls	r1, r5, #25
 8015b72:	d5fb      	bpl.n	8015b6c <_printf_i+0xe8>
 8015b74:	881d      	ldrh	r5, [r3, #0]
 8015b76:	4854      	ldr	r0, [pc, #336]	; (8015cc8 <_printf_i+0x244>)
 8015b78:	2f6f      	cmp	r7, #111	; 0x6f
 8015b7a:	bf0c      	ite	eq
 8015b7c:	2308      	moveq	r3, #8
 8015b7e:	230a      	movne	r3, #10
 8015b80:	2100      	movs	r1, #0
 8015b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015b86:	6866      	ldr	r6, [r4, #4]
 8015b88:	60a6      	str	r6, [r4, #8]
 8015b8a:	2e00      	cmp	r6, #0
 8015b8c:	bfa2      	ittt	ge
 8015b8e:	6821      	ldrge	r1, [r4, #0]
 8015b90:	f021 0104 	bicge.w	r1, r1, #4
 8015b94:	6021      	strge	r1, [r4, #0]
 8015b96:	b90d      	cbnz	r5, 8015b9c <_printf_i+0x118>
 8015b98:	2e00      	cmp	r6, #0
 8015b9a:	d04d      	beq.n	8015c38 <_printf_i+0x1b4>
 8015b9c:	4616      	mov	r6, r2
 8015b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8015ba6:	5dc7      	ldrb	r7, [r0, r7]
 8015ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015bac:	462f      	mov	r7, r5
 8015bae:	42bb      	cmp	r3, r7
 8015bb0:	460d      	mov	r5, r1
 8015bb2:	d9f4      	bls.n	8015b9e <_printf_i+0x11a>
 8015bb4:	2b08      	cmp	r3, #8
 8015bb6:	d10b      	bne.n	8015bd0 <_printf_i+0x14c>
 8015bb8:	6823      	ldr	r3, [r4, #0]
 8015bba:	07df      	lsls	r7, r3, #31
 8015bbc:	d508      	bpl.n	8015bd0 <_printf_i+0x14c>
 8015bbe:	6923      	ldr	r3, [r4, #16]
 8015bc0:	6861      	ldr	r1, [r4, #4]
 8015bc2:	4299      	cmp	r1, r3
 8015bc4:	bfde      	ittt	le
 8015bc6:	2330      	movle	r3, #48	; 0x30
 8015bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015bcc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8015bd0:	1b92      	subs	r2, r2, r6
 8015bd2:	6122      	str	r2, [r4, #16]
 8015bd4:	f8cd a000 	str.w	sl, [sp]
 8015bd8:	464b      	mov	r3, r9
 8015bda:	aa03      	add	r2, sp, #12
 8015bdc:	4621      	mov	r1, r4
 8015bde:	4640      	mov	r0, r8
 8015be0:	f7ff fee2 	bl	80159a8 <_printf_common>
 8015be4:	3001      	adds	r0, #1
 8015be6:	d14c      	bne.n	8015c82 <_printf_i+0x1fe>
 8015be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015bec:	b004      	add	sp, #16
 8015bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bf2:	4835      	ldr	r0, [pc, #212]	; (8015cc8 <_printf_i+0x244>)
 8015bf4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	680e      	ldr	r6, [r1, #0]
 8015bfc:	061f      	lsls	r7, r3, #24
 8015bfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8015c02:	600e      	str	r6, [r1, #0]
 8015c04:	d514      	bpl.n	8015c30 <_printf_i+0x1ac>
 8015c06:	07d9      	lsls	r1, r3, #31
 8015c08:	bf44      	itt	mi
 8015c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8015c0e:	6023      	strmi	r3, [r4, #0]
 8015c10:	b91d      	cbnz	r5, 8015c1a <_printf_i+0x196>
 8015c12:	6823      	ldr	r3, [r4, #0]
 8015c14:	f023 0320 	bic.w	r3, r3, #32
 8015c18:	6023      	str	r3, [r4, #0]
 8015c1a:	2310      	movs	r3, #16
 8015c1c:	e7b0      	b.n	8015b80 <_printf_i+0xfc>
 8015c1e:	6823      	ldr	r3, [r4, #0]
 8015c20:	f043 0320 	orr.w	r3, r3, #32
 8015c24:	6023      	str	r3, [r4, #0]
 8015c26:	2378      	movs	r3, #120	; 0x78
 8015c28:	4828      	ldr	r0, [pc, #160]	; (8015ccc <_printf_i+0x248>)
 8015c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c2e:	e7e3      	b.n	8015bf8 <_printf_i+0x174>
 8015c30:	065e      	lsls	r6, r3, #25
 8015c32:	bf48      	it	mi
 8015c34:	b2ad      	uxthmi	r5, r5
 8015c36:	e7e6      	b.n	8015c06 <_printf_i+0x182>
 8015c38:	4616      	mov	r6, r2
 8015c3a:	e7bb      	b.n	8015bb4 <_printf_i+0x130>
 8015c3c:	680b      	ldr	r3, [r1, #0]
 8015c3e:	6826      	ldr	r6, [r4, #0]
 8015c40:	6960      	ldr	r0, [r4, #20]
 8015c42:	1d1d      	adds	r5, r3, #4
 8015c44:	600d      	str	r5, [r1, #0]
 8015c46:	0635      	lsls	r5, r6, #24
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	d501      	bpl.n	8015c50 <_printf_i+0x1cc>
 8015c4c:	6018      	str	r0, [r3, #0]
 8015c4e:	e002      	b.n	8015c56 <_printf_i+0x1d2>
 8015c50:	0671      	lsls	r1, r6, #25
 8015c52:	d5fb      	bpl.n	8015c4c <_printf_i+0x1c8>
 8015c54:	8018      	strh	r0, [r3, #0]
 8015c56:	2300      	movs	r3, #0
 8015c58:	6123      	str	r3, [r4, #16]
 8015c5a:	4616      	mov	r6, r2
 8015c5c:	e7ba      	b.n	8015bd4 <_printf_i+0x150>
 8015c5e:	680b      	ldr	r3, [r1, #0]
 8015c60:	1d1a      	adds	r2, r3, #4
 8015c62:	600a      	str	r2, [r1, #0]
 8015c64:	681e      	ldr	r6, [r3, #0]
 8015c66:	6862      	ldr	r2, [r4, #4]
 8015c68:	2100      	movs	r1, #0
 8015c6a:	4630      	mov	r0, r6
 8015c6c:	f7ea fab8 	bl	80001e0 <memchr>
 8015c70:	b108      	cbz	r0, 8015c76 <_printf_i+0x1f2>
 8015c72:	1b80      	subs	r0, r0, r6
 8015c74:	6060      	str	r0, [r4, #4]
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	6123      	str	r3, [r4, #16]
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c80:	e7a8      	b.n	8015bd4 <_printf_i+0x150>
 8015c82:	6923      	ldr	r3, [r4, #16]
 8015c84:	4632      	mov	r2, r6
 8015c86:	4649      	mov	r1, r9
 8015c88:	4640      	mov	r0, r8
 8015c8a:	47d0      	blx	sl
 8015c8c:	3001      	adds	r0, #1
 8015c8e:	d0ab      	beq.n	8015be8 <_printf_i+0x164>
 8015c90:	6823      	ldr	r3, [r4, #0]
 8015c92:	079b      	lsls	r3, r3, #30
 8015c94:	d413      	bmi.n	8015cbe <_printf_i+0x23a>
 8015c96:	68e0      	ldr	r0, [r4, #12]
 8015c98:	9b03      	ldr	r3, [sp, #12]
 8015c9a:	4298      	cmp	r0, r3
 8015c9c:	bfb8      	it	lt
 8015c9e:	4618      	movlt	r0, r3
 8015ca0:	e7a4      	b.n	8015bec <_printf_i+0x168>
 8015ca2:	2301      	movs	r3, #1
 8015ca4:	4632      	mov	r2, r6
 8015ca6:	4649      	mov	r1, r9
 8015ca8:	4640      	mov	r0, r8
 8015caa:	47d0      	blx	sl
 8015cac:	3001      	adds	r0, #1
 8015cae:	d09b      	beq.n	8015be8 <_printf_i+0x164>
 8015cb0:	3501      	adds	r5, #1
 8015cb2:	68e3      	ldr	r3, [r4, #12]
 8015cb4:	9903      	ldr	r1, [sp, #12]
 8015cb6:	1a5b      	subs	r3, r3, r1
 8015cb8:	42ab      	cmp	r3, r5
 8015cba:	dcf2      	bgt.n	8015ca2 <_printf_i+0x21e>
 8015cbc:	e7eb      	b.n	8015c96 <_printf_i+0x212>
 8015cbe:	2500      	movs	r5, #0
 8015cc0:	f104 0619 	add.w	r6, r4, #25
 8015cc4:	e7f5      	b.n	8015cb2 <_printf_i+0x22e>
 8015cc6:	bf00      	nop
 8015cc8:	0801ad72 	.word	0x0801ad72
 8015ccc:	0801ad83 	.word	0x0801ad83

08015cd0 <_scanf_float>:
 8015cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cd4:	b087      	sub	sp, #28
 8015cd6:	4617      	mov	r7, r2
 8015cd8:	9303      	str	r3, [sp, #12]
 8015cda:	688b      	ldr	r3, [r1, #8]
 8015cdc:	1e5a      	subs	r2, r3, #1
 8015cde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015ce2:	bf83      	ittte	hi
 8015ce4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015ce8:	195b      	addhi	r3, r3, r5
 8015cea:	9302      	strhi	r3, [sp, #8]
 8015cec:	2300      	movls	r3, #0
 8015cee:	bf86      	itte	hi
 8015cf0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015cf4:	608b      	strhi	r3, [r1, #8]
 8015cf6:	9302      	strls	r3, [sp, #8]
 8015cf8:	680b      	ldr	r3, [r1, #0]
 8015cfa:	468b      	mov	fp, r1
 8015cfc:	2500      	movs	r5, #0
 8015cfe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015d02:	f84b 3b1c 	str.w	r3, [fp], #28
 8015d06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015d0a:	4680      	mov	r8, r0
 8015d0c:	460c      	mov	r4, r1
 8015d0e:	465e      	mov	r6, fp
 8015d10:	46aa      	mov	sl, r5
 8015d12:	46a9      	mov	r9, r5
 8015d14:	9501      	str	r5, [sp, #4]
 8015d16:	68a2      	ldr	r2, [r4, #8]
 8015d18:	b152      	cbz	r2, 8015d30 <_scanf_float+0x60>
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	781b      	ldrb	r3, [r3, #0]
 8015d1e:	2b4e      	cmp	r3, #78	; 0x4e
 8015d20:	d864      	bhi.n	8015dec <_scanf_float+0x11c>
 8015d22:	2b40      	cmp	r3, #64	; 0x40
 8015d24:	d83c      	bhi.n	8015da0 <_scanf_float+0xd0>
 8015d26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015d2a:	b2c8      	uxtb	r0, r1
 8015d2c:	280e      	cmp	r0, #14
 8015d2e:	d93a      	bls.n	8015da6 <_scanf_float+0xd6>
 8015d30:	f1b9 0f00 	cmp.w	r9, #0
 8015d34:	d003      	beq.n	8015d3e <_scanf_float+0x6e>
 8015d36:	6823      	ldr	r3, [r4, #0]
 8015d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015d3c:	6023      	str	r3, [r4, #0]
 8015d3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015d42:	f1ba 0f01 	cmp.w	sl, #1
 8015d46:	f200 8113 	bhi.w	8015f70 <_scanf_float+0x2a0>
 8015d4a:	455e      	cmp	r6, fp
 8015d4c:	f200 8105 	bhi.w	8015f5a <_scanf_float+0x28a>
 8015d50:	2501      	movs	r5, #1
 8015d52:	4628      	mov	r0, r5
 8015d54:	b007      	add	sp, #28
 8015d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015d5e:	2a0d      	cmp	r2, #13
 8015d60:	d8e6      	bhi.n	8015d30 <_scanf_float+0x60>
 8015d62:	a101      	add	r1, pc, #4	; (adr r1, 8015d68 <_scanf_float+0x98>)
 8015d64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015d68:	08015ea7 	.word	0x08015ea7
 8015d6c:	08015d31 	.word	0x08015d31
 8015d70:	08015d31 	.word	0x08015d31
 8015d74:	08015d31 	.word	0x08015d31
 8015d78:	08015f07 	.word	0x08015f07
 8015d7c:	08015edf 	.word	0x08015edf
 8015d80:	08015d31 	.word	0x08015d31
 8015d84:	08015d31 	.word	0x08015d31
 8015d88:	08015eb5 	.word	0x08015eb5
 8015d8c:	08015d31 	.word	0x08015d31
 8015d90:	08015d31 	.word	0x08015d31
 8015d94:	08015d31 	.word	0x08015d31
 8015d98:	08015d31 	.word	0x08015d31
 8015d9c:	08015e6d 	.word	0x08015e6d
 8015da0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015da4:	e7db      	b.n	8015d5e <_scanf_float+0x8e>
 8015da6:	290e      	cmp	r1, #14
 8015da8:	d8c2      	bhi.n	8015d30 <_scanf_float+0x60>
 8015daa:	a001      	add	r0, pc, #4	; (adr r0, 8015db0 <_scanf_float+0xe0>)
 8015dac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015db0:	08015e5f 	.word	0x08015e5f
 8015db4:	08015d31 	.word	0x08015d31
 8015db8:	08015e5f 	.word	0x08015e5f
 8015dbc:	08015ef3 	.word	0x08015ef3
 8015dc0:	08015d31 	.word	0x08015d31
 8015dc4:	08015e0d 	.word	0x08015e0d
 8015dc8:	08015e49 	.word	0x08015e49
 8015dcc:	08015e49 	.word	0x08015e49
 8015dd0:	08015e49 	.word	0x08015e49
 8015dd4:	08015e49 	.word	0x08015e49
 8015dd8:	08015e49 	.word	0x08015e49
 8015ddc:	08015e49 	.word	0x08015e49
 8015de0:	08015e49 	.word	0x08015e49
 8015de4:	08015e49 	.word	0x08015e49
 8015de8:	08015e49 	.word	0x08015e49
 8015dec:	2b6e      	cmp	r3, #110	; 0x6e
 8015dee:	d809      	bhi.n	8015e04 <_scanf_float+0x134>
 8015df0:	2b60      	cmp	r3, #96	; 0x60
 8015df2:	d8b2      	bhi.n	8015d5a <_scanf_float+0x8a>
 8015df4:	2b54      	cmp	r3, #84	; 0x54
 8015df6:	d077      	beq.n	8015ee8 <_scanf_float+0x218>
 8015df8:	2b59      	cmp	r3, #89	; 0x59
 8015dfa:	d199      	bne.n	8015d30 <_scanf_float+0x60>
 8015dfc:	2d07      	cmp	r5, #7
 8015dfe:	d197      	bne.n	8015d30 <_scanf_float+0x60>
 8015e00:	2508      	movs	r5, #8
 8015e02:	e029      	b.n	8015e58 <_scanf_float+0x188>
 8015e04:	2b74      	cmp	r3, #116	; 0x74
 8015e06:	d06f      	beq.n	8015ee8 <_scanf_float+0x218>
 8015e08:	2b79      	cmp	r3, #121	; 0x79
 8015e0a:	e7f6      	b.n	8015dfa <_scanf_float+0x12a>
 8015e0c:	6821      	ldr	r1, [r4, #0]
 8015e0e:	05c8      	lsls	r0, r1, #23
 8015e10:	d51a      	bpl.n	8015e48 <_scanf_float+0x178>
 8015e12:	9b02      	ldr	r3, [sp, #8]
 8015e14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015e18:	6021      	str	r1, [r4, #0]
 8015e1a:	f109 0901 	add.w	r9, r9, #1
 8015e1e:	b11b      	cbz	r3, 8015e28 <_scanf_float+0x158>
 8015e20:	3b01      	subs	r3, #1
 8015e22:	3201      	adds	r2, #1
 8015e24:	9302      	str	r3, [sp, #8]
 8015e26:	60a2      	str	r2, [r4, #8]
 8015e28:	68a3      	ldr	r3, [r4, #8]
 8015e2a:	3b01      	subs	r3, #1
 8015e2c:	60a3      	str	r3, [r4, #8]
 8015e2e:	6923      	ldr	r3, [r4, #16]
 8015e30:	3301      	adds	r3, #1
 8015e32:	6123      	str	r3, [r4, #16]
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	3b01      	subs	r3, #1
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	607b      	str	r3, [r7, #4]
 8015e3c:	f340 8084 	ble.w	8015f48 <_scanf_float+0x278>
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	3301      	adds	r3, #1
 8015e44:	603b      	str	r3, [r7, #0]
 8015e46:	e766      	b.n	8015d16 <_scanf_float+0x46>
 8015e48:	eb1a 0f05 	cmn.w	sl, r5
 8015e4c:	f47f af70 	bne.w	8015d30 <_scanf_float+0x60>
 8015e50:	6822      	ldr	r2, [r4, #0]
 8015e52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015e56:	6022      	str	r2, [r4, #0]
 8015e58:	f806 3b01 	strb.w	r3, [r6], #1
 8015e5c:	e7e4      	b.n	8015e28 <_scanf_float+0x158>
 8015e5e:	6822      	ldr	r2, [r4, #0]
 8015e60:	0610      	lsls	r0, r2, #24
 8015e62:	f57f af65 	bpl.w	8015d30 <_scanf_float+0x60>
 8015e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015e6a:	e7f4      	b.n	8015e56 <_scanf_float+0x186>
 8015e6c:	f1ba 0f00 	cmp.w	sl, #0
 8015e70:	d10e      	bne.n	8015e90 <_scanf_float+0x1c0>
 8015e72:	f1b9 0f00 	cmp.w	r9, #0
 8015e76:	d10e      	bne.n	8015e96 <_scanf_float+0x1c6>
 8015e78:	6822      	ldr	r2, [r4, #0]
 8015e7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015e7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015e82:	d108      	bne.n	8015e96 <_scanf_float+0x1c6>
 8015e84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015e88:	6022      	str	r2, [r4, #0]
 8015e8a:	f04f 0a01 	mov.w	sl, #1
 8015e8e:	e7e3      	b.n	8015e58 <_scanf_float+0x188>
 8015e90:	f1ba 0f02 	cmp.w	sl, #2
 8015e94:	d055      	beq.n	8015f42 <_scanf_float+0x272>
 8015e96:	2d01      	cmp	r5, #1
 8015e98:	d002      	beq.n	8015ea0 <_scanf_float+0x1d0>
 8015e9a:	2d04      	cmp	r5, #4
 8015e9c:	f47f af48 	bne.w	8015d30 <_scanf_float+0x60>
 8015ea0:	3501      	adds	r5, #1
 8015ea2:	b2ed      	uxtb	r5, r5
 8015ea4:	e7d8      	b.n	8015e58 <_scanf_float+0x188>
 8015ea6:	f1ba 0f01 	cmp.w	sl, #1
 8015eaa:	f47f af41 	bne.w	8015d30 <_scanf_float+0x60>
 8015eae:	f04f 0a02 	mov.w	sl, #2
 8015eb2:	e7d1      	b.n	8015e58 <_scanf_float+0x188>
 8015eb4:	b97d      	cbnz	r5, 8015ed6 <_scanf_float+0x206>
 8015eb6:	f1b9 0f00 	cmp.w	r9, #0
 8015eba:	f47f af3c 	bne.w	8015d36 <_scanf_float+0x66>
 8015ebe:	6822      	ldr	r2, [r4, #0]
 8015ec0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015ec4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015ec8:	f47f af39 	bne.w	8015d3e <_scanf_float+0x6e>
 8015ecc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015ed0:	6022      	str	r2, [r4, #0]
 8015ed2:	2501      	movs	r5, #1
 8015ed4:	e7c0      	b.n	8015e58 <_scanf_float+0x188>
 8015ed6:	2d03      	cmp	r5, #3
 8015ed8:	d0e2      	beq.n	8015ea0 <_scanf_float+0x1d0>
 8015eda:	2d05      	cmp	r5, #5
 8015edc:	e7de      	b.n	8015e9c <_scanf_float+0x1cc>
 8015ede:	2d02      	cmp	r5, #2
 8015ee0:	f47f af26 	bne.w	8015d30 <_scanf_float+0x60>
 8015ee4:	2503      	movs	r5, #3
 8015ee6:	e7b7      	b.n	8015e58 <_scanf_float+0x188>
 8015ee8:	2d06      	cmp	r5, #6
 8015eea:	f47f af21 	bne.w	8015d30 <_scanf_float+0x60>
 8015eee:	2507      	movs	r5, #7
 8015ef0:	e7b2      	b.n	8015e58 <_scanf_float+0x188>
 8015ef2:	6822      	ldr	r2, [r4, #0]
 8015ef4:	0591      	lsls	r1, r2, #22
 8015ef6:	f57f af1b 	bpl.w	8015d30 <_scanf_float+0x60>
 8015efa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015efe:	6022      	str	r2, [r4, #0]
 8015f00:	f8cd 9004 	str.w	r9, [sp, #4]
 8015f04:	e7a8      	b.n	8015e58 <_scanf_float+0x188>
 8015f06:	6822      	ldr	r2, [r4, #0]
 8015f08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015f0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015f10:	d006      	beq.n	8015f20 <_scanf_float+0x250>
 8015f12:	0550      	lsls	r0, r2, #21
 8015f14:	f57f af0c 	bpl.w	8015d30 <_scanf_float+0x60>
 8015f18:	f1b9 0f00 	cmp.w	r9, #0
 8015f1c:	f43f af0f 	beq.w	8015d3e <_scanf_float+0x6e>
 8015f20:	0591      	lsls	r1, r2, #22
 8015f22:	bf58      	it	pl
 8015f24:	9901      	ldrpl	r1, [sp, #4]
 8015f26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015f2a:	bf58      	it	pl
 8015f2c:	eba9 0101 	subpl.w	r1, r9, r1
 8015f30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015f34:	bf58      	it	pl
 8015f36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015f3a:	6022      	str	r2, [r4, #0]
 8015f3c:	f04f 0900 	mov.w	r9, #0
 8015f40:	e78a      	b.n	8015e58 <_scanf_float+0x188>
 8015f42:	f04f 0a03 	mov.w	sl, #3
 8015f46:	e787      	b.n	8015e58 <_scanf_float+0x188>
 8015f48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015f4c:	4639      	mov	r1, r7
 8015f4e:	4640      	mov	r0, r8
 8015f50:	4798      	blx	r3
 8015f52:	2800      	cmp	r0, #0
 8015f54:	f43f aedf 	beq.w	8015d16 <_scanf_float+0x46>
 8015f58:	e6ea      	b.n	8015d30 <_scanf_float+0x60>
 8015f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f62:	463a      	mov	r2, r7
 8015f64:	4640      	mov	r0, r8
 8015f66:	4798      	blx	r3
 8015f68:	6923      	ldr	r3, [r4, #16]
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	6123      	str	r3, [r4, #16]
 8015f6e:	e6ec      	b.n	8015d4a <_scanf_float+0x7a>
 8015f70:	1e6b      	subs	r3, r5, #1
 8015f72:	2b06      	cmp	r3, #6
 8015f74:	d825      	bhi.n	8015fc2 <_scanf_float+0x2f2>
 8015f76:	2d02      	cmp	r5, #2
 8015f78:	d836      	bhi.n	8015fe8 <_scanf_float+0x318>
 8015f7a:	455e      	cmp	r6, fp
 8015f7c:	f67f aee8 	bls.w	8015d50 <_scanf_float+0x80>
 8015f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015f88:	463a      	mov	r2, r7
 8015f8a:	4640      	mov	r0, r8
 8015f8c:	4798      	blx	r3
 8015f8e:	6923      	ldr	r3, [r4, #16]
 8015f90:	3b01      	subs	r3, #1
 8015f92:	6123      	str	r3, [r4, #16]
 8015f94:	e7f1      	b.n	8015f7a <_scanf_float+0x2aa>
 8015f96:	9802      	ldr	r0, [sp, #8]
 8015f98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015fa0:	9002      	str	r0, [sp, #8]
 8015fa2:	463a      	mov	r2, r7
 8015fa4:	4640      	mov	r0, r8
 8015fa6:	4798      	blx	r3
 8015fa8:	6923      	ldr	r3, [r4, #16]
 8015faa:	3b01      	subs	r3, #1
 8015fac:	6123      	str	r3, [r4, #16]
 8015fae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015fb2:	fa5f fa8a 	uxtb.w	sl, sl
 8015fb6:	f1ba 0f02 	cmp.w	sl, #2
 8015fba:	d1ec      	bne.n	8015f96 <_scanf_float+0x2c6>
 8015fbc:	3d03      	subs	r5, #3
 8015fbe:	b2ed      	uxtb	r5, r5
 8015fc0:	1b76      	subs	r6, r6, r5
 8015fc2:	6823      	ldr	r3, [r4, #0]
 8015fc4:	05da      	lsls	r2, r3, #23
 8015fc6:	d52f      	bpl.n	8016028 <_scanf_float+0x358>
 8015fc8:	055b      	lsls	r3, r3, #21
 8015fca:	d510      	bpl.n	8015fee <_scanf_float+0x31e>
 8015fcc:	455e      	cmp	r6, fp
 8015fce:	f67f aebf 	bls.w	8015d50 <_scanf_float+0x80>
 8015fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015fd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015fda:	463a      	mov	r2, r7
 8015fdc:	4640      	mov	r0, r8
 8015fde:	4798      	blx	r3
 8015fe0:	6923      	ldr	r3, [r4, #16]
 8015fe2:	3b01      	subs	r3, #1
 8015fe4:	6123      	str	r3, [r4, #16]
 8015fe6:	e7f1      	b.n	8015fcc <_scanf_float+0x2fc>
 8015fe8:	46aa      	mov	sl, r5
 8015fea:	9602      	str	r6, [sp, #8]
 8015fec:	e7df      	b.n	8015fae <_scanf_float+0x2de>
 8015fee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015ff2:	6923      	ldr	r3, [r4, #16]
 8015ff4:	2965      	cmp	r1, #101	; 0x65
 8015ff6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015ffa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8015ffe:	6123      	str	r3, [r4, #16]
 8016000:	d00c      	beq.n	801601c <_scanf_float+0x34c>
 8016002:	2945      	cmp	r1, #69	; 0x45
 8016004:	d00a      	beq.n	801601c <_scanf_float+0x34c>
 8016006:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801600a:	463a      	mov	r2, r7
 801600c:	4640      	mov	r0, r8
 801600e:	4798      	blx	r3
 8016010:	6923      	ldr	r3, [r4, #16]
 8016012:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016016:	3b01      	subs	r3, #1
 8016018:	1eb5      	subs	r5, r6, #2
 801601a:	6123      	str	r3, [r4, #16]
 801601c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016020:	463a      	mov	r2, r7
 8016022:	4640      	mov	r0, r8
 8016024:	4798      	blx	r3
 8016026:	462e      	mov	r6, r5
 8016028:	6825      	ldr	r5, [r4, #0]
 801602a:	f015 0510 	ands.w	r5, r5, #16
 801602e:	d158      	bne.n	80160e2 <_scanf_float+0x412>
 8016030:	7035      	strb	r5, [r6, #0]
 8016032:	6823      	ldr	r3, [r4, #0]
 8016034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801603c:	d11c      	bne.n	8016078 <_scanf_float+0x3a8>
 801603e:	9b01      	ldr	r3, [sp, #4]
 8016040:	454b      	cmp	r3, r9
 8016042:	eba3 0209 	sub.w	r2, r3, r9
 8016046:	d124      	bne.n	8016092 <_scanf_float+0x3c2>
 8016048:	2200      	movs	r2, #0
 801604a:	4659      	mov	r1, fp
 801604c:	4640      	mov	r0, r8
 801604e:	f000 ff79 	bl	8016f44 <_strtod_r>
 8016052:	9b03      	ldr	r3, [sp, #12]
 8016054:	6821      	ldr	r1, [r4, #0]
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	f011 0f02 	tst.w	r1, #2
 801605c:	ec57 6b10 	vmov	r6, r7, d0
 8016060:	f103 0204 	add.w	r2, r3, #4
 8016064:	d020      	beq.n	80160a8 <_scanf_float+0x3d8>
 8016066:	9903      	ldr	r1, [sp, #12]
 8016068:	600a      	str	r2, [r1, #0]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	e9c3 6700 	strd	r6, r7, [r3]
 8016070:	68e3      	ldr	r3, [r4, #12]
 8016072:	3301      	adds	r3, #1
 8016074:	60e3      	str	r3, [r4, #12]
 8016076:	e66c      	b.n	8015d52 <_scanf_float+0x82>
 8016078:	9b04      	ldr	r3, [sp, #16]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d0e4      	beq.n	8016048 <_scanf_float+0x378>
 801607e:	9905      	ldr	r1, [sp, #20]
 8016080:	230a      	movs	r3, #10
 8016082:	462a      	mov	r2, r5
 8016084:	3101      	adds	r1, #1
 8016086:	4640      	mov	r0, r8
 8016088:	f000 ffe6 	bl	8017058 <_strtol_r>
 801608c:	9b04      	ldr	r3, [sp, #16]
 801608e:	9e05      	ldr	r6, [sp, #20]
 8016090:	1ac2      	subs	r2, r0, r3
 8016092:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016096:	429e      	cmp	r6, r3
 8016098:	bf28      	it	cs
 801609a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801609e:	4912      	ldr	r1, [pc, #72]	; (80160e8 <_scanf_float+0x418>)
 80160a0:	4630      	mov	r0, r6
 80160a2:	f000 f8c3 	bl	801622c <siprintf>
 80160a6:	e7cf      	b.n	8016048 <_scanf_float+0x378>
 80160a8:	f011 0f04 	tst.w	r1, #4
 80160ac:	9903      	ldr	r1, [sp, #12]
 80160ae:	600a      	str	r2, [r1, #0]
 80160b0:	d1db      	bne.n	801606a <_scanf_float+0x39a>
 80160b2:	f8d3 8000 	ldr.w	r8, [r3]
 80160b6:	ee10 2a10 	vmov	r2, s0
 80160ba:	ee10 0a10 	vmov	r0, s0
 80160be:	463b      	mov	r3, r7
 80160c0:	4639      	mov	r1, r7
 80160c2:	f7ea fd33 	bl	8000b2c <__aeabi_dcmpun>
 80160c6:	b128      	cbz	r0, 80160d4 <_scanf_float+0x404>
 80160c8:	4808      	ldr	r0, [pc, #32]	; (80160ec <_scanf_float+0x41c>)
 80160ca:	f000 f837 	bl	801613c <nanf>
 80160ce:	ed88 0a00 	vstr	s0, [r8]
 80160d2:	e7cd      	b.n	8016070 <_scanf_float+0x3a0>
 80160d4:	4630      	mov	r0, r6
 80160d6:	4639      	mov	r1, r7
 80160d8:	f7ea fd86 	bl	8000be8 <__aeabi_d2f>
 80160dc:	f8c8 0000 	str.w	r0, [r8]
 80160e0:	e7c6      	b.n	8016070 <_scanf_float+0x3a0>
 80160e2:	2500      	movs	r5, #0
 80160e4:	e635      	b.n	8015d52 <_scanf_float+0x82>
 80160e6:	bf00      	nop
 80160e8:	0801ad94 	.word	0x0801ad94
 80160ec:	0801b1b0 	.word	0x0801b1b0

080160f0 <ldexpf>:
 80160f0:	b510      	push	{r4, lr}
 80160f2:	ed2d 8b02 	vpush	{d8}
 80160f6:	4604      	mov	r4, r0
 80160f8:	eeb0 8a40 	vmov.f32	s16, s0
 80160fc:	f003 f8e4 	bl	80192c8 <finitef>
 8016100:	b1b8      	cbz	r0, 8016132 <ldexpf+0x42>
 8016102:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801610a:	d012      	beq.n	8016132 <ldexpf+0x42>
 801610c:	eeb0 0a48 	vmov.f32	s0, s16
 8016110:	4620      	mov	r0, r4
 8016112:	f000 f819 	bl	8016148 <scalbnf>
 8016116:	eeb0 8a40 	vmov.f32	s16, s0
 801611a:	f003 f8d5 	bl	80192c8 <finitef>
 801611e:	b120      	cbz	r0, 801612a <ldexpf+0x3a>
 8016120:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016128:	d103      	bne.n	8016132 <ldexpf+0x42>
 801612a:	f7ff f927 	bl	801537c <__errno>
 801612e:	2322      	movs	r3, #34	; 0x22
 8016130:	6003      	str	r3, [r0, #0]
 8016132:	eeb0 0a48 	vmov.f32	s0, s16
 8016136:	ecbd 8b02 	vpop	{d8}
 801613a:	bd10      	pop	{r4, pc}

0801613c <nanf>:
 801613c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016144 <nanf+0x8>
 8016140:	4770      	bx	lr
 8016142:	bf00      	nop
 8016144:	7fc00000 	.word	0x7fc00000

08016148 <scalbnf>:
 8016148:	ee10 3a10 	vmov	r3, s0
 801614c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016150:	d025      	beq.n	801619e <scalbnf+0x56>
 8016152:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016156:	d302      	bcc.n	801615e <scalbnf+0x16>
 8016158:	ee30 0a00 	vadd.f32	s0, s0, s0
 801615c:	4770      	bx	lr
 801615e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016162:	d122      	bne.n	80161aa <scalbnf+0x62>
 8016164:	4b2a      	ldr	r3, [pc, #168]	; (8016210 <scalbnf+0xc8>)
 8016166:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016214 <scalbnf+0xcc>
 801616a:	4298      	cmp	r0, r3
 801616c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016170:	db16      	blt.n	80161a0 <scalbnf+0x58>
 8016172:	ee10 3a10 	vmov	r3, s0
 8016176:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801617a:	3a19      	subs	r2, #25
 801617c:	4402      	add	r2, r0
 801617e:	2afe      	cmp	r2, #254	; 0xfe
 8016180:	dd15      	ble.n	80161ae <scalbnf+0x66>
 8016182:	ee10 3a10 	vmov	r3, s0
 8016186:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016218 <scalbnf+0xd0>
 801618a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801621c <scalbnf+0xd4>
 801618e:	2b00      	cmp	r3, #0
 8016190:	eeb0 7a67 	vmov.f32	s14, s15
 8016194:	bfb8      	it	lt
 8016196:	eef0 7a66 	vmovlt.f32	s15, s13
 801619a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801619e:	4770      	bx	lr
 80161a0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016220 <scalbnf+0xd8>
 80161a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80161a8:	4770      	bx	lr
 80161aa:	0dd2      	lsrs	r2, r2, #23
 80161ac:	e7e6      	b.n	801617c <scalbnf+0x34>
 80161ae:	2a00      	cmp	r2, #0
 80161b0:	dd06      	ble.n	80161c0 <scalbnf+0x78>
 80161b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80161b6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80161ba:	ee00 3a10 	vmov	s0, r3
 80161be:	4770      	bx	lr
 80161c0:	f112 0f16 	cmn.w	r2, #22
 80161c4:	da1a      	bge.n	80161fc <scalbnf+0xb4>
 80161c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80161ca:	4298      	cmp	r0, r3
 80161cc:	ee10 3a10 	vmov	r3, s0
 80161d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80161d4:	dd0a      	ble.n	80161ec <scalbnf+0xa4>
 80161d6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016218 <scalbnf+0xd0>
 80161da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801621c <scalbnf+0xd4>
 80161de:	eef0 7a40 	vmov.f32	s15, s0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	bf18      	it	ne
 80161e6:	eeb0 0a47 	vmovne.f32	s0, s14
 80161ea:	e7db      	b.n	80161a4 <scalbnf+0x5c>
 80161ec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016220 <scalbnf+0xd8>
 80161f0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016224 <scalbnf+0xdc>
 80161f4:	eef0 7a40 	vmov.f32	s15, s0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	e7f3      	b.n	80161e4 <scalbnf+0x9c>
 80161fc:	3219      	adds	r2, #25
 80161fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016202:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016206:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016228 <scalbnf+0xe0>
 801620a:	ee07 3a10 	vmov	s14, r3
 801620e:	e7c4      	b.n	801619a <scalbnf+0x52>
 8016210:	ffff3cb0 	.word	0xffff3cb0
 8016214:	4c000000 	.word	0x4c000000
 8016218:	7149f2ca 	.word	0x7149f2ca
 801621c:	f149f2ca 	.word	0xf149f2ca
 8016220:	0da24260 	.word	0x0da24260
 8016224:	8da24260 	.word	0x8da24260
 8016228:	33000000 	.word	0x33000000

0801622c <siprintf>:
 801622c:	b40e      	push	{r1, r2, r3}
 801622e:	b500      	push	{lr}
 8016230:	b09c      	sub	sp, #112	; 0x70
 8016232:	ab1d      	add	r3, sp, #116	; 0x74
 8016234:	9002      	str	r0, [sp, #8]
 8016236:	9006      	str	r0, [sp, #24]
 8016238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801623c:	4809      	ldr	r0, [pc, #36]	; (8016264 <siprintf+0x38>)
 801623e:	9107      	str	r1, [sp, #28]
 8016240:	9104      	str	r1, [sp, #16]
 8016242:	4909      	ldr	r1, [pc, #36]	; (8016268 <siprintf+0x3c>)
 8016244:	f853 2b04 	ldr.w	r2, [r3], #4
 8016248:	9105      	str	r1, [sp, #20]
 801624a:	6800      	ldr	r0, [r0, #0]
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	a902      	add	r1, sp, #8
 8016250:	f002 ff0e 	bl	8019070 <_svfiprintf_r>
 8016254:	9b02      	ldr	r3, [sp, #8]
 8016256:	2200      	movs	r2, #0
 8016258:	701a      	strb	r2, [r3, #0]
 801625a:	b01c      	add	sp, #112	; 0x70
 801625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016260:	b003      	add	sp, #12
 8016262:	4770      	bx	lr
 8016264:	2000034c 	.word	0x2000034c
 8016268:	ffff0208 	.word	0xffff0208

0801626c <__sread>:
 801626c:	b510      	push	{r4, lr}
 801626e:	460c      	mov	r4, r1
 8016270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016274:	f002 fffc 	bl	8019270 <_read_r>
 8016278:	2800      	cmp	r0, #0
 801627a:	bfab      	itete	ge
 801627c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801627e:	89a3      	ldrhlt	r3, [r4, #12]
 8016280:	181b      	addge	r3, r3, r0
 8016282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016286:	bfac      	ite	ge
 8016288:	6563      	strge	r3, [r4, #84]	; 0x54
 801628a:	81a3      	strhlt	r3, [r4, #12]
 801628c:	bd10      	pop	{r4, pc}

0801628e <__swrite>:
 801628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016292:	461f      	mov	r7, r3
 8016294:	898b      	ldrh	r3, [r1, #12]
 8016296:	05db      	lsls	r3, r3, #23
 8016298:	4605      	mov	r5, r0
 801629a:	460c      	mov	r4, r1
 801629c:	4616      	mov	r6, r2
 801629e:	d505      	bpl.n	80162ac <__swrite+0x1e>
 80162a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162a4:	2302      	movs	r3, #2
 80162a6:	2200      	movs	r2, #0
 80162a8:	f002 f8e6 	bl	8018478 <_lseek_r>
 80162ac:	89a3      	ldrh	r3, [r4, #12]
 80162ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80162b6:	81a3      	strh	r3, [r4, #12]
 80162b8:	4632      	mov	r2, r6
 80162ba:	463b      	mov	r3, r7
 80162bc:	4628      	mov	r0, r5
 80162be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162c2:	f000 becb 	b.w	801705c <_write_r>

080162c6 <__sseek>:
 80162c6:	b510      	push	{r4, lr}
 80162c8:	460c      	mov	r4, r1
 80162ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162ce:	f002 f8d3 	bl	8018478 <_lseek_r>
 80162d2:	1c43      	adds	r3, r0, #1
 80162d4:	89a3      	ldrh	r3, [r4, #12]
 80162d6:	bf15      	itete	ne
 80162d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80162da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162e2:	81a3      	strheq	r3, [r4, #12]
 80162e4:	bf18      	it	ne
 80162e6:	81a3      	strhne	r3, [r4, #12]
 80162e8:	bd10      	pop	{r4, pc}

080162ea <__sclose>:
 80162ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162ee:	f000 bec7 	b.w	8017080 <_close_r>

080162f2 <sulp>:
 80162f2:	b570      	push	{r4, r5, r6, lr}
 80162f4:	4604      	mov	r4, r0
 80162f6:	460d      	mov	r5, r1
 80162f8:	ec45 4b10 	vmov	d0, r4, r5
 80162fc:	4616      	mov	r6, r2
 80162fe:	f002 fc53 	bl	8018ba8 <__ulp>
 8016302:	ec51 0b10 	vmov	r0, r1, d0
 8016306:	b17e      	cbz	r6, 8016328 <sulp+0x36>
 8016308:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801630c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016310:	2b00      	cmp	r3, #0
 8016312:	dd09      	ble.n	8016328 <sulp+0x36>
 8016314:	051b      	lsls	r3, r3, #20
 8016316:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801631a:	2400      	movs	r4, #0
 801631c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016320:	4622      	mov	r2, r4
 8016322:	462b      	mov	r3, r5
 8016324:	f7ea f968 	bl	80005f8 <__aeabi_dmul>
 8016328:	bd70      	pop	{r4, r5, r6, pc}
 801632a:	0000      	movs	r0, r0
 801632c:	0000      	movs	r0, r0
	...

08016330 <_strtod_l>:
 8016330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	b0a3      	sub	sp, #140	; 0x8c
 8016336:	461f      	mov	r7, r3
 8016338:	2300      	movs	r3, #0
 801633a:	931e      	str	r3, [sp, #120]	; 0x78
 801633c:	4ba4      	ldr	r3, [pc, #656]	; (80165d0 <_strtod_l+0x2a0>)
 801633e:	9219      	str	r2, [sp, #100]	; 0x64
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	9307      	str	r3, [sp, #28]
 8016344:	4604      	mov	r4, r0
 8016346:	4618      	mov	r0, r3
 8016348:	4688      	mov	r8, r1
 801634a:	f7e9 ff41 	bl	80001d0 <strlen>
 801634e:	f04f 0a00 	mov.w	sl, #0
 8016352:	4605      	mov	r5, r0
 8016354:	f04f 0b00 	mov.w	fp, #0
 8016358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801635c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801635e:	781a      	ldrb	r2, [r3, #0]
 8016360:	2a2b      	cmp	r2, #43	; 0x2b
 8016362:	d04c      	beq.n	80163fe <_strtod_l+0xce>
 8016364:	d839      	bhi.n	80163da <_strtod_l+0xaa>
 8016366:	2a0d      	cmp	r2, #13
 8016368:	d832      	bhi.n	80163d0 <_strtod_l+0xa0>
 801636a:	2a08      	cmp	r2, #8
 801636c:	d832      	bhi.n	80163d4 <_strtod_l+0xa4>
 801636e:	2a00      	cmp	r2, #0
 8016370:	d03c      	beq.n	80163ec <_strtod_l+0xbc>
 8016372:	2300      	movs	r3, #0
 8016374:	930e      	str	r3, [sp, #56]	; 0x38
 8016376:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016378:	7833      	ldrb	r3, [r6, #0]
 801637a:	2b30      	cmp	r3, #48	; 0x30
 801637c:	f040 80b4 	bne.w	80164e8 <_strtod_l+0x1b8>
 8016380:	7873      	ldrb	r3, [r6, #1]
 8016382:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016386:	2b58      	cmp	r3, #88	; 0x58
 8016388:	d16c      	bne.n	8016464 <_strtod_l+0x134>
 801638a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801638c:	9301      	str	r3, [sp, #4]
 801638e:	ab1e      	add	r3, sp, #120	; 0x78
 8016390:	9702      	str	r7, [sp, #8]
 8016392:	9300      	str	r3, [sp, #0]
 8016394:	4a8f      	ldr	r2, [pc, #572]	; (80165d4 <_strtod_l+0x2a4>)
 8016396:	ab1f      	add	r3, sp, #124	; 0x7c
 8016398:	a91d      	add	r1, sp, #116	; 0x74
 801639a:	4620      	mov	r0, r4
 801639c:	f001 fd60 	bl	8017e60 <__gethex>
 80163a0:	f010 0707 	ands.w	r7, r0, #7
 80163a4:	4605      	mov	r5, r0
 80163a6:	d005      	beq.n	80163b4 <_strtod_l+0x84>
 80163a8:	2f06      	cmp	r7, #6
 80163aa:	d12a      	bne.n	8016402 <_strtod_l+0xd2>
 80163ac:	3601      	adds	r6, #1
 80163ae:	2300      	movs	r3, #0
 80163b0:	961d      	str	r6, [sp, #116]	; 0x74
 80163b2:	930e      	str	r3, [sp, #56]	; 0x38
 80163b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	f040 8596 	bne.w	8016ee8 <_strtod_l+0xbb8>
 80163bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163be:	b1db      	cbz	r3, 80163f8 <_strtod_l+0xc8>
 80163c0:	4652      	mov	r2, sl
 80163c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80163c6:	ec43 2b10 	vmov	d0, r2, r3
 80163ca:	b023      	add	sp, #140	; 0x8c
 80163cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163d0:	2a20      	cmp	r2, #32
 80163d2:	d1ce      	bne.n	8016372 <_strtod_l+0x42>
 80163d4:	3301      	adds	r3, #1
 80163d6:	931d      	str	r3, [sp, #116]	; 0x74
 80163d8:	e7c0      	b.n	801635c <_strtod_l+0x2c>
 80163da:	2a2d      	cmp	r2, #45	; 0x2d
 80163dc:	d1c9      	bne.n	8016372 <_strtod_l+0x42>
 80163de:	2201      	movs	r2, #1
 80163e0:	920e      	str	r2, [sp, #56]	; 0x38
 80163e2:	1c5a      	adds	r2, r3, #1
 80163e4:	921d      	str	r2, [sp, #116]	; 0x74
 80163e6:	785b      	ldrb	r3, [r3, #1]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d1c4      	bne.n	8016376 <_strtod_l+0x46>
 80163ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	f040 8576 	bne.w	8016ee4 <_strtod_l+0xbb4>
 80163f8:	4652      	mov	r2, sl
 80163fa:	465b      	mov	r3, fp
 80163fc:	e7e3      	b.n	80163c6 <_strtod_l+0x96>
 80163fe:	2200      	movs	r2, #0
 8016400:	e7ee      	b.n	80163e0 <_strtod_l+0xb0>
 8016402:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016404:	b13a      	cbz	r2, 8016416 <_strtod_l+0xe6>
 8016406:	2135      	movs	r1, #53	; 0x35
 8016408:	a820      	add	r0, sp, #128	; 0x80
 801640a:	f002 fcd8 	bl	8018dbe <__copybits>
 801640e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016410:	4620      	mov	r0, r4
 8016412:	f002 f89d 	bl	8018550 <_Bfree>
 8016416:	3f01      	subs	r7, #1
 8016418:	2f05      	cmp	r7, #5
 801641a:	d807      	bhi.n	801642c <_strtod_l+0xfc>
 801641c:	e8df f007 	tbb	[pc, r7]
 8016420:	1d180b0e 	.word	0x1d180b0e
 8016424:	030e      	.short	0x030e
 8016426:	f04f 0b00 	mov.w	fp, #0
 801642a:	46da      	mov	sl, fp
 801642c:	0728      	lsls	r0, r5, #28
 801642e:	d5c1      	bpl.n	80163b4 <_strtod_l+0x84>
 8016430:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016434:	e7be      	b.n	80163b4 <_strtod_l+0x84>
 8016436:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801643a:	e7f7      	b.n	801642c <_strtod_l+0xfc>
 801643c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016440:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801644a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801644e:	e7ed      	b.n	801642c <_strtod_l+0xfc>
 8016450:	f8df b184 	ldr.w	fp, [pc, #388]	; 80165d8 <_strtod_l+0x2a8>
 8016454:	f04f 0a00 	mov.w	sl, #0
 8016458:	e7e8      	b.n	801642c <_strtod_l+0xfc>
 801645a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801645e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016462:	e7e3      	b.n	801642c <_strtod_l+0xfc>
 8016464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016466:	1c5a      	adds	r2, r3, #1
 8016468:	921d      	str	r2, [sp, #116]	; 0x74
 801646a:	785b      	ldrb	r3, [r3, #1]
 801646c:	2b30      	cmp	r3, #48	; 0x30
 801646e:	d0f9      	beq.n	8016464 <_strtod_l+0x134>
 8016470:	2b00      	cmp	r3, #0
 8016472:	d09f      	beq.n	80163b4 <_strtod_l+0x84>
 8016474:	2301      	movs	r3, #1
 8016476:	f04f 0900 	mov.w	r9, #0
 801647a:	9304      	str	r3, [sp, #16]
 801647c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801647e:	930a      	str	r3, [sp, #40]	; 0x28
 8016480:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016484:	464f      	mov	r7, r9
 8016486:	220a      	movs	r2, #10
 8016488:	981d      	ldr	r0, [sp, #116]	; 0x74
 801648a:	7806      	ldrb	r6, [r0, #0]
 801648c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016490:	b2d9      	uxtb	r1, r3
 8016492:	2909      	cmp	r1, #9
 8016494:	d92a      	bls.n	80164ec <_strtod_l+0x1bc>
 8016496:	9907      	ldr	r1, [sp, #28]
 8016498:	462a      	mov	r2, r5
 801649a:	f002 ff22 	bl	80192e2 <strncmp>
 801649e:	b398      	cbz	r0, 8016508 <_strtod_l+0x1d8>
 80164a0:	2000      	movs	r0, #0
 80164a2:	4633      	mov	r3, r6
 80164a4:	463d      	mov	r5, r7
 80164a6:	9007      	str	r0, [sp, #28]
 80164a8:	4602      	mov	r2, r0
 80164aa:	2b65      	cmp	r3, #101	; 0x65
 80164ac:	d001      	beq.n	80164b2 <_strtod_l+0x182>
 80164ae:	2b45      	cmp	r3, #69	; 0x45
 80164b0:	d118      	bne.n	80164e4 <_strtod_l+0x1b4>
 80164b2:	b91d      	cbnz	r5, 80164bc <_strtod_l+0x18c>
 80164b4:	9b04      	ldr	r3, [sp, #16]
 80164b6:	4303      	orrs	r3, r0
 80164b8:	d098      	beq.n	80163ec <_strtod_l+0xbc>
 80164ba:	2500      	movs	r5, #0
 80164bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80164c0:	f108 0301 	add.w	r3, r8, #1
 80164c4:	931d      	str	r3, [sp, #116]	; 0x74
 80164c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80164ca:	2b2b      	cmp	r3, #43	; 0x2b
 80164cc:	d075      	beq.n	80165ba <_strtod_l+0x28a>
 80164ce:	2b2d      	cmp	r3, #45	; 0x2d
 80164d0:	d07b      	beq.n	80165ca <_strtod_l+0x29a>
 80164d2:	f04f 0c00 	mov.w	ip, #0
 80164d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80164da:	2909      	cmp	r1, #9
 80164dc:	f240 8082 	bls.w	80165e4 <_strtod_l+0x2b4>
 80164e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80164e4:	2600      	movs	r6, #0
 80164e6:	e09d      	b.n	8016624 <_strtod_l+0x2f4>
 80164e8:	2300      	movs	r3, #0
 80164ea:	e7c4      	b.n	8016476 <_strtod_l+0x146>
 80164ec:	2f08      	cmp	r7, #8
 80164ee:	bfd8      	it	le
 80164f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80164f2:	f100 0001 	add.w	r0, r0, #1
 80164f6:	bfda      	itte	le
 80164f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80164fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80164fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016502:	3701      	adds	r7, #1
 8016504:	901d      	str	r0, [sp, #116]	; 0x74
 8016506:	e7bf      	b.n	8016488 <_strtod_l+0x158>
 8016508:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801650a:	195a      	adds	r2, r3, r5
 801650c:	921d      	str	r2, [sp, #116]	; 0x74
 801650e:	5d5b      	ldrb	r3, [r3, r5]
 8016510:	2f00      	cmp	r7, #0
 8016512:	d037      	beq.n	8016584 <_strtod_l+0x254>
 8016514:	9007      	str	r0, [sp, #28]
 8016516:	463d      	mov	r5, r7
 8016518:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801651c:	2a09      	cmp	r2, #9
 801651e:	d912      	bls.n	8016546 <_strtod_l+0x216>
 8016520:	2201      	movs	r2, #1
 8016522:	e7c2      	b.n	80164aa <_strtod_l+0x17a>
 8016524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016526:	1c5a      	adds	r2, r3, #1
 8016528:	921d      	str	r2, [sp, #116]	; 0x74
 801652a:	785b      	ldrb	r3, [r3, #1]
 801652c:	3001      	adds	r0, #1
 801652e:	2b30      	cmp	r3, #48	; 0x30
 8016530:	d0f8      	beq.n	8016524 <_strtod_l+0x1f4>
 8016532:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016536:	2a08      	cmp	r2, #8
 8016538:	f200 84db 	bhi.w	8016ef2 <_strtod_l+0xbc2>
 801653c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801653e:	9007      	str	r0, [sp, #28]
 8016540:	2000      	movs	r0, #0
 8016542:	920a      	str	r2, [sp, #40]	; 0x28
 8016544:	4605      	mov	r5, r0
 8016546:	3b30      	subs	r3, #48	; 0x30
 8016548:	f100 0201 	add.w	r2, r0, #1
 801654c:	d014      	beq.n	8016578 <_strtod_l+0x248>
 801654e:	9907      	ldr	r1, [sp, #28]
 8016550:	4411      	add	r1, r2
 8016552:	9107      	str	r1, [sp, #28]
 8016554:	462a      	mov	r2, r5
 8016556:	eb00 0e05 	add.w	lr, r0, r5
 801655a:	210a      	movs	r1, #10
 801655c:	4572      	cmp	r2, lr
 801655e:	d113      	bne.n	8016588 <_strtod_l+0x258>
 8016560:	182a      	adds	r2, r5, r0
 8016562:	2a08      	cmp	r2, #8
 8016564:	f105 0501 	add.w	r5, r5, #1
 8016568:	4405      	add	r5, r0
 801656a:	dc1c      	bgt.n	80165a6 <_strtod_l+0x276>
 801656c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801656e:	220a      	movs	r2, #10
 8016570:	fb02 3301 	mla	r3, r2, r1, r3
 8016574:	9309      	str	r3, [sp, #36]	; 0x24
 8016576:	2200      	movs	r2, #0
 8016578:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801657a:	1c59      	adds	r1, r3, #1
 801657c:	911d      	str	r1, [sp, #116]	; 0x74
 801657e:	785b      	ldrb	r3, [r3, #1]
 8016580:	4610      	mov	r0, r2
 8016582:	e7c9      	b.n	8016518 <_strtod_l+0x1e8>
 8016584:	4638      	mov	r0, r7
 8016586:	e7d2      	b.n	801652e <_strtod_l+0x1fe>
 8016588:	2a08      	cmp	r2, #8
 801658a:	dc04      	bgt.n	8016596 <_strtod_l+0x266>
 801658c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801658e:	434e      	muls	r6, r1
 8016590:	9609      	str	r6, [sp, #36]	; 0x24
 8016592:	3201      	adds	r2, #1
 8016594:	e7e2      	b.n	801655c <_strtod_l+0x22c>
 8016596:	f102 0c01 	add.w	ip, r2, #1
 801659a:	f1bc 0f10 	cmp.w	ip, #16
 801659e:	bfd8      	it	le
 80165a0:	fb01 f909 	mulle.w	r9, r1, r9
 80165a4:	e7f5      	b.n	8016592 <_strtod_l+0x262>
 80165a6:	2d10      	cmp	r5, #16
 80165a8:	bfdc      	itt	le
 80165aa:	220a      	movle	r2, #10
 80165ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80165b0:	e7e1      	b.n	8016576 <_strtod_l+0x246>
 80165b2:	2300      	movs	r3, #0
 80165b4:	9307      	str	r3, [sp, #28]
 80165b6:	2201      	movs	r2, #1
 80165b8:	e77c      	b.n	80164b4 <_strtod_l+0x184>
 80165ba:	f04f 0c00 	mov.w	ip, #0
 80165be:	f108 0302 	add.w	r3, r8, #2
 80165c2:	931d      	str	r3, [sp, #116]	; 0x74
 80165c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80165c8:	e785      	b.n	80164d6 <_strtod_l+0x1a6>
 80165ca:	f04f 0c01 	mov.w	ip, #1
 80165ce:	e7f6      	b.n	80165be <_strtod_l+0x28e>
 80165d0:	0801aff0 	.word	0x0801aff0
 80165d4:	0801ad9c 	.word	0x0801ad9c
 80165d8:	7ff00000 	.word	0x7ff00000
 80165dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165de:	1c59      	adds	r1, r3, #1
 80165e0:	911d      	str	r1, [sp, #116]	; 0x74
 80165e2:	785b      	ldrb	r3, [r3, #1]
 80165e4:	2b30      	cmp	r3, #48	; 0x30
 80165e6:	d0f9      	beq.n	80165dc <_strtod_l+0x2ac>
 80165e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80165ec:	2908      	cmp	r1, #8
 80165ee:	f63f af79 	bhi.w	80164e4 <_strtod_l+0x1b4>
 80165f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80165f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165f8:	9308      	str	r3, [sp, #32]
 80165fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165fc:	1c59      	adds	r1, r3, #1
 80165fe:	911d      	str	r1, [sp, #116]	; 0x74
 8016600:	785b      	ldrb	r3, [r3, #1]
 8016602:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016606:	2e09      	cmp	r6, #9
 8016608:	d937      	bls.n	801667a <_strtod_l+0x34a>
 801660a:	9e08      	ldr	r6, [sp, #32]
 801660c:	1b89      	subs	r1, r1, r6
 801660e:	2908      	cmp	r1, #8
 8016610:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016614:	dc02      	bgt.n	801661c <_strtod_l+0x2ec>
 8016616:	4576      	cmp	r6, lr
 8016618:	bfa8      	it	ge
 801661a:	4676      	movge	r6, lr
 801661c:	f1bc 0f00 	cmp.w	ip, #0
 8016620:	d000      	beq.n	8016624 <_strtod_l+0x2f4>
 8016622:	4276      	negs	r6, r6
 8016624:	2d00      	cmp	r5, #0
 8016626:	d14f      	bne.n	80166c8 <_strtod_l+0x398>
 8016628:	9904      	ldr	r1, [sp, #16]
 801662a:	4301      	orrs	r1, r0
 801662c:	f47f aec2 	bne.w	80163b4 <_strtod_l+0x84>
 8016630:	2a00      	cmp	r2, #0
 8016632:	f47f aedb 	bne.w	80163ec <_strtod_l+0xbc>
 8016636:	2b69      	cmp	r3, #105	; 0x69
 8016638:	d027      	beq.n	801668a <_strtod_l+0x35a>
 801663a:	dc24      	bgt.n	8016686 <_strtod_l+0x356>
 801663c:	2b49      	cmp	r3, #73	; 0x49
 801663e:	d024      	beq.n	801668a <_strtod_l+0x35a>
 8016640:	2b4e      	cmp	r3, #78	; 0x4e
 8016642:	f47f aed3 	bne.w	80163ec <_strtod_l+0xbc>
 8016646:	499e      	ldr	r1, [pc, #632]	; (80168c0 <_strtod_l+0x590>)
 8016648:	a81d      	add	r0, sp, #116	; 0x74
 801664a:	f001 fe61 	bl	8018310 <__match>
 801664e:	2800      	cmp	r0, #0
 8016650:	f43f aecc 	beq.w	80163ec <_strtod_l+0xbc>
 8016654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016656:	781b      	ldrb	r3, [r3, #0]
 8016658:	2b28      	cmp	r3, #40	; 0x28
 801665a:	d12d      	bne.n	80166b8 <_strtod_l+0x388>
 801665c:	4999      	ldr	r1, [pc, #612]	; (80168c4 <_strtod_l+0x594>)
 801665e:	aa20      	add	r2, sp, #128	; 0x80
 8016660:	a81d      	add	r0, sp, #116	; 0x74
 8016662:	f001 fe69 	bl	8018338 <__hexnan>
 8016666:	2805      	cmp	r0, #5
 8016668:	d126      	bne.n	80166b8 <_strtod_l+0x388>
 801666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801666c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016670:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016674:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016678:	e69c      	b.n	80163b4 <_strtod_l+0x84>
 801667a:	210a      	movs	r1, #10
 801667c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016680:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016684:	e7b9      	b.n	80165fa <_strtod_l+0x2ca>
 8016686:	2b6e      	cmp	r3, #110	; 0x6e
 8016688:	e7db      	b.n	8016642 <_strtod_l+0x312>
 801668a:	498f      	ldr	r1, [pc, #572]	; (80168c8 <_strtod_l+0x598>)
 801668c:	a81d      	add	r0, sp, #116	; 0x74
 801668e:	f001 fe3f 	bl	8018310 <__match>
 8016692:	2800      	cmp	r0, #0
 8016694:	f43f aeaa 	beq.w	80163ec <_strtod_l+0xbc>
 8016698:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801669a:	498c      	ldr	r1, [pc, #560]	; (80168cc <_strtod_l+0x59c>)
 801669c:	3b01      	subs	r3, #1
 801669e:	a81d      	add	r0, sp, #116	; 0x74
 80166a0:	931d      	str	r3, [sp, #116]	; 0x74
 80166a2:	f001 fe35 	bl	8018310 <__match>
 80166a6:	b910      	cbnz	r0, 80166ae <_strtod_l+0x37e>
 80166a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166aa:	3301      	adds	r3, #1
 80166ac:	931d      	str	r3, [sp, #116]	; 0x74
 80166ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80168dc <_strtod_l+0x5ac>
 80166b2:	f04f 0a00 	mov.w	sl, #0
 80166b6:	e67d      	b.n	80163b4 <_strtod_l+0x84>
 80166b8:	4885      	ldr	r0, [pc, #532]	; (80168d0 <_strtod_l+0x5a0>)
 80166ba:	f002 fded 	bl	8019298 <nan>
 80166be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80166c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80166c6:	e675      	b.n	80163b4 <_strtod_l+0x84>
 80166c8:	9b07      	ldr	r3, [sp, #28]
 80166ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166cc:	1af3      	subs	r3, r6, r3
 80166ce:	2f00      	cmp	r7, #0
 80166d0:	bf08      	it	eq
 80166d2:	462f      	moveq	r7, r5
 80166d4:	2d10      	cmp	r5, #16
 80166d6:	9308      	str	r3, [sp, #32]
 80166d8:	46a8      	mov	r8, r5
 80166da:	bfa8      	it	ge
 80166dc:	f04f 0810 	movge.w	r8, #16
 80166e0:	f7e9 ff10 	bl	8000504 <__aeabi_ui2d>
 80166e4:	2d09      	cmp	r5, #9
 80166e6:	4682      	mov	sl, r0
 80166e8:	468b      	mov	fp, r1
 80166ea:	dd13      	ble.n	8016714 <_strtod_l+0x3e4>
 80166ec:	4b79      	ldr	r3, [pc, #484]	; (80168d4 <_strtod_l+0x5a4>)
 80166ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80166f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80166f6:	f7e9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80166fa:	4682      	mov	sl, r0
 80166fc:	4648      	mov	r0, r9
 80166fe:	468b      	mov	fp, r1
 8016700:	f7e9 ff00 	bl	8000504 <__aeabi_ui2d>
 8016704:	4602      	mov	r2, r0
 8016706:	460b      	mov	r3, r1
 8016708:	4650      	mov	r0, sl
 801670a:	4659      	mov	r1, fp
 801670c:	f7e9 fdbe 	bl	800028c <__adddf3>
 8016710:	4682      	mov	sl, r0
 8016712:	468b      	mov	fp, r1
 8016714:	2d0f      	cmp	r5, #15
 8016716:	dc38      	bgt.n	801678a <_strtod_l+0x45a>
 8016718:	9b08      	ldr	r3, [sp, #32]
 801671a:	2b00      	cmp	r3, #0
 801671c:	f43f ae4a 	beq.w	80163b4 <_strtod_l+0x84>
 8016720:	dd24      	ble.n	801676c <_strtod_l+0x43c>
 8016722:	2b16      	cmp	r3, #22
 8016724:	dc0b      	bgt.n	801673e <_strtod_l+0x40e>
 8016726:	4d6b      	ldr	r5, [pc, #428]	; (80168d4 <_strtod_l+0x5a4>)
 8016728:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801672c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016730:	4652      	mov	r2, sl
 8016732:	465b      	mov	r3, fp
 8016734:	f7e9 ff60 	bl	80005f8 <__aeabi_dmul>
 8016738:	4682      	mov	sl, r0
 801673a:	468b      	mov	fp, r1
 801673c:	e63a      	b.n	80163b4 <_strtod_l+0x84>
 801673e:	9a08      	ldr	r2, [sp, #32]
 8016740:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016744:	4293      	cmp	r3, r2
 8016746:	db20      	blt.n	801678a <_strtod_l+0x45a>
 8016748:	4c62      	ldr	r4, [pc, #392]	; (80168d4 <_strtod_l+0x5a4>)
 801674a:	f1c5 050f 	rsb	r5, r5, #15
 801674e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016752:	4652      	mov	r2, sl
 8016754:	465b      	mov	r3, fp
 8016756:	e9d1 0100 	ldrd	r0, r1, [r1]
 801675a:	f7e9 ff4d 	bl	80005f8 <__aeabi_dmul>
 801675e:	9b08      	ldr	r3, [sp, #32]
 8016760:	1b5d      	subs	r5, r3, r5
 8016762:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016766:	e9d4 2300 	ldrd	r2, r3, [r4]
 801676a:	e7e3      	b.n	8016734 <_strtod_l+0x404>
 801676c:	9b08      	ldr	r3, [sp, #32]
 801676e:	3316      	adds	r3, #22
 8016770:	db0b      	blt.n	801678a <_strtod_l+0x45a>
 8016772:	9b07      	ldr	r3, [sp, #28]
 8016774:	4a57      	ldr	r2, [pc, #348]	; (80168d4 <_strtod_l+0x5a4>)
 8016776:	1b9e      	subs	r6, r3, r6
 8016778:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801677c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016780:	4650      	mov	r0, sl
 8016782:	4659      	mov	r1, fp
 8016784:	f7ea f862 	bl	800084c <__aeabi_ddiv>
 8016788:	e7d6      	b.n	8016738 <_strtod_l+0x408>
 801678a:	9b08      	ldr	r3, [sp, #32]
 801678c:	eba5 0808 	sub.w	r8, r5, r8
 8016790:	4498      	add	r8, r3
 8016792:	f1b8 0f00 	cmp.w	r8, #0
 8016796:	dd71      	ble.n	801687c <_strtod_l+0x54c>
 8016798:	f018 030f 	ands.w	r3, r8, #15
 801679c:	d00a      	beq.n	80167b4 <_strtod_l+0x484>
 801679e:	494d      	ldr	r1, [pc, #308]	; (80168d4 <_strtod_l+0x5a4>)
 80167a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80167a4:	4652      	mov	r2, sl
 80167a6:	465b      	mov	r3, fp
 80167a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ac:	f7e9 ff24 	bl	80005f8 <__aeabi_dmul>
 80167b0:	4682      	mov	sl, r0
 80167b2:	468b      	mov	fp, r1
 80167b4:	f038 080f 	bics.w	r8, r8, #15
 80167b8:	d04d      	beq.n	8016856 <_strtod_l+0x526>
 80167ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80167be:	dd22      	ble.n	8016806 <_strtod_l+0x4d6>
 80167c0:	2500      	movs	r5, #0
 80167c2:	462e      	mov	r6, r5
 80167c4:	9509      	str	r5, [sp, #36]	; 0x24
 80167c6:	9507      	str	r5, [sp, #28]
 80167c8:	2322      	movs	r3, #34	; 0x22
 80167ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80168dc <_strtod_l+0x5ac>
 80167ce:	6023      	str	r3, [r4, #0]
 80167d0:	f04f 0a00 	mov.w	sl, #0
 80167d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	f43f adec 	beq.w	80163b4 <_strtod_l+0x84>
 80167dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80167de:	4620      	mov	r0, r4
 80167e0:	f001 feb6 	bl	8018550 <_Bfree>
 80167e4:	9907      	ldr	r1, [sp, #28]
 80167e6:	4620      	mov	r0, r4
 80167e8:	f001 feb2 	bl	8018550 <_Bfree>
 80167ec:	4631      	mov	r1, r6
 80167ee:	4620      	mov	r0, r4
 80167f0:	f001 feae 	bl	8018550 <_Bfree>
 80167f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80167f6:	4620      	mov	r0, r4
 80167f8:	f001 feaa 	bl	8018550 <_Bfree>
 80167fc:	4629      	mov	r1, r5
 80167fe:	4620      	mov	r0, r4
 8016800:	f001 fea6 	bl	8018550 <_Bfree>
 8016804:	e5d6      	b.n	80163b4 <_strtod_l+0x84>
 8016806:	2300      	movs	r3, #0
 8016808:	ea4f 1828 	mov.w	r8, r8, asr #4
 801680c:	4650      	mov	r0, sl
 801680e:	4659      	mov	r1, fp
 8016810:	4699      	mov	r9, r3
 8016812:	f1b8 0f01 	cmp.w	r8, #1
 8016816:	dc21      	bgt.n	801685c <_strtod_l+0x52c>
 8016818:	b10b      	cbz	r3, 801681e <_strtod_l+0x4ee>
 801681a:	4682      	mov	sl, r0
 801681c:	468b      	mov	fp, r1
 801681e:	4b2e      	ldr	r3, [pc, #184]	; (80168d8 <_strtod_l+0x5a8>)
 8016820:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016824:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016828:	4652      	mov	r2, sl
 801682a:	465b      	mov	r3, fp
 801682c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016830:	f7e9 fee2 	bl	80005f8 <__aeabi_dmul>
 8016834:	4b29      	ldr	r3, [pc, #164]	; (80168dc <_strtod_l+0x5ac>)
 8016836:	460a      	mov	r2, r1
 8016838:	400b      	ands	r3, r1
 801683a:	4929      	ldr	r1, [pc, #164]	; (80168e0 <_strtod_l+0x5b0>)
 801683c:	428b      	cmp	r3, r1
 801683e:	4682      	mov	sl, r0
 8016840:	d8be      	bhi.n	80167c0 <_strtod_l+0x490>
 8016842:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016846:	428b      	cmp	r3, r1
 8016848:	bf86      	itte	hi
 801684a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80168e4 <_strtod_l+0x5b4>
 801684e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8016852:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016856:	2300      	movs	r3, #0
 8016858:	9304      	str	r3, [sp, #16]
 801685a:	e081      	b.n	8016960 <_strtod_l+0x630>
 801685c:	f018 0f01 	tst.w	r8, #1
 8016860:	d007      	beq.n	8016872 <_strtod_l+0x542>
 8016862:	4b1d      	ldr	r3, [pc, #116]	; (80168d8 <_strtod_l+0x5a8>)
 8016864:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686c:	f7e9 fec4 	bl	80005f8 <__aeabi_dmul>
 8016870:	2301      	movs	r3, #1
 8016872:	f109 0901 	add.w	r9, r9, #1
 8016876:	ea4f 0868 	mov.w	r8, r8, asr #1
 801687a:	e7ca      	b.n	8016812 <_strtod_l+0x4e2>
 801687c:	d0eb      	beq.n	8016856 <_strtod_l+0x526>
 801687e:	f1c8 0800 	rsb	r8, r8, #0
 8016882:	f018 020f 	ands.w	r2, r8, #15
 8016886:	d00a      	beq.n	801689e <_strtod_l+0x56e>
 8016888:	4b12      	ldr	r3, [pc, #72]	; (80168d4 <_strtod_l+0x5a4>)
 801688a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801688e:	4650      	mov	r0, sl
 8016890:	4659      	mov	r1, fp
 8016892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016896:	f7e9 ffd9 	bl	800084c <__aeabi_ddiv>
 801689a:	4682      	mov	sl, r0
 801689c:	468b      	mov	fp, r1
 801689e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80168a2:	d0d8      	beq.n	8016856 <_strtod_l+0x526>
 80168a4:	f1b8 0f1f 	cmp.w	r8, #31
 80168a8:	dd1e      	ble.n	80168e8 <_strtod_l+0x5b8>
 80168aa:	2500      	movs	r5, #0
 80168ac:	462e      	mov	r6, r5
 80168ae:	9509      	str	r5, [sp, #36]	; 0x24
 80168b0:	9507      	str	r5, [sp, #28]
 80168b2:	2322      	movs	r3, #34	; 0x22
 80168b4:	f04f 0a00 	mov.w	sl, #0
 80168b8:	f04f 0b00 	mov.w	fp, #0
 80168bc:	6023      	str	r3, [r4, #0]
 80168be:	e789      	b.n	80167d4 <_strtod_l+0x4a4>
 80168c0:	0801ad6d 	.word	0x0801ad6d
 80168c4:	0801adb0 	.word	0x0801adb0
 80168c8:	0801ad65 	.word	0x0801ad65
 80168cc:	0801aef4 	.word	0x0801aef4
 80168d0:	0801b1b0 	.word	0x0801b1b0
 80168d4:	0801b090 	.word	0x0801b090
 80168d8:	0801b068 	.word	0x0801b068
 80168dc:	7ff00000 	.word	0x7ff00000
 80168e0:	7ca00000 	.word	0x7ca00000
 80168e4:	7fefffff 	.word	0x7fefffff
 80168e8:	f018 0310 	ands.w	r3, r8, #16
 80168ec:	bf18      	it	ne
 80168ee:	236a      	movne	r3, #106	; 0x6a
 80168f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016ca8 <_strtod_l+0x978>
 80168f4:	9304      	str	r3, [sp, #16]
 80168f6:	4650      	mov	r0, sl
 80168f8:	4659      	mov	r1, fp
 80168fa:	2300      	movs	r3, #0
 80168fc:	f018 0f01 	tst.w	r8, #1
 8016900:	d004      	beq.n	801690c <_strtod_l+0x5dc>
 8016902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016906:	f7e9 fe77 	bl	80005f8 <__aeabi_dmul>
 801690a:	2301      	movs	r3, #1
 801690c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016910:	f109 0908 	add.w	r9, r9, #8
 8016914:	d1f2      	bne.n	80168fc <_strtod_l+0x5cc>
 8016916:	b10b      	cbz	r3, 801691c <_strtod_l+0x5ec>
 8016918:	4682      	mov	sl, r0
 801691a:	468b      	mov	fp, r1
 801691c:	9b04      	ldr	r3, [sp, #16]
 801691e:	b1bb      	cbz	r3, 8016950 <_strtod_l+0x620>
 8016920:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016924:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016928:	2b00      	cmp	r3, #0
 801692a:	4659      	mov	r1, fp
 801692c:	dd10      	ble.n	8016950 <_strtod_l+0x620>
 801692e:	2b1f      	cmp	r3, #31
 8016930:	f340 8128 	ble.w	8016b84 <_strtod_l+0x854>
 8016934:	2b34      	cmp	r3, #52	; 0x34
 8016936:	bfde      	ittt	le
 8016938:	3b20      	suble	r3, #32
 801693a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801693e:	fa02 f303 	lslle.w	r3, r2, r3
 8016942:	f04f 0a00 	mov.w	sl, #0
 8016946:	bfcc      	ite	gt
 8016948:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801694c:	ea03 0b01 	andle.w	fp, r3, r1
 8016950:	2200      	movs	r2, #0
 8016952:	2300      	movs	r3, #0
 8016954:	4650      	mov	r0, sl
 8016956:	4659      	mov	r1, fp
 8016958:	f7ea f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 801695c:	2800      	cmp	r0, #0
 801695e:	d1a4      	bne.n	80168aa <_strtod_l+0x57a>
 8016960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016962:	9300      	str	r3, [sp, #0]
 8016964:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016966:	462b      	mov	r3, r5
 8016968:	463a      	mov	r2, r7
 801696a:	4620      	mov	r0, r4
 801696c:	f001 fe5c 	bl	8018628 <__s2b>
 8016970:	9009      	str	r0, [sp, #36]	; 0x24
 8016972:	2800      	cmp	r0, #0
 8016974:	f43f af24 	beq.w	80167c0 <_strtod_l+0x490>
 8016978:	9b07      	ldr	r3, [sp, #28]
 801697a:	1b9e      	subs	r6, r3, r6
 801697c:	9b08      	ldr	r3, [sp, #32]
 801697e:	2b00      	cmp	r3, #0
 8016980:	bfb4      	ite	lt
 8016982:	4633      	movlt	r3, r6
 8016984:	2300      	movge	r3, #0
 8016986:	9310      	str	r3, [sp, #64]	; 0x40
 8016988:	9b08      	ldr	r3, [sp, #32]
 801698a:	2500      	movs	r5, #0
 801698c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016990:	9318      	str	r3, [sp, #96]	; 0x60
 8016992:	462e      	mov	r6, r5
 8016994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016996:	4620      	mov	r0, r4
 8016998:	6859      	ldr	r1, [r3, #4]
 801699a:	f001 fd99 	bl	80184d0 <_Balloc>
 801699e:	9007      	str	r0, [sp, #28]
 80169a0:	2800      	cmp	r0, #0
 80169a2:	f43f af11 	beq.w	80167c8 <_strtod_l+0x498>
 80169a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a8:	691a      	ldr	r2, [r3, #16]
 80169aa:	3202      	adds	r2, #2
 80169ac:	f103 010c 	add.w	r1, r3, #12
 80169b0:	0092      	lsls	r2, r2, #2
 80169b2:	300c      	adds	r0, #12
 80169b4:	f7fe fd0c 	bl	80153d0 <memcpy>
 80169b8:	ec4b ab10 	vmov	d0, sl, fp
 80169bc:	aa20      	add	r2, sp, #128	; 0x80
 80169be:	a91f      	add	r1, sp, #124	; 0x7c
 80169c0:	4620      	mov	r0, r4
 80169c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80169c6:	f002 f96b 	bl	8018ca0 <__d2b>
 80169ca:	901e      	str	r0, [sp, #120]	; 0x78
 80169cc:	2800      	cmp	r0, #0
 80169ce:	f43f aefb 	beq.w	80167c8 <_strtod_l+0x498>
 80169d2:	2101      	movs	r1, #1
 80169d4:	4620      	mov	r0, r4
 80169d6:	f001 fec1 	bl	801875c <__i2b>
 80169da:	4606      	mov	r6, r0
 80169dc:	2800      	cmp	r0, #0
 80169de:	f43f aef3 	beq.w	80167c8 <_strtod_l+0x498>
 80169e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169e4:	9904      	ldr	r1, [sp, #16]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	bfab      	itete	ge
 80169ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80169ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80169ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80169f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80169f4:	bfac      	ite	ge
 80169f6:	eb03 0902 	addge.w	r9, r3, r2
 80169fa:	1ad7      	sublt	r7, r2, r3
 80169fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80169fe:	eba3 0801 	sub.w	r8, r3, r1
 8016a02:	4490      	add	r8, r2
 8016a04:	4ba3      	ldr	r3, [pc, #652]	; (8016c94 <_strtod_l+0x964>)
 8016a06:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8016a0a:	4598      	cmp	r8, r3
 8016a0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016a10:	f280 80cc 	bge.w	8016bac <_strtod_l+0x87c>
 8016a14:	eba3 0308 	sub.w	r3, r3, r8
 8016a18:	2b1f      	cmp	r3, #31
 8016a1a:	eba2 0203 	sub.w	r2, r2, r3
 8016a1e:	f04f 0101 	mov.w	r1, #1
 8016a22:	f300 80b6 	bgt.w	8016b92 <_strtod_l+0x862>
 8016a26:	fa01 f303 	lsl.w	r3, r1, r3
 8016a2a:	9311      	str	r3, [sp, #68]	; 0x44
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8016a30:	eb09 0802 	add.w	r8, r9, r2
 8016a34:	9b04      	ldr	r3, [sp, #16]
 8016a36:	45c1      	cmp	r9, r8
 8016a38:	4417      	add	r7, r2
 8016a3a:	441f      	add	r7, r3
 8016a3c:	464b      	mov	r3, r9
 8016a3e:	bfa8      	it	ge
 8016a40:	4643      	movge	r3, r8
 8016a42:	42bb      	cmp	r3, r7
 8016a44:	bfa8      	it	ge
 8016a46:	463b      	movge	r3, r7
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	bfc2      	ittt	gt
 8016a4c:	eba8 0803 	subgt.w	r8, r8, r3
 8016a50:	1aff      	subgt	r7, r7, r3
 8016a52:	eba9 0903 	subgt.w	r9, r9, r3
 8016a56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	dd17      	ble.n	8016a8c <_strtod_l+0x75c>
 8016a5c:	4631      	mov	r1, r6
 8016a5e:	461a      	mov	r2, r3
 8016a60:	4620      	mov	r0, r4
 8016a62:	f001 ff37 	bl	80188d4 <__pow5mult>
 8016a66:	4606      	mov	r6, r0
 8016a68:	2800      	cmp	r0, #0
 8016a6a:	f43f aead 	beq.w	80167c8 <_strtod_l+0x498>
 8016a6e:	4601      	mov	r1, r0
 8016a70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016a72:	4620      	mov	r0, r4
 8016a74:	f001 fe88 	bl	8018788 <__multiply>
 8016a78:	900f      	str	r0, [sp, #60]	; 0x3c
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	f43f aea4 	beq.w	80167c8 <_strtod_l+0x498>
 8016a80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016a82:	4620      	mov	r0, r4
 8016a84:	f001 fd64 	bl	8018550 <_Bfree>
 8016a88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a8a:	931e      	str	r3, [sp, #120]	; 0x78
 8016a8c:	f1b8 0f00 	cmp.w	r8, #0
 8016a90:	f300 8091 	bgt.w	8016bb6 <_strtod_l+0x886>
 8016a94:	9b08      	ldr	r3, [sp, #32]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	dd08      	ble.n	8016aac <_strtod_l+0x77c>
 8016a9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016a9c:	9907      	ldr	r1, [sp, #28]
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	f001 ff18 	bl	80188d4 <__pow5mult>
 8016aa4:	9007      	str	r0, [sp, #28]
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	f43f ae8e 	beq.w	80167c8 <_strtod_l+0x498>
 8016aac:	2f00      	cmp	r7, #0
 8016aae:	dd08      	ble.n	8016ac2 <_strtod_l+0x792>
 8016ab0:	9907      	ldr	r1, [sp, #28]
 8016ab2:	463a      	mov	r2, r7
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f001 ff67 	bl	8018988 <__lshift>
 8016aba:	9007      	str	r0, [sp, #28]
 8016abc:	2800      	cmp	r0, #0
 8016abe:	f43f ae83 	beq.w	80167c8 <_strtod_l+0x498>
 8016ac2:	f1b9 0f00 	cmp.w	r9, #0
 8016ac6:	dd08      	ble.n	8016ada <_strtod_l+0x7aa>
 8016ac8:	4631      	mov	r1, r6
 8016aca:	464a      	mov	r2, r9
 8016acc:	4620      	mov	r0, r4
 8016ace:	f001 ff5b 	bl	8018988 <__lshift>
 8016ad2:	4606      	mov	r6, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	f43f ae77 	beq.w	80167c8 <_strtod_l+0x498>
 8016ada:	9a07      	ldr	r2, [sp, #28]
 8016adc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f001 ffda 	bl	8018a98 <__mdiff>
 8016ae4:	4605      	mov	r5, r0
 8016ae6:	2800      	cmp	r0, #0
 8016ae8:	f43f ae6e 	beq.w	80167c8 <_strtod_l+0x498>
 8016aec:	68c3      	ldr	r3, [r0, #12]
 8016aee:	930f      	str	r3, [sp, #60]	; 0x3c
 8016af0:	2300      	movs	r3, #0
 8016af2:	60c3      	str	r3, [r0, #12]
 8016af4:	4631      	mov	r1, r6
 8016af6:	f001 ffb3 	bl	8018a60 <__mcmp>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	da65      	bge.n	8016bca <_strtod_l+0x89a>
 8016afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b00:	ea53 030a 	orrs.w	r3, r3, sl
 8016b04:	f040 8087 	bne.w	8016c16 <_strtod_l+0x8e6>
 8016b08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	f040 8082 	bne.w	8016c16 <_strtod_l+0x8e6>
 8016b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016b16:	0d1b      	lsrs	r3, r3, #20
 8016b18:	051b      	lsls	r3, r3, #20
 8016b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016b1e:	d97a      	bls.n	8016c16 <_strtod_l+0x8e6>
 8016b20:	696b      	ldr	r3, [r5, #20]
 8016b22:	b913      	cbnz	r3, 8016b2a <_strtod_l+0x7fa>
 8016b24:	692b      	ldr	r3, [r5, #16]
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	dd75      	ble.n	8016c16 <_strtod_l+0x8e6>
 8016b2a:	4629      	mov	r1, r5
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	4620      	mov	r0, r4
 8016b30:	f001 ff2a 	bl	8018988 <__lshift>
 8016b34:	4631      	mov	r1, r6
 8016b36:	4605      	mov	r5, r0
 8016b38:	f001 ff92 	bl	8018a60 <__mcmp>
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	dd6a      	ble.n	8016c16 <_strtod_l+0x8e6>
 8016b40:	9904      	ldr	r1, [sp, #16]
 8016b42:	4a55      	ldr	r2, [pc, #340]	; (8016c98 <_strtod_l+0x968>)
 8016b44:	465b      	mov	r3, fp
 8016b46:	2900      	cmp	r1, #0
 8016b48:	f000 8085 	beq.w	8016c56 <_strtod_l+0x926>
 8016b4c:	ea02 010b 	and.w	r1, r2, fp
 8016b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016b54:	dc7f      	bgt.n	8016c56 <_strtod_l+0x926>
 8016b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016b5a:	f77f aeaa 	ble.w	80168b2 <_strtod_l+0x582>
 8016b5e:	4a4f      	ldr	r2, [pc, #316]	; (8016c9c <_strtod_l+0x96c>)
 8016b60:	2300      	movs	r3, #0
 8016b62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016b66:	4650      	mov	r0, sl
 8016b68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016b6c:	4659      	mov	r1, fp
 8016b6e:	f7e9 fd43 	bl	80005f8 <__aeabi_dmul>
 8016b72:	460b      	mov	r3, r1
 8016b74:	4303      	orrs	r3, r0
 8016b76:	bf08      	it	eq
 8016b78:	2322      	moveq	r3, #34	; 0x22
 8016b7a:	4682      	mov	sl, r0
 8016b7c:	468b      	mov	fp, r1
 8016b7e:	bf08      	it	eq
 8016b80:	6023      	streq	r3, [r4, #0]
 8016b82:	e62b      	b.n	80167dc <_strtod_l+0x4ac>
 8016b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016b88:	fa02 f303 	lsl.w	r3, r2, r3
 8016b8c:	ea03 0a0a 	and.w	sl, r3, sl
 8016b90:	e6de      	b.n	8016950 <_strtod_l+0x620>
 8016b92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016b96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016b9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016b9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016ba2:	fa01 f308 	lsl.w	r3, r1, r8
 8016ba6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ba8:	9111      	str	r1, [sp, #68]	; 0x44
 8016baa:	e741      	b.n	8016a30 <_strtod_l+0x700>
 8016bac:	2300      	movs	r3, #0
 8016bae:	930c      	str	r3, [sp, #48]	; 0x30
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	9311      	str	r3, [sp, #68]	; 0x44
 8016bb4:	e73c      	b.n	8016a30 <_strtod_l+0x700>
 8016bb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016bb8:	4642      	mov	r2, r8
 8016bba:	4620      	mov	r0, r4
 8016bbc:	f001 fee4 	bl	8018988 <__lshift>
 8016bc0:	901e      	str	r0, [sp, #120]	; 0x78
 8016bc2:	2800      	cmp	r0, #0
 8016bc4:	f47f af66 	bne.w	8016a94 <_strtod_l+0x764>
 8016bc8:	e5fe      	b.n	80167c8 <_strtod_l+0x498>
 8016bca:	465f      	mov	r7, fp
 8016bcc:	d16e      	bne.n	8016cac <_strtod_l+0x97c>
 8016bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016bd4:	b342      	cbz	r2, 8016c28 <_strtod_l+0x8f8>
 8016bd6:	4a32      	ldr	r2, [pc, #200]	; (8016ca0 <_strtod_l+0x970>)
 8016bd8:	4293      	cmp	r3, r2
 8016bda:	d128      	bne.n	8016c2e <_strtod_l+0x8fe>
 8016bdc:	9b04      	ldr	r3, [sp, #16]
 8016bde:	4650      	mov	r0, sl
 8016be0:	b1eb      	cbz	r3, 8016c1e <_strtod_l+0x8ee>
 8016be2:	4a2d      	ldr	r2, [pc, #180]	; (8016c98 <_strtod_l+0x968>)
 8016be4:	403a      	ands	r2, r7
 8016be6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016bea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016bee:	d819      	bhi.n	8016c24 <_strtod_l+0x8f4>
 8016bf0:	0d12      	lsrs	r2, r2, #20
 8016bf2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8016bfa:	4298      	cmp	r0, r3
 8016bfc:	d117      	bne.n	8016c2e <_strtod_l+0x8fe>
 8016bfe:	4b29      	ldr	r3, [pc, #164]	; (8016ca4 <_strtod_l+0x974>)
 8016c00:	429f      	cmp	r7, r3
 8016c02:	d102      	bne.n	8016c0a <_strtod_l+0x8da>
 8016c04:	3001      	adds	r0, #1
 8016c06:	f43f addf 	beq.w	80167c8 <_strtod_l+0x498>
 8016c0a:	4b23      	ldr	r3, [pc, #140]	; (8016c98 <_strtod_l+0x968>)
 8016c0c:	403b      	ands	r3, r7
 8016c0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016c12:	f04f 0a00 	mov.w	sl, #0
 8016c16:	9b04      	ldr	r3, [sp, #16]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1a0      	bne.n	8016b5e <_strtod_l+0x82e>
 8016c1c:	e5de      	b.n	80167dc <_strtod_l+0x4ac>
 8016c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c22:	e7ea      	b.n	8016bfa <_strtod_l+0x8ca>
 8016c24:	460b      	mov	r3, r1
 8016c26:	e7e8      	b.n	8016bfa <_strtod_l+0x8ca>
 8016c28:	ea53 030a 	orrs.w	r3, r3, sl
 8016c2c:	d088      	beq.n	8016b40 <_strtod_l+0x810>
 8016c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c30:	b1db      	cbz	r3, 8016c6a <_strtod_l+0x93a>
 8016c32:	423b      	tst	r3, r7
 8016c34:	d0ef      	beq.n	8016c16 <_strtod_l+0x8e6>
 8016c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c38:	9a04      	ldr	r2, [sp, #16]
 8016c3a:	4650      	mov	r0, sl
 8016c3c:	4659      	mov	r1, fp
 8016c3e:	b1c3      	cbz	r3, 8016c72 <_strtod_l+0x942>
 8016c40:	f7ff fb57 	bl	80162f2 <sulp>
 8016c44:	4602      	mov	r2, r0
 8016c46:	460b      	mov	r3, r1
 8016c48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c4c:	f7e9 fb1e 	bl	800028c <__adddf3>
 8016c50:	4682      	mov	sl, r0
 8016c52:	468b      	mov	fp, r1
 8016c54:	e7df      	b.n	8016c16 <_strtod_l+0x8e6>
 8016c56:	4013      	ands	r3, r2
 8016c58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016c5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016c60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016c64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016c68:	e7d5      	b.n	8016c16 <_strtod_l+0x8e6>
 8016c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c6c:	ea13 0f0a 	tst.w	r3, sl
 8016c70:	e7e0      	b.n	8016c34 <_strtod_l+0x904>
 8016c72:	f7ff fb3e 	bl	80162f2 <sulp>
 8016c76:	4602      	mov	r2, r0
 8016c78:	460b      	mov	r3, r1
 8016c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016c7e:	f7e9 fb03 	bl	8000288 <__aeabi_dsub>
 8016c82:	2200      	movs	r2, #0
 8016c84:	2300      	movs	r3, #0
 8016c86:	4682      	mov	sl, r0
 8016c88:	468b      	mov	fp, r1
 8016c8a:	f7e9 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d0c1      	beq.n	8016c16 <_strtod_l+0x8e6>
 8016c92:	e60e      	b.n	80168b2 <_strtod_l+0x582>
 8016c94:	fffffc02 	.word	0xfffffc02
 8016c98:	7ff00000 	.word	0x7ff00000
 8016c9c:	39500000 	.word	0x39500000
 8016ca0:	000fffff 	.word	0x000fffff
 8016ca4:	7fefffff 	.word	0x7fefffff
 8016ca8:	0801adc8 	.word	0x0801adc8
 8016cac:	4631      	mov	r1, r6
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f002 f852 	bl	8018d58 <__ratio>
 8016cb4:	ec59 8b10 	vmov	r8, r9, d0
 8016cb8:	ee10 0a10 	vmov	r0, s0
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016cc2:	4649      	mov	r1, r9
 8016cc4:	f7e9 ff14 	bl	8000af0 <__aeabi_dcmple>
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d07c      	beq.n	8016dc6 <_strtod_l+0xa96>
 8016ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d04c      	beq.n	8016d6c <_strtod_l+0xa3c>
 8016cd2:	4b95      	ldr	r3, [pc, #596]	; (8016f28 <_strtod_l+0xbf8>)
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016cda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016f28 <_strtod_l+0xbf8>
 8016cde:	f04f 0800 	mov.w	r8, #0
 8016ce2:	4b92      	ldr	r3, [pc, #584]	; (8016f2c <_strtod_l+0xbfc>)
 8016ce4:	403b      	ands	r3, r7
 8016ce6:	9311      	str	r3, [sp, #68]	; 0x44
 8016ce8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cea:	4b91      	ldr	r3, [pc, #580]	; (8016f30 <_strtod_l+0xc00>)
 8016cec:	429a      	cmp	r2, r3
 8016cee:	f040 80b2 	bne.w	8016e56 <_strtod_l+0xb26>
 8016cf2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016cfa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016cfe:	ec4b ab10 	vmov	d0, sl, fp
 8016d02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016d06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016d0a:	f001 ff4d 	bl	8018ba8 <__ulp>
 8016d0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016d12:	ec53 2b10 	vmov	r2, r3, d0
 8016d16:	f7e9 fc6f 	bl	80005f8 <__aeabi_dmul>
 8016d1a:	4652      	mov	r2, sl
 8016d1c:	465b      	mov	r3, fp
 8016d1e:	f7e9 fab5 	bl	800028c <__adddf3>
 8016d22:	460b      	mov	r3, r1
 8016d24:	4981      	ldr	r1, [pc, #516]	; (8016f2c <_strtod_l+0xbfc>)
 8016d26:	4a83      	ldr	r2, [pc, #524]	; (8016f34 <_strtod_l+0xc04>)
 8016d28:	4019      	ands	r1, r3
 8016d2a:	4291      	cmp	r1, r2
 8016d2c:	4682      	mov	sl, r0
 8016d2e:	d95e      	bls.n	8016dee <_strtod_l+0xabe>
 8016d30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016d36:	4293      	cmp	r3, r2
 8016d38:	d103      	bne.n	8016d42 <_strtod_l+0xa12>
 8016d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	f43f ad43 	beq.w	80167c8 <_strtod_l+0x498>
 8016d42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016f40 <_strtod_l+0xc10>
 8016d46:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016d4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f001 fbff 	bl	8018550 <_Bfree>
 8016d52:	9907      	ldr	r1, [sp, #28]
 8016d54:	4620      	mov	r0, r4
 8016d56:	f001 fbfb 	bl	8018550 <_Bfree>
 8016d5a:	4631      	mov	r1, r6
 8016d5c:	4620      	mov	r0, r4
 8016d5e:	f001 fbf7 	bl	8018550 <_Bfree>
 8016d62:	4629      	mov	r1, r5
 8016d64:	4620      	mov	r0, r4
 8016d66:	f001 fbf3 	bl	8018550 <_Bfree>
 8016d6a:	e613      	b.n	8016994 <_strtod_l+0x664>
 8016d6c:	f1ba 0f00 	cmp.w	sl, #0
 8016d70:	d11b      	bne.n	8016daa <_strtod_l+0xa7a>
 8016d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d76:	b9f3      	cbnz	r3, 8016db6 <_strtod_l+0xa86>
 8016d78:	4b6b      	ldr	r3, [pc, #428]	; (8016f28 <_strtod_l+0xbf8>)
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	4640      	mov	r0, r8
 8016d7e:	4649      	mov	r1, r9
 8016d80:	f7e9 feac 	bl	8000adc <__aeabi_dcmplt>
 8016d84:	b9d0      	cbnz	r0, 8016dbc <_strtod_l+0xa8c>
 8016d86:	4640      	mov	r0, r8
 8016d88:	4649      	mov	r1, r9
 8016d8a:	4b6b      	ldr	r3, [pc, #428]	; (8016f38 <_strtod_l+0xc08>)
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	f7e9 fc33 	bl	80005f8 <__aeabi_dmul>
 8016d92:	4680      	mov	r8, r0
 8016d94:	4689      	mov	r9, r1
 8016d96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016d9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016d9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016da0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016da4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016da8:	e79b      	b.n	8016ce2 <_strtod_l+0x9b2>
 8016daa:	f1ba 0f01 	cmp.w	sl, #1
 8016dae:	d102      	bne.n	8016db6 <_strtod_l+0xa86>
 8016db0:	2f00      	cmp	r7, #0
 8016db2:	f43f ad7e 	beq.w	80168b2 <_strtod_l+0x582>
 8016db6:	4b61      	ldr	r3, [pc, #388]	; (8016f3c <_strtod_l+0xc0c>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	e78c      	b.n	8016cd6 <_strtod_l+0x9a6>
 8016dbc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016f38 <_strtod_l+0xc08>
 8016dc0:	f04f 0800 	mov.w	r8, #0
 8016dc4:	e7e7      	b.n	8016d96 <_strtod_l+0xa66>
 8016dc6:	4b5c      	ldr	r3, [pc, #368]	; (8016f38 <_strtod_l+0xc08>)
 8016dc8:	4640      	mov	r0, r8
 8016dca:	4649      	mov	r1, r9
 8016dcc:	2200      	movs	r2, #0
 8016dce:	f7e9 fc13 	bl	80005f8 <__aeabi_dmul>
 8016dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dd4:	4680      	mov	r8, r0
 8016dd6:	4689      	mov	r9, r1
 8016dd8:	b933      	cbnz	r3, 8016de8 <_strtod_l+0xab8>
 8016dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016dde:	9012      	str	r0, [sp, #72]	; 0x48
 8016de0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016de2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016de6:	e7dd      	b.n	8016da4 <_strtod_l+0xa74>
 8016de8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016dec:	e7f9      	b.n	8016de2 <_strtod_l+0xab2>
 8016dee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016df2:	9b04      	ldr	r3, [sp, #16]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d1a8      	bne.n	8016d4a <_strtod_l+0xa1a>
 8016df8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016dfe:	0d1b      	lsrs	r3, r3, #20
 8016e00:	051b      	lsls	r3, r3, #20
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d1a1      	bne.n	8016d4a <_strtod_l+0xa1a>
 8016e06:	4640      	mov	r0, r8
 8016e08:	4649      	mov	r1, r9
 8016e0a:	f7e9 ff55 	bl	8000cb8 <__aeabi_d2lz>
 8016e0e:	f7e9 fbc5 	bl	800059c <__aeabi_l2d>
 8016e12:	4602      	mov	r2, r0
 8016e14:	460b      	mov	r3, r1
 8016e16:	4640      	mov	r0, r8
 8016e18:	4649      	mov	r1, r9
 8016e1a:	f7e9 fa35 	bl	8000288 <__aeabi_dsub>
 8016e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e24:	ea43 030a 	orr.w	r3, r3, sl
 8016e28:	4313      	orrs	r3, r2
 8016e2a:	4680      	mov	r8, r0
 8016e2c:	4689      	mov	r9, r1
 8016e2e:	d053      	beq.n	8016ed8 <_strtod_l+0xba8>
 8016e30:	a335      	add	r3, pc, #212	; (adr r3, 8016f08 <_strtod_l+0xbd8>)
 8016e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e36:	f7e9 fe51 	bl	8000adc <__aeabi_dcmplt>
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	f47f acce 	bne.w	80167dc <_strtod_l+0x4ac>
 8016e40:	a333      	add	r3, pc, #204	; (adr r3, 8016f10 <_strtod_l+0xbe0>)
 8016e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e46:	4640      	mov	r0, r8
 8016e48:	4649      	mov	r1, r9
 8016e4a:	f7e9 fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	f43f af7b 	beq.w	8016d4a <_strtod_l+0xa1a>
 8016e54:	e4c2      	b.n	80167dc <_strtod_l+0x4ac>
 8016e56:	9b04      	ldr	r3, [sp, #16]
 8016e58:	b333      	cbz	r3, 8016ea8 <_strtod_l+0xb78>
 8016e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016e60:	d822      	bhi.n	8016ea8 <_strtod_l+0xb78>
 8016e62:	a32d      	add	r3, pc, #180	; (adr r3, 8016f18 <_strtod_l+0xbe8>)
 8016e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e68:	4640      	mov	r0, r8
 8016e6a:	4649      	mov	r1, r9
 8016e6c:	f7e9 fe40 	bl	8000af0 <__aeabi_dcmple>
 8016e70:	b1a0      	cbz	r0, 8016e9c <_strtod_l+0xb6c>
 8016e72:	4649      	mov	r1, r9
 8016e74:	4640      	mov	r0, r8
 8016e76:	f7e9 fe97 	bl	8000ba8 <__aeabi_d2uiz>
 8016e7a:	2801      	cmp	r0, #1
 8016e7c:	bf38      	it	cc
 8016e7e:	2001      	movcc	r0, #1
 8016e80:	f7e9 fb40 	bl	8000504 <__aeabi_ui2d>
 8016e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e86:	4680      	mov	r8, r0
 8016e88:	4689      	mov	r9, r1
 8016e8a:	bb13      	cbnz	r3, 8016ed2 <_strtod_l+0xba2>
 8016e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e90:	9014      	str	r0, [sp, #80]	; 0x50
 8016e92:	9315      	str	r3, [sp, #84]	; 0x54
 8016e94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016e98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ea0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016ea4:	1a9b      	subs	r3, r3, r2
 8016ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8016ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016eac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016eb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016eb4:	f001 fe78 	bl	8018ba8 <__ulp>
 8016eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016ebc:	ec53 2b10 	vmov	r2, r3, d0
 8016ec0:	f7e9 fb9a 	bl	80005f8 <__aeabi_dmul>
 8016ec4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016ec8:	f7e9 f9e0 	bl	800028c <__adddf3>
 8016ecc:	4682      	mov	sl, r0
 8016ece:	468b      	mov	fp, r1
 8016ed0:	e78f      	b.n	8016df2 <_strtod_l+0xac2>
 8016ed2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016ed6:	e7dd      	b.n	8016e94 <_strtod_l+0xb64>
 8016ed8:	a311      	add	r3, pc, #68	; (adr r3, 8016f20 <_strtod_l+0xbf0>)
 8016eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ede:	f7e9 fdfd 	bl	8000adc <__aeabi_dcmplt>
 8016ee2:	e7b4      	b.n	8016e4e <_strtod_l+0xb1e>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8016ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016eea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016eec:	6013      	str	r3, [r2, #0]
 8016eee:	f7ff ba65 	b.w	80163bc <_strtod_l+0x8c>
 8016ef2:	2b65      	cmp	r3, #101	; 0x65
 8016ef4:	f43f ab5d 	beq.w	80165b2 <_strtod_l+0x282>
 8016ef8:	2b45      	cmp	r3, #69	; 0x45
 8016efa:	f43f ab5a 	beq.w	80165b2 <_strtod_l+0x282>
 8016efe:	2201      	movs	r2, #1
 8016f00:	f7ff bb92 	b.w	8016628 <_strtod_l+0x2f8>
 8016f04:	f3af 8000 	nop.w
 8016f08:	94a03595 	.word	0x94a03595
 8016f0c:	3fdfffff 	.word	0x3fdfffff
 8016f10:	35afe535 	.word	0x35afe535
 8016f14:	3fe00000 	.word	0x3fe00000
 8016f18:	ffc00000 	.word	0xffc00000
 8016f1c:	41dfffff 	.word	0x41dfffff
 8016f20:	94a03595 	.word	0x94a03595
 8016f24:	3fcfffff 	.word	0x3fcfffff
 8016f28:	3ff00000 	.word	0x3ff00000
 8016f2c:	7ff00000 	.word	0x7ff00000
 8016f30:	7fe00000 	.word	0x7fe00000
 8016f34:	7c9fffff 	.word	0x7c9fffff
 8016f38:	3fe00000 	.word	0x3fe00000
 8016f3c:	bff00000 	.word	0xbff00000
 8016f40:	7fefffff 	.word	0x7fefffff

08016f44 <_strtod_r>:
 8016f44:	4b01      	ldr	r3, [pc, #4]	; (8016f4c <_strtod_r+0x8>)
 8016f46:	f7ff b9f3 	b.w	8016330 <_strtod_l>
 8016f4a:	bf00      	nop
 8016f4c:	200003b4 	.word	0x200003b4

08016f50 <_strtol_l.isra.0>:
 8016f50:	2b01      	cmp	r3, #1
 8016f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f56:	d001      	beq.n	8016f5c <_strtol_l.isra.0+0xc>
 8016f58:	2b24      	cmp	r3, #36	; 0x24
 8016f5a:	d906      	bls.n	8016f6a <_strtol_l.isra.0+0x1a>
 8016f5c:	f7fe fa0e 	bl	801537c <__errno>
 8016f60:	2316      	movs	r3, #22
 8016f62:	6003      	str	r3, [r0, #0]
 8016f64:	2000      	movs	r0, #0
 8016f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f6a:	4f3a      	ldr	r7, [pc, #232]	; (8017054 <_strtol_l.isra.0+0x104>)
 8016f6c:	468e      	mov	lr, r1
 8016f6e:	4676      	mov	r6, lr
 8016f70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016f74:	5de5      	ldrb	r5, [r4, r7]
 8016f76:	f015 0508 	ands.w	r5, r5, #8
 8016f7a:	d1f8      	bne.n	8016f6e <_strtol_l.isra.0+0x1e>
 8016f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8016f7e:	d134      	bne.n	8016fea <_strtol_l.isra.0+0x9a>
 8016f80:	f89e 4000 	ldrb.w	r4, [lr]
 8016f84:	f04f 0801 	mov.w	r8, #1
 8016f88:	f106 0e02 	add.w	lr, r6, #2
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d05c      	beq.n	801704a <_strtol_l.isra.0+0xfa>
 8016f90:	2b10      	cmp	r3, #16
 8016f92:	d10c      	bne.n	8016fae <_strtol_l.isra.0+0x5e>
 8016f94:	2c30      	cmp	r4, #48	; 0x30
 8016f96:	d10a      	bne.n	8016fae <_strtol_l.isra.0+0x5e>
 8016f98:	f89e 4000 	ldrb.w	r4, [lr]
 8016f9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016fa0:	2c58      	cmp	r4, #88	; 0x58
 8016fa2:	d14d      	bne.n	8017040 <_strtol_l.isra.0+0xf0>
 8016fa4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016fa8:	2310      	movs	r3, #16
 8016faa:	f10e 0e02 	add.w	lr, lr, #2
 8016fae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016fb2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016fb6:	2600      	movs	r6, #0
 8016fb8:	fbbc f9f3 	udiv	r9, ip, r3
 8016fbc:	4635      	mov	r5, r6
 8016fbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8016fc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016fc6:	2f09      	cmp	r7, #9
 8016fc8:	d818      	bhi.n	8016ffc <_strtol_l.isra.0+0xac>
 8016fca:	463c      	mov	r4, r7
 8016fcc:	42a3      	cmp	r3, r4
 8016fce:	dd24      	ble.n	801701a <_strtol_l.isra.0+0xca>
 8016fd0:	2e00      	cmp	r6, #0
 8016fd2:	db1f      	blt.n	8017014 <_strtol_l.isra.0+0xc4>
 8016fd4:	45a9      	cmp	r9, r5
 8016fd6:	d31d      	bcc.n	8017014 <_strtol_l.isra.0+0xc4>
 8016fd8:	d101      	bne.n	8016fde <_strtol_l.isra.0+0x8e>
 8016fda:	45a2      	cmp	sl, r4
 8016fdc:	db1a      	blt.n	8017014 <_strtol_l.isra.0+0xc4>
 8016fde:	fb05 4503 	mla	r5, r5, r3, r4
 8016fe2:	2601      	movs	r6, #1
 8016fe4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016fe8:	e7eb      	b.n	8016fc2 <_strtol_l.isra.0+0x72>
 8016fea:	2c2b      	cmp	r4, #43	; 0x2b
 8016fec:	bf08      	it	eq
 8016fee:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016ff2:	46a8      	mov	r8, r5
 8016ff4:	bf08      	it	eq
 8016ff6:	f106 0e02 	addeq.w	lr, r6, #2
 8016ffa:	e7c7      	b.n	8016f8c <_strtol_l.isra.0+0x3c>
 8016ffc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017000:	2f19      	cmp	r7, #25
 8017002:	d801      	bhi.n	8017008 <_strtol_l.isra.0+0xb8>
 8017004:	3c37      	subs	r4, #55	; 0x37
 8017006:	e7e1      	b.n	8016fcc <_strtol_l.isra.0+0x7c>
 8017008:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801700c:	2f19      	cmp	r7, #25
 801700e:	d804      	bhi.n	801701a <_strtol_l.isra.0+0xca>
 8017010:	3c57      	subs	r4, #87	; 0x57
 8017012:	e7db      	b.n	8016fcc <_strtol_l.isra.0+0x7c>
 8017014:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017018:	e7e4      	b.n	8016fe4 <_strtol_l.isra.0+0x94>
 801701a:	2e00      	cmp	r6, #0
 801701c:	da05      	bge.n	801702a <_strtol_l.isra.0+0xda>
 801701e:	2322      	movs	r3, #34	; 0x22
 8017020:	6003      	str	r3, [r0, #0]
 8017022:	4665      	mov	r5, ip
 8017024:	b942      	cbnz	r2, 8017038 <_strtol_l.isra.0+0xe8>
 8017026:	4628      	mov	r0, r5
 8017028:	e79d      	b.n	8016f66 <_strtol_l.isra.0+0x16>
 801702a:	f1b8 0f00 	cmp.w	r8, #0
 801702e:	d000      	beq.n	8017032 <_strtol_l.isra.0+0xe2>
 8017030:	426d      	negs	r5, r5
 8017032:	2a00      	cmp	r2, #0
 8017034:	d0f7      	beq.n	8017026 <_strtol_l.isra.0+0xd6>
 8017036:	b10e      	cbz	r6, 801703c <_strtol_l.isra.0+0xec>
 8017038:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801703c:	6011      	str	r1, [r2, #0]
 801703e:	e7f2      	b.n	8017026 <_strtol_l.isra.0+0xd6>
 8017040:	2430      	movs	r4, #48	; 0x30
 8017042:	2b00      	cmp	r3, #0
 8017044:	d1b3      	bne.n	8016fae <_strtol_l.isra.0+0x5e>
 8017046:	2308      	movs	r3, #8
 8017048:	e7b1      	b.n	8016fae <_strtol_l.isra.0+0x5e>
 801704a:	2c30      	cmp	r4, #48	; 0x30
 801704c:	d0a4      	beq.n	8016f98 <_strtol_l.isra.0+0x48>
 801704e:	230a      	movs	r3, #10
 8017050:	e7ad      	b.n	8016fae <_strtol_l.isra.0+0x5e>
 8017052:	bf00      	nop
 8017054:	0801adf1 	.word	0x0801adf1

08017058 <_strtol_r>:
 8017058:	f7ff bf7a 	b.w	8016f50 <_strtol_l.isra.0>

0801705c <_write_r>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4d07      	ldr	r5, [pc, #28]	; (801707c <_write_r+0x20>)
 8017060:	4604      	mov	r4, r0
 8017062:	4608      	mov	r0, r1
 8017064:	4611      	mov	r1, r2
 8017066:	2200      	movs	r2, #0
 8017068:	602a      	str	r2, [r5, #0]
 801706a:	461a      	mov	r2, r3
 801706c:	f7f3 fa11 	bl	800a492 <_write>
 8017070:	1c43      	adds	r3, r0, #1
 8017072:	d102      	bne.n	801707a <_write_r+0x1e>
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	b103      	cbz	r3, 801707a <_write_r+0x1e>
 8017078:	6023      	str	r3, [r4, #0]
 801707a:	bd38      	pop	{r3, r4, r5, pc}
 801707c:	20008a7c 	.word	0x20008a7c

08017080 <_close_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d06      	ldr	r5, [pc, #24]	; (801709c <_close_r+0x1c>)
 8017084:	2300      	movs	r3, #0
 8017086:	4604      	mov	r4, r0
 8017088:	4608      	mov	r0, r1
 801708a:	602b      	str	r3, [r5, #0]
 801708c:	f7f3 fa1d 	bl	800a4ca <_close>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_close_r+0x1a>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_close_r+0x1a>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	20008a7c 	.word	0x20008a7c

080170a0 <quorem>:
 80170a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a4:	6903      	ldr	r3, [r0, #16]
 80170a6:	690c      	ldr	r4, [r1, #16]
 80170a8:	42a3      	cmp	r3, r4
 80170aa:	4607      	mov	r7, r0
 80170ac:	f2c0 8081 	blt.w	80171b2 <quorem+0x112>
 80170b0:	3c01      	subs	r4, #1
 80170b2:	f101 0814 	add.w	r8, r1, #20
 80170b6:	f100 0514 	add.w	r5, r0, #20
 80170ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80170be:	9301      	str	r3, [sp, #4]
 80170c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80170c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80170c8:	3301      	adds	r3, #1
 80170ca:	429a      	cmp	r2, r3
 80170cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80170d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80170d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80170d8:	d331      	bcc.n	801713e <quorem+0x9e>
 80170da:	f04f 0e00 	mov.w	lr, #0
 80170de:	4640      	mov	r0, r8
 80170e0:	46ac      	mov	ip, r5
 80170e2:	46f2      	mov	sl, lr
 80170e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80170e8:	b293      	uxth	r3, r2
 80170ea:	fb06 e303 	mla	r3, r6, r3, lr
 80170ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	ebaa 0303 	sub.w	r3, sl, r3
 80170f8:	0c12      	lsrs	r2, r2, #16
 80170fa:	f8dc a000 	ldr.w	sl, [ip]
 80170fe:	fb06 e202 	mla	r2, r6, r2, lr
 8017102:	fa13 f38a 	uxtah	r3, r3, sl
 8017106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801710a:	fa1f fa82 	uxth.w	sl, r2
 801710e:	f8dc 2000 	ldr.w	r2, [ip]
 8017112:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017116:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801711a:	b29b      	uxth	r3, r3
 801711c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017120:	4581      	cmp	r9, r0
 8017122:	f84c 3b04 	str.w	r3, [ip], #4
 8017126:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801712a:	d2db      	bcs.n	80170e4 <quorem+0x44>
 801712c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017130:	b92b      	cbnz	r3, 801713e <quorem+0x9e>
 8017132:	9b01      	ldr	r3, [sp, #4]
 8017134:	3b04      	subs	r3, #4
 8017136:	429d      	cmp	r5, r3
 8017138:	461a      	mov	r2, r3
 801713a:	d32e      	bcc.n	801719a <quorem+0xfa>
 801713c:	613c      	str	r4, [r7, #16]
 801713e:	4638      	mov	r0, r7
 8017140:	f001 fc8e 	bl	8018a60 <__mcmp>
 8017144:	2800      	cmp	r0, #0
 8017146:	db24      	blt.n	8017192 <quorem+0xf2>
 8017148:	3601      	adds	r6, #1
 801714a:	4628      	mov	r0, r5
 801714c:	f04f 0c00 	mov.w	ip, #0
 8017150:	f858 2b04 	ldr.w	r2, [r8], #4
 8017154:	f8d0 e000 	ldr.w	lr, [r0]
 8017158:	b293      	uxth	r3, r2
 801715a:	ebac 0303 	sub.w	r3, ip, r3
 801715e:	0c12      	lsrs	r2, r2, #16
 8017160:	fa13 f38e 	uxtah	r3, r3, lr
 8017164:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801716c:	b29b      	uxth	r3, r3
 801716e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017172:	45c1      	cmp	r9, r8
 8017174:	f840 3b04 	str.w	r3, [r0], #4
 8017178:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801717c:	d2e8      	bcs.n	8017150 <quorem+0xb0>
 801717e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017186:	b922      	cbnz	r2, 8017192 <quorem+0xf2>
 8017188:	3b04      	subs	r3, #4
 801718a:	429d      	cmp	r5, r3
 801718c:	461a      	mov	r2, r3
 801718e:	d30a      	bcc.n	80171a6 <quorem+0x106>
 8017190:	613c      	str	r4, [r7, #16]
 8017192:	4630      	mov	r0, r6
 8017194:	b003      	add	sp, #12
 8017196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719a:	6812      	ldr	r2, [r2, #0]
 801719c:	3b04      	subs	r3, #4
 801719e:	2a00      	cmp	r2, #0
 80171a0:	d1cc      	bne.n	801713c <quorem+0x9c>
 80171a2:	3c01      	subs	r4, #1
 80171a4:	e7c7      	b.n	8017136 <quorem+0x96>
 80171a6:	6812      	ldr	r2, [r2, #0]
 80171a8:	3b04      	subs	r3, #4
 80171aa:	2a00      	cmp	r2, #0
 80171ac:	d1f0      	bne.n	8017190 <quorem+0xf0>
 80171ae:	3c01      	subs	r4, #1
 80171b0:	e7eb      	b.n	801718a <quorem+0xea>
 80171b2:	2000      	movs	r0, #0
 80171b4:	e7ee      	b.n	8017194 <quorem+0xf4>
	...

080171b8 <_dtoa_r>:
 80171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	ed2d 8b02 	vpush	{d8}
 80171c0:	ec57 6b10 	vmov	r6, r7, d0
 80171c4:	b095      	sub	sp, #84	; 0x54
 80171c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80171c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80171cc:	9105      	str	r1, [sp, #20]
 80171ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80171d2:	4604      	mov	r4, r0
 80171d4:	9209      	str	r2, [sp, #36]	; 0x24
 80171d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80171d8:	b975      	cbnz	r5, 80171f8 <_dtoa_r+0x40>
 80171da:	2010      	movs	r0, #16
 80171dc:	f001 f95e 	bl	801849c <malloc>
 80171e0:	4602      	mov	r2, r0
 80171e2:	6260      	str	r0, [r4, #36]	; 0x24
 80171e4:	b920      	cbnz	r0, 80171f0 <_dtoa_r+0x38>
 80171e6:	4bb2      	ldr	r3, [pc, #712]	; (80174b0 <_dtoa_r+0x2f8>)
 80171e8:	21ea      	movs	r1, #234	; 0xea
 80171ea:	48b2      	ldr	r0, [pc, #712]	; (80174b4 <_dtoa_r+0x2fc>)
 80171ec:	f002 f898 	bl	8019320 <__assert_func>
 80171f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80171f4:	6005      	str	r5, [r0, #0]
 80171f6:	60c5      	str	r5, [r0, #12]
 80171f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171fa:	6819      	ldr	r1, [r3, #0]
 80171fc:	b151      	cbz	r1, 8017214 <_dtoa_r+0x5c>
 80171fe:	685a      	ldr	r2, [r3, #4]
 8017200:	604a      	str	r2, [r1, #4]
 8017202:	2301      	movs	r3, #1
 8017204:	4093      	lsls	r3, r2
 8017206:	608b      	str	r3, [r1, #8]
 8017208:	4620      	mov	r0, r4
 801720a:	f001 f9a1 	bl	8018550 <_Bfree>
 801720e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017210:	2200      	movs	r2, #0
 8017212:	601a      	str	r2, [r3, #0]
 8017214:	1e3b      	subs	r3, r7, #0
 8017216:	bfb9      	ittee	lt
 8017218:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801721c:	9303      	strlt	r3, [sp, #12]
 801721e:	2300      	movge	r3, #0
 8017220:	f8c8 3000 	strge.w	r3, [r8]
 8017224:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017228:	4ba3      	ldr	r3, [pc, #652]	; (80174b8 <_dtoa_r+0x300>)
 801722a:	bfbc      	itt	lt
 801722c:	2201      	movlt	r2, #1
 801722e:	f8c8 2000 	strlt.w	r2, [r8]
 8017232:	ea33 0309 	bics.w	r3, r3, r9
 8017236:	d11b      	bne.n	8017270 <_dtoa_r+0xb8>
 8017238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801723a:	f242 730f 	movw	r3, #9999	; 0x270f
 801723e:	6013      	str	r3, [r2, #0]
 8017240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017244:	4333      	orrs	r3, r6
 8017246:	f000 857a 	beq.w	8017d3e <_dtoa_r+0xb86>
 801724a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801724c:	b963      	cbnz	r3, 8017268 <_dtoa_r+0xb0>
 801724e:	4b9b      	ldr	r3, [pc, #620]	; (80174bc <_dtoa_r+0x304>)
 8017250:	e024      	b.n	801729c <_dtoa_r+0xe4>
 8017252:	4b9b      	ldr	r3, [pc, #620]	; (80174c0 <_dtoa_r+0x308>)
 8017254:	9300      	str	r3, [sp, #0]
 8017256:	3308      	adds	r3, #8
 8017258:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801725a:	6013      	str	r3, [r2, #0]
 801725c:	9800      	ldr	r0, [sp, #0]
 801725e:	b015      	add	sp, #84	; 0x54
 8017260:	ecbd 8b02 	vpop	{d8}
 8017264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017268:	4b94      	ldr	r3, [pc, #592]	; (80174bc <_dtoa_r+0x304>)
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	3303      	adds	r3, #3
 801726e:	e7f3      	b.n	8017258 <_dtoa_r+0xa0>
 8017270:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017274:	2200      	movs	r2, #0
 8017276:	ec51 0b17 	vmov	r0, r1, d7
 801727a:	2300      	movs	r3, #0
 801727c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017280:	f7e9 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8017284:	4680      	mov	r8, r0
 8017286:	b158      	cbz	r0, 80172a0 <_dtoa_r+0xe8>
 8017288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801728a:	2301      	movs	r3, #1
 801728c:	6013      	str	r3, [r2, #0]
 801728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017290:	2b00      	cmp	r3, #0
 8017292:	f000 8551 	beq.w	8017d38 <_dtoa_r+0xb80>
 8017296:	488b      	ldr	r0, [pc, #556]	; (80174c4 <_dtoa_r+0x30c>)
 8017298:	6018      	str	r0, [r3, #0]
 801729a:	1e43      	subs	r3, r0, #1
 801729c:	9300      	str	r3, [sp, #0]
 801729e:	e7dd      	b.n	801725c <_dtoa_r+0xa4>
 80172a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80172a4:	aa12      	add	r2, sp, #72	; 0x48
 80172a6:	a913      	add	r1, sp, #76	; 0x4c
 80172a8:	4620      	mov	r0, r4
 80172aa:	f001 fcf9 	bl	8018ca0 <__d2b>
 80172ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80172b2:	4683      	mov	fp, r0
 80172b4:	2d00      	cmp	r5, #0
 80172b6:	d07c      	beq.n	80173b2 <_dtoa_r+0x1fa>
 80172b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80172be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80172c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80172c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80172ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80172ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80172d2:	4b7d      	ldr	r3, [pc, #500]	; (80174c8 <_dtoa_r+0x310>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	4630      	mov	r0, r6
 80172d8:	4639      	mov	r1, r7
 80172da:	f7e8 ffd5 	bl	8000288 <__aeabi_dsub>
 80172de:	a36e      	add	r3, pc, #440	; (adr r3, 8017498 <_dtoa_r+0x2e0>)
 80172e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e4:	f7e9 f988 	bl	80005f8 <__aeabi_dmul>
 80172e8:	a36d      	add	r3, pc, #436	; (adr r3, 80174a0 <_dtoa_r+0x2e8>)
 80172ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ee:	f7e8 ffcd 	bl	800028c <__adddf3>
 80172f2:	4606      	mov	r6, r0
 80172f4:	4628      	mov	r0, r5
 80172f6:	460f      	mov	r7, r1
 80172f8:	f7e9 f914 	bl	8000524 <__aeabi_i2d>
 80172fc:	a36a      	add	r3, pc, #424	; (adr r3, 80174a8 <_dtoa_r+0x2f0>)
 80172fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017302:	f7e9 f979 	bl	80005f8 <__aeabi_dmul>
 8017306:	4602      	mov	r2, r0
 8017308:	460b      	mov	r3, r1
 801730a:	4630      	mov	r0, r6
 801730c:	4639      	mov	r1, r7
 801730e:	f7e8 ffbd 	bl	800028c <__adddf3>
 8017312:	4606      	mov	r6, r0
 8017314:	460f      	mov	r7, r1
 8017316:	f7e9 fc1f 	bl	8000b58 <__aeabi_d2iz>
 801731a:	2200      	movs	r2, #0
 801731c:	4682      	mov	sl, r0
 801731e:	2300      	movs	r3, #0
 8017320:	4630      	mov	r0, r6
 8017322:	4639      	mov	r1, r7
 8017324:	f7e9 fbda 	bl	8000adc <__aeabi_dcmplt>
 8017328:	b148      	cbz	r0, 801733e <_dtoa_r+0x186>
 801732a:	4650      	mov	r0, sl
 801732c:	f7e9 f8fa 	bl	8000524 <__aeabi_i2d>
 8017330:	4632      	mov	r2, r6
 8017332:	463b      	mov	r3, r7
 8017334:	f7e9 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8017338:	b908      	cbnz	r0, 801733e <_dtoa_r+0x186>
 801733a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801733e:	f1ba 0f16 	cmp.w	sl, #22
 8017342:	d854      	bhi.n	80173ee <_dtoa_r+0x236>
 8017344:	4b61      	ldr	r3, [pc, #388]	; (80174cc <_dtoa_r+0x314>)
 8017346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801734e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017352:	f7e9 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8017356:	2800      	cmp	r0, #0
 8017358:	d04b      	beq.n	80173f2 <_dtoa_r+0x23a>
 801735a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801735e:	2300      	movs	r3, #0
 8017360:	930e      	str	r3, [sp, #56]	; 0x38
 8017362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017364:	1b5d      	subs	r5, r3, r5
 8017366:	1e6b      	subs	r3, r5, #1
 8017368:	9304      	str	r3, [sp, #16]
 801736a:	bf43      	ittte	mi
 801736c:	2300      	movmi	r3, #0
 801736e:	f1c5 0801 	rsbmi	r8, r5, #1
 8017372:	9304      	strmi	r3, [sp, #16]
 8017374:	f04f 0800 	movpl.w	r8, #0
 8017378:	f1ba 0f00 	cmp.w	sl, #0
 801737c:	db3b      	blt.n	80173f6 <_dtoa_r+0x23e>
 801737e:	9b04      	ldr	r3, [sp, #16]
 8017380:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017384:	4453      	add	r3, sl
 8017386:	9304      	str	r3, [sp, #16]
 8017388:	2300      	movs	r3, #0
 801738a:	9306      	str	r3, [sp, #24]
 801738c:	9b05      	ldr	r3, [sp, #20]
 801738e:	2b09      	cmp	r3, #9
 8017390:	d869      	bhi.n	8017466 <_dtoa_r+0x2ae>
 8017392:	2b05      	cmp	r3, #5
 8017394:	bfc4      	itt	gt
 8017396:	3b04      	subgt	r3, #4
 8017398:	9305      	strgt	r3, [sp, #20]
 801739a:	9b05      	ldr	r3, [sp, #20]
 801739c:	f1a3 0302 	sub.w	r3, r3, #2
 80173a0:	bfcc      	ite	gt
 80173a2:	2500      	movgt	r5, #0
 80173a4:	2501      	movle	r5, #1
 80173a6:	2b03      	cmp	r3, #3
 80173a8:	d869      	bhi.n	801747e <_dtoa_r+0x2c6>
 80173aa:	e8df f003 	tbb	[pc, r3]
 80173ae:	4e2c      	.short	0x4e2c
 80173b0:	5a4c      	.short	0x5a4c
 80173b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80173b6:	441d      	add	r5, r3
 80173b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80173bc:	2b20      	cmp	r3, #32
 80173be:	bfc1      	itttt	gt
 80173c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80173c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80173c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80173cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80173d0:	bfda      	itte	le
 80173d2:	f1c3 0320 	rsble	r3, r3, #32
 80173d6:	fa06 f003 	lslle.w	r0, r6, r3
 80173da:	4318      	orrgt	r0, r3
 80173dc:	f7e9 f892 	bl	8000504 <__aeabi_ui2d>
 80173e0:	2301      	movs	r3, #1
 80173e2:	4606      	mov	r6, r0
 80173e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80173e8:	3d01      	subs	r5, #1
 80173ea:	9310      	str	r3, [sp, #64]	; 0x40
 80173ec:	e771      	b.n	80172d2 <_dtoa_r+0x11a>
 80173ee:	2301      	movs	r3, #1
 80173f0:	e7b6      	b.n	8017360 <_dtoa_r+0x1a8>
 80173f2:	900e      	str	r0, [sp, #56]	; 0x38
 80173f4:	e7b5      	b.n	8017362 <_dtoa_r+0x1aa>
 80173f6:	f1ca 0300 	rsb	r3, sl, #0
 80173fa:	9306      	str	r3, [sp, #24]
 80173fc:	2300      	movs	r3, #0
 80173fe:	eba8 080a 	sub.w	r8, r8, sl
 8017402:	930d      	str	r3, [sp, #52]	; 0x34
 8017404:	e7c2      	b.n	801738c <_dtoa_r+0x1d4>
 8017406:	2300      	movs	r3, #0
 8017408:	9308      	str	r3, [sp, #32]
 801740a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801740c:	2b00      	cmp	r3, #0
 801740e:	dc39      	bgt.n	8017484 <_dtoa_r+0x2cc>
 8017410:	f04f 0901 	mov.w	r9, #1
 8017414:	f8cd 9004 	str.w	r9, [sp, #4]
 8017418:	464b      	mov	r3, r9
 801741a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801741e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017420:	2200      	movs	r2, #0
 8017422:	6042      	str	r2, [r0, #4]
 8017424:	2204      	movs	r2, #4
 8017426:	f102 0614 	add.w	r6, r2, #20
 801742a:	429e      	cmp	r6, r3
 801742c:	6841      	ldr	r1, [r0, #4]
 801742e:	d92f      	bls.n	8017490 <_dtoa_r+0x2d8>
 8017430:	4620      	mov	r0, r4
 8017432:	f001 f84d 	bl	80184d0 <_Balloc>
 8017436:	9000      	str	r0, [sp, #0]
 8017438:	2800      	cmp	r0, #0
 801743a:	d14b      	bne.n	80174d4 <_dtoa_r+0x31c>
 801743c:	4b24      	ldr	r3, [pc, #144]	; (80174d0 <_dtoa_r+0x318>)
 801743e:	4602      	mov	r2, r0
 8017440:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017444:	e6d1      	b.n	80171ea <_dtoa_r+0x32>
 8017446:	2301      	movs	r3, #1
 8017448:	e7de      	b.n	8017408 <_dtoa_r+0x250>
 801744a:	2300      	movs	r3, #0
 801744c:	9308      	str	r3, [sp, #32]
 801744e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017450:	eb0a 0903 	add.w	r9, sl, r3
 8017454:	f109 0301 	add.w	r3, r9, #1
 8017458:	2b01      	cmp	r3, #1
 801745a:	9301      	str	r3, [sp, #4]
 801745c:	bfb8      	it	lt
 801745e:	2301      	movlt	r3, #1
 8017460:	e7dd      	b.n	801741e <_dtoa_r+0x266>
 8017462:	2301      	movs	r3, #1
 8017464:	e7f2      	b.n	801744c <_dtoa_r+0x294>
 8017466:	2501      	movs	r5, #1
 8017468:	2300      	movs	r3, #0
 801746a:	9305      	str	r3, [sp, #20]
 801746c:	9508      	str	r5, [sp, #32]
 801746e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8017472:	2200      	movs	r2, #0
 8017474:	f8cd 9004 	str.w	r9, [sp, #4]
 8017478:	2312      	movs	r3, #18
 801747a:	9209      	str	r2, [sp, #36]	; 0x24
 801747c:	e7cf      	b.n	801741e <_dtoa_r+0x266>
 801747e:	2301      	movs	r3, #1
 8017480:	9308      	str	r3, [sp, #32]
 8017482:	e7f4      	b.n	801746e <_dtoa_r+0x2b6>
 8017484:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017488:	f8cd 9004 	str.w	r9, [sp, #4]
 801748c:	464b      	mov	r3, r9
 801748e:	e7c6      	b.n	801741e <_dtoa_r+0x266>
 8017490:	3101      	adds	r1, #1
 8017492:	6041      	str	r1, [r0, #4]
 8017494:	0052      	lsls	r2, r2, #1
 8017496:	e7c6      	b.n	8017426 <_dtoa_r+0x26e>
 8017498:	636f4361 	.word	0x636f4361
 801749c:	3fd287a7 	.word	0x3fd287a7
 80174a0:	8b60c8b3 	.word	0x8b60c8b3
 80174a4:	3fc68a28 	.word	0x3fc68a28
 80174a8:	509f79fb 	.word	0x509f79fb
 80174ac:	3fd34413 	.word	0x3fd34413
 80174b0:	0801aefe 	.word	0x0801aefe
 80174b4:	0801af15 	.word	0x0801af15
 80174b8:	7ff00000 	.word	0x7ff00000
 80174bc:	0801aefa 	.word	0x0801aefa
 80174c0:	0801aef1 	.word	0x0801aef1
 80174c4:	0801ad71 	.word	0x0801ad71
 80174c8:	3ff80000 	.word	0x3ff80000
 80174cc:	0801b090 	.word	0x0801b090
 80174d0:	0801af74 	.word	0x0801af74
 80174d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174d6:	9a00      	ldr	r2, [sp, #0]
 80174d8:	601a      	str	r2, [r3, #0]
 80174da:	9b01      	ldr	r3, [sp, #4]
 80174dc:	2b0e      	cmp	r3, #14
 80174de:	f200 80ad 	bhi.w	801763c <_dtoa_r+0x484>
 80174e2:	2d00      	cmp	r5, #0
 80174e4:	f000 80aa 	beq.w	801763c <_dtoa_r+0x484>
 80174e8:	f1ba 0f00 	cmp.w	sl, #0
 80174ec:	dd36      	ble.n	801755c <_dtoa_r+0x3a4>
 80174ee:	4ac3      	ldr	r2, [pc, #780]	; (80177fc <_dtoa_r+0x644>)
 80174f0:	f00a 030f 	and.w	r3, sl, #15
 80174f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80174f8:	ed93 7b00 	vldr	d7, [r3]
 80174fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017500:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017504:	eeb0 8a47 	vmov.f32	s16, s14
 8017508:	eef0 8a67 	vmov.f32	s17, s15
 801750c:	d016      	beq.n	801753c <_dtoa_r+0x384>
 801750e:	4bbc      	ldr	r3, [pc, #752]	; (8017800 <_dtoa_r+0x648>)
 8017510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017514:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017518:	f7e9 f998 	bl	800084c <__aeabi_ddiv>
 801751c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017520:	f007 070f 	and.w	r7, r7, #15
 8017524:	2503      	movs	r5, #3
 8017526:	4eb6      	ldr	r6, [pc, #728]	; (8017800 <_dtoa_r+0x648>)
 8017528:	b957      	cbnz	r7, 8017540 <_dtoa_r+0x388>
 801752a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801752e:	ec53 2b18 	vmov	r2, r3, d8
 8017532:	f7e9 f98b 	bl	800084c <__aeabi_ddiv>
 8017536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801753a:	e029      	b.n	8017590 <_dtoa_r+0x3d8>
 801753c:	2502      	movs	r5, #2
 801753e:	e7f2      	b.n	8017526 <_dtoa_r+0x36e>
 8017540:	07f9      	lsls	r1, r7, #31
 8017542:	d508      	bpl.n	8017556 <_dtoa_r+0x39e>
 8017544:	ec51 0b18 	vmov	r0, r1, d8
 8017548:	e9d6 2300 	ldrd	r2, r3, [r6]
 801754c:	f7e9 f854 	bl	80005f8 <__aeabi_dmul>
 8017550:	ec41 0b18 	vmov	d8, r0, r1
 8017554:	3501      	adds	r5, #1
 8017556:	107f      	asrs	r7, r7, #1
 8017558:	3608      	adds	r6, #8
 801755a:	e7e5      	b.n	8017528 <_dtoa_r+0x370>
 801755c:	f000 80a6 	beq.w	80176ac <_dtoa_r+0x4f4>
 8017560:	f1ca 0600 	rsb	r6, sl, #0
 8017564:	4ba5      	ldr	r3, [pc, #660]	; (80177fc <_dtoa_r+0x644>)
 8017566:	4fa6      	ldr	r7, [pc, #664]	; (8017800 <_dtoa_r+0x648>)
 8017568:	f006 020f 	and.w	r2, r6, #15
 801756c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017574:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017578:	f7e9 f83e 	bl	80005f8 <__aeabi_dmul>
 801757c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017580:	1136      	asrs	r6, r6, #4
 8017582:	2300      	movs	r3, #0
 8017584:	2502      	movs	r5, #2
 8017586:	2e00      	cmp	r6, #0
 8017588:	f040 8085 	bne.w	8017696 <_dtoa_r+0x4de>
 801758c:	2b00      	cmp	r3, #0
 801758e:	d1d2      	bne.n	8017536 <_dtoa_r+0x37e>
 8017590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017592:	2b00      	cmp	r3, #0
 8017594:	f000 808c 	beq.w	80176b0 <_dtoa_r+0x4f8>
 8017598:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801759c:	4b99      	ldr	r3, [pc, #612]	; (8017804 <_dtoa_r+0x64c>)
 801759e:	2200      	movs	r2, #0
 80175a0:	4630      	mov	r0, r6
 80175a2:	4639      	mov	r1, r7
 80175a4:	f7e9 fa9a 	bl	8000adc <__aeabi_dcmplt>
 80175a8:	2800      	cmp	r0, #0
 80175aa:	f000 8081 	beq.w	80176b0 <_dtoa_r+0x4f8>
 80175ae:	9b01      	ldr	r3, [sp, #4]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d07d      	beq.n	80176b0 <_dtoa_r+0x4f8>
 80175b4:	f1b9 0f00 	cmp.w	r9, #0
 80175b8:	dd3c      	ble.n	8017634 <_dtoa_r+0x47c>
 80175ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80175be:	9307      	str	r3, [sp, #28]
 80175c0:	2200      	movs	r2, #0
 80175c2:	4b91      	ldr	r3, [pc, #580]	; (8017808 <_dtoa_r+0x650>)
 80175c4:	4630      	mov	r0, r6
 80175c6:	4639      	mov	r1, r7
 80175c8:	f7e9 f816 	bl	80005f8 <__aeabi_dmul>
 80175cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175d0:	3501      	adds	r5, #1
 80175d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80175d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80175da:	4628      	mov	r0, r5
 80175dc:	f7e8 ffa2 	bl	8000524 <__aeabi_i2d>
 80175e0:	4632      	mov	r2, r6
 80175e2:	463b      	mov	r3, r7
 80175e4:	f7e9 f808 	bl	80005f8 <__aeabi_dmul>
 80175e8:	4b88      	ldr	r3, [pc, #544]	; (801780c <_dtoa_r+0x654>)
 80175ea:	2200      	movs	r2, #0
 80175ec:	f7e8 fe4e 	bl	800028c <__adddf3>
 80175f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80175f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175f8:	9303      	str	r3, [sp, #12]
 80175fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d15c      	bne.n	80176ba <_dtoa_r+0x502>
 8017600:	4b83      	ldr	r3, [pc, #524]	; (8017810 <_dtoa_r+0x658>)
 8017602:	2200      	movs	r2, #0
 8017604:	4630      	mov	r0, r6
 8017606:	4639      	mov	r1, r7
 8017608:	f7e8 fe3e 	bl	8000288 <__aeabi_dsub>
 801760c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017610:	4606      	mov	r6, r0
 8017612:	460f      	mov	r7, r1
 8017614:	f7e9 fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8017618:	2800      	cmp	r0, #0
 801761a:	f040 8296 	bne.w	8017b4a <_dtoa_r+0x992>
 801761e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017622:	4630      	mov	r0, r6
 8017624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017628:	4639      	mov	r1, r7
 801762a:	f7e9 fa57 	bl	8000adc <__aeabi_dcmplt>
 801762e:	2800      	cmp	r0, #0
 8017630:	f040 8288 	bne.w	8017b44 <_dtoa_r+0x98c>
 8017634:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017638:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801763c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801763e:	2b00      	cmp	r3, #0
 8017640:	f2c0 8158 	blt.w	80178f4 <_dtoa_r+0x73c>
 8017644:	f1ba 0f0e 	cmp.w	sl, #14
 8017648:	f300 8154 	bgt.w	80178f4 <_dtoa_r+0x73c>
 801764c:	4b6b      	ldr	r3, [pc, #428]	; (80177fc <_dtoa_r+0x644>)
 801764e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017652:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017658:	2b00      	cmp	r3, #0
 801765a:	f280 80e3 	bge.w	8017824 <_dtoa_r+0x66c>
 801765e:	9b01      	ldr	r3, [sp, #4]
 8017660:	2b00      	cmp	r3, #0
 8017662:	f300 80df 	bgt.w	8017824 <_dtoa_r+0x66c>
 8017666:	f040 826d 	bne.w	8017b44 <_dtoa_r+0x98c>
 801766a:	4b69      	ldr	r3, [pc, #420]	; (8017810 <_dtoa_r+0x658>)
 801766c:	2200      	movs	r2, #0
 801766e:	4640      	mov	r0, r8
 8017670:	4649      	mov	r1, r9
 8017672:	f7e8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8017676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801767a:	f7e9 fa43 	bl	8000b04 <__aeabi_dcmpge>
 801767e:	9e01      	ldr	r6, [sp, #4]
 8017680:	4637      	mov	r7, r6
 8017682:	2800      	cmp	r0, #0
 8017684:	f040 8243 	bne.w	8017b0e <_dtoa_r+0x956>
 8017688:	9d00      	ldr	r5, [sp, #0]
 801768a:	2331      	movs	r3, #49	; 0x31
 801768c:	f805 3b01 	strb.w	r3, [r5], #1
 8017690:	f10a 0a01 	add.w	sl, sl, #1
 8017694:	e23f      	b.n	8017b16 <_dtoa_r+0x95e>
 8017696:	07f2      	lsls	r2, r6, #31
 8017698:	d505      	bpl.n	80176a6 <_dtoa_r+0x4ee>
 801769a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801769e:	f7e8 ffab 	bl	80005f8 <__aeabi_dmul>
 80176a2:	3501      	adds	r5, #1
 80176a4:	2301      	movs	r3, #1
 80176a6:	1076      	asrs	r6, r6, #1
 80176a8:	3708      	adds	r7, #8
 80176aa:	e76c      	b.n	8017586 <_dtoa_r+0x3ce>
 80176ac:	2502      	movs	r5, #2
 80176ae:	e76f      	b.n	8017590 <_dtoa_r+0x3d8>
 80176b0:	9b01      	ldr	r3, [sp, #4]
 80176b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80176b6:	930c      	str	r3, [sp, #48]	; 0x30
 80176b8:	e78d      	b.n	80175d6 <_dtoa_r+0x41e>
 80176ba:	9900      	ldr	r1, [sp, #0]
 80176bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80176be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80176c0:	4b4e      	ldr	r3, [pc, #312]	; (80177fc <_dtoa_r+0x644>)
 80176c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80176c6:	4401      	add	r1, r0
 80176c8:	9102      	str	r1, [sp, #8]
 80176ca:	9908      	ldr	r1, [sp, #32]
 80176cc:	eeb0 8a47 	vmov.f32	s16, s14
 80176d0:	eef0 8a67 	vmov.f32	s17, s15
 80176d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80176dc:	2900      	cmp	r1, #0
 80176de:	d045      	beq.n	801776c <_dtoa_r+0x5b4>
 80176e0:	494c      	ldr	r1, [pc, #304]	; (8017814 <_dtoa_r+0x65c>)
 80176e2:	2000      	movs	r0, #0
 80176e4:	f7e9 f8b2 	bl	800084c <__aeabi_ddiv>
 80176e8:	ec53 2b18 	vmov	r2, r3, d8
 80176ec:	f7e8 fdcc 	bl	8000288 <__aeabi_dsub>
 80176f0:	9d00      	ldr	r5, [sp, #0]
 80176f2:	ec41 0b18 	vmov	d8, r0, r1
 80176f6:	4639      	mov	r1, r7
 80176f8:	4630      	mov	r0, r6
 80176fa:	f7e9 fa2d 	bl	8000b58 <__aeabi_d2iz>
 80176fe:	900c      	str	r0, [sp, #48]	; 0x30
 8017700:	f7e8 ff10 	bl	8000524 <__aeabi_i2d>
 8017704:	4602      	mov	r2, r0
 8017706:	460b      	mov	r3, r1
 8017708:	4630      	mov	r0, r6
 801770a:	4639      	mov	r1, r7
 801770c:	f7e8 fdbc 	bl	8000288 <__aeabi_dsub>
 8017710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017712:	3330      	adds	r3, #48	; 0x30
 8017714:	f805 3b01 	strb.w	r3, [r5], #1
 8017718:	ec53 2b18 	vmov	r2, r3, d8
 801771c:	4606      	mov	r6, r0
 801771e:	460f      	mov	r7, r1
 8017720:	f7e9 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8017724:	2800      	cmp	r0, #0
 8017726:	d165      	bne.n	80177f4 <_dtoa_r+0x63c>
 8017728:	4632      	mov	r2, r6
 801772a:	463b      	mov	r3, r7
 801772c:	4935      	ldr	r1, [pc, #212]	; (8017804 <_dtoa_r+0x64c>)
 801772e:	2000      	movs	r0, #0
 8017730:	f7e8 fdaa 	bl	8000288 <__aeabi_dsub>
 8017734:	ec53 2b18 	vmov	r2, r3, d8
 8017738:	f7e9 f9d0 	bl	8000adc <__aeabi_dcmplt>
 801773c:	2800      	cmp	r0, #0
 801773e:	f040 80b9 	bne.w	80178b4 <_dtoa_r+0x6fc>
 8017742:	9b02      	ldr	r3, [sp, #8]
 8017744:	429d      	cmp	r5, r3
 8017746:	f43f af75 	beq.w	8017634 <_dtoa_r+0x47c>
 801774a:	4b2f      	ldr	r3, [pc, #188]	; (8017808 <_dtoa_r+0x650>)
 801774c:	ec51 0b18 	vmov	r0, r1, d8
 8017750:	2200      	movs	r2, #0
 8017752:	f7e8 ff51 	bl	80005f8 <__aeabi_dmul>
 8017756:	4b2c      	ldr	r3, [pc, #176]	; (8017808 <_dtoa_r+0x650>)
 8017758:	ec41 0b18 	vmov	d8, r0, r1
 801775c:	2200      	movs	r2, #0
 801775e:	4630      	mov	r0, r6
 8017760:	4639      	mov	r1, r7
 8017762:	f7e8 ff49 	bl	80005f8 <__aeabi_dmul>
 8017766:	4606      	mov	r6, r0
 8017768:	460f      	mov	r7, r1
 801776a:	e7c4      	b.n	80176f6 <_dtoa_r+0x53e>
 801776c:	ec51 0b17 	vmov	r0, r1, d7
 8017770:	f7e8 ff42 	bl	80005f8 <__aeabi_dmul>
 8017774:	9b02      	ldr	r3, [sp, #8]
 8017776:	9d00      	ldr	r5, [sp, #0]
 8017778:	930c      	str	r3, [sp, #48]	; 0x30
 801777a:	ec41 0b18 	vmov	d8, r0, r1
 801777e:	4639      	mov	r1, r7
 8017780:	4630      	mov	r0, r6
 8017782:	f7e9 f9e9 	bl	8000b58 <__aeabi_d2iz>
 8017786:	9011      	str	r0, [sp, #68]	; 0x44
 8017788:	f7e8 fecc 	bl	8000524 <__aeabi_i2d>
 801778c:	4602      	mov	r2, r0
 801778e:	460b      	mov	r3, r1
 8017790:	4630      	mov	r0, r6
 8017792:	4639      	mov	r1, r7
 8017794:	f7e8 fd78 	bl	8000288 <__aeabi_dsub>
 8017798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801779a:	3330      	adds	r3, #48	; 0x30
 801779c:	f805 3b01 	strb.w	r3, [r5], #1
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	429d      	cmp	r5, r3
 80177a4:	4606      	mov	r6, r0
 80177a6:	460f      	mov	r7, r1
 80177a8:	f04f 0200 	mov.w	r2, #0
 80177ac:	d134      	bne.n	8017818 <_dtoa_r+0x660>
 80177ae:	4b19      	ldr	r3, [pc, #100]	; (8017814 <_dtoa_r+0x65c>)
 80177b0:	ec51 0b18 	vmov	r0, r1, d8
 80177b4:	f7e8 fd6a 	bl	800028c <__adddf3>
 80177b8:	4602      	mov	r2, r0
 80177ba:	460b      	mov	r3, r1
 80177bc:	4630      	mov	r0, r6
 80177be:	4639      	mov	r1, r7
 80177c0:	f7e9 f9aa 	bl	8000b18 <__aeabi_dcmpgt>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d175      	bne.n	80178b4 <_dtoa_r+0x6fc>
 80177c8:	ec53 2b18 	vmov	r2, r3, d8
 80177cc:	4911      	ldr	r1, [pc, #68]	; (8017814 <_dtoa_r+0x65c>)
 80177ce:	2000      	movs	r0, #0
 80177d0:	f7e8 fd5a 	bl	8000288 <__aeabi_dsub>
 80177d4:	4602      	mov	r2, r0
 80177d6:	460b      	mov	r3, r1
 80177d8:	4630      	mov	r0, r6
 80177da:	4639      	mov	r1, r7
 80177dc:	f7e9 f97e 	bl	8000adc <__aeabi_dcmplt>
 80177e0:	2800      	cmp	r0, #0
 80177e2:	f43f af27 	beq.w	8017634 <_dtoa_r+0x47c>
 80177e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177e8:	1e6b      	subs	r3, r5, #1
 80177ea:	930c      	str	r3, [sp, #48]	; 0x30
 80177ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80177f0:	2b30      	cmp	r3, #48	; 0x30
 80177f2:	d0f8      	beq.n	80177e6 <_dtoa_r+0x62e>
 80177f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80177f8:	e04a      	b.n	8017890 <_dtoa_r+0x6d8>
 80177fa:	bf00      	nop
 80177fc:	0801b090 	.word	0x0801b090
 8017800:	0801b068 	.word	0x0801b068
 8017804:	3ff00000 	.word	0x3ff00000
 8017808:	40240000 	.word	0x40240000
 801780c:	401c0000 	.word	0x401c0000
 8017810:	40140000 	.word	0x40140000
 8017814:	3fe00000 	.word	0x3fe00000
 8017818:	4baf      	ldr	r3, [pc, #700]	; (8017ad8 <_dtoa_r+0x920>)
 801781a:	f7e8 feed 	bl	80005f8 <__aeabi_dmul>
 801781e:	4606      	mov	r6, r0
 8017820:	460f      	mov	r7, r1
 8017822:	e7ac      	b.n	801777e <_dtoa_r+0x5c6>
 8017824:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017828:	9d00      	ldr	r5, [sp, #0]
 801782a:	4642      	mov	r2, r8
 801782c:	464b      	mov	r3, r9
 801782e:	4630      	mov	r0, r6
 8017830:	4639      	mov	r1, r7
 8017832:	f7e9 f80b 	bl	800084c <__aeabi_ddiv>
 8017836:	f7e9 f98f 	bl	8000b58 <__aeabi_d2iz>
 801783a:	9002      	str	r0, [sp, #8]
 801783c:	f7e8 fe72 	bl	8000524 <__aeabi_i2d>
 8017840:	4642      	mov	r2, r8
 8017842:	464b      	mov	r3, r9
 8017844:	f7e8 fed8 	bl	80005f8 <__aeabi_dmul>
 8017848:	4602      	mov	r2, r0
 801784a:	460b      	mov	r3, r1
 801784c:	4630      	mov	r0, r6
 801784e:	4639      	mov	r1, r7
 8017850:	f7e8 fd1a 	bl	8000288 <__aeabi_dsub>
 8017854:	9e02      	ldr	r6, [sp, #8]
 8017856:	9f01      	ldr	r7, [sp, #4]
 8017858:	3630      	adds	r6, #48	; 0x30
 801785a:	f805 6b01 	strb.w	r6, [r5], #1
 801785e:	9e00      	ldr	r6, [sp, #0]
 8017860:	1bae      	subs	r6, r5, r6
 8017862:	42b7      	cmp	r7, r6
 8017864:	4602      	mov	r2, r0
 8017866:	460b      	mov	r3, r1
 8017868:	d137      	bne.n	80178da <_dtoa_r+0x722>
 801786a:	f7e8 fd0f 	bl	800028c <__adddf3>
 801786e:	4642      	mov	r2, r8
 8017870:	464b      	mov	r3, r9
 8017872:	4606      	mov	r6, r0
 8017874:	460f      	mov	r7, r1
 8017876:	f7e9 f94f 	bl	8000b18 <__aeabi_dcmpgt>
 801787a:	b9c8      	cbnz	r0, 80178b0 <_dtoa_r+0x6f8>
 801787c:	4642      	mov	r2, r8
 801787e:	464b      	mov	r3, r9
 8017880:	4630      	mov	r0, r6
 8017882:	4639      	mov	r1, r7
 8017884:	f7e9 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 8017888:	b110      	cbz	r0, 8017890 <_dtoa_r+0x6d8>
 801788a:	9b02      	ldr	r3, [sp, #8]
 801788c:	07d9      	lsls	r1, r3, #31
 801788e:	d40f      	bmi.n	80178b0 <_dtoa_r+0x6f8>
 8017890:	4620      	mov	r0, r4
 8017892:	4659      	mov	r1, fp
 8017894:	f000 fe5c 	bl	8018550 <_Bfree>
 8017898:	2300      	movs	r3, #0
 801789a:	702b      	strb	r3, [r5, #0]
 801789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801789e:	f10a 0001 	add.w	r0, sl, #1
 80178a2:	6018      	str	r0, [r3, #0]
 80178a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	f43f acd8 	beq.w	801725c <_dtoa_r+0xa4>
 80178ac:	601d      	str	r5, [r3, #0]
 80178ae:	e4d5      	b.n	801725c <_dtoa_r+0xa4>
 80178b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80178b4:	462b      	mov	r3, r5
 80178b6:	461d      	mov	r5, r3
 80178b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80178bc:	2a39      	cmp	r2, #57	; 0x39
 80178be:	d108      	bne.n	80178d2 <_dtoa_r+0x71a>
 80178c0:	9a00      	ldr	r2, [sp, #0]
 80178c2:	429a      	cmp	r2, r3
 80178c4:	d1f7      	bne.n	80178b6 <_dtoa_r+0x6fe>
 80178c6:	9a07      	ldr	r2, [sp, #28]
 80178c8:	9900      	ldr	r1, [sp, #0]
 80178ca:	3201      	adds	r2, #1
 80178cc:	9207      	str	r2, [sp, #28]
 80178ce:	2230      	movs	r2, #48	; 0x30
 80178d0:	700a      	strb	r2, [r1, #0]
 80178d2:	781a      	ldrb	r2, [r3, #0]
 80178d4:	3201      	adds	r2, #1
 80178d6:	701a      	strb	r2, [r3, #0]
 80178d8:	e78c      	b.n	80177f4 <_dtoa_r+0x63c>
 80178da:	4b7f      	ldr	r3, [pc, #508]	; (8017ad8 <_dtoa_r+0x920>)
 80178dc:	2200      	movs	r2, #0
 80178de:	f7e8 fe8b 	bl	80005f8 <__aeabi_dmul>
 80178e2:	2200      	movs	r2, #0
 80178e4:	2300      	movs	r3, #0
 80178e6:	4606      	mov	r6, r0
 80178e8:	460f      	mov	r7, r1
 80178ea:	f7e9 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	d09b      	beq.n	801782a <_dtoa_r+0x672>
 80178f2:	e7cd      	b.n	8017890 <_dtoa_r+0x6d8>
 80178f4:	9a08      	ldr	r2, [sp, #32]
 80178f6:	2a00      	cmp	r2, #0
 80178f8:	f000 80c4 	beq.w	8017a84 <_dtoa_r+0x8cc>
 80178fc:	9a05      	ldr	r2, [sp, #20]
 80178fe:	2a01      	cmp	r2, #1
 8017900:	f300 80a8 	bgt.w	8017a54 <_dtoa_r+0x89c>
 8017904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017906:	2a00      	cmp	r2, #0
 8017908:	f000 80a0 	beq.w	8017a4c <_dtoa_r+0x894>
 801790c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017910:	9e06      	ldr	r6, [sp, #24]
 8017912:	4645      	mov	r5, r8
 8017914:	9a04      	ldr	r2, [sp, #16]
 8017916:	2101      	movs	r1, #1
 8017918:	441a      	add	r2, r3
 801791a:	4620      	mov	r0, r4
 801791c:	4498      	add	r8, r3
 801791e:	9204      	str	r2, [sp, #16]
 8017920:	f000 ff1c 	bl	801875c <__i2b>
 8017924:	4607      	mov	r7, r0
 8017926:	2d00      	cmp	r5, #0
 8017928:	dd0b      	ble.n	8017942 <_dtoa_r+0x78a>
 801792a:	9b04      	ldr	r3, [sp, #16]
 801792c:	2b00      	cmp	r3, #0
 801792e:	dd08      	ble.n	8017942 <_dtoa_r+0x78a>
 8017930:	42ab      	cmp	r3, r5
 8017932:	9a04      	ldr	r2, [sp, #16]
 8017934:	bfa8      	it	ge
 8017936:	462b      	movge	r3, r5
 8017938:	eba8 0803 	sub.w	r8, r8, r3
 801793c:	1aed      	subs	r5, r5, r3
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	9304      	str	r3, [sp, #16]
 8017942:	9b06      	ldr	r3, [sp, #24]
 8017944:	b1fb      	cbz	r3, 8017986 <_dtoa_r+0x7ce>
 8017946:	9b08      	ldr	r3, [sp, #32]
 8017948:	2b00      	cmp	r3, #0
 801794a:	f000 809f 	beq.w	8017a8c <_dtoa_r+0x8d4>
 801794e:	2e00      	cmp	r6, #0
 8017950:	dd11      	ble.n	8017976 <_dtoa_r+0x7be>
 8017952:	4639      	mov	r1, r7
 8017954:	4632      	mov	r2, r6
 8017956:	4620      	mov	r0, r4
 8017958:	f000 ffbc 	bl	80188d4 <__pow5mult>
 801795c:	465a      	mov	r2, fp
 801795e:	4601      	mov	r1, r0
 8017960:	4607      	mov	r7, r0
 8017962:	4620      	mov	r0, r4
 8017964:	f000 ff10 	bl	8018788 <__multiply>
 8017968:	4659      	mov	r1, fp
 801796a:	9007      	str	r0, [sp, #28]
 801796c:	4620      	mov	r0, r4
 801796e:	f000 fdef 	bl	8018550 <_Bfree>
 8017972:	9b07      	ldr	r3, [sp, #28]
 8017974:	469b      	mov	fp, r3
 8017976:	9b06      	ldr	r3, [sp, #24]
 8017978:	1b9a      	subs	r2, r3, r6
 801797a:	d004      	beq.n	8017986 <_dtoa_r+0x7ce>
 801797c:	4659      	mov	r1, fp
 801797e:	4620      	mov	r0, r4
 8017980:	f000 ffa8 	bl	80188d4 <__pow5mult>
 8017984:	4683      	mov	fp, r0
 8017986:	2101      	movs	r1, #1
 8017988:	4620      	mov	r0, r4
 801798a:	f000 fee7 	bl	801875c <__i2b>
 801798e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017990:	2b00      	cmp	r3, #0
 8017992:	4606      	mov	r6, r0
 8017994:	dd7c      	ble.n	8017a90 <_dtoa_r+0x8d8>
 8017996:	461a      	mov	r2, r3
 8017998:	4601      	mov	r1, r0
 801799a:	4620      	mov	r0, r4
 801799c:	f000 ff9a 	bl	80188d4 <__pow5mult>
 80179a0:	9b05      	ldr	r3, [sp, #20]
 80179a2:	2b01      	cmp	r3, #1
 80179a4:	4606      	mov	r6, r0
 80179a6:	dd76      	ble.n	8017a96 <_dtoa_r+0x8de>
 80179a8:	2300      	movs	r3, #0
 80179aa:	9306      	str	r3, [sp, #24]
 80179ac:	6933      	ldr	r3, [r6, #16]
 80179ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80179b2:	6918      	ldr	r0, [r3, #16]
 80179b4:	f000 fe82 	bl	80186bc <__hi0bits>
 80179b8:	f1c0 0020 	rsb	r0, r0, #32
 80179bc:	9b04      	ldr	r3, [sp, #16]
 80179be:	4418      	add	r0, r3
 80179c0:	f010 001f 	ands.w	r0, r0, #31
 80179c4:	f000 8086 	beq.w	8017ad4 <_dtoa_r+0x91c>
 80179c8:	f1c0 0320 	rsb	r3, r0, #32
 80179cc:	2b04      	cmp	r3, #4
 80179ce:	dd7f      	ble.n	8017ad0 <_dtoa_r+0x918>
 80179d0:	f1c0 001c 	rsb	r0, r0, #28
 80179d4:	9b04      	ldr	r3, [sp, #16]
 80179d6:	4403      	add	r3, r0
 80179d8:	4480      	add	r8, r0
 80179da:	4405      	add	r5, r0
 80179dc:	9304      	str	r3, [sp, #16]
 80179de:	f1b8 0f00 	cmp.w	r8, #0
 80179e2:	dd05      	ble.n	80179f0 <_dtoa_r+0x838>
 80179e4:	4659      	mov	r1, fp
 80179e6:	4642      	mov	r2, r8
 80179e8:	4620      	mov	r0, r4
 80179ea:	f000 ffcd 	bl	8018988 <__lshift>
 80179ee:	4683      	mov	fp, r0
 80179f0:	9b04      	ldr	r3, [sp, #16]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	dd05      	ble.n	8017a02 <_dtoa_r+0x84a>
 80179f6:	4631      	mov	r1, r6
 80179f8:	461a      	mov	r2, r3
 80179fa:	4620      	mov	r0, r4
 80179fc:	f000 ffc4 	bl	8018988 <__lshift>
 8017a00:	4606      	mov	r6, r0
 8017a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d069      	beq.n	8017adc <_dtoa_r+0x924>
 8017a08:	4631      	mov	r1, r6
 8017a0a:	4658      	mov	r0, fp
 8017a0c:	f001 f828 	bl	8018a60 <__mcmp>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	da63      	bge.n	8017adc <_dtoa_r+0x924>
 8017a14:	2300      	movs	r3, #0
 8017a16:	4659      	mov	r1, fp
 8017a18:	220a      	movs	r2, #10
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	f000 fdba 	bl	8018594 <__multadd>
 8017a20:	9b08      	ldr	r3, [sp, #32]
 8017a22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017a26:	4683      	mov	fp, r0
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	f000 818f 	beq.w	8017d4c <_dtoa_r+0xb94>
 8017a2e:	4639      	mov	r1, r7
 8017a30:	2300      	movs	r3, #0
 8017a32:	220a      	movs	r2, #10
 8017a34:	4620      	mov	r0, r4
 8017a36:	f000 fdad 	bl	8018594 <__multadd>
 8017a3a:	f1b9 0f00 	cmp.w	r9, #0
 8017a3e:	4607      	mov	r7, r0
 8017a40:	f300 808e 	bgt.w	8017b60 <_dtoa_r+0x9a8>
 8017a44:	9b05      	ldr	r3, [sp, #20]
 8017a46:	2b02      	cmp	r3, #2
 8017a48:	dc50      	bgt.n	8017aec <_dtoa_r+0x934>
 8017a4a:	e089      	b.n	8017b60 <_dtoa_r+0x9a8>
 8017a4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017a4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017a52:	e75d      	b.n	8017910 <_dtoa_r+0x758>
 8017a54:	9b01      	ldr	r3, [sp, #4]
 8017a56:	1e5e      	subs	r6, r3, #1
 8017a58:	9b06      	ldr	r3, [sp, #24]
 8017a5a:	42b3      	cmp	r3, r6
 8017a5c:	bfbf      	itttt	lt
 8017a5e:	9b06      	ldrlt	r3, [sp, #24]
 8017a60:	9606      	strlt	r6, [sp, #24]
 8017a62:	1af2      	sublt	r2, r6, r3
 8017a64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017a66:	bfb6      	itet	lt
 8017a68:	189b      	addlt	r3, r3, r2
 8017a6a:	1b9e      	subge	r6, r3, r6
 8017a6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017a6e:	9b01      	ldr	r3, [sp, #4]
 8017a70:	bfb8      	it	lt
 8017a72:	2600      	movlt	r6, #0
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	bfb5      	itete	lt
 8017a78:	eba8 0503 	sublt.w	r5, r8, r3
 8017a7c:	9b01      	ldrge	r3, [sp, #4]
 8017a7e:	2300      	movlt	r3, #0
 8017a80:	4645      	movge	r5, r8
 8017a82:	e747      	b.n	8017914 <_dtoa_r+0x75c>
 8017a84:	9e06      	ldr	r6, [sp, #24]
 8017a86:	9f08      	ldr	r7, [sp, #32]
 8017a88:	4645      	mov	r5, r8
 8017a8a:	e74c      	b.n	8017926 <_dtoa_r+0x76e>
 8017a8c:	9a06      	ldr	r2, [sp, #24]
 8017a8e:	e775      	b.n	801797c <_dtoa_r+0x7c4>
 8017a90:	9b05      	ldr	r3, [sp, #20]
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	dc18      	bgt.n	8017ac8 <_dtoa_r+0x910>
 8017a96:	9b02      	ldr	r3, [sp, #8]
 8017a98:	b9b3      	cbnz	r3, 8017ac8 <_dtoa_r+0x910>
 8017a9a:	9b03      	ldr	r3, [sp, #12]
 8017a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017aa0:	b9a3      	cbnz	r3, 8017acc <_dtoa_r+0x914>
 8017aa2:	9b03      	ldr	r3, [sp, #12]
 8017aa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017aa8:	0d1b      	lsrs	r3, r3, #20
 8017aaa:	051b      	lsls	r3, r3, #20
 8017aac:	b12b      	cbz	r3, 8017aba <_dtoa_r+0x902>
 8017aae:	9b04      	ldr	r3, [sp, #16]
 8017ab0:	3301      	adds	r3, #1
 8017ab2:	9304      	str	r3, [sp, #16]
 8017ab4:	f108 0801 	add.w	r8, r8, #1
 8017ab8:	2301      	movs	r3, #1
 8017aba:	9306      	str	r3, [sp, #24]
 8017abc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	f47f af74 	bne.w	80179ac <_dtoa_r+0x7f4>
 8017ac4:	2001      	movs	r0, #1
 8017ac6:	e779      	b.n	80179bc <_dtoa_r+0x804>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	e7f6      	b.n	8017aba <_dtoa_r+0x902>
 8017acc:	9b02      	ldr	r3, [sp, #8]
 8017ace:	e7f4      	b.n	8017aba <_dtoa_r+0x902>
 8017ad0:	d085      	beq.n	80179de <_dtoa_r+0x826>
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	301c      	adds	r0, #28
 8017ad6:	e77d      	b.n	80179d4 <_dtoa_r+0x81c>
 8017ad8:	40240000 	.word	0x40240000
 8017adc:	9b01      	ldr	r3, [sp, #4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	dc38      	bgt.n	8017b54 <_dtoa_r+0x99c>
 8017ae2:	9b05      	ldr	r3, [sp, #20]
 8017ae4:	2b02      	cmp	r3, #2
 8017ae6:	dd35      	ble.n	8017b54 <_dtoa_r+0x99c>
 8017ae8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017aec:	f1b9 0f00 	cmp.w	r9, #0
 8017af0:	d10d      	bne.n	8017b0e <_dtoa_r+0x956>
 8017af2:	4631      	mov	r1, r6
 8017af4:	464b      	mov	r3, r9
 8017af6:	2205      	movs	r2, #5
 8017af8:	4620      	mov	r0, r4
 8017afa:	f000 fd4b 	bl	8018594 <__multadd>
 8017afe:	4601      	mov	r1, r0
 8017b00:	4606      	mov	r6, r0
 8017b02:	4658      	mov	r0, fp
 8017b04:	f000 ffac 	bl	8018a60 <__mcmp>
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	f73f adbd 	bgt.w	8017688 <_dtoa_r+0x4d0>
 8017b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b10:	9d00      	ldr	r5, [sp, #0]
 8017b12:	ea6f 0a03 	mvn.w	sl, r3
 8017b16:	f04f 0800 	mov.w	r8, #0
 8017b1a:	4631      	mov	r1, r6
 8017b1c:	4620      	mov	r0, r4
 8017b1e:	f000 fd17 	bl	8018550 <_Bfree>
 8017b22:	2f00      	cmp	r7, #0
 8017b24:	f43f aeb4 	beq.w	8017890 <_dtoa_r+0x6d8>
 8017b28:	f1b8 0f00 	cmp.w	r8, #0
 8017b2c:	d005      	beq.n	8017b3a <_dtoa_r+0x982>
 8017b2e:	45b8      	cmp	r8, r7
 8017b30:	d003      	beq.n	8017b3a <_dtoa_r+0x982>
 8017b32:	4641      	mov	r1, r8
 8017b34:	4620      	mov	r0, r4
 8017b36:	f000 fd0b 	bl	8018550 <_Bfree>
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f000 fd07 	bl	8018550 <_Bfree>
 8017b42:	e6a5      	b.n	8017890 <_dtoa_r+0x6d8>
 8017b44:	2600      	movs	r6, #0
 8017b46:	4637      	mov	r7, r6
 8017b48:	e7e1      	b.n	8017b0e <_dtoa_r+0x956>
 8017b4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017b4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017b50:	4637      	mov	r7, r6
 8017b52:	e599      	b.n	8017688 <_dtoa_r+0x4d0>
 8017b54:	9b08      	ldr	r3, [sp, #32]
 8017b56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	f000 80fd 	beq.w	8017d5a <_dtoa_r+0xba2>
 8017b60:	2d00      	cmp	r5, #0
 8017b62:	dd05      	ble.n	8017b70 <_dtoa_r+0x9b8>
 8017b64:	4639      	mov	r1, r7
 8017b66:	462a      	mov	r2, r5
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f000 ff0d 	bl	8018988 <__lshift>
 8017b6e:	4607      	mov	r7, r0
 8017b70:	9b06      	ldr	r3, [sp, #24]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d05c      	beq.n	8017c30 <_dtoa_r+0xa78>
 8017b76:	6879      	ldr	r1, [r7, #4]
 8017b78:	4620      	mov	r0, r4
 8017b7a:	f000 fca9 	bl	80184d0 <_Balloc>
 8017b7e:	4605      	mov	r5, r0
 8017b80:	b928      	cbnz	r0, 8017b8e <_dtoa_r+0x9d6>
 8017b82:	4b80      	ldr	r3, [pc, #512]	; (8017d84 <_dtoa_r+0xbcc>)
 8017b84:	4602      	mov	r2, r0
 8017b86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017b8a:	f7ff bb2e 	b.w	80171ea <_dtoa_r+0x32>
 8017b8e:	693a      	ldr	r2, [r7, #16]
 8017b90:	3202      	adds	r2, #2
 8017b92:	0092      	lsls	r2, r2, #2
 8017b94:	f107 010c 	add.w	r1, r7, #12
 8017b98:	300c      	adds	r0, #12
 8017b9a:	f7fd fc19 	bl	80153d0 <memcpy>
 8017b9e:	2201      	movs	r2, #1
 8017ba0:	4629      	mov	r1, r5
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	f000 fef0 	bl	8018988 <__lshift>
 8017ba8:	9b00      	ldr	r3, [sp, #0]
 8017baa:	3301      	adds	r3, #1
 8017bac:	9301      	str	r3, [sp, #4]
 8017bae:	9b00      	ldr	r3, [sp, #0]
 8017bb0:	444b      	add	r3, r9
 8017bb2:	9307      	str	r3, [sp, #28]
 8017bb4:	9b02      	ldr	r3, [sp, #8]
 8017bb6:	f003 0301 	and.w	r3, r3, #1
 8017bba:	46b8      	mov	r8, r7
 8017bbc:	9306      	str	r3, [sp, #24]
 8017bbe:	4607      	mov	r7, r0
 8017bc0:	9b01      	ldr	r3, [sp, #4]
 8017bc2:	4631      	mov	r1, r6
 8017bc4:	3b01      	subs	r3, #1
 8017bc6:	4658      	mov	r0, fp
 8017bc8:	9302      	str	r3, [sp, #8]
 8017bca:	f7ff fa69 	bl	80170a0 <quorem>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	3330      	adds	r3, #48	; 0x30
 8017bd2:	9004      	str	r0, [sp, #16]
 8017bd4:	4641      	mov	r1, r8
 8017bd6:	4658      	mov	r0, fp
 8017bd8:	9308      	str	r3, [sp, #32]
 8017bda:	f000 ff41 	bl	8018a60 <__mcmp>
 8017bde:	463a      	mov	r2, r7
 8017be0:	4681      	mov	r9, r0
 8017be2:	4631      	mov	r1, r6
 8017be4:	4620      	mov	r0, r4
 8017be6:	f000 ff57 	bl	8018a98 <__mdiff>
 8017bea:	68c2      	ldr	r2, [r0, #12]
 8017bec:	9b08      	ldr	r3, [sp, #32]
 8017bee:	4605      	mov	r5, r0
 8017bf0:	bb02      	cbnz	r2, 8017c34 <_dtoa_r+0xa7c>
 8017bf2:	4601      	mov	r1, r0
 8017bf4:	4658      	mov	r0, fp
 8017bf6:	f000 ff33 	bl	8018a60 <__mcmp>
 8017bfa:	9b08      	ldr	r3, [sp, #32]
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	4629      	mov	r1, r5
 8017c00:	4620      	mov	r0, r4
 8017c02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017c06:	f000 fca3 	bl	8018550 <_Bfree>
 8017c0a:	9b05      	ldr	r3, [sp, #20]
 8017c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c0e:	9d01      	ldr	r5, [sp, #4]
 8017c10:	ea43 0102 	orr.w	r1, r3, r2
 8017c14:	9b06      	ldr	r3, [sp, #24]
 8017c16:	430b      	orrs	r3, r1
 8017c18:	9b08      	ldr	r3, [sp, #32]
 8017c1a:	d10d      	bne.n	8017c38 <_dtoa_r+0xa80>
 8017c1c:	2b39      	cmp	r3, #57	; 0x39
 8017c1e:	d029      	beq.n	8017c74 <_dtoa_r+0xabc>
 8017c20:	f1b9 0f00 	cmp.w	r9, #0
 8017c24:	dd01      	ble.n	8017c2a <_dtoa_r+0xa72>
 8017c26:	9b04      	ldr	r3, [sp, #16]
 8017c28:	3331      	adds	r3, #49	; 0x31
 8017c2a:	9a02      	ldr	r2, [sp, #8]
 8017c2c:	7013      	strb	r3, [r2, #0]
 8017c2e:	e774      	b.n	8017b1a <_dtoa_r+0x962>
 8017c30:	4638      	mov	r0, r7
 8017c32:	e7b9      	b.n	8017ba8 <_dtoa_r+0x9f0>
 8017c34:	2201      	movs	r2, #1
 8017c36:	e7e2      	b.n	8017bfe <_dtoa_r+0xa46>
 8017c38:	f1b9 0f00 	cmp.w	r9, #0
 8017c3c:	db06      	blt.n	8017c4c <_dtoa_r+0xa94>
 8017c3e:	9905      	ldr	r1, [sp, #20]
 8017c40:	ea41 0909 	orr.w	r9, r1, r9
 8017c44:	9906      	ldr	r1, [sp, #24]
 8017c46:	ea59 0101 	orrs.w	r1, r9, r1
 8017c4a:	d120      	bne.n	8017c8e <_dtoa_r+0xad6>
 8017c4c:	2a00      	cmp	r2, #0
 8017c4e:	ddec      	ble.n	8017c2a <_dtoa_r+0xa72>
 8017c50:	4659      	mov	r1, fp
 8017c52:	2201      	movs	r2, #1
 8017c54:	4620      	mov	r0, r4
 8017c56:	9301      	str	r3, [sp, #4]
 8017c58:	f000 fe96 	bl	8018988 <__lshift>
 8017c5c:	4631      	mov	r1, r6
 8017c5e:	4683      	mov	fp, r0
 8017c60:	f000 fefe 	bl	8018a60 <__mcmp>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	9b01      	ldr	r3, [sp, #4]
 8017c68:	dc02      	bgt.n	8017c70 <_dtoa_r+0xab8>
 8017c6a:	d1de      	bne.n	8017c2a <_dtoa_r+0xa72>
 8017c6c:	07da      	lsls	r2, r3, #31
 8017c6e:	d5dc      	bpl.n	8017c2a <_dtoa_r+0xa72>
 8017c70:	2b39      	cmp	r3, #57	; 0x39
 8017c72:	d1d8      	bne.n	8017c26 <_dtoa_r+0xa6e>
 8017c74:	9a02      	ldr	r2, [sp, #8]
 8017c76:	2339      	movs	r3, #57	; 0x39
 8017c78:	7013      	strb	r3, [r2, #0]
 8017c7a:	462b      	mov	r3, r5
 8017c7c:	461d      	mov	r5, r3
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c84:	2a39      	cmp	r2, #57	; 0x39
 8017c86:	d050      	beq.n	8017d2a <_dtoa_r+0xb72>
 8017c88:	3201      	adds	r2, #1
 8017c8a:	701a      	strb	r2, [r3, #0]
 8017c8c:	e745      	b.n	8017b1a <_dtoa_r+0x962>
 8017c8e:	2a00      	cmp	r2, #0
 8017c90:	dd03      	ble.n	8017c9a <_dtoa_r+0xae2>
 8017c92:	2b39      	cmp	r3, #57	; 0x39
 8017c94:	d0ee      	beq.n	8017c74 <_dtoa_r+0xabc>
 8017c96:	3301      	adds	r3, #1
 8017c98:	e7c7      	b.n	8017c2a <_dtoa_r+0xa72>
 8017c9a:	9a01      	ldr	r2, [sp, #4]
 8017c9c:	9907      	ldr	r1, [sp, #28]
 8017c9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017ca2:	428a      	cmp	r2, r1
 8017ca4:	d02a      	beq.n	8017cfc <_dtoa_r+0xb44>
 8017ca6:	4659      	mov	r1, fp
 8017ca8:	2300      	movs	r3, #0
 8017caa:	220a      	movs	r2, #10
 8017cac:	4620      	mov	r0, r4
 8017cae:	f000 fc71 	bl	8018594 <__multadd>
 8017cb2:	45b8      	cmp	r8, r7
 8017cb4:	4683      	mov	fp, r0
 8017cb6:	f04f 0300 	mov.w	r3, #0
 8017cba:	f04f 020a 	mov.w	r2, #10
 8017cbe:	4641      	mov	r1, r8
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	d107      	bne.n	8017cd4 <_dtoa_r+0xb1c>
 8017cc4:	f000 fc66 	bl	8018594 <__multadd>
 8017cc8:	4680      	mov	r8, r0
 8017cca:	4607      	mov	r7, r0
 8017ccc:	9b01      	ldr	r3, [sp, #4]
 8017cce:	3301      	adds	r3, #1
 8017cd0:	9301      	str	r3, [sp, #4]
 8017cd2:	e775      	b.n	8017bc0 <_dtoa_r+0xa08>
 8017cd4:	f000 fc5e 	bl	8018594 <__multadd>
 8017cd8:	4639      	mov	r1, r7
 8017cda:	4680      	mov	r8, r0
 8017cdc:	2300      	movs	r3, #0
 8017cde:	220a      	movs	r2, #10
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	f000 fc57 	bl	8018594 <__multadd>
 8017ce6:	4607      	mov	r7, r0
 8017ce8:	e7f0      	b.n	8017ccc <_dtoa_r+0xb14>
 8017cea:	f1b9 0f00 	cmp.w	r9, #0
 8017cee:	9a00      	ldr	r2, [sp, #0]
 8017cf0:	bfcc      	ite	gt
 8017cf2:	464d      	movgt	r5, r9
 8017cf4:	2501      	movle	r5, #1
 8017cf6:	4415      	add	r5, r2
 8017cf8:	f04f 0800 	mov.w	r8, #0
 8017cfc:	4659      	mov	r1, fp
 8017cfe:	2201      	movs	r2, #1
 8017d00:	4620      	mov	r0, r4
 8017d02:	9301      	str	r3, [sp, #4]
 8017d04:	f000 fe40 	bl	8018988 <__lshift>
 8017d08:	4631      	mov	r1, r6
 8017d0a:	4683      	mov	fp, r0
 8017d0c:	f000 fea8 	bl	8018a60 <__mcmp>
 8017d10:	2800      	cmp	r0, #0
 8017d12:	dcb2      	bgt.n	8017c7a <_dtoa_r+0xac2>
 8017d14:	d102      	bne.n	8017d1c <_dtoa_r+0xb64>
 8017d16:	9b01      	ldr	r3, [sp, #4]
 8017d18:	07db      	lsls	r3, r3, #31
 8017d1a:	d4ae      	bmi.n	8017c7a <_dtoa_r+0xac2>
 8017d1c:	462b      	mov	r3, r5
 8017d1e:	461d      	mov	r5, r3
 8017d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017d24:	2a30      	cmp	r2, #48	; 0x30
 8017d26:	d0fa      	beq.n	8017d1e <_dtoa_r+0xb66>
 8017d28:	e6f7      	b.n	8017b1a <_dtoa_r+0x962>
 8017d2a:	9a00      	ldr	r2, [sp, #0]
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	d1a5      	bne.n	8017c7c <_dtoa_r+0xac4>
 8017d30:	f10a 0a01 	add.w	sl, sl, #1
 8017d34:	2331      	movs	r3, #49	; 0x31
 8017d36:	e779      	b.n	8017c2c <_dtoa_r+0xa74>
 8017d38:	4b13      	ldr	r3, [pc, #76]	; (8017d88 <_dtoa_r+0xbd0>)
 8017d3a:	f7ff baaf 	b.w	801729c <_dtoa_r+0xe4>
 8017d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	f47f aa86 	bne.w	8017252 <_dtoa_r+0x9a>
 8017d46:	4b11      	ldr	r3, [pc, #68]	; (8017d8c <_dtoa_r+0xbd4>)
 8017d48:	f7ff baa8 	b.w	801729c <_dtoa_r+0xe4>
 8017d4c:	f1b9 0f00 	cmp.w	r9, #0
 8017d50:	dc03      	bgt.n	8017d5a <_dtoa_r+0xba2>
 8017d52:	9b05      	ldr	r3, [sp, #20]
 8017d54:	2b02      	cmp	r3, #2
 8017d56:	f73f aec9 	bgt.w	8017aec <_dtoa_r+0x934>
 8017d5a:	9d00      	ldr	r5, [sp, #0]
 8017d5c:	4631      	mov	r1, r6
 8017d5e:	4658      	mov	r0, fp
 8017d60:	f7ff f99e 	bl	80170a0 <quorem>
 8017d64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017d68:	f805 3b01 	strb.w	r3, [r5], #1
 8017d6c:	9a00      	ldr	r2, [sp, #0]
 8017d6e:	1aaa      	subs	r2, r5, r2
 8017d70:	4591      	cmp	r9, r2
 8017d72:	ddba      	ble.n	8017cea <_dtoa_r+0xb32>
 8017d74:	4659      	mov	r1, fp
 8017d76:	2300      	movs	r3, #0
 8017d78:	220a      	movs	r2, #10
 8017d7a:	4620      	mov	r0, r4
 8017d7c:	f000 fc0a 	bl	8018594 <__multadd>
 8017d80:	4683      	mov	fp, r0
 8017d82:	e7eb      	b.n	8017d5c <_dtoa_r+0xba4>
 8017d84:	0801af74 	.word	0x0801af74
 8017d88:	0801ad70 	.word	0x0801ad70
 8017d8c:	0801aef1 	.word	0x0801aef1

08017d90 <rshift>:
 8017d90:	6903      	ldr	r3, [r0, #16]
 8017d92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017d96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017d9e:	f100 0414 	add.w	r4, r0, #20
 8017da2:	dd45      	ble.n	8017e30 <rshift+0xa0>
 8017da4:	f011 011f 	ands.w	r1, r1, #31
 8017da8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017dac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017db0:	d10c      	bne.n	8017dcc <rshift+0x3c>
 8017db2:	f100 0710 	add.w	r7, r0, #16
 8017db6:	4629      	mov	r1, r5
 8017db8:	42b1      	cmp	r1, r6
 8017dba:	d334      	bcc.n	8017e26 <rshift+0x96>
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	009b      	lsls	r3, r3, #2
 8017dc0:	1eea      	subs	r2, r5, #3
 8017dc2:	4296      	cmp	r6, r2
 8017dc4:	bf38      	it	cc
 8017dc6:	2300      	movcc	r3, #0
 8017dc8:	4423      	add	r3, r4
 8017dca:	e015      	b.n	8017df8 <rshift+0x68>
 8017dcc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017dd0:	f1c1 0820 	rsb	r8, r1, #32
 8017dd4:	40cf      	lsrs	r7, r1
 8017dd6:	f105 0e04 	add.w	lr, r5, #4
 8017dda:	46a1      	mov	r9, r4
 8017ddc:	4576      	cmp	r6, lr
 8017dde:	46f4      	mov	ip, lr
 8017de0:	d815      	bhi.n	8017e0e <rshift+0x7e>
 8017de2:	1a9b      	subs	r3, r3, r2
 8017de4:	009a      	lsls	r2, r3, #2
 8017de6:	3a04      	subs	r2, #4
 8017de8:	3501      	adds	r5, #1
 8017dea:	42ae      	cmp	r6, r5
 8017dec:	bf38      	it	cc
 8017dee:	2200      	movcc	r2, #0
 8017df0:	18a3      	adds	r3, r4, r2
 8017df2:	50a7      	str	r7, [r4, r2]
 8017df4:	b107      	cbz	r7, 8017df8 <rshift+0x68>
 8017df6:	3304      	adds	r3, #4
 8017df8:	1b1a      	subs	r2, r3, r4
 8017dfa:	42a3      	cmp	r3, r4
 8017dfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017e00:	bf08      	it	eq
 8017e02:	2300      	moveq	r3, #0
 8017e04:	6102      	str	r2, [r0, #16]
 8017e06:	bf08      	it	eq
 8017e08:	6143      	streq	r3, [r0, #20]
 8017e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e0e:	f8dc c000 	ldr.w	ip, [ip]
 8017e12:	fa0c fc08 	lsl.w	ip, ip, r8
 8017e16:	ea4c 0707 	orr.w	r7, ip, r7
 8017e1a:	f849 7b04 	str.w	r7, [r9], #4
 8017e1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017e22:	40cf      	lsrs	r7, r1
 8017e24:	e7da      	b.n	8017ddc <rshift+0x4c>
 8017e26:	f851 cb04 	ldr.w	ip, [r1], #4
 8017e2a:	f847 cf04 	str.w	ip, [r7, #4]!
 8017e2e:	e7c3      	b.n	8017db8 <rshift+0x28>
 8017e30:	4623      	mov	r3, r4
 8017e32:	e7e1      	b.n	8017df8 <rshift+0x68>

08017e34 <__hexdig_fun>:
 8017e34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017e38:	2b09      	cmp	r3, #9
 8017e3a:	d802      	bhi.n	8017e42 <__hexdig_fun+0xe>
 8017e3c:	3820      	subs	r0, #32
 8017e3e:	b2c0      	uxtb	r0, r0
 8017e40:	4770      	bx	lr
 8017e42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017e46:	2b05      	cmp	r3, #5
 8017e48:	d801      	bhi.n	8017e4e <__hexdig_fun+0x1a>
 8017e4a:	3847      	subs	r0, #71	; 0x47
 8017e4c:	e7f7      	b.n	8017e3e <__hexdig_fun+0xa>
 8017e4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017e52:	2b05      	cmp	r3, #5
 8017e54:	d801      	bhi.n	8017e5a <__hexdig_fun+0x26>
 8017e56:	3827      	subs	r0, #39	; 0x27
 8017e58:	e7f1      	b.n	8017e3e <__hexdig_fun+0xa>
 8017e5a:	2000      	movs	r0, #0
 8017e5c:	4770      	bx	lr
	...

08017e60 <__gethex>:
 8017e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e64:	ed2d 8b02 	vpush	{d8}
 8017e68:	b089      	sub	sp, #36	; 0x24
 8017e6a:	ee08 0a10 	vmov	s16, r0
 8017e6e:	9304      	str	r3, [sp, #16]
 8017e70:	4bbc      	ldr	r3, [pc, #752]	; (8018164 <__gethex+0x304>)
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	9301      	str	r3, [sp, #4]
 8017e76:	4618      	mov	r0, r3
 8017e78:	468b      	mov	fp, r1
 8017e7a:	4690      	mov	r8, r2
 8017e7c:	f7e8 f9a8 	bl	80001d0 <strlen>
 8017e80:	9b01      	ldr	r3, [sp, #4]
 8017e82:	f8db 2000 	ldr.w	r2, [fp]
 8017e86:	4403      	add	r3, r0
 8017e88:	4682      	mov	sl, r0
 8017e8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017e8e:	9305      	str	r3, [sp, #20]
 8017e90:	1c93      	adds	r3, r2, #2
 8017e92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017e96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017e9a:	32fe      	adds	r2, #254	; 0xfe
 8017e9c:	18d1      	adds	r1, r2, r3
 8017e9e:	461f      	mov	r7, r3
 8017ea0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017ea4:	9100      	str	r1, [sp, #0]
 8017ea6:	2830      	cmp	r0, #48	; 0x30
 8017ea8:	d0f8      	beq.n	8017e9c <__gethex+0x3c>
 8017eaa:	f7ff ffc3 	bl	8017e34 <__hexdig_fun>
 8017eae:	4604      	mov	r4, r0
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	d13a      	bne.n	8017f2a <__gethex+0xca>
 8017eb4:	9901      	ldr	r1, [sp, #4]
 8017eb6:	4652      	mov	r2, sl
 8017eb8:	4638      	mov	r0, r7
 8017eba:	f001 fa12 	bl	80192e2 <strncmp>
 8017ebe:	4605      	mov	r5, r0
 8017ec0:	2800      	cmp	r0, #0
 8017ec2:	d168      	bne.n	8017f96 <__gethex+0x136>
 8017ec4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017ec8:	eb07 060a 	add.w	r6, r7, sl
 8017ecc:	f7ff ffb2 	bl	8017e34 <__hexdig_fun>
 8017ed0:	2800      	cmp	r0, #0
 8017ed2:	d062      	beq.n	8017f9a <__gethex+0x13a>
 8017ed4:	4633      	mov	r3, r6
 8017ed6:	7818      	ldrb	r0, [r3, #0]
 8017ed8:	2830      	cmp	r0, #48	; 0x30
 8017eda:	461f      	mov	r7, r3
 8017edc:	f103 0301 	add.w	r3, r3, #1
 8017ee0:	d0f9      	beq.n	8017ed6 <__gethex+0x76>
 8017ee2:	f7ff ffa7 	bl	8017e34 <__hexdig_fun>
 8017ee6:	2301      	movs	r3, #1
 8017ee8:	fab0 f480 	clz	r4, r0
 8017eec:	0964      	lsrs	r4, r4, #5
 8017eee:	4635      	mov	r5, r6
 8017ef0:	9300      	str	r3, [sp, #0]
 8017ef2:	463a      	mov	r2, r7
 8017ef4:	4616      	mov	r6, r2
 8017ef6:	3201      	adds	r2, #1
 8017ef8:	7830      	ldrb	r0, [r6, #0]
 8017efa:	f7ff ff9b 	bl	8017e34 <__hexdig_fun>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d1f8      	bne.n	8017ef4 <__gethex+0x94>
 8017f02:	9901      	ldr	r1, [sp, #4]
 8017f04:	4652      	mov	r2, sl
 8017f06:	4630      	mov	r0, r6
 8017f08:	f001 f9eb 	bl	80192e2 <strncmp>
 8017f0c:	b980      	cbnz	r0, 8017f30 <__gethex+0xd0>
 8017f0e:	b94d      	cbnz	r5, 8017f24 <__gethex+0xc4>
 8017f10:	eb06 050a 	add.w	r5, r6, sl
 8017f14:	462a      	mov	r2, r5
 8017f16:	4616      	mov	r6, r2
 8017f18:	3201      	adds	r2, #1
 8017f1a:	7830      	ldrb	r0, [r6, #0]
 8017f1c:	f7ff ff8a 	bl	8017e34 <__hexdig_fun>
 8017f20:	2800      	cmp	r0, #0
 8017f22:	d1f8      	bne.n	8017f16 <__gethex+0xb6>
 8017f24:	1bad      	subs	r5, r5, r6
 8017f26:	00ad      	lsls	r5, r5, #2
 8017f28:	e004      	b.n	8017f34 <__gethex+0xd4>
 8017f2a:	2400      	movs	r4, #0
 8017f2c:	4625      	mov	r5, r4
 8017f2e:	e7e0      	b.n	8017ef2 <__gethex+0x92>
 8017f30:	2d00      	cmp	r5, #0
 8017f32:	d1f7      	bne.n	8017f24 <__gethex+0xc4>
 8017f34:	7833      	ldrb	r3, [r6, #0]
 8017f36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017f3a:	2b50      	cmp	r3, #80	; 0x50
 8017f3c:	d13b      	bne.n	8017fb6 <__gethex+0x156>
 8017f3e:	7873      	ldrb	r3, [r6, #1]
 8017f40:	2b2b      	cmp	r3, #43	; 0x2b
 8017f42:	d02c      	beq.n	8017f9e <__gethex+0x13e>
 8017f44:	2b2d      	cmp	r3, #45	; 0x2d
 8017f46:	d02e      	beq.n	8017fa6 <__gethex+0x146>
 8017f48:	1c71      	adds	r1, r6, #1
 8017f4a:	f04f 0900 	mov.w	r9, #0
 8017f4e:	7808      	ldrb	r0, [r1, #0]
 8017f50:	f7ff ff70 	bl	8017e34 <__hexdig_fun>
 8017f54:	1e43      	subs	r3, r0, #1
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	2b18      	cmp	r3, #24
 8017f5a:	d82c      	bhi.n	8017fb6 <__gethex+0x156>
 8017f5c:	f1a0 0210 	sub.w	r2, r0, #16
 8017f60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017f64:	f7ff ff66 	bl	8017e34 <__hexdig_fun>
 8017f68:	1e43      	subs	r3, r0, #1
 8017f6a:	b2db      	uxtb	r3, r3
 8017f6c:	2b18      	cmp	r3, #24
 8017f6e:	d91d      	bls.n	8017fac <__gethex+0x14c>
 8017f70:	f1b9 0f00 	cmp.w	r9, #0
 8017f74:	d000      	beq.n	8017f78 <__gethex+0x118>
 8017f76:	4252      	negs	r2, r2
 8017f78:	4415      	add	r5, r2
 8017f7a:	f8cb 1000 	str.w	r1, [fp]
 8017f7e:	b1e4      	cbz	r4, 8017fba <__gethex+0x15a>
 8017f80:	9b00      	ldr	r3, [sp, #0]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	bf14      	ite	ne
 8017f86:	2700      	movne	r7, #0
 8017f88:	2706      	moveq	r7, #6
 8017f8a:	4638      	mov	r0, r7
 8017f8c:	b009      	add	sp, #36	; 0x24
 8017f8e:	ecbd 8b02 	vpop	{d8}
 8017f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f96:	463e      	mov	r6, r7
 8017f98:	4625      	mov	r5, r4
 8017f9a:	2401      	movs	r4, #1
 8017f9c:	e7ca      	b.n	8017f34 <__gethex+0xd4>
 8017f9e:	f04f 0900 	mov.w	r9, #0
 8017fa2:	1cb1      	adds	r1, r6, #2
 8017fa4:	e7d3      	b.n	8017f4e <__gethex+0xee>
 8017fa6:	f04f 0901 	mov.w	r9, #1
 8017faa:	e7fa      	b.n	8017fa2 <__gethex+0x142>
 8017fac:	230a      	movs	r3, #10
 8017fae:	fb03 0202 	mla	r2, r3, r2, r0
 8017fb2:	3a10      	subs	r2, #16
 8017fb4:	e7d4      	b.n	8017f60 <__gethex+0x100>
 8017fb6:	4631      	mov	r1, r6
 8017fb8:	e7df      	b.n	8017f7a <__gethex+0x11a>
 8017fba:	1bf3      	subs	r3, r6, r7
 8017fbc:	3b01      	subs	r3, #1
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	2b07      	cmp	r3, #7
 8017fc2:	dc0b      	bgt.n	8017fdc <__gethex+0x17c>
 8017fc4:	ee18 0a10 	vmov	r0, s16
 8017fc8:	f000 fa82 	bl	80184d0 <_Balloc>
 8017fcc:	4604      	mov	r4, r0
 8017fce:	b940      	cbnz	r0, 8017fe2 <__gethex+0x182>
 8017fd0:	4b65      	ldr	r3, [pc, #404]	; (8018168 <__gethex+0x308>)
 8017fd2:	4602      	mov	r2, r0
 8017fd4:	21de      	movs	r1, #222	; 0xde
 8017fd6:	4865      	ldr	r0, [pc, #404]	; (801816c <__gethex+0x30c>)
 8017fd8:	f001 f9a2 	bl	8019320 <__assert_func>
 8017fdc:	3101      	adds	r1, #1
 8017fde:	105b      	asrs	r3, r3, #1
 8017fe0:	e7ee      	b.n	8017fc0 <__gethex+0x160>
 8017fe2:	f100 0914 	add.w	r9, r0, #20
 8017fe6:	f04f 0b00 	mov.w	fp, #0
 8017fea:	f1ca 0301 	rsb	r3, sl, #1
 8017fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8017ff2:	f8cd b000 	str.w	fp, [sp]
 8017ff6:	9306      	str	r3, [sp, #24]
 8017ff8:	42b7      	cmp	r7, r6
 8017ffa:	d340      	bcc.n	801807e <__gethex+0x21e>
 8017ffc:	9802      	ldr	r0, [sp, #8]
 8017ffe:	9b00      	ldr	r3, [sp, #0]
 8018000:	f840 3b04 	str.w	r3, [r0], #4
 8018004:	eba0 0009 	sub.w	r0, r0, r9
 8018008:	1080      	asrs	r0, r0, #2
 801800a:	0146      	lsls	r6, r0, #5
 801800c:	6120      	str	r0, [r4, #16]
 801800e:	4618      	mov	r0, r3
 8018010:	f000 fb54 	bl	80186bc <__hi0bits>
 8018014:	1a30      	subs	r0, r6, r0
 8018016:	f8d8 6000 	ldr.w	r6, [r8]
 801801a:	42b0      	cmp	r0, r6
 801801c:	dd63      	ble.n	80180e6 <__gethex+0x286>
 801801e:	1b87      	subs	r7, r0, r6
 8018020:	4639      	mov	r1, r7
 8018022:	4620      	mov	r0, r4
 8018024:	f000 feee 	bl	8018e04 <__any_on>
 8018028:	4682      	mov	sl, r0
 801802a:	b1a8      	cbz	r0, 8018058 <__gethex+0x1f8>
 801802c:	1e7b      	subs	r3, r7, #1
 801802e:	1159      	asrs	r1, r3, #5
 8018030:	f003 021f 	and.w	r2, r3, #31
 8018034:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018038:	f04f 0a01 	mov.w	sl, #1
 801803c:	fa0a f202 	lsl.w	r2, sl, r2
 8018040:	420a      	tst	r2, r1
 8018042:	d009      	beq.n	8018058 <__gethex+0x1f8>
 8018044:	4553      	cmp	r3, sl
 8018046:	dd05      	ble.n	8018054 <__gethex+0x1f4>
 8018048:	1eb9      	subs	r1, r7, #2
 801804a:	4620      	mov	r0, r4
 801804c:	f000 feda 	bl	8018e04 <__any_on>
 8018050:	2800      	cmp	r0, #0
 8018052:	d145      	bne.n	80180e0 <__gethex+0x280>
 8018054:	f04f 0a02 	mov.w	sl, #2
 8018058:	4639      	mov	r1, r7
 801805a:	4620      	mov	r0, r4
 801805c:	f7ff fe98 	bl	8017d90 <rshift>
 8018060:	443d      	add	r5, r7
 8018062:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018066:	42ab      	cmp	r3, r5
 8018068:	da4c      	bge.n	8018104 <__gethex+0x2a4>
 801806a:	ee18 0a10 	vmov	r0, s16
 801806e:	4621      	mov	r1, r4
 8018070:	f000 fa6e 	bl	8018550 <_Bfree>
 8018074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018076:	2300      	movs	r3, #0
 8018078:	6013      	str	r3, [r2, #0]
 801807a:	27a3      	movs	r7, #163	; 0xa3
 801807c:	e785      	b.n	8017f8a <__gethex+0x12a>
 801807e:	1e73      	subs	r3, r6, #1
 8018080:	9a05      	ldr	r2, [sp, #20]
 8018082:	9303      	str	r3, [sp, #12]
 8018084:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018088:	4293      	cmp	r3, r2
 801808a:	d019      	beq.n	80180c0 <__gethex+0x260>
 801808c:	f1bb 0f20 	cmp.w	fp, #32
 8018090:	d107      	bne.n	80180a2 <__gethex+0x242>
 8018092:	9b02      	ldr	r3, [sp, #8]
 8018094:	9a00      	ldr	r2, [sp, #0]
 8018096:	f843 2b04 	str.w	r2, [r3], #4
 801809a:	9302      	str	r3, [sp, #8]
 801809c:	2300      	movs	r3, #0
 801809e:	9300      	str	r3, [sp, #0]
 80180a0:	469b      	mov	fp, r3
 80180a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80180a6:	f7ff fec5 	bl	8017e34 <__hexdig_fun>
 80180aa:	9b00      	ldr	r3, [sp, #0]
 80180ac:	f000 000f 	and.w	r0, r0, #15
 80180b0:	fa00 f00b 	lsl.w	r0, r0, fp
 80180b4:	4303      	orrs	r3, r0
 80180b6:	9300      	str	r3, [sp, #0]
 80180b8:	f10b 0b04 	add.w	fp, fp, #4
 80180bc:	9b03      	ldr	r3, [sp, #12]
 80180be:	e00d      	b.n	80180dc <__gethex+0x27c>
 80180c0:	9b03      	ldr	r3, [sp, #12]
 80180c2:	9a06      	ldr	r2, [sp, #24]
 80180c4:	4413      	add	r3, r2
 80180c6:	42bb      	cmp	r3, r7
 80180c8:	d3e0      	bcc.n	801808c <__gethex+0x22c>
 80180ca:	4618      	mov	r0, r3
 80180cc:	9901      	ldr	r1, [sp, #4]
 80180ce:	9307      	str	r3, [sp, #28]
 80180d0:	4652      	mov	r2, sl
 80180d2:	f001 f906 	bl	80192e2 <strncmp>
 80180d6:	9b07      	ldr	r3, [sp, #28]
 80180d8:	2800      	cmp	r0, #0
 80180da:	d1d7      	bne.n	801808c <__gethex+0x22c>
 80180dc:	461e      	mov	r6, r3
 80180de:	e78b      	b.n	8017ff8 <__gethex+0x198>
 80180e0:	f04f 0a03 	mov.w	sl, #3
 80180e4:	e7b8      	b.n	8018058 <__gethex+0x1f8>
 80180e6:	da0a      	bge.n	80180fe <__gethex+0x29e>
 80180e8:	1a37      	subs	r7, r6, r0
 80180ea:	4621      	mov	r1, r4
 80180ec:	ee18 0a10 	vmov	r0, s16
 80180f0:	463a      	mov	r2, r7
 80180f2:	f000 fc49 	bl	8018988 <__lshift>
 80180f6:	1bed      	subs	r5, r5, r7
 80180f8:	4604      	mov	r4, r0
 80180fa:	f100 0914 	add.w	r9, r0, #20
 80180fe:	f04f 0a00 	mov.w	sl, #0
 8018102:	e7ae      	b.n	8018062 <__gethex+0x202>
 8018104:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018108:	42a8      	cmp	r0, r5
 801810a:	dd72      	ble.n	80181f2 <__gethex+0x392>
 801810c:	1b45      	subs	r5, r0, r5
 801810e:	42ae      	cmp	r6, r5
 8018110:	dc36      	bgt.n	8018180 <__gethex+0x320>
 8018112:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018116:	2b02      	cmp	r3, #2
 8018118:	d02a      	beq.n	8018170 <__gethex+0x310>
 801811a:	2b03      	cmp	r3, #3
 801811c:	d02c      	beq.n	8018178 <__gethex+0x318>
 801811e:	2b01      	cmp	r3, #1
 8018120:	d115      	bne.n	801814e <__gethex+0x2ee>
 8018122:	42ae      	cmp	r6, r5
 8018124:	d113      	bne.n	801814e <__gethex+0x2ee>
 8018126:	2e01      	cmp	r6, #1
 8018128:	d10b      	bne.n	8018142 <__gethex+0x2e2>
 801812a:	9a04      	ldr	r2, [sp, #16]
 801812c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018130:	6013      	str	r3, [r2, #0]
 8018132:	2301      	movs	r3, #1
 8018134:	6123      	str	r3, [r4, #16]
 8018136:	f8c9 3000 	str.w	r3, [r9]
 801813a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801813c:	2762      	movs	r7, #98	; 0x62
 801813e:	601c      	str	r4, [r3, #0]
 8018140:	e723      	b.n	8017f8a <__gethex+0x12a>
 8018142:	1e71      	subs	r1, r6, #1
 8018144:	4620      	mov	r0, r4
 8018146:	f000 fe5d 	bl	8018e04 <__any_on>
 801814a:	2800      	cmp	r0, #0
 801814c:	d1ed      	bne.n	801812a <__gethex+0x2ca>
 801814e:	ee18 0a10 	vmov	r0, s16
 8018152:	4621      	mov	r1, r4
 8018154:	f000 f9fc 	bl	8018550 <_Bfree>
 8018158:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801815a:	2300      	movs	r3, #0
 801815c:	6013      	str	r3, [r2, #0]
 801815e:	2750      	movs	r7, #80	; 0x50
 8018160:	e713      	b.n	8017f8a <__gethex+0x12a>
 8018162:	bf00      	nop
 8018164:	0801aff0 	.word	0x0801aff0
 8018168:	0801af74 	.word	0x0801af74
 801816c:	0801af85 	.word	0x0801af85
 8018170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018172:	2b00      	cmp	r3, #0
 8018174:	d1eb      	bne.n	801814e <__gethex+0x2ee>
 8018176:	e7d8      	b.n	801812a <__gethex+0x2ca>
 8018178:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1d5      	bne.n	801812a <__gethex+0x2ca>
 801817e:	e7e6      	b.n	801814e <__gethex+0x2ee>
 8018180:	1e6f      	subs	r7, r5, #1
 8018182:	f1ba 0f00 	cmp.w	sl, #0
 8018186:	d131      	bne.n	80181ec <__gethex+0x38c>
 8018188:	b127      	cbz	r7, 8018194 <__gethex+0x334>
 801818a:	4639      	mov	r1, r7
 801818c:	4620      	mov	r0, r4
 801818e:	f000 fe39 	bl	8018e04 <__any_on>
 8018192:	4682      	mov	sl, r0
 8018194:	117b      	asrs	r3, r7, #5
 8018196:	2101      	movs	r1, #1
 8018198:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801819c:	f007 071f 	and.w	r7, r7, #31
 80181a0:	fa01 f707 	lsl.w	r7, r1, r7
 80181a4:	421f      	tst	r7, r3
 80181a6:	4629      	mov	r1, r5
 80181a8:	4620      	mov	r0, r4
 80181aa:	bf18      	it	ne
 80181ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80181b0:	1b76      	subs	r6, r6, r5
 80181b2:	f7ff fded 	bl	8017d90 <rshift>
 80181b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80181ba:	2702      	movs	r7, #2
 80181bc:	f1ba 0f00 	cmp.w	sl, #0
 80181c0:	d048      	beq.n	8018254 <__gethex+0x3f4>
 80181c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80181c6:	2b02      	cmp	r3, #2
 80181c8:	d015      	beq.n	80181f6 <__gethex+0x396>
 80181ca:	2b03      	cmp	r3, #3
 80181cc:	d017      	beq.n	80181fe <__gethex+0x39e>
 80181ce:	2b01      	cmp	r3, #1
 80181d0:	d109      	bne.n	80181e6 <__gethex+0x386>
 80181d2:	f01a 0f02 	tst.w	sl, #2
 80181d6:	d006      	beq.n	80181e6 <__gethex+0x386>
 80181d8:	f8d9 0000 	ldr.w	r0, [r9]
 80181dc:	ea4a 0a00 	orr.w	sl, sl, r0
 80181e0:	f01a 0f01 	tst.w	sl, #1
 80181e4:	d10e      	bne.n	8018204 <__gethex+0x3a4>
 80181e6:	f047 0710 	orr.w	r7, r7, #16
 80181ea:	e033      	b.n	8018254 <__gethex+0x3f4>
 80181ec:	f04f 0a01 	mov.w	sl, #1
 80181f0:	e7d0      	b.n	8018194 <__gethex+0x334>
 80181f2:	2701      	movs	r7, #1
 80181f4:	e7e2      	b.n	80181bc <__gethex+0x35c>
 80181f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80181f8:	f1c3 0301 	rsb	r3, r3, #1
 80181fc:	9315      	str	r3, [sp, #84]	; 0x54
 80181fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018200:	2b00      	cmp	r3, #0
 8018202:	d0f0      	beq.n	80181e6 <__gethex+0x386>
 8018204:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018208:	f104 0314 	add.w	r3, r4, #20
 801820c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018210:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018214:	f04f 0c00 	mov.w	ip, #0
 8018218:	4618      	mov	r0, r3
 801821a:	f853 2b04 	ldr.w	r2, [r3], #4
 801821e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8018222:	d01c      	beq.n	801825e <__gethex+0x3fe>
 8018224:	3201      	adds	r2, #1
 8018226:	6002      	str	r2, [r0, #0]
 8018228:	2f02      	cmp	r7, #2
 801822a:	f104 0314 	add.w	r3, r4, #20
 801822e:	d13f      	bne.n	80182b0 <__gethex+0x450>
 8018230:	f8d8 2000 	ldr.w	r2, [r8]
 8018234:	3a01      	subs	r2, #1
 8018236:	42b2      	cmp	r2, r6
 8018238:	d10a      	bne.n	8018250 <__gethex+0x3f0>
 801823a:	1171      	asrs	r1, r6, #5
 801823c:	2201      	movs	r2, #1
 801823e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018242:	f006 061f 	and.w	r6, r6, #31
 8018246:	fa02 f606 	lsl.w	r6, r2, r6
 801824a:	421e      	tst	r6, r3
 801824c:	bf18      	it	ne
 801824e:	4617      	movne	r7, r2
 8018250:	f047 0720 	orr.w	r7, r7, #32
 8018254:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018256:	601c      	str	r4, [r3, #0]
 8018258:	9b04      	ldr	r3, [sp, #16]
 801825a:	601d      	str	r5, [r3, #0]
 801825c:	e695      	b.n	8017f8a <__gethex+0x12a>
 801825e:	4299      	cmp	r1, r3
 8018260:	f843 cc04 	str.w	ip, [r3, #-4]
 8018264:	d8d8      	bhi.n	8018218 <__gethex+0x3b8>
 8018266:	68a3      	ldr	r3, [r4, #8]
 8018268:	459b      	cmp	fp, r3
 801826a:	db19      	blt.n	80182a0 <__gethex+0x440>
 801826c:	6861      	ldr	r1, [r4, #4]
 801826e:	ee18 0a10 	vmov	r0, s16
 8018272:	3101      	adds	r1, #1
 8018274:	f000 f92c 	bl	80184d0 <_Balloc>
 8018278:	4681      	mov	r9, r0
 801827a:	b918      	cbnz	r0, 8018284 <__gethex+0x424>
 801827c:	4b1a      	ldr	r3, [pc, #104]	; (80182e8 <__gethex+0x488>)
 801827e:	4602      	mov	r2, r0
 8018280:	2184      	movs	r1, #132	; 0x84
 8018282:	e6a8      	b.n	8017fd6 <__gethex+0x176>
 8018284:	6922      	ldr	r2, [r4, #16]
 8018286:	3202      	adds	r2, #2
 8018288:	f104 010c 	add.w	r1, r4, #12
 801828c:	0092      	lsls	r2, r2, #2
 801828e:	300c      	adds	r0, #12
 8018290:	f7fd f89e 	bl	80153d0 <memcpy>
 8018294:	4621      	mov	r1, r4
 8018296:	ee18 0a10 	vmov	r0, s16
 801829a:	f000 f959 	bl	8018550 <_Bfree>
 801829e:	464c      	mov	r4, r9
 80182a0:	6923      	ldr	r3, [r4, #16]
 80182a2:	1c5a      	adds	r2, r3, #1
 80182a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80182a8:	6122      	str	r2, [r4, #16]
 80182aa:	2201      	movs	r2, #1
 80182ac:	615a      	str	r2, [r3, #20]
 80182ae:	e7bb      	b.n	8018228 <__gethex+0x3c8>
 80182b0:	6922      	ldr	r2, [r4, #16]
 80182b2:	455a      	cmp	r2, fp
 80182b4:	dd0b      	ble.n	80182ce <__gethex+0x46e>
 80182b6:	2101      	movs	r1, #1
 80182b8:	4620      	mov	r0, r4
 80182ba:	f7ff fd69 	bl	8017d90 <rshift>
 80182be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182c2:	3501      	adds	r5, #1
 80182c4:	42ab      	cmp	r3, r5
 80182c6:	f6ff aed0 	blt.w	801806a <__gethex+0x20a>
 80182ca:	2701      	movs	r7, #1
 80182cc:	e7c0      	b.n	8018250 <__gethex+0x3f0>
 80182ce:	f016 061f 	ands.w	r6, r6, #31
 80182d2:	d0fa      	beq.n	80182ca <__gethex+0x46a>
 80182d4:	449a      	add	sl, r3
 80182d6:	f1c6 0620 	rsb	r6, r6, #32
 80182da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80182de:	f000 f9ed 	bl	80186bc <__hi0bits>
 80182e2:	42b0      	cmp	r0, r6
 80182e4:	dbe7      	blt.n	80182b6 <__gethex+0x456>
 80182e6:	e7f0      	b.n	80182ca <__gethex+0x46a>
 80182e8:	0801af74 	.word	0x0801af74

080182ec <L_shift>:
 80182ec:	f1c2 0208 	rsb	r2, r2, #8
 80182f0:	0092      	lsls	r2, r2, #2
 80182f2:	b570      	push	{r4, r5, r6, lr}
 80182f4:	f1c2 0620 	rsb	r6, r2, #32
 80182f8:	6843      	ldr	r3, [r0, #4]
 80182fa:	6804      	ldr	r4, [r0, #0]
 80182fc:	fa03 f506 	lsl.w	r5, r3, r6
 8018300:	432c      	orrs	r4, r5
 8018302:	40d3      	lsrs	r3, r2
 8018304:	6004      	str	r4, [r0, #0]
 8018306:	f840 3f04 	str.w	r3, [r0, #4]!
 801830a:	4288      	cmp	r0, r1
 801830c:	d3f4      	bcc.n	80182f8 <L_shift+0xc>
 801830e:	bd70      	pop	{r4, r5, r6, pc}

08018310 <__match>:
 8018310:	b530      	push	{r4, r5, lr}
 8018312:	6803      	ldr	r3, [r0, #0]
 8018314:	3301      	adds	r3, #1
 8018316:	f811 4b01 	ldrb.w	r4, [r1], #1
 801831a:	b914      	cbnz	r4, 8018322 <__match+0x12>
 801831c:	6003      	str	r3, [r0, #0]
 801831e:	2001      	movs	r0, #1
 8018320:	bd30      	pop	{r4, r5, pc}
 8018322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018326:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801832a:	2d19      	cmp	r5, #25
 801832c:	bf98      	it	ls
 801832e:	3220      	addls	r2, #32
 8018330:	42a2      	cmp	r2, r4
 8018332:	d0f0      	beq.n	8018316 <__match+0x6>
 8018334:	2000      	movs	r0, #0
 8018336:	e7f3      	b.n	8018320 <__match+0x10>

08018338 <__hexnan>:
 8018338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801833c:	680b      	ldr	r3, [r1, #0]
 801833e:	6801      	ldr	r1, [r0, #0]
 8018340:	115e      	asrs	r6, r3, #5
 8018342:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018346:	f013 031f 	ands.w	r3, r3, #31
 801834a:	b087      	sub	sp, #28
 801834c:	bf18      	it	ne
 801834e:	3604      	addne	r6, #4
 8018350:	2500      	movs	r5, #0
 8018352:	1f37      	subs	r7, r6, #4
 8018354:	4682      	mov	sl, r0
 8018356:	4690      	mov	r8, r2
 8018358:	9301      	str	r3, [sp, #4]
 801835a:	f846 5c04 	str.w	r5, [r6, #-4]
 801835e:	46b9      	mov	r9, r7
 8018360:	463c      	mov	r4, r7
 8018362:	9502      	str	r5, [sp, #8]
 8018364:	46ab      	mov	fp, r5
 8018366:	784a      	ldrb	r2, [r1, #1]
 8018368:	1c4b      	adds	r3, r1, #1
 801836a:	9303      	str	r3, [sp, #12]
 801836c:	b342      	cbz	r2, 80183c0 <__hexnan+0x88>
 801836e:	4610      	mov	r0, r2
 8018370:	9105      	str	r1, [sp, #20]
 8018372:	9204      	str	r2, [sp, #16]
 8018374:	f7ff fd5e 	bl	8017e34 <__hexdig_fun>
 8018378:	2800      	cmp	r0, #0
 801837a:	d14f      	bne.n	801841c <__hexnan+0xe4>
 801837c:	9a04      	ldr	r2, [sp, #16]
 801837e:	9905      	ldr	r1, [sp, #20]
 8018380:	2a20      	cmp	r2, #32
 8018382:	d818      	bhi.n	80183b6 <__hexnan+0x7e>
 8018384:	9b02      	ldr	r3, [sp, #8]
 8018386:	459b      	cmp	fp, r3
 8018388:	dd13      	ble.n	80183b2 <__hexnan+0x7a>
 801838a:	454c      	cmp	r4, r9
 801838c:	d206      	bcs.n	801839c <__hexnan+0x64>
 801838e:	2d07      	cmp	r5, #7
 8018390:	dc04      	bgt.n	801839c <__hexnan+0x64>
 8018392:	462a      	mov	r2, r5
 8018394:	4649      	mov	r1, r9
 8018396:	4620      	mov	r0, r4
 8018398:	f7ff ffa8 	bl	80182ec <L_shift>
 801839c:	4544      	cmp	r4, r8
 801839e:	d950      	bls.n	8018442 <__hexnan+0x10a>
 80183a0:	2300      	movs	r3, #0
 80183a2:	f1a4 0904 	sub.w	r9, r4, #4
 80183a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80183aa:	f8cd b008 	str.w	fp, [sp, #8]
 80183ae:	464c      	mov	r4, r9
 80183b0:	461d      	mov	r5, r3
 80183b2:	9903      	ldr	r1, [sp, #12]
 80183b4:	e7d7      	b.n	8018366 <__hexnan+0x2e>
 80183b6:	2a29      	cmp	r2, #41	; 0x29
 80183b8:	d156      	bne.n	8018468 <__hexnan+0x130>
 80183ba:	3102      	adds	r1, #2
 80183bc:	f8ca 1000 	str.w	r1, [sl]
 80183c0:	f1bb 0f00 	cmp.w	fp, #0
 80183c4:	d050      	beq.n	8018468 <__hexnan+0x130>
 80183c6:	454c      	cmp	r4, r9
 80183c8:	d206      	bcs.n	80183d8 <__hexnan+0xa0>
 80183ca:	2d07      	cmp	r5, #7
 80183cc:	dc04      	bgt.n	80183d8 <__hexnan+0xa0>
 80183ce:	462a      	mov	r2, r5
 80183d0:	4649      	mov	r1, r9
 80183d2:	4620      	mov	r0, r4
 80183d4:	f7ff ff8a 	bl	80182ec <L_shift>
 80183d8:	4544      	cmp	r4, r8
 80183da:	d934      	bls.n	8018446 <__hexnan+0x10e>
 80183dc:	f1a8 0204 	sub.w	r2, r8, #4
 80183e0:	4623      	mov	r3, r4
 80183e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80183e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80183ea:	429f      	cmp	r7, r3
 80183ec:	d2f9      	bcs.n	80183e2 <__hexnan+0xaa>
 80183ee:	1b3b      	subs	r3, r7, r4
 80183f0:	f023 0303 	bic.w	r3, r3, #3
 80183f4:	3304      	adds	r3, #4
 80183f6:	3401      	adds	r4, #1
 80183f8:	3e03      	subs	r6, #3
 80183fa:	42b4      	cmp	r4, r6
 80183fc:	bf88      	it	hi
 80183fe:	2304      	movhi	r3, #4
 8018400:	4443      	add	r3, r8
 8018402:	2200      	movs	r2, #0
 8018404:	f843 2b04 	str.w	r2, [r3], #4
 8018408:	429f      	cmp	r7, r3
 801840a:	d2fb      	bcs.n	8018404 <__hexnan+0xcc>
 801840c:	683b      	ldr	r3, [r7, #0]
 801840e:	b91b      	cbnz	r3, 8018418 <__hexnan+0xe0>
 8018410:	4547      	cmp	r7, r8
 8018412:	d127      	bne.n	8018464 <__hexnan+0x12c>
 8018414:	2301      	movs	r3, #1
 8018416:	603b      	str	r3, [r7, #0]
 8018418:	2005      	movs	r0, #5
 801841a:	e026      	b.n	801846a <__hexnan+0x132>
 801841c:	3501      	adds	r5, #1
 801841e:	2d08      	cmp	r5, #8
 8018420:	f10b 0b01 	add.w	fp, fp, #1
 8018424:	dd06      	ble.n	8018434 <__hexnan+0xfc>
 8018426:	4544      	cmp	r4, r8
 8018428:	d9c3      	bls.n	80183b2 <__hexnan+0x7a>
 801842a:	2300      	movs	r3, #0
 801842c:	f844 3c04 	str.w	r3, [r4, #-4]
 8018430:	2501      	movs	r5, #1
 8018432:	3c04      	subs	r4, #4
 8018434:	6822      	ldr	r2, [r4, #0]
 8018436:	f000 000f 	and.w	r0, r0, #15
 801843a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801843e:	6022      	str	r2, [r4, #0]
 8018440:	e7b7      	b.n	80183b2 <__hexnan+0x7a>
 8018442:	2508      	movs	r5, #8
 8018444:	e7b5      	b.n	80183b2 <__hexnan+0x7a>
 8018446:	9b01      	ldr	r3, [sp, #4]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d0df      	beq.n	801840c <__hexnan+0xd4>
 801844c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018450:	f1c3 0320 	rsb	r3, r3, #32
 8018454:	fa22 f303 	lsr.w	r3, r2, r3
 8018458:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801845c:	401a      	ands	r2, r3
 801845e:	f846 2c04 	str.w	r2, [r6, #-4]
 8018462:	e7d3      	b.n	801840c <__hexnan+0xd4>
 8018464:	3f04      	subs	r7, #4
 8018466:	e7d1      	b.n	801840c <__hexnan+0xd4>
 8018468:	2004      	movs	r0, #4
 801846a:	b007      	add	sp, #28
 801846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018470 <_localeconv_r>:
 8018470:	4800      	ldr	r0, [pc, #0]	; (8018474 <_localeconv_r+0x4>)
 8018472:	4770      	bx	lr
 8018474:	200004a4 	.word	0x200004a4

08018478 <_lseek_r>:
 8018478:	b538      	push	{r3, r4, r5, lr}
 801847a:	4d07      	ldr	r5, [pc, #28]	; (8018498 <_lseek_r+0x20>)
 801847c:	4604      	mov	r4, r0
 801847e:	4608      	mov	r0, r1
 8018480:	4611      	mov	r1, r2
 8018482:	2200      	movs	r2, #0
 8018484:	602a      	str	r2, [r5, #0]
 8018486:	461a      	mov	r2, r3
 8018488:	f7f2 f846 	bl	800a518 <_lseek>
 801848c:	1c43      	adds	r3, r0, #1
 801848e:	d102      	bne.n	8018496 <_lseek_r+0x1e>
 8018490:	682b      	ldr	r3, [r5, #0]
 8018492:	b103      	cbz	r3, 8018496 <_lseek_r+0x1e>
 8018494:	6023      	str	r3, [r4, #0]
 8018496:	bd38      	pop	{r3, r4, r5, pc}
 8018498:	20008a7c 	.word	0x20008a7c

0801849c <malloc>:
 801849c:	4b02      	ldr	r3, [pc, #8]	; (80184a8 <malloc+0xc>)
 801849e:	4601      	mov	r1, r0
 80184a0:	6818      	ldr	r0, [r3, #0]
 80184a2:	f000 bd2f 	b.w	8018f04 <_malloc_r>
 80184a6:	bf00      	nop
 80184a8:	2000034c 	.word	0x2000034c

080184ac <__ascii_mbtowc>:
 80184ac:	b082      	sub	sp, #8
 80184ae:	b901      	cbnz	r1, 80184b2 <__ascii_mbtowc+0x6>
 80184b0:	a901      	add	r1, sp, #4
 80184b2:	b142      	cbz	r2, 80184c6 <__ascii_mbtowc+0x1a>
 80184b4:	b14b      	cbz	r3, 80184ca <__ascii_mbtowc+0x1e>
 80184b6:	7813      	ldrb	r3, [r2, #0]
 80184b8:	600b      	str	r3, [r1, #0]
 80184ba:	7812      	ldrb	r2, [r2, #0]
 80184bc:	1e10      	subs	r0, r2, #0
 80184be:	bf18      	it	ne
 80184c0:	2001      	movne	r0, #1
 80184c2:	b002      	add	sp, #8
 80184c4:	4770      	bx	lr
 80184c6:	4610      	mov	r0, r2
 80184c8:	e7fb      	b.n	80184c2 <__ascii_mbtowc+0x16>
 80184ca:	f06f 0001 	mvn.w	r0, #1
 80184ce:	e7f8      	b.n	80184c2 <__ascii_mbtowc+0x16>

080184d0 <_Balloc>:
 80184d0:	b570      	push	{r4, r5, r6, lr}
 80184d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80184d4:	4604      	mov	r4, r0
 80184d6:	460d      	mov	r5, r1
 80184d8:	b976      	cbnz	r6, 80184f8 <_Balloc+0x28>
 80184da:	2010      	movs	r0, #16
 80184dc:	f7ff ffde 	bl	801849c <malloc>
 80184e0:	4602      	mov	r2, r0
 80184e2:	6260      	str	r0, [r4, #36]	; 0x24
 80184e4:	b920      	cbnz	r0, 80184f0 <_Balloc+0x20>
 80184e6:	4b18      	ldr	r3, [pc, #96]	; (8018548 <_Balloc+0x78>)
 80184e8:	4818      	ldr	r0, [pc, #96]	; (801854c <_Balloc+0x7c>)
 80184ea:	2166      	movs	r1, #102	; 0x66
 80184ec:	f000 ff18 	bl	8019320 <__assert_func>
 80184f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80184f4:	6006      	str	r6, [r0, #0]
 80184f6:	60c6      	str	r6, [r0, #12]
 80184f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80184fa:	68f3      	ldr	r3, [r6, #12]
 80184fc:	b183      	cbz	r3, 8018520 <_Balloc+0x50>
 80184fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018500:	68db      	ldr	r3, [r3, #12]
 8018502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018506:	b9b8      	cbnz	r0, 8018538 <_Balloc+0x68>
 8018508:	2101      	movs	r1, #1
 801850a:	fa01 f605 	lsl.w	r6, r1, r5
 801850e:	1d72      	adds	r2, r6, #5
 8018510:	0092      	lsls	r2, r2, #2
 8018512:	4620      	mov	r0, r4
 8018514:	f000 fc97 	bl	8018e46 <_calloc_r>
 8018518:	b160      	cbz	r0, 8018534 <_Balloc+0x64>
 801851a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801851e:	e00e      	b.n	801853e <_Balloc+0x6e>
 8018520:	2221      	movs	r2, #33	; 0x21
 8018522:	2104      	movs	r1, #4
 8018524:	4620      	mov	r0, r4
 8018526:	f000 fc8e 	bl	8018e46 <_calloc_r>
 801852a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801852c:	60f0      	str	r0, [r6, #12]
 801852e:	68db      	ldr	r3, [r3, #12]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d1e4      	bne.n	80184fe <_Balloc+0x2e>
 8018534:	2000      	movs	r0, #0
 8018536:	bd70      	pop	{r4, r5, r6, pc}
 8018538:	6802      	ldr	r2, [r0, #0]
 801853a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801853e:	2300      	movs	r3, #0
 8018540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018544:	e7f7      	b.n	8018536 <_Balloc+0x66>
 8018546:	bf00      	nop
 8018548:	0801aefe 	.word	0x0801aefe
 801854c:	0801b004 	.word	0x0801b004

08018550 <_Bfree>:
 8018550:	b570      	push	{r4, r5, r6, lr}
 8018552:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018554:	4605      	mov	r5, r0
 8018556:	460c      	mov	r4, r1
 8018558:	b976      	cbnz	r6, 8018578 <_Bfree+0x28>
 801855a:	2010      	movs	r0, #16
 801855c:	f7ff ff9e 	bl	801849c <malloc>
 8018560:	4602      	mov	r2, r0
 8018562:	6268      	str	r0, [r5, #36]	; 0x24
 8018564:	b920      	cbnz	r0, 8018570 <_Bfree+0x20>
 8018566:	4b09      	ldr	r3, [pc, #36]	; (801858c <_Bfree+0x3c>)
 8018568:	4809      	ldr	r0, [pc, #36]	; (8018590 <_Bfree+0x40>)
 801856a:	218a      	movs	r1, #138	; 0x8a
 801856c:	f000 fed8 	bl	8019320 <__assert_func>
 8018570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018574:	6006      	str	r6, [r0, #0]
 8018576:	60c6      	str	r6, [r0, #12]
 8018578:	b13c      	cbz	r4, 801858a <_Bfree+0x3a>
 801857a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801857c:	6862      	ldr	r2, [r4, #4]
 801857e:	68db      	ldr	r3, [r3, #12]
 8018580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018584:	6021      	str	r1, [r4, #0]
 8018586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801858a:	bd70      	pop	{r4, r5, r6, pc}
 801858c:	0801aefe 	.word	0x0801aefe
 8018590:	0801b004 	.word	0x0801b004

08018594 <__multadd>:
 8018594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018598:	690e      	ldr	r6, [r1, #16]
 801859a:	4607      	mov	r7, r0
 801859c:	4698      	mov	r8, r3
 801859e:	460c      	mov	r4, r1
 80185a0:	f101 0014 	add.w	r0, r1, #20
 80185a4:	2300      	movs	r3, #0
 80185a6:	6805      	ldr	r5, [r0, #0]
 80185a8:	b2a9      	uxth	r1, r5
 80185aa:	fb02 8101 	mla	r1, r2, r1, r8
 80185ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80185b2:	0c2d      	lsrs	r5, r5, #16
 80185b4:	fb02 c505 	mla	r5, r2, r5, ip
 80185b8:	b289      	uxth	r1, r1
 80185ba:	3301      	adds	r3, #1
 80185bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80185c0:	429e      	cmp	r6, r3
 80185c2:	f840 1b04 	str.w	r1, [r0], #4
 80185c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80185ca:	dcec      	bgt.n	80185a6 <__multadd+0x12>
 80185cc:	f1b8 0f00 	cmp.w	r8, #0
 80185d0:	d022      	beq.n	8018618 <__multadd+0x84>
 80185d2:	68a3      	ldr	r3, [r4, #8]
 80185d4:	42b3      	cmp	r3, r6
 80185d6:	dc19      	bgt.n	801860c <__multadd+0x78>
 80185d8:	6861      	ldr	r1, [r4, #4]
 80185da:	4638      	mov	r0, r7
 80185dc:	3101      	adds	r1, #1
 80185de:	f7ff ff77 	bl	80184d0 <_Balloc>
 80185e2:	4605      	mov	r5, r0
 80185e4:	b928      	cbnz	r0, 80185f2 <__multadd+0x5e>
 80185e6:	4602      	mov	r2, r0
 80185e8:	4b0d      	ldr	r3, [pc, #52]	; (8018620 <__multadd+0x8c>)
 80185ea:	480e      	ldr	r0, [pc, #56]	; (8018624 <__multadd+0x90>)
 80185ec:	21b5      	movs	r1, #181	; 0xb5
 80185ee:	f000 fe97 	bl	8019320 <__assert_func>
 80185f2:	6922      	ldr	r2, [r4, #16]
 80185f4:	3202      	adds	r2, #2
 80185f6:	f104 010c 	add.w	r1, r4, #12
 80185fa:	0092      	lsls	r2, r2, #2
 80185fc:	300c      	adds	r0, #12
 80185fe:	f7fc fee7 	bl	80153d0 <memcpy>
 8018602:	4621      	mov	r1, r4
 8018604:	4638      	mov	r0, r7
 8018606:	f7ff ffa3 	bl	8018550 <_Bfree>
 801860a:	462c      	mov	r4, r5
 801860c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018610:	3601      	adds	r6, #1
 8018612:	f8c3 8014 	str.w	r8, [r3, #20]
 8018616:	6126      	str	r6, [r4, #16]
 8018618:	4620      	mov	r0, r4
 801861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801861e:	bf00      	nop
 8018620:	0801af74 	.word	0x0801af74
 8018624:	0801b004 	.word	0x0801b004

08018628 <__s2b>:
 8018628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801862c:	460c      	mov	r4, r1
 801862e:	4615      	mov	r5, r2
 8018630:	461f      	mov	r7, r3
 8018632:	2209      	movs	r2, #9
 8018634:	3308      	adds	r3, #8
 8018636:	4606      	mov	r6, r0
 8018638:	fb93 f3f2 	sdiv	r3, r3, r2
 801863c:	2100      	movs	r1, #0
 801863e:	2201      	movs	r2, #1
 8018640:	429a      	cmp	r2, r3
 8018642:	db09      	blt.n	8018658 <__s2b+0x30>
 8018644:	4630      	mov	r0, r6
 8018646:	f7ff ff43 	bl	80184d0 <_Balloc>
 801864a:	b940      	cbnz	r0, 801865e <__s2b+0x36>
 801864c:	4602      	mov	r2, r0
 801864e:	4b19      	ldr	r3, [pc, #100]	; (80186b4 <__s2b+0x8c>)
 8018650:	4819      	ldr	r0, [pc, #100]	; (80186b8 <__s2b+0x90>)
 8018652:	21ce      	movs	r1, #206	; 0xce
 8018654:	f000 fe64 	bl	8019320 <__assert_func>
 8018658:	0052      	lsls	r2, r2, #1
 801865a:	3101      	adds	r1, #1
 801865c:	e7f0      	b.n	8018640 <__s2b+0x18>
 801865e:	9b08      	ldr	r3, [sp, #32]
 8018660:	6143      	str	r3, [r0, #20]
 8018662:	2d09      	cmp	r5, #9
 8018664:	f04f 0301 	mov.w	r3, #1
 8018668:	6103      	str	r3, [r0, #16]
 801866a:	dd16      	ble.n	801869a <__s2b+0x72>
 801866c:	f104 0909 	add.w	r9, r4, #9
 8018670:	46c8      	mov	r8, r9
 8018672:	442c      	add	r4, r5
 8018674:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018678:	4601      	mov	r1, r0
 801867a:	3b30      	subs	r3, #48	; 0x30
 801867c:	220a      	movs	r2, #10
 801867e:	4630      	mov	r0, r6
 8018680:	f7ff ff88 	bl	8018594 <__multadd>
 8018684:	45a0      	cmp	r8, r4
 8018686:	d1f5      	bne.n	8018674 <__s2b+0x4c>
 8018688:	f1a5 0408 	sub.w	r4, r5, #8
 801868c:	444c      	add	r4, r9
 801868e:	1b2d      	subs	r5, r5, r4
 8018690:	1963      	adds	r3, r4, r5
 8018692:	42bb      	cmp	r3, r7
 8018694:	db04      	blt.n	80186a0 <__s2b+0x78>
 8018696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801869a:	340a      	adds	r4, #10
 801869c:	2509      	movs	r5, #9
 801869e:	e7f6      	b.n	801868e <__s2b+0x66>
 80186a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80186a4:	4601      	mov	r1, r0
 80186a6:	3b30      	subs	r3, #48	; 0x30
 80186a8:	220a      	movs	r2, #10
 80186aa:	4630      	mov	r0, r6
 80186ac:	f7ff ff72 	bl	8018594 <__multadd>
 80186b0:	e7ee      	b.n	8018690 <__s2b+0x68>
 80186b2:	bf00      	nop
 80186b4:	0801af74 	.word	0x0801af74
 80186b8:	0801b004 	.word	0x0801b004

080186bc <__hi0bits>:
 80186bc:	0c03      	lsrs	r3, r0, #16
 80186be:	041b      	lsls	r3, r3, #16
 80186c0:	b9d3      	cbnz	r3, 80186f8 <__hi0bits+0x3c>
 80186c2:	0400      	lsls	r0, r0, #16
 80186c4:	2310      	movs	r3, #16
 80186c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80186ca:	bf04      	itt	eq
 80186cc:	0200      	lsleq	r0, r0, #8
 80186ce:	3308      	addeq	r3, #8
 80186d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80186d4:	bf04      	itt	eq
 80186d6:	0100      	lsleq	r0, r0, #4
 80186d8:	3304      	addeq	r3, #4
 80186da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80186de:	bf04      	itt	eq
 80186e0:	0080      	lsleq	r0, r0, #2
 80186e2:	3302      	addeq	r3, #2
 80186e4:	2800      	cmp	r0, #0
 80186e6:	db05      	blt.n	80186f4 <__hi0bits+0x38>
 80186e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80186ec:	f103 0301 	add.w	r3, r3, #1
 80186f0:	bf08      	it	eq
 80186f2:	2320      	moveq	r3, #32
 80186f4:	4618      	mov	r0, r3
 80186f6:	4770      	bx	lr
 80186f8:	2300      	movs	r3, #0
 80186fa:	e7e4      	b.n	80186c6 <__hi0bits+0xa>

080186fc <__lo0bits>:
 80186fc:	6803      	ldr	r3, [r0, #0]
 80186fe:	f013 0207 	ands.w	r2, r3, #7
 8018702:	4601      	mov	r1, r0
 8018704:	d00b      	beq.n	801871e <__lo0bits+0x22>
 8018706:	07da      	lsls	r2, r3, #31
 8018708:	d424      	bmi.n	8018754 <__lo0bits+0x58>
 801870a:	0798      	lsls	r0, r3, #30
 801870c:	bf49      	itett	mi
 801870e:	085b      	lsrmi	r3, r3, #1
 8018710:	089b      	lsrpl	r3, r3, #2
 8018712:	2001      	movmi	r0, #1
 8018714:	600b      	strmi	r3, [r1, #0]
 8018716:	bf5c      	itt	pl
 8018718:	600b      	strpl	r3, [r1, #0]
 801871a:	2002      	movpl	r0, #2
 801871c:	4770      	bx	lr
 801871e:	b298      	uxth	r0, r3
 8018720:	b9b0      	cbnz	r0, 8018750 <__lo0bits+0x54>
 8018722:	0c1b      	lsrs	r3, r3, #16
 8018724:	2010      	movs	r0, #16
 8018726:	f013 0fff 	tst.w	r3, #255	; 0xff
 801872a:	bf04      	itt	eq
 801872c:	0a1b      	lsreq	r3, r3, #8
 801872e:	3008      	addeq	r0, #8
 8018730:	071a      	lsls	r2, r3, #28
 8018732:	bf04      	itt	eq
 8018734:	091b      	lsreq	r3, r3, #4
 8018736:	3004      	addeq	r0, #4
 8018738:	079a      	lsls	r2, r3, #30
 801873a:	bf04      	itt	eq
 801873c:	089b      	lsreq	r3, r3, #2
 801873e:	3002      	addeq	r0, #2
 8018740:	07da      	lsls	r2, r3, #31
 8018742:	d403      	bmi.n	801874c <__lo0bits+0x50>
 8018744:	085b      	lsrs	r3, r3, #1
 8018746:	f100 0001 	add.w	r0, r0, #1
 801874a:	d005      	beq.n	8018758 <__lo0bits+0x5c>
 801874c:	600b      	str	r3, [r1, #0]
 801874e:	4770      	bx	lr
 8018750:	4610      	mov	r0, r2
 8018752:	e7e8      	b.n	8018726 <__lo0bits+0x2a>
 8018754:	2000      	movs	r0, #0
 8018756:	4770      	bx	lr
 8018758:	2020      	movs	r0, #32
 801875a:	4770      	bx	lr

0801875c <__i2b>:
 801875c:	b510      	push	{r4, lr}
 801875e:	460c      	mov	r4, r1
 8018760:	2101      	movs	r1, #1
 8018762:	f7ff feb5 	bl	80184d0 <_Balloc>
 8018766:	4602      	mov	r2, r0
 8018768:	b928      	cbnz	r0, 8018776 <__i2b+0x1a>
 801876a:	4b05      	ldr	r3, [pc, #20]	; (8018780 <__i2b+0x24>)
 801876c:	4805      	ldr	r0, [pc, #20]	; (8018784 <__i2b+0x28>)
 801876e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018772:	f000 fdd5 	bl	8019320 <__assert_func>
 8018776:	2301      	movs	r3, #1
 8018778:	6144      	str	r4, [r0, #20]
 801877a:	6103      	str	r3, [r0, #16]
 801877c:	bd10      	pop	{r4, pc}
 801877e:	bf00      	nop
 8018780:	0801af74 	.word	0x0801af74
 8018784:	0801b004 	.word	0x0801b004

08018788 <__multiply>:
 8018788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801878c:	4614      	mov	r4, r2
 801878e:	690a      	ldr	r2, [r1, #16]
 8018790:	6923      	ldr	r3, [r4, #16]
 8018792:	429a      	cmp	r2, r3
 8018794:	bfb8      	it	lt
 8018796:	460b      	movlt	r3, r1
 8018798:	460d      	mov	r5, r1
 801879a:	bfbc      	itt	lt
 801879c:	4625      	movlt	r5, r4
 801879e:	461c      	movlt	r4, r3
 80187a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80187a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80187a8:	68ab      	ldr	r3, [r5, #8]
 80187aa:	6869      	ldr	r1, [r5, #4]
 80187ac:	eb0a 0709 	add.w	r7, sl, r9
 80187b0:	42bb      	cmp	r3, r7
 80187b2:	b085      	sub	sp, #20
 80187b4:	bfb8      	it	lt
 80187b6:	3101      	addlt	r1, #1
 80187b8:	f7ff fe8a 	bl	80184d0 <_Balloc>
 80187bc:	b930      	cbnz	r0, 80187cc <__multiply+0x44>
 80187be:	4602      	mov	r2, r0
 80187c0:	4b42      	ldr	r3, [pc, #264]	; (80188cc <__multiply+0x144>)
 80187c2:	4843      	ldr	r0, [pc, #268]	; (80188d0 <__multiply+0x148>)
 80187c4:	f240 115d 	movw	r1, #349	; 0x15d
 80187c8:	f000 fdaa 	bl	8019320 <__assert_func>
 80187cc:	f100 0614 	add.w	r6, r0, #20
 80187d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80187d4:	4633      	mov	r3, r6
 80187d6:	2200      	movs	r2, #0
 80187d8:	4543      	cmp	r3, r8
 80187da:	d31e      	bcc.n	801881a <__multiply+0x92>
 80187dc:	f105 0c14 	add.w	ip, r5, #20
 80187e0:	f104 0314 	add.w	r3, r4, #20
 80187e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80187e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80187ec:	9202      	str	r2, [sp, #8]
 80187ee:	ebac 0205 	sub.w	r2, ip, r5
 80187f2:	3a15      	subs	r2, #21
 80187f4:	f022 0203 	bic.w	r2, r2, #3
 80187f8:	3204      	adds	r2, #4
 80187fa:	f105 0115 	add.w	r1, r5, #21
 80187fe:	458c      	cmp	ip, r1
 8018800:	bf38      	it	cc
 8018802:	2204      	movcc	r2, #4
 8018804:	9201      	str	r2, [sp, #4]
 8018806:	9a02      	ldr	r2, [sp, #8]
 8018808:	9303      	str	r3, [sp, #12]
 801880a:	429a      	cmp	r2, r3
 801880c:	d808      	bhi.n	8018820 <__multiply+0x98>
 801880e:	2f00      	cmp	r7, #0
 8018810:	dc55      	bgt.n	80188be <__multiply+0x136>
 8018812:	6107      	str	r7, [r0, #16]
 8018814:	b005      	add	sp, #20
 8018816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801881a:	f843 2b04 	str.w	r2, [r3], #4
 801881e:	e7db      	b.n	80187d8 <__multiply+0x50>
 8018820:	f8b3 a000 	ldrh.w	sl, [r3]
 8018824:	f1ba 0f00 	cmp.w	sl, #0
 8018828:	d020      	beq.n	801886c <__multiply+0xe4>
 801882a:	f105 0e14 	add.w	lr, r5, #20
 801882e:	46b1      	mov	r9, r6
 8018830:	2200      	movs	r2, #0
 8018832:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018836:	f8d9 b000 	ldr.w	fp, [r9]
 801883a:	b2a1      	uxth	r1, r4
 801883c:	fa1f fb8b 	uxth.w	fp, fp
 8018840:	fb0a b101 	mla	r1, sl, r1, fp
 8018844:	4411      	add	r1, r2
 8018846:	f8d9 2000 	ldr.w	r2, [r9]
 801884a:	0c24      	lsrs	r4, r4, #16
 801884c:	0c12      	lsrs	r2, r2, #16
 801884e:	fb0a 2404 	mla	r4, sl, r4, r2
 8018852:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018856:	b289      	uxth	r1, r1
 8018858:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801885c:	45f4      	cmp	ip, lr
 801885e:	f849 1b04 	str.w	r1, [r9], #4
 8018862:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018866:	d8e4      	bhi.n	8018832 <__multiply+0xaa>
 8018868:	9901      	ldr	r1, [sp, #4]
 801886a:	5072      	str	r2, [r6, r1]
 801886c:	9a03      	ldr	r2, [sp, #12]
 801886e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018872:	3304      	adds	r3, #4
 8018874:	f1b9 0f00 	cmp.w	r9, #0
 8018878:	d01f      	beq.n	80188ba <__multiply+0x132>
 801887a:	6834      	ldr	r4, [r6, #0]
 801887c:	f105 0114 	add.w	r1, r5, #20
 8018880:	46b6      	mov	lr, r6
 8018882:	f04f 0a00 	mov.w	sl, #0
 8018886:	880a      	ldrh	r2, [r1, #0]
 8018888:	f8be b002 	ldrh.w	fp, [lr, #2]
 801888c:	fb09 b202 	mla	r2, r9, r2, fp
 8018890:	4492      	add	sl, r2
 8018892:	b2a4      	uxth	r4, r4
 8018894:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018898:	f84e 4b04 	str.w	r4, [lr], #4
 801889c:	f851 4b04 	ldr.w	r4, [r1], #4
 80188a0:	f8be 2000 	ldrh.w	r2, [lr]
 80188a4:	0c24      	lsrs	r4, r4, #16
 80188a6:	fb09 2404 	mla	r4, r9, r4, r2
 80188aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80188ae:	458c      	cmp	ip, r1
 80188b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80188b4:	d8e7      	bhi.n	8018886 <__multiply+0xfe>
 80188b6:	9a01      	ldr	r2, [sp, #4]
 80188b8:	50b4      	str	r4, [r6, r2]
 80188ba:	3604      	adds	r6, #4
 80188bc:	e7a3      	b.n	8018806 <__multiply+0x7e>
 80188be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d1a5      	bne.n	8018812 <__multiply+0x8a>
 80188c6:	3f01      	subs	r7, #1
 80188c8:	e7a1      	b.n	801880e <__multiply+0x86>
 80188ca:	bf00      	nop
 80188cc:	0801af74 	.word	0x0801af74
 80188d0:	0801b004 	.word	0x0801b004

080188d4 <__pow5mult>:
 80188d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188d8:	4615      	mov	r5, r2
 80188da:	f012 0203 	ands.w	r2, r2, #3
 80188de:	4606      	mov	r6, r0
 80188e0:	460f      	mov	r7, r1
 80188e2:	d007      	beq.n	80188f4 <__pow5mult+0x20>
 80188e4:	4c25      	ldr	r4, [pc, #148]	; (801897c <__pow5mult+0xa8>)
 80188e6:	3a01      	subs	r2, #1
 80188e8:	2300      	movs	r3, #0
 80188ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80188ee:	f7ff fe51 	bl	8018594 <__multadd>
 80188f2:	4607      	mov	r7, r0
 80188f4:	10ad      	asrs	r5, r5, #2
 80188f6:	d03d      	beq.n	8018974 <__pow5mult+0xa0>
 80188f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80188fa:	b97c      	cbnz	r4, 801891c <__pow5mult+0x48>
 80188fc:	2010      	movs	r0, #16
 80188fe:	f7ff fdcd 	bl	801849c <malloc>
 8018902:	4602      	mov	r2, r0
 8018904:	6270      	str	r0, [r6, #36]	; 0x24
 8018906:	b928      	cbnz	r0, 8018914 <__pow5mult+0x40>
 8018908:	4b1d      	ldr	r3, [pc, #116]	; (8018980 <__pow5mult+0xac>)
 801890a:	481e      	ldr	r0, [pc, #120]	; (8018984 <__pow5mult+0xb0>)
 801890c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018910:	f000 fd06 	bl	8019320 <__assert_func>
 8018914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018918:	6004      	str	r4, [r0, #0]
 801891a:	60c4      	str	r4, [r0, #12]
 801891c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018924:	b94c      	cbnz	r4, 801893a <__pow5mult+0x66>
 8018926:	f240 2171 	movw	r1, #625	; 0x271
 801892a:	4630      	mov	r0, r6
 801892c:	f7ff ff16 	bl	801875c <__i2b>
 8018930:	2300      	movs	r3, #0
 8018932:	f8c8 0008 	str.w	r0, [r8, #8]
 8018936:	4604      	mov	r4, r0
 8018938:	6003      	str	r3, [r0, #0]
 801893a:	f04f 0900 	mov.w	r9, #0
 801893e:	07eb      	lsls	r3, r5, #31
 8018940:	d50a      	bpl.n	8018958 <__pow5mult+0x84>
 8018942:	4639      	mov	r1, r7
 8018944:	4622      	mov	r2, r4
 8018946:	4630      	mov	r0, r6
 8018948:	f7ff ff1e 	bl	8018788 <__multiply>
 801894c:	4639      	mov	r1, r7
 801894e:	4680      	mov	r8, r0
 8018950:	4630      	mov	r0, r6
 8018952:	f7ff fdfd 	bl	8018550 <_Bfree>
 8018956:	4647      	mov	r7, r8
 8018958:	106d      	asrs	r5, r5, #1
 801895a:	d00b      	beq.n	8018974 <__pow5mult+0xa0>
 801895c:	6820      	ldr	r0, [r4, #0]
 801895e:	b938      	cbnz	r0, 8018970 <__pow5mult+0x9c>
 8018960:	4622      	mov	r2, r4
 8018962:	4621      	mov	r1, r4
 8018964:	4630      	mov	r0, r6
 8018966:	f7ff ff0f 	bl	8018788 <__multiply>
 801896a:	6020      	str	r0, [r4, #0]
 801896c:	f8c0 9000 	str.w	r9, [r0]
 8018970:	4604      	mov	r4, r0
 8018972:	e7e4      	b.n	801893e <__pow5mult+0x6a>
 8018974:	4638      	mov	r0, r7
 8018976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801897a:	bf00      	nop
 801897c:	0801b158 	.word	0x0801b158
 8018980:	0801aefe 	.word	0x0801aefe
 8018984:	0801b004 	.word	0x0801b004

08018988 <__lshift>:
 8018988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801898c:	460c      	mov	r4, r1
 801898e:	6849      	ldr	r1, [r1, #4]
 8018990:	6923      	ldr	r3, [r4, #16]
 8018992:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018996:	68a3      	ldr	r3, [r4, #8]
 8018998:	4607      	mov	r7, r0
 801899a:	4691      	mov	r9, r2
 801899c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80189a0:	f108 0601 	add.w	r6, r8, #1
 80189a4:	42b3      	cmp	r3, r6
 80189a6:	db0b      	blt.n	80189c0 <__lshift+0x38>
 80189a8:	4638      	mov	r0, r7
 80189aa:	f7ff fd91 	bl	80184d0 <_Balloc>
 80189ae:	4605      	mov	r5, r0
 80189b0:	b948      	cbnz	r0, 80189c6 <__lshift+0x3e>
 80189b2:	4602      	mov	r2, r0
 80189b4:	4b28      	ldr	r3, [pc, #160]	; (8018a58 <__lshift+0xd0>)
 80189b6:	4829      	ldr	r0, [pc, #164]	; (8018a5c <__lshift+0xd4>)
 80189b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80189bc:	f000 fcb0 	bl	8019320 <__assert_func>
 80189c0:	3101      	adds	r1, #1
 80189c2:	005b      	lsls	r3, r3, #1
 80189c4:	e7ee      	b.n	80189a4 <__lshift+0x1c>
 80189c6:	2300      	movs	r3, #0
 80189c8:	f100 0114 	add.w	r1, r0, #20
 80189cc:	f100 0210 	add.w	r2, r0, #16
 80189d0:	4618      	mov	r0, r3
 80189d2:	4553      	cmp	r3, sl
 80189d4:	db33      	blt.n	8018a3e <__lshift+0xb6>
 80189d6:	6920      	ldr	r0, [r4, #16]
 80189d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80189dc:	f104 0314 	add.w	r3, r4, #20
 80189e0:	f019 091f 	ands.w	r9, r9, #31
 80189e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80189e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80189ec:	d02b      	beq.n	8018a46 <__lshift+0xbe>
 80189ee:	f1c9 0e20 	rsb	lr, r9, #32
 80189f2:	468a      	mov	sl, r1
 80189f4:	2200      	movs	r2, #0
 80189f6:	6818      	ldr	r0, [r3, #0]
 80189f8:	fa00 f009 	lsl.w	r0, r0, r9
 80189fc:	4302      	orrs	r2, r0
 80189fe:	f84a 2b04 	str.w	r2, [sl], #4
 8018a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a06:	459c      	cmp	ip, r3
 8018a08:	fa22 f20e 	lsr.w	r2, r2, lr
 8018a0c:	d8f3      	bhi.n	80189f6 <__lshift+0x6e>
 8018a0e:	ebac 0304 	sub.w	r3, ip, r4
 8018a12:	3b15      	subs	r3, #21
 8018a14:	f023 0303 	bic.w	r3, r3, #3
 8018a18:	3304      	adds	r3, #4
 8018a1a:	f104 0015 	add.w	r0, r4, #21
 8018a1e:	4584      	cmp	ip, r0
 8018a20:	bf38      	it	cc
 8018a22:	2304      	movcc	r3, #4
 8018a24:	50ca      	str	r2, [r1, r3]
 8018a26:	b10a      	cbz	r2, 8018a2c <__lshift+0xa4>
 8018a28:	f108 0602 	add.w	r6, r8, #2
 8018a2c:	3e01      	subs	r6, #1
 8018a2e:	4638      	mov	r0, r7
 8018a30:	612e      	str	r6, [r5, #16]
 8018a32:	4621      	mov	r1, r4
 8018a34:	f7ff fd8c 	bl	8018550 <_Bfree>
 8018a38:	4628      	mov	r0, r5
 8018a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018a42:	3301      	adds	r3, #1
 8018a44:	e7c5      	b.n	80189d2 <__lshift+0x4a>
 8018a46:	3904      	subs	r1, #4
 8018a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018a50:	459c      	cmp	ip, r3
 8018a52:	d8f9      	bhi.n	8018a48 <__lshift+0xc0>
 8018a54:	e7ea      	b.n	8018a2c <__lshift+0xa4>
 8018a56:	bf00      	nop
 8018a58:	0801af74 	.word	0x0801af74
 8018a5c:	0801b004 	.word	0x0801b004

08018a60 <__mcmp>:
 8018a60:	b530      	push	{r4, r5, lr}
 8018a62:	6902      	ldr	r2, [r0, #16]
 8018a64:	690c      	ldr	r4, [r1, #16]
 8018a66:	1b12      	subs	r2, r2, r4
 8018a68:	d10e      	bne.n	8018a88 <__mcmp+0x28>
 8018a6a:	f100 0314 	add.w	r3, r0, #20
 8018a6e:	3114      	adds	r1, #20
 8018a70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018a74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018a78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018a7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018a80:	42a5      	cmp	r5, r4
 8018a82:	d003      	beq.n	8018a8c <__mcmp+0x2c>
 8018a84:	d305      	bcc.n	8018a92 <__mcmp+0x32>
 8018a86:	2201      	movs	r2, #1
 8018a88:	4610      	mov	r0, r2
 8018a8a:	bd30      	pop	{r4, r5, pc}
 8018a8c:	4283      	cmp	r3, r0
 8018a8e:	d3f3      	bcc.n	8018a78 <__mcmp+0x18>
 8018a90:	e7fa      	b.n	8018a88 <__mcmp+0x28>
 8018a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a96:	e7f7      	b.n	8018a88 <__mcmp+0x28>

08018a98 <__mdiff>:
 8018a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a9c:	460c      	mov	r4, r1
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	4611      	mov	r1, r2
 8018aa2:	4620      	mov	r0, r4
 8018aa4:	4617      	mov	r7, r2
 8018aa6:	f7ff ffdb 	bl	8018a60 <__mcmp>
 8018aaa:	1e05      	subs	r5, r0, #0
 8018aac:	d110      	bne.n	8018ad0 <__mdiff+0x38>
 8018aae:	4629      	mov	r1, r5
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f7ff fd0d 	bl	80184d0 <_Balloc>
 8018ab6:	b930      	cbnz	r0, 8018ac6 <__mdiff+0x2e>
 8018ab8:	4b39      	ldr	r3, [pc, #228]	; (8018ba0 <__mdiff+0x108>)
 8018aba:	4602      	mov	r2, r0
 8018abc:	f240 2132 	movw	r1, #562	; 0x232
 8018ac0:	4838      	ldr	r0, [pc, #224]	; (8018ba4 <__mdiff+0x10c>)
 8018ac2:	f000 fc2d 	bl	8019320 <__assert_func>
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ad0:	bfa4      	itt	ge
 8018ad2:	463b      	movge	r3, r7
 8018ad4:	4627      	movge	r7, r4
 8018ad6:	4630      	mov	r0, r6
 8018ad8:	6879      	ldr	r1, [r7, #4]
 8018ada:	bfa6      	itte	ge
 8018adc:	461c      	movge	r4, r3
 8018ade:	2500      	movge	r5, #0
 8018ae0:	2501      	movlt	r5, #1
 8018ae2:	f7ff fcf5 	bl	80184d0 <_Balloc>
 8018ae6:	b920      	cbnz	r0, 8018af2 <__mdiff+0x5a>
 8018ae8:	4b2d      	ldr	r3, [pc, #180]	; (8018ba0 <__mdiff+0x108>)
 8018aea:	4602      	mov	r2, r0
 8018aec:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018af0:	e7e6      	b.n	8018ac0 <__mdiff+0x28>
 8018af2:	693e      	ldr	r6, [r7, #16]
 8018af4:	60c5      	str	r5, [r0, #12]
 8018af6:	6925      	ldr	r5, [r4, #16]
 8018af8:	f107 0114 	add.w	r1, r7, #20
 8018afc:	f104 0914 	add.w	r9, r4, #20
 8018b00:	f100 0e14 	add.w	lr, r0, #20
 8018b04:	f107 0210 	add.w	r2, r7, #16
 8018b08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018b0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018b10:	46f2      	mov	sl, lr
 8018b12:	2700      	movs	r7, #0
 8018b14:	f859 3b04 	ldr.w	r3, [r9], #4
 8018b18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018b1c:	fa1f f883 	uxth.w	r8, r3
 8018b20:	fa17 f78b 	uxtah	r7, r7, fp
 8018b24:	0c1b      	lsrs	r3, r3, #16
 8018b26:	eba7 0808 	sub.w	r8, r7, r8
 8018b2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018b2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018b32:	fa1f f888 	uxth.w	r8, r8
 8018b36:	141f      	asrs	r7, r3, #16
 8018b38:	454d      	cmp	r5, r9
 8018b3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018b3e:	f84a 3b04 	str.w	r3, [sl], #4
 8018b42:	d8e7      	bhi.n	8018b14 <__mdiff+0x7c>
 8018b44:	1b2b      	subs	r3, r5, r4
 8018b46:	3b15      	subs	r3, #21
 8018b48:	f023 0303 	bic.w	r3, r3, #3
 8018b4c:	3304      	adds	r3, #4
 8018b4e:	3415      	adds	r4, #21
 8018b50:	42a5      	cmp	r5, r4
 8018b52:	bf38      	it	cc
 8018b54:	2304      	movcc	r3, #4
 8018b56:	4419      	add	r1, r3
 8018b58:	4473      	add	r3, lr
 8018b5a:	469e      	mov	lr, r3
 8018b5c:	460d      	mov	r5, r1
 8018b5e:	4565      	cmp	r5, ip
 8018b60:	d30e      	bcc.n	8018b80 <__mdiff+0xe8>
 8018b62:	f10c 0203 	add.w	r2, ip, #3
 8018b66:	1a52      	subs	r2, r2, r1
 8018b68:	f022 0203 	bic.w	r2, r2, #3
 8018b6c:	3903      	subs	r1, #3
 8018b6e:	458c      	cmp	ip, r1
 8018b70:	bf38      	it	cc
 8018b72:	2200      	movcc	r2, #0
 8018b74:	441a      	add	r2, r3
 8018b76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018b7a:	b17b      	cbz	r3, 8018b9c <__mdiff+0x104>
 8018b7c:	6106      	str	r6, [r0, #16]
 8018b7e:	e7a5      	b.n	8018acc <__mdiff+0x34>
 8018b80:	f855 8b04 	ldr.w	r8, [r5], #4
 8018b84:	fa17 f488 	uxtah	r4, r7, r8
 8018b88:	1422      	asrs	r2, r4, #16
 8018b8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018b8e:	b2a4      	uxth	r4, r4
 8018b90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018b94:	f84e 4b04 	str.w	r4, [lr], #4
 8018b98:	1417      	asrs	r7, r2, #16
 8018b9a:	e7e0      	b.n	8018b5e <__mdiff+0xc6>
 8018b9c:	3e01      	subs	r6, #1
 8018b9e:	e7ea      	b.n	8018b76 <__mdiff+0xde>
 8018ba0:	0801af74 	.word	0x0801af74
 8018ba4:	0801b004 	.word	0x0801b004

08018ba8 <__ulp>:
 8018ba8:	b082      	sub	sp, #8
 8018baa:	ed8d 0b00 	vstr	d0, [sp]
 8018bae:	9b01      	ldr	r3, [sp, #4]
 8018bb0:	4912      	ldr	r1, [pc, #72]	; (8018bfc <__ulp+0x54>)
 8018bb2:	4019      	ands	r1, r3
 8018bb4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018bb8:	2900      	cmp	r1, #0
 8018bba:	dd05      	ble.n	8018bc8 <__ulp+0x20>
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	460b      	mov	r3, r1
 8018bc0:	ec43 2b10 	vmov	d0, r2, r3
 8018bc4:	b002      	add	sp, #8
 8018bc6:	4770      	bx	lr
 8018bc8:	4249      	negs	r1, r1
 8018bca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018bce:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018bd2:	f04f 0200 	mov.w	r2, #0
 8018bd6:	f04f 0300 	mov.w	r3, #0
 8018bda:	da04      	bge.n	8018be6 <__ulp+0x3e>
 8018bdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018be0:	fa41 f300 	asr.w	r3, r1, r0
 8018be4:	e7ec      	b.n	8018bc0 <__ulp+0x18>
 8018be6:	f1a0 0114 	sub.w	r1, r0, #20
 8018bea:	291e      	cmp	r1, #30
 8018bec:	bfda      	itte	le
 8018bee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018bf2:	fa20 f101 	lsrle.w	r1, r0, r1
 8018bf6:	2101      	movgt	r1, #1
 8018bf8:	460a      	mov	r2, r1
 8018bfa:	e7e1      	b.n	8018bc0 <__ulp+0x18>
 8018bfc:	7ff00000 	.word	0x7ff00000

08018c00 <__b2d>:
 8018c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c02:	6905      	ldr	r5, [r0, #16]
 8018c04:	f100 0714 	add.w	r7, r0, #20
 8018c08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018c0c:	1f2e      	subs	r6, r5, #4
 8018c0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018c12:	4620      	mov	r0, r4
 8018c14:	f7ff fd52 	bl	80186bc <__hi0bits>
 8018c18:	f1c0 0320 	rsb	r3, r0, #32
 8018c1c:	280a      	cmp	r0, #10
 8018c1e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018c9c <__b2d+0x9c>
 8018c22:	600b      	str	r3, [r1, #0]
 8018c24:	dc14      	bgt.n	8018c50 <__b2d+0x50>
 8018c26:	f1c0 0e0b 	rsb	lr, r0, #11
 8018c2a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018c2e:	42b7      	cmp	r7, r6
 8018c30:	ea41 030c 	orr.w	r3, r1, ip
 8018c34:	bf34      	ite	cc
 8018c36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c3a:	2100      	movcs	r1, #0
 8018c3c:	3015      	adds	r0, #21
 8018c3e:	fa04 f000 	lsl.w	r0, r4, r0
 8018c42:	fa21 f10e 	lsr.w	r1, r1, lr
 8018c46:	ea40 0201 	orr.w	r2, r0, r1
 8018c4a:	ec43 2b10 	vmov	d0, r2, r3
 8018c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c50:	42b7      	cmp	r7, r6
 8018c52:	bf3a      	itte	cc
 8018c54:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c58:	f1a5 0608 	subcc.w	r6, r5, #8
 8018c5c:	2100      	movcs	r1, #0
 8018c5e:	380b      	subs	r0, #11
 8018c60:	d017      	beq.n	8018c92 <__b2d+0x92>
 8018c62:	f1c0 0c20 	rsb	ip, r0, #32
 8018c66:	fa04 f500 	lsl.w	r5, r4, r0
 8018c6a:	42be      	cmp	r6, r7
 8018c6c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018c70:	ea45 0504 	orr.w	r5, r5, r4
 8018c74:	bf8c      	ite	hi
 8018c76:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018c7a:	2400      	movls	r4, #0
 8018c7c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018c80:	fa01 f000 	lsl.w	r0, r1, r0
 8018c84:	fa24 f40c 	lsr.w	r4, r4, ip
 8018c88:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018c8c:	ea40 0204 	orr.w	r2, r0, r4
 8018c90:	e7db      	b.n	8018c4a <__b2d+0x4a>
 8018c92:	ea44 030c 	orr.w	r3, r4, ip
 8018c96:	460a      	mov	r2, r1
 8018c98:	e7d7      	b.n	8018c4a <__b2d+0x4a>
 8018c9a:	bf00      	nop
 8018c9c:	3ff00000 	.word	0x3ff00000

08018ca0 <__d2b>:
 8018ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018ca4:	4689      	mov	r9, r1
 8018ca6:	2101      	movs	r1, #1
 8018ca8:	ec57 6b10 	vmov	r6, r7, d0
 8018cac:	4690      	mov	r8, r2
 8018cae:	f7ff fc0f 	bl	80184d0 <_Balloc>
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	b930      	cbnz	r0, 8018cc4 <__d2b+0x24>
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	4b25      	ldr	r3, [pc, #148]	; (8018d50 <__d2b+0xb0>)
 8018cba:	4826      	ldr	r0, [pc, #152]	; (8018d54 <__d2b+0xb4>)
 8018cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8018cc0:	f000 fb2e 	bl	8019320 <__assert_func>
 8018cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ccc:	bb35      	cbnz	r5, 8018d1c <__d2b+0x7c>
 8018cce:	2e00      	cmp	r6, #0
 8018cd0:	9301      	str	r3, [sp, #4]
 8018cd2:	d028      	beq.n	8018d26 <__d2b+0x86>
 8018cd4:	4668      	mov	r0, sp
 8018cd6:	9600      	str	r6, [sp, #0]
 8018cd8:	f7ff fd10 	bl	80186fc <__lo0bits>
 8018cdc:	9900      	ldr	r1, [sp, #0]
 8018cde:	b300      	cbz	r0, 8018d22 <__d2b+0x82>
 8018ce0:	9a01      	ldr	r2, [sp, #4]
 8018ce2:	f1c0 0320 	rsb	r3, r0, #32
 8018ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8018cea:	430b      	orrs	r3, r1
 8018cec:	40c2      	lsrs	r2, r0
 8018cee:	6163      	str	r3, [r4, #20]
 8018cf0:	9201      	str	r2, [sp, #4]
 8018cf2:	9b01      	ldr	r3, [sp, #4]
 8018cf4:	61a3      	str	r3, [r4, #24]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	bf14      	ite	ne
 8018cfa:	2202      	movne	r2, #2
 8018cfc:	2201      	moveq	r2, #1
 8018cfe:	6122      	str	r2, [r4, #16]
 8018d00:	b1d5      	cbz	r5, 8018d38 <__d2b+0x98>
 8018d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018d06:	4405      	add	r5, r0
 8018d08:	f8c9 5000 	str.w	r5, [r9]
 8018d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018d10:	f8c8 0000 	str.w	r0, [r8]
 8018d14:	4620      	mov	r0, r4
 8018d16:	b003      	add	sp, #12
 8018d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018d20:	e7d5      	b.n	8018cce <__d2b+0x2e>
 8018d22:	6161      	str	r1, [r4, #20]
 8018d24:	e7e5      	b.n	8018cf2 <__d2b+0x52>
 8018d26:	a801      	add	r0, sp, #4
 8018d28:	f7ff fce8 	bl	80186fc <__lo0bits>
 8018d2c:	9b01      	ldr	r3, [sp, #4]
 8018d2e:	6163      	str	r3, [r4, #20]
 8018d30:	2201      	movs	r2, #1
 8018d32:	6122      	str	r2, [r4, #16]
 8018d34:	3020      	adds	r0, #32
 8018d36:	e7e3      	b.n	8018d00 <__d2b+0x60>
 8018d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018d40:	f8c9 0000 	str.w	r0, [r9]
 8018d44:	6918      	ldr	r0, [r3, #16]
 8018d46:	f7ff fcb9 	bl	80186bc <__hi0bits>
 8018d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018d4e:	e7df      	b.n	8018d10 <__d2b+0x70>
 8018d50:	0801af74 	.word	0x0801af74
 8018d54:	0801b004 	.word	0x0801b004

08018d58 <__ratio>:
 8018d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d5c:	4688      	mov	r8, r1
 8018d5e:	4669      	mov	r1, sp
 8018d60:	4681      	mov	r9, r0
 8018d62:	f7ff ff4d 	bl	8018c00 <__b2d>
 8018d66:	a901      	add	r1, sp, #4
 8018d68:	4640      	mov	r0, r8
 8018d6a:	ec55 4b10 	vmov	r4, r5, d0
 8018d6e:	f7ff ff47 	bl	8018c00 <__b2d>
 8018d72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018d7a:	eba3 0c02 	sub.w	ip, r3, r2
 8018d7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018d82:	1a9b      	subs	r3, r3, r2
 8018d84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018d88:	ec51 0b10 	vmov	r0, r1, d0
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	bfd6      	itet	le
 8018d90:	460a      	movle	r2, r1
 8018d92:	462a      	movgt	r2, r5
 8018d94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018d98:	468b      	mov	fp, r1
 8018d9a:	462f      	mov	r7, r5
 8018d9c:	bfd4      	ite	le
 8018d9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018da2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018da6:	4620      	mov	r0, r4
 8018da8:	ee10 2a10 	vmov	r2, s0
 8018dac:	465b      	mov	r3, fp
 8018dae:	4639      	mov	r1, r7
 8018db0:	f7e7 fd4c 	bl	800084c <__aeabi_ddiv>
 8018db4:	ec41 0b10 	vmov	d0, r0, r1
 8018db8:	b003      	add	sp, #12
 8018dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dbe <__copybits>:
 8018dbe:	3901      	subs	r1, #1
 8018dc0:	b570      	push	{r4, r5, r6, lr}
 8018dc2:	1149      	asrs	r1, r1, #5
 8018dc4:	6914      	ldr	r4, [r2, #16]
 8018dc6:	3101      	adds	r1, #1
 8018dc8:	f102 0314 	add.w	r3, r2, #20
 8018dcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018dd0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018dd4:	1f05      	subs	r5, r0, #4
 8018dd6:	42a3      	cmp	r3, r4
 8018dd8:	d30c      	bcc.n	8018df4 <__copybits+0x36>
 8018dda:	1aa3      	subs	r3, r4, r2
 8018ddc:	3b11      	subs	r3, #17
 8018dde:	f023 0303 	bic.w	r3, r3, #3
 8018de2:	3211      	adds	r2, #17
 8018de4:	42a2      	cmp	r2, r4
 8018de6:	bf88      	it	hi
 8018de8:	2300      	movhi	r3, #0
 8018dea:	4418      	add	r0, r3
 8018dec:	2300      	movs	r3, #0
 8018dee:	4288      	cmp	r0, r1
 8018df0:	d305      	bcc.n	8018dfe <__copybits+0x40>
 8018df2:	bd70      	pop	{r4, r5, r6, pc}
 8018df4:	f853 6b04 	ldr.w	r6, [r3], #4
 8018df8:	f845 6f04 	str.w	r6, [r5, #4]!
 8018dfc:	e7eb      	b.n	8018dd6 <__copybits+0x18>
 8018dfe:	f840 3b04 	str.w	r3, [r0], #4
 8018e02:	e7f4      	b.n	8018dee <__copybits+0x30>

08018e04 <__any_on>:
 8018e04:	f100 0214 	add.w	r2, r0, #20
 8018e08:	6900      	ldr	r0, [r0, #16]
 8018e0a:	114b      	asrs	r3, r1, #5
 8018e0c:	4298      	cmp	r0, r3
 8018e0e:	b510      	push	{r4, lr}
 8018e10:	db11      	blt.n	8018e36 <__any_on+0x32>
 8018e12:	dd0a      	ble.n	8018e2a <__any_on+0x26>
 8018e14:	f011 011f 	ands.w	r1, r1, #31
 8018e18:	d007      	beq.n	8018e2a <__any_on+0x26>
 8018e1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e1e:	fa24 f001 	lsr.w	r0, r4, r1
 8018e22:	fa00 f101 	lsl.w	r1, r0, r1
 8018e26:	428c      	cmp	r4, r1
 8018e28:	d10b      	bne.n	8018e42 <__any_on+0x3e>
 8018e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e2e:	4293      	cmp	r3, r2
 8018e30:	d803      	bhi.n	8018e3a <__any_on+0x36>
 8018e32:	2000      	movs	r0, #0
 8018e34:	bd10      	pop	{r4, pc}
 8018e36:	4603      	mov	r3, r0
 8018e38:	e7f7      	b.n	8018e2a <__any_on+0x26>
 8018e3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e3e:	2900      	cmp	r1, #0
 8018e40:	d0f5      	beq.n	8018e2e <__any_on+0x2a>
 8018e42:	2001      	movs	r0, #1
 8018e44:	e7f6      	b.n	8018e34 <__any_on+0x30>

08018e46 <_calloc_r>:
 8018e46:	b513      	push	{r0, r1, r4, lr}
 8018e48:	434a      	muls	r2, r1
 8018e4a:	4611      	mov	r1, r2
 8018e4c:	9201      	str	r2, [sp, #4]
 8018e4e:	f000 f859 	bl	8018f04 <_malloc_r>
 8018e52:	4604      	mov	r4, r0
 8018e54:	b118      	cbz	r0, 8018e5e <_calloc_r+0x18>
 8018e56:	9a01      	ldr	r2, [sp, #4]
 8018e58:	2100      	movs	r1, #0
 8018e5a:	f7fc fac7 	bl	80153ec <memset>
 8018e5e:	4620      	mov	r0, r4
 8018e60:	b002      	add	sp, #8
 8018e62:	bd10      	pop	{r4, pc}

08018e64 <_free_r>:
 8018e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e66:	2900      	cmp	r1, #0
 8018e68:	d048      	beq.n	8018efc <_free_r+0x98>
 8018e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e6e:	9001      	str	r0, [sp, #4]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	f1a1 0404 	sub.w	r4, r1, #4
 8018e76:	bfb8      	it	lt
 8018e78:	18e4      	addlt	r4, r4, r3
 8018e7a:	f000 fc55 	bl	8019728 <__malloc_lock>
 8018e7e:	4a20      	ldr	r2, [pc, #128]	; (8018f00 <_free_r+0x9c>)
 8018e80:	9801      	ldr	r0, [sp, #4]
 8018e82:	6813      	ldr	r3, [r2, #0]
 8018e84:	4615      	mov	r5, r2
 8018e86:	b933      	cbnz	r3, 8018e96 <_free_r+0x32>
 8018e88:	6063      	str	r3, [r4, #4]
 8018e8a:	6014      	str	r4, [r2, #0]
 8018e8c:	b003      	add	sp, #12
 8018e8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018e92:	f000 bc4f 	b.w	8019734 <__malloc_unlock>
 8018e96:	42a3      	cmp	r3, r4
 8018e98:	d90b      	bls.n	8018eb2 <_free_r+0x4e>
 8018e9a:	6821      	ldr	r1, [r4, #0]
 8018e9c:	1862      	adds	r2, r4, r1
 8018e9e:	4293      	cmp	r3, r2
 8018ea0:	bf04      	itt	eq
 8018ea2:	681a      	ldreq	r2, [r3, #0]
 8018ea4:	685b      	ldreq	r3, [r3, #4]
 8018ea6:	6063      	str	r3, [r4, #4]
 8018ea8:	bf04      	itt	eq
 8018eaa:	1852      	addeq	r2, r2, r1
 8018eac:	6022      	streq	r2, [r4, #0]
 8018eae:	602c      	str	r4, [r5, #0]
 8018eb0:	e7ec      	b.n	8018e8c <_free_r+0x28>
 8018eb2:	461a      	mov	r2, r3
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	b10b      	cbz	r3, 8018ebc <_free_r+0x58>
 8018eb8:	42a3      	cmp	r3, r4
 8018eba:	d9fa      	bls.n	8018eb2 <_free_r+0x4e>
 8018ebc:	6811      	ldr	r1, [r2, #0]
 8018ebe:	1855      	adds	r5, r2, r1
 8018ec0:	42a5      	cmp	r5, r4
 8018ec2:	d10b      	bne.n	8018edc <_free_r+0x78>
 8018ec4:	6824      	ldr	r4, [r4, #0]
 8018ec6:	4421      	add	r1, r4
 8018ec8:	1854      	adds	r4, r2, r1
 8018eca:	42a3      	cmp	r3, r4
 8018ecc:	6011      	str	r1, [r2, #0]
 8018ece:	d1dd      	bne.n	8018e8c <_free_r+0x28>
 8018ed0:	681c      	ldr	r4, [r3, #0]
 8018ed2:	685b      	ldr	r3, [r3, #4]
 8018ed4:	6053      	str	r3, [r2, #4]
 8018ed6:	4421      	add	r1, r4
 8018ed8:	6011      	str	r1, [r2, #0]
 8018eda:	e7d7      	b.n	8018e8c <_free_r+0x28>
 8018edc:	d902      	bls.n	8018ee4 <_free_r+0x80>
 8018ede:	230c      	movs	r3, #12
 8018ee0:	6003      	str	r3, [r0, #0]
 8018ee2:	e7d3      	b.n	8018e8c <_free_r+0x28>
 8018ee4:	6825      	ldr	r5, [r4, #0]
 8018ee6:	1961      	adds	r1, r4, r5
 8018ee8:	428b      	cmp	r3, r1
 8018eea:	bf04      	itt	eq
 8018eec:	6819      	ldreq	r1, [r3, #0]
 8018eee:	685b      	ldreq	r3, [r3, #4]
 8018ef0:	6063      	str	r3, [r4, #4]
 8018ef2:	bf04      	itt	eq
 8018ef4:	1949      	addeq	r1, r1, r5
 8018ef6:	6021      	streq	r1, [r4, #0]
 8018ef8:	6054      	str	r4, [r2, #4]
 8018efa:	e7c7      	b.n	8018e8c <_free_r+0x28>
 8018efc:	b003      	add	sp, #12
 8018efe:	bd30      	pop	{r4, r5, pc}
 8018f00:	200061b0 	.word	0x200061b0

08018f04 <_malloc_r>:
 8018f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f06:	1ccd      	adds	r5, r1, #3
 8018f08:	f025 0503 	bic.w	r5, r5, #3
 8018f0c:	3508      	adds	r5, #8
 8018f0e:	2d0c      	cmp	r5, #12
 8018f10:	bf38      	it	cc
 8018f12:	250c      	movcc	r5, #12
 8018f14:	2d00      	cmp	r5, #0
 8018f16:	4606      	mov	r6, r0
 8018f18:	db01      	blt.n	8018f1e <_malloc_r+0x1a>
 8018f1a:	42a9      	cmp	r1, r5
 8018f1c:	d903      	bls.n	8018f26 <_malloc_r+0x22>
 8018f1e:	230c      	movs	r3, #12
 8018f20:	6033      	str	r3, [r6, #0]
 8018f22:	2000      	movs	r0, #0
 8018f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f26:	f000 fbff 	bl	8019728 <__malloc_lock>
 8018f2a:	4921      	ldr	r1, [pc, #132]	; (8018fb0 <_malloc_r+0xac>)
 8018f2c:	680a      	ldr	r2, [r1, #0]
 8018f2e:	4614      	mov	r4, r2
 8018f30:	b99c      	cbnz	r4, 8018f5a <_malloc_r+0x56>
 8018f32:	4f20      	ldr	r7, [pc, #128]	; (8018fb4 <_malloc_r+0xb0>)
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	b923      	cbnz	r3, 8018f42 <_malloc_r+0x3e>
 8018f38:	4621      	mov	r1, r4
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f000 f9b4 	bl	80192a8 <_sbrk_r>
 8018f40:	6038      	str	r0, [r7, #0]
 8018f42:	4629      	mov	r1, r5
 8018f44:	4630      	mov	r0, r6
 8018f46:	f000 f9af 	bl	80192a8 <_sbrk_r>
 8018f4a:	1c43      	adds	r3, r0, #1
 8018f4c:	d123      	bne.n	8018f96 <_malloc_r+0x92>
 8018f4e:	230c      	movs	r3, #12
 8018f50:	6033      	str	r3, [r6, #0]
 8018f52:	4630      	mov	r0, r6
 8018f54:	f000 fbee 	bl	8019734 <__malloc_unlock>
 8018f58:	e7e3      	b.n	8018f22 <_malloc_r+0x1e>
 8018f5a:	6823      	ldr	r3, [r4, #0]
 8018f5c:	1b5b      	subs	r3, r3, r5
 8018f5e:	d417      	bmi.n	8018f90 <_malloc_r+0x8c>
 8018f60:	2b0b      	cmp	r3, #11
 8018f62:	d903      	bls.n	8018f6c <_malloc_r+0x68>
 8018f64:	6023      	str	r3, [r4, #0]
 8018f66:	441c      	add	r4, r3
 8018f68:	6025      	str	r5, [r4, #0]
 8018f6a:	e004      	b.n	8018f76 <_malloc_r+0x72>
 8018f6c:	6863      	ldr	r3, [r4, #4]
 8018f6e:	42a2      	cmp	r2, r4
 8018f70:	bf0c      	ite	eq
 8018f72:	600b      	streq	r3, [r1, #0]
 8018f74:	6053      	strne	r3, [r2, #4]
 8018f76:	4630      	mov	r0, r6
 8018f78:	f000 fbdc 	bl	8019734 <__malloc_unlock>
 8018f7c:	f104 000b 	add.w	r0, r4, #11
 8018f80:	1d23      	adds	r3, r4, #4
 8018f82:	f020 0007 	bic.w	r0, r0, #7
 8018f86:	1ac2      	subs	r2, r0, r3
 8018f88:	d0cc      	beq.n	8018f24 <_malloc_r+0x20>
 8018f8a:	1a1b      	subs	r3, r3, r0
 8018f8c:	50a3      	str	r3, [r4, r2]
 8018f8e:	e7c9      	b.n	8018f24 <_malloc_r+0x20>
 8018f90:	4622      	mov	r2, r4
 8018f92:	6864      	ldr	r4, [r4, #4]
 8018f94:	e7cc      	b.n	8018f30 <_malloc_r+0x2c>
 8018f96:	1cc4      	adds	r4, r0, #3
 8018f98:	f024 0403 	bic.w	r4, r4, #3
 8018f9c:	42a0      	cmp	r0, r4
 8018f9e:	d0e3      	beq.n	8018f68 <_malloc_r+0x64>
 8018fa0:	1a21      	subs	r1, r4, r0
 8018fa2:	4630      	mov	r0, r6
 8018fa4:	f000 f980 	bl	80192a8 <_sbrk_r>
 8018fa8:	3001      	adds	r0, #1
 8018faa:	d1dd      	bne.n	8018f68 <_malloc_r+0x64>
 8018fac:	e7cf      	b.n	8018f4e <_malloc_r+0x4a>
 8018fae:	bf00      	nop
 8018fb0:	200061b0 	.word	0x200061b0
 8018fb4:	200061b4 	.word	0x200061b4

08018fb8 <__ssputs_r>:
 8018fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fbc:	688e      	ldr	r6, [r1, #8]
 8018fbe:	429e      	cmp	r6, r3
 8018fc0:	4682      	mov	sl, r0
 8018fc2:	460c      	mov	r4, r1
 8018fc4:	4690      	mov	r8, r2
 8018fc6:	461f      	mov	r7, r3
 8018fc8:	d838      	bhi.n	801903c <__ssputs_r+0x84>
 8018fca:	898a      	ldrh	r2, [r1, #12]
 8018fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018fd0:	d032      	beq.n	8019038 <__ssputs_r+0x80>
 8018fd2:	6825      	ldr	r5, [r4, #0]
 8018fd4:	6909      	ldr	r1, [r1, #16]
 8018fd6:	eba5 0901 	sub.w	r9, r5, r1
 8018fda:	6965      	ldr	r5, [r4, #20]
 8018fdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018fe4:	3301      	adds	r3, #1
 8018fe6:	444b      	add	r3, r9
 8018fe8:	106d      	asrs	r5, r5, #1
 8018fea:	429d      	cmp	r5, r3
 8018fec:	bf38      	it	cc
 8018fee:	461d      	movcc	r5, r3
 8018ff0:	0553      	lsls	r3, r2, #21
 8018ff2:	d531      	bpl.n	8019058 <__ssputs_r+0xa0>
 8018ff4:	4629      	mov	r1, r5
 8018ff6:	f7ff ff85 	bl	8018f04 <_malloc_r>
 8018ffa:	4606      	mov	r6, r0
 8018ffc:	b950      	cbnz	r0, 8019014 <__ssputs_r+0x5c>
 8018ffe:	230c      	movs	r3, #12
 8019000:	f8ca 3000 	str.w	r3, [sl]
 8019004:	89a3      	ldrh	r3, [r4, #12]
 8019006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801900a:	81a3      	strh	r3, [r4, #12]
 801900c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019014:	6921      	ldr	r1, [r4, #16]
 8019016:	464a      	mov	r2, r9
 8019018:	f7fc f9da 	bl	80153d0 <memcpy>
 801901c:	89a3      	ldrh	r3, [r4, #12]
 801901e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019026:	81a3      	strh	r3, [r4, #12]
 8019028:	6126      	str	r6, [r4, #16]
 801902a:	6165      	str	r5, [r4, #20]
 801902c:	444e      	add	r6, r9
 801902e:	eba5 0509 	sub.w	r5, r5, r9
 8019032:	6026      	str	r6, [r4, #0]
 8019034:	60a5      	str	r5, [r4, #8]
 8019036:	463e      	mov	r6, r7
 8019038:	42be      	cmp	r6, r7
 801903a:	d900      	bls.n	801903e <__ssputs_r+0x86>
 801903c:	463e      	mov	r6, r7
 801903e:	4632      	mov	r2, r6
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	4641      	mov	r1, r8
 8019044:	f000 fb56 	bl	80196f4 <memmove>
 8019048:	68a3      	ldr	r3, [r4, #8]
 801904a:	6822      	ldr	r2, [r4, #0]
 801904c:	1b9b      	subs	r3, r3, r6
 801904e:	4432      	add	r2, r6
 8019050:	60a3      	str	r3, [r4, #8]
 8019052:	6022      	str	r2, [r4, #0]
 8019054:	2000      	movs	r0, #0
 8019056:	e7db      	b.n	8019010 <__ssputs_r+0x58>
 8019058:	462a      	mov	r2, r5
 801905a:	f000 fb71 	bl	8019740 <_realloc_r>
 801905e:	4606      	mov	r6, r0
 8019060:	2800      	cmp	r0, #0
 8019062:	d1e1      	bne.n	8019028 <__ssputs_r+0x70>
 8019064:	6921      	ldr	r1, [r4, #16]
 8019066:	4650      	mov	r0, sl
 8019068:	f7ff fefc 	bl	8018e64 <_free_r>
 801906c:	e7c7      	b.n	8018ffe <__ssputs_r+0x46>
	...

08019070 <_svfiprintf_r>:
 8019070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019074:	4698      	mov	r8, r3
 8019076:	898b      	ldrh	r3, [r1, #12]
 8019078:	061b      	lsls	r3, r3, #24
 801907a:	b09d      	sub	sp, #116	; 0x74
 801907c:	4607      	mov	r7, r0
 801907e:	460d      	mov	r5, r1
 8019080:	4614      	mov	r4, r2
 8019082:	d50e      	bpl.n	80190a2 <_svfiprintf_r+0x32>
 8019084:	690b      	ldr	r3, [r1, #16]
 8019086:	b963      	cbnz	r3, 80190a2 <_svfiprintf_r+0x32>
 8019088:	2140      	movs	r1, #64	; 0x40
 801908a:	f7ff ff3b 	bl	8018f04 <_malloc_r>
 801908e:	6028      	str	r0, [r5, #0]
 8019090:	6128      	str	r0, [r5, #16]
 8019092:	b920      	cbnz	r0, 801909e <_svfiprintf_r+0x2e>
 8019094:	230c      	movs	r3, #12
 8019096:	603b      	str	r3, [r7, #0]
 8019098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801909c:	e0d1      	b.n	8019242 <_svfiprintf_r+0x1d2>
 801909e:	2340      	movs	r3, #64	; 0x40
 80190a0:	616b      	str	r3, [r5, #20]
 80190a2:	2300      	movs	r3, #0
 80190a4:	9309      	str	r3, [sp, #36]	; 0x24
 80190a6:	2320      	movs	r3, #32
 80190a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80190b0:	2330      	movs	r3, #48	; 0x30
 80190b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801925c <_svfiprintf_r+0x1ec>
 80190b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190ba:	f04f 0901 	mov.w	r9, #1
 80190be:	4623      	mov	r3, r4
 80190c0:	469a      	mov	sl, r3
 80190c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190c6:	b10a      	cbz	r2, 80190cc <_svfiprintf_r+0x5c>
 80190c8:	2a25      	cmp	r2, #37	; 0x25
 80190ca:	d1f9      	bne.n	80190c0 <_svfiprintf_r+0x50>
 80190cc:	ebba 0b04 	subs.w	fp, sl, r4
 80190d0:	d00b      	beq.n	80190ea <_svfiprintf_r+0x7a>
 80190d2:	465b      	mov	r3, fp
 80190d4:	4622      	mov	r2, r4
 80190d6:	4629      	mov	r1, r5
 80190d8:	4638      	mov	r0, r7
 80190da:	f7ff ff6d 	bl	8018fb8 <__ssputs_r>
 80190de:	3001      	adds	r0, #1
 80190e0:	f000 80aa 	beq.w	8019238 <_svfiprintf_r+0x1c8>
 80190e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190e6:	445a      	add	r2, fp
 80190e8:	9209      	str	r2, [sp, #36]	; 0x24
 80190ea:	f89a 3000 	ldrb.w	r3, [sl]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	f000 80a2 	beq.w	8019238 <_svfiprintf_r+0x1c8>
 80190f4:	2300      	movs	r3, #0
 80190f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80190fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190fe:	f10a 0a01 	add.w	sl, sl, #1
 8019102:	9304      	str	r3, [sp, #16]
 8019104:	9307      	str	r3, [sp, #28]
 8019106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801910a:	931a      	str	r3, [sp, #104]	; 0x68
 801910c:	4654      	mov	r4, sl
 801910e:	2205      	movs	r2, #5
 8019110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019114:	4851      	ldr	r0, [pc, #324]	; (801925c <_svfiprintf_r+0x1ec>)
 8019116:	f7e7 f863 	bl	80001e0 <memchr>
 801911a:	9a04      	ldr	r2, [sp, #16]
 801911c:	b9d8      	cbnz	r0, 8019156 <_svfiprintf_r+0xe6>
 801911e:	06d0      	lsls	r0, r2, #27
 8019120:	bf44      	itt	mi
 8019122:	2320      	movmi	r3, #32
 8019124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019128:	0711      	lsls	r1, r2, #28
 801912a:	bf44      	itt	mi
 801912c:	232b      	movmi	r3, #43	; 0x2b
 801912e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019132:	f89a 3000 	ldrb.w	r3, [sl]
 8019136:	2b2a      	cmp	r3, #42	; 0x2a
 8019138:	d015      	beq.n	8019166 <_svfiprintf_r+0xf6>
 801913a:	9a07      	ldr	r2, [sp, #28]
 801913c:	4654      	mov	r4, sl
 801913e:	2000      	movs	r0, #0
 8019140:	f04f 0c0a 	mov.w	ip, #10
 8019144:	4621      	mov	r1, r4
 8019146:	f811 3b01 	ldrb.w	r3, [r1], #1
 801914a:	3b30      	subs	r3, #48	; 0x30
 801914c:	2b09      	cmp	r3, #9
 801914e:	d94e      	bls.n	80191ee <_svfiprintf_r+0x17e>
 8019150:	b1b0      	cbz	r0, 8019180 <_svfiprintf_r+0x110>
 8019152:	9207      	str	r2, [sp, #28]
 8019154:	e014      	b.n	8019180 <_svfiprintf_r+0x110>
 8019156:	eba0 0308 	sub.w	r3, r0, r8
 801915a:	fa09 f303 	lsl.w	r3, r9, r3
 801915e:	4313      	orrs	r3, r2
 8019160:	9304      	str	r3, [sp, #16]
 8019162:	46a2      	mov	sl, r4
 8019164:	e7d2      	b.n	801910c <_svfiprintf_r+0x9c>
 8019166:	9b03      	ldr	r3, [sp, #12]
 8019168:	1d19      	adds	r1, r3, #4
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	9103      	str	r1, [sp, #12]
 801916e:	2b00      	cmp	r3, #0
 8019170:	bfbb      	ittet	lt
 8019172:	425b      	neglt	r3, r3
 8019174:	f042 0202 	orrlt.w	r2, r2, #2
 8019178:	9307      	strge	r3, [sp, #28]
 801917a:	9307      	strlt	r3, [sp, #28]
 801917c:	bfb8      	it	lt
 801917e:	9204      	strlt	r2, [sp, #16]
 8019180:	7823      	ldrb	r3, [r4, #0]
 8019182:	2b2e      	cmp	r3, #46	; 0x2e
 8019184:	d10c      	bne.n	80191a0 <_svfiprintf_r+0x130>
 8019186:	7863      	ldrb	r3, [r4, #1]
 8019188:	2b2a      	cmp	r3, #42	; 0x2a
 801918a:	d135      	bne.n	80191f8 <_svfiprintf_r+0x188>
 801918c:	9b03      	ldr	r3, [sp, #12]
 801918e:	1d1a      	adds	r2, r3, #4
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	9203      	str	r2, [sp, #12]
 8019194:	2b00      	cmp	r3, #0
 8019196:	bfb8      	it	lt
 8019198:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801919c:	3402      	adds	r4, #2
 801919e:	9305      	str	r3, [sp, #20]
 80191a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801926c <_svfiprintf_r+0x1fc>
 80191a4:	7821      	ldrb	r1, [r4, #0]
 80191a6:	2203      	movs	r2, #3
 80191a8:	4650      	mov	r0, sl
 80191aa:	f7e7 f819 	bl	80001e0 <memchr>
 80191ae:	b140      	cbz	r0, 80191c2 <_svfiprintf_r+0x152>
 80191b0:	2340      	movs	r3, #64	; 0x40
 80191b2:	eba0 000a 	sub.w	r0, r0, sl
 80191b6:	fa03 f000 	lsl.w	r0, r3, r0
 80191ba:	9b04      	ldr	r3, [sp, #16]
 80191bc:	4303      	orrs	r3, r0
 80191be:	3401      	adds	r4, #1
 80191c0:	9304      	str	r3, [sp, #16]
 80191c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191c6:	4826      	ldr	r0, [pc, #152]	; (8019260 <_svfiprintf_r+0x1f0>)
 80191c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191cc:	2206      	movs	r2, #6
 80191ce:	f7e7 f807 	bl	80001e0 <memchr>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	d038      	beq.n	8019248 <_svfiprintf_r+0x1d8>
 80191d6:	4b23      	ldr	r3, [pc, #140]	; (8019264 <_svfiprintf_r+0x1f4>)
 80191d8:	bb1b      	cbnz	r3, 8019222 <_svfiprintf_r+0x1b2>
 80191da:	9b03      	ldr	r3, [sp, #12]
 80191dc:	3307      	adds	r3, #7
 80191de:	f023 0307 	bic.w	r3, r3, #7
 80191e2:	3308      	adds	r3, #8
 80191e4:	9303      	str	r3, [sp, #12]
 80191e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191e8:	4433      	add	r3, r6
 80191ea:	9309      	str	r3, [sp, #36]	; 0x24
 80191ec:	e767      	b.n	80190be <_svfiprintf_r+0x4e>
 80191ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80191f2:	460c      	mov	r4, r1
 80191f4:	2001      	movs	r0, #1
 80191f6:	e7a5      	b.n	8019144 <_svfiprintf_r+0xd4>
 80191f8:	2300      	movs	r3, #0
 80191fa:	3401      	adds	r4, #1
 80191fc:	9305      	str	r3, [sp, #20]
 80191fe:	4619      	mov	r1, r3
 8019200:	f04f 0c0a 	mov.w	ip, #10
 8019204:	4620      	mov	r0, r4
 8019206:	f810 2b01 	ldrb.w	r2, [r0], #1
 801920a:	3a30      	subs	r2, #48	; 0x30
 801920c:	2a09      	cmp	r2, #9
 801920e:	d903      	bls.n	8019218 <_svfiprintf_r+0x1a8>
 8019210:	2b00      	cmp	r3, #0
 8019212:	d0c5      	beq.n	80191a0 <_svfiprintf_r+0x130>
 8019214:	9105      	str	r1, [sp, #20]
 8019216:	e7c3      	b.n	80191a0 <_svfiprintf_r+0x130>
 8019218:	fb0c 2101 	mla	r1, ip, r1, r2
 801921c:	4604      	mov	r4, r0
 801921e:	2301      	movs	r3, #1
 8019220:	e7f0      	b.n	8019204 <_svfiprintf_r+0x194>
 8019222:	ab03      	add	r3, sp, #12
 8019224:	9300      	str	r3, [sp, #0]
 8019226:	462a      	mov	r2, r5
 8019228:	4b0f      	ldr	r3, [pc, #60]	; (8019268 <_svfiprintf_r+0x1f8>)
 801922a:	a904      	add	r1, sp, #16
 801922c:	4638      	mov	r0, r7
 801922e:	f7fc f985 	bl	801553c <_printf_float>
 8019232:	1c42      	adds	r2, r0, #1
 8019234:	4606      	mov	r6, r0
 8019236:	d1d6      	bne.n	80191e6 <_svfiprintf_r+0x176>
 8019238:	89ab      	ldrh	r3, [r5, #12]
 801923a:	065b      	lsls	r3, r3, #25
 801923c:	f53f af2c 	bmi.w	8019098 <_svfiprintf_r+0x28>
 8019240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019242:	b01d      	add	sp, #116	; 0x74
 8019244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019248:	ab03      	add	r3, sp, #12
 801924a:	9300      	str	r3, [sp, #0]
 801924c:	462a      	mov	r2, r5
 801924e:	4b06      	ldr	r3, [pc, #24]	; (8019268 <_svfiprintf_r+0x1f8>)
 8019250:	a904      	add	r1, sp, #16
 8019252:	4638      	mov	r0, r7
 8019254:	f7fc fc16 	bl	8015a84 <_printf_i>
 8019258:	e7eb      	b.n	8019232 <_svfiprintf_r+0x1c2>
 801925a:	bf00      	nop
 801925c:	0801b164 	.word	0x0801b164
 8019260:	0801b16e 	.word	0x0801b16e
 8019264:	0801553d 	.word	0x0801553d
 8019268:	08018fb9 	.word	0x08018fb9
 801926c:	0801b16a 	.word	0x0801b16a

08019270 <_read_r>:
 8019270:	b538      	push	{r3, r4, r5, lr}
 8019272:	4d07      	ldr	r5, [pc, #28]	; (8019290 <_read_r+0x20>)
 8019274:	4604      	mov	r4, r0
 8019276:	4608      	mov	r0, r1
 8019278:	4611      	mov	r1, r2
 801927a:	2200      	movs	r2, #0
 801927c:	602a      	str	r2, [r5, #0]
 801927e:	461a      	mov	r2, r3
 8019280:	f7f1 f8ea 	bl	800a458 <_read>
 8019284:	1c43      	adds	r3, r0, #1
 8019286:	d102      	bne.n	801928e <_read_r+0x1e>
 8019288:	682b      	ldr	r3, [r5, #0]
 801928a:	b103      	cbz	r3, 801928e <_read_r+0x1e>
 801928c:	6023      	str	r3, [r4, #0]
 801928e:	bd38      	pop	{r3, r4, r5, pc}
 8019290:	20008a7c 	.word	0x20008a7c
 8019294:	00000000 	.word	0x00000000

08019298 <nan>:
 8019298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80192a0 <nan+0x8>
 801929c:	4770      	bx	lr
 801929e:	bf00      	nop
 80192a0:	00000000 	.word	0x00000000
 80192a4:	7ff80000 	.word	0x7ff80000

080192a8 <_sbrk_r>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	4d06      	ldr	r5, [pc, #24]	; (80192c4 <_sbrk_r+0x1c>)
 80192ac:	2300      	movs	r3, #0
 80192ae:	4604      	mov	r4, r0
 80192b0:	4608      	mov	r0, r1
 80192b2:	602b      	str	r3, [r5, #0]
 80192b4:	f7f1 f93e 	bl	800a534 <_sbrk>
 80192b8:	1c43      	adds	r3, r0, #1
 80192ba:	d102      	bne.n	80192c2 <_sbrk_r+0x1a>
 80192bc:	682b      	ldr	r3, [r5, #0]
 80192be:	b103      	cbz	r3, 80192c2 <_sbrk_r+0x1a>
 80192c0:	6023      	str	r3, [r4, #0]
 80192c2:	bd38      	pop	{r3, r4, r5, pc}
 80192c4:	20008a7c 	.word	0x20008a7c

080192c8 <finitef>:
 80192c8:	b082      	sub	sp, #8
 80192ca:	ed8d 0a01 	vstr	s0, [sp, #4]
 80192ce:	9801      	ldr	r0, [sp, #4]
 80192d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80192d4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80192d8:	bfac      	ite	ge
 80192da:	2000      	movge	r0, #0
 80192dc:	2001      	movlt	r0, #1
 80192de:	b002      	add	sp, #8
 80192e0:	4770      	bx	lr

080192e2 <strncmp>:
 80192e2:	b510      	push	{r4, lr}
 80192e4:	b16a      	cbz	r2, 8019302 <strncmp+0x20>
 80192e6:	3901      	subs	r1, #1
 80192e8:	1884      	adds	r4, r0, r2
 80192ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80192ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80192f2:	4293      	cmp	r3, r2
 80192f4:	d103      	bne.n	80192fe <strncmp+0x1c>
 80192f6:	42a0      	cmp	r0, r4
 80192f8:	d001      	beq.n	80192fe <strncmp+0x1c>
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d1f5      	bne.n	80192ea <strncmp+0x8>
 80192fe:	1a98      	subs	r0, r3, r2
 8019300:	bd10      	pop	{r4, pc}
 8019302:	4610      	mov	r0, r2
 8019304:	e7fc      	b.n	8019300 <strncmp+0x1e>

08019306 <__ascii_wctomb>:
 8019306:	b149      	cbz	r1, 801931c <__ascii_wctomb+0x16>
 8019308:	2aff      	cmp	r2, #255	; 0xff
 801930a:	bf85      	ittet	hi
 801930c:	238a      	movhi	r3, #138	; 0x8a
 801930e:	6003      	strhi	r3, [r0, #0]
 8019310:	700a      	strbls	r2, [r1, #0]
 8019312:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019316:	bf98      	it	ls
 8019318:	2001      	movls	r0, #1
 801931a:	4770      	bx	lr
 801931c:	4608      	mov	r0, r1
 801931e:	4770      	bx	lr

08019320 <__assert_func>:
 8019320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019322:	4614      	mov	r4, r2
 8019324:	461a      	mov	r2, r3
 8019326:	4b09      	ldr	r3, [pc, #36]	; (801934c <__assert_func+0x2c>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	4605      	mov	r5, r0
 801932c:	68d8      	ldr	r0, [r3, #12]
 801932e:	b14c      	cbz	r4, 8019344 <__assert_func+0x24>
 8019330:	4b07      	ldr	r3, [pc, #28]	; (8019350 <__assert_func+0x30>)
 8019332:	9100      	str	r1, [sp, #0]
 8019334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019338:	4906      	ldr	r1, [pc, #24]	; (8019354 <__assert_func+0x34>)
 801933a:	462b      	mov	r3, r5
 801933c:	f000 f9a6 	bl	801968c <fiprintf>
 8019340:	f000 fc3e 	bl	8019bc0 <abort>
 8019344:	4b04      	ldr	r3, [pc, #16]	; (8019358 <__assert_func+0x38>)
 8019346:	461c      	mov	r4, r3
 8019348:	e7f3      	b.n	8019332 <__assert_func+0x12>
 801934a:	bf00      	nop
 801934c:	2000034c 	.word	0x2000034c
 8019350:	0801b175 	.word	0x0801b175
 8019354:	0801b182 	.word	0x0801b182
 8019358:	0801b1b0 	.word	0x0801b1b0

0801935c <__sflush_r>:
 801935c:	898a      	ldrh	r2, [r1, #12]
 801935e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019362:	4605      	mov	r5, r0
 8019364:	0710      	lsls	r0, r2, #28
 8019366:	460c      	mov	r4, r1
 8019368:	d458      	bmi.n	801941c <__sflush_r+0xc0>
 801936a:	684b      	ldr	r3, [r1, #4]
 801936c:	2b00      	cmp	r3, #0
 801936e:	dc05      	bgt.n	801937c <__sflush_r+0x20>
 8019370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019372:	2b00      	cmp	r3, #0
 8019374:	dc02      	bgt.n	801937c <__sflush_r+0x20>
 8019376:	2000      	movs	r0, #0
 8019378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801937c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801937e:	2e00      	cmp	r6, #0
 8019380:	d0f9      	beq.n	8019376 <__sflush_r+0x1a>
 8019382:	2300      	movs	r3, #0
 8019384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019388:	682f      	ldr	r7, [r5, #0]
 801938a:	602b      	str	r3, [r5, #0]
 801938c:	d032      	beq.n	80193f4 <__sflush_r+0x98>
 801938e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019390:	89a3      	ldrh	r3, [r4, #12]
 8019392:	075a      	lsls	r2, r3, #29
 8019394:	d505      	bpl.n	80193a2 <__sflush_r+0x46>
 8019396:	6863      	ldr	r3, [r4, #4]
 8019398:	1ac0      	subs	r0, r0, r3
 801939a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801939c:	b10b      	cbz	r3, 80193a2 <__sflush_r+0x46>
 801939e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193a0:	1ac0      	subs	r0, r0, r3
 80193a2:	2300      	movs	r3, #0
 80193a4:	4602      	mov	r2, r0
 80193a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193a8:	6a21      	ldr	r1, [r4, #32]
 80193aa:	4628      	mov	r0, r5
 80193ac:	47b0      	blx	r6
 80193ae:	1c43      	adds	r3, r0, #1
 80193b0:	89a3      	ldrh	r3, [r4, #12]
 80193b2:	d106      	bne.n	80193c2 <__sflush_r+0x66>
 80193b4:	6829      	ldr	r1, [r5, #0]
 80193b6:	291d      	cmp	r1, #29
 80193b8:	d82c      	bhi.n	8019414 <__sflush_r+0xb8>
 80193ba:	4a2a      	ldr	r2, [pc, #168]	; (8019464 <__sflush_r+0x108>)
 80193bc:	40ca      	lsrs	r2, r1
 80193be:	07d6      	lsls	r6, r2, #31
 80193c0:	d528      	bpl.n	8019414 <__sflush_r+0xb8>
 80193c2:	2200      	movs	r2, #0
 80193c4:	6062      	str	r2, [r4, #4]
 80193c6:	04d9      	lsls	r1, r3, #19
 80193c8:	6922      	ldr	r2, [r4, #16]
 80193ca:	6022      	str	r2, [r4, #0]
 80193cc:	d504      	bpl.n	80193d8 <__sflush_r+0x7c>
 80193ce:	1c42      	adds	r2, r0, #1
 80193d0:	d101      	bne.n	80193d6 <__sflush_r+0x7a>
 80193d2:	682b      	ldr	r3, [r5, #0]
 80193d4:	b903      	cbnz	r3, 80193d8 <__sflush_r+0x7c>
 80193d6:	6560      	str	r0, [r4, #84]	; 0x54
 80193d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193da:	602f      	str	r7, [r5, #0]
 80193dc:	2900      	cmp	r1, #0
 80193de:	d0ca      	beq.n	8019376 <__sflush_r+0x1a>
 80193e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193e4:	4299      	cmp	r1, r3
 80193e6:	d002      	beq.n	80193ee <__sflush_r+0x92>
 80193e8:	4628      	mov	r0, r5
 80193ea:	f7ff fd3b 	bl	8018e64 <_free_r>
 80193ee:	2000      	movs	r0, #0
 80193f0:	6360      	str	r0, [r4, #52]	; 0x34
 80193f2:	e7c1      	b.n	8019378 <__sflush_r+0x1c>
 80193f4:	6a21      	ldr	r1, [r4, #32]
 80193f6:	2301      	movs	r3, #1
 80193f8:	4628      	mov	r0, r5
 80193fa:	47b0      	blx	r6
 80193fc:	1c41      	adds	r1, r0, #1
 80193fe:	d1c7      	bne.n	8019390 <__sflush_r+0x34>
 8019400:	682b      	ldr	r3, [r5, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d0c4      	beq.n	8019390 <__sflush_r+0x34>
 8019406:	2b1d      	cmp	r3, #29
 8019408:	d001      	beq.n	801940e <__sflush_r+0xb2>
 801940a:	2b16      	cmp	r3, #22
 801940c:	d101      	bne.n	8019412 <__sflush_r+0xb6>
 801940e:	602f      	str	r7, [r5, #0]
 8019410:	e7b1      	b.n	8019376 <__sflush_r+0x1a>
 8019412:	89a3      	ldrh	r3, [r4, #12]
 8019414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019418:	81a3      	strh	r3, [r4, #12]
 801941a:	e7ad      	b.n	8019378 <__sflush_r+0x1c>
 801941c:	690f      	ldr	r7, [r1, #16]
 801941e:	2f00      	cmp	r7, #0
 8019420:	d0a9      	beq.n	8019376 <__sflush_r+0x1a>
 8019422:	0793      	lsls	r3, r2, #30
 8019424:	680e      	ldr	r6, [r1, #0]
 8019426:	bf08      	it	eq
 8019428:	694b      	ldreq	r3, [r1, #20]
 801942a:	600f      	str	r7, [r1, #0]
 801942c:	bf18      	it	ne
 801942e:	2300      	movne	r3, #0
 8019430:	eba6 0807 	sub.w	r8, r6, r7
 8019434:	608b      	str	r3, [r1, #8]
 8019436:	f1b8 0f00 	cmp.w	r8, #0
 801943a:	dd9c      	ble.n	8019376 <__sflush_r+0x1a>
 801943c:	6a21      	ldr	r1, [r4, #32]
 801943e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019440:	4643      	mov	r3, r8
 8019442:	463a      	mov	r2, r7
 8019444:	4628      	mov	r0, r5
 8019446:	47b0      	blx	r6
 8019448:	2800      	cmp	r0, #0
 801944a:	dc06      	bgt.n	801945a <__sflush_r+0xfe>
 801944c:	89a3      	ldrh	r3, [r4, #12]
 801944e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019452:	81a3      	strh	r3, [r4, #12]
 8019454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019458:	e78e      	b.n	8019378 <__sflush_r+0x1c>
 801945a:	4407      	add	r7, r0
 801945c:	eba8 0800 	sub.w	r8, r8, r0
 8019460:	e7e9      	b.n	8019436 <__sflush_r+0xda>
 8019462:	bf00      	nop
 8019464:	20400001 	.word	0x20400001

08019468 <_fflush_r>:
 8019468:	b538      	push	{r3, r4, r5, lr}
 801946a:	690b      	ldr	r3, [r1, #16]
 801946c:	4605      	mov	r5, r0
 801946e:	460c      	mov	r4, r1
 8019470:	b913      	cbnz	r3, 8019478 <_fflush_r+0x10>
 8019472:	2500      	movs	r5, #0
 8019474:	4628      	mov	r0, r5
 8019476:	bd38      	pop	{r3, r4, r5, pc}
 8019478:	b118      	cbz	r0, 8019482 <_fflush_r+0x1a>
 801947a:	6983      	ldr	r3, [r0, #24]
 801947c:	b90b      	cbnz	r3, 8019482 <_fflush_r+0x1a>
 801947e:	f000 f887 	bl	8019590 <__sinit>
 8019482:	4b14      	ldr	r3, [pc, #80]	; (80194d4 <_fflush_r+0x6c>)
 8019484:	429c      	cmp	r4, r3
 8019486:	d11b      	bne.n	80194c0 <_fflush_r+0x58>
 8019488:	686c      	ldr	r4, [r5, #4]
 801948a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801948e:	2b00      	cmp	r3, #0
 8019490:	d0ef      	beq.n	8019472 <_fflush_r+0xa>
 8019492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019494:	07d0      	lsls	r0, r2, #31
 8019496:	d404      	bmi.n	80194a2 <_fflush_r+0x3a>
 8019498:	0599      	lsls	r1, r3, #22
 801949a:	d402      	bmi.n	80194a2 <_fflush_r+0x3a>
 801949c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801949e:	f000 f927 	bl	80196f0 <__retarget_lock_acquire_recursive>
 80194a2:	4628      	mov	r0, r5
 80194a4:	4621      	mov	r1, r4
 80194a6:	f7ff ff59 	bl	801935c <__sflush_r>
 80194aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194ac:	07da      	lsls	r2, r3, #31
 80194ae:	4605      	mov	r5, r0
 80194b0:	d4e0      	bmi.n	8019474 <_fflush_r+0xc>
 80194b2:	89a3      	ldrh	r3, [r4, #12]
 80194b4:	059b      	lsls	r3, r3, #22
 80194b6:	d4dd      	bmi.n	8019474 <_fflush_r+0xc>
 80194b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194ba:	f000 f91a 	bl	80196f2 <__retarget_lock_release_recursive>
 80194be:	e7d9      	b.n	8019474 <_fflush_r+0xc>
 80194c0:	4b05      	ldr	r3, [pc, #20]	; (80194d8 <_fflush_r+0x70>)
 80194c2:	429c      	cmp	r4, r3
 80194c4:	d101      	bne.n	80194ca <_fflush_r+0x62>
 80194c6:	68ac      	ldr	r4, [r5, #8]
 80194c8:	e7df      	b.n	801948a <_fflush_r+0x22>
 80194ca:	4b04      	ldr	r3, [pc, #16]	; (80194dc <_fflush_r+0x74>)
 80194cc:	429c      	cmp	r4, r3
 80194ce:	bf08      	it	eq
 80194d0:	68ec      	ldreq	r4, [r5, #12]
 80194d2:	e7da      	b.n	801948a <_fflush_r+0x22>
 80194d4:	0801b1d4 	.word	0x0801b1d4
 80194d8:	0801b1f4 	.word	0x0801b1f4
 80194dc:	0801b1b4 	.word	0x0801b1b4

080194e0 <std>:
 80194e0:	2300      	movs	r3, #0
 80194e2:	b510      	push	{r4, lr}
 80194e4:	4604      	mov	r4, r0
 80194e6:	e9c0 3300 	strd	r3, r3, [r0]
 80194ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194ee:	6083      	str	r3, [r0, #8]
 80194f0:	8181      	strh	r1, [r0, #12]
 80194f2:	6643      	str	r3, [r0, #100]	; 0x64
 80194f4:	81c2      	strh	r2, [r0, #14]
 80194f6:	6183      	str	r3, [r0, #24]
 80194f8:	4619      	mov	r1, r3
 80194fa:	2208      	movs	r2, #8
 80194fc:	305c      	adds	r0, #92	; 0x5c
 80194fe:	f7fb ff75 	bl	80153ec <memset>
 8019502:	4b05      	ldr	r3, [pc, #20]	; (8019518 <std+0x38>)
 8019504:	6263      	str	r3, [r4, #36]	; 0x24
 8019506:	4b05      	ldr	r3, [pc, #20]	; (801951c <std+0x3c>)
 8019508:	62a3      	str	r3, [r4, #40]	; 0x28
 801950a:	4b05      	ldr	r3, [pc, #20]	; (8019520 <std+0x40>)
 801950c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801950e:	4b05      	ldr	r3, [pc, #20]	; (8019524 <std+0x44>)
 8019510:	6224      	str	r4, [r4, #32]
 8019512:	6323      	str	r3, [r4, #48]	; 0x30
 8019514:	bd10      	pop	{r4, pc}
 8019516:	bf00      	nop
 8019518:	0801626d 	.word	0x0801626d
 801951c:	0801628f 	.word	0x0801628f
 8019520:	080162c7 	.word	0x080162c7
 8019524:	080162eb 	.word	0x080162eb

08019528 <_cleanup_r>:
 8019528:	4901      	ldr	r1, [pc, #4]	; (8019530 <_cleanup_r+0x8>)
 801952a:	f000 b8c1 	b.w	80196b0 <_fwalk_reent>
 801952e:	bf00      	nop
 8019530:	08019469 	.word	0x08019469

08019534 <__sfmoreglue>:
 8019534:	b570      	push	{r4, r5, r6, lr}
 8019536:	1e4a      	subs	r2, r1, #1
 8019538:	2568      	movs	r5, #104	; 0x68
 801953a:	4355      	muls	r5, r2
 801953c:	460e      	mov	r6, r1
 801953e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019542:	f7ff fcdf 	bl	8018f04 <_malloc_r>
 8019546:	4604      	mov	r4, r0
 8019548:	b140      	cbz	r0, 801955c <__sfmoreglue+0x28>
 801954a:	2100      	movs	r1, #0
 801954c:	e9c0 1600 	strd	r1, r6, [r0]
 8019550:	300c      	adds	r0, #12
 8019552:	60a0      	str	r0, [r4, #8]
 8019554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019558:	f7fb ff48 	bl	80153ec <memset>
 801955c:	4620      	mov	r0, r4
 801955e:	bd70      	pop	{r4, r5, r6, pc}

08019560 <__sfp_lock_acquire>:
 8019560:	4801      	ldr	r0, [pc, #4]	; (8019568 <__sfp_lock_acquire+0x8>)
 8019562:	f000 b8c5 	b.w	80196f0 <__retarget_lock_acquire_recursive>
 8019566:	bf00      	nop
 8019568:	20008a88 	.word	0x20008a88

0801956c <__sfp_lock_release>:
 801956c:	4801      	ldr	r0, [pc, #4]	; (8019574 <__sfp_lock_release+0x8>)
 801956e:	f000 b8c0 	b.w	80196f2 <__retarget_lock_release_recursive>
 8019572:	bf00      	nop
 8019574:	20008a88 	.word	0x20008a88

08019578 <__sinit_lock_acquire>:
 8019578:	4801      	ldr	r0, [pc, #4]	; (8019580 <__sinit_lock_acquire+0x8>)
 801957a:	f000 b8b9 	b.w	80196f0 <__retarget_lock_acquire_recursive>
 801957e:	bf00      	nop
 8019580:	20008a83 	.word	0x20008a83

08019584 <__sinit_lock_release>:
 8019584:	4801      	ldr	r0, [pc, #4]	; (801958c <__sinit_lock_release+0x8>)
 8019586:	f000 b8b4 	b.w	80196f2 <__retarget_lock_release_recursive>
 801958a:	bf00      	nop
 801958c:	20008a83 	.word	0x20008a83

08019590 <__sinit>:
 8019590:	b510      	push	{r4, lr}
 8019592:	4604      	mov	r4, r0
 8019594:	f7ff fff0 	bl	8019578 <__sinit_lock_acquire>
 8019598:	69a3      	ldr	r3, [r4, #24]
 801959a:	b11b      	cbz	r3, 80195a4 <__sinit+0x14>
 801959c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195a0:	f7ff bff0 	b.w	8019584 <__sinit_lock_release>
 80195a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80195a8:	6523      	str	r3, [r4, #80]	; 0x50
 80195aa:	4b13      	ldr	r3, [pc, #76]	; (80195f8 <__sinit+0x68>)
 80195ac:	4a13      	ldr	r2, [pc, #76]	; (80195fc <__sinit+0x6c>)
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80195b2:	42a3      	cmp	r3, r4
 80195b4:	bf04      	itt	eq
 80195b6:	2301      	moveq	r3, #1
 80195b8:	61a3      	streq	r3, [r4, #24]
 80195ba:	4620      	mov	r0, r4
 80195bc:	f000 f820 	bl	8019600 <__sfp>
 80195c0:	6060      	str	r0, [r4, #4]
 80195c2:	4620      	mov	r0, r4
 80195c4:	f000 f81c 	bl	8019600 <__sfp>
 80195c8:	60a0      	str	r0, [r4, #8]
 80195ca:	4620      	mov	r0, r4
 80195cc:	f000 f818 	bl	8019600 <__sfp>
 80195d0:	2200      	movs	r2, #0
 80195d2:	60e0      	str	r0, [r4, #12]
 80195d4:	2104      	movs	r1, #4
 80195d6:	6860      	ldr	r0, [r4, #4]
 80195d8:	f7ff ff82 	bl	80194e0 <std>
 80195dc:	68a0      	ldr	r0, [r4, #8]
 80195de:	2201      	movs	r2, #1
 80195e0:	2109      	movs	r1, #9
 80195e2:	f7ff ff7d 	bl	80194e0 <std>
 80195e6:	68e0      	ldr	r0, [r4, #12]
 80195e8:	2202      	movs	r2, #2
 80195ea:	2112      	movs	r1, #18
 80195ec:	f7ff ff78 	bl	80194e0 <std>
 80195f0:	2301      	movs	r3, #1
 80195f2:	61a3      	str	r3, [r4, #24]
 80195f4:	e7d2      	b.n	801959c <__sinit+0xc>
 80195f6:	bf00      	nop
 80195f8:	0801ad5c 	.word	0x0801ad5c
 80195fc:	08019529 	.word	0x08019529

08019600 <__sfp>:
 8019600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019602:	4607      	mov	r7, r0
 8019604:	f7ff ffac 	bl	8019560 <__sfp_lock_acquire>
 8019608:	4b1e      	ldr	r3, [pc, #120]	; (8019684 <__sfp+0x84>)
 801960a:	681e      	ldr	r6, [r3, #0]
 801960c:	69b3      	ldr	r3, [r6, #24]
 801960e:	b913      	cbnz	r3, 8019616 <__sfp+0x16>
 8019610:	4630      	mov	r0, r6
 8019612:	f7ff ffbd 	bl	8019590 <__sinit>
 8019616:	3648      	adds	r6, #72	; 0x48
 8019618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801961c:	3b01      	subs	r3, #1
 801961e:	d503      	bpl.n	8019628 <__sfp+0x28>
 8019620:	6833      	ldr	r3, [r6, #0]
 8019622:	b30b      	cbz	r3, 8019668 <__sfp+0x68>
 8019624:	6836      	ldr	r6, [r6, #0]
 8019626:	e7f7      	b.n	8019618 <__sfp+0x18>
 8019628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801962c:	b9d5      	cbnz	r5, 8019664 <__sfp+0x64>
 801962e:	4b16      	ldr	r3, [pc, #88]	; (8019688 <__sfp+0x88>)
 8019630:	60e3      	str	r3, [r4, #12]
 8019632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019636:	6665      	str	r5, [r4, #100]	; 0x64
 8019638:	f000 f859 	bl	80196ee <__retarget_lock_init_recursive>
 801963c:	f7ff ff96 	bl	801956c <__sfp_lock_release>
 8019640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019648:	6025      	str	r5, [r4, #0]
 801964a:	61a5      	str	r5, [r4, #24]
 801964c:	2208      	movs	r2, #8
 801964e:	4629      	mov	r1, r5
 8019650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019654:	f7fb feca 	bl	80153ec <memset>
 8019658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801965c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019660:	4620      	mov	r0, r4
 8019662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019664:	3468      	adds	r4, #104	; 0x68
 8019666:	e7d9      	b.n	801961c <__sfp+0x1c>
 8019668:	2104      	movs	r1, #4
 801966a:	4638      	mov	r0, r7
 801966c:	f7ff ff62 	bl	8019534 <__sfmoreglue>
 8019670:	4604      	mov	r4, r0
 8019672:	6030      	str	r0, [r6, #0]
 8019674:	2800      	cmp	r0, #0
 8019676:	d1d5      	bne.n	8019624 <__sfp+0x24>
 8019678:	f7ff ff78 	bl	801956c <__sfp_lock_release>
 801967c:	230c      	movs	r3, #12
 801967e:	603b      	str	r3, [r7, #0]
 8019680:	e7ee      	b.n	8019660 <__sfp+0x60>
 8019682:	bf00      	nop
 8019684:	0801ad5c 	.word	0x0801ad5c
 8019688:	ffff0001 	.word	0xffff0001

0801968c <fiprintf>:
 801968c:	b40e      	push	{r1, r2, r3}
 801968e:	b503      	push	{r0, r1, lr}
 8019690:	4601      	mov	r1, r0
 8019692:	ab03      	add	r3, sp, #12
 8019694:	4805      	ldr	r0, [pc, #20]	; (80196ac <fiprintf+0x20>)
 8019696:	f853 2b04 	ldr.w	r2, [r3], #4
 801969a:	6800      	ldr	r0, [r0, #0]
 801969c:	9301      	str	r3, [sp, #4]
 801969e:	f000 f89f 	bl	80197e0 <_vfiprintf_r>
 80196a2:	b002      	add	sp, #8
 80196a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80196a8:	b003      	add	sp, #12
 80196aa:	4770      	bx	lr
 80196ac:	2000034c 	.word	0x2000034c

080196b0 <_fwalk_reent>:
 80196b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196b4:	4606      	mov	r6, r0
 80196b6:	4688      	mov	r8, r1
 80196b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80196bc:	2700      	movs	r7, #0
 80196be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80196c2:	f1b9 0901 	subs.w	r9, r9, #1
 80196c6:	d505      	bpl.n	80196d4 <_fwalk_reent+0x24>
 80196c8:	6824      	ldr	r4, [r4, #0]
 80196ca:	2c00      	cmp	r4, #0
 80196cc:	d1f7      	bne.n	80196be <_fwalk_reent+0xe>
 80196ce:	4638      	mov	r0, r7
 80196d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196d4:	89ab      	ldrh	r3, [r5, #12]
 80196d6:	2b01      	cmp	r3, #1
 80196d8:	d907      	bls.n	80196ea <_fwalk_reent+0x3a>
 80196da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196de:	3301      	adds	r3, #1
 80196e0:	d003      	beq.n	80196ea <_fwalk_reent+0x3a>
 80196e2:	4629      	mov	r1, r5
 80196e4:	4630      	mov	r0, r6
 80196e6:	47c0      	blx	r8
 80196e8:	4307      	orrs	r7, r0
 80196ea:	3568      	adds	r5, #104	; 0x68
 80196ec:	e7e9      	b.n	80196c2 <_fwalk_reent+0x12>

080196ee <__retarget_lock_init_recursive>:
 80196ee:	4770      	bx	lr

080196f0 <__retarget_lock_acquire_recursive>:
 80196f0:	4770      	bx	lr

080196f2 <__retarget_lock_release_recursive>:
 80196f2:	4770      	bx	lr

080196f4 <memmove>:
 80196f4:	4288      	cmp	r0, r1
 80196f6:	b510      	push	{r4, lr}
 80196f8:	eb01 0402 	add.w	r4, r1, r2
 80196fc:	d902      	bls.n	8019704 <memmove+0x10>
 80196fe:	4284      	cmp	r4, r0
 8019700:	4623      	mov	r3, r4
 8019702:	d807      	bhi.n	8019714 <memmove+0x20>
 8019704:	1e43      	subs	r3, r0, #1
 8019706:	42a1      	cmp	r1, r4
 8019708:	d008      	beq.n	801971c <memmove+0x28>
 801970a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801970e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019712:	e7f8      	b.n	8019706 <memmove+0x12>
 8019714:	4402      	add	r2, r0
 8019716:	4601      	mov	r1, r0
 8019718:	428a      	cmp	r2, r1
 801971a:	d100      	bne.n	801971e <memmove+0x2a>
 801971c:	bd10      	pop	{r4, pc}
 801971e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019726:	e7f7      	b.n	8019718 <memmove+0x24>

08019728 <__malloc_lock>:
 8019728:	4801      	ldr	r0, [pc, #4]	; (8019730 <__malloc_lock+0x8>)
 801972a:	f7ff bfe1 	b.w	80196f0 <__retarget_lock_acquire_recursive>
 801972e:	bf00      	nop
 8019730:	20008a84 	.word	0x20008a84

08019734 <__malloc_unlock>:
 8019734:	4801      	ldr	r0, [pc, #4]	; (801973c <__malloc_unlock+0x8>)
 8019736:	f7ff bfdc 	b.w	80196f2 <__retarget_lock_release_recursive>
 801973a:	bf00      	nop
 801973c:	20008a84 	.word	0x20008a84

08019740 <_realloc_r>:
 8019740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019742:	4607      	mov	r7, r0
 8019744:	4614      	mov	r4, r2
 8019746:	460e      	mov	r6, r1
 8019748:	b921      	cbnz	r1, 8019754 <_realloc_r+0x14>
 801974a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801974e:	4611      	mov	r1, r2
 8019750:	f7ff bbd8 	b.w	8018f04 <_malloc_r>
 8019754:	b922      	cbnz	r2, 8019760 <_realloc_r+0x20>
 8019756:	f7ff fb85 	bl	8018e64 <_free_r>
 801975a:	4625      	mov	r5, r4
 801975c:	4628      	mov	r0, r5
 801975e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019760:	f000 fa9a 	bl	8019c98 <_malloc_usable_size_r>
 8019764:	42a0      	cmp	r0, r4
 8019766:	d20f      	bcs.n	8019788 <_realloc_r+0x48>
 8019768:	4621      	mov	r1, r4
 801976a:	4638      	mov	r0, r7
 801976c:	f7ff fbca 	bl	8018f04 <_malloc_r>
 8019770:	4605      	mov	r5, r0
 8019772:	2800      	cmp	r0, #0
 8019774:	d0f2      	beq.n	801975c <_realloc_r+0x1c>
 8019776:	4631      	mov	r1, r6
 8019778:	4622      	mov	r2, r4
 801977a:	f7fb fe29 	bl	80153d0 <memcpy>
 801977e:	4631      	mov	r1, r6
 8019780:	4638      	mov	r0, r7
 8019782:	f7ff fb6f 	bl	8018e64 <_free_r>
 8019786:	e7e9      	b.n	801975c <_realloc_r+0x1c>
 8019788:	4635      	mov	r5, r6
 801978a:	e7e7      	b.n	801975c <_realloc_r+0x1c>

0801978c <__sfputc_r>:
 801978c:	6893      	ldr	r3, [r2, #8]
 801978e:	3b01      	subs	r3, #1
 8019790:	2b00      	cmp	r3, #0
 8019792:	b410      	push	{r4}
 8019794:	6093      	str	r3, [r2, #8]
 8019796:	da08      	bge.n	80197aa <__sfputc_r+0x1e>
 8019798:	6994      	ldr	r4, [r2, #24]
 801979a:	42a3      	cmp	r3, r4
 801979c:	db01      	blt.n	80197a2 <__sfputc_r+0x16>
 801979e:	290a      	cmp	r1, #10
 80197a0:	d103      	bne.n	80197aa <__sfputc_r+0x1e>
 80197a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197a6:	f000 b94b 	b.w	8019a40 <__swbuf_r>
 80197aa:	6813      	ldr	r3, [r2, #0]
 80197ac:	1c58      	adds	r0, r3, #1
 80197ae:	6010      	str	r0, [r2, #0]
 80197b0:	7019      	strb	r1, [r3, #0]
 80197b2:	4608      	mov	r0, r1
 80197b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80197b8:	4770      	bx	lr

080197ba <__sfputs_r>:
 80197ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197bc:	4606      	mov	r6, r0
 80197be:	460f      	mov	r7, r1
 80197c0:	4614      	mov	r4, r2
 80197c2:	18d5      	adds	r5, r2, r3
 80197c4:	42ac      	cmp	r4, r5
 80197c6:	d101      	bne.n	80197cc <__sfputs_r+0x12>
 80197c8:	2000      	movs	r0, #0
 80197ca:	e007      	b.n	80197dc <__sfputs_r+0x22>
 80197cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197d0:	463a      	mov	r2, r7
 80197d2:	4630      	mov	r0, r6
 80197d4:	f7ff ffda 	bl	801978c <__sfputc_r>
 80197d8:	1c43      	adds	r3, r0, #1
 80197da:	d1f3      	bne.n	80197c4 <__sfputs_r+0xa>
 80197dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197e0 <_vfiprintf_r>:
 80197e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e4:	460d      	mov	r5, r1
 80197e6:	b09d      	sub	sp, #116	; 0x74
 80197e8:	4614      	mov	r4, r2
 80197ea:	4698      	mov	r8, r3
 80197ec:	4606      	mov	r6, r0
 80197ee:	b118      	cbz	r0, 80197f8 <_vfiprintf_r+0x18>
 80197f0:	6983      	ldr	r3, [r0, #24]
 80197f2:	b90b      	cbnz	r3, 80197f8 <_vfiprintf_r+0x18>
 80197f4:	f7ff fecc 	bl	8019590 <__sinit>
 80197f8:	4b89      	ldr	r3, [pc, #548]	; (8019a20 <_vfiprintf_r+0x240>)
 80197fa:	429d      	cmp	r5, r3
 80197fc:	d11b      	bne.n	8019836 <_vfiprintf_r+0x56>
 80197fe:	6875      	ldr	r5, [r6, #4]
 8019800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019802:	07d9      	lsls	r1, r3, #31
 8019804:	d405      	bmi.n	8019812 <_vfiprintf_r+0x32>
 8019806:	89ab      	ldrh	r3, [r5, #12]
 8019808:	059a      	lsls	r2, r3, #22
 801980a:	d402      	bmi.n	8019812 <_vfiprintf_r+0x32>
 801980c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801980e:	f7ff ff6f 	bl	80196f0 <__retarget_lock_acquire_recursive>
 8019812:	89ab      	ldrh	r3, [r5, #12]
 8019814:	071b      	lsls	r3, r3, #28
 8019816:	d501      	bpl.n	801981c <_vfiprintf_r+0x3c>
 8019818:	692b      	ldr	r3, [r5, #16]
 801981a:	b9eb      	cbnz	r3, 8019858 <_vfiprintf_r+0x78>
 801981c:	4629      	mov	r1, r5
 801981e:	4630      	mov	r0, r6
 8019820:	f000 f960 	bl	8019ae4 <__swsetup_r>
 8019824:	b1c0      	cbz	r0, 8019858 <_vfiprintf_r+0x78>
 8019826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019828:	07dc      	lsls	r4, r3, #31
 801982a:	d50e      	bpl.n	801984a <_vfiprintf_r+0x6a>
 801982c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019830:	b01d      	add	sp, #116	; 0x74
 8019832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019836:	4b7b      	ldr	r3, [pc, #492]	; (8019a24 <_vfiprintf_r+0x244>)
 8019838:	429d      	cmp	r5, r3
 801983a:	d101      	bne.n	8019840 <_vfiprintf_r+0x60>
 801983c:	68b5      	ldr	r5, [r6, #8]
 801983e:	e7df      	b.n	8019800 <_vfiprintf_r+0x20>
 8019840:	4b79      	ldr	r3, [pc, #484]	; (8019a28 <_vfiprintf_r+0x248>)
 8019842:	429d      	cmp	r5, r3
 8019844:	bf08      	it	eq
 8019846:	68f5      	ldreq	r5, [r6, #12]
 8019848:	e7da      	b.n	8019800 <_vfiprintf_r+0x20>
 801984a:	89ab      	ldrh	r3, [r5, #12]
 801984c:	0598      	lsls	r0, r3, #22
 801984e:	d4ed      	bmi.n	801982c <_vfiprintf_r+0x4c>
 8019850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019852:	f7ff ff4e 	bl	80196f2 <__retarget_lock_release_recursive>
 8019856:	e7e9      	b.n	801982c <_vfiprintf_r+0x4c>
 8019858:	2300      	movs	r3, #0
 801985a:	9309      	str	r3, [sp, #36]	; 0x24
 801985c:	2320      	movs	r3, #32
 801985e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019862:	f8cd 800c 	str.w	r8, [sp, #12]
 8019866:	2330      	movs	r3, #48	; 0x30
 8019868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019a2c <_vfiprintf_r+0x24c>
 801986c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019870:	f04f 0901 	mov.w	r9, #1
 8019874:	4623      	mov	r3, r4
 8019876:	469a      	mov	sl, r3
 8019878:	f813 2b01 	ldrb.w	r2, [r3], #1
 801987c:	b10a      	cbz	r2, 8019882 <_vfiprintf_r+0xa2>
 801987e:	2a25      	cmp	r2, #37	; 0x25
 8019880:	d1f9      	bne.n	8019876 <_vfiprintf_r+0x96>
 8019882:	ebba 0b04 	subs.w	fp, sl, r4
 8019886:	d00b      	beq.n	80198a0 <_vfiprintf_r+0xc0>
 8019888:	465b      	mov	r3, fp
 801988a:	4622      	mov	r2, r4
 801988c:	4629      	mov	r1, r5
 801988e:	4630      	mov	r0, r6
 8019890:	f7ff ff93 	bl	80197ba <__sfputs_r>
 8019894:	3001      	adds	r0, #1
 8019896:	f000 80aa 	beq.w	80199ee <_vfiprintf_r+0x20e>
 801989a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801989c:	445a      	add	r2, fp
 801989e:	9209      	str	r2, [sp, #36]	; 0x24
 80198a0:	f89a 3000 	ldrb.w	r3, [sl]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	f000 80a2 	beq.w	80199ee <_vfiprintf_r+0x20e>
 80198aa:	2300      	movs	r3, #0
 80198ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80198b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80198b4:	f10a 0a01 	add.w	sl, sl, #1
 80198b8:	9304      	str	r3, [sp, #16]
 80198ba:	9307      	str	r3, [sp, #28]
 80198bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80198c0:	931a      	str	r3, [sp, #104]	; 0x68
 80198c2:	4654      	mov	r4, sl
 80198c4:	2205      	movs	r2, #5
 80198c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198ca:	4858      	ldr	r0, [pc, #352]	; (8019a2c <_vfiprintf_r+0x24c>)
 80198cc:	f7e6 fc88 	bl	80001e0 <memchr>
 80198d0:	9a04      	ldr	r2, [sp, #16]
 80198d2:	b9d8      	cbnz	r0, 801990c <_vfiprintf_r+0x12c>
 80198d4:	06d1      	lsls	r1, r2, #27
 80198d6:	bf44      	itt	mi
 80198d8:	2320      	movmi	r3, #32
 80198da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198de:	0713      	lsls	r3, r2, #28
 80198e0:	bf44      	itt	mi
 80198e2:	232b      	movmi	r3, #43	; 0x2b
 80198e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198e8:	f89a 3000 	ldrb.w	r3, [sl]
 80198ec:	2b2a      	cmp	r3, #42	; 0x2a
 80198ee:	d015      	beq.n	801991c <_vfiprintf_r+0x13c>
 80198f0:	9a07      	ldr	r2, [sp, #28]
 80198f2:	4654      	mov	r4, sl
 80198f4:	2000      	movs	r0, #0
 80198f6:	f04f 0c0a 	mov.w	ip, #10
 80198fa:	4621      	mov	r1, r4
 80198fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019900:	3b30      	subs	r3, #48	; 0x30
 8019902:	2b09      	cmp	r3, #9
 8019904:	d94e      	bls.n	80199a4 <_vfiprintf_r+0x1c4>
 8019906:	b1b0      	cbz	r0, 8019936 <_vfiprintf_r+0x156>
 8019908:	9207      	str	r2, [sp, #28]
 801990a:	e014      	b.n	8019936 <_vfiprintf_r+0x156>
 801990c:	eba0 0308 	sub.w	r3, r0, r8
 8019910:	fa09 f303 	lsl.w	r3, r9, r3
 8019914:	4313      	orrs	r3, r2
 8019916:	9304      	str	r3, [sp, #16]
 8019918:	46a2      	mov	sl, r4
 801991a:	e7d2      	b.n	80198c2 <_vfiprintf_r+0xe2>
 801991c:	9b03      	ldr	r3, [sp, #12]
 801991e:	1d19      	adds	r1, r3, #4
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	9103      	str	r1, [sp, #12]
 8019924:	2b00      	cmp	r3, #0
 8019926:	bfbb      	ittet	lt
 8019928:	425b      	neglt	r3, r3
 801992a:	f042 0202 	orrlt.w	r2, r2, #2
 801992e:	9307      	strge	r3, [sp, #28]
 8019930:	9307      	strlt	r3, [sp, #28]
 8019932:	bfb8      	it	lt
 8019934:	9204      	strlt	r2, [sp, #16]
 8019936:	7823      	ldrb	r3, [r4, #0]
 8019938:	2b2e      	cmp	r3, #46	; 0x2e
 801993a:	d10c      	bne.n	8019956 <_vfiprintf_r+0x176>
 801993c:	7863      	ldrb	r3, [r4, #1]
 801993e:	2b2a      	cmp	r3, #42	; 0x2a
 8019940:	d135      	bne.n	80199ae <_vfiprintf_r+0x1ce>
 8019942:	9b03      	ldr	r3, [sp, #12]
 8019944:	1d1a      	adds	r2, r3, #4
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	9203      	str	r2, [sp, #12]
 801994a:	2b00      	cmp	r3, #0
 801994c:	bfb8      	it	lt
 801994e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019952:	3402      	adds	r4, #2
 8019954:	9305      	str	r3, [sp, #20]
 8019956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019a3c <_vfiprintf_r+0x25c>
 801995a:	7821      	ldrb	r1, [r4, #0]
 801995c:	2203      	movs	r2, #3
 801995e:	4650      	mov	r0, sl
 8019960:	f7e6 fc3e 	bl	80001e0 <memchr>
 8019964:	b140      	cbz	r0, 8019978 <_vfiprintf_r+0x198>
 8019966:	2340      	movs	r3, #64	; 0x40
 8019968:	eba0 000a 	sub.w	r0, r0, sl
 801996c:	fa03 f000 	lsl.w	r0, r3, r0
 8019970:	9b04      	ldr	r3, [sp, #16]
 8019972:	4303      	orrs	r3, r0
 8019974:	3401      	adds	r4, #1
 8019976:	9304      	str	r3, [sp, #16]
 8019978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801997c:	482c      	ldr	r0, [pc, #176]	; (8019a30 <_vfiprintf_r+0x250>)
 801997e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019982:	2206      	movs	r2, #6
 8019984:	f7e6 fc2c 	bl	80001e0 <memchr>
 8019988:	2800      	cmp	r0, #0
 801998a:	d03f      	beq.n	8019a0c <_vfiprintf_r+0x22c>
 801998c:	4b29      	ldr	r3, [pc, #164]	; (8019a34 <_vfiprintf_r+0x254>)
 801998e:	bb1b      	cbnz	r3, 80199d8 <_vfiprintf_r+0x1f8>
 8019990:	9b03      	ldr	r3, [sp, #12]
 8019992:	3307      	adds	r3, #7
 8019994:	f023 0307 	bic.w	r3, r3, #7
 8019998:	3308      	adds	r3, #8
 801999a:	9303      	str	r3, [sp, #12]
 801999c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801999e:	443b      	add	r3, r7
 80199a0:	9309      	str	r3, [sp, #36]	; 0x24
 80199a2:	e767      	b.n	8019874 <_vfiprintf_r+0x94>
 80199a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80199a8:	460c      	mov	r4, r1
 80199aa:	2001      	movs	r0, #1
 80199ac:	e7a5      	b.n	80198fa <_vfiprintf_r+0x11a>
 80199ae:	2300      	movs	r3, #0
 80199b0:	3401      	adds	r4, #1
 80199b2:	9305      	str	r3, [sp, #20]
 80199b4:	4619      	mov	r1, r3
 80199b6:	f04f 0c0a 	mov.w	ip, #10
 80199ba:	4620      	mov	r0, r4
 80199bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80199c0:	3a30      	subs	r2, #48	; 0x30
 80199c2:	2a09      	cmp	r2, #9
 80199c4:	d903      	bls.n	80199ce <_vfiprintf_r+0x1ee>
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d0c5      	beq.n	8019956 <_vfiprintf_r+0x176>
 80199ca:	9105      	str	r1, [sp, #20]
 80199cc:	e7c3      	b.n	8019956 <_vfiprintf_r+0x176>
 80199ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80199d2:	4604      	mov	r4, r0
 80199d4:	2301      	movs	r3, #1
 80199d6:	e7f0      	b.n	80199ba <_vfiprintf_r+0x1da>
 80199d8:	ab03      	add	r3, sp, #12
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	462a      	mov	r2, r5
 80199de:	4b16      	ldr	r3, [pc, #88]	; (8019a38 <_vfiprintf_r+0x258>)
 80199e0:	a904      	add	r1, sp, #16
 80199e2:	4630      	mov	r0, r6
 80199e4:	f7fb fdaa 	bl	801553c <_printf_float>
 80199e8:	4607      	mov	r7, r0
 80199ea:	1c78      	adds	r0, r7, #1
 80199ec:	d1d6      	bne.n	801999c <_vfiprintf_r+0x1bc>
 80199ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199f0:	07d9      	lsls	r1, r3, #31
 80199f2:	d405      	bmi.n	8019a00 <_vfiprintf_r+0x220>
 80199f4:	89ab      	ldrh	r3, [r5, #12]
 80199f6:	059a      	lsls	r2, r3, #22
 80199f8:	d402      	bmi.n	8019a00 <_vfiprintf_r+0x220>
 80199fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199fc:	f7ff fe79 	bl	80196f2 <__retarget_lock_release_recursive>
 8019a00:	89ab      	ldrh	r3, [r5, #12]
 8019a02:	065b      	lsls	r3, r3, #25
 8019a04:	f53f af12 	bmi.w	801982c <_vfiprintf_r+0x4c>
 8019a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a0a:	e711      	b.n	8019830 <_vfiprintf_r+0x50>
 8019a0c:	ab03      	add	r3, sp, #12
 8019a0e:	9300      	str	r3, [sp, #0]
 8019a10:	462a      	mov	r2, r5
 8019a12:	4b09      	ldr	r3, [pc, #36]	; (8019a38 <_vfiprintf_r+0x258>)
 8019a14:	a904      	add	r1, sp, #16
 8019a16:	4630      	mov	r0, r6
 8019a18:	f7fc f834 	bl	8015a84 <_printf_i>
 8019a1c:	e7e4      	b.n	80199e8 <_vfiprintf_r+0x208>
 8019a1e:	bf00      	nop
 8019a20:	0801b1d4 	.word	0x0801b1d4
 8019a24:	0801b1f4 	.word	0x0801b1f4
 8019a28:	0801b1b4 	.word	0x0801b1b4
 8019a2c:	0801b164 	.word	0x0801b164
 8019a30:	0801b16e 	.word	0x0801b16e
 8019a34:	0801553d 	.word	0x0801553d
 8019a38:	080197bb 	.word	0x080197bb
 8019a3c:	0801b16a 	.word	0x0801b16a

08019a40 <__swbuf_r>:
 8019a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a42:	460e      	mov	r6, r1
 8019a44:	4614      	mov	r4, r2
 8019a46:	4605      	mov	r5, r0
 8019a48:	b118      	cbz	r0, 8019a52 <__swbuf_r+0x12>
 8019a4a:	6983      	ldr	r3, [r0, #24]
 8019a4c:	b90b      	cbnz	r3, 8019a52 <__swbuf_r+0x12>
 8019a4e:	f7ff fd9f 	bl	8019590 <__sinit>
 8019a52:	4b21      	ldr	r3, [pc, #132]	; (8019ad8 <__swbuf_r+0x98>)
 8019a54:	429c      	cmp	r4, r3
 8019a56:	d12b      	bne.n	8019ab0 <__swbuf_r+0x70>
 8019a58:	686c      	ldr	r4, [r5, #4]
 8019a5a:	69a3      	ldr	r3, [r4, #24]
 8019a5c:	60a3      	str	r3, [r4, #8]
 8019a5e:	89a3      	ldrh	r3, [r4, #12]
 8019a60:	071a      	lsls	r2, r3, #28
 8019a62:	d52f      	bpl.n	8019ac4 <__swbuf_r+0x84>
 8019a64:	6923      	ldr	r3, [r4, #16]
 8019a66:	b36b      	cbz	r3, 8019ac4 <__swbuf_r+0x84>
 8019a68:	6923      	ldr	r3, [r4, #16]
 8019a6a:	6820      	ldr	r0, [r4, #0]
 8019a6c:	1ac0      	subs	r0, r0, r3
 8019a6e:	6963      	ldr	r3, [r4, #20]
 8019a70:	b2f6      	uxtb	r6, r6
 8019a72:	4283      	cmp	r3, r0
 8019a74:	4637      	mov	r7, r6
 8019a76:	dc04      	bgt.n	8019a82 <__swbuf_r+0x42>
 8019a78:	4621      	mov	r1, r4
 8019a7a:	4628      	mov	r0, r5
 8019a7c:	f7ff fcf4 	bl	8019468 <_fflush_r>
 8019a80:	bb30      	cbnz	r0, 8019ad0 <__swbuf_r+0x90>
 8019a82:	68a3      	ldr	r3, [r4, #8]
 8019a84:	3b01      	subs	r3, #1
 8019a86:	60a3      	str	r3, [r4, #8]
 8019a88:	6823      	ldr	r3, [r4, #0]
 8019a8a:	1c5a      	adds	r2, r3, #1
 8019a8c:	6022      	str	r2, [r4, #0]
 8019a8e:	701e      	strb	r6, [r3, #0]
 8019a90:	6963      	ldr	r3, [r4, #20]
 8019a92:	3001      	adds	r0, #1
 8019a94:	4283      	cmp	r3, r0
 8019a96:	d004      	beq.n	8019aa2 <__swbuf_r+0x62>
 8019a98:	89a3      	ldrh	r3, [r4, #12]
 8019a9a:	07db      	lsls	r3, r3, #31
 8019a9c:	d506      	bpl.n	8019aac <__swbuf_r+0x6c>
 8019a9e:	2e0a      	cmp	r6, #10
 8019aa0:	d104      	bne.n	8019aac <__swbuf_r+0x6c>
 8019aa2:	4621      	mov	r1, r4
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	f7ff fcdf 	bl	8019468 <_fflush_r>
 8019aaa:	b988      	cbnz	r0, 8019ad0 <__swbuf_r+0x90>
 8019aac:	4638      	mov	r0, r7
 8019aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ab0:	4b0a      	ldr	r3, [pc, #40]	; (8019adc <__swbuf_r+0x9c>)
 8019ab2:	429c      	cmp	r4, r3
 8019ab4:	d101      	bne.n	8019aba <__swbuf_r+0x7a>
 8019ab6:	68ac      	ldr	r4, [r5, #8]
 8019ab8:	e7cf      	b.n	8019a5a <__swbuf_r+0x1a>
 8019aba:	4b09      	ldr	r3, [pc, #36]	; (8019ae0 <__swbuf_r+0xa0>)
 8019abc:	429c      	cmp	r4, r3
 8019abe:	bf08      	it	eq
 8019ac0:	68ec      	ldreq	r4, [r5, #12]
 8019ac2:	e7ca      	b.n	8019a5a <__swbuf_r+0x1a>
 8019ac4:	4621      	mov	r1, r4
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f000 f80c 	bl	8019ae4 <__swsetup_r>
 8019acc:	2800      	cmp	r0, #0
 8019ace:	d0cb      	beq.n	8019a68 <__swbuf_r+0x28>
 8019ad0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019ad4:	e7ea      	b.n	8019aac <__swbuf_r+0x6c>
 8019ad6:	bf00      	nop
 8019ad8:	0801b1d4 	.word	0x0801b1d4
 8019adc:	0801b1f4 	.word	0x0801b1f4
 8019ae0:	0801b1b4 	.word	0x0801b1b4

08019ae4 <__swsetup_r>:
 8019ae4:	4b32      	ldr	r3, [pc, #200]	; (8019bb0 <__swsetup_r+0xcc>)
 8019ae6:	b570      	push	{r4, r5, r6, lr}
 8019ae8:	681d      	ldr	r5, [r3, #0]
 8019aea:	4606      	mov	r6, r0
 8019aec:	460c      	mov	r4, r1
 8019aee:	b125      	cbz	r5, 8019afa <__swsetup_r+0x16>
 8019af0:	69ab      	ldr	r3, [r5, #24]
 8019af2:	b913      	cbnz	r3, 8019afa <__swsetup_r+0x16>
 8019af4:	4628      	mov	r0, r5
 8019af6:	f7ff fd4b 	bl	8019590 <__sinit>
 8019afa:	4b2e      	ldr	r3, [pc, #184]	; (8019bb4 <__swsetup_r+0xd0>)
 8019afc:	429c      	cmp	r4, r3
 8019afe:	d10f      	bne.n	8019b20 <__swsetup_r+0x3c>
 8019b00:	686c      	ldr	r4, [r5, #4]
 8019b02:	89a3      	ldrh	r3, [r4, #12]
 8019b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b08:	0719      	lsls	r1, r3, #28
 8019b0a:	d42c      	bmi.n	8019b66 <__swsetup_r+0x82>
 8019b0c:	06dd      	lsls	r5, r3, #27
 8019b0e:	d411      	bmi.n	8019b34 <__swsetup_r+0x50>
 8019b10:	2309      	movs	r3, #9
 8019b12:	6033      	str	r3, [r6, #0]
 8019b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b18:	81a3      	strh	r3, [r4, #12]
 8019b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b1e:	e03e      	b.n	8019b9e <__swsetup_r+0xba>
 8019b20:	4b25      	ldr	r3, [pc, #148]	; (8019bb8 <__swsetup_r+0xd4>)
 8019b22:	429c      	cmp	r4, r3
 8019b24:	d101      	bne.n	8019b2a <__swsetup_r+0x46>
 8019b26:	68ac      	ldr	r4, [r5, #8]
 8019b28:	e7eb      	b.n	8019b02 <__swsetup_r+0x1e>
 8019b2a:	4b24      	ldr	r3, [pc, #144]	; (8019bbc <__swsetup_r+0xd8>)
 8019b2c:	429c      	cmp	r4, r3
 8019b2e:	bf08      	it	eq
 8019b30:	68ec      	ldreq	r4, [r5, #12]
 8019b32:	e7e6      	b.n	8019b02 <__swsetup_r+0x1e>
 8019b34:	0758      	lsls	r0, r3, #29
 8019b36:	d512      	bpl.n	8019b5e <__swsetup_r+0x7a>
 8019b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b3a:	b141      	cbz	r1, 8019b4e <__swsetup_r+0x6a>
 8019b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b40:	4299      	cmp	r1, r3
 8019b42:	d002      	beq.n	8019b4a <__swsetup_r+0x66>
 8019b44:	4630      	mov	r0, r6
 8019b46:	f7ff f98d 	bl	8018e64 <_free_r>
 8019b4a:	2300      	movs	r3, #0
 8019b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8019b4e:	89a3      	ldrh	r3, [r4, #12]
 8019b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b54:	81a3      	strh	r3, [r4, #12]
 8019b56:	2300      	movs	r3, #0
 8019b58:	6063      	str	r3, [r4, #4]
 8019b5a:	6923      	ldr	r3, [r4, #16]
 8019b5c:	6023      	str	r3, [r4, #0]
 8019b5e:	89a3      	ldrh	r3, [r4, #12]
 8019b60:	f043 0308 	orr.w	r3, r3, #8
 8019b64:	81a3      	strh	r3, [r4, #12]
 8019b66:	6923      	ldr	r3, [r4, #16]
 8019b68:	b94b      	cbnz	r3, 8019b7e <__swsetup_r+0x9a>
 8019b6a:	89a3      	ldrh	r3, [r4, #12]
 8019b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b74:	d003      	beq.n	8019b7e <__swsetup_r+0x9a>
 8019b76:	4621      	mov	r1, r4
 8019b78:	4630      	mov	r0, r6
 8019b7a:	f000 f84d 	bl	8019c18 <__smakebuf_r>
 8019b7e:	89a0      	ldrh	r0, [r4, #12]
 8019b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b84:	f010 0301 	ands.w	r3, r0, #1
 8019b88:	d00a      	beq.n	8019ba0 <__swsetup_r+0xbc>
 8019b8a:	2300      	movs	r3, #0
 8019b8c:	60a3      	str	r3, [r4, #8]
 8019b8e:	6963      	ldr	r3, [r4, #20]
 8019b90:	425b      	negs	r3, r3
 8019b92:	61a3      	str	r3, [r4, #24]
 8019b94:	6923      	ldr	r3, [r4, #16]
 8019b96:	b943      	cbnz	r3, 8019baa <__swsetup_r+0xc6>
 8019b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b9c:	d1ba      	bne.n	8019b14 <__swsetup_r+0x30>
 8019b9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ba0:	0781      	lsls	r1, r0, #30
 8019ba2:	bf58      	it	pl
 8019ba4:	6963      	ldrpl	r3, [r4, #20]
 8019ba6:	60a3      	str	r3, [r4, #8]
 8019ba8:	e7f4      	b.n	8019b94 <__swsetup_r+0xb0>
 8019baa:	2000      	movs	r0, #0
 8019bac:	e7f7      	b.n	8019b9e <__swsetup_r+0xba>
 8019bae:	bf00      	nop
 8019bb0:	2000034c 	.word	0x2000034c
 8019bb4:	0801b1d4 	.word	0x0801b1d4
 8019bb8:	0801b1f4 	.word	0x0801b1f4
 8019bbc:	0801b1b4 	.word	0x0801b1b4

08019bc0 <abort>:
 8019bc0:	b508      	push	{r3, lr}
 8019bc2:	2006      	movs	r0, #6
 8019bc4:	f000 f898 	bl	8019cf8 <raise>
 8019bc8:	2001      	movs	r0, #1
 8019bca:	f7f0 fc3b 	bl	800a444 <_exit>

08019bce <__swhatbuf_r>:
 8019bce:	b570      	push	{r4, r5, r6, lr}
 8019bd0:	460e      	mov	r6, r1
 8019bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bd6:	2900      	cmp	r1, #0
 8019bd8:	b096      	sub	sp, #88	; 0x58
 8019bda:	4614      	mov	r4, r2
 8019bdc:	461d      	mov	r5, r3
 8019bde:	da07      	bge.n	8019bf0 <__swhatbuf_r+0x22>
 8019be0:	2300      	movs	r3, #0
 8019be2:	602b      	str	r3, [r5, #0]
 8019be4:	89b3      	ldrh	r3, [r6, #12]
 8019be6:	061a      	lsls	r2, r3, #24
 8019be8:	d410      	bmi.n	8019c0c <__swhatbuf_r+0x3e>
 8019bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bee:	e00e      	b.n	8019c0e <__swhatbuf_r+0x40>
 8019bf0:	466a      	mov	r2, sp
 8019bf2:	f000 f89d 	bl	8019d30 <_fstat_r>
 8019bf6:	2800      	cmp	r0, #0
 8019bf8:	dbf2      	blt.n	8019be0 <__swhatbuf_r+0x12>
 8019bfa:	9a01      	ldr	r2, [sp, #4]
 8019bfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c04:	425a      	negs	r2, r3
 8019c06:	415a      	adcs	r2, r3
 8019c08:	602a      	str	r2, [r5, #0]
 8019c0a:	e7ee      	b.n	8019bea <__swhatbuf_r+0x1c>
 8019c0c:	2340      	movs	r3, #64	; 0x40
 8019c0e:	2000      	movs	r0, #0
 8019c10:	6023      	str	r3, [r4, #0]
 8019c12:	b016      	add	sp, #88	; 0x58
 8019c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c18 <__smakebuf_r>:
 8019c18:	898b      	ldrh	r3, [r1, #12]
 8019c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c1c:	079d      	lsls	r5, r3, #30
 8019c1e:	4606      	mov	r6, r0
 8019c20:	460c      	mov	r4, r1
 8019c22:	d507      	bpl.n	8019c34 <__smakebuf_r+0x1c>
 8019c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c28:	6023      	str	r3, [r4, #0]
 8019c2a:	6123      	str	r3, [r4, #16]
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	6163      	str	r3, [r4, #20]
 8019c30:	b002      	add	sp, #8
 8019c32:	bd70      	pop	{r4, r5, r6, pc}
 8019c34:	ab01      	add	r3, sp, #4
 8019c36:	466a      	mov	r2, sp
 8019c38:	f7ff ffc9 	bl	8019bce <__swhatbuf_r>
 8019c3c:	9900      	ldr	r1, [sp, #0]
 8019c3e:	4605      	mov	r5, r0
 8019c40:	4630      	mov	r0, r6
 8019c42:	f7ff f95f 	bl	8018f04 <_malloc_r>
 8019c46:	b948      	cbnz	r0, 8019c5c <__smakebuf_r+0x44>
 8019c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c4c:	059a      	lsls	r2, r3, #22
 8019c4e:	d4ef      	bmi.n	8019c30 <__smakebuf_r+0x18>
 8019c50:	f023 0303 	bic.w	r3, r3, #3
 8019c54:	f043 0302 	orr.w	r3, r3, #2
 8019c58:	81a3      	strh	r3, [r4, #12]
 8019c5a:	e7e3      	b.n	8019c24 <__smakebuf_r+0xc>
 8019c5c:	4b0d      	ldr	r3, [pc, #52]	; (8019c94 <__smakebuf_r+0x7c>)
 8019c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c60:	89a3      	ldrh	r3, [r4, #12]
 8019c62:	6020      	str	r0, [r4, #0]
 8019c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c68:	81a3      	strh	r3, [r4, #12]
 8019c6a:	9b00      	ldr	r3, [sp, #0]
 8019c6c:	6163      	str	r3, [r4, #20]
 8019c6e:	9b01      	ldr	r3, [sp, #4]
 8019c70:	6120      	str	r0, [r4, #16]
 8019c72:	b15b      	cbz	r3, 8019c8c <__smakebuf_r+0x74>
 8019c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c78:	4630      	mov	r0, r6
 8019c7a:	f000 f86b 	bl	8019d54 <_isatty_r>
 8019c7e:	b128      	cbz	r0, 8019c8c <__smakebuf_r+0x74>
 8019c80:	89a3      	ldrh	r3, [r4, #12]
 8019c82:	f023 0303 	bic.w	r3, r3, #3
 8019c86:	f043 0301 	orr.w	r3, r3, #1
 8019c8a:	81a3      	strh	r3, [r4, #12]
 8019c8c:	89a0      	ldrh	r0, [r4, #12]
 8019c8e:	4305      	orrs	r5, r0
 8019c90:	81a5      	strh	r5, [r4, #12]
 8019c92:	e7cd      	b.n	8019c30 <__smakebuf_r+0x18>
 8019c94:	08019529 	.word	0x08019529

08019c98 <_malloc_usable_size_r>:
 8019c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c9c:	1f18      	subs	r0, r3, #4
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	bfbc      	itt	lt
 8019ca2:	580b      	ldrlt	r3, [r1, r0]
 8019ca4:	18c0      	addlt	r0, r0, r3
 8019ca6:	4770      	bx	lr

08019ca8 <_raise_r>:
 8019ca8:	291f      	cmp	r1, #31
 8019caa:	b538      	push	{r3, r4, r5, lr}
 8019cac:	4604      	mov	r4, r0
 8019cae:	460d      	mov	r5, r1
 8019cb0:	d904      	bls.n	8019cbc <_raise_r+0x14>
 8019cb2:	2316      	movs	r3, #22
 8019cb4:	6003      	str	r3, [r0, #0]
 8019cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019cba:	bd38      	pop	{r3, r4, r5, pc}
 8019cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019cbe:	b112      	cbz	r2, 8019cc6 <_raise_r+0x1e>
 8019cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019cc4:	b94b      	cbnz	r3, 8019cda <_raise_r+0x32>
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f000 f830 	bl	8019d2c <_getpid_r>
 8019ccc:	462a      	mov	r2, r5
 8019cce:	4601      	mov	r1, r0
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cd6:	f000 b817 	b.w	8019d08 <_kill_r>
 8019cda:	2b01      	cmp	r3, #1
 8019cdc:	d00a      	beq.n	8019cf4 <_raise_r+0x4c>
 8019cde:	1c59      	adds	r1, r3, #1
 8019ce0:	d103      	bne.n	8019cea <_raise_r+0x42>
 8019ce2:	2316      	movs	r3, #22
 8019ce4:	6003      	str	r3, [r0, #0]
 8019ce6:	2001      	movs	r0, #1
 8019ce8:	e7e7      	b.n	8019cba <_raise_r+0x12>
 8019cea:	2400      	movs	r4, #0
 8019cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019cf0:	4628      	mov	r0, r5
 8019cf2:	4798      	blx	r3
 8019cf4:	2000      	movs	r0, #0
 8019cf6:	e7e0      	b.n	8019cba <_raise_r+0x12>

08019cf8 <raise>:
 8019cf8:	4b02      	ldr	r3, [pc, #8]	; (8019d04 <raise+0xc>)
 8019cfa:	4601      	mov	r1, r0
 8019cfc:	6818      	ldr	r0, [r3, #0]
 8019cfe:	f7ff bfd3 	b.w	8019ca8 <_raise_r>
 8019d02:	bf00      	nop
 8019d04:	2000034c 	.word	0x2000034c

08019d08 <_kill_r>:
 8019d08:	b538      	push	{r3, r4, r5, lr}
 8019d0a:	4d07      	ldr	r5, [pc, #28]	; (8019d28 <_kill_r+0x20>)
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	4604      	mov	r4, r0
 8019d10:	4608      	mov	r0, r1
 8019d12:	4611      	mov	r1, r2
 8019d14:	602b      	str	r3, [r5, #0]
 8019d16:	f7f0 fb85 	bl	800a424 <_kill>
 8019d1a:	1c43      	adds	r3, r0, #1
 8019d1c:	d102      	bne.n	8019d24 <_kill_r+0x1c>
 8019d1e:	682b      	ldr	r3, [r5, #0]
 8019d20:	b103      	cbz	r3, 8019d24 <_kill_r+0x1c>
 8019d22:	6023      	str	r3, [r4, #0]
 8019d24:	bd38      	pop	{r3, r4, r5, pc}
 8019d26:	bf00      	nop
 8019d28:	20008a7c 	.word	0x20008a7c

08019d2c <_getpid_r>:
 8019d2c:	f7f0 bb72 	b.w	800a414 <_getpid>

08019d30 <_fstat_r>:
 8019d30:	b538      	push	{r3, r4, r5, lr}
 8019d32:	4d07      	ldr	r5, [pc, #28]	; (8019d50 <_fstat_r+0x20>)
 8019d34:	2300      	movs	r3, #0
 8019d36:	4604      	mov	r4, r0
 8019d38:	4608      	mov	r0, r1
 8019d3a:	4611      	mov	r1, r2
 8019d3c:	602b      	str	r3, [r5, #0]
 8019d3e:	f7f0 fbd0 	bl	800a4e2 <_fstat>
 8019d42:	1c43      	adds	r3, r0, #1
 8019d44:	d102      	bne.n	8019d4c <_fstat_r+0x1c>
 8019d46:	682b      	ldr	r3, [r5, #0]
 8019d48:	b103      	cbz	r3, 8019d4c <_fstat_r+0x1c>
 8019d4a:	6023      	str	r3, [r4, #0]
 8019d4c:	bd38      	pop	{r3, r4, r5, pc}
 8019d4e:	bf00      	nop
 8019d50:	20008a7c 	.word	0x20008a7c

08019d54 <_isatty_r>:
 8019d54:	b538      	push	{r3, r4, r5, lr}
 8019d56:	4d06      	ldr	r5, [pc, #24]	; (8019d70 <_isatty_r+0x1c>)
 8019d58:	2300      	movs	r3, #0
 8019d5a:	4604      	mov	r4, r0
 8019d5c:	4608      	mov	r0, r1
 8019d5e:	602b      	str	r3, [r5, #0]
 8019d60:	f7f0 fbcf 	bl	800a502 <_isatty>
 8019d64:	1c43      	adds	r3, r0, #1
 8019d66:	d102      	bne.n	8019d6e <_isatty_r+0x1a>
 8019d68:	682b      	ldr	r3, [r5, #0]
 8019d6a:	b103      	cbz	r3, 8019d6e <_isatty_r+0x1a>
 8019d6c:	6023      	str	r3, [r4, #0]
 8019d6e:	bd38      	pop	{r3, r4, r5, pc}
 8019d70:	20008a7c 	.word	0x20008a7c

08019d74 <_init>:
 8019d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d76:	bf00      	nop
 8019d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d7a:	bc08      	pop	{r3}
 8019d7c:	469e      	mov	lr, r3
 8019d7e:	4770      	bx	lr

08019d80 <_fini>:
 8019d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d82:	bf00      	nop
 8019d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d86:	bc08      	pop	{r3}
 8019d88:	469e      	mov	lr, r3
 8019d8a:	4770      	bx	lr
