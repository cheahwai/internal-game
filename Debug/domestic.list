
domestic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001514  08024150  08024150  00034150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025664  08025664  00040894  2**0
                  CONTENTS
  4 .ARM          00000008  08025664  08025664  00035664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802566c  0802566c  00040894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802566c  0802566c  0003566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025670  08025670  00035670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000894  20000000  08025674  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3f0  20000898  08025f08  00040898  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ac88  08025f08  0004ac88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040894  2**0
                  CONTENTS, READONLY
 12 .debug_info   00080bbc  00000000  00000000  000408c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a766  00000000  00000000  000c1480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  000cbbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e0  00000000  00000000  000ce438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031501  00000000  00000000  000d0918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004355f  00000000  00000000  00101e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea47d  00000000  00000000  00145378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022f7f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd28  00000000  00000000  0022f848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000898 	.word	0x20000898
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08024134 	.word	0x08024134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000089c 	.word	0x2000089c
 80001cc:	08024134 	.word	0x08024134

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ADC_DMAxInit>:
 * 						  ChannelNo					Specifies the Number of channels that will be converted
 * Function Return		: None
 * Function Example		: ADC_DMA_Init(&adc1,&hadc2,&hdma_adc1,2);
 */
void ADC_DMAxInit(ADC_t* ADC_t,ADC_HandleTypeDef* hadcx,DMA_HandleTypeDef* hdma_adcx, uint32_t ChannelNo)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]


	IRQn_Type nvic;

	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <ADC_DMAxInit+0x1e0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a72      	ldr	r2, [pc, #456]	; (80011cc <ADC_DMAxInit+0x1e0>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b70      	ldr	r3, [pc, #448]	; (80011cc <ADC_DMAxInit+0x1e0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
	ADC_t->ADC_number = ChannelNo;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	711a      	strb	r2, [r3, #4]
	ADC_t->ADC_rank = 1;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2201      	movs	r2, #1
 8001022:	715a      	strb	r2, [r3, #5]
	ADC_t->ADC_valuep = ADC_t->ADC_value;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f103 020c 	add.w	r2, r3, #12
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	609a      	str	r2, [r3, #8]
	ADC_t->hadcx = hadcx;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]



	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	if(hadcx == &hadc1){
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <ADC_DMAxInit+0x1e4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d10a      	bne.n	8001052 <ADC_DMAxInit+0x66>
		hadcx->Instance = ADC1;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <ADC_DMAxInit+0x1e8>)
 8001040:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a64      	ldr	r2, [pc, #400]	; (80011d8 <ADC_DMAxInit+0x1ec>)
 8001046:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream0_IRQn;
 8001048:	2338      	movs	r3, #56	; 0x38
 800104a:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	e01e      	b.n	8001090 <ADC_DMAxInit+0xa4>
	}else if(hadcx == &hadc2){
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a61      	ldr	r2, [pc, #388]	; (80011dc <ADC_DMAxInit+0x1f0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10b      	bne.n	8001072 <ADC_DMAxInit+0x86>
		hadcx->Instance = ADC2;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	4a60      	ldr	r2, [pc, #384]	; (80011e0 <ADC_DMAxInit+0x1f4>)
 800105e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream2;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <ADC_DMAxInit+0x1f8>)
 8001064:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream2_IRQn;
 8001066:	233a      	movs	r3, #58	; 0x3a
 8001068:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_1;
 800106a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	e00e      	b.n	8001090 <ADC_DMAxInit+0xa4>
	}else if (hadcx == &hadc3){
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <ADC_DMAxInit+0x1fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10a      	bne.n	8001090 <ADC_DMAxInit+0xa4>
		hadcx->Instance = ADC3;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <ADC_DMAxInit+0x200>)
 800107e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <ADC_DMAxInit+0x204>)
 8001084:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream1_IRQn;
 8001086:	2339      	movs	r3, #57	; 0x39
 8001088:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_2;
 800108a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800108e:	61bb      	str	r3, [r7, #24]
	}


	hadcx->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001096:	605a      	str	r2, [r3, #4]
	hadcx->Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	hadcx->Init.ScanConvMode = ENABLE;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
	hadcx->Init.ContinuousConvMode = ENABLE;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2201      	movs	r2, #1
 80010a8:	761a      	strb	r2, [r3, #24]
	hadcx->Init.DiscontinuousConvMode = DISABLE;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
	hadcx->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadcx->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <ADC_DMAxInit+0x208>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadcx->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
	hadcx->Init.NbrOfConversion = ChannelNo;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	61da      	str	r2, [r3, #28]
	hadcx->Init.DMAContinuousRequests = ENABLE;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadcx->Init.EOCSelection = DISABLE;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
	hadcx->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(hadcx) != HAL_OK)
 80010de:	68b8      	ldr	r0, [r7, #8]
 80010e0:	f012 fdfa 	bl	8013cd8 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <ADC_DMAxInit+0x102>
	{
		Error_Handler();
 80010ea:	f004 fb7f 	bl	80057ec <Error_Handler>
	}

	hdma_adcx->Init.Channel = DMA_CHANNEL;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
	hdma_adcx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	hdma_adcx->Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
	hdma_adcx->Init.MemInc = DMA_MINC_ENABLE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001106:	611a      	str	r2, [r3, #16]
	hdma_adcx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110e:	615a      	str	r2, [r3, #20]
	hdma_adcx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	619a      	str	r2, [r3, #24]
	hdma_adcx->Init.Mode = DMA_CIRCULAR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111e:	61da      	str	r2, [r3, #28]
	hdma_adcx->Init.Priority = DMA_PRIORITY_HIGH;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001126:	621a      	str	r2, [r3, #32]
	hdma_adcx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_adcx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_adcx->Init.MemBurst = DMA_MBURST_INC4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_adcx->Init.PeriphBurst = DMA_PBURST_INC4;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_adcx) != HAL_OK)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f014 f989 	bl	801545c <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <ADC_DMAxInit+0x168>
	{
		Error_Handler();
 8001150:	f004 fb4c 	bl	80057ec <Error_Handler>
	}

	__HAL_LINKDMA(hadcx,DMA_Handle,*hdma_adcx);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

	if(hadcx == &hadc1){
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <ADC_DMAxInit+0x1e4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d10c      	bne.n	8001182 <ADC_DMAxInit+0x196>
		HAL_NVIC_SetPriority(nvic, ADC1_DMA_IRQ_PRIO ,0);
 8001168:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800116c:	2200      	movs	r2, #0
 800116e:	210e      	movs	r1, #14
 8001170:	4618      	mov	r0, r3
 8001172:	f014 f92d 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8001176:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800117a:	4618      	mov	r0, r3
 800117c:	f014 f944 	bl	8015408 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(nvic);
	}else if (hadcx == &hadc3){
		HAL_NVIC_SetPriority(nvic, ADC3_DMA_IRQ_PRIO ,0);
		HAL_NVIC_EnableIRQ(nvic);
	}
}
 8001180:	e020      	b.n	80011c4 <ADC_DMAxInit+0x1d8>
	}else if(hadcx == &hadc2){
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4a15      	ldr	r2, [pc, #84]	; (80011dc <ADC_DMAxInit+0x1f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10c      	bne.n	80011a4 <ADC_DMAxInit+0x1b8>
		HAL_NVIC_SetPriority(nvic, ADC2_DMA_IRQ_PRIO ,0);
 800118a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800118e:	2200      	movs	r2, #0
 8001190:	210b      	movs	r1, #11
 8001192:	4618      	mov	r0, r3
 8001194:	f014 f91c 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8001198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800119c:	4618      	mov	r0, r3
 800119e:	f014 f933 	bl	8015408 <HAL_NVIC_EnableIRQ>
}
 80011a2:	e00f      	b.n	80011c4 <ADC_DMAxInit+0x1d8>
	}else if (hadcx == &hadc3){
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <ADC_DMAxInit+0x1fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10b      	bne.n	80011c4 <ADC_DMAxInit+0x1d8>
		HAL_NVIC_SetPriority(nvic, ADC3_DMA_IRQ_PRIO ,0);
 80011ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011b0:	2200      	movs	r2, #0
 80011b2:	210e      	movs	r1, #14
 80011b4:	4618      	mov	r0, r3
 80011b6:	f014 f90b 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80011ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011be:	4618      	mov	r0, r3
 80011c0:	f014 f922 	bl	8015408 <HAL_NVIC_EnableIRQ>
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	20006f3c 	.word	0x20006f3c
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40026410 	.word	0x40026410
 80011dc:	20006e94 	.word	0x20006e94
 80011e0:	40012100 	.word	0x40012100
 80011e4:	40026440 	.word	0x40026440
 80011e8:	20006f84 	.word	0x20006f84
 80011ec:	40012200 	.word	0x40012200
 80011f0:	40026428 	.word	0x40026428
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <ADC_Channel_Config>:
 * 						  DMA_GPIO_Pin				DMA pin
 * Function Return		: None
 * Function Example		: ADC_Channel_Config(&adc1,ADC_CHANNEL_10,IP16_Analog1_PIN);
 */
void ADC_Channel_Config(ADC_t* ADC_t,uint32_t ADC_Channel, GPIO_TypeDef* DMA_GPIOx, uint16_t DMA_GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	807b      	strh	r3, [r7, #2]

	GPIOPinsInit (DMA_GPIOx, DMA_GPIO_Pin, GPIO_MODE_ANALOG, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL);
 8001206:	8879      	ldrh	r1, [r7, #2]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2303      	movs	r3, #3
 800120e:	2203      	movs	r2, #3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f971 	bl	80014f8 <GPIOPinsInit>

	ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_Channel;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	613b      	str	r3, [r7, #16]
	sConfig.Rank = (ADC_t->ADC_rank)++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	b2d1      	uxtb	r1, r2
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	7151      	strb	r1, [r2, #5]
 8001234:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES ;
 8001236:	2306      	movs	r3, #6
 8001238:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(ADC_t->hadcx, &sConfig) != HAL_OK)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0210 	add.w	r2, r7, #16
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f012 fe9b 	bl	8013f80 <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <ADC_Channel_Config+0x5c>
	{
		Error_Handler();
 8001250:	f004 facc 	bl	80057ec <Error_Handler>
	}

	HAL_ADC_Start_DMA(ADC_t->hadcx, (uint32_t *)ADC_t->ADC_valuep, ADC_t->ADC_number);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6899      	ldr	r1, [r3, #8]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	461a      	mov	r2, r3
 8001262:	f012 fd7d 	bl	8013d60 <HAL_ADC_Start_DMA>

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 800126e:	b408      	push	{r3}
 8001270:	b580      	push	{r7, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800128e:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001294:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d12e      	bne.n	80012fc <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1d1a      	adds	r2, r3, #4
 80012a2:	617a      	str	r2, [r7, #20]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	1d1a      	adds	r2, r3, #4
 80012ae:	617a      	str	r2, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	1d1a      	adds	r2, r3, #4
 80012bc:	617a      	str	r2, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1d1a      	adds	r2, r3, #4
 80012c8:	617a      	str	r2, [r7, #20]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	821a      	strh	r2, [r3, #16]

		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6858      	ldr	r0, [r3, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8919      	ldrh	r1, [r3, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2302      	movs	r3, #2
 80012e0:	2201      	movs	r2, #1
 80012e2:	f000 f909 	bl	80014f8 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68d8      	ldr	r0, [r3, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8a19      	ldrh	r1, [r3, #16]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2302      	movs	r3, #2
 80012f4:	2201      	movs	r2, #1
 80012f6:	f000 f8ff 	bl	80014f8 <GPIOPinsInit>
 80012fa:	e017      	b.n	800132c <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	617a      	str	r2, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	617a      	str	r2, [r7, #20]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1d1a      	adds	r2, r3, #4
 8001322:	617a      	str	r2, [r7, #20]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <BDCInit+0xd2>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800133e:	e018      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d105      	bne.n	8001354 <BDCInit+0xe6>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001352:	e00e      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	2b08      	cmp	r3, #8
 800135a:	d105      	bne.n	8001368 <BDCInit+0xfa>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001366:	e004      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800137c:	b001      	add	sp, #4
 800137e:	4770      	bx	lr

08001380 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db52      	blt.n	8001436 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <WriteBDC+0x24>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
 80013a2:	e018      	b.n	80013d6 <WriteBDC+0x56>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d105      	bne.n	80013b8 <WriteBDC+0x38>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
 80013b6:	e00e      	b.n	80013d6 <WriteBDC+0x56>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d105      	bne.n	80013cc <WriteBDC+0x4c>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ca:	e004      	b.n	80013d6 <WriteBDC+0x56>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d110      	bne.n	8001400 <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6858      	ldr	r0, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	891b      	ldrh	r3, [r3, #8]
 80013e6:	2201      	movs	r2, #1
 80013e8:	4619      	mov	r1, r3
 80013ea:	f015 f9d5 	bl	8016798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68d8      	ldr	r0, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8a1b      	ldrh	r3, [r3, #16]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	f015 f9cd 	bl	8016798 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 80013fe:	e076      	b.n	80014ee <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d172      	bne.n	80014ee <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	7819      	ldrb	r1, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e1a      	ldrb	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	430a      	orrs	r2, r1
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	7819      	ldrb	r1, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e5b      	ldrb	r3, [r3, #25]
 8001426:	43db      	mvns	r3, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	400a      	ands	r2, r1
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	e05b      	b.n	80014ee <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da58      	bge.n	80014ee <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <WriteBDC+0xd2>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	425a      	negs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
 8001450:	e01e      	b.n	8001490 <WriteBDC+0x110>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d107      	bne.n	800146a <WriteBDC+0xea>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4259      	negs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	6393      	str	r3, [r2, #56]	; 0x38
 8001468:	e012      	b.n	8001490 <WriteBDC+0x110>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b08      	cmp	r3, #8
 8001470:	d107      	bne.n	8001482 <WriteBDC+0x102>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	4259      	negs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001480:	e006      	b.n	8001490 <WriteBDC+0x110>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4259      	negs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d110      	bne.n	80014ba <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6858      	ldr	r0, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	891b      	ldrh	r3, [r3, #8]
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	f015 f978 	bl	8016798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68d8      	ldr	r0, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8a1b      	ldrh	r3, [r3, #16]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f015 f970 	bl	8016798 <HAL_GPIO_WritePin>
}
 80014b8:	e019      	b.n	80014ee <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d115      	bne.n	80014ee <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	7819      	ldrb	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	400a      	ands	r2, r1
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e5a      	ldrb	r2, [r3, #25]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b092      	sub	sp, #72	; 0x48
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <GPIOPinsInit+0x1cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	f000 80af 	beq.w	8001680 <GPIOPinsInit+0x188>
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <GPIOPinsInit+0x1cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	f200 80ba 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800152a:	4a67      	ldr	r2, [pc, #412]	; (80016c8 <GPIOPinsInit+0x1d0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f000 8098 	beq.w	8001662 <GPIOPinsInit+0x16a>
 8001532:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <GPIOPinsInit+0x1d0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	f200 80b2 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800153a:	4a64      	ldr	r2, [pc, #400]	; (80016cc <GPIOPinsInit+0x1d4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	f000 8081 	beq.w	8001644 <GPIOPinsInit+0x14c>
 8001542:	4a62      	ldr	r2, [pc, #392]	; (80016cc <GPIOPinsInit+0x1d4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f200 80aa 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800154a:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <GPIOPinsInit+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d06a      	beq.n	8001626 <GPIOPinsInit+0x12e>
 8001550:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <GPIOPinsInit+0x1d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f200 80a3 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001558:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <GPIOPinsInit+0x1dc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d054      	beq.n	8001608 <GPIOPinsInit+0x110>
 800155e:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <GPIOPinsInit+0x1dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f200 809c 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001566:	4a5c      	ldr	r2, [pc, #368]	; (80016d8 <GPIOPinsInit+0x1e0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d03e      	beq.n	80015ea <GPIOPinsInit+0xf2>
 800156c:	4a5a      	ldr	r2, [pc, #360]	; (80016d8 <GPIOPinsInit+0x1e0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f200 8095 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001574:	4a59      	ldr	r2, [pc, #356]	; (80016dc <GPIOPinsInit+0x1e4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d028      	beq.n	80015cc <GPIOPinsInit+0xd4>
 800157a:	4a58      	ldr	r2, [pc, #352]	; (80016dc <GPIOPinsInit+0x1e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f200 808e 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001582:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <GPIOPinsInit+0x1e8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d003      	beq.n	8001590 <GPIOPinsInit+0x98>
 8001588:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <GPIOPinsInit+0x1ec>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00f      	beq.n	80015ae <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 800158e:	e086      	b.n	800169e <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
 8001594:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a53      	ldr	r2, [pc, #332]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
 80015aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80015ac:	e078      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80015ca:	e069      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80015e8:	e05a      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a3d      	ldr	r2, [pc, #244]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 8001606:	e04b      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001624:	e03c      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
	break;
 8001642:	e02d      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
	break;
 8001660:	e01e      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
	break;
 800167e:	e00f      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
	break;
 800169c:	e000      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	default: break;
 800169e:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80016a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b4:	4619      	mov	r1, r3
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f014 fdbe 	bl	8016238 <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3748      	adds	r7, #72	; 0x48
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40023800 	.word	0x40023800

080016ec <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a52      	ldr	r2, [pc, #328]	; (800185c <PWMTimeBaseInit+0x170>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d103      	bne.n	8001720 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <PWMTimeBaseInit+0x174>)
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e057      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a50      	ldr	r2, [pc, #320]	; (8001864 <PWMTimeBaseInit+0x178>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d104      	bne.n	8001732 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e04e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <PWMTimeBaseInit+0x17c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d103      	bne.n	8001742 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a4b      	ldr	r2, [pc, #300]	; (800186c <PWMTimeBaseInit+0x180>)
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e046      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <PWMTimeBaseInit+0x184>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d103      	bne.n	8001752 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <PWMTimeBaseInit+0x188>)
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e03e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <PWMTimeBaseInit+0x18c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d103      	bne.n	8001762 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <PWMTimeBaseInit+0x190>)
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e036      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a46      	ldr	r2, [pc, #280]	; (8001880 <PWMTimeBaseInit+0x194>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d103      	bne.n	8001772 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <PWMTimeBaseInit+0x198>)
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e02e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a44      	ldr	r2, [pc, #272]	; (8001888 <PWMTimeBaseInit+0x19c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d103      	bne.n	8001782 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a43      	ldr	r2, [pc, #268]	; (800188c <PWMTimeBaseInit+0x1a0>)
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e026      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <PWMTimeBaseInit+0x1a4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d103      	bne.n	8001792 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <PWMTimeBaseInit+0x1a8>)
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e01e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a40      	ldr	r2, [pc, #256]	; (8001898 <PWMTimeBaseInit+0x1ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d103      	bne.n	80017a2 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <PWMTimeBaseInit+0x1b0>)
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e016      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <PWMTimeBaseInit+0x1b4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d103      	bne.n	80017b2 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <PWMTimeBaseInit+0x1b8>)
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <PWMTimeBaseInit+0x1bc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d103      	bne.n	80017c2 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <PWMTimeBaseInit+0x1c0>)
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e006      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <PWMTimeBaseInit+0x1c4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <PWMTimeBaseInit+0x1c8>)
 80017ce:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f017 fdfa 	bl	80193ec <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 80017fe:	f003 fff5 	bl	80057ec <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f018 f960 	bl	8019ad4 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 800181a:	f003 ffe7 	bl	80057ec <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f017 fe57 	bl	80194d2 <HAL_TIM_PWM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 800182a:	f003 ffdf 	bl	80057ec <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f018 fd45 	bl	801a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001848:	f003 ffd0 	bl	80057ec <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f017 fdf8 	bl	8019442 <HAL_TIM_Base_Start>

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20006b30 	.word	0x20006b30
 8001860:	40010000 	.word	0x40010000
 8001864:	20006c34 	.word	0x20006c34
 8001868:	20006880 	.word	0x20006880
 800186c:	40000400 	.word	0x40000400
 8001870:	200066bc 	.word	0x200066bc
 8001874:	40000800 	.word	0x40000800
 8001878:	20006840 	.word	0x20006840
 800187c:	40000c00 	.word	0x40000c00
 8001880:	2000667c 	.word	0x2000667c
 8001884:	40010400 	.word	0x40010400
 8001888:	20006b70 	.word	0x20006b70
 800188c:	40014000 	.word	0x40014000
 8001890:	2000679c 	.word	0x2000679c
 8001894:	40014400 	.word	0x40014400
 8001898:	20006a48 	.word	0x20006a48
 800189c:	40014800 	.word	0x40014800
 80018a0:	20006d54 	.word	0x20006d54
 80018a4:	40001800 	.word	0x40001800
 80018a8:	20006964 	.word	0x20006964
 80018ac:	40001c00 	.word	0x40001c00
 80018b0:	20006d14 	.word	0x20006d14
 80018b4:	40002000 	.word	0x40002000

080018b8 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	; 0x68
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018ea:	2370      	movs	r3, #112	; 0x70
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018f2:	2302      	movs	r3, #2
 80018f4:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018f6:	2308      	movs	r3, #8
 80018f8:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4619      	mov	r1, r3
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f018 f81a 	bl	8019948 <HAL_TIM_PWM_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <PWMChannelConfig+0x66>
	{
		Error_Handler();
 800191a:	f003 ff67 	bl	80057ec <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a95      	ldr	r2, [pc, #596]	; (8001b78 <PWMChannelConfig+0x2c0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f000 80af 	beq.w	8001a86 <PWMChannelConfig+0x1ce>
 8001928:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <PWMChannelConfig+0x2c0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f200 80ba 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <PWMChannelConfig+0x2c4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	f000 8098 	beq.w	8001a68 <PWMChannelConfig+0x1b0>
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <PWMChannelConfig+0x2c4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f200 80b2 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001940:	4a8f      	ldr	r2, [pc, #572]	; (8001b80 <PWMChannelConfig+0x2c8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f000 8081 	beq.w	8001a4a <PWMChannelConfig+0x192>
 8001948:	4a8d      	ldr	r2, [pc, #564]	; (8001b80 <PWMChannelConfig+0x2c8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f200 80aa 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001950:	4a8c      	ldr	r2, [pc, #560]	; (8001b84 <PWMChannelConfig+0x2cc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d06a      	beq.n	8001a2c <PWMChannelConfig+0x174>
 8001956:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <PWMChannelConfig+0x2cc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	f200 80a3 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800195e:	4a8a      	ldr	r2, [pc, #552]	; (8001b88 <PWMChannelConfig+0x2d0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d054      	beq.n	8001a0e <PWMChannelConfig+0x156>
 8001964:	4a88      	ldr	r2, [pc, #544]	; (8001b88 <PWMChannelConfig+0x2d0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	f200 809c 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800196c:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <PWMChannelConfig+0x2d4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d03e      	beq.n	80019f0 <PWMChannelConfig+0x138>
 8001972:	4a86      	ldr	r2, [pc, #536]	; (8001b8c <PWMChannelConfig+0x2d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f200 8095 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800197a:	4a85      	ldr	r2, [pc, #532]	; (8001b90 <PWMChannelConfig+0x2d8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d028      	beq.n	80019d2 <PWMChannelConfig+0x11a>
 8001980:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <PWMChannelConfig+0x2d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f200 808e 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001988:	4a82      	ldr	r2, [pc, #520]	; (8001b94 <PWMChannelConfig+0x2dc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <PWMChannelConfig+0xde>
 800198e:	4a82      	ldr	r2, [pc, #520]	; (8001b98 <PWMChannelConfig+0x2e0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00f      	beq.n	80019b4 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001994:	e086      	b.n	8001aa4 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <PWMChannelConfig+0x2e4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80019b2:	e078      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80019d0:	e069      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d6:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80019ee:	e05a      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001a0c:	e04b      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001a2a:	e03c      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001a48:	e02d      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
		break;
 8001a66:	e01e      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
		break;
 8001a84:	e00f      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
		break;
 8001aa2:	e000      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		default: break;
 8001aa4:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <PWMChannelConfig+0x2e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d102      	bne.n	8001ac4 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac2:	e04b      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <PWMChannelConfig+0x2ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001acc:	2301      	movs	r3, #1
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad0:	e044      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <PWMChannelConfig+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d102      	bne.n	8001ae0 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	e03d      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a32      	ldr	r2, [pc, #200]	; (8001bac <PWMChannelConfig+0x2f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d102      	bne.n	8001aee <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aec:	e036      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <PWMChannelConfig+0x2f8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d102      	bne.n	8001afc <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001af6:	2302      	movs	r3, #2
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001afa:	e02f      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <PWMChannelConfig+0x2fc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d102      	bne.n	8001b0a <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b04:	2303      	movs	r3, #3
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b08:	e028      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <PWMChannelConfig+0x300>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d102      	bne.n	8001b18 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b12:	2303      	movs	r3, #3
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b16:	e021      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <PWMChannelConfig+0x304>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001b20:	2303      	movs	r3, #3
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b24:	e01a      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <PWMChannelConfig+0x308>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d102      	bne.n	8001b34 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b32:	e013      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <PWMChannelConfig+0x30c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b40:	e00c      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <PWMChannelConfig+0x310>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b4e:	e005      	b.n	8001b5c <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <PWMChannelConfig+0x314>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f014 fb68 	bl	8016238 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f017 fcdc 	bl	8019528 <HAL_TIM_PWM_Start>

}
 8001b70:	bf00      	nop
 8001b72:	3768      	adds	r7, #104	; 0x68
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021c00 	.word	0x40021c00
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	20006b30 	.word	0x20006b30
 8001ba4:	20006c34 	.word	0x20006c34
 8001ba8:	20006880 	.word	0x20006880
 8001bac:	200066bc 	.word	0x200066bc
 8001bb0:	20006840 	.word	0x20006840
 8001bb4:	2000667c 	.word	0x2000667c
 8001bb8:	20006b70 	.word	0x20006b70
 8001bbc:	2000679c 	.word	0x2000679c
 8001bc0:	20006a48 	.word	0x20006a48
 8001bc4:	20006d54 	.word	0x20006d54
 8001bc8:	20006964 	.word	0x20006964
 8001bcc:	20006d14 	.word	0x20006d14

08001bd0 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	; 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2224      	movs	r2, #36	; 0x24
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f01d f8ab 	bl	801ed3c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <QEIInit+0x1d0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d106      	bne.n	8001c06 <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <QEIInit+0x1d4>)
 8001bfc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001bfe:	2319      	movs	r3, #25
 8001c00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c04:	e036      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <QEIInit+0x1d8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d107      	bne.n	8001c1e <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c14:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001c16:	231c      	movs	r3, #28
 8001c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c1c:	e02a      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a62      	ldr	r2, [pc, #392]	; (8001dac <QEIInit+0x1dc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d106      	bne.n	8001c34 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <QEIInit+0x1e0>)
 8001c2a:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001c2c:	231d      	movs	r3, #29
 8001c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c32:	e01f      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a5f      	ldr	r2, [pc, #380]	; (8001db4 <QEIInit+0x1e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d106      	bne.n	8001c4a <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a5e      	ldr	r2, [pc, #376]	; (8001db8 <QEIInit+0x1e8>)
 8001c40:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001c42:	231e      	movs	r3, #30
 8001c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c48:	e014      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <QEIInit+0x1ec>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d106      	bne.n	8001c60 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <QEIInit+0x1f0>)
 8001c56:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001c58:	2332      	movs	r3, #50	; 0x32
 8001c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c5e:	e009      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <QEIInit+0x1f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d105      	bne.n	8001c74 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <QEIInit+0x1f8>)
 8001c6c:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001c6e:	232c      	movs	r3, #44	; 0x2c
 8001c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c86:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f017 fc6d 	bl	80195a4 <HAL_TIM_Encoder_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <QEIInit+0x104>
	{
		Error_Handler();
 8001cd0:	f003 fd8c 	bl	80057ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f018 faf2 	bl	801a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <QEIInit+0x122>
	{
		Error_Handler();
 8001cee:	f003 fd7d 	bl	80057ec <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0201 	mvn.w	r2, #1
 8001cfa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <QEIInit+0x1d0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001d14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d18:	2200      	movs	r2, #0
 8001d1a:	210e      	movs	r1, #14
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f013 fb57 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d26:	4618      	mov	r0, r3
 8001d28:	f013 fb8a 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d30:	4618      	mov	r0, r3
 8001d32:	f013 fb69 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8001d36:	e02a      	b.n	8001d8e <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <QEIInit+0x1e4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001d40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d44:	2200      	movs	r2, #0
 8001d46:	210e      	movs	r1, #14
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f013 fb41 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d52:	4618      	mov	r0, r3
 8001d54:	f013 fb74 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d58:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f013 fb53 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8001d62:	e014      	b.n	8001d8e <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <QEIInit+0x1f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d110      	bne.n	8001d8e <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001d6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d70:	2200      	movs	r2, #0
 8001d72:	210e      	movs	r1, #14
 8001d74:	4618      	mov	r0, r3
 8001d76:	f013 fb2b 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f013 fb5e 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f013 fb3d 	bl	8015408 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001d8e:	213c      	movs	r1, #60	; 0x3c
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f017 fc99 	bl	80196c8 <HAL_TIM_Encoder_Start>
}
 8001d96:	bf00      	nop
 8001d98:	3738      	adds	r7, #56	; 0x38
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20006b30 	.word	0x20006b30
 8001da4:	40010000 	.word	0x40010000
 8001da8:	20006c34 	.word	0x20006c34
 8001dac:	20006880 	.word	0x20006880
 8001db0:	40000400 	.word	0x40000400
 8001db4:	200066bc 	.word	0x200066bc
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	20006840 	.word	0x20006840
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	2000667c 	.word	0x2000667c
 8001dc8:	40010400 	.word	0x40010400

08001dcc <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d839      	bhi.n	8001e52 <QEIReset+0x86>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <QEIReset+0x18>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001e0b 	.word	0x08001e0b
 8001dec:	08001e1b 	.word	0x08001e1b
 8001df0:	08001e29 	.word	0x08001e29
 8001df4:	08001e37 	.word	0x08001e37
 8001df8:	08001e45 	.word	0x08001e45

	case QEI1:	TIM1->CNT = 0;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <QEIReset+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <QEIReset+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	break;
 8001e08:	e023      	b.n	8001e52 <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <QEIReset+0x9c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
	break;
 8001e18:	e01b      	b.n	8001e52 <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <QEIReset+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <QEIReset+0xa4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	break;
 8001e26:	e014      	b.n	8001e52 <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <QEIReset+0xa8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <QEIReset+0xac>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
	break;
 8001e34:	e00d      	b.n	8001e52 <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <QEIReset+0xb0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <QEIReset+0xb4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
	break;
 8001e42:	e006      	b.n	8001e52 <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <QEIReset+0xb8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <QEIReset+0xbc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
	break;
 8001e50:	bf00      	nop

	}
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	20007090 	.word	0x20007090
 8001e68:	20007094 	.word	0x20007094
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	2000708c 	.word	0x2000708c
 8001e74:	40000800 	.word	0x40000800
 8001e78:	200070b4 	.word	0x200070b4
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	200070b0 	.word	0x200070b0
 8001e84:	40010400 	.word	0x40010400
 8001e88:	200070b8 	.word	0x200070b8

08001e8c <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	460a      	mov	r2, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	f200 80f6 	bhi.w	8002092 <QEISwap+0x206>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <QEISwap+0x20>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001f13 	.word	0x08001f13
 8001eb4:	08001f61 	.word	0x08001f61
 8001eb8:	08001faf 	.word	0x08001faf
 8001ebc:	08001ffb 	.word	0x08001ffb
 8001ec0:	08002047 	.word	0x08002047

	case QEI1:	if(swap == QEI_No_Swap){
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001eca:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <QEISwap+0x228>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <QEISwap+0x228>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020a 	bic.w	r2, r2, #10
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <QEISwap+0x228>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <QEISwap+0x228>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a12      	ldr	r2, [r2, #32]
 8001ee4:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8001ee6:	e0df      	b.n	80020a8 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 80dc 	bne.w	80020a8 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001ef0:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <QEISwap+0x228>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <QEISwap+0x228>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020a 	bic.w	r2, r2, #10
 8001efe:	621a      	str	r2, [r3, #32]
 8001f00:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <QEISwap+0x228>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <QEISwap+0x228>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0202 	orr.w	r2, r2, #2
 8001f0e:	621a      	str	r2, [r3, #32]
		break;
 8001f10:	e0ca      	b.n	80020a8 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10e      	bne.n	8001f36 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001f18:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <QEISwap+0x22c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <QEISwap+0x22c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020a 	bic.w	r2, r2, #10
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <QEISwap+0x22c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <QEISwap+0x22c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a12      	ldr	r2, [r2, #32]
 8001f32:	621a      	str	r2, [r3, #32]
	break;
 8001f34:	e0af      	b.n	8002096 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80ac 	bne.w	8002096 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <QEISwap+0x22c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <QEISwap+0x22c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020a 	bic.w	r2, r2, #10
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <QEISwap+0x22c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <QEISwap+0x22c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0202 	orr.w	r2, r2, #2
 8001f5c:	621a      	str	r2, [r3, #32]
	break;
 8001f5e:	e09a      	b.n	8002096 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10e      	bne.n	8001f84 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <QEISwap+0x230>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <QEISwap+0x230>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 020a 	bic.w	r2, r2, #10
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <QEISwap+0x230>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <QEISwap+0x230>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a12      	ldr	r2, [r2, #32]
 8001f80:	621a      	str	r2, [r3, #32]
	break;
 8001f82:	e08a      	b.n	800209a <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 8087 	bne.w	800209a <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <QEISwap+0x230>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <QEISwap+0x230>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020a 	bic.w	r2, r2, #10
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <QEISwap+0x230>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <QEISwap+0x230>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0202 	orr.w	r2, r2, #2
 8001faa:	621a      	str	r2, [r3, #32]
	break;
 8001fac:	e075      	b.n	800209a <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 8001fae:	79bb      	ldrb	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001fb4:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <QEISwap+0x234>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <QEISwap+0x234>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020a 	bic.w	r2, r2, #10
 8001fc2:	621a      	str	r2, [r3, #32]
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <QEISwap+0x234>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <QEISwap+0x234>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a12      	ldr	r2, [r2, #32]
 8001fce:	621a      	str	r2, [r3, #32]
	break;
 8001fd0:	e065      	b.n	800209e <QEISwap+0x212>
	else if(swap == QEI_Swap){
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d162      	bne.n	800209e <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <QEISwap+0x234>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <QEISwap+0x234>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020a 	bic.w	r2, r2, #10
 8001fe6:	621a      	str	r2, [r3, #32]
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <QEISwap+0x234>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <QEISwap+0x234>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0202 	orr.w	r2, r2, #2
 8001ff6:	621a      	str	r2, [r3, #32]
	break;
 8001ff8:	e051      	b.n	800209e <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10e      	bne.n	800201e <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <QEISwap+0x238>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <QEISwap+0x238>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 020a 	bic.w	r2, r2, #10
 800200e:	621a      	str	r2, [r3, #32]
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <QEISwap+0x238>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <QEISwap+0x238>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a12      	ldr	r2, [r2, #32]
 800201a:	621a      	str	r2, [r3, #32]
	break;
 800201c:	e041      	b.n	80020a2 <QEISwap+0x216>
	else if(swap == QEI_Swap){
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13e      	bne.n	80020a2 <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <QEISwap+0x238>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <QEISwap+0x238>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 020a 	bic.w	r2, r2, #10
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <QEISwap+0x238>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <QEISwap+0x238>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0202 	orr.w	r2, r2, #2
 8002042:	621a      	str	r2, [r3, #32]
	break;
 8002044:	e02d      	b.n	80020a2 <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10e      	bne.n	800206a <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <QEISwap+0x23c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <QEISwap+0x23c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 020a 	bic.w	r2, r2, #10
 800205a:	621a      	str	r2, [r3, #32]
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <QEISwap+0x23c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <QEISwap+0x23c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a12      	ldr	r2, [r2, #32]
 8002066:	621a      	str	r2, [r3, #32]
	break;
 8002068:	e01d      	b.n	80020a6 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d11a      	bne.n	80020a6 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <QEISwap+0x23c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <QEISwap+0x23c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020a 	bic.w	r2, r2, #10
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <QEISwap+0x23c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <QEISwap+0x23c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0202 	orr.w	r2, r2, #2
 800208e:	621a      	str	r2, [r3, #32]
	break;
 8002090:	e009      	b.n	80020a6 <QEISwap+0x21a>
	default: break;
 8002092:	bf00      	nop
 8002094:	e008      	b.n	80020a8 <QEISwap+0x21c>
	break;
 8002096:	bf00      	nop
 8002098:	e006      	b.n	80020a8 <QEISwap+0x21c>
	break;
 800209a:	bf00      	nop
 800209c:	e004      	b.n	80020a8 <QEISwap+0x21c>
	break;
 800209e:	bf00      	nop
 80020a0:	e002      	b.n	80020a8 <QEISwap+0x21c>
	break;
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <QEISwap+0x21c>
	break;
 80020a6:	bf00      	nop
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	20006b30 	.word	0x20006b30
 80020b8:	20006c34 	.word	0x20006c34
 80020bc:	20006880 	.word	0x20006880
 80020c0:	200066bc 	.word	0x200066bc
 80020c4:	20006840 	.word	0x20006840
 80020c8:	2000667c 	.word	0x2000667c

080020cc <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	461a      	mov	r2, r3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 80020e2:	e002      	b.n	80020ea <QEIDelay+0x1e>
	{
		currentvalues++;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3f8      	bcc.n	80020e4 <QEIDelay+0x18>
	}
	currentvalues = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	3b01      	subs	r3, #1
 8002112:	2b05      	cmp	r3, #5
 8002114:	d845      	bhi.n	80021a2 <QEIRead+0x9e>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <QEIRead+0x18>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002135 	.word	0x08002135
 8002120:	08002147 	.word	0x08002147
 8002124:	0800215b 	.word	0x0800215b
 8002128:	0800216d 	.word	0x0800216d
 800212c:	0800217f 	.word	0x0800217f
 8002130:	08002191 	.word	0x08002191

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <QEIRead+0xb0>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <QEIRead+0xb4>)
 800213c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <QEIRead+0xb4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
	break;
 8002144:	e02e      	b.n	80021a4 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8002146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <QEIRead+0xb8>)
 8002150:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <QEIRead+0xb8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
	break;
 8002158:	e024      	b.n	80021a4 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <QEIRead+0xbc>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <QEIRead+0xc0>)
 8002162:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <QEIRead+0xc0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
	break;
 800216a:	e01b      	b.n	80021a4 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <QEIRead+0xc4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <QEIRead+0xc8>)
 8002174:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <QEIRead+0xc8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
	break;
 800217c:	e012      	b.n	80021a4 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <QEIRead+0xcc>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <QEIRead+0xd0>)
 8002186:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <QEIRead+0xd0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
	break;
 800218e:	e009      	b.n	80021a4 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <QEIRead+0xd4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <QEIRead+0xd8>)
 8002198:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <QEIRead+0xd8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
	break;
 80021a0:	e000      	b.n	80021a4 <QEIRead+0xa0>

	default: break;
 80021a2:	bf00      	nop
	}

	return value;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	20007090 	.word	0x20007090
 80021bc:	20007094 	.word	0x20007094
 80021c0:	40000400 	.word	0x40000400
 80021c4:	2000708c 	.word	0x2000708c
 80021c8:	40000800 	.word	0x40000800
 80021cc:	200070b4 	.word	0x200070b4
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	200070b0 	.word	0x200070b0
 80021d8:	40010400 	.word	0x40010400
 80021dc:	200070b8 	.word	0x200070b8

080021e0 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	72fb      	strb	r3, [r7, #11]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7afa      	ldrb	r2, [r7, #11]
 80021f8:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	893a      	ldrh	r2, [r7, #8]
 8002204:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8bba      	ldrh	r2, [r7, #28]
 8002210:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221c:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8899      	ldrh	r1, [r3, #4]
 8002226:	2301      	movs	r3, #1
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2302      	movs	r3, #2
 800222c:	2201      	movs	r2, #1
 800222e:	f7ff f963 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6898      	ldr	r0, [r3, #8]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8999      	ldrh	r1, [r3, #12]
 800223a:	2301      	movs	r3, #1
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2201      	movs	r2, #1
 8002242:	f7ff f959 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6918      	ldr	r0, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8a99      	ldrh	r1, [r3, #20]
 800224e:	2301      	movs	r3, #1
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2302      	movs	r3, #2
 8002254:	2201      	movs	r2, #1
 8002256:	f7ff f94f 	bl	80014f8 <GPIOPinsInit>

}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7d9b      	ldrb	r3, [r3, #22]
 800226e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	889b      	ldrh	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	f014 fa8c 	bl	8016798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6898      	ldr	r0, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	899b      	ldrh	r3, [r3, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	f014 fa84 	bl	8016798 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8002290:	7bba      	ldrb	r2, [r7, #14]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3206      	adds	r2, #6
 8002296:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800229a:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 800229c:	2308      	movs	r3, #8
 800229e:	737b      	strb	r3, [r7, #13]
 80022a0:	e02a      	b.n	80022f8 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da08      	bge.n	80022bc <SHIFTREGShift+0x5a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6918      	ldr	r0, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8a9b      	ldrh	r3, [r3, #20]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	f014 fa6f 	bl	8016798 <HAL_GPIO_WritePin>
 80022ba:	e007      	b.n	80022cc <SHIFTREGShift+0x6a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6918      	ldr	r0, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8a9b      	ldrh	r3, [r3, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	f014 fa66 	bl	8016798 <HAL_GPIO_WritePin>
			out <<= 1;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	f014 fa5b 	bl	8016798 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	889b      	ldrh	r3, [r3, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	f014 fa53 	bl	8016798 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	737b      	strb	r3, [r7, #13]
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1d1      	bne.n	80022a2 <SHIFTREGShift+0x40>
		}
	}while(i--);
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	73ba      	strb	r2, [r7, #14]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1c3      	bne.n	8002290 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6898      	ldr	r0, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	899b      	ldrh	r3, [r3, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	4619      	mov	r1, r3
 8002314:	f014 fa40 	bl	8016798 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	899b      	ldrh	r3, [r3, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f014 fa38 	bl	8016798 <HAL_GPIO_WritePin>

}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_MspInit+0x54>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_MspInit+0x54>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x54>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_MspInit+0x54>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_MspInit+0x54>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_MspInit+0x54>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	210f      	movs	r1, #15
 8002372:	f06f 0001 	mvn.w	r0, #1
 8002376:	f013 f82b 	bl	80153d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_ADC_MspInit+0x8c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_ADC_MspInit+0x30>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
	  /* Peripheral clock enable */
	  __HAL_RCC_ADC3_CLK_ENABLE();

  }

}
 80023b6:	e026      	b.n	8002406 <HAL_ADC_MspInit+0x7e>
  }else if(hadc->Instance==ADC2 ){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_ADC_MspInit+0x94>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_ADC_MspInit+0x58>
	  __HAL_RCC_ADC2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
}
 80023de:	e012      	b.n	8002406 <HAL_ADC_MspInit+0x7e>
  }else if (hadc->Instance==ADC3){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_ADC_MspInit+0x98>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_MspInit+0x7e>
	  __HAL_RCC_ADC3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40012000 	.word	0x40012000
 8002418:	40023800 	.word	0x40023800
 800241c:	40012100 	.word	0x40012100
 8002420:	40012200 	.word	0x40012200

08002424 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_CAN_MspInit+0x128>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d135      	bne.n	80024b2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 800244e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10d      	bne.n	8002474 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002466:	6413      	str	r3, [r2, #64]	; 0x40
 8002468:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a35      	ldr	r2, [pc, #212]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002490:	2303      	movs	r3, #3
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024a0:	2309      	movs	r3, #9
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482b      	ldr	r0, [pc, #172]	; (8002558 <HAL_CAN_MspInit+0x134>)
 80024ac:	f013 fec4 	bl	8016238 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80024b0:	e048      	b.n	8002544 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_CAN_MspInit+0x138>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d143      	bne.n	8002544 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10d      	bne.n	8002506 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002522:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002534:	2309      	movs	r3, #9
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <HAL_CAN_MspInit+0x13c>)
 8002540:	f013 fe7a 	bl	8016238 <HAL_GPIO_Init>
}
 8002544:	bf00      	nop
 8002546:	3730      	adds	r7, #48	; 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40006400 	.word	0x40006400
 8002550:	200008b4 	.word	0x200008b4
 8002554:	40023800 	.word	0x40023800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40006800 	.word	0x40006800
 8002560:	40020400 	.word	0x40020400

08002564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_I2C_MspInit+0x190>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12d      	bne.n	80025e2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b4:	2304      	movs	r3, #4
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	484f      	ldr	r0, [pc, #316]	; (80026fc <HAL_I2C_MspInit+0x198>)
 80025c0:	f013 fe3a 	bl	8016238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025d2:	6413      	str	r3, [r2, #64]	; 0x40
 80025d4:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025e0:	e083      	b.n	80026ea <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_I2C_MspInit+0x19c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d12d      	bne.n	8002648 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002608:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002612:	2301      	movs	r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800261a:	2304      	movs	r3, #4
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4835      	ldr	r0, [pc, #212]	; (80026fc <HAL_I2C_MspInit+0x198>)
 8002626:	f013 fe07 	bl	8016238 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	e050      	b.n	80026ea <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2d      	ldr	r2, [pc, #180]	; (8002704 <HAL_I2C_MspInit+0x1a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d14b      	bne.n	80026ea <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800268a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002690:	2312      	movs	r3, #18
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002694:	2301      	movs	r3, #1
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800269c:	2304      	movs	r3, #4
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4818      	ldr	r0, [pc, #96]	; (8002708 <HAL_I2C_MspInit+0x1a4>)
 80026a8:	f013 fdc6 	bl	8016238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b2:	2312      	movs	r3, #18
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026be:	2304      	movs	r3, #4
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4810      	ldr	r0, [pc, #64]	; (800270c <HAL_I2C_MspInit+0x1a8>)
 80026ca:	f013 fdb5 	bl	8016238 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
}
 80026ea:	bf00      	nop
 80026ec:	3738      	adds	r7, #56	; 0x38
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40005800 	.word	0x40005800
 8002704:	40005c00 	.word	0x40005c00
 8002708:	40020800 	.word	0x40020800
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_I2C_MspDeInit+0xb8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d116      	bne.n	8002750 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800272e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002732:	4827      	ldr	r0, [pc, #156]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 8002734:	f013 ff1c 	bl	8016570 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	4824      	ldr	r0, [pc, #144]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 800273e:	f013 ff17 	bl	8016570 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002742:	201f      	movs	r0, #31
 8002744:	f012 fe6e 	bl	8015424 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002748:	2020      	movs	r0, #32
 800274a:	f012 fe6b 	bl	8015424 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800274e:	e036      	b.n	80027be <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_I2C_MspDeInit+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d116      	bne.n	8002788 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002760:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276a:	4819      	ldr	r0, [pc, #100]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 800276c:	f013 ff00 	bl	8016570 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 8002776:	f013 fefb 	bl	8016570 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800277a:	2021      	movs	r0, #33	; 0x21
 800277c:	f012 fe52 	bl	8015424 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002780:	2022      	movs	r0, #34	; 0x22
 8002782:	f012 fe4f 	bl	8015424 <HAL_NVIC_DisableIRQ>
}
 8002786:	e01a      	b.n	80027be <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_I2C_MspDeInit+0xc8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d115      	bne.n	80027be <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800279e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a2:	480e      	ldr	r0, [pc, #56]	; (80027dc <HAL_I2C_MspDeInit+0xcc>)
 80027a4:	f013 fee4 	bl	8016570 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80027a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <HAL_I2C_MspDeInit+0xd0>)
 80027ae:	f013 fedf 	bl	8016570 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80027b2:	2048      	movs	r0, #72	; 0x48
 80027b4:	f012 fe36 	bl	8015424 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80027b8:	2049      	movs	r0, #73	; 0x49
 80027ba:	f012 fe33 	bl	8015424 <HAL_NVIC_DisableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40005800 	.word	0x40005800
 80027d8:	40005c00 	.word	0x40005c00
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b091      	sub	sp, #68	; 0x44
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8d      	ldr	r2, [pc, #564]	; (8002a28 <HAL_TIM_PWM_MspInit+0x244>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a8b      	ldr	r2, [pc, #556]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8002812:	e102      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d10e      	bne.n	800283c <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800283a:	e0ee      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <HAL_TIM_PWM_MspInit+0x24c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002862:	e0da      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a72      	ldr	r2, [pc, #456]	; (8002a34 <HAL_TIM_PWM_MspInit+0x250>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10e      	bne.n	800288c <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
 8002872:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a6d      	ldr	r2, [pc, #436]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800288a:	e0c6      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_TIM_PWM_MspInit+0x254>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a63      	ldr	r2, [pc, #396]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028b2:	e0b2      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_TIM_PWM_MspInit+0x258>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b57      	ldr	r3, [pc, #348]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80028da:	e09e      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_TIM_PWM_MspInit+0x25c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002902:	e08a      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_TIM_PWM_MspInit+0x260>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10e      	bne.n	800292c <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a45      	ldr	r2, [pc, #276]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
}
 800292a:	e076      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <HAL_TIM_PWM_MspInit+0x264>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	69fb      	ldr	r3, [r7, #28]
}
 8002952:	e062      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3c      	ldr	r2, [pc, #240]	; (8002a4c <HAL_TIM_PWM_MspInit+0x268>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10e      	bne.n	800297c <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	e04e      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_TIM_PWM_MspInit+0x26c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
}
 80029a2:	e03a      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_TIM_PWM_MspInit+0x270>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
}
 80029ca:	e026      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_TIM_PWM_MspInit+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
}
 80029f2:	e012      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_TIM_PWM_MspInit+0x278>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10d      	bne.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
}
 8002a1a:	bf00      	nop
 8002a1c:	3744      	adds	r7, #68	; 0x44
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40001000 	.word	0x40001000
 8002a40:	40001400 	.word	0x40001400
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40001c00 	.word	0x40001c00
 8002a5c:	40002000 	.word	0x40002000

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b091      	sub	sp, #68	; 0x44
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a8d      	ldr	r2, [pc, #564]	; (8002ca4 <HAL_TIM_Base_MspInit+0x244>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a76:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a8b      	ldr	r2, [pc, #556]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8002a8e:	e102      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a81      	ldr	r2, [pc, #516]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab6:	e0ee      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7b      	ldr	r2, [pc, #492]	; (8002cac <HAL_TIM_Base_MspInit+0x24c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a77      	ldr	r2, [pc, #476]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ade:	e0da      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a72      	ldr	r2, [pc, #456]	; (8002cb0 <HAL_TIM_Base_MspInit+0x250>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a6d      	ldr	r2, [pc, #436]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b06:	e0c6      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_TIM_Base_MspInit+0x254>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a63      	ldr	r2, [pc, #396]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002b2e:	e0b2      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <HAL_TIM_Base_MspInit+0x258>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a59      	ldr	r2, [pc, #356]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b56:	e09e      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <HAL_TIM_Base_MspInit+0x25c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b7e:	e08a      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4e      	ldr	r2, [pc, #312]	; (8002cc0 <HAL_TIM_Base_MspInit+0x260>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba6:	e076      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_TIM_Base_MspInit+0x264>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
}
 8002bce:	e062      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_TIM_Base_MspInit+0x268>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	e04e      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <HAL_TIM_Base_MspInit+0x26c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]
}
 8002c1e:	e03a      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_TIM_Base_MspInit+0x270>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
}
 8002c46:	e026      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_TIM_Base_MspInit+0x274>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	e012      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_Base_MspInit+0x278>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10d      	bne.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
}
 8002c96:	bf00      	nop
 8002c98:	3744      	adds	r7, #68	; 0x44
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40000c00 	.word	0x40000c00
 8002cb8:	40001000 	.word	0x40001000
 8002cbc:	40001400 	.word	0x40001400
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	40001800 	.word	0x40001800
 8002cd4:	40001c00 	.word	0x40001c00
 8002cd8:	40002000 	.word	0x40002000

08002cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a8c      	ldr	r2, [pc, #560]	; (8002f2c <HAL_UART_MspInit+0x250>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12d      	bne.n	8002d5a <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a8a      	ldr	r2, [pc, #552]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a83      	ldr	r2, [pc, #524]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d50:	4619      	mov	r1, r3
 8002d52:	4878      	ldr	r0, [pc, #480]	; (8002f34 <HAL_UART_MspInit+0x258>)
 8002d54:	f013 fa70 	bl	8016238 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002d58:	e12b      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_UART_MspInit+0x25c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d12c      	bne.n	8002dbe <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
 8002d68:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d90:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d9c:	2360      	movs	r3, #96	; 0x60
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dac:	2307      	movs	r3, #7
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002db4:	4619      	mov	r1, r3
 8002db6:	4861      	ldr	r0, [pc, #388]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002db8:	f013 fa3e 	bl	8016238 <HAL_GPIO_Init>
}
 8002dbc:	e0f9      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_UART_MspInit+0x264>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12d      	bne.n	8002e24 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a50      	ldr	r2, [pc, #320]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e12:	2307      	movs	r3, #7
 8002e14:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4847      	ldr	r0, [pc, #284]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002e1e:	f013 fa0b 	bl	8016238 <HAL_GPIO_Init>
}
 8002e22:	e0c6      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_UART_MspInit+0x268>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d12d      	bne.n	8002e8a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e80:	4619      	mov	r1, r3
 8002e82:	4831      	ldr	r0, [pc, #196]	; (8002f48 <HAL_UART_MspInit+0x26c>)
 8002e84:	f013 f9d8 	bl	8016238 <HAL_GPIO_Init>
}
 8002e88:	e093      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_UART_MspInit+0x270>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d15d      	bne.n	8002f50 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002efa:	2308      	movs	r3, #8
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4810      	ldr	r0, [pc, #64]	; (8002f48 <HAL_UART_MspInit+0x26c>)
 8002f06:	f013 f997 	bl	8016238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002f26:	f013 f987 	bl	8016238 <HAL_GPIO_Init>
}
 8002f2a:	e042      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40004800 	.word	0x40004800
 8002f44:	40004c00 	.word	0x40004c00
 8002f48:	40020800 	.word	0x40020800
 8002f4c:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_UART_MspInit+0x2e0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d12b      	bne.n	8002fb2 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f64:	f043 0320 	orr.w	r3, r3, #32
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <HAL_UART_MspInit+0x2e8>)
 8002fae:	f013 f943 	bl	8016238 <HAL_GPIO_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	3750      	adds	r7, #80	; 0x50
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020800 	.word	0x40020800

08002fc8 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b094      	sub	sp, #80	; 0x50
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a8c      	ldr	r2, [pc, #560]	; (8003218 <HAL_TIM_Encoder_MspInit+0x250>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12d      	bne.n	8003046 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fee:	4b8b      	ldr	r3, [pc, #556]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a8a      	ldr	r2, [pc, #552]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003022:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003034:	2301      	movs	r3, #1
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800303c:	4619      	mov	r1, r3
 800303e:	4878      	ldr	r0, [pc, #480]	; (8003220 <HAL_TIM_Encoder_MspInit+0x258>)
 8003040:	f013 f8fa 	bl	8016238 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8003044:	e12b      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d14b      	bne.n	80030e8 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
 8003054:	4b71      	ldr	r3, [pc, #452]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
 800308c:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	6313      	str	r3, [r2, #48]	; 0x30
 8003098:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b6:	2301      	movs	r3, #1
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030be:	4619      	mov	r1, r3
 80030c0:	4858      	ldr	r0, [pc, #352]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 80030c2:	f013 f8b9 	bl	8016238 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030c6:	2308      	movs	r3, #8
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	2300      	movs	r3, #0
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030d6:	2301      	movs	r3, #1
 80030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030de:	4619      	mov	r1, r3
 80030e0:	4851      	ldr	r0, [pc, #324]	; (8003228 <HAL_TIM_Encoder_MspInit+0x260>)
 80030e2:	f013 f8a9 	bl	8016238 <HAL_GPIO_Init>
}
 80030e6:	e0da      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_TIM_Encoder_MspInit+0x264>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12c      	bne.n	800314c <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a48      	ldr	r2, [pc, #288]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800313a:	2302      	movs	r3, #2
 800313c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003142:	4619      	mov	r1, r3
 8003144:	4837      	ldr	r0, [pc, #220]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003146:	f013 f877 	bl	8016238 <HAL_GPIO_Init>
}
 800314a:	e0a8      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_TIM_Encoder_MspInit+0x268>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12d      	bne.n	80031b2 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a28      	ldr	r2, [pc, #160]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800318e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031a0:	2302      	movs	r3, #2
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031a8:	4619      	mov	r1, r3
 80031aa:	4822      	ldr	r0, [pc, #136]	; (8003234 <HAL_TIM_Encoder_MspInit+0x26c>)
 80031ac:	f013 f844 	bl	8016238 <HAL_GPIO_Init>
}
 80031b0:	e075      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_TIM_Encoder_MspInit+0x270>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d13f      	bne.n	800323c <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6413      	str	r3, [r2, #64]	; 0x40
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6313      	str	r3, [r2, #48]	; 0x30
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031f4:	2303      	movs	r3, #3
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003204:	2302      	movs	r3, #2
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800320c:	4619      	mov	r1, r3
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003210:	f013 f812 	bl	8016238 <HAL_GPIO_Init>
}
 8003214:	e043      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40023800 	.word	0x40023800
 8003220:	40021000 	.word	0x40021000
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d12b      	bne.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6453      	str	r3, [r2, #68]	; 0x44
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800328e:	2303      	movs	r3, #3
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <HAL_TIM_Encoder_MspInit+0x2e8>)
 800329a:	f012 ffcd 	bl	8016238 <HAL_GPIO_Init>
}
 800329e:	bf00      	nop
 80032a0:	3750      	adds	r7, #80	; 0x50
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40010400 	.word	0x40010400
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800

080032b4 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b094      	sub	sp, #80	; 0x50
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 0320 	add.w	r3, r7, #32
 80032be:	2230      	movs	r2, #48	; 0x30
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f01b fd3a 	bl	801ed3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <SystemClock_Config+0xd0>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <SystemClock_Config+0xd0>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	; 0x40
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <SystemClock_Config+0xd0>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f4:	2300      	movs	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <SystemClock_Config+0xd4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <SystemClock_Config+0xd4>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <SystemClock_Config+0xd4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331a:	2302      	movs	r3, #2
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003324:	2308      	movs	r3, #8
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003328:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800332e:	2302      	movs	r3, #2
 8003330:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003332:	2304      	movs	r3, #4
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	4618      	mov	r0, r3
 800333c:	f015 fa8e 	bl	801885c <HAL_RCC_OscConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003346:	f002 fa51 	bl	80057ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334a:	230f      	movs	r3, #15
 800334c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334e:	2302      	movs	r3, #2
 8003350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800335a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800335c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	2105      	movs	r1, #5
 8003368:	4618      	mov	r0, r3
 800336a:	f015 fce7 	bl	8018d3c <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003374:	f002 fa3a 	bl	80057ec <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003378:	f015 fdc6 	bl	8018f08 <HAL_RCC_EnableCSS>
}
 800337c:	bf00      	nop
 800337e:	3750      	adds	r7, #80	; 0x50
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000

0800338c <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a9b      	ldr	r2, [pc, #620]	; (800361c <TIMxInit+0x290>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d105      	bne.n	80033be <TIMxInit+0x32>
		htimx->Instance = TIM1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a9a      	ldr	r2, [pc, #616]	; (8003620 <TIMxInit+0x294>)
 80033b6:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80033b8:	2319      	movs	r3, #25
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e081      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a98      	ldr	r2, [pc, #608]	; (8003624 <TIMxInit+0x298>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d106      	bne.n	80033d4 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033cc:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 80033ce:	231c      	movs	r3, #28
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e076      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a94      	ldr	r2, [pc, #592]	; (8003628 <TIMxInit+0x29c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d105      	bne.n	80033e8 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a93      	ldr	r2, [pc, #588]	; (800362c <TIMxInit+0x2a0>)
 80033e0:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 80033e2:	231d      	movs	r3, #29
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e06c      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a91      	ldr	r2, [pc, #580]	; (8003630 <TIMxInit+0x2a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d105      	bne.n	80033fc <TIMxInit+0x70>
		htimx->Instance = TIM4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a90      	ldr	r2, [pc, #576]	; (8003634 <TIMxInit+0x2a8>)
 80033f4:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 80033f6:	231e      	movs	r3, #30
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e062      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a8e      	ldr	r2, [pc, #568]	; (8003638 <TIMxInit+0x2ac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d105      	bne.n	8003410 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a8d      	ldr	r2, [pc, #564]	; (800363c <TIMxInit+0x2b0>)
 8003408:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800340a:	2332      	movs	r3, #50	; 0x32
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e058      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <TIMxInit+0x2b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d105      	bne.n	8003424 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a8a      	ldr	r2, [pc, #552]	; (8003644 <TIMxInit+0x2b8>)
 800341c:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 800341e:	2336      	movs	r3, #54	; 0x36
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e04e      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a88      	ldr	r2, [pc, #544]	; (8003648 <TIMxInit+0x2bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d105      	bne.n	8003438 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a87      	ldr	r2, [pc, #540]	; (800364c <TIMxInit+0x2c0>)
 8003430:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8003432:	2337      	movs	r3, #55	; 0x37
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e044      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a85      	ldr	r2, [pc, #532]	; (8003650 <TIMxInit+0x2c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d105      	bne.n	800344c <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a84      	ldr	r2, [pc, #528]	; (8003654 <TIMxInit+0x2c8>)
 8003444:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8003446:	232e      	movs	r3, #46	; 0x2e
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e03a      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a82      	ldr	r2, [pc, #520]	; (8003658 <TIMxInit+0x2cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d105      	bne.n	8003460 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <TIMxInit+0x2d0>)
 8003458:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 800345a:	2318      	movs	r3, #24
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e030      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a7f      	ldr	r2, [pc, #508]	; (8003660 <TIMxInit+0x2d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d105      	bne.n	8003474 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <TIMxInit+0x2d8>)
 800346c:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 800346e:	2319      	movs	r3, #25
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e026      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a7c      	ldr	r2, [pc, #496]	; (8003668 <TIMxInit+0x2dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d105      	bne.n	8003488 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a7b      	ldr	r2, [pc, #492]	; (800366c <TIMxInit+0x2e0>)
 8003480:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8003482:	231a      	movs	r3, #26
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e01c      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a79      	ldr	r2, [pc, #484]	; (8003670 <TIMxInit+0x2e4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d105      	bne.n	800349c <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a78      	ldr	r2, [pc, #480]	; (8003674 <TIMxInit+0x2e8>)
 8003494:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8003496:	232b      	movs	r3, #43	; 0x2b
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e012      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a76      	ldr	r2, [pc, #472]	; (8003678 <TIMxInit+0x2ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d105      	bne.n	80034b0 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a75      	ldr	r2, [pc, #468]	; (800367c <TIMxInit+0x2f0>)
 80034a8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 80034aa:	232c      	movs	r3, #44	; 0x2c
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e008      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a73      	ldr	r2, [pc, #460]	; (8003680 <TIMxInit+0x2f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d104      	bne.n	80034c2 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a72      	ldr	r2, [pc, #456]	; (8003684 <TIMxInit+0x2f8>)
 80034bc:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 80034be:	232d      	movs	r3, #45	; 0x2d
 80034c0:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 80034c2:	883a      	ldrh	r2, [r7, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f015 ff86 	bl	80193ec <HAL_TIM_Base_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <TIMxInit+0x15e>
	{
		Error_Handler();
 80034e6:	f002 f981 	bl	80057ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f016 fee7 	bl	801a2cc <HAL_TIMEx_MasterConfigSynchronization>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003504:	f002 f972 	bl	80057ec <Error_Handler>
	}

	if(htimx == &htim1){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a44      	ldr	r2, [pc, #272]	; (800361c <TIMxInit+0x290>)
 800350c:	4293      	cmp	r3, r2
 800350e:	f000 80cb 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a43      	ldr	r2, [pc, #268]	; (8003624 <TIMxInit+0x298>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 80c6 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a42      	ldr	r2, [pc, #264]	; (8003628 <TIMxInit+0x29c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f000 80c1 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a41      	ldr	r2, [pc, #260]	; (8003630 <TIMxInit+0x2a4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f000 80bc 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a41      	ldr	r2, [pc, #260]	; (8003638 <TIMxInit+0x2ac>)
 8003534:	4293      	cmp	r3, r2
 8003536:	f000 80b7 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a40      	ldr	r2, [pc, #256]	; (8003640 <TIMxInit+0x2b4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	2200      	movs	r2, #0
 8003548:	2107      	movs	r1, #7
 800354a:	4618      	mov	r0, r3
 800354c:	f011 ff40 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	b25b      	sxtb	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	f011 ff57 	bl	8015408 <HAL_NVIC_EnableIRQ>
 800355a:	e0a5      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIMxInit+0x2bc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	2200      	movs	r2, #0
 800356a:	210d      	movs	r1, #13
 800356c:	4618      	mov	r0, r3
 800356e:	f011 ff2f 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	b25b      	sxtb	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f011 ff46 	bl	8015408 <HAL_NVIC_EnableIRQ>
 800357c:	e094      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a33      	ldr	r2, [pc, #204]	; (8003650 <TIMxInit+0x2c4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 8090 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a33      	ldr	r2, [pc, #204]	; (8003658 <TIMxInit+0x2cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	f000 808b 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a32      	ldr	r2, [pc, #200]	; (8003660 <TIMxInit+0x2d4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	b25b      	sxtb	r3, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	210e      	movs	r1, #14
 80035a2:	4618      	mov	r0, r3
 80035a4:	f011 ff14 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f011 ff2b 	bl	8015408 <HAL_NVIC_EnableIRQ>
 80035b2:	e079      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <TIMxInit+0x2dc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	210e      	movs	r1, #14
 80035c4:	4618      	mov	r0, r3
 80035c6:	f011 ff03 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f011 ff1a 	bl	8015408 <HAL_NVIC_EnableIRQ>
 80035d4:	e068      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a25      	ldr	r2, [pc, #148]	; (8003670 <TIMxInit+0x2e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	210e      	movs	r1, #14
 80035e6:	4618      	mov	r0, r3
 80035e8:	f011 fef2 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f011 ff09 	bl	8015408 <HAL_NVIC_EnableIRQ>
 80035f6:	e057      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <TIMxInit+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d143      	bne.n	8003688 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	2200      	movs	r2, #0
 8003606:	210e      	movs	r1, #14
 8003608:	4618      	mov	r0, r3
 800360a:	f011 fee1 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	b25b      	sxtb	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f011 fef8 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003618:	e046      	b.n	80036a8 <TIMxInit+0x31c>
 800361a:	bf00      	nop
 800361c:	20006b30 	.word	0x20006b30
 8003620:	40010000 	.word	0x40010000
 8003624:	20006c34 	.word	0x20006c34
 8003628:	20006880 	.word	0x20006880
 800362c:	40000400 	.word	0x40000400
 8003630:	200066bc 	.word	0x200066bc
 8003634:	40000800 	.word	0x40000800
 8003638:	20006840 	.word	0x20006840
 800363c:	40000c00 	.word	0x40000c00
 8003640:	20006af0 	.word	0x20006af0
 8003644:	40001000 	.word	0x40001000
 8003648:	20006d94 	.word	0x20006d94
 800364c:	40001400 	.word	0x40001400
 8003650:	2000667c 	.word	0x2000667c
 8003654:	40010400 	.word	0x40010400
 8003658:	20006b70 	.word	0x20006b70
 800365c:	40014000 	.word	0x40014000
 8003660:	2000679c 	.word	0x2000679c
 8003664:	40014400 	.word	0x40014400
 8003668:	20006a48 	.word	0x20006a48
 800366c:	40014800 	.word	0x40014800
 8003670:	20006d54 	.word	0x20006d54
 8003674:	40001800 	.word	0x40001800
 8003678:	20006964 	.word	0x20006964
 800367c:	40001c00 	.word	0x40001c00
 8003680:	20006d14 	.word	0x20006d14
 8003684:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <TIMxInit+0x330>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10b      	bne.n	80036a8 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	b25b      	sxtb	r3, r3
 8003694:	2200      	movs	r2, #0
 8003696:	210e      	movs	r1, #14
 8003698:	4618      	mov	r0, r3
 800369a:	f011 fe99 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f011 feb0 	bl	8015408 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f015 feca 	bl	8019442 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f015 feeb 	bl	801948a <HAL_TIM_Base_Start_IT>

}
 80036b4:	bf00      	nop
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20006d14 	.word	0x20006d14

080036c0 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <UARTInit+0x1cc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d107      	bne.n	80036e6 <UARTInit+0x26>
		huartx->Instance = USART1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <UARTInit+0x1d0>)
 80036da:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 80036dc:	2325      	movs	r3, #37	; 0x25
 80036de:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 80036e0:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <UARTInit+0x1d4>)
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e036      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart2){
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a6b      	ldr	r2, [pc, #428]	; (8003898 <UARTInit+0x1d8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d107      	bne.n	80036fe <UARTInit+0x3e>
		huartx->Instance = USART2;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	; (800389c <UARTInit+0x1dc>)
 80036f2:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 80036f4:	2326      	movs	r3, #38	; 0x26
 80036f6:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 80036f8:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <UARTInit+0x1e0>)
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e02a      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart3){
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <UARTInit+0x1e4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d107      	bne.n	8003716 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <UARTInit+0x1e8>)
 800370a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 800370c:	2327      	movs	r3, #39	; 0x27
 800370e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <UARTInit+0x1ec>)
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e01e      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <UARTInit+0x1f0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d107      	bne.n	800372e <UARTInit+0x6e>
		huartx->Instance = UART4;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <UARTInit+0x1f4>)
 8003722:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003724:	2334      	movs	r3, #52	; 0x34
 8003726:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003728:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <UARTInit+0x1f8>)
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e012      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a62      	ldr	r2, [pc, #392]	; (80038bc <UARTInit+0x1fc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d107      	bne.n	8003746 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <UARTInit+0x200>)
 800373a:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 800373c:	2335      	movs	r3, #53	; 0x35
 800373e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <UARTInit+0x204>)
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e006      	b.n	8003754 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a5f      	ldr	r2, [pc, #380]	; (80038c8 <UARTInit+0x208>)
 800374a:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 800374c:	2347      	movs	r3, #71	; 0x47
 800374e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8003750:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <UARTInit+0x20c>)
 8003752:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f016 fe34 	bl	801a3ec <HAL_UART_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <UARTInit+0xce>
	{
		Error_Handler();
 800378a:	f002 f82f 	bl	80057ec <Error_Handler>
	}

	if(rxstate == ENABLE){
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d176      	bne.n	8003882 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <UARTInit+0x1d8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d119      	bne.n	80037d0 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800379c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2105      	movs	r1, #5
 80037a4:	4618      	mov	r0, r3
 80037a6:	f011 fe13 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f011 fe46 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f011 fe25 	bl	8015408 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80037ce:	e058      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <UARTInit+0x1e4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d119      	bne.n	800380c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 80037d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037dc:	2200      	movs	r2, #0
 80037de:	2104      	movs	r1, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f011 fdf5 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f011 fe28 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f011 fe07 	bl	8015408 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	60da      	str	r2, [r3, #12]
}
 800380a:	e03a      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <UARTInit+0x1f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d119      	bne.n	8003848 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003818:	2200      	movs	r2, #0
 800381a:	2106      	movs	r1, #6
 800381c:	4618      	mov	r0, r3
 800381e:	f011 fdd7 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003826:	4618      	mov	r0, r3
 8003828:	f011 fe0a 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800382c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003830:	4618      	mov	r0, r3
 8003832:	f011 fde9 	bl	8015408 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	60da      	str	r2, [r3, #12]
}
 8003846:	e01c      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <UARTInit+0x1fc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d118      	bne.n	8003882 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8003850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003854:	2200      	movs	r2, #0
 8003856:	210e      	movs	r1, #14
 8003858:	4618      	mov	r0, r3
 800385a:	f011 fdb9 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800385e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003862:	4618      	mov	r0, r3
 8003864:	f011 fdec 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800386c:	4618      	mov	r0, r3
 800386e:	f011 fdcb 	bl	8015408 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	60da      	str	r2, [r3, #12]
}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200069a4 	.word	0x200069a4
 8003890:	40011000 	.word	0x40011000
 8003894:	20006678 	.word	0x20006678
 8003898:	20006c74 	.word	0x20006c74
 800389c:	40004400 	.word	0x40004400
 80038a0:	20006a88 	.word	0x20006a88
 80038a4:	2000675c 	.word	0x2000675c
 80038a8:	40004800 	.word	0x40004800
 80038ac:	200068c1 	.word	0x200068c1
 80038b0:	20006bf4 	.word	0x20006bf4
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	20006bf0 	.word	0x20006bf0
 80038bc:	200068c4 	.word	0x200068c4
 80038c0:	40005000 	.word	0x40005000
 80038c4:	2000683c 	.word	0x2000683c
 80038c8:	40011400 	.word	0x40011400
 80038cc:	200068c0 	.word	0x200068c0

080038d0 <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	4b5a      	ldr	r3, [pc, #360]	; (8003a4c <UARTx_DMA_Rx_Init+0x17c>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	4a59      	ldr	r2, [pc, #356]	; (8003a4c <UARTx_DMA_Rx_Init+0x17c>)
 80038e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ea:	6313      	str	r3, [r2, #48]	; 0x30
 80038ec:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <UARTx_DMA_Rx_Init+0x17c>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <UARTx_DMA_Rx_Init+0x180>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d119      	bne.n	8003934 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 8003900:	2310      	movs	r3, #16
 8003902:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a53      	ldr	r2, [pc, #332]	; (8003a54 <UARTx_DMA_Rx_Init+0x184>)
 8003908:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 800390a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800390e:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8003910:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003914:	2200      	movs	r2, #0
 8003916:	2105      	movs	r1, #5
 8003918:	4618      	mov	r0, r3
 800391a:	f011 fd59 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800391e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003922:	4618      	mov	r0, r3
 8003924:	f011 fd8c 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003928:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800392c:	4618      	mov	r0, r3
 800392e:	f011 fd6b 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003932:	e058      	b.n	80039e6 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <UARTx_DMA_Rx_Init+0x188>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d119      	bne.n	8003970 <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 800393c:	230c      	movs	r3, #12
 800393e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a46      	ldr	r2, [pc, #280]	; (8003a5c <UARTx_DMA_Rx_Init+0x18c>)
 8003944:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003946:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800394a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 800394c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003950:	2200      	movs	r2, #0
 8003952:	2104      	movs	r1, #4
 8003954:	4618      	mov	r0, r3
 8003956:	f011 fd3b 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800395a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800395e:	4618      	mov	r0, r3
 8003960:	f011 fd6e 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003964:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003968:	4618      	mov	r0, r3
 800396a:	f011 fd4d 	bl	8015408 <HAL_NVIC_EnableIRQ>
 800396e:	e03a      	b.n	80039e6 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <UARTx_DMA_Rx_Init+0x190>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d119      	bne.n	80039ac <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 8003978:	230d      	movs	r3, #13
 800397a:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <UARTx_DMA_Rx_Init+0x194>)
 8003980:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8003982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003986:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003988:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800398c:	2200      	movs	r2, #0
 800398e:	2106      	movs	r1, #6
 8003990:	4618      	mov	r0, r3
 8003992:	f011 fd1d 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003996:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800399a:	4618      	mov	r0, r3
 800399c:	f011 fd50 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80039a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f011 fd2f 	bl	8015408 <HAL_NVIC_EnableIRQ>
 80039aa:	e01c      	b.n	80039e6 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a2e      	ldr	r2, [pc, #184]	; (8003a68 <UARTx_DMA_Rx_Init+0x198>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d118      	bne.n	80039e6 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 80039b4:	230b      	movs	r3, #11
 80039b6:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <UARTx_DMA_Rx_Init+0x19c>)
 80039bc:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 80039be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039c2:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 80039c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039c8:	2200      	movs	r2, #0
 80039ca:	210e      	movs	r1, #14
 80039cc:	4618      	mov	r0, r3
 80039ce:	f011 fcff 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 80039d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f011 fd32 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 80039dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f011 fd11 	bl	8015408 <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 80039e6:	2200      	movs	r2, #0
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f7ff fe68 	bl	80036c0 <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2200      	movs	r2, #0
 8003a00:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a08:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2200      	movs	r2, #0
 8003a14:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2200      	movs	r2, #0
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8003a28:	68b8      	ldr	r0, [r7, #8]
 8003a2a:	f011 fd17 	bl	801545c <HAL_DMA_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8003a34:	f001 feda 	bl	80057ec <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003a44:	bf00      	nop
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	20006618 	.word	0x20006618
 8003a54:	40026088 	.word	0x40026088
 8003a58:	200066fc 	.word	0x200066fc
 8003a5c:	40026028 	.word	0x40026028
 8003a60:	200065b8 	.word	0x200065b8
 8003a64:	40026040 	.word	0x40026040
 8003a68:	20006cb4 	.word	0x20006cb4
 8003a6c:	40026010 	.word	0x40026010

08003a70 <UARTPrintString>:
 * 						  s			,buffer or string
 * Function Return		: None
 * Function Example		: UARTPrintString(huart4, buffer);
 */
void UARTPrintString(UART_HandleTypeDef* huartx, char s[])
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t *)s, strlen(s), 25);
 8003a7a:	6838      	ldr	r0, [r7, #0]
 8003a7c:	f7fc fba8 	bl	80001d0 <strlen>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	2319      	movs	r3, #25
 8003a86:	6839      	ldr	r1, [r7, #0]
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f016 fcfc 	bl	801a486 <HAL_UART_Transmit>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	2228      	movs	r2, #40	; 0x28
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f01b f941 	bl	801ed3c <memset>

	if(hcanx == &hcan1){
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a53      	ldr	r2, [pc, #332]	; (8003c0c <CANxInit+0x174>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d103      	bne.n	8003aca <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <CANxInit+0x178>)
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e002      	b.n	8003ad0 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a51      	ldr	r2, [pc, #324]	; (8003c14 <CANxInit+0x17c>)
 8003ace:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8003ad0:	897a      	ldrh	r2, [r7, #10]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8003ae2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d108      	bne.n	8003afc <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8003af0:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003af8:	615a      	str	r2, [r3, #20]
 8003afa:	e00b      	b.n	8003b14 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8003afc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8003b0a:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8003b12:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f010 fcc1 	bl	80144c0 <HAL_CAN_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <CANxInit+0xb0>
	{
		Error_Handler();
 8003b44:	f001 fe52 	bl	80057ec <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003b48:	230e      	movs	r3, #14
 8003b4a:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 8003b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b66:	015b      	lsls	r3, r3, #5
 8003b68:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8003b6e:	2301      	movs	r3, #1
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003b72:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003b78:	f107 0310 	add.w	r3, r7, #16
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f010 fd9a 	bl	80146b8 <HAL_CAN_ConfigFilter>


	if(hcanx == &hcan1){
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a21      	ldr	r2, [pc, #132]	; (8003c0c <CANxInit+0x174>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d11c      	bne.n	8003bc6 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10c      	bne.n	8003bac <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	210e      	movs	r1, #14
 8003b96:	2014      	movs	r0, #20
 8003b98:	f011 fc1a 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003b9c:	2014      	movs	r0, #20
 8003b9e:	f011 fc33 	bl	8015408 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f011 f8cd 	bl	8014d44 <HAL_CAN_ActivateNotification>
 8003baa:	e028      	b.n	8003bfe <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003bac:	2200      	movs	r2, #0
 8003bae:	210e      	movs	r1, #14
 8003bb0:	2015      	movs	r0, #21
 8003bb2:	f011 fc0d 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003bb6:	2015      	movs	r0, #21
 8003bb8:	f011 fc26 	bl	8015408 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003bbc:	2110      	movs	r1, #16
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f011 f8c0 	bl	8014d44 <HAL_CAN_ActivateNotification>
 8003bc4:	e01b      	b.n	8003bfe <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	210e      	movs	r1, #14
 8003bd0:	2040      	movs	r0, #64	; 0x40
 8003bd2:	f011 fbfd 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003bd6:	2040      	movs	r0, #64	; 0x40
 8003bd8:	f011 fc16 	bl	8015408 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003bdc:	2102      	movs	r1, #2
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f011 f8b0 	bl	8014d44 <HAL_CAN_ActivateNotification>
 8003be4:	e00b      	b.n	8003bfe <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	210e      	movs	r1, #14
 8003bea:	2041      	movs	r0, #65	; 0x41
 8003bec:	f011 fbf0 	bl	80153d0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003bf0:	2041      	movs	r0, #65	; 0x41
 8003bf2:	f011 fc09 	bl	8015408 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f011 f8a3 	bl	8014d44 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f010 fe3a 	bl	8014878 <HAL_CAN_Start>

}
 8003c04:	bf00      	nop
 8003c06:	3738      	adds	r7, #56	; 0x38
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20007128 	.word	0x20007128
 8003c10:	40006400 	.word	0x40006400
 8003c14:	40006800 	.word	0x40006800

08003c18 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b090      	sub	sp, #64	; 0x40
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	70fb      	strb	r3, [r7, #3]
	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003c26:	bf00      	nop
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f010 ff44 	bl	8014ab6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f9      	beq.n	8003c28 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003c56:	e00c      	b.n	8003c72 <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003c60:	1c51      	adds	r1, r2, #1
 8003c62:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003c64:	4611      	mov	r1, r2
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c6c:	440b      	add	r3, r1
 8003c6e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003c72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c74:	1e5a      	subs	r2, r3, #1
 8003c76:	873a      	strh	r2, [r7, #56]	; 0x38
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ed      	bne.n	8003c58 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 8003c7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00f      	beq.n	8003ca2 <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 8003c82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c84:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003c86:	f107 031c 	add.w	r3, r7, #28
 8003c8a:	f107 0214 	add.w	r2, r7, #20
 8003c8e:	f107 0120 	add.w	r1, r7, #32
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f010 fe34 	bl	8014900 <HAL_CAN_AddTxMessage>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <CAN_TxMsg+0x8a>
			Error_Handler();
 8003c9e:	f001 fda5 	bl	80057ec <Error_Handler>
		}

	}

	return(canMailbox);
 8003ca2:	69fb      	ldr	r3, [r7, #28]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3740      	adds	r7, #64	; 0x40
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <esp32StopSend>:
	char espBuff[1] = "c";
//	UARTPrintString(esp32.huart, espBuff);

}

void esp32StopSend(void){
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
	char espBuff[1] = "s";
 8003cb2:	2373      	movs	r3, #115	; 0x73
 8003cb4:	713b      	strb	r3, [r7, #4]
//	UARTPrintString(esp32.huart, espBuff);
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <esp32Handler>:

void esp32Handler(void){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	static uint8_t state=0;
	switch(state){
 8003cc8:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <esp32Handler+0x94>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <esp32Handler+0x12>
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d017      	beq.n	8003d04 <esp32Handler+0x40>
		}
		state = 0;
		HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
		break;
	}
}
 8003cd4:	e03e      	b.n	8003d54 <esp32Handler+0x90>
		if(esp32.buffer[0] == 0x03){
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <esp32Handler+0x98>)
 8003cd8:	791b      	ldrb	r3, [r3, #4]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d10a      	bne.n	8003cf4 <esp32Handler+0x30>
			state = 1;
 8003cde:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <esp32Handler+0x94>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 3);
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <esp32Handler+0x98>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	491d      	ldr	r1, [pc, #116]	; (8003d60 <esp32Handler+0x9c>)
 8003cec:	4618      	mov	r0, r3
 8003cee:	f016 fc63 	bl	801a5b8 <HAL_UART_Receive_IT>
		break;
 8003cf2:	e02f      	b.n	8003d54 <esp32Handler+0x90>
			HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <esp32Handler+0x98>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4919      	ldr	r1, [pc, #100]	; (8003d60 <esp32Handler+0x9c>)
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f016 fc5b 	bl	801a5b8 <HAL_UART_Receive_IT>
		break;
 8003d02:	e027      	b.n	8003d54 <esp32Handler+0x90>
		if(esp32.buffer[2] == 0x24){
 8003d04:	4b15      	ldr	r3, [pc, #84]	; (8003d5c <esp32Handler+0x98>)
 8003d06:	799b      	ldrb	r3, [r3, #6]
 8003d08:	2b24      	cmp	r3, #36	; 0x24
 8003d0a:	d118      	bne.n	8003d3e <esp32Handler+0x7a>
			esp32.sample[esp32.sample_count++] = esp32.buffer[0];
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <esp32Handler+0x98>)
 8003d0e:	7e1b      	ldrb	r3, [r3, #24]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	b2d1      	uxtb	r1, r2
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <esp32Handler+0x98>)
 8003d16:	7611      	strb	r1, [r2, #24]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <esp32Handler+0x98>)
 8003d1c:	791a      	ldrb	r2, [r3, #4]
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <esp32Handler+0x98>)
 8003d20:	440b      	add	r3, r1
 8003d22:	765a      	strb	r2, [r3, #25]
			if(esp32.sample_count>20){
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <esp32Handler+0x98>)
 8003d26:	7e1b      	ldrb	r3, [r3, #24]
 8003d28:	2b14      	cmp	r3, #20
 8003d2a:	d908      	bls.n	8003d3e <esp32Handler+0x7a>
				esp32StopSend();
 8003d2c:	f7ff ffbe 	bl	8003cac <esp32StopSend>
				esp32.data_ready=1;
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <esp32Handler+0x98>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				esp32.sample_count=0;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <esp32Handler+0x98>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	761a      	strb	r2, [r3, #24]
		state = 0;
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <esp32Handler+0x94>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <esp32Handler+0x98>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	4905      	ldr	r1, [pc, #20]	; (8003d60 <esp32Handler+0x9c>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f016 fc33 	bl	801a5b8 <HAL_UART_Receive_IT>
		break;
 8003d52:	bf00      	nop
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	200008b8 	.word	0x200008b8
 8003d5c:	2000aa88 	.word	0x2000aa88
 8003d60:	2000aa8c 	.word	0x2000aa8c

08003d64 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	4b9e      	ldr	r3, [pc, #632]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d82:	6313      	str	r3, [r2, #48]	; 0x30
 8003d84:	4b9b      	ldr	r3, [pc, #620]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a99      	ldr	r2, [pc, #612]	; (8003ff8 <I2CX_DMA_RX_Init+0x294>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d11d      	bne.n	8003dd4 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a98      	ldr	r2, [pc, #608]	; (8003ffc <I2CX_DMA_RX_Init+0x298>)
 8003d9c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a97      	ldr	r2, [pc, #604]	; (8004000 <I2CX_DMA_RX_Init+0x29c>)
 8003da2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003da4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003daa:	230b      	movs	r3, #11
 8003dac:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003dae:	2320      	movs	r3, #32
 8003db0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003db2:	231f      	movs	r3, #31
 8003db4:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	4b8e      	ldr	r3, [pc, #568]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a8d      	ldr	r2, [pc, #564]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ff4 <I2CX_DMA_RX_Init+0x290>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	e022      	b.n	8003e1a <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a8b      	ldr	r2, [pc, #556]	; (8004004 <I2CX_DMA_RX_Init+0x2a0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d10f      	bne.n	8003dfc <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a8a      	ldr	r2, [pc, #552]	; (8004008 <I2CX_DMA_RX_Init+0x2a4>)
 8003de0:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a89      	ldr	r2, [pc, #548]	; (800400c <I2CX_DMA_RX_Init+0x2a8>)
 8003de6:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003de8:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003dec:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003dee:	230e      	movs	r3, #14
 8003df0:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003df2:	2322      	movs	r3, #34	; 0x22
 8003df4:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003df6:	2321      	movs	r3, #33	; 0x21
 8003df8:	777b      	strb	r3, [r7, #29]
 8003dfa:	e00e      	b.n	8003e1a <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a84      	ldr	r2, [pc, #528]	; (8004010 <I2CX_DMA_RX_Init+0x2ac>)
 8003e00:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4a83      	ldr	r2, [pc, #524]	; (8004014 <I2CX_DMA_RX_Init+0x2b0>)
 8003e06:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003e08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003e0c:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003e0e:	230d      	movs	r3, #13
 8003e10:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003e12:	2349      	movs	r3, #73	; 0x49
 8003e14:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003e16:	2348      	movs	r3, #72	; 0x48
 8003e18:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e32:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e4c:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2200      	movs	r2, #0
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2203      	movs	r2, #3
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	f011 faf6 	bl	801545c <HAL_DMA_Init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003e76:	f001 fcb9 	bl	80057ec <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a5b      	ldr	r2, [pc, #364]	; (8003ff8 <I2CX_DMA_RX_Init+0x294>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d111      	bne.n	8003eb2 <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003e92:	2200      	movs	r2, #0
 8003e94:	210a      	movs	r1, #10
 8003e96:	4618      	mov	r0, r3
 8003e98:	f011 fa9a 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003e9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f011 facd 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f011 faac 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003eb0:	e026      	b.n	8003f00 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a53      	ldr	r2, [pc, #332]	; (8004004 <I2CX_DMA_RX_Init+0x2a0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	210e      	movs	r1, #14
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f011 fa84 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f011 fab7 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003ed2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f011 fa96 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003edc:	e010      	b.n	8003f00 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003ede:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	210e      	movs	r1, #14
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f011 fa72 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003eec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f011 faa5 	bl	8015440 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003ef6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f011 fa84 	bl	8015408 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	461a      	mov	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f1c:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a2f      	ldr	r2, [pc, #188]	; (8003ff8 <I2CX_DMA_RX_Init+0x294>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d118      	bne.n	8003f70 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003f3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f011 fa42 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003f4c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f011 fa59 	bl	8015408 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003f56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2108      	movs	r1, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f011 fa36 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003f64:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f011 fa4d 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003f6e:	e034      	b.n	8003fda <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a24      	ldr	r2, [pc, #144]	; (8004004 <I2CX_DMA_RX_Init+0x2a0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d118      	bne.n	8003faa <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003f78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	210e      	movs	r1, #14
 8003f80:	4618      	mov	r0, r3
 8003f82:	f011 fa25 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003f86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f011 fa3c 	bl	8015408 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003f90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003f94:	2200      	movs	r2, #0
 8003f96:	210e      	movs	r1, #14
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f011 fa19 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003f9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f011 fa30 	bl	8015408 <HAL_NVIC_EnableIRQ>
 8003fa8:	e017      	b.n	8003fda <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003faa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	210e      	movs	r1, #14
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f011 fa0c 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003fb8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f011 fa23 	bl	8015408 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003fc2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	210e      	movs	r1, #14
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f011 fa00 	bl	80153d0 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003fd0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f011 fa17 	bl	8015408 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f012 fbf6 	bl	80167cc <HAL_I2C_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003fe6:	f001 fc01 	bl	80057ec <Error_Handler>
	}
}
 8003fea:	bf00      	nop
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	200077ac 	.word	0x200077ac
 8003ffc:	40005400 	.word	0x40005400
 8004000:	40026010 	.word	0x40026010
 8004004:	20007804 	.word	0x20007804
 8004008:	40005800 	.word	0x40005800
 800400c:	40026058 	.word	0x40026058
 8004010:	40005c00 	.word	0x40005c00
 8004014:	40026040 	.word	0x40026040

08004018 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 800401c:	4802      	ldr	r0, [pc, #8]	; (8004028 <I2C2_EV_IRQHandler+0x10>)
 800401e:	f012 fe5f 	bl	8016ce0 <HAL_I2C_EV_IRQHandler>


}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20007804 	.word	0x20007804

0800402c <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8004030:	4802      	ldr	r0, [pc, #8]	; (800403c <I2C2_ER_IRQHandler+0x10>)
 8004032:	f012 ffc2 	bl	8016fba <HAL_I2C_ER_IRQHandler>


}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	20007804 	.word	0x20007804

08004040 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8004044:	4802      	ldr	r0, [pc, #8]	; (8004050 <I2C3_EV_IRQHandler+0x10>)
 8004046:	f012 fe4b 	bl	8016ce0 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2000748c 	.word	0x2000748c

08004054 <KalmanFilterInit>:
 *
 *
 * */

void KalmanFilterInit(uint8_t  kalman_loop,  uint16_t* kalman_input,float* kalman_output,
						float mea_e, float est_e, float q, KALMANFILTER_t *kalmanfilter){
 8004054:	b480      	push	{r7}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	61b9      	str	r1, [r7, #24]
 800405c:	617a      	str	r2, [r7, #20]
 800405e:	ed87 0a04 	vstr	s0, [r7, #16]
 8004062:	edc7 0a03 	vstr	s1, [r7, #12]
 8004066:	ed87 1a02 	vstr	s2, [r7, #8]
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	4603      	mov	r3, r0
 800406e:	77fb      	strb	r3, [r7, #31]

	kalmanfilter->kalman_input = kalman_input;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	61da      	str	r2, [r3, #28]
	kalmanfilter->kalman_output= kalman_output;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	621a      	str	r2, [r3, #32]
	kalmanfilter->kalman_loop  = kalman_loop;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7ffa      	ldrb	r2, [r7, #31]
 8004080:	761a      	strb	r2, [r3, #24]

	kalmanfilter->_err_measure = mea_e;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	601a      	str	r2, [r3, #0]
	kalmanfilter->_err_estimate = est_e;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	605a      	str	r2, [r3, #4]
	kalmanfilter->_q = q;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]
	kalmanfilter->_current_estimate = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	60da      	str	r2, [r3, #12]
	kalmanfilter->_last_estimate = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
	kalmanfilter->_kalman_gain = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	615a      	str	r2, [r3, #20]
}
 80040ac:	bf00      	nop
 80040ae:	3724      	adds	r7, #36	; 0x24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <updateEstimate>:

float updateEstimate(float mea, KALMANFILTER_t *kalmanfilter)
{
 80040b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80040c4:	6038      	str	r0, [r7, #0]
	kalmanfilter->_kalman_gain = kalmanfilter->_err_estimate / (kalmanfilter->_err_estimate + kalmanfilter->_err_measure);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	edc3 7a05 	vstr	s15, [r3, #20]
	kalmanfilter->_current_estimate = kalmanfilter->_last_estimate + kalmanfilter->_kalman_gain * (mea - kalmanfilter->_last_estimate);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	edd3 6a05 	vldr	s13, [r3, #20]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80040f8:	ed97 6a01 	vldr	s12, [r7, #4]
 80040fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	edc3 7a03 	vstr	s15, [r3, #12]
	kalmanfilter->_err_estimate = (1.0 - kalmanfilter->_kalman_gain) * kalmanfilter->_err_estimate + fabs(kalmanfilter->_last_estimate - kalmanfilter->_current_estimate) * kalmanfilter->_q;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc fa18 	bl	8000548 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	f04f 0000 	mov.w	r0, #0
 8004120:	4926      	ldr	r1, [pc, #152]	; (80041bc <updateEstimate+0x104>)
 8004122:	f7fc f8b1 	bl	8000288 <__aeabi_dsub>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fa08 	bl	8000548 <__aeabi_f2d>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4620      	mov	r0, r4
 800413e:	4629      	mov	r1, r5
 8004140:	f7fc fa5a 	bl	80005f8 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4690      	mov	r8, r2
 800414a:	4699      	mov	r9, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	edd3 7a03 	vldr	s15, [r3, #12]
 8004158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415c:	eef0 7ae7 	vabs.f32	s15, s15
 8004160:	ee17 0a90 	vmov	r0, s15
 8004164:	f7fc f9f0 	bl	8000548 <__aeabi_f2d>
 8004168:	4604      	mov	r4, r0
 800416a:	460d      	mov	r5, r1
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc f9e9 	bl	8000548 <__aeabi_f2d>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	f7fc fa3b 	bl	80005f8 <__aeabi_dmul>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4640      	mov	r0, r8
 8004188:	4649      	mov	r1, r9
 800418a:	f7fc f87f 	bl	800028c <__adddf3>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7fc fd27 	bl	8000be8 <__aeabi_d2f>
 800419a:	4602      	mov	r2, r0
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	605a      	str	r2, [r3, #4]
	kalmanfilter->_last_estimate = kalmanfilter->_current_estimate;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	611a      	str	r2, [r3, #16]

	return kalmanfilter->_current_estimate;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	ee07 3a90 	vmov	s15, r3
}
 80041b0:	eeb0 0a67 	vmov.f32	s0, s15
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80041bc:	3ff00000 	.word	0x3ff00000

080041c0 <KalmanFilter>:

float getKalmanGain(KALMANFILTER_t *kalmanfilter) {
	return kalmanfilter->_kalman_gain;
}

void KalmanFilter (KALMANFILTER_t *kalmanfilter){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
		kalmanfilter->kalman_output_tmp  = ((float)*(kalmanfilter->kalman_input))/10000.0;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004224 <KalmanFilter+0x64>
 80041da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		kalmanfilter->kalman_output_tmp  = updateEstimate(kalmanfilter->kalman_output_tmp, kalmanfilter);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	eeb0 0a67 	vmov.f32	s0, s15
 80041f0:	f7ff ff62 	bl	80040b8 <updateEstimate>
 80041f4:	eef0 7a40 	vmov.f32	s15, s0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		kalmanfilter->kalman_output_tmp  = (kalmanfilter->kalman_output_tmp)*10000.0;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004204:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8004224 <KalmanFilter+0x64>
 8004208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		*(kalmanfilter->kalman_output )  = kalmanfilter->kalman_output_tmp ;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421a:	601a      	str	r2, [r3, #0]
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	461c4000 	.word	0x461c4000

08004228 <LaserInit>:
 */

void LaserInit (float min_value, float max_value,
				float min_distance, float max_distance,
				float *input, float *output,
				LASER_t *laser){
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	ed87 0a07 	vstr	s0, [r7, #28]
 8004232:	edc7 0a06 	vstr	s1, [r7, #24]
 8004236:	ed87 1a05 	vstr	s2, [r7, #20]
 800423a:	edc7 1a04 	vstr	s3, [r7, #16]
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]

	laser->min_value = min_value;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	601a      	str	r2, [r3, #0]
	laser->max_value = max_value;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	605a      	str	r2, [r3, #4]
	laser->min_distance = min_distance;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	609a      	str	r2, [r3, #8]
	laser->max_distance = max_distance;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	60da      	str	r2, [r3, #12]
	laser->input = input;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	611a      	str	r2, [r3, #16]
	laser->output = output;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	615a      	str	r2, [r3, #20]

	laser->kcd=(max_distance-min_distance)/(max_value-min_value);
 8004268:	ed97 7a04 	vldr	s14, [r7, #16]
 800426c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004270:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004274:	ed97 7a06 	vldr	s14, [r7, #24]
 8004278:	edd7 7a07 	vldr	s15, [r7, #28]
 800427c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	edc3 7a06 	vstr	s15, [r3, #24]

	laser->count=0;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	839a      	strh	r2, [r3, #28]

}
 8004290:	bf00      	nop
 8004292:	3724      	adds	r7, #36	; 0x24
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <Laser>:
* Function Example		: Laser(&left_laser);
*/
/*
 * changes: add the min distance since the min distance not always 0
 */
void Laser(LASER_t *laser){
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
//
//	for(laser->count2=0;laser->count2<10;laser->count2++){
//		laser->sum+=laser->stored[laser->count2];
//	}
//	laser->average=(float)laser->sum/10.0;
	if(*(laser->input)<=(laser->min_value)){
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	ed93 7a00 	vldr	s14, [r3]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	edd3 7a00 	vldr	s15, [r3]
 80042b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	d804      	bhi.n	80042c6 <Laser+0x2a>
		*(laser->input)=(laser->min_value);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6812      	ldr	r2, [r2, #0]
 80042c4:	601a      	str	r2, [r3, #0]
	}
	if(*(laser->input)>=(laser->max_value)){
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	ed93 7a00 	vldr	s14, [r3]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80042d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042dc:	db04      	blt.n	80042e8 <Laser+0x4c>
		*(laser->input)=(laser->max_value);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6852      	ldr	r2, [r2, #4]
 80042e6:	601a      	str	r2, [r3, #0]
	}
	*(laser->output)=((*(laser->input) - laser->min_value) * laser->kcd) + laser->min_distance;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	ed93 7a00 	vldr	s14, [r3]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	edd3 7a00 	vldr	s15, [r3]
 80042f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8004300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	edd3 7a02 	vldr	s15, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004312:	edc3 7a00 	vstr	s15, [r3]

	if(laser->count==10) laser->count=0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8b9b      	ldrh	r3, [r3, #28]
 800431a:	2b0a      	cmp	r3, #10
 800431c:	d102      	bne.n	8004324 <Laser+0x88>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	839a      	strh	r2, [r3, #28]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <main>:
int pp_start = 0, state=0;

uint8_t buffer[9];
uint8_t rnsC=0;
int main(void)
{
 8004330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004334:	b0b6      	sub	sp, #216	; 0xd8
 8004336:	af04      	add	r7, sp, #16

	set();
 8004338:	f005 fce4 	bl	8009d04 <set>

	const osThreadAttr_t MainTask_attributes = {
 800433c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004340:	2224      	movs	r2, #36	; 0x24
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f01a fcf9 	bl	801ed3c <memset>
 800434a:	4b6b      	ldr	r3, [pc, #428]	; (80044f8 <main+0x1c8>)
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004358:	2318      	movs	r3, #24
 800435a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 800435e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f01a fce8 	bl	801ed3c <memset>
 800436c:	4b63      	ldr	r3, [pc, #396]	; (80044fc <main+0x1cc>)
 800436e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800437a:	2318      	movs	r3, #24
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			.name = "EmergencyTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t TuneTask_attributes = {
 8004380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004384:	2224      	movs	r2, #36	; 0x24
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f01a fcd7 	bl	801ed3c <memset>
 800438e:	4b5c      	ldr	r3, [pc, #368]	; (8004500 <main+0x1d0>)
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004396:	673b      	str	r3, [r7, #112]	; 0x70
 8004398:	2320      	movs	r3, #32
 800439a:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "TuneTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityAboveNormal,
	};

	const osThreadAttr_t LagoriTask_attributes = {
 800439c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043a0:	2224      	movs	r2, #36	; 0x24
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f01a fcc9 	bl	801ed3c <memset>
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <main+0x1d4>)
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80043ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b4:	2318      	movs	r3, #24
 80043b6:	653b      	str	r3, [r7, #80]	; 0x50
			.name = "LagoriTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t BLDCTask_attributes = {
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f01a fcbb 	bl	801ed3c <memset>
 80043c6:	4b50      	ldr	r3, [pc, #320]	; (8004508 <main+0x1d8>)
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d0:	2318      	movs	r3, #24
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "BLDCTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osSemaphoreAttr_t TuneSemaphore_attributes = {
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	4b4a      	ldr	r3, [pc, #296]	; (800450c <main+0x1dc>)
 80043e2:	607b      	str	r3, [r7, #4]
//	ILI9341_Init();
////	ILI9341_Set_Rotation(1);
//	ILI9341_Fill_Screen(BLACK);
//	ILI9341_Init_List();

	sys.control = 1;
 80043e4:	4a4a      	ldr	r2, [pc, #296]	; (8004510 <main+0x1e0>)
 80043e6:	7813      	ldrb	r3, [r2, #0]
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	7013      	strb	r3, [r2, #0]
//	sys.tunePid = 1;
//	sys.tunePidex = 1;
//	sys.tunePP = 1;
//	sys.stickf = 1;

	osKernelInitialize();
 80043ee:	f017 f8c5 	bl	801b57c <osKernelInitialize>
	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80043f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043f6:	461a      	mov	r2, r3
 80043f8:	2100      	movs	r1, #0
 80043fa:	4846      	ldr	r0, [pc, #280]	; (8004514 <main+0x1e4>)
 80043fc:	f017 f908 	bl	801b610 <osThreadNew>
 8004400:	4603      	mov	r3, r0
 8004402:	4a45      	ldr	r2, [pc, #276]	; (8004518 <main+0x1e8>)
 8004404:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 8004406:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800440a:	461a      	mov	r2, r3
 800440c:	2100      	movs	r1, #0
 800440e:	4843      	ldr	r0, [pc, #268]	; (800451c <main+0x1ec>)
 8004410:	f017 f8fe 	bl	801b610 <osThreadNew>
 8004414:	4603      	mov	r3, r0
 8004416:	4a42      	ldr	r2, [pc, #264]	; (8004520 <main+0x1f0>)
 8004418:	6013      	str	r3, [r2, #0]
	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
 800441a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800441e:	461a      	mov	r2, r3
 8004420:	2100      	movs	r1, #0
 8004422:	4840      	ldr	r0, [pc, #256]	; (8004524 <main+0x1f4>)
 8004424:	f017 f8f4 	bl	801b610 <osThreadNew>
 8004428:	4603      	mov	r3, r0
 800442a:	4a3f      	ldr	r2, [pc, #252]	; (8004528 <main+0x1f8>)
 800442c:	6013      	str	r3, [r2, #0]
	LagoriTaskHandle = osThreadNew(LagoriTask, NULL, &LagoriTask_attributes);
 800442e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004432:	461a      	mov	r2, r3
 8004434:	2100      	movs	r1, #0
 8004436:	483d      	ldr	r0, [pc, #244]	; (800452c <main+0x1fc>)
 8004438:	f017 f8ea 	bl	801b610 <osThreadNew>
 800443c:	4603      	mov	r3, r0
 800443e:	4a3c      	ldr	r2, [pc, #240]	; (8004530 <main+0x200>)
 8004440:	6013      	str	r3, [r2, #0]
	BLDCTaskHandle = osThreadNew(BLDCTask, NULL, &BLDCTask_attributes);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	461a      	mov	r2, r3
 8004448:	2100      	movs	r1, #0
 800444a:	483a      	ldr	r0, [pc, #232]	; (8004534 <main+0x204>)
 800444c:	f017 f8e0 	bl	801b610 <osThreadNew>
 8004450:	4603      	mov	r3, r0
 8004452:	4a39      	ldr	r2, [pc, #228]	; (8004538 <main+0x208>)
 8004454:	6013      	str	r3, [r2, #0]
	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	461a      	mov	r2, r3
 800445a:	2100      	movs	r1, #0
 800445c:	2001      	movs	r0, #1
 800445e:	f017 f9b1 	bl	801b7c4 <osSemaphoreNew>
 8004462:	4603      	mov	r3, r0
 8004464:	4a35      	ldr	r2, [pc, #212]	; (800453c <main+0x20c>)
 8004466:	6013      	str	r3, [r2, #0]
//	led2 = 1;
	osKernelStart();
 8004468:	f017 f8ac 	bl	801b5c4 <osKernelStart>

	while(1){
		if(!PB2){
 800446c:	4b34      	ldr	r3, [pc, #208]	; (8004540 <main+0x210>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d125      	bne.n	80044c6 <main+0x196>
			sprintf(data, "%.3f %.3f %.3f\n", tfmini.dist, tfmini.str, tfmini.temp);
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <main+0x214>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc f862 	bl	8000548 <__aeabi_f2d>
 8004484:	4680      	mov	r8, r0
 8004486:	4689      	mov	r9, r1
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <main+0x214>)
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4618      	mov	r0, r3
 800448e:	f7fc f85b 	bl	8000548 <__aeabi_f2d>
 8004492:	4604      	mov	r4, r0
 8004494:	460d      	mov	r5, r1
 8004496:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <main+0x214>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc f854 	bl	8000548 <__aeabi_f2d>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044a8:	e9cd 4500 	strd	r4, r5, [sp]
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	4925      	ldr	r1, [pc, #148]	; (8004548 <main+0x218>)
 80044b2:	4826      	ldr	r0, [pc, #152]	; (800454c <main+0x21c>)
 80044b4:	f01b fc24 	bl	801fd00 <siprintf>
			UARTSend
 80044b8:	4924      	ldr	r1, [pc, #144]	; (800454c <main+0x21c>)
 80044ba:	4825      	ldr	r0, [pc, #148]	; (8004550 <main+0x220>)
 80044bc:	f7ff fad8 	bl	8003a70 <UARTPrintString>
			Await(200);
 80044c0:	20c8      	movs	r0, #200	; 0xc8
 80044c2:	f00a fa0f 	bl	800e8e4 <Await>
		}
		if(ps4.button == SQUARE){
 80044c6:	4b23      	ldr	r3, [pc, #140]	; (8004554 <main+0x224>)
 80044c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ce:	d1cd      	bne.n	800446c <main+0x13c>
			while(ps4.button == SQUARE);
 80044d0:	bf00      	nop
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <main+0x224>)
 80044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044da:	d0fa      	beq.n	80044d2 <main+0x1a2>
			registerPath(ToBallRackA, 3, point1, point2, point3);
 80044dc:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <main+0x228>)
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4b1e      	ldr	r3, [pc, #120]	; (800455c <main+0x22c>)
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <main+0x230>)
 80044e4:	2103      	movs	r1, #3
 80044e6:	481f      	ldr	r0, [pc, #124]	; (8004564 <main+0x234>)
 80044e8:	f004 fd1a 	bl	8008f20 <registerPath>
			RNSPPstart(ToBallRackA, 3, &rns);
 80044ec:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <main+0x238>)
 80044ee:	2103      	movs	r1, #3
 80044f0:	481c      	ldr	r0, [pc, #112]	; (8004564 <main+0x234>)
 80044f2:	f002 fcc4 	bl	8006e7e <RNSPPstart>
		if(!PB2){
 80044f6:	e7b9      	b.n	800446c <main+0x13c>
 80044f8:	08024150 	.word	0x08024150
 80044fc:	0802415c 	.word	0x0802415c
 8004500:	0802416c 	.word	0x0802416c
 8004504:	08024178 	.word	0x08024178
 8004508:	08024184 	.word	0x08024184
 800450c:	08024190 	.word	0x08024190
 8004510:	2000794c 	.word	0x2000794c
 8004514:	08004729 	.word	0x08004729
 8004518:	20007de4 	.word	0x20007de4
 800451c:	080053f9 	.word	0x080053f9
 8004520:	2000a27c 	.word	0x2000a27c
 8004524:	080055ad 	.word	0x080055ad
 8004528:	2000a034 	.word	0x2000a034
 800452c:	080053b9 	.word	0x080053b9
 8004530:	20009990 	.word	0x20009990
 8004534:	080053d9 	.word	0x080053d9
 8004538:	2000975c 	.word	0x2000975c
 800453c:	2000a4c0 	.word	0x2000a4c0
 8004540:	40021010 	.word	0x40021010
 8004544:	20009704 	.word	0x20009704
 8004548:	080241a0 	.word	0x080241a0
 800454c:	20006a8c 	.word	0x20006a8c
 8004550:	20006c74 	.word	0x20006c74
 8004554:	2000a448 	.word	0x2000a448
 8004558:	2000a00c 	.word	0x2000a00c
 800455c:	20007690 	.word	0x20007690
 8004560:	20009dd8 	.word	0x20009dd8
 8004564:	20007950 	.word	0x20007950
 8004568:	200093ec 	.word	0x200093ec

0800456c <TIM6_DAC_IRQHandler>:
		}
	}
}

void TIM6_DAC_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
	led1 = !led1;
 8004570:	4b67      	ldr	r3, [pc, #412]	; (8004710 <TIM6_DAC_IRQHandler+0x1a4>)
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4a65      	ldr	r2, [pc, #404]	; (8004710 <TIM6_DAC_IRQHandler+0x1a4>)
 800457c:	2b00      	cmp	r3, #0
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2d9      	uxtb	r1, r3
 8004586:	7853      	ldrb	r3, [r2, #1]
 8004588:	f361 1345 	bfi	r3, r1, #5, #1
 800458c:	7053      	strb	r3, [r2, #1]
//		else
//			rnsC ++;
//	}
//	RNSSync(&rns);
//	UARTPrintString(&huart2, data);
	if(sys.manual && sys.control){
 800458e:	4b61      	ldr	r3, [pc, #388]	; (8004714 <TIM6_DAC_IRQHandler+0x1a8>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80b3 	beq.w	8004704 <TIM6_DAC_IRQHandler+0x198>
 800459e:	4b5d      	ldr	r3, [pc, #372]	; (8004714 <TIM6_DAC_IRQHandler+0x1a8>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80ab 	beq.w	8004704 <TIM6_DAC_IRQHandler+0x198>
		//led indicator
		exled1 = 0;
 80045ae:	4a5a      	ldr	r2, [pc, #360]	; (8004718 <TIM6_DAC_IRQHandler+0x1ac>)
 80045b0:	7853      	ldrb	r3, [r2, #1]
 80045b2:	f36f 0341 	bfc	r3, #1, #1
 80045b6:	7053      	strb	r3, [r2, #1]
		exled2 = 0;
 80045b8:	4a57      	ldr	r2, [pc, #348]	; (8004718 <TIM6_DAC_IRQHandler+0x1ac>)
 80045ba:	7853      	ldrb	r3, [r2, #1]
 80045bc:	f36f 0300 	bfc	r3, #0, #1
 80045c0:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
 80045c2:	4a56      	ldr	r2, [pc, #344]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80045c4:	7813      	ldrb	r3, [r2, #0]
 80045c6:	f36f 13c7 	bfc	r3, #7, #1
 80045ca:	7013      	strb	r3, [r2, #0]
		exled4 = 0;
 80045cc:	4a53      	ldr	r2, [pc, #332]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80045ce:	7813      	ldrb	r3, [r2, #0]
 80045d0:	f36f 1386 	bfc	r3, #6, #1
 80045d4:	7013      	strb	r3, [r2, #0]
		exled5 = 0;
 80045d6:	4a51      	ldr	r2, [pc, #324]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80045d8:	7813      	ldrb	r3, [r2, #0]
 80045da:	f36f 1345 	bfc	r3, #5, #1
 80045de:	7013      	strb	r3, [r2, #0]
		exled6 = 0;
 80045e0:	4a4e      	ldr	r2, [pc, #312]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80045e2:	7813      	ldrb	r3, [r2, #0]
 80045e4:	f36f 1304 	bfc	r3, #4, #1
 80045e8:	7013      	strb	r3, [r2, #0]
		if(lagori.bldclayer >= 1)			exled1 = 1;
 80045ea:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	f003 031c 	and.w	r3, r3, #28
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <TIM6_DAC_IRQHandler+0x96>
 80045f8:	4a47      	ldr	r2, [pc, #284]	; (8004718 <TIM6_DAC_IRQHandler+0x1ac>)
 80045fa:	7853      	ldrb	r3, [r2, #1]
 80045fc:	f043 0302 	orr.w	r3, r3, #2
 8004600:	7053      	strb	r3, [r2, #1]
		if(lagori.bldclayer == 1)			exled2 = 1;
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f003 031c 	and.w	r3, r3, #28
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b04      	cmp	r3, #4
 800460e:	d105      	bne.n	800461c <TIM6_DAC_IRQHandler+0xb0>
 8004610:	4a41      	ldr	r2, [pc, #260]	; (8004718 <TIM6_DAC_IRQHandler+0x1ac>)
 8004612:	7853      	ldrb	r3, [r2, #1]
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	7053      	strb	r3, [r2, #1]
 800461a:	e073      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldclayer == 2)		exled3 = 1;
 800461c:	4b40      	ldr	r3, [pc, #256]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 031c 	and.w	r3, r3, #28
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b08      	cmp	r3, #8
 8004628:	d105      	bne.n	8004636 <TIM6_DAC_IRQHandler+0xca>
 800462a:	4a3c      	ldr	r2, [pc, #240]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 800462c:	7813      	ldrb	r3, [r2, #0]
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	7013      	strb	r3, [r2, #0]
 8004634:	e066      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldclayer == 3)		exled4 = 1;
 8004636:	4b3a      	ldr	r3, [pc, #232]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	f003 031c 	and.w	r3, r3, #28
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d105      	bne.n	8004650 <TIM6_DAC_IRQHandler+0xe4>
 8004644:	4a35      	ldr	r2, [pc, #212]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 8004646:	7813      	ldrb	r3, [r2, #0]
 8004648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800464c:	7013      	strb	r3, [r2, #0]
 800464e:	e059      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldclayer == 4)		exled5 = 1;
 8004650:	4b33      	ldr	r3, [pc, #204]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f003 031c 	and.w	r3, r3, #28
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b10      	cmp	r3, #16
 800465c:	d105      	bne.n	800466a <TIM6_DAC_IRQHandler+0xfe>
 800465e:	4a2f      	ldr	r2, [pc, #188]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 8004660:	7813      	ldrb	r3, [r2, #0]
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	7013      	strb	r3, [r2, #0]
 8004668:	e04c      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldclayer == 5)		exled6 = 1;
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f003 031c 	and.w	r3, r3, #28
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b14      	cmp	r3, #20
 8004676:	d105      	bne.n	8004684 <TIM6_DAC_IRQHandler+0x118>
 8004678:	4a28      	ldr	r2, [pc, #160]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 800467a:	7813      	ldrb	r3, [r2, #0]
 800467c:	f043 0310 	orr.w	r3, r3, #16
 8004680:	7013      	strb	r3, [r2, #0]
 8004682:	e03f      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>

		else if(lagori.bldcflayer == 1)		exled2 = 1;
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f023 031f 	bic.w	r3, r3, #31
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b20      	cmp	r3, #32
 8004690:	d105      	bne.n	800469e <TIM6_DAC_IRQHandler+0x132>
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <TIM6_DAC_IRQHandler+0x1ac>)
 8004694:	7853      	ldrb	r3, [r2, #1]
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	7053      	strb	r3, [r2, #1]
 800469c:	e032      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldcflayer == 2)		exled3 = 1;
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f023 031f 	bic.w	r3, r3, #31
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d105      	bne.n	80046b8 <TIM6_DAC_IRQHandler+0x14c>
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80046ae:	7813      	ldrb	r3, [r2, #0]
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	7013      	strb	r3, [r2, #0]
 80046b6:	e025      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldcflayer == 3)		exled4 = 1;
 80046b8:	4b19      	ldr	r3, [pc, #100]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f023 031f 	bic.w	r3, r3, #31
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b60      	cmp	r3, #96	; 0x60
 80046c4:	d105      	bne.n	80046d2 <TIM6_DAC_IRQHandler+0x166>
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80046c8:	7813      	ldrb	r3, [r2, #0]
 80046ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ce:	7013      	strb	r3, [r2, #0]
 80046d0:	e018      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldcflayer == 4)		exled5 = 1;
 80046d2:	4b13      	ldr	r3, [pc, #76]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f023 031f 	bic.w	r3, r3, #31
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d105      	bne.n	80046ec <TIM6_DAC_IRQHandler+0x180>
 80046e0:	4a0e      	ldr	r2, [pc, #56]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80046e2:	7813      	ldrb	r3, [r2, #0]
 80046e4:	f043 0320 	orr.w	r3, r3, #32
 80046e8:	7013      	strb	r3, [r2, #0]
 80046ea:	e00b      	b.n	8004704 <TIM6_DAC_IRQHandler+0x198>
		else if(lagori.bldcflayer == 5)		exled6 = 1;
 80046ec:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <TIM6_DAC_IRQHandler+0x1b4>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	f023 031f 	bic.w	r3, r3, #31
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2ba0      	cmp	r3, #160	; 0xa0
 80046f8:	d104      	bne.n	8004704 <TIM6_DAC_IRQHandler+0x198>
 80046fa:	4a08      	ldr	r2, [pc, #32]	; (800471c <TIM6_DAC_IRQHandler+0x1b0>)
 80046fc:	7813      	ldrb	r3, [r2, #0]
 80046fe:	f043 0310 	orr.w	r3, r3, #16
 8004702:	7013      	strb	r3, [r2, #0]
	}
	HAL_TIM_IRQHandler(&htim6);
 8004704:	4807      	ldr	r0, [pc, #28]	; (8004724 <TIM6_DAC_IRQHandler+0x1b8>)
 8004706:	f015 f817 	bl	8019738 <HAL_TIM_IRQHandler>
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40020814 	.word	0x40020814
 8004714:	2000794c 	.word	0x2000794c
 8004718:	40020c14 	.word	0x40020c14
 800471c:	40020014 	.word	0x40020014
 8004720:	20009b10 	.word	0x20009b10
 8004724:	20006af0 	.word	0x20006af0

08004728 <MainTask>:

void MainTask(void *argument)
{
 8004728:	b5b0      	push	{r4, r5, r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af06      	add	r7, sp, #24
 800472e:	6078      	str	r0, [r7, #4]
	led3 = 1;
 8004730:	4ab0      	ldr	r2, [pc, #704]	; (80049f4 <MainTask+0x2cc>)
 8004732:	7853      	ldrb	r3, [r2, #1]
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	7053      	strb	r3, [r2, #1]
	fx.flags = 0;
 800473a:	4baf      	ldr	r3, [pc, #700]	; (80049f8 <MainTask+0x2d0>)
 800473c:	2200      	movs	r2, #0
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
	while(1)
	{
		while(sys.control){
 8004740:	e122      	b.n	8004988 <MainTask+0x260>
			if(ps4.button == SHARE){
 8004742:	4bae      	ldr	r3, [pc, #696]	; (80049fc <MainTask+0x2d4>)
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d106      	bne.n	8004758 <MainTask+0x30>
				sys.manual = 1;
 800474a:	4aad      	ldr	r2, [pc, #692]	; (8004a00 <MainTask+0x2d8>)
 800474c:	7813      	ldrb	r3, [r2, #0]
 800474e:	f043 0310 	orr.w	r3, r3, #16
 8004752:	7013      	strb	r3, [r2, #0]
				seeker_mode();
 8004754:	f005 fd70 	bl	800a238 <seeker_mode>
			}
			if(ps4.button == OPTION){
 8004758:	4ba8      	ldr	r3, [pc, #672]	; (80049fc <MainTask+0x2d4>)
 800475a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004760:	d10b      	bne.n	800477a <MainTask+0x52>
				led3 = 0;
 8004762:	4aa4      	ldr	r2, [pc, #656]	; (80049f4 <MainTask+0x2cc>)
 8004764:	7853      	ldrb	r3, [r2, #1]
 8004766:	f36f 13c7 	bfc	r3, #7, #1
 800476a:	7053      	strb	r3, [r2, #1]
				sys.manual = 0;
 800476c:	4aa4      	ldr	r2, [pc, #656]	; (8004a00 <MainTask+0x2d8>)
 800476e:	7813      	ldrb	r3, [r2, #0]
 8004770:	f36f 1304 	bfc	r3, #4, #1
 8004774:	7013      	strb	r3, [r2, #0]
				hitter_mode();
 8004776:	f006 ff4f 	bl	800b618 <hitter_mode>
			}

			if(!PB1){
 800477a:	4ba2      	ldr	r3, [pc, #648]	; (8004a04 <MainTask+0x2dc>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d113      	bne.n	80047b0 <MainTask+0x88>
//				while(!PB1);
//				svBallvp(2550)
//				svBallhp(2050)
//				svLGF1(875)
//				svLGF2(1775)
				svBRA
 8004788:	f640 0134 	movw	r1, #2100	; 0x834
 800478c:	489e      	ldr	r0, [pc, #632]	; (8004a08 <MainTask+0x2e0>)
 800478e:	f004 fa71 	bl	8008c74 <ServoSetPulse>
				svBRdown
 8004792:	f640 11f6 	movw	r1, #2550	; 0x9f6
 8004796:	489d      	ldr	r0, [pc, #628]	; (8004a0c <MainTask+0x2e4>)
 8004798:	f004 fa6c 	bl	8008c74 <ServoSetPulse>
				svLGF1(1275)
 800479c:	f240 41fb 	movw	r1, #1275	; 0x4fb
 80047a0:	489b      	ldr	r0, [pc, #620]	; (8004a10 <MainTask+0x2e8>)
 80047a2:	f004 fa67 	bl	8008c74 <ServoSetPulse>
				svLGF2(1600)
 80047a6:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80047aa:	489a      	ldr	r0, [pc, #616]	; (8004a14 <MainTask+0x2ec>)
 80047ac:	f004 fa62 	bl	8008c74 <ServoSetPulse>
			}
			if(!PB2){
 80047b0:	4b99      	ldr	r3, [pc, #612]	; (8004a18 <MainTask+0x2f0>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <MainTask+0xaa>
				while(!PB2);
 80047be:	bf00      	nop
 80047c0:	4b95      	ldr	r3, [pc, #596]	; (8004a18 <MainTask+0x2f0>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f8      	beq.n	80047c0 <MainTask+0x98>
				ROS_Read_Flash();
 80047ce:	f003 fadf 	bl	8007d90 <ROS_Read_Flash>
			}

			button();
 80047d2:	f007 fff3 	bl	800c7bc <button>
			limit_sw();
 80047d6:	f008 febb 	bl	800d550 <limit_sw>
//			analog_sr();

			if(ps4.button == L3){
 80047da:	4b88      	ldr	r3, [pc, #544]	; (80049fc <MainTask+0x2d4>)
 80047dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d139      	bne.n	8004856 <MainTask+0x12e>
				press = 0;
 80047e2:	4b8e      	ldr	r3, [pc, #568]	; (8004a1c <MainTask+0x2f4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
				sprintf(data, "Press SQUARE to start rns enq\n");
 80047e8:	498d      	ldr	r1, [pc, #564]	; (8004a20 <MainTask+0x2f8>)
 80047ea:	488e      	ldr	r0, [pc, #568]	; (8004a24 <MainTask+0x2fc>)
 80047ec:	f01b fa88 	bl	801fd00 <siprintf>
				UARTSend
 80047f0:	498c      	ldr	r1, [pc, #560]	; (8004a24 <MainTask+0x2fc>)
 80047f2:	488d      	ldr	r0, [pc, #564]	; (8004a28 <MainTask+0x300>)
 80047f4:	f7ff f93c 	bl	8003a70 <UARTPrintString>
				while(ps4.button == L3);
 80047f8:	bf00      	nop
 80047fa:	4b80      	ldr	r3, [pc, #512]	; (80049fc <MainTask+0x2d4>)
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d0fb      	beq.n	80047fa <MainTask+0xd2>
				while(ps4.button != L3){
 8004802:	e01f      	b.n	8004844 <MainTask+0x11c>
					functest();
 8004804:	f008 ff20 	bl	800d648 <functest>
					enq();
 8004808:	f009 fbc6 	bl	800df98 <enq>
					if(ps4.button == SQUARE){
 800480c:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <MainTask+0x2d4>)
 800480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004814:	d116      	bne.n	8004844 <MainTask+0x11c>
						counter = 0;
 8004816:	4b85      	ldr	r3, [pc, #532]	; (8004a2c <MainTask+0x304>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
						while(ps4.button == SQUARE);
 800481c:	bf00      	nop
 800481e:	4b77      	ldr	r3, [pc, #476]	; (80049fc <MainTask+0x2d4>)
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004826:	d0fa      	beq.n	800481e <MainTask+0xf6>
						if(counter > 2000)
 8004828:	4b80      	ldr	r3, [pc, #512]	; (8004a2c <MainTask+0x304>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004830:	dd03      	ble.n	800483a <MainTask+0x112>
							n = 6;
 8004832:	4b7f      	ldr	r3, [pc, #508]	; (8004a30 <MainTask+0x308>)
 8004834:	2206      	movs	r2, #6
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e004      	b.n	8004844 <MainTask+0x11c>
						else
							n++;
 800483a:	4b7d      	ldr	r3, [pc, #500]	; (8004a30 <MainTask+0x308>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a7b      	ldr	r2, [pc, #492]	; (8004a30 <MainTask+0x308>)
 8004842:	6013      	str	r3, [r2, #0]
				while(ps4.button != L3){
 8004844:	4b6d      	ldr	r3, [pc, #436]	; (80049fc <MainTask+0x2d4>)
 8004846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004848:	2b02      	cmp	r3, #2
 800484a:	d1db      	bne.n	8004804 <MainTask+0xdc>
					}
				}
				while(ps4.button == L3);
 800484c:	bf00      	nop
 800484e:	4b6b      	ldr	r3, [pc, #428]	; (80049fc <MainTask+0x2d4>)
 8004850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004852:	2b02      	cmp	r3, #2
 8004854:	d0fb      	beq.n	800484e <MainTask+0x126>
			}

			if(ps4.button == R3){
 8004856:	4b69      	ldr	r3, [pc, #420]	; (80049fc <MainTask+0x2d4>)
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	2b04      	cmp	r3, #4
 800485c:	d110      	bne.n	8004880 <MainTask+0x158>
				while(ps4.button == R3);
 800485e:	bf00      	nop
 8004860:	4b66      	ldr	r3, [pc, #408]	; (80049fc <MainTask+0x2d4>)
 8004862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004864:	2b04      	cmp	r3, #4
 8004866:	d0fb      	beq.n	8004860 <MainTask+0x138>
				while(ps4.button != R3){
 8004868:	e001      	b.n	800486e <MainTask+0x146>
					KFilterAdjust();
 800486a:	f009 f8dd 	bl	800da28 <KFilterAdjust>
				while(ps4.button != R3){
 800486e:	4b63      	ldr	r3, [pc, #396]	; (80049fc <MainTask+0x2d4>)
 8004870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004872:	2b04      	cmp	r3, #4
 8004874:	d1f9      	bne.n	800486a <MainTask+0x142>
				}
				while(ps4.button == R3);
 8004876:	bf00      	nop
 8004878:	4b60      	ldr	r3, [pc, #384]	; (80049fc <MainTask+0x2d4>)
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	2b04      	cmp	r3, #4
 800487e:	d0fb      	beq.n	8004878 <MainTask+0x150>
			}

			if(ps4.button == L1 && fabs(ps4.joyR_x) >= 0.5)
 8004880:	4b5e      	ldr	r3, [pc, #376]	; (80049fc <MainTask+0x2d4>)
 8004882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d11b      	bne.n	80048c2 <MainTask+0x19a>
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <MainTask+0x2d4>)
 800488c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004890:	eef0 7ae7 	vabs.f32	s15, s15
 8004894:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	db0f      	blt.n	80048c2 <MainTask+0x19a>
				LGPW(ps4.joyR_x * 9000)
 80048a2:	4b56      	ldr	r3, [pc, #344]	; (80049fc <MainTask+0x2d4>)
 80048a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80048a8:	eef1 7a67 	vneg.f32	s15, s15
 80048ac:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004a34 <MainTask+0x30c>
 80048b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b8:	ee17 1a90 	vmov	r1, s15
 80048bc:	485e      	ldr	r0, [pc, #376]	; (8004a38 <MainTask+0x310>)
 80048be:	f7fc fd5f 	bl	8001380 <WriteBDC>
			if(fabs(ps4.joyR_y) >= 0.5)
 80048c2:	4b4e      	ldr	r3, [pc, #312]	; (80049fc <MainTask+0x2d4>)
 80048c4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80048c8:	eef0 7ae7 	vabs.f32	s15, s15
 80048cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048d8:	db10      	blt.n	80048fc <MainTask+0x1d4>
				LFPW(ps4.joyR_y * 9000)
 80048da:	4b48      	ldr	r3, [pc, #288]	; (80049fc <MainTask+0x2d4>)
 80048dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80048e0:	eef1 7a67 	vneg.f32	s15, s15
 80048e4:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8004a34 <MainTask+0x30c>
 80048e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f0:	ee17 1a90 	vmov	r1, s15
 80048f4:	4851      	ldr	r0, [pc, #324]	; (8004a3c <MainTask+0x314>)
 80048f6:	f7fc fd43 	bl	8001380 <WriteBDC>
 80048fa:	e007      	b.n	800490c <MainTask+0x1e4>
			else{
				LFPW(0)
 80048fc:	2100      	movs	r1, #0
 80048fe:	484f      	ldr	r0, [pc, #316]	; (8004a3c <MainTask+0x314>)
 8004900:	f7fc fd3e 	bl	8001380 <WriteBDC>
				LGPW(0)
 8004904:	2100      	movs	r1, #0
 8004906:	484c      	ldr	r0, [pc, #304]	; (8004a38 <MainTask+0x310>)
 8004908:	f7fc fd3a 	bl	8001380 <WriteBDC>
			}

			if(ps4.button == R1){
 800490c:	4b3b      	ldr	r3, [pc, #236]	; (80049fc <MainTask+0x2d4>)
 800490e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004914:	d104      	bne.n	8004920 <MainTask+0x1f8>
				setSpeedMODN(7.0);
 8004916:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800491a:	f001 fd65 	bl	80063e8 <setSpeedMODN>
 800491e:	e003      	b.n	8004928 <MainTask+0x200>
			}else{
				setSpeedMODN(4.0);
 8004920:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8004924:	f001 fd60 	bl	80063e8 <setSpeedMODN>
			}

			realMODN(&ps4, &rns);
 8004928:	4945      	ldr	r1, [pc, #276]	; (8004a40 <MainTask+0x318>)
 800492a:	4834      	ldr	r0, [pc, #208]	; (80049fc <MainTask+0x2d4>)
 800492c:	f001 faac 	bl	8005e88 <realMODN>

			if(ps4.button == L1){
 8004930:	4b32      	ldr	r3, [pc, #200]	; (80049fc <MainTask+0x2d4>)
 8004932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d126      	bne.n	8004988 <MainTask+0x260>
				if(pp.cyon == 0)
 800493a:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <MainTask+0x31c>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	d105      	bne.n	8004954 <MainTask+0x22c>
					BgripON
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <MainTask+0x2cc>)
 800494a:	7853      	ldrb	r3, [r2, #1]
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	7053      	strb	r3, [r2, #1]
 8004952:	e004      	b.n	800495e <MainTask+0x236>
				else
					BgripOFF
 8004954:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <MainTask+0x2cc>)
 8004956:	7853      	ldrb	r3, [r2, #1]
 8004958:	f36f 0300 	bfc	r3, #0, #1
 800495c:	7053      	strb	r3, [r2, #1]
				pp.cyon = !pp.cyon;
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <MainTask+0x31c>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2d9      	uxtb	r1, r3
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <MainTask+0x31c>)
 8004974:	7813      	ldrb	r3, [r2, #0]
 8004976:	f361 1386 	bfi	r3, r1, #6, #1
 800497a:	7013      	strb	r3, [r2, #0]
				while(ps4.button == L1);
 800497c:	bf00      	nop
 800497e:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <MainTask+0x2d4>)
 8004980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d0fa      	beq.n	800497e <MainTask+0x256>
		while(sys.control){
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <MainTask+0x2d8>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	f47f aed5 	bne.w	8004742 <MainTask+0x1a>

			//		//diagnostic
			//		ILI9341_Update_List();
		}

		while(sys.tunePid){
 8004998:	e00d      	b.n	80049b6 <MainTask+0x28e>
			tune.PID = 1;
 800499a:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <MainTask+0x320>)
 800499c:	7913      	ldrb	r3, [r2, #4]
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	7113      	strb	r3, [r2, #4]
			tunePID(tuneUart, &ps4, &rns, (float) fwd_omni);
 80049a4:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <MainTask+0x324>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80049ac:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <MainTask+0x318>)
 80049ae:	4913      	ldr	r1, [pc, #76]	; (80049fc <MainTask+0x2d4>)
 80049b0:	4618      	mov	r0, r3
 80049b2:	f00a ffc5 	bl	800f940 <tunePID>
		while(sys.tunePid){
 80049b6:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <MainTask+0x2d8>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ea      	bne.n	800499a <MainTask+0x272>
		}

		while(sys.tunePidex){
 80049c4:	e00d      	b.n	80049e2 <MainTask+0x2ba>
			tune.PIDex = 1;
 80049c6:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <MainTask+0x320>)
 80049c8:	7913      	ldrb	r3, [r2, #4]
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	7113      	strb	r3, [r2, #4]
			tunePIDex(tuneUart, &ps4, &rns, (float) fwd_omni);
 80049d0:	4b1e      	ldr	r3, [pc, #120]	; (8004a4c <MainTask+0x324>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80049d8:	4a19      	ldr	r2, [pc, #100]	; (8004a40 <MainTask+0x318>)
 80049da:	4908      	ldr	r1, [pc, #32]	; (80049fc <MainTask+0x2d4>)
 80049dc:	4618      	mov	r0, r3
 80049de:	f00b ffbb 	bl	8010958 <tunePIDex>
		while(sys.tunePidex){
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <MainTask+0x2d8>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ea      	bne.n	80049c6 <MainTask+0x29e>
		}

		while(sys.tunePP){
 80049f0:	e051      	b.n	8004a96 <MainTask+0x36e>
 80049f2:	bf00      	nop
 80049f4:	40020814 	.word	0x40020814
 80049f8:	2000a4c4 	.word	0x2000a4c4
 80049fc:	2000a448 	.word	0x2000a448
 8004a00:	2000794c 	.word	0x2000794c
 8004a04:	40020410 	.word	0x40020410
 8004a08:	20009bf4 	.word	0x20009bf4
 8004a0c:	20009a58 	.word	0x20009a58
 8004a10:	20009c44 	.word	0x20009c44
 8004a14:	2000aa48 	.word	0x2000aa48
 8004a18:	40021010 	.word	0x40021010
 8004a1c:	2000a03c 	.word	0x2000a03c
 8004a20:	080241b0 	.word	0x080241b0
 8004a24:	20006a8c 	.word	0x20006a8c
 8004a28:	20006c74 	.word	0x20006c74
 8004a2c:	20009ac0 	.word	0x20009ac0
 8004a30:	2000767c 	.word	0x2000767c
 8004a34:	460ca000 	.word	0x460ca000
 8004a38:	2000aa24 	.word	0x2000aa24
 8004a3c:	20007cd4 	.word	0x20007cd4
 8004a40:	200093ec 	.word	0x200093ec
 8004a44:	20007880 	.word	0x20007880
 8004a48:	20007928 	.word	0x20007928
 8004a4c:	2000a878 	.word	0x2000a878
			tune.PP = 1;
 8004a50:	4aaf      	ldr	r2, [pc, #700]	; (8004d10 <MainTask+0x5e8>)
 8004a52:	7913      	ldrb	r3, [r2, #4]
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	7113      	strb	r3, [r2, #4]
			RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	4bad      	ldr	r3, [pc, #692]	; (8004d14 <MainTask+0x5ec>)
 8004a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a64:	a3a6      	add	r3, pc, #664	; (adr r3, 8004d00 <MainTask+0x5d8>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a76:	e9cd 2300 	strd	r2, r3, [sp]
 8004a7a:	a3a3      	add	r3, pc, #652	; (adr r3, 8004d08 <MainTask+0x5e0>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	2145      	movs	r1, #69	; 0x45
 8004a82:	48a5      	ldr	r0, [pc, #660]	; (8004d18 <MainTask+0x5f0>)
 8004a84:	f002 fb94 	bl	80071b0 <RNSSet>
			tunePPlan(tuneUart, &ps4, &rns);
 8004a88:	4ba4      	ldr	r3, [pc, #656]	; (8004d1c <MainTask+0x5f4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4aa2      	ldr	r2, [pc, #648]	; (8004d18 <MainTask+0x5f0>)
 8004a8e:	49a4      	ldr	r1, [pc, #656]	; (8004d20 <MainTask+0x5f8>)
 8004a90:	4618      	mov	r0, r3
 8004a92:	f00c fda9 	bl	80115e8 <tunePPlan>
		while(sys.tunePP){
 8004a96:	4ba3      	ldr	r3, [pc, #652]	; (8004d24 <MainTask+0x5fc>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1d5      	bne.n	8004a50 <MainTask+0x328>
		}

		while(sys.stickf){
 8004aa4:	f000 bc7a 	b.w	800539c <MainTask+0xc74>
			if(!sys.ppend)
 8004aa8:	4b9e      	ldr	r3, [pc, #632]	; (8004d24 <MainTask+0x5fc>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <MainTask+0x396>
				realMODN(&ps4, &rns);
 8004ab6:	4998      	ldr	r1, [pc, #608]	; (8004d18 <MainTask+0x5f0>)
 8004ab8:	4899      	ldr	r0, [pc, #612]	; (8004d20 <MainTask+0x5f8>)
 8004aba:	f001 f9e5 	bl	8005e88 <realMODN>
			if(pp.path == 0)
 8004abe:	4b9a      	ldr	r3, [pc, #616]	; (8004d28 <MainTask+0x600>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <MainTask+0x3ae>
				exled1 = 0;
 8004acc:	4a97      	ldr	r2, [pc, #604]	; (8004d2c <MainTask+0x604>)
 8004ace:	7853      	ldrb	r3, [r2, #1]
 8004ad0:	f36f 0341 	bfc	r3, #1, #1
 8004ad4:	7053      	strb	r3, [r2, #1]
			if(pp.path == 1){
 8004ad6:	4b94      	ldr	r3, [pc, #592]	; (8004d28 <MainTask+0x600>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d109      	bne.n	8004af8 <MainTask+0x3d0>
				exled1 = 1;
 8004ae4:	4a91      	ldr	r2, [pc, #580]	; (8004d2c <MainTask+0x604>)
 8004ae6:	7853      	ldrb	r3, [r2, #1]
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	7053      	strb	r3, [r2, #1]
				exled2 = 0;
 8004aee:	4a8f      	ldr	r2, [pc, #572]	; (8004d2c <MainTask+0x604>)
 8004af0:	7853      	ldrb	r3, [r2, #1]
 8004af2:	f36f 0300 	bfc	r3, #0, #1
 8004af6:	7053      	strb	r3, [r2, #1]
			}
			if(pp.path == 2){
 8004af8:	4b8b      	ldr	r3, [pc, #556]	; (8004d28 <MainTask+0x600>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d10e      	bne.n	8004b24 <MainTask+0x3fc>
				exled1 = 0;
 8004b06:	4a89      	ldr	r2, [pc, #548]	; (8004d2c <MainTask+0x604>)
 8004b08:	7853      	ldrb	r3, [r2, #1]
 8004b0a:	f36f 0341 	bfc	r3, #1, #1
 8004b0e:	7053      	strb	r3, [r2, #1]
				exled2 = 1;
 8004b10:	4a86      	ldr	r2, [pc, #536]	; (8004d2c <MainTask+0x604>)
 8004b12:	7853      	ldrb	r3, [r2, #1]
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	7053      	strb	r3, [r2, #1]
				exled3 = 0;
 8004b1a:	4a85      	ldr	r2, [pc, #532]	; (8004d30 <MainTask+0x608>)
 8004b1c:	7813      	ldrb	r3, [r2, #0]
 8004b1e:	f36f 13c7 	bfc	r3, #7, #1
 8004b22:	7013      	strb	r3, [r2, #0]
			}
			if(pp.path == 3){
 8004b24:	4b80      	ldr	r3, [pc, #512]	; (8004d28 <MainTask+0x600>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d10e      	bne.n	8004b50 <MainTask+0x428>
				exled2 = 0;
 8004b32:	4a7e      	ldr	r2, [pc, #504]	; (8004d2c <MainTask+0x604>)
 8004b34:	7853      	ldrb	r3, [r2, #1]
 8004b36:	f36f 0300 	bfc	r3, #0, #1
 8004b3a:	7053      	strb	r3, [r2, #1]
				exled3 = 1;
 8004b3c:	4a7c      	ldr	r2, [pc, #496]	; (8004d30 <MainTask+0x608>)
 8004b3e:	7813      	ldrb	r3, [r2, #0]
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	7013      	strb	r3, [r2, #0]
				exled4 = 0;
 8004b46:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <MainTask+0x608>)
 8004b48:	7813      	ldrb	r3, [r2, #0]
 8004b4a:	f36f 1386 	bfc	r3, #6, #1
 8004b4e:	7013      	strb	r3, [r2, #0]
			}
			if(pp.path == 4){
 8004b50:	4b75      	ldr	r3, [pc, #468]	; (8004d28 <MainTask+0x600>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d10e      	bne.n	8004b7c <MainTask+0x454>
				exled3 = 0;
 8004b5e:	4a74      	ldr	r2, [pc, #464]	; (8004d30 <MainTask+0x608>)
 8004b60:	7813      	ldrb	r3, [r2, #0]
 8004b62:	f36f 13c7 	bfc	r3, #7, #1
 8004b66:	7013      	strb	r3, [r2, #0]
				exled4 = 1;
 8004b68:	4a71      	ldr	r2, [pc, #452]	; (8004d30 <MainTask+0x608>)
 8004b6a:	7813      	ldrb	r3, [r2, #0]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	7013      	strb	r3, [r2, #0]
				exled5 = 0;
 8004b72:	4a6f      	ldr	r2, [pc, #444]	; (8004d30 <MainTask+0x608>)
 8004b74:	7813      	ldrb	r3, [r2, #0]
 8004b76:	f36f 1345 	bfc	r3, #5, #1
 8004b7a:	7013      	strb	r3, [r2, #0]
			}
			if(pp.path == 5){
 8004b7c:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <MainTask+0x600>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d10e      	bne.n	8004ba8 <MainTask+0x480>
				exled4 = 0;
 8004b8a:	4a69      	ldr	r2, [pc, #420]	; (8004d30 <MainTask+0x608>)
 8004b8c:	7813      	ldrb	r3, [r2, #0]
 8004b8e:	f36f 1386 	bfc	r3, #6, #1
 8004b92:	7013      	strb	r3, [r2, #0]
				exled5 = 1;
 8004b94:	4a66      	ldr	r2, [pc, #408]	; (8004d30 <MainTask+0x608>)
 8004b96:	7813      	ldrb	r3, [r2, #0]
 8004b98:	f043 0320 	orr.w	r3, r3, #32
 8004b9c:	7013      	strb	r3, [r2, #0]
				exled6 = 0;
 8004b9e:	4a64      	ldr	r2, [pc, #400]	; (8004d30 <MainTask+0x608>)
 8004ba0:	7813      	ldrb	r3, [r2, #0]
 8004ba2:	f36f 1304 	bfc	r3, #4, #1
 8004ba6:	7013      	strb	r3, [r2, #0]
			}
			if(pp.path == 6){
 8004ba8:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <MainTask+0x600>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d109      	bne.n	8004bca <MainTask+0x4a2>
				exled5 = 0;
 8004bb6:	4a5e      	ldr	r2, [pc, #376]	; (8004d30 <MainTask+0x608>)
 8004bb8:	7813      	ldrb	r3, [r2, #0]
 8004bba:	f36f 1345 	bfc	r3, #5, #1
 8004bbe:	7013      	strb	r3, [r2, #0]
				exled6 = 1;
 8004bc0:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <MainTask+0x608>)
 8004bc2:	7813      	ldrb	r3, [r2, #0]
 8004bc4:	f043 0310 	orr.w	r3, r3, #16
 8004bc8:	7013      	strb	r3, [r2, #0]
			}

			if(ps4.button == L1){
 8004bca:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <MainTask+0x5f8>)
 8004bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd2:	d113      	bne.n	8004bfc <MainTask+0x4d4>
				while(ps4.button == L1);
 8004bd4:	bf00      	nop
 8004bd6:	4b52      	ldr	r3, [pc, #328]	; (8004d20 <MainTask+0x5f8>)
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bde:	d0fa      	beq.n	8004bd6 <MainTask+0x4ae>
				pp.path --;
 8004be0:	4b51      	ldr	r3, [pc, #324]	; (8004d28 <MainTask+0x600>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3307      	adds	r3, #7
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	b2d9      	uxtb	r1, r3
 8004bf2:	4a4d      	ldr	r2, [pc, #308]	; (8004d28 <MainTask+0x600>)
 8004bf4:	7813      	ldrb	r3, [r2, #0]
 8004bf6:	f361 0302 	bfi	r3, r1, #0, #3
 8004bfa:	7013      	strb	r3, [r2, #0]
				if(pp.path < 0)	pp.path = 0;
			}
			if(ps4.button == R1){
 8004bfc:	4b48      	ldr	r3, [pc, #288]	; (8004d20 <MainTask+0x5f8>)
 8004bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c04:	d120      	bne.n	8004c48 <MainTask+0x520>
				while(ps4.button == R1);
 8004c06:	bf00      	nop
 8004c08:	4b45      	ldr	r3, [pc, #276]	; (8004d20 <MainTask+0x5f8>)
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c10:	d0fa      	beq.n	8004c08 <MainTask+0x4e0>
				pp.path ++;
 8004c12:	4b45      	ldr	r3, [pc, #276]	; (8004d28 <MainTask+0x600>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	b2d9      	uxtb	r1, r3
 8004c24:	4a40      	ldr	r2, [pc, #256]	; (8004d28 <MainTask+0x600>)
 8004c26:	7813      	ldrb	r3, [r2, #0]
 8004c28:	f361 0302 	bfi	r3, r1, #0, #3
 8004c2c:	7013      	strb	r3, [r2, #0]
				if(pp.path > 6)	pp.path = 6;
 8004c2e:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <MainTask+0x600>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f003 0307 	and.w	r3, r3, #7
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b07      	cmp	r3, #7
 8004c3a:	d105      	bne.n	8004c48 <MainTask+0x520>
 8004c3c:	4a3a      	ldr	r2, [pc, #232]	; (8004d28 <MainTask+0x600>)
 8004c3e:	7813      	ldrb	r3, [r2, #0]
 8004c40:	2106      	movs	r1, #6
 8004c42:	f361 0302 	bfi	r3, r1, #0, #3
 8004c46:	7013      	strb	r3, [r2, #0]
			}
			if(ps4.button == CROSS){
 8004c48:	4b35      	ldr	r3, [pc, #212]	; (8004d20 <MainTask+0x5f8>)
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c50:	d109      	bne.n	8004c66 <MainTask+0x53e>
				sys.ppend = 0;
 8004c52:	4a34      	ldr	r2, [pc, #208]	; (8004d24 <MainTask+0x5fc>)
 8004c54:	7813      	ldrb	r3, [r2, #0]
 8004c56:	f36f 13c7 	bfc	r3, #7, #1
 8004c5a:	7013      	strb	r3, [r2, #0]
				sys.control = 0;
 8004c5c:	4a31      	ldr	r2, [pc, #196]	; (8004d24 <MainTask+0x5fc>)
 8004c5e:	7813      	ldrb	r3, [r2, #0]
 8004c60:	f36f 0300 	bfc	r3, #0, #1
 8004c64:	7013      	strb	r3, [r2, #0]
			}
			if(ps4.button == TRIANGLE){
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <MainTask+0x5f8>)
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d115      	bne.n	8004c9c <MainTask+0x574>
				while(ps4.button == TRIANGLE);
 8004c70:	bf00      	nop
 8004c72:	4b2b      	ldr	r3, [pc, #172]	; (8004d20 <MainTask+0x5f8>)
 8004c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7a:	d0fa      	beq.n	8004c72 <MainTask+0x54a>
				sys.ppend = 1;
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <MainTask+0x5fc>)
 8004c7e:	7813      	ldrb	r3, [r2, #0]
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	7013      	strb	r3, [r2, #0]
				pp.base = 1;
 8004c86:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <MainTask+0x600>)
 8004c88:	7853      	ldrb	r3, [r2, #1]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	f361 0302 	bfi	r3, r1, #0, #3
 8004c90:	7053      	strb	r3, [r2, #1]
				sys.auto2manual = 0;
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <MainTask+0x5fc>)
 8004c94:	7813      	ldrb	r3, [r2, #0]
 8004c96:	f36f 1345 	bfc	r3, #5, #1
 8004c9a:	7013      	strb	r3, [r2, #0]
			}
			if(sys.ppend){
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <MainTask+0x5fc>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8378 	beq.w	800539c <MainTask+0xc74>
				if(pp.path == 1){
 8004cac:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <MainTask+0x600>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	f040 809a 	bne.w	8004df0 <MainTask+0x6c8>
					while (lsl1|| lsl2 || lsr1){
 8004cbc:	e07c      	b.n	8004db8 <MainTask+0x690>
						if((!(lsl2 || lsr1)) && lsl1)
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	481c      	ldr	r0, [pc, #112]	; (8004d34 <MainTask+0x60c>)
 8004cc2:	f011 fd51 	bl	8016768 <HAL_GPIO_ReadPin>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d039      	beq.n	8004d40 <MainTask+0x618>
 8004ccc:	2120      	movs	r1, #32
 8004cce:	481a      	ldr	r0, [pc, #104]	; (8004d38 <MainTask+0x610>)
 8004cd0:	f011 fd4a 	bl	8016768 <HAL_GPIO_ReadPin>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d032      	beq.n	8004d40 <MainTask+0x618>
 8004cda:	2110      	movs	r1, #16
 8004cdc:	4815      	ldr	r0, [pc, #84]	; (8004d34 <MainTask+0x60c>)
 8004cde:	f011 fd43 	bl	8016768 <HAL_GPIO_ReadPin>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d12b      	bne.n	8004d40 <MainTask+0x618>
							RNSVelocity(0.00, 1.50, 0.00, 1.00, &rns);
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <MainTask+0x5f0>)
 8004cea:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8004cee:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8004d3c <MainTask+0x614>
 8004cf2:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004cf6:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004d3c <MainTask+0x614>
 8004cfa:	f002 f87b 	bl	8006df4 <RNSVelocity>
 8004cfe:	e04f      	b.n	8004da0 <MainTask+0x678>
 8004d00:	9999999a 	.word	0x9999999a
 8004d04:	3fa99999 	.word	0x3fa99999
 8004d08:	9999999a 	.word	0x9999999a
 8004d0c:	3fb99999 	.word	0x3fb99999
 8004d10:	20007928 	.word	0x20007928
 8004d14:	3ff00000 	.word	0x3ff00000
 8004d18:	200093ec 	.word	0x200093ec
 8004d1c:	2000a878 	.word	0x2000a878
 8004d20:	2000a448 	.word	0x2000a448
 8004d24:	2000794c 	.word	0x2000794c
 8004d28:	20007880 	.word	0x20007880
 8004d2c:	40020c14 	.word	0x40020c14
 8004d30:	40020014 	.word	0x40020014
 8004d34:	40020c00 	.word	0x40020c00
 8004d38:	40020400 	.word	0x40020400
 8004d3c:	00000000 	.word	0x00000000
						else if(lsl1 || lsl2)
 8004d40:	2110      	movs	r1, #16
 8004d42:	48b9      	ldr	r0, [pc, #740]	; (8005028 <MainTask+0x900>)
 8004d44:	f011 fd10 	bl	8016768 <HAL_GPIO_ReadPin>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d006      	beq.n	8004d5c <MainTask+0x634>
 8004d4e:	2180      	movs	r1, #128	; 0x80
 8004d50:	48b5      	ldr	r0, [pc, #724]	; (8005028 <MainTask+0x900>)
 8004d52:	f011 fd09 	bl	8016768 <HAL_GPIO_ReadPin>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10b      	bne.n	8004d74 <MainTask+0x64c>
							RNSVelocity(1.25, 1.25, 1.25, 1.25, &rns);
 8004d5c:	48b3      	ldr	r0, [pc, #716]	; (800502c <MainTask+0x904>)
 8004d5e:	eef7 1a04 	vmov.f32	s3, #116	; 0x3fa00000  1.250
 8004d62:	eeb7 1a04 	vmov.f32	s2, #116	; 0x3fa00000  1.250
 8004d66:	eef7 0a04 	vmov.f32	s1, #116	; 0x3fa00000  1.250
 8004d6a:	eeb7 0a04 	vmov.f32	s0, #116	; 0x3fa00000  1.250
 8004d6e:	f002 f841 	bl	8006df4 <RNSVelocity>
 8004d72:	e015      	b.n	8004da0 <MainTask+0x678>
						else if(lsr1)
 8004d74:	2120      	movs	r1, #32
 8004d76:	48ae      	ldr	r0, [pc, #696]	; (8005030 <MainTask+0x908>)
 8004d78:	f011 fcf6 	bl	8016768 <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d10b      	bne.n	8004d9a <MainTask+0x672>
							RNSVelocity(-0.75, 1.00, 1.00, -0.75, &rns);
 8004d82:	48aa      	ldr	r0, [pc, #680]	; (800502c <MainTask+0x904>)
 8004d84:	eefe 1a08 	vmov.f32	s3, #232	; 0xbf400000 -0.750
 8004d88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004d8c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004d90:	eebe 0a08 	vmov.f32	s0, #232	; 0xbf400000 -0.750
 8004d94:	f002 f82e 	bl	8006df4 <RNSVelocity>
 8004d98:	e002      	b.n	8004da0 <MainTask+0x678>
						else
							RNSStop(&rns);
 8004d9a:	48a4      	ldr	r0, [pc, #656]	; (800502c <MainTask+0x904>)
 8004d9c:	f001 ffda 	bl	8006d54 <RNSStop>
						if(ps4.button == CROSS){
 8004da0:	4ba4      	ldr	r3, [pc, #656]	; (8005034 <MainTask+0x90c>)
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da8:	d103      	bne.n	8004db2 <MainTask+0x68a>
							RNSStop(&rns);
 8004daa:	48a0      	ldr	r0, [pc, #640]	; (800502c <MainTask+0x904>)
 8004dac:	f001 ffd2 	bl	8006d54 <RNSStop>
							break;
 8004db0:	e01a      	b.n	8004de8 <MainTask+0x6c0>
						}
						Await(100);
 8004db2:	2064      	movs	r0, #100	; 0x64
 8004db4:	f009 fd96 	bl	800e8e4 <Await>
					while (lsl1|| lsl2 || lsr1){
 8004db8:	2110      	movs	r1, #16
 8004dba:	489b      	ldr	r0, [pc, #620]	; (8005028 <MainTask+0x900>)
 8004dbc:	f011 fcd4 	bl	8016768 <HAL_GPIO_ReadPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	f43f af7b 	beq.w	8004cbe <MainTask+0x596>
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	4897      	ldr	r0, [pc, #604]	; (8005028 <MainTask+0x900>)
 8004dcc:	f011 fccc 	bl	8016768 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	f43f af73 	beq.w	8004cbe <MainTask+0x596>
 8004dd8:	2120      	movs	r1, #32
 8004dda:	4895      	ldr	r0, [pc, #596]	; (8005030 <MainTask+0x908>)
 8004ddc:	f011 fcc4 	bl	8016768 <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	f43f af6b 	beq.w	8004cbe <MainTask+0x596>
					}
					RNSStop(&rns);
 8004de8:	4890      	ldr	r0, [pc, #576]	; (800502c <MainTask+0x904>)
 8004dea:	f001 ffb3 	bl	8006d54 <RNSStop>
 8004dee:	e2d0      	b.n	8005392 <MainTask+0xc6a>
				}
				else if(pp.path == 2 || pp.path == 4){
 8004df0:	4b91      	ldr	r3, [pc, #580]	; (8005038 <MainTask+0x910>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d006      	beq.n	8004e0c <MainTask+0x6e4>
 8004dfe:	4b8e      	ldr	r3, [pc, #568]	; (8005038 <MainTask+0x910>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d11f      	bne.n	8004e4c <MainTask+0x724>
						pp.laser = 1;
 8004e0c:	4a8a      	ldr	r2, [pc, #552]	; (8005038 <MainTask+0x910>)
 8004e0e:	7813      	ldrb	r3, [r2, #0]
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	7013      	strb	r3, [r2, #0]
						if(pp.path == 2)
 8004e16:	4b88      	ldr	r3, [pc, #544]	; (8005038 <MainTask+0x910>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d103      	bne.n	8004e2c <MainTask+0x704>
							z_tar = 90.0;
 8004e24:	4b85      	ldr	r3, [pc, #532]	; (800503c <MainTask+0x914>)
 8004e26:	4a86      	ldr	r2, [pc, #536]	; (8005040 <MainTask+0x918>)
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e009      	b.n	8004e40 <MainTask+0x718>
						else
							z_tar = 0.0;
 8004e2c:	4b83      	ldr	r3, [pc, #524]	; (800503c <MainTask+0x914>)
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
					while(ps4.button != CROSS){
 8004e34:	e004      	b.n	8004e40 <MainTask+0x718>
						sys.control = 1;
 8004e36:	4a83      	ldr	r2, [pc, #524]	; (8005044 <MainTask+0x91c>)
 8004e38:	7813      	ldrb	r3, [r2, #0]
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	7013      	strb	r3, [r2, #0]
					while(ps4.button != CROSS){
 8004e40:	4b7c      	ldr	r3, [pc, #496]	; (8005034 <MainTask+0x90c>)
 8004e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e48:	d1f5      	bne.n	8004e36 <MainTask+0x70e>
				else if(pp.path == 2 || pp.path == 4){
 8004e4a:	e2a2      	b.n	8005392 <MainTask+0xc6a>
					}
				}
				else if(pp.path == 3){
 8004e4c:	4b7a      	ldr	r3, [pc, #488]	; (8005038 <MainTask+0x910>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d176      	bne.n	8004f48 <MainTask+0x820>
					//stick france
					while (lsl2|| lsr1 || lsr2){
 8004e5a:	e05c      	b.n	8004f16 <MainTask+0x7ee>
						if((!(lsl2 || lsr1)) && lsr2)
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	4872      	ldr	r0, [pc, #456]	; (8005028 <MainTask+0x900>)
 8004e60:	f011 fc82 	bl	8016768 <HAL_GPIO_ReadPin>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d019      	beq.n	8004e9e <MainTask+0x776>
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	4870      	ldr	r0, [pc, #448]	; (8005030 <MainTask+0x908>)
 8004e6e:	f011 fc7b 	bl	8016768 <HAL_GPIO_ReadPin>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d012      	beq.n	8004e9e <MainTask+0x776>
 8004e78:	2140      	movs	r1, #64	; 0x40
 8004e7a:	486d      	ldr	r0, [pc, #436]	; (8005030 <MainTask+0x908>)
 8004e7c:	f011 fc74 	bl	8016768 <HAL_GPIO_ReadPin>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10b      	bne.n	8004e9e <MainTask+0x776>
							RNSVelocity(0.00, 0.00, 1.50, -1.00, &rns);
 8004e86:	4869      	ldr	r0, [pc, #420]	; (800502c <MainTask+0x904>)
 8004e88:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004e8c:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8004e90:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8005048 <MainTask+0x920>
 8004e94:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8005048 <MainTask+0x920>
 8004e98:	f001 ffac 	bl	8006df4 <RNSVelocity>
 8004e9c:	e02f      	b.n	8004efe <MainTask+0x7d6>
						else if(lsr1 || lsr2)
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	4863      	ldr	r0, [pc, #396]	; (8005030 <MainTask+0x908>)
 8004ea2:	f011 fc61 	bl	8016768 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d006      	beq.n	8004eba <MainTask+0x792>
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	4860      	ldr	r0, [pc, #384]	; (8005030 <MainTask+0x908>)
 8004eb0:	f011 fc5a 	bl	8016768 <HAL_GPIO_ReadPin>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10b      	bne.n	8004ed2 <MainTask+0x7aa>
							RNSVelocity(-0.75, 0.75, 2.00, -1.50, &rns);
 8004eba:	485c      	ldr	r0, [pc, #368]	; (800502c <MainTask+0x904>)
 8004ebc:	eeff 1a08 	vmov.f32	s3, #248	; 0xbfc00000 -1.5
 8004ec0:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8004ec4:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8004ec8:	eebe 0a08 	vmov.f32	s0, #232	; 0xbf400000 -0.750
 8004ecc:	f001 ff92 	bl	8006df4 <RNSVelocity>
 8004ed0:	e015      	b.n	8004efe <MainTask+0x7d6>
						else if(lsl2)
 8004ed2:	2180      	movs	r1, #128	; 0x80
 8004ed4:	4854      	ldr	r0, [pc, #336]	; (8005028 <MainTask+0x900>)
 8004ed6:	f011 fc47 	bl	8016768 <HAL_GPIO_ReadPin>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10b      	bne.n	8004ef8 <MainTask+0x7d0>
							RNSVelocity(0.75, 1.00, 1.00, 0.75, &rns);
 8004ee0:	4852      	ldr	r0, [pc, #328]	; (800502c <MainTask+0x904>)
 8004ee2:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 8004ee6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004eea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004eee:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8004ef2:	f001 ff7f 	bl	8006df4 <RNSVelocity>
 8004ef6:	e002      	b.n	8004efe <MainTask+0x7d6>
						else{
							RNSStop(&rns);
 8004ef8:	484c      	ldr	r0, [pc, #304]	; (800502c <MainTask+0x904>)
 8004efa:	f001 ff2b 	bl	8006d54 <RNSStop>
						}
						if(ps4.button == CROSS){
 8004efe:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <MainTask+0x90c>)
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f06:	d103      	bne.n	8004f10 <MainTask+0x7e8>
							RNSStop(&rns);
 8004f08:	4848      	ldr	r0, [pc, #288]	; (800502c <MainTask+0x904>)
 8004f0a:	f001 ff23 	bl	8006d54 <RNSStop>
							break;
 8004f0e:	e017      	b.n	8004f40 <MainTask+0x818>
						}
						Await(100);
 8004f10:	2064      	movs	r0, #100	; 0x64
 8004f12:	f009 fce7 	bl	800e8e4 <Await>
					while (lsl2|| lsr1 || lsr2){
 8004f16:	2180      	movs	r1, #128	; 0x80
 8004f18:	4843      	ldr	r0, [pc, #268]	; (8005028 <MainTask+0x900>)
 8004f1a:	f011 fc25 	bl	8016768 <HAL_GPIO_ReadPin>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d09b      	beq.n	8004e5c <MainTask+0x734>
 8004f24:	2120      	movs	r1, #32
 8004f26:	4842      	ldr	r0, [pc, #264]	; (8005030 <MainTask+0x908>)
 8004f28:	f011 fc1e 	bl	8016768 <HAL_GPIO_ReadPin>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d094      	beq.n	8004e5c <MainTask+0x734>
 8004f32:	2140      	movs	r1, #64	; 0x40
 8004f34:	483e      	ldr	r0, [pc, #248]	; (8005030 <MainTask+0x908>)
 8004f36:	f011 fc17 	bl	8016768 <HAL_GPIO_ReadPin>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d08d      	beq.n	8004e5c <MainTask+0x734>
					}
					RNSStop(&rns);
 8004f40:	483a      	ldr	r0, [pc, #232]	; (800502c <MainTask+0x904>)
 8004f42:	f001 ff07 	bl	8006d54 <RNSStop>
 8004f46:	e224      	b.n	8005392 <MainTask+0xc6a>
				}
				else if(pp.path == 5){	//lagori
 8004f48:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <MainTask+0x910>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	f040 80fc 	bne.w	8005150 <MainTask+0xa28>
					pp.base = 1;
 8004f58:	4a37      	ldr	r2, [pc, #220]	; (8005038 <MainTask+0x910>)
 8004f5a:	7853      	ldrb	r3, [r2, #1]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	f361 0302 	bfi	r3, r1, #0, #3
 8004f62:	7053      	strb	r3, [r2, #1]
					while(pp.base){
 8004f64:	e0e6      	b.n	8005134 <MainTask+0xa0c>
						RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 8004f66:	4931      	ldr	r1, [pc, #196]	; (800502c <MainTask+0x904>)
 8004f68:	205f      	movs	r0, #95	; 0x5f
 8004f6a:	f002 fa8d 	bl	8007488 <RNSEnquire>
						zrad = rns.enq.enq_buffer[3].data;
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	; (800502c <MainTask+0x904>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	4a36      	ldr	r2, [pc, #216]	; (800504c <MainTask+0x924>)
 8004f74:	6013      	str	r3, [r2, #0]
						vz = 5.0 * zrad;
 8004f76:	4b35      	ldr	r3, [pc, #212]	; (800504c <MainTask+0x924>)
 8004f78:	edd3 7a00 	vldr	s15, [r3]
 8004f7c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <MainTask+0x928>)
 8004f86:	edc3 7a00 	vstr	s15, [r3]
						if(vz < 0.5)		vz = 0.5;
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <MainTask+0x928>)
 8004f8c:	edd3 7a00 	vldr	s15, [r3]
 8004f90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9c:	d504      	bpl.n	8004fa8 <MainTask+0x880>
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <MainTask+0x928>)
 8004fa0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e00d      	b.n	8004fc4 <MainTask+0x89c>
						else if (vz > -0.5)	vz = -0.5;
 8004fa8:	4b29      	ldr	r3, [pc, #164]	; (8005050 <MainTask+0x928>)
 8004faa:	edd3 7a00 	vldr	s15, [r3]
 8004fae:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fba:	dd03      	ble.n	8004fc4 <MainTask+0x89c>
 8004fbc:	4b24      	ldr	r3, [pc, #144]	; (8005050 <MainTask+0x928>)
 8004fbe:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 8004fc2:	601a      	str	r2, [r3, #0]

						if(fabs(zrad) > z_err)
 8004fc4:	4b21      	ldr	r3, [pc, #132]	; (800504c <MainTask+0x924>)
 8004fc6:	edd3 7a00 	vldr	s15, [r3]
 8004fca:	eef0 7ae7 	vabs.f32	s15, s15
 8004fce:	ee17 0a90 	vmov	r0, s15
 8004fd2:	f7fb fab9 	bl	8000548 <__aeabi_f2d>
 8004fd6:	a312      	add	r3, pc, #72	; (adr r3, 8005020 <MainTask+0x8f8>)
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f7fb fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d036      	beq.n	8005054 <MainTask+0x92c>
							RNSVelocity(vz, -vz, vz, -vz, &rns);
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <MainTask+0x928>)
 8004fe8:	ed93 7a00 	vldr	s14, [r3]
 8004fec:	4b18      	ldr	r3, [pc, #96]	; (8005050 <MainTask+0x928>)
 8004fee:	edd3 7a00 	vldr	s15, [r3]
 8004ff2:	eef1 6a67 	vneg.f32	s13, s15
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <MainTask+0x928>)
 8004ff8:	ed93 6a00 	vldr	s12, [r3]
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <MainTask+0x928>)
 8004ffe:	edd3 7a00 	vldr	s15, [r3]
 8005002:	eef1 7a67 	vneg.f32	s15, s15
 8005006:	4809      	ldr	r0, [pc, #36]	; (800502c <MainTask+0x904>)
 8005008:	eef0 1a67 	vmov.f32	s3, s15
 800500c:	eeb0 1a46 	vmov.f32	s2, s12
 8005010:	eef0 0a66 	vmov.f32	s1, s13
 8005014:	eeb0 0a47 	vmov.f32	s0, s14
 8005018:	f001 feec 	bl	8006df4 <RNSVelocity>
 800501c:	e081      	b.n	8005122 <MainTask+0x9fa>
 800501e:	bf00      	nop
 8005020:	66666666 	.word	0x66666666
 8005024:	401a6666 	.word	0x401a6666
 8005028:	40020c00 	.word	0x40020c00
 800502c:	200093ec 	.word	0x200093ec
 8005030:	40020400 	.word	0x40020400
 8005034:	2000a448 	.word	0x2000a448
 8005038:	20007880 	.word	0x20007880
 800503c:	20007684 	.word	0x20007684
 8005040:	42b40000 	.word	0x42b40000
 8005044:	2000794c 	.word	0x2000794c
 8005048:	00000000 	.word	0x00000000
 800504c:	200071c8 	.word	0x200071c8
 8005050:	2000719c 	.word	0x2000719c
						else{
							if(tfmini.dist_err > 0.05)			RNSVelocity(-2.5, -2.5, -2.5, -2.5, &rns);
 8005054:	4bc0      	ldr	r3, [pc, #768]	; (8005358 <MainTask+0xc30>)
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	4618      	mov	r0, r3
 800505a:	f7fb fa75 	bl	8000548 <__aeabi_f2d>
 800505e:	a3b8      	add	r3, pc, #736	; (adr r3, 8005340 <MainTask+0xc18>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb fd58 	bl	8000b18 <__aeabi_dcmpgt>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <MainTask+0x95e>
 800506e:	48bb      	ldr	r0, [pc, #748]	; (800535c <MainTask+0xc34>)
 8005070:	eef8 1a04 	vmov.f32	s3, #132	; 0xc0200000 -2.5
 8005074:	eeb8 1a04 	vmov.f32	s2, #132	; 0xc0200000 -2.5
 8005078:	eef8 0a04 	vmov.f32	s1, #132	; 0xc0200000 -2.5
 800507c:	eeb8 0a04 	vmov.f32	s0, #132	; 0xc0200000 -2.5
 8005080:	f001 feb8 	bl	8006df4 <RNSVelocity>
 8005084:	e04d      	b.n	8005122 <MainTask+0x9fa>
							else if(tfmini.dist_err < -0.25)	RNSVelocity(0.75, 0.75, 0.75, 0.75, &rns);
 8005086:	4bb4      	ldr	r3, [pc, #720]	; (8005358 <MainTask+0xc30>)
 8005088:	edd3 7a08 	vldr	s15, [r3, #32]
 800508c:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8005090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005098:	d50b      	bpl.n	80050b2 <MainTask+0x98a>
 800509a:	48b0      	ldr	r0, [pc, #704]	; (800535c <MainTask+0xc34>)
 800509c:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 80050a0:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 80050a4:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80050a8:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80050ac:	f001 fea2 	bl	8006df4 <RNSVelocity>
 80050b0:	e037      	b.n	8005122 <MainTask+0x9fa>
							else if(!(LGbasel))					RNSVelocity(1.00, -1.00, -1.00, 1.00, &rns);
 80050b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80050b6:	48aa      	ldr	r0, [pc, #680]	; (8005360 <MainTask+0xc38>)
 80050b8:	f011 fb56 	bl	8016768 <HAL_GPIO_ReadPin>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <MainTask+0x9b2>
 80050c2:	48a6      	ldr	r0, [pc, #664]	; (800535c <MainTask+0xc34>)
 80050c4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80050c8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80050cc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80050d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80050d4:	f001 fe8e 	bl	8006df4 <RNSVelocity>
 80050d8:	e023      	b.n	8005122 <MainTask+0x9fa>
							else if(!(LGbaser))					RNSVelocity(-1.00, 1.00, 1.00, -1.00, &rns);
 80050da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050de:	48a0      	ldr	r0, [pc, #640]	; (8005360 <MainTask+0xc38>)
 80050e0:	f011 fb42 	bl	8016768 <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <MainTask+0x9da>
 80050ea:	489c      	ldr	r0, [pc, #624]	; (800535c <MainTask+0xc34>)
 80050ec:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80050f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80050f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80050f8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80050fc:	f001 fe7a 	bl	8006df4 <RNSVelocity>
 8005100:	e00f      	b.n	8005122 <MainTask+0x9fa>
							else{
								Await(150);
 8005102:	2096      	movs	r0, #150	; 0x96
 8005104:	f009 fbee 	bl	800e8e4 <Await>
								RNSStop(&rns);
 8005108:	4894      	ldr	r0, [pc, #592]	; (800535c <MainTask+0xc34>)
 800510a:	f001 fe23 	bl	8006d54 <RNSStop>
								pp.base = 0;
 800510e:	4a95      	ldr	r2, [pc, #596]	; (8005364 <MainTask+0xc3c>)
 8005110:	7853      	ldrb	r3, [r2, #1]
 8005112:	f36f 0302 	bfc	r3, #0, #3
 8005116:	7053      	strb	r3, [r2, #1]
								pp.baseok = 1;
 8005118:	4a92      	ldr	r2, [pc, #584]	; (8005364 <MainTask+0xc3c>)
 800511a:	7853      	ldrb	r3, [r2, #1]
 800511c:	f043 0308 	orr.w	r3, r3, #8
 8005120:	7053      	strb	r3, [r2, #1]
							}
						}
						if(ps4.button == CROSS){
 8005122:	4b91      	ldr	r3, [pc, #580]	; (8005368 <MainTask+0xc40>)
 8005124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800512a:	d103      	bne.n	8005134 <MainTask+0xa0c>
							RNSStop(&rns);
 800512c:	488b      	ldr	r0, [pc, #556]	; (800535c <MainTask+0xc34>)
 800512e:	f001 fe11 	bl	8006d54 <RNSStop>
							break;
 8005132:	e007      	b.n	8005144 <MainTask+0xa1c>
					while(pp.base){
 8005134:	4b8b      	ldr	r3, [pc, #556]	; (8005364 <MainTask+0xc3c>)
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af11 	bne.w	8004f66 <MainTask+0x83e>
						}
					}
					pp.base = 0;
 8005144:	4a87      	ldr	r2, [pc, #540]	; (8005364 <MainTask+0xc3c>)
 8005146:	7853      	ldrb	r3, [r2, #1]
 8005148:	f36f 0302 	bfc	r3, #0, #3
 800514c:	7053      	strb	r3, [r2, #1]
 800514e:	e120      	b.n	8005392 <MainTask+0xc6a>
				}
				else if(pp.path == 6){	//lagori (test without imu adjust
 8005150:	4b84      	ldr	r3, [pc, #528]	; (8005364 <MainTask+0xc3c>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b06      	cmp	r3, #6
 800515c:	f040 8119 	bne.w	8005392 <MainTask+0xc6a>
					pp.base = 1;
 8005160:	4a80      	ldr	r2, [pc, #512]	; (8005364 <MainTask+0xc3c>)
 8005162:	7853      	ldrb	r3, [r2, #1]
 8005164:	2101      	movs	r1, #1
 8005166:	f361 0302 	bfi	r3, r1, #0, #3
 800516a:	7053      	strb	r3, [r2, #1]
					while(pp.base){
 800516c:	e104      	b.n	8005378 <MainTask+0xc50>
						RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 800516e:	497b      	ldr	r1, [pc, #492]	; (800535c <MainTask+0xc34>)
 8005170:	205f      	movs	r0, #95	; 0x5f
 8005172:	f002 f989 	bl	8007488 <RNSEnquire>
						zrad = rns.enq.enq_buffer[3].data;
 8005176:	4b79      	ldr	r3, [pc, #484]	; (800535c <MainTask+0xc34>)
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	4a7c      	ldr	r2, [pc, #496]	; (800536c <MainTask+0xc44>)
 800517c:	6013      	str	r3, [r2, #0]
						vz = 5.0 * (zrad - 1.5708);
 800517e:	4b7b      	ldr	r3, [pc, #492]	; (800536c <MainTask+0xc44>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb f9e0 	bl	8000548 <__aeabi_f2d>
 8005188:	a36f      	add	r3, pc, #444	; (adr r3, 8005348 <MainTask+0xc20>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	4b74      	ldr	r3, [pc, #464]	; (8005370 <MainTask+0xc48>)
 80051a0:	f7fb fa2a 	bl	80005f8 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f7fb fd1c 	bl	8000be8 <__aeabi_d2f>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a70      	ldr	r2, [pc, #448]	; (8005374 <MainTask+0xc4c>)
 80051b4:	6013      	str	r3, [r2, #0]
						if(vz < 0.5)		vz = 0.5;
 80051b6:	4b6f      	ldr	r3, [pc, #444]	; (8005374 <MainTask+0xc4c>)
 80051b8:	edd3 7a00 	vldr	s15, [r3]
 80051bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c8:	d504      	bpl.n	80051d4 <MainTask+0xaac>
 80051ca:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <MainTask+0xc4c>)
 80051cc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e00d      	b.n	80051f0 <MainTask+0xac8>
						else if (vz > -0.5)	vz = -0.5;
 80051d4:	4b67      	ldr	r3, [pc, #412]	; (8005374 <MainTask+0xc4c>)
 80051d6:	edd3 7a00 	vldr	s15, [r3]
 80051da:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80051de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e6:	dd03      	ble.n	80051f0 <MainTask+0xac8>
 80051e8:	4b62      	ldr	r3, [pc, #392]	; (8005374 <MainTask+0xc4c>)
 80051ea:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 80051ee:	601a      	str	r2, [r3, #0]

						if(fabs(zrad - 1.5708) > z_err)
 80051f0:	4b5e      	ldr	r3, [pc, #376]	; (800536c <MainTask+0xc44>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f9a7 	bl	8000548 <__aeabi_f2d>
 80051fa:	a353      	add	r3, pc, #332	; (adr r3, 8005348 <MainTask+0xc20>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb f842 	bl	8000288 <__aeabi_dsub>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4614      	mov	r4, r2
 800520a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800520e:	a350      	add	r3, pc, #320	; (adr r3, 8005350 <MainTask+0xc28>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	f7fb fc7e 	bl	8000b18 <__aeabi_dcmpgt>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01b      	beq.n	800525a <MainTask+0xb32>
							RNSVelocity(vz, -vz, vz, -vz, &rns);
 8005222:	4b54      	ldr	r3, [pc, #336]	; (8005374 <MainTask+0xc4c>)
 8005224:	ed93 7a00 	vldr	s14, [r3]
 8005228:	4b52      	ldr	r3, [pc, #328]	; (8005374 <MainTask+0xc4c>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	eef1 6a67 	vneg.f32	s13, s15
 8005232:	4b50      	ldr	r3, [pc, #320]	; (8005374 <MainTask+0xc4c>)
 8005234:	ed93 6a00 	vldr	s12, [r3]
 8005238:	4b4e      	ldr	r3, [pc, #312]	; (8005374 <MainTask+0xc4c>)
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	eef1 7a67 	vneg.f32	s15, s15
 8005242:	4846      	ldr	r0, [pc, #280]	; (800535c <MainTask+0xc34>)
 8005244:	eef0 1a67 	vmov.f32	s3, s15
 8005248:	eeb0 1a46 	vmov.f32	s2, s12
 800524c:	eef0 0a66 	vmov.f32	s1, s13
 8005250:	eeb0 0a47 	vmov.f32	s0, s14
 8005254:	f001 fdce 	bl	8006df4 <RNSVelocity>
 8005258:	e066      	b.n	8005328 <MainTask+0xc00>
						else{
							if(tfmini.dist_err > 0.05)			RNSVelocity(-2.5, -2.5, -2.5, -2.5, &rns);
 800525a:	4b3f      	ldr	r3, [pc, #252]	; (8005358 <MainTask+0xc30>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f972 	bl	8000548 <__aeabi_f2d>
 8005264:	a336      	add	r3, pc, #216	; (adr r3, 8005340 <MainTask+0xc18>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb fc55 	bl	8000b18 <__aeabi_dcmpgt>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <MainTask+0xb64>
 8005274:	4839      	ldr	r0, [pc, #228]	; (800535c <MainTask+0xc34>)
 8005276:	eef8 1a04 	vmov.f32	s3, #132	; 0xc0200000 -2.5
 800527a:	eeb8 1a04 	vmov.f32	s2, #132	; 0xc0200000 -2.5
 800527e:	eef8 0a04 	vmov.f32	s1, #132	; 0xc0200000 -2.5
 8005282:	eeb8 0a04 	vmov.f32	s0, #132	; 0xc0200000 -2.5
 8005286:	f001 fdb5 	bl	8006df4 <RNSVelocity>
 800528a:	e04d      	b.n	8005328 <MainTask+0xc00>
							else if(tfmini.dist_err < -0.25)	RNSVelocity(0.75, 0.75, 0.75, 0.75, &rns);
 800528c:	4b32      	ldr	r3, [pc, #200]	; (8005358 <MainTask+0xc30>)
 800528e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005292:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8005296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800529a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529e:	d50b      	bpl.n	80052b8 <MainTask+0xb90>
 80052a0:	482e      	ldr	r0, [pc, #184]	; (800535c <MainTask+0xc34>)
 80052a2:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 80052a6:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 80052aa:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80052ae:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 80052b2:	f001 fd9f 	bl	8006df4 <RNSVelocity>
 80052b6:	e037      	b.n	8005328 <MainTask+0xc00>
							else if(!(LGbasel))					RNSVelocity(1.00, -1.00, -1.00, 1.00, &rns);
 80052b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052bc:	4828      	ldr	r0, [pc, #160]	; (8005360 <MainTask+0xc38>)
 80052be:	f011 fa53 	bl	8016768 <HAL_GPIO_ReadPin>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <MainTask+0xbb8>
 80052c8:	4824      	ldr	r0, [pc, #144]	; (800535c <MainTask+0xc34>)
 80052ca:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80052ce:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 80052d2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80052d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80052da:	f001 fd8b 	bl	8006df4 <RNSVelocity>
 80052de:	e023      	b.n	8005328 <MainTask+0xc00>
							else if(!(LGbaser))					RNSVelocity(-1.00, 1.00, 1.00, -1.00, &rns);
 80052e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052e4:	481e      	ldr	r0, [pc, #120]	; (8005360 <MainTask+0xc38>)
 80052e6:	f011 fa3f 	bl	8016768 <HAL_GPIO_ReadPin>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00b      	beq.n	8005308 <MainTask+0xbe0>
 80052f0:	481a      	ldr	r0, [pc, #104]	; (800535c <MainTask+0xc34>)
 80052f2:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 80052f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80052fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80052fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005302:	f001 fd77 	bl	8006df4 <RNSVelocity>
 8005306:	e00f      	b.n	8005328 <MainTask+0xc00>
							else{
								Await(150);
 8005308:	2096      	movs	r0, #150	; 0x96
 800530a:	f009 faeb 	bl	800e8e4 <Await>
								RNSStop(&rns);
 800530e:	4813      	ldr	r0, [pc, #76]	; (800535c <MainTask+0xc34>)
 8005310:	f001 fd20 	bl	8006d54 <RNSStop>
								pp.base = 0;
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <MainTask+0xc3c>)
 8005316:	7853      	ldrb	r3, [r2, #1]
 8005318:	f36f 0302 	bfc	r3, #0, #3
 800531c:	7053      	strb	r3, [r2, #1]
								pp.baseok = 1;
 800531e:	4a11      	ldr	r2, [pc, #68]	; (8005364 <MainTask+0xc3c>)
 8005320:	7853      	ldrb	r3, [r2, #1]
 8005322:	f043 0308 	orr.w	r3, r3, #8
 8005326:	7053      	strb	r3, [r2, #1]
							}
						}
						if(ps4.button == CROSS){
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <MainTask+0xc40>)
 800532a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005330:	d122      	bne.n	8005378 <MainTask+0xc50>
							RNSStop(&rns);
 8005332:	480a      	ldr	r0, [pc, #40]	; (800535c <MainTask+0xc34>)
 8005334:	f001 fd0e 	bl	8006d54 <RNSStop>
							break;
 8005338:	e026      	b.n	8005388 <MainTask+0xc60>
 800533a:	bf00      	nop
 800533c:	f3af 8000 	nop.w
 8005340:	9999999a 	.word	0x9999999a
 8005344:	3fa99999 	.word	0x3fa99999
 8005348:	2e48e8a7 	.word	0x2e48e8a7
 800534c:	3ff921ff 	.word	0x3ff921ff
 8005350:	66666666 	.word	0x66666666
 8005354:	401a6666 	.word	0x401a6666
 8005358:	20009704 	.word	0x20009704
 800535c:	200093ec 	.word	0x200093ec
 8005360:	40020c00 	.word	0x40020c00
 8005364:	20007880 	.word	0x20007880
 8005368:	2000a448 	.word	0x2000a448
 800536c:	200071c8 	.word	0x200071c8
 8005370:	40140000 	.word	0x40140000
 8005374:	2000719c 	.word	0x2000719c
					while(pp.base){
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <MainTask+0xc88>)
 800537a:	785b      	ldrb	r3, [r3, #1]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f aef3 	bne.w	800516e <MainTask+0xa46>
						}
					}
					pp.base = 0;
 8005388:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <MainTask+0xc88>)
 800538a:	7853      	ldrb	r3, [r2, #1]
 800538c:	f36f 0302 	bfc	r3, #0, #3
 8005390:	7053      	strb	r3, [r2, #1]
				}
				sys.ppend = 0;
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <MainTask+0xc8c>)
 8005394:	7813      	ldrb	r3, [r2, #0]
 8005396:	f36f 13c7 	bfc	r3, #7, #1
 800539a:	7013      	strb	r3, [r2, #0]
		while(sys.stickf){
 800539c:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <MainTask+0xc8c>)
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f ab7e 	bne.w	8004aa8 <MainTask+0x380>
		while(sys.control){
 80053ac:	f7ff baec 	b.w	8004988 <MainTask+0x260>
 80053b0:	20007880 	.word	0x20007880
 80053b4:	2000794c 	.word	0x2000794c

080053b8 <LagoriTask>:
			}
		}
	}
}

void LagoriTask(void *argument){
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	while(1){
		if(sys.manual)
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <LagoriTask+0x1c>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f8      	beq.n	80053c0 <LagoriTask+0x8>
			lagori_func();
 80053ce:	f005 fb17 	bl	800aa00 <lagori_func>
		if(sys.manual)
 80053d2:	e7f5      	b.n	80053c0 <LagoriTask+0x8>
 80053d4:	2000794c 	.word	0x2000794c

080053d8 <BLDCTask>:
	}
}

void BLDCTask(void *argument){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	while(1){
		if(sys.manual)
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <BLDCTask+0x1c>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0f8      	beq.n	80053e0 <BLDCTask+0x8>
			lifting_func();
 80053ee:	f005 feeb 	bl	800b1c8 <lifting_func>
		if(sys.manual)
 80053f2:	e7f5      	b.n	80053e0 <BLDCTask+0x8>
 80053f4:	2000794c 	.word	0x2000794c

080053f8 <EmergencyTask>:
	}
}

void EmergencyTask(void *argument){
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b09e      	sub	sp, #120	; 0x78
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	while(1){
		enqpwLG = QEIRead(QEI1);
 8005400:	2001      	movs	r0, #1
 8005402:	f7fc fe7f 	bl	8002104 <QEIRead>
 8005406:	4603      	mov	r3, r0
 8005408:	4a51      	ldr	r2, [pc, #324]	; (8005550 <EmergencyTask+0x158>)
 800540a:	6013      	str	r3, [r2, #0]
		enqpwLlf = QEIRead(QEI4);
 800540c:	2004      	movs	r0, #4
 800540e:	f7fc fe79 	bl	8002104 <QEIRead>
 8005412:	4603      	mov	r3, r0
 8005414:	4a4f      	ldr	r2, [pc, #316]	; (8005554 <EmergencyTask+0x15c>)
 8005416:	6013      	str	r3, [r2, #0]
		tfmini.dist_err = tfmini.dist - tfmini.dist_target;
 8005418:	4b4f      	ldr	r3, [pc, #316]	; (8005558 <EmergencyTask+0x160>)
 800541a:	ed93 7a04 	vldr	s14, [r3, #16]
 800541e:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <EmergencyTask+0x160>)
 8005420:	edd3 7a07 	vldr	s15, [r3, #28]
 8005424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005428:	4b4b      	ldr	r3, [pc, #300]	; (8005558 <EmergencyTask+0x160>)
 800542a:	edc3 7a08 	vstr	s15, [r3, #32]

		if(ps4.button == TOUCH){
 800542e:	4b4b      	ldr	r3, [pc, #300]	; (800555c <EmergencyTask+0x164>)
 8005430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005436:	d1e3      	bne.n	8005400 <EmergencyTask+0x8>
			RNSStop(&rns);
 8005438:	4849      	ldr	r0, [pc, #292]	; (8005560 <EmergencyTask+0x168>)
 800543a:	f001 fc8b 	bl	8006d54 <RNSStop>
			svCloseFlip
 800543e:	f240 719e 	movw	r1, #1950	; 0x79e
 8005442:	4848      	ldr	r0, [pc, #288]	; (8005564 <EmergencyTask+0x16c>)
 8005444:	f003 fc16 	bl	8008c74 <ServoSetPulse>
 8005448:	f44f 7161 	mov.w	r1, #900	; 0x384
 800544c:	4846      	ldr	r0, [pc, #280]	; (8005568 <EmergencyTask+0x170>)
 800544e:	f003 fc11 	bl	8008c74 <ServoSetPulse>
			svBRrealup
 8005452:	f240 11a9 	movw	r1, #425	; 0x1a9
 8005456:	4845      	ldr	r0, [pc, #276]	; (800556c <EmergencyTask+0x174>)
 8005458:	f003 fc0c 	bl	8008c74 <ServoSetPulse>
			LGPW(0);
 800545c:	2100      	movs	r1, #0
 800545e:	4844      	ldr	r0, [pc, #272]	; (8005570 <EmergencyTask+0x178>)
 8005460:	f7fb ff8e 	bl	8001380 <WriteBDC>
			LFPW(0);
 8005464:	2100      	movs	r1, #0
 8005466:	4843      	ldr	r0, [pc, #268]	; (8005574 <EmergencyTask+0x17c>)
 8005468:	f7fb ff8a 	bl	8001380 <WriteBDC>
			sys.flags = 0;
 800546c:	4b42      	ldr	r3, [pc, #264]	; (8005578 <EmergencyTask+0x180>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			tune.flags = 0;
 8005472:	4b42      	ldr	r3, [pc, #264]	; (800557c <EmergencyTask+0x184>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			pp.flags = 0;
 8005478:	4b41      	ldr	r3, [pc, #260]	; (8005580 <EmergencyTask+0x188>)
 800547a:	2200      	movs	r2, #0
 800547c:	801a      	strh	r2, [r3, #0]
			lagori.flags = 0;
 800547e:	4b41      	ldr	r3, [pc, #260]	; (8005584 <EmergencyTask+0x18c>)
 8005480:	2200      	movs	r2, #0
 8005482:	801a      	strh	r2, [r3, #0]
//			VESCStop(&vesc1);
//			osThreadSuspend(FlywheelPitchPIDTaskHandle);
//			osThreadSuspend(FlywheelYawPIDTaskHandle);
			osThreadTerminate(MainTaskHandle);
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <EmergencyTask+0x190>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f016 f953 	bl	801b734 <osThreadTerminate>
			osThreadTerminate(BLDCTaskHandle);
 800548e:	4b3f      	ldr	r3, [pc, #252]	; (800558c <EmergencyTask+0x194>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f016 f94e 	bl	801b734 <osThreadTerminate>
			osThreadTerminate(LagoriTaskHandle);
 8005498:	4b3d      	ldr	r3, [pc, #244]	; (8005590 <EmergencyTask+0x198>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f016 f949 	bl	801b734 <osThreadTerminate>

			osDelay(5);
 80054a2:	2005      	movs	r0, #5
 80054a4:	f016 f973 	bl	801b78e <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 80054a8:	f107 030c 	add.w	r3, r7, #12
 80054ac:	2224      	movs	r2, #36	; 0x24
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f019 fc43 	bl	801ed3c <memset>
 80054b6:	4b37      	ldr	r3, [pc, #220]	; (8005594 <EmergencyTask+0x19c>)
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	2318      	movs	r3, #24
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			const osThreadAttr_t BLDCTask_attributes = {
 80054c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054c8:	2224      	movs	r2, #36	; 0x24
 80054ca:	2100      	movs	r1, #0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f019 fc35 	bl	801ed3c <memset>
 80054d2:	4b31      	ldr	r3, [pc, #196]	; (8005598 <EmergencyTask+0x1a0>)
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
 80054d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054da:	647b      	str	r3, [r7, #68]	; 0x44
 80054dc:	2318      	movs	r3, #24
 80054de:	64bb      	str	r3, [r7, #72]	; 0x48
					.name = "BLDCTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			const osThreadAttr_t LagoriTask_attributes = {
 80054e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80054e4:	2224      	movs	r2, #36	; 0x24
 80054e6:	2100      	movs	r1, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f019 fc27 	bl	801ed3c <memset>
 80054ee:	4b2b      	ldr	r3, [pc, #172]	; (800559c <EmergencyTask+0x1a4>)
 80054f0:	657b      	str	r3, [r7, #84]	; 0x54
 80054f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f8:	2318      	movs	r3, #24
 80054fa:	66fb      	str	r3, [r7, #108]	; 0x6c
					.name = "LagoriTask",
					.stack_size = 1024 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			sys.control = 1;
 80054fc:	4a1e      	ldr	r2, [pc, #120]	; (8005578 <EmergencyTask+0x180>)
 80054fe:	7813      	ldrb	r3, [r2, #0]
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	7013      	strb	r3, [r2, #0]
			sys.auto2manual = 1;
 8005506:	4a1c      	ldr	r2, [pc, #112]	; (8005578 <EmergencyTask+0x180>)
 8005508:	7813      	ldrb	r3, [r2, #0]
 800550a:	f043 0320 	orr.w	r3, r3, #32
 800550e:	7013      	strb	r3, [r2, #0]
			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8005510:	f107 030c 	add.w	r3, r7, #12
 8005514:	461a      	mov	r2, r3
 8005516:	2100      	movs	r1, #0
 8005518:	4821      	ldr	r0, [pc, #132]	; (80055a0 <EmergencyTask+0x1a8>)
 800551a:	f016 f879 	bl	801b610 <osThreadNew>
 800551e:	4603      	mov	r3, r0
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <EmergencyTask+0x190>)
 8005522:	6013      	str	r3, [r2, #0]
			BLDCTaskHandle = osThreadNew(BLDCTask, NULL, &BLDCTask_attributes);
 8005524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005528:	461a      	mov	r2, r3
 800552a:	2100      	movs	r1, #0
 800552c:	481d      	ldr	r0, [pc, #116]	; (80055a4 <EmergencyTask+0x1ac>)
 800552e:	f016 f86f 	bl	801b610 <osThreadNew>
 8005532:	4603      	mov	r3, r0
 8005534:	4a15      	ldr	r2, [pc, #84]	; (800558c <EmergencyTask+0x194>)
 8005536:	6013      	str	r3, [r2, #0]
			LagoriTaskHandle = osThreadNew(LagoriTask, NULL, &LagoriTask_attributes);
 8005538:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800553c:	461a      	mov	r2, r3
 800553e:	2100      	movs	r1, #0
 8005540:	4819      	ldr	r0, [pc, #100]	; (80055a8 <EmergencyTask+0x1b0>)
 8005542:	f016 f865 	bl	801b610 <osThreadNew>
 8005546:	4603      	mov	r3, r0
 8005548:	4a11      	ldr	r2, [pc, #68]	; (8005590 <EmergencyTask+0x198>)
 800554a:	6013      	str	r3, [r2, #0]
		enqpwLG = QEIRead(QEI1);
 800554c:	e758      	b.n	8005400 <EmergencyTask+0x8>
 800554e:	bf00      	nop
 8005550:	20009ccc 	.word	0x20009ccc
 8005554:	20007d7c 	.word	0x20007d7c
 8005558:	20009704 	.word	0x20009704
 800555c:	2000a448 	.word	0x2000a448
 8005560:	200093ec 	.word	0x200093ec
 8005564:	20009c44 	.word	0x20009c44
 8005568:	2000aa48 	.word	0x2000aa48
 800556c:	20009a58 	.word	0x20009a58
 8005570:	2000aa24 	.word	0x2000aa24
 8005574:	20007cd4 	.word	0x20007cd4
 8005578:	2000794c 	.word	0x2000794c
 800557c:	20007928 	.word	0x20007928
 8005580:	20007880 	.word	0x20007880
 8005584:	20009b10 	.word	0x20009b10
 8005588:	20007de4 	.word	0x20007de4
 800558c:	2000975c 	.word	0x2000975c
 8005590:	20009990 	.word	0x20009990
 8005594:	08024150 	.word	0x08024150
 8005598:	08024184 	.word	0x08024184
 800559c:	08024178 	.word	0x08024178
 80055a0:	08004729 	.word	0x08004729
 80055a4:	080053d9 	.word	0x080053d9
 80055a8:	080053b9 	.word	0x080053b9

080055ac <TuneTask>:
		}
	}
}

void TuneTask(void *argument){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	tunePending();
 80055b4:	f009 fcf8 	bl	800efa8 <tunePending>
	int page = -1;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055bc:	60fb      	str	r3, [r7, #12]
	while(1){
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 80055be:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <TuneTask+0x148>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055c6:	4618      	mov	r0, r3
 80055c8:	f016 f986 	bl	801b8d8 <osSemaphoreAcquire>

		if(tuneCommand == '0'){
 80055cc:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <TuneTask+0x14c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b30      	cmp	r3, #48	; 0x30
 80055d2:	d106      	bne.n	80055e2 <TuneTask+0x36>
			page = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4618      	mov	r0, r3
 80055de:	f009 fcf3 	bl	800efc8 <tuneInit>
		}
		if(tuneCommand == '1'){
 80055e2:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <TuneTask+0x14c>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b31      	cmp	r3, #49	; 0x31
 80055e8:	d106      	bne.n	80055f8 <TuneTask+0x4c>
			page = 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	4618      	mov	r0, r3
 80055f4:	f009 fce8 	bl	800efc8 <tuneInit>
		}
		if(tuneCommand == '2'){
 80055f8:	4b3f      	ldr	r3, [pc, #252]	; (80056f8 <TuneTask+0x14c>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b32      	cmp	r3, #50	; 0x32
 80055fe:	d106      	bne.n	800560e <TuneTask+0x62>
			page = 2;
 8005600:	2302      	movs	r3, #2
 8005602:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	4618      	mov	r0, r3
 800560a:	f009 fcdd 	bl	800efc8 <tuneInit>
		}
		if(tuneCommand == '3'){
 800560e:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <TuneTask+0x14c>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b33      	cmp	r3, #51	; 0x33
 8005614:	d106      	bne.n	8005624 <TuneTask+0x78>
			page = 3;
 8005616:	2303      	movs	r3, #3
 8005618:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	4618      	mov	r0, r3
 8005620:	f009 fcd2 	bl	800efc8 <tuneInit>
		}
		if(tuneCommand == '4'){
 8005624:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <TuneTask+0x14c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b34      	cmp	r3, #52	; 0x34
 800562a:	d106      	bne.n	800563a <TuneTask+0x8e>
			page = 4;
 800562c:	2304      	movs	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	4618      	mov	r0, r3
 8005636:	f009 fcc7 	bl	800efc8 <tuneInit>
		}

		if(tuneCommand == 'r'){
 800563a:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <TuneTask+0x14c>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b72      	cmp	r3, #114	; 0x72
 8005640:	d104      	bne.n	800564c <TuneTask+0xa0>
			tuneUpdate(page);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	4618      	mov	r0, r3
 8005648:	f009 fdf2 	bl	800f230 <tuneUpdate>
		}

		if(tuneCommand == 'w'){
 800564c:	4b2a      	ldr	r3, [pc, #168]	; (80056f8 <TuneTask+0x14c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b77      	cmp	r3, #119	; 0x77
 8005652:	d138      	bne.n	80056c6 <TuneTask+0x11a>
			led3 = 0;
 8005654:	4a29      	ldr	r2, [pc, #164]	; (80056fc <TuneTask+0x150>)
 8005656:	7853      	ldrb	r3, [r2, #1]
 8005658:	f36f 13c7 	bfc	r3, #7, #1
 800565c:	7053      	strb	r3, [r2, #1]
			led2 = 0;
 800565e:	4a27      	ldr	r2, [pc, #156]	; (80056fc <TuneTask+0x150>)
 8005660:	7853      	ldrb	r3, [r2, #1]
 8005662:	f36f 1386 	bfc	r3, #6, #1
 8005666:	7053      	strb	r3, [r2, #1]
			uint32_t writeSuccess=0;
 8005668:	2300      	movs	r3, #0
 800566a:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteInt();
 800566c:	f00a f832 	bl	800f6d4 <tuneWriteInt>
 8005670:	4602      	mov	r2, r0
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4413      	add	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteFloat();
 8005678:	f00a f894 	bl	800f7a4 <tuneWriteFloat>
 800567c:	4602      	mov	r2, r0
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4413      	add	r3, r2
 8005682:	60bb      	str	r3, [r7, #8]

			if( writeSuccess == tuneWriteSuccess){
 8005684:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <TuneTask+0x154>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4293      	cmp	r3, r2
 800568e:	d10c      	bne.n	80056aa <TuneTask+0xfe>
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITTEN\n"), 15, 10);
 8005690:	4b1c      	ldr	r3, [pc, #112]	; (8005704 <TuneTask+0x158>)
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	230a      	movs	r3, #10
 8005696:	220f      	movs	r2, #15
 8005698:	491b      	ldr	r1, [pc, #108]	; (8005708 <TuneTask+0x15c>)
 800569a:	f014 fef4 	bl	801a486 <HAL_UART_Transmit>
				led2 = 1;
 800569e:	4a17      	ldr	r2, [pc, #92]	; (80056fc <TuneTask+0x150>)
 80056a0:	7853      	ldrb	r3, [r2, #1]
 80056a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a6:	7053      	strb	r3, [r2, #1]
 80056a8:	e00b      	b.n	80056c2 <TuneTask+0x116>
			}else{
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITE FAIL\n"), 18, 10);
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <TuneTask+0x158>)
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	230a      	movs	r3, #10
 80056b0:	2212      	movs	r2, #18
 80056b2:	4916      	ldr	r1, [pc, #88]	; (800570c <TuneTask+0x160>)
 80056b4:	f014 fee7 	bl	801a486 <HAL_UART_Transmit>
				led3 = 1;
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <TuneTask+0x150>)
 80056ba:	7853      	ldrb	r3, [r2, #1]
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	7053      	strb	r3, [r2, #1]
			}
			tunePending();
 80056c2:	f009 fc71 	bl	800efa8 <tunePending>
		}

		if(tuneCommand == 'e'){
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <TuneTask+0x14c>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b65      	cmp	r3, #101	; 0x65
 80056cc:	d105      	bne.n	80056da <TuneTask+0x12e>
			tuneEdit(page, &rns);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	490f      	ldr	r1, [pc, #60]	; (8005710 <TuneTask+0x164>)
 80056d4:	4618      	mov	r0, r3
 80056d6:	f009 fe7d 	bl	800f3d4 <tuneEdit>
		}

		if(tuneCommand == 'c'){
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <TuneTask+0x14c>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b63      	cmp	r3, #99	; 0x63
 80056e0:	f47f af6d 	bne.w	80055be <TuneTask+0x12>
			sys.flags = 0;
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <TuneTask+0x168>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
			osDelay(10);
 80056ea:	200a      	movs	r0, #10
 80056ec:	f016 f84f 	bl	801b78e <osDelay>
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 80056f0:	e765      	b.n	80055be <TuneTask+0x12>
 80056f2:	bf00      	nop
 80056f4:	2000a4c0 	.word	0x2000a4c0
 80056f8:	20009749 	.word	0x20009749
 80056fc:	40020814 	.word	0x40020814
 8005700:	20009748 	.word	0x20009748
 8005704:	2000a878 	.word	0x2000a878
 8005708:	080241d0 	.word	0x080241d0
 800570c:	080241e0 	.word	0x080241e0
 8005710:	200093ec 	.word	0x200093ec
 8005714:	2000794c 	.word	0x2000794c

08005718 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	if(huart == tuneUart){
 8005720:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <HAL_UART_RxCpltCallback+0xb4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d104      	bne.n	8005734 <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(TuneSemaphore);
 800572a:	4b29      	ldr	r3, [pc, #164]	; (80057d0 <HAL_UART_RxCpltCallback+0xb8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f016 f924 	bl	801b97c <osSemaphoreRelease>
	}
	if(huart == tfmini.huartx){
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_UART_RxCpltCallback+0xbc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d11e      	bne.n	800577c <HAL_UART_RxCpltCallback+0x64>
		ledtick ++;
 800573e:	4b26      	ldr	r3, [pc, #152]	; (80057d8 <HAL_UART_RxCpltCallback+0xc0>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a24      	ldr	r2, [pc, #144]	; (80057d8 <HAL_UART_RxCpltCallback+0xc0>)
 8005746:	6013      	str	r3, [r2, #0]
		if(ledtick >= 10){
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <HAL_UART_RxCpltCallback+0xc0>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b09      	cmp	r3, #9
 800574e:	dd11      	ble.n	8005774 <HAL_UART_RxCpltCallback+0x5c>
			led2 = !led2;
 8005750:	4b22      	ldr	r3, [pc, #136]	; (80057dc <HAL_UART_RxCpltCallback+0xc4>)
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	b2db      	uxtb	r3, r3
 800575a:	4a20      	ldr	r2, [pc, #128]	; (80057dc <HAL_UART_RxCpltCallback+0xc4>)
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf0c      	ite	eq
 8005760:	2301      	moveq	r3, #1
 8005762:	2300      	movne	r3, #0
 8005764:	b2d9      	uxtb	r1, r3
 8005766:	7853      	ldrb	r3, [r2, #1]
 8005768:	f361 1386 	bfi	r3, r1, #6, #1
 800576c:	7053      	strb	r3, [r2, #1]
			ledtick = 0;
 800576e:	4b1a      	ldr	r3, [pc, #104]	; (80057d8 <HAL_UART_RxCpltCallback+0xc0>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
		}
		TFmini_Handler(&tfmini);
 8005774:	4817      	ldr	r0, [pc, #92]	; (80057d4 <HAL_UART_RxCpltCallback+0xbc>)
 8005776:	f003 fb5b 	bl	8008e30 <TFmini_Handler>
		esp32Handler();
	}else if(huart == ps4.huartps4){
		PSx_HandlerUART(&ps4);
	}

}
 800577a:	e023      	b.n	80057c4 <HAL_UART_RxCpltCallback+0xac>
	else if(huart == ROS_UART){
 800577c:	4b18      	ldr	r3, [pc, #96]	; (80057e0 <HAL_UART_RxCpltCallback+0xc8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	d10e      	bne.n	80057a4 <HAL_UART_RxCpltCallback+0x8c>
		led3 = !led3;
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <HAL_UART_RxCpltCallback+0xc4>)
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	b25b      	sxtb	r3, r3
 800578c:	4a13      	ldr	r2, [pc, #76]	; (80057dc <HAL_UART_RxCpltCallback+0xc4>)
 800578e:	43db      	mvns	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	09db      	lsrs	r3, r3, #7
 8005794:	b2d9      	uxtb	r1, r3
 8005796:	7853      	ldrb	r3, [r2, #1]
 8005798:	f361 13c7 	bfi	r3, r1, #7, #1
 800579c:	7053      	strb	r3, [r2, #1]
		ROS_Handler();
 800579e:	f001 ff97 	bl	80076d0 <ROS_Handler>
}
 80057a2:	e00f      	b.n	80057c4 <HAL_UART_RxCpltCallback+0xac>
	}else if(huart == esp32.huart){
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_UART_RxCpltCallback+0xcc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d102      	bne.n	80057b4 <HAL_UART_RxCpltCallback+0x9c>
		esp32Handler();
 80057ae:	f7fe fa89 	bl	8003cc4 <esp32Handler>
}
 80057b2:	e007      	b.n	80057c4 <HAL_UART_RxCpltCallback+0xac>
	}else if(huart == ps4.huartps4){
 80057b4:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <HAL_UART_RxCpltCallback+0xd0>)
 80057b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d102      	bne.n	80057c4 <HAL_UART_RxCpltCallback+0xac>
		PSx_HandlerUART(&ps4);
 80057be:	480a      	ldr	r0, [pc, #40]	; (80057e8 <HAL_UART_RxCpltCallback+0xd0>)
 80057c0:	f000 ff0c 	bl	80065dc <PSx_HandlerUART>
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	2000a878 	.word	0x2000a878
 80057d0:	2000a4c0 	.word	0x2000a4c0
 80057d4:	20009704 	.word	0x20009704
 80057d8:	20009740 	.word	0x20009740
 80057dc:	40020814 	.word	0x40020814
 80057e0:	20009eec 	.word	0x20009eec
 80057e4:	2000aa88 	.word	0x2000aa88
 80057e8:	2000a448 	.word	0x2000a448

080057ec <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0


}
 80057f0:	bf00      	nop
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	0000      	movs	r0, r0
 80057fc:	0000      	movs	r0, r0
	...

08005800 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain, int delay_time)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	ed87 0a04 	vstr	s0, [r7, #16]
 800580c:	edc7 0a03 	vstr	s1, [r7, #12]
 8005810:	ed87 1a02 	vstr	s2, [r7, #8]
 8005814:	edc7 1a01 	vstr	s3, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 800581c:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <MODNInit+0xb8>)
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 8005824:	4a24      	ldr	r2, [pc, #144]	; (80058b8 <MODNInit+0xb8>)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 800582a:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <MODNInit+0xb8>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8005830:	68b8      	ldr	r0, [r7, #8]
 8005832:	f7fa fe89 	bl	8000548 <__aeabi_f2d>
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <MODNInit+0xbc>)
 800583c:	f7fb f806 	bl	800084c <__aeabi_ddiv>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4610      	mov	r0, r2
 8005846:	4619      	mov	r1, r3
 8005848:	a319      	add	r3, pc, #100	; (adr r3, 80058b0 <MODNInit+0xb0>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fed3 	bl	80005f8 <__aeabi_dmul>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	f7fb f9c5 	bl	8000be8 <__aeabi_d2f>
 800585e:	4603      	mov	r3, r0
 8005860:	4a15      	ldr	r2, [pc, #84]	; (80058b8 <MODNInit+0xb8>)
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8005864:	ed97 7a04 	vldr	s14, [r7, #16]
 8005868:	edd7 7a01 	vldr	s15, [r7, #4]
 800586c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <MODNInit+0xb8>)
 8005872:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587a:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <MODNInit+0xb8>)
 800587c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8005880:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <MODNInit+0xb8>)
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <MODNInit+0xb8>)
 800588a:	2200      	movs	r2, #0
 800588c:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.t=0;
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <MODNInit+0xb8>)
 8005890:	2200      	movs	r2, #0
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_x_vel = &(MODN.x_vel);
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <MODNInit+0xb8>)
 8005896:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <MODNInit+0xb8>)
 8005898:	64da      	str	r2, [r3, #76]	; 0x4c
	MODN.real_y_vel = &(MODN.y_vel);
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <MODNInit+0xb8>)
 800589c:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <MODNInit+0xc0>)
 800589e:	651a      	str	r2, [r3, #80]	; 0x50
	MODN.delay = delay_time;
 80058a0:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <MODNInit+0xb8>)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6493      	str	r3, [r2, #72]	; 0x48
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	54442eea 	.word	0x54442eea
 80058b4:	400921fb 	.word	0x400921fb
 80058b8:	200076bc 	.word	0x200076bc
 80058bc:	40668000 	.word	0x40668000
 80058c0:	200076c0 	.word	0x200076c0
 80058c4:	00000000 	.word	0x00000000

080058c8 <LegacyMODN>:
 * 						  rns	 						pointer to RNS_interface_t struct
 * Function Return		: NONE
 * Function Example		: LegacyMODN(ps4, &rns);
 */
void LegacyMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 80058c8:	b5b0      	push	{r4, r5, r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
	MODN.x_vel = (psx->joyL_x) * MODN.speed;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80058d8:	4bad      	ldr	r3, [pc, #692]	; (8005b90 <LegacyMODN+0x2c8>)
 80058da:	edd3 7a07 	vldr	s15, [r3, #28]
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	4bab      	ldr	r3, [pc, #684]	; (8005b90 <LegacyMODN+0x2c8>)
 80058e4:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel = (psx->joyL_y) * MODN.speed;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80058ee:	4ba8      	ldr	r3, [pc, #672]	; (8005b90 <LegacyMODN+0x2c8>)
 80058f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80058f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f8:	4ba5      	ldr	r3, [pc, #660]	; (8005b90 <LegacyMODN+0x2c8>)
 80058fa:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800590a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800590e:	4ba0      	ldr	r3, [pc, #640]	; (8005b90 <LegacyMODN+0x2c8>)
 8005910:	edd3 7a07 	vldr	s15, [r3, #28]
 8005914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005918:	4b9d      	ldr	r3, [pc, #628]	; (8005b90 <LegacyMODN+0x2c8>)
 800591a:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 800591e:	4b9c      	ldr	r3, [pc, #624]	; (8005b90 <LegacyMODN+0x2c8>)
 8005920:	edd3 7a00 	vldr	s15, [r3]
 8005924:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592c:	d113      	bne.n	8005956 <LegacyMODN+0x8e>
 800592e:	4b98      	ldr	r3, [pc, #608]	; (8005b90 <LegacyMODN+0x2c8>)
 8005930:	edd3 7a01 	vldr	s15, [r3, #4]
 8005934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800593c:	d10b      	bne.n	8005956 <LegacyMODN+0x8e>
 800593e:	4b94      	ldr	r3, [pc, #592]	; (8005b90 <LegacyMODN+0x2c8>)
 8005940:	edd3 7a02 	vldr	s15, [r3, #8]
 8005944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800594c:	d103      	bne.n	8005956 <LegacyMODN+0x8e>
		RNSStop(rns);
 800594e:	6838      	ldr	r0, [r7, #0]
 8005950:	f001 fa00 	bl	8006d54 <RNSStop>
			MODN.vel1 = MODN.y_vel * (0.866) + MODN.x_vel * (-0.5) + MODN.w_vel * MODN.d;
			MODN.vel2 = MODN.y_vel * (0.866) + MODN.x_vel * (0.5)  - MODN.w_vel * MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8005954:	e288      	b.n	8005e68 <LegacyMODN+0x5a0>
		if(MODN.base == MODN_FWD_OMNI) {
 8005956:	4b8e      	ldr	r3, [pc, #568]	; (8005b90 <LegacyMODN+0x2c8>)
 8005958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 8119 	bne.w	8005b94 <LegacyMODN+0x2cc>
			MODN.vel1 = MODN.x_vel * (0.70711)  +  MODN.y_vel * (0.70711) + MODN.w_vel * MODN.d;
 8005962:	4b8b      	ldr	r3, [pc, #556]	; (8005b90 <LegacyMODN+0x2c8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fdee 	bl	8000548 <__aeabi_f2d>
 800596c:	a384      	add	r3, pc, #528	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	f7fa fe41 	bl	80005f8 <__aeabi_dmul>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4614      	mov	r4, r2
 800597c:	461d      	mov	r5, r3
 800597e:	4b84      	ldr	r3, [pc, #528]	; (8005b90 <LegacyMODN+0x2c8>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fa fde0 	bl	8000548 <__aeabi_f2d>
 8005988:	a37d      	add	r3, pc, #500	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f7fa fe33 	bl	80005f8 <__aeabi_dmul>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4620      	mov	r0, r4
 8005998:	4629      	mov	r1, r5
 800599a:	f7fa fc77 	bl	800028c <__adddf3>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4614      	mov	r4, r2
 80059a4:	461d      	mov	r5, r3
 80059a6:	4b7a      	ldr	r3, [pc, #488]	; (8005b90 <LegacyMODN+0x2c8>)
 80059a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80059ac:	4b78      	ldr	r3, [pc, #480]	; (8005b90 <LegacyMODN+0x2c8>)
 80059ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80059b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b6:	ee17 0a90 	vmov	r0, s15
 80059ba:	f7fa fdc5 	bl	8000548 <__aeabi_f2d>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	f7fa fc61 	bl	800028c <__adddf3>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	f7fb f909 	bl	8000be8 <__aeabi_d2f>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4a6d      	ldr	r2, [pc, #436]	; (8005b90 <LegacyMODN+0x2c8>)
 80059da:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.x_vel * (-0.70711) +  MODN.y_vel * (0.70711) - MODN.w_vel * MODN.d;
 80059dc:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <LegacyMODN+0x2c8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fa fdb1 	bl	8000548 <__aeabi_f2d>
 80059e6:	a368      	add	r3, pc, #416	; (adr r3, 8005b88 <LegacyMODN+0x2c0>)
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fe04 	bl	80005f8 <__aeabi_dmul>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4614      	mov	r4, r2
 80059f6:	461d      	mov	r5, r3
 80059f8:	4b65      	ldr	r3, [pc, #404]	; (8005b90 <LegacyMODN+0x2c8>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fa fda3 	bl	8000548 <__aeabi_f2d>
 8005a02:	a35f      	add	r3, pc, #380	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fa fdf6 	bl	80005f8 <__aeabi_dmul>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fc3a 	bl	800028c <__adddf3>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	461d      	mov	r5, r3
 8005a20:	4b5b      	ldr	r3, [pc, #364]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a22:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a26:	4b5a      	ldr	r3, [pc, #360]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a28:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a30:	ee17 0a90 	vmov	r0, s15
 8005a34:	f7fa fd88 	bl	8000548 <__aeabi_f2d>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	4629      	mov	r1, r5
 8005a40:	f7fa fc22 	bl	8000288 <__aeabi_dsub>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f7fb f8cc 	bl	8000be8 <__aeabi_d2f>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a4f      	ldr	r2, [pc, #316]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a54:	6113      	str	r3, [r2, #16]
			MODN.vel3 = MODN.x_vel * (-0.70711) +  MODN.y_vel * (0.70711) + MODN.w_vel * MODN.d;
 8005a56:	4b4e      	ldr	r3, [pc, #312]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fa fd74 	bl	8000548 <__aeabi_f2d>
 8005a60:	a349      	add	r3, pc, #292	; (adr r3, 8005b88 <LegacyMODN+0x2c0>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fdc7 	bl	80005f8 <__aeabi_dmul>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4614      	mov	r4, r2
 8005a70:	461d      	mov	r5, r3
 8005a72:	4b47      	ldr	r3, [pc, #284]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fa fd66 	bl	8000548 <__aeabi_f2d>
 8005a7c:	a340      	add	r3, pc, #256	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f7fa fbfd 	bl	800028c <__adddf3>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4614      	mov	r4, r2
 8005a98:	461d      	mov	r5, r3
 8005a9a:	4b3d      	ldr	r3, [pc, #244]	; (8005b90 <LegacyMODN+0x2c8>)
 8005a9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005aa0:	4b3b      	ldr	r3, [pc, #236]	; (8005b90 <LegacyMODN+0x2c8>)
 8005aa2:	edd3 7a08 	vldr	s15, [r3, #32]
 8005aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aaa:	ee17 0a90 	vmov	r0, s15
 8005aae:	f7fa fd4b 	bl	8000548 <__aeabi_f2d>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fbe7 	bl	800028c <__adddf3>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f7fb f88f 	bl	8000be8 <__aeabi_d2f>
 8005aca:	4603      	mov	r3, r0
 8005acc:	4a30      	ldr	r2, [pc, #192]	; (8005b90 <LegacyMODN+0x2c8>)
 8005ace:	6153      	str	r3, [r2, #20]
			MODN.vel4 = MODN.x_vel * (0.70711)  +  MODN.y_vel * (0.70711) - MODN.w_vel * MODN.d;
 8005ad0:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <LegacyMODN+0x2c8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fd37 	bl	8000548 <__aeabi_f2d>
 8005ada:	a329      	add	r3, pc, #164	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	f7fa fd8a 	bl	80005f8 <__aeabi_dmul>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <LegacyMODN+0x2c8>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fa fd29 	bl	8000548 <__aeabi_f2d>
 8005af6:	a322      	add	r3, pc, #136	; (adr r3, 8005b80 <LegacyMODN+0x2b8>)
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f7fa fd7c 	bl	80005f8 <__aeabi_dmul>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fbc0 	bl	800028c <__adddf3>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4614      	mov	r4, r2
 8005b12:	461d      	mov	r5, r3
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b16:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	ee17 0a90 	vmov	r0, s15
 8005b28:	f7fa fd0e 	bl	8000548 <__aeabi_f2d>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa fba8 	bl	8000288 <__aeabi_dsub>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fb f852 	bl	8000be8 <__aeabi_d2f>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4a12      	ldr	r2, [pc, #72]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b48:	6193      	str	r3, [r2, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8005b4a:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b52:	ed93 7a04 	vldr	s14, [r3, #16]
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b58:	edd3 6a05 	vldr	s13, [r3, #20]
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <LegacyMODN+0x2c8>)
 8005b5e:	ed93 6a06 	vldr	s12, [r3, #24]
 8005b62:	6838      	ldr	r0, [r7, #0]
 8005b64:	eef0 1a46 	vmov.f32	s3, s12
 8005b68:	eeb0 1a66 	vmov.f32	s2, s13
 8005b6c:	eef0 0a47 	vmov.f32	s1, s14
 8005b70:	eeb0 0a67 	vmov.f32	s0, s15
 8005b74:	f001 f93e 	bl	8006df4 <RNSVelocity>
}
 8005b78:	e176      	b.n	8005e68 <LegacyMODN+0x5a0>
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
 8005b80:	269595ff 	.word	0x269595ff
 8005b84:	3fe6a0a5 	.word	0x3fe6a0a5
 8005b88:	269595ff 	.word	0x269595ff
 8005b8c:	bfe6a0a5 	.word	0xbfe6a0a5
 8005b90:	200076bc 	.word	0x200076bc
		}else if(MODN.base == MODN_MECANUM){
 8005b94:	4bb8      	ldr	r3, [pc, #736]	; (8005e78 <LegacyMODN+0x5b0>)
 8005b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	f040 80c0 	bne.w	8005d20 <LegacyMODN+0x458>
			MODN.vel1 = MODN.y_vel*(1.0) + MODN.x_vel*(1.0)  + MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005ba0:	4bb5      	ldr	r3, [pc, #724]	; (8005e78 <LegacyMODN+0x5b0>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fa fccf 	bl	8000548 <__aeabi_f2d>
 8005baa:	4604      	mov	r4, r0
 8005bac:	460d      	mov	r5, r1
 8005bae:	4bb2      	ldr	r3, [pc, #712]	; (8005e78 <LegacyMODN+0x5b0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fa fcc8 	bl	8000548 <__aeabi_f2d>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	f7fa fb64 	bl	800028c <__adddf3>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	461d      	mov	r5, r3
 8005bcc:	4baa      	ldr	r3, [pc, #680]	; (8005e78 <LegacyMODN+0x5b0>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fa fcb9 	bl	8000548 <__aeabi_f2d>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4629      	mov	r1, r5
 8005bde:	f7fa fb55 	bl	800028c <__adddf3>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4610      	mov	r0, r2
 8005be8:	4619      	mov	r1, r3
 8005bea:	f7fa fffd 	bl	8000be8 <__aeabi_d2f>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4aa1      	ldr	r2, [pc, #644]	; (8005e78 <LegacyMODN+0x5b0>)
 8005bf2:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.y_vel*(1.0) + MODN.x_vel*(-1.0) - MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005bf4:	4ba0      	ldr	r3, [pc, #640]	; (8005e78 <LegacyMODN+0x5b0>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fa fca5 	bl	8000548 <__aeabi_f2d>
 8005bfe:	4604      	mov	r4, r0
 8005c00:	460d      	mov	r5, r1
 8005c02:	4b9d      	ldr	r3, [pc, #628]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa fc9e 	bl	8000548 <__aeabi_f2d>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4620      	mov	r0, r4
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa fb38 	bl	8000288 <__aeabi_dsub>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4614      	mov	r4, r2
 8005c1e:	461d      	mov	r5, r3
 8005c20:	4b95      	ldr	r3, [pc, #596]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fc8f 	bl	8000548 <__aeabi_f2d>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa fb29 	bl	8000288 <__aeabi_dsub>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f7fa ffd3 	bl	8000be8 <__aeabi_d2f>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4a8c      	ldr	r2, [pc, #560]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c46:	6113      	str	r3, [r2, #16]
			MODN.vel3 = MODN.y_vel*(1.0) + MODN.x_vel*(-1.0) + MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005c48:	4b8b      	ldr	r3, [pc, #556]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fa fc7b 	bl	8000548 <__aeabi_f2d>
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	4b88      	ldr	r3, [pc, #544]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fc74 	bl	8000548 <__aeabi_f2d>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa fb0e 	bl	8000288 <__aeabi_dsub>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4614      	mov	r4, r2
 8005c72:	461d      	mov	r5, r3
 8005c74:	4b80      	ldr	r3, [pc, #512]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fa fc65 	bl	8000548 <__aeabi_f2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa fb01 	bl	800028c <__adddf3>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4610      	mov	r0, r2
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7fa ffa9 	bl	8000be8 <__aeabi_d2f>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4a77      	ldr	r2, [pc, #476]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c9a:	6153      	str	r3, [r2, #20]
			MODN.vel4 = MODN.y_vel*(1.0) + MODN.x_vel*(1.0)  - MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005c9c:	4b76      	ldr	r3, [pc, #472]	; (8005e78 <LegacyMODN+0x5b0>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fa fc51 	bl	8000548 <__aeabi_f2d>
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	460d      	mov	r5, r1
 8005caa:	4b73      	ldr	r3, [pc, #460]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa fc4a 	bl	8000548 <__aeabi_f2d>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa fae6 	bl	800028c <__adddf3>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4b6b      	ldr	r3, [pc, #428]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fa fc3b 	bl	8000548 <__aeabi_f2d>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fad5 	bl	8000288 <__aeabi_dsub>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f7fa ff7f 	bl	8000be8 <__aeabi_d2f>
 8005cea:	4603      	mov	r3, r0
 8005cec:	4a62      	ldr	r2, [pc, #392]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cee:	6193      	str	r3, [r2, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cf6:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cf8:	ed93 7a04 	vldr	s14, [r3, #16]
 8005cfc:	4b5e      	ldr	r3, [pc, #376]	; (8005e78 <LegacyMODN+0x5b0>)
 8005cfe:	edd3 6a05 	vldr	s13, [r3, #20]
 8005d02:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d04:	ed93 6a06 	vldr	s12, [r3, #24]
 8005d08:	6838      	ldr	r0, [r7, #0]
 8005d0a:	eef0 1a46 	vmov.f32	s3, s12
 8005d0e:	eeb0 1a66 	vmov.f32	s2, s13
 8005d12:	eef0 0a47 	vmov.f32	s1, s14
 8005d16:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1a:	f001 f86b 	bl	8006df4 <RNSVelocity>
}
 8005d1e:	e0a3      	b.n	8005e68 <LegacyMODN+0x5a0>
		else if (MODN.base == MODN_TRI_OMNI){
 8005d20:	4b55      	ldr	r3, [pc, #340]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	f040 809e 	bne.w	8005e68 <LegacyMODN+0x5a0>
			MODN.vel3 = MODN.x_vel * (1.0)   + MODN.w_vel * MODN.d;
 8005d2c:	4b52      	ldr	r3, [pc, #328]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d2e:	ed93 7a00 	vldr	s14, [r3]
 8005d32:	4b51      	ldr	r3, [pc, #324]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d34:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d38:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d3a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d46:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d48:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel * (0.866) + MODN.x_vel * (-0.5) + MODN.w_vel * MODN.d;
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fbf9 	bl	8000548 <__aeabi_f2d>
 8005d56:	a346      	add	r3, pc, #280	; (adr r3, 8005e70 <LegacyMODN+0x5a8>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fc4c 	bl	80005f8 <__aeabi_dmul>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4614      	mov	r4, r2
 8005d66:	461d      	mov	r5, r3
 8005d68:	4b43      	ldr	r3, [pc, #268]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa fbeb 	bl	8000548 <__aeabi_f2d>
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <LegacyMODN+0x5b4>)
 8005d78:	f7fa fc3e 	bl	80005f8 <__aeabi_dmul>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa fa82 	bl	800028c <__adddf3>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4614      	mov	r4, r2
 8005d8e:	461d      	mov	r5, r3
 8005d90:	4b39      	ldr	r3, [pc, #228]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d92:	ed93 7a02 	vldr	s14, [r3, #8]
 8005d96:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <LegacyMODN+0x5b0>)
 8005d98:	edd3 7a08 	vldr	s15, [r3, #32]
 8005d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da0:	ee17 0a90 	vmov	r0, s15
 8005da4:	f7fa fbd0 	bl	8000548 <__aeabi_f2d>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa fa6c 	bl	800028c <__adddf3>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4610      	mov	r0, r2
 8005dba:	4619      	mov	r1, r3
 8005dbc:	f7fa ff14 	bl	8000be8 <__aeabi_d2f>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4a2d      	ldr	r2, [pc, #180]	; (8005e78 <LegacyMODN+0x5b0>)
 8005dc4:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.y_vel * (0.866) + MODN.x_vel * (0.5)  - MODN.w_vel * MODN.d;
 8005dc6:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <LegacyMODN+0x5b0>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa fbbc 	bl	8000548 <__aeabi_f2d>
 8005dd0:	a327      	add	r3, pc, #156	; (adr r3, 8005e70 <LegacyMODN+0x5a8>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fc0f 	bl	80005f8 <__aeabi_dmul>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4614      	mov	r4, r2
 8005de0:	461d      	mov	r5, r3
 8005de2:	4b25      	ldr	r3, [pc, #148]	; (8005e78 <LegacyMODN+0x5b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fbae 	bl	8000548 <__aeabi_f2d>
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <LegacyMODN+0x5b8>)
 8005df2:	f7fa fc01 	bl	80005f8 <__aeabi_dmul>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7fa fa45 	bl	800028c <__adddf3>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4614      	mov	r4, r2
 8005e08:	461d      	mov	r5, r3
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e12:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	ee17 0a90 	vmov	r0, s15
 8005e1e:	f7fa fb93 	bl	8000548 <__aeabi_f2d>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fa2d 	bl	8000288 <__aeabi_dsub>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	f7fa fed7 	bl	8000be8 <__aeabi_d2f>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4a0e      	ldr	r2, [pc, #56]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e3e:	6113      	str	r3, [r2, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8005e40:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e42:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e48:	ed93 7a04 	vldr	s14, [r3, #16]
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <LegacyMODN+0x5b0>)
 8005e4e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005e52:	6838      	ldr	r0, [r7, #0]
 8005e54:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8005e84 <LegacyMODN+0x5bc>
 8005e58:	eeb0 1a66 	vmov.f32	s2, s13
 8005e5c:	eef0 0a47 	vmov.f32	s1, s14
 8005e60:	eeb0 0a67 	vmov.f32	s0, s15
 8005e64:	f000 ffc6 	bl	8006df4 <RNSVelocity>
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e70:	a1cac083 	.word	0xa1cac083
 8005e74:	3febb645 	.word	0x3febb645
 8005e78:	200076bc 	.word	0x200076bc
 8005e7c:	bfe00000 	.word	0xbfe00000
 8005e80:	3fe00000 	.word	0x3fe00000
 8005e84:	00000000 	.word	0x00000000

08005e88 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	ed2d 8b02 	vpush	{d8}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	MODN.x_vel = (psx->joyL_x) * MODN.speed;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8005e9c:	4baa      	ldr	r3, [pc, #680]	; (8006148 <realMODN+0x2c0>)
 8005e9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	4ba8      	ldr	r3, [pc, #672]	; (8006148 <realMODN+0x2c0>)
 8005ea8:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005eb2:	4ba5      	ldr	r3, [pc, #660]	; (8006148 <realMODN+0x2c0>)
 8005eb4:	edd3 7a07 	vldr	s15, [r3, #28]
 8005eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebc:	4ba2      	ldr	r3, [pc, #648]	; (8006148 <realMODN+0x2c0>)
 8005ebe:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005ece:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ed2:	4b9d      	ldr	r3, [pc, #628]	; (8006148 <realMODN+0x2c0>)
 8005ed4:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005edc:	4b9a      	ldr	r3, [pc, #616]	; (8006148 <realMODN+0x2c0>)
 8005ede:	edc3 7a02 	vstr	s15, [r3, #8]
	RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	205f      	movs	r0, #95	; 0x5f
 8005ee6:	f001 facf 	bl	8007488 <RNSEnquire>
	float realZrad = rns->enq.enq_buffer[3].data;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eee:	60fb      	str	r3, [r7, #12]
	if(MODN.base == MODN_FWD_OMNI) {
 8005ef0:	4b95      	ldr	r3, [pc, #596]	; (8006148 <realMODN+0x2c0>)
 8005ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f040 8128 	bne.w	800614c <realMODN+0x2c4>
		MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 8005efc:	4b92      	ldr	r3, [pc, #584]	; (8006148 <realMODN+0x2c0>)
 8005efe:	ed93 8a00 	vldr	s16, [r3]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7fa fb20 	bl	8000548 <__aeabi_f2d>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	a18a      	add	r1, pc, #552	; (adr r1, 8006138 <realMODN+0x2b0>)
 8005f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f12:	f7fa f9b9 	bl	8000288 <__aeabi_dsub>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f7fa fe63 	bl	8000be8 <__aeabi_d2f>
 8005f22:	4603      	mov	r3, r0
 8005f24:	ee00 3a10 	vmov	s0, r3
 8005f28:	f01d fbca 	bl	80236c0 <cosf>
 8005f2c:	eef0 7a40 	vmov.f32	s15, s0
 8005f30:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005f34:	4b84      	ldr	r3, [pc, #528]	; (8006148 <realMODN+0x2c0>)
 8005f36:	edd3 8a01 	vldr	s17, [r3, #4]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f7fa fb04 	bl	8000548 <__aeabi_f2d>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	a17c      	add	r1, pc, #496	; (adr r1, 8006138 <realMODN+0x2b0>)
 8005f46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f4a:	f7fa f99d 	bl	8000288 <__aeabi_dsub>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4610      	mov	r0, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	f7fa fe47 	bl	8000be8 <__aeabi_d2f>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	ee00 3a10 	vmov	s0, r3
 8005f60:	f01d fbee 	bl	8023740 <sinf>
 8005f64:	eef0 7a40 	vmov.f32	s15, s0
 8005f68:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005f6c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005f70:	4b75      	ldr	r3, [pc, #468]	; (8006148 <realMODN+0x2c0>)
 8005f72:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f76:	4b74      	ldr	r3, [pc, #464]	; (8006148 <realMODN+0x2c0>)
 8005f78:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f84:	4b70      	ldr	r3, [pc, #448]	; (8006148 <realMODN+0x2c0>)
 8005f86:	edc3 7a03 	vstr	s15, [r3, #12]
		MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 8005f8a:	4b6f      	ldr	r3, [pc, #444]	; (8006148 <realMODN+0x2c0>)
 8005f8c:	ed93 8a00 	vldr	s16, [r3]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7fa fad9 	bl	8000548 <__aeabi_f2d>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	a169      	add	r1, pc, #420	; (adr r1, 8006140 <realMODN+0x2b8>)
 8005f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fa0:	f7fa f972 	bl	8000288 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fe1c 	bl	8000be8 <__aeabi_d2f>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	ee00 3a10 	vmov	s0, r3
 8005fb6:	f01d fb83 	bl	80236c0 <cosf>
 8005fba:	eef0 7a40 	vmov.f32	s15, s0
 8005fbe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005fc2:	4b61      	ldr	r3, [pc, #388]	; (8006148 <realMODN+0x2c0>)
 8005fc4:	edd3 8a01 	vldr	s17, [r3, #4]
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7fa fabd 	bl	8000548 <__aeabi_f2d>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	a15b      	add	r1, pc, #364	; (adr r1, 8006140 <realMODN+0x2b8>)
 8005fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd8:	f7fa f956 	bl	8000288 <__aeabi_dsub>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	f7fa fe00 	bl	8000be8 <__aeabi_d2f>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	ee00 3a10 	vmov	s0, r3
 8005fee:	f01d fba7 	bl	8023740 <sinf>
 8005ff2:	eef0 7a40 	vmov.f32	s15, s0
 8005ff6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005ffa:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005ffe:	4b52      	ldr	r3, [pc, #328]	; (8006148 <realMODN+0x2c0>)
 8006000:	edd3 6a02 	vldr	s13, [r3, #8]
 8006004:	4b50      	ldr	r3, [pc, #320]	; (8006148 <realMODN+0x2c0>)
 8006006:	edd3 7a08 	vldr	s15, [r3, #32]
 800600a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800600e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006012:	4b4d      	ldr	r3, [pc, #308]	; (8006148 <realMODN+0x2c0>)
 8006014:	edc3 7a04 	vstr	s15, [r3, #16]
		MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 8006018:	4b4b      	ldr	r3, [pc, #300]	; (8006148 <realMODN+0x2c0>)
 800601a:	ed93 8a00 	vldr	s16, [r3]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7fa fa92 	bl	8000548 <__aeabi_f2d>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	a145      	add	r1, pc, #276	; (adr r1, 8006140 <realMODN+0x2b8>)
 800602a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800602e:	f7fa f92b 	bl	8000288 <__aeabi_dsub>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4610      	mov	r0, r2
 8006038:	4619      	mov	r1, r3
 800603a:	f7fa fdd5 	bl	8000be8 <__aeabi_d2f>
 800603e:	4603      	mov	r3, r0
 8006040:	ee00 3a10 	vmov	s0, r3
 8006044:	f01d fb3c 	bl	80236c0 <cosf>
 8006048:	eef0 7a40 	vmov.f32	s15, s0
 800604c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006050:	4b3d      	ldr	r3, [pc, #244]	; (8006148 <realMODN+0x2c0>)
 8006052:	edd3 8a01 	vldr	s17, [r3, #4]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fa fa76 	bl	8000548 <__aeabi_f2d>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	a137      	add	r1, pc, #220	; (adr r1, 8006140 <realMODN+0x2b8>)
 8006062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006066:	f7fa f90f 	bl	8000288 <__aeabi_dsub>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	f7fa fdb9 	bl	8000be8 <__aeabi_d2f>
 8006076:	4603      	mov	r3, r0
 8006078:	ee00 3a10 	vmov	s0, r3
 800607c:	f01d fb60 	bl	8023740 <sinf>
 8006080:	eef0 7a40 	vmov.f32	s15, s0
 8006084:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006088:	ee38 7a27 	vadd.f32	s14, s16, s15
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <realMODN+0x2c0>)
 800608e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006092:	4b2d      	ldr	r3, [pc, #180]	; (8006148 <realMODN+0x2c0>)
 8006094:	edd3 7a08 	vldr	s15, [r3, #32]
 8006098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800609c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060a0:	4b29      	ldr	r3, [pc, #164]	; (8006148 <realMODN+0x2c0>)
 80060a2:	edc3 7a05 	vstr	s15, [r3, #20]
		MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 80060a6:	4b28      	ldr	r3, [pc, #160]	; (8006148 <realMODN+0x2c0>)
 80060a8:	ed93 8a00 	vldr	s16, [r3]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7fa fa4b 	bl	8000548 <__aeabi_f2d>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	a120      	add	r1, pc, #128	; (adr r1, 8006138 <realMODN+0x2b0>)
 80060b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060bc:	f7fa f8e4 	bl	8000288 <__aeabi_dsub>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4610      	mov	r0, r2
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7fa fd8e 	bl	8000be8 <__aeabi_d2f>
 80060cc:	4603      	mov	r3, r0
 80060ce:	ee00 3a10 	vmov	s0, r3
 80060d2:	f01d faf5 	bl	80236c0 <cosf>
 80060d6:	eef0 7a40 	vmov.f32	s15, s0
 80060da:	ee28 8a27 	vmul.f32	s16, s16, s15
 80060de:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <realMODN+0x2c0>)
 80060e0:	edd3 8a01 	vldr	s17, [r3, #4]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7fa fa2f 	bl	8000548 <__aeabi_f2d>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	a112      	add	r1, pc, #72	; (adr r1, 8006138 <realMODN+0x2b0>)
 80060f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f4:	f7fa f8c8 	bl	8000288 <__aeabi_dsub>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4610      	mov	r0, r2
 80060fe:	4619      	mov	r1, r3
 8006100:	f7fa fd72 	bl	8000be8 <__aeabi_d2f>
 8006104:	4603      	mov	r3, r0
 8006106:	ee00 3a10 	vmov	s0, r3
 800610a:	f01d fb19 	bl	8023740 <sinf>
 800610e:	eef0 7a40 	vmov.f32	s15, s0
 8006112:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006116:	ee38 7a27 	vadd.f32	s14, s16, s15
 800611a:	4b0b      	ldr	r3, [pc, #44]	; (8006148 <realMODN+0x2c0>)
 800611c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <realMODN+0x2c0>)
 8006122:	edd3 7a08 	vldr	s15, [r3, #32]
 8006126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800612a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800612e:	4b06      	ldr	r3, [pc, #24]	; (8006148 <realMODN+0x2c0>)
 8006130:	edc3 7a06 	vstr	s15, [r3, #24]
 8006134:	e0cb      	b.n	80062ce <realMODN+0x446>
 8006136:	bf00      	nop
 8006138:	2e48e8a7 	.word	0x2e48e8a7
 800613c:	3fe921ff 	.word	0x3fe921ff
 8006140:	62b6ae7d 	.word	0x62b6ae7d
 8006144:	4002d97f 	.word	0x4002d97f
 8006148:	200076bc 	.word	0x200076bc
	//		*(MODN.vel1) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel2) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel3) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel4) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//	}
	else if (MODN.base == MODN_TRI_OMNI){
 800614c:	4b6a      	ldr	r3, [pc, #424]	; (80062f8 <realMODN+0x470>)
 800614e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006152:	2b01      	cmp	r3, #1
 8006154:	f040 80bb 	bne.w	80062ce <realMODN+0x446>
		 *
		 * 		+		  +
		 * 		A\		 /B
		 * 		  -     -
		 */
		MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8006158:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <realMODN+0x470>)
 800615a:	ed93 8a01 	vldr	s16, [r3, #4]
 800615e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006162:	eef1 7a67 	vneg.f32	s15, s15
 8006166:	eeb0 0a67 	vmov.f32	s0, s15
 800616a:	f01d fae9 	bl	8023740 <sinf>
 800616e:	eef0 7a40 	vmov.f32	s15, s0
 8006172:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006176:	4b60      	ldr	r3, [pc, #384]	; (80062f8 <realMODN+0x470>)
 8006178:	edd3 8a00 	vldr	s17, [r3]
 800617c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006180:	eef1 7a67 	vneg.f32	s15, s15
 8006184:	eeb0 0a67 	vmov.f32	s0, s15
 8006188:	f01d fa9a 	bl	80236c0 <cosf>
 800618c:	eef0 7a40 	vmov.f32	s15, s0
 8006190:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006194:	ee38 7a27 	vadd.f32	s14, s16, s15
 8006198:	4b57      	ldr	r3, [pc, #348]	; (80062f8 <realMODN+0x470>)
 800619a:	edd3 6a02 	vldr	s13, [r3, #8]
 800619e:	4b56      	ldr	r3, [pc, #344]	; (80062f8 <realMODN+0x470>)
 80061a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80061a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061ac:	4b52      	ldr	r3, [pc, #328]	; (80062f8 <realMODN+0x470>)
 80061ae:	edc3 7a05 	vstr	s15, [r3, #20]
		MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <realMODN+0x470>)
 80061b4:	ed93 8a01 	vldr	s16, [r3, #4]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7fa f9c5 	bl	8000548 <__aeabi_f2d>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	a149      	add	r1, pc, #292	; (adr r1, 80062e8 <realMODN+0x460>)
 80061c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c8:	f7fa f85e 	bl	8000288 <__aeabi_dsub>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	f7fa fd08 	bl	8000be8 <__aeabi_d2f>
 80061d8:	4603      	mov	r3, r0
 80061da:	ee00 3a10 	vmov	s0, r3
 80061de:	f01d faaf 	bl	8023740 <sinf>
 80061e2:	eef0 7a40 	vmov.f32	s15, s0
 80061e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80061ea:	4b43      	ldr	r3, [pc, #268]	; (80062f8 <realMODN+0x470>)
 80061ec:	edd3 8a00 	vldr	s17, [r3]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7fa f9a9 	bl	8000548 <__aeabi_f2d>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	a13b      	add	r1, pc, #236	; (adr r1, 80062e8 <realMODN+0x460>)
 80061fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006200:	f7fa f842 	bl	8000288 <__aeabi_dsub>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4610      	mov	r0, r2
 800620a:	4619      	mov	r1, r3
 800620c:	f7fa fcec 	bl	8000be8 <__aeabi_d2f>
 8006210:	4603      	mov	r3, r0
 8006212:	ee00 3a10 	vmov	s0, r3
 8006216:	f01d fa53 	bl	80236c0 <cosf>
 800621a:	eef0 7a40 	vmov.f32	s15, s0
 800621e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006222:	ee38 7a27 	vadd.f32	s14, s16, s15
 8006226:	4b34      	ldr	r3, [pc, #208]	; (80062f8 <realMODN+0x470>)
 8006228:	edd3 6a02 	vldr	s13, [r3, #8]
 800622c:	4b32      	ldr	r3, [pc, #200]	; (80062f8 <realMODN+0x470>)
 800622e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623a:	4b2f      	ldr	r3, [pc, #188]	; (80062f8 <realMODN+0x470>)
 800623c:	edc3 7a03 	vstr	s15, [r3, #12]
		MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8006240:	4b2d      	ldr	r3, [pc, #180]	; (80062f8 <realMODN+0x470>)
 8006242:	ed93 8a01 	vldr	s16, [r3, #4]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7fa f97e 	bl	8000548 <__aeabi_f2d>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	a127      	add	r1, pc, #156	; (adr r1, 80062f0 <realMODN+0x468>)
 8006252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006256:	f7fa f817 	bl	8000288 <__aeabi_dsub>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f7fa fcc1 	bl	8000be8 <__aeabi_d2f>
 8006266:	4603      	mov	r3, r0
 8006268:	ee00 3a10 	vmov	s0, r3
 800626c:	f01d fa68 	bl	8023740 <sinf>
 8006270:	eef0 7a40 	vmov.f32	s15, s0
 8006274:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006278:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <realMODN+0x470>)
 800627a:	edd3 8a00 	vldr	s17, [r3]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7fa f962 	bl	8000548 <__aeabi_f2d>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	a119      	add	r1, pc, #100	; (adr r1, 80062f0 <realMODN+0x468>)
 800628a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800628e:	f7f9 fffb 	bl	8000288 <__aeabi_dsub>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4610      	mov	r0, r2
 8006298:	4619      	mov	r1, r3
 800629a:	f7fa fca5 	bl	8000be8 <__aeabi_d2f>
 800629e:	4603      	mov	r3, r0
 80062a0:	ee00 3a10 	vmov	s0, r3
 80062a4:	f01d fa0c 	bl	80236c0 <cosf>
 80062a8:	eef0 7a40 	vmov.f32	s15, s0
 80062ac:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80062b0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80062b4:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <realMODN+0x470>)
 80062b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80062ba:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <realMODN+0x470>)
 80062bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80062c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c8:	4b0b      	ldr	r3, [pc, #44]	; (80062f8 <realMODN+0x470>)
 80062ca:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	ApplyMODN(psx, rns);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f813 	bl	80062fc <ApplyMODN>
}
 80062d6:	bf00      	nop
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	ecbd 8b02 	vpop	{d8}
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	f3af 8000 	nop.w
 80062e8:	c985f06f 	.word	0xc985f06f
 80062ec:	4000c154 	.word	0x4000c154
 80062f0:	c985f06f 	.word	0xc985f06f
 80062f4:	3ff0c154 	.word	0x3ff0c154
 80062f8:	200076bc 	.word	0x200076bc

080062fc <ApplyMODN>:
		MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
	}
	ApplyMODN(psx, rns);
}

void ApplyMODN(PSxBT_t *psx, RNS_interface_t* rns){
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	//	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
	//		RNSStop(rns);
	if(MODN.x_vel + MODN.y_vel + MODN.w_vel == 0.00){
 8006306:	4b36      	ldr	r3, [pc, #216]	; (80063e0 <ApplyMODN+0xe4>)
 8006308:	ed93 7a00 	vldr	s14, [r3]
 800630c:	4b34      	ldr	r3, [pc, #208]	; (80063e0 <ApplyMODN+0xe4>)
 800630e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006316:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <ApplyMODN+0xe4>)
 8006318:	edd3 7a02 	vldr	s15, [r3, #8]
 800631c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006320:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006328:	d103      	bne.n	8006332 <ApplyMODN+0x36>
		RNSStop(rns);
 800632a:	6838      	ldr	r0, [r7, #0]
 800632c:	f000 fd12 	bl	8006d54 <RNSStop>
		}
		else if (MODN.base == MODN_TRI_OMNI){
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8006330:	e052      	b.n	80063d8 <ApplyMODN+0xdc>
		if(MODN.base == MODN_FWD_OMNI) {
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <ApplyMODN+0xe4>)
 8006334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d117      	bne.n	800636c <ApplyMODN+0x70>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <ApplyMODN+0xe4>)
 800633e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006342:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <ApplyMODN+0xe4>)
 8006344:	ed93 7a04 	vldr	s14, [r3, #16]
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <ApplyMODN+0xe4>)
 800634a:	edd3 6a05 	vldr	s13, [r3, #20]
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <ApplyMODN+0xe4>)
 8006350:	ed93 6a06 	vldr	s12, [r3, #24]
 8006354:	6838      	ldr	r0, [r7, #0]
 8006356:	eef0 1a46 	vmov.f32	s3, s12
 800635a:	eeb0 1a66 	vmov.f32	s2, s13
 800635e:	eef0 0a47 	vmov.f32	s1, s14
 8006362:	eeb0 0a67 	vmov.f32	s0, s15
 8006366:	f000 fd45 	bl	8006df4 <RNSVelocity>
}
 800636a:	e035      	b.n	80063d8 <ApplyMODN+0xdc>
		}else if(MODN.base == MODN_MECANUM){
 800636c:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <ApplyMODN+0xe4>)
 800636e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006372:	2b02      	cmp	r3, #2
 8006374:	d117      	bne.n	80063a6 <ApplyMODN+0xaa>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <ApplyMODN+0xe4>)
 8006378:	edd3 7a03 	vldr	s15, [r3, #12]
 800637c:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <ApplyMODN+0xe4>)
 800637e:	ed93 7a04 	vldr	s14, [r3, #16]
 8006382:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <ApplyMODN+0xe4>)
 8006384:	edd3 6a05 	vldr	s13, [r3, #20]
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <ApplyMODN+0xe4>)
 800638a:	ed93 6a06 	vldr	s12, [r3, #24]
 800638e:	6838      	ldr	r0, [r7, #0]
 8006390:	eef0 1a46 	vmov.f32	s3, s12
 8006394:	eeb0 1a66 	vmov.f32	s2, s13
 8006398:	eef0 0a47 	vmov.f32	s1, s14
 800639c:	eeb0 0a67 	vmov.f32	s0, s15
 80063a0:	f000 fd28 	bl	8006df4 <RNSVelocity>
}
 80063a4:	e018      	b.n	80063d8 <ApplyMODN+0xdc>
		else if (MODN.base == MODN_TRI_OMNI){
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <ApplyMODN+0xe4>)
 80063a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d113      	bne.n	80063d8 <ApplyMODN+0xdc>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <ApplyMODN+0xe4>)
 80063b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80063b6:	4b0a      	ldr	r3, [pc, #40]	; (80063e0 <ApplyMODN+0xe4>)
 80063b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <ApplyMODN+0xe4>)
 80063be:	edd3 6a05 	vldr	s13, [r3, #20]
 80063c2:	6838      	ldr	r0, [r7, #0]
 80063c4:	eddf 1a07 	vldr	s3, [pc, #28]	; 80063e4 <ApplyMODN+0xe8>
 80063c8:	eeb0 1a66 	vmov.f32	s2, s13
 80063cc:	eef0 0a47 	vmov.f32	s1, s14
 80063d0:	eeb0 0a67 	vmov.f32	s0, s15
 80063d4:	f000 fd0e 	bl	8006df4 <RNSVelocity>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	200076bc 	.word	0x200076bc
 80063e4:	00000000 	.word	0x00000000

080063e8 <setSpeedMODN>:
void setOrientationMODN(OrientationMODN_t orientation)
{
	MODN.orientation = orientation;
}

void setSpeedMODN(float speed){  //fucked up, do not use MODN.imuGain eqn!
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	ed87 0a01 	vstr	s0, [r7, #4]

	MODN.speed = speed;
 80063f2:	4a04      	ldr	r2, [pc, #16]	; (8006404 <setSpeedMODN+0x1c>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	61d3      	str	r3, [r2, #28]
//	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	200076bc 	.word	0x200076bc

08006408 <Moving_Average_Init>:
 * 						  Input						    Pointer to Input of the filter
 * 						  Output					    Pointer to Output of the filter
 * Function Return		: NONE
 * Function Example		: Moving_Average_Init (&move_ave, &Laser_dist, &Laser_ave);
 */
void Moving_Average_Init(Mov_Ave_t *Mov_Ave, float *Input, float *Output){
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]

	Mov_Ave->input = Input;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	Mov_Ave->Sum = 0;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	Mov_Ave->WindowPointer = 0;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	Mov_Ave->output = Output;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

	for(uint32_t i=0; i<WindowLength; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e009      	b.n	8006450 <Moving_Average_Init+0x48>
	{
		Mov_Ave->History[i] = 0;
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<WindowLength; i++)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	3301      	adds	r3, #1
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2b3b      	cmp	r3, #59	; 0x3b
 8006454:	d9f2      	bls.n	800643c <Moving_Average_Init+0x34>
	}

}
 8006456:	bf00      	nop
 8006458:	bf00      	nop
 800645a:	371c      	adds	r7, #28
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <Moving_Average_Filter>:
 *
 *						  Mov_Ave                       Pointer to Mov_Ave_t handle
 * Function Return		: NONE
 * Function Example		: Moving_Average_Filter (&move_ave);
 */
void Moving_Average_Filter(Mov_Ave_t *Mov_Ave){
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]


	Mov_Ave->Sum += *(Mov_Ave->input);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8006478:	edd3 7a00 	vldr	s15, [r3]
 800647c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	Mov_Ave->Sum -= Mov_Ave->History[Mov_Ave->WindowPointer];
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	edd3 7a00 	vldr	s15, [r3]
 800649c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
	Mov_Ave->History[Mov_Ave->WindowPointer] = *(Mov_Ave->input);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	601a      	str	r2, [r3, #0]
	if(Mov_Ave->WindowPointer < WindowLength - 1)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064c2:	2b3a      	cmp	r3, #58	; 0x3a
 80064c4:	d807      	bhi.n	80064d6 <Moving_Average_Filter+0x72>
	{
		Mov_Ave->WindowPointer += 1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80064d4:	e003      	b.n	80064de <Moving_Average_Filter+0x7a>
	}
	else
	{
		Mov_Ave->WindowPointer = 0;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	}
	*(Mov_Ave->output) = (Mov_Ave->Sum/WindowLength);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80064ea:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006504 <Moving_Average_Filter+0xa0>
 80064ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f2:	edc3 7a00 	vstr	s15, [r3]

}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	42700000 	.word	0x42700000

08006508 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	230b      	movs	r3, #11
 800651a:	2188      	movs	r1, #136	; 0x88
 800651c:	f010 faca 	bl	8016ab4 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f81e 	bl	8006562 <PSx_HandlerI2C>
}
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	230b      	movs	r3, #11
 8006548:	2188      	movs	r1, #136	; 0x88
 800654a:	f010 fab3 	bl	8016ab4 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	675a      	str	r2, [r3, #116]	; 0x74
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	789a      	ldrb	r2, [r3, #2]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	78da      	ldrb	r2, [r3, #3]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	791b      	ldrb	r3, [r3, #4]
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	795b      	ldrb	r3, [r3, #5]
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	799b      	ldrb	r3, [r3, #6]
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	79db      	ldrb	r3, [r3, #7]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7a1b      	ldrb	r3, [r3, #8]
 80065aa:	461a      	mov	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7a5b      	ldrb	r3, [r3, #9]
 80065b4:	461a      	mov	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	7a9a      	ldrb	r2, [r3, #10]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7ada      	ldrb	r2, [r3, #11]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f88a 	bl	80066e8 <PSxBTGetXY>
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <PSx_HandlerUART>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerUART(&ps4x);
 */

void PSx_HandlerUART(PSxBT_t *psxbt){
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	static uint8_t state = 0;
	switch(state){
 80065e4:	4b3f      	ldr	r3, [pc, #252]	; (80066e4 <PSx_HandlerUART+0x108>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d032      	beq.n	8006652 <PSx_HandlerUART+0x76>
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	dc74      	bgt.n	80066da <PSx_HandlerUART+0xfe>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <PSx_HandlerUART+0x1e>
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d010      	beq.n	800661a <PSx_HandlerUART+0x3e>
			PSxBTGetXY(psxbt);
		}
		state = 0;
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
	}
}
 80065f8:	e06f      	b.n	80066da <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[0] == 0x01)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <PSx_HandlerUART+0x2c>
			state = 1;
 8006602:	4b38      	ldr	r3, [pc, #224]	; (80066e4 <PSx_HandlerUART+0x108>)
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)&psxbt->ReceiveBuffer[1], 1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3302      	adds	r3, #2
 8006610:	2201      	movs	r2, #1
 8006612:	4619      	mov	r1, r3
 8006614:	f013 ffd0 	bl	801a5b8 <HAL_UART_Receive_IT>
	break;
 8006618:	e05f      	b.n	80066da <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[1] == 0x02){
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	789b      	ldrb	r3, [r3, #2]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d10b      	bne.n	800663a <PSx_HandlerUART+0x5e>
			state = 2;
 8006622:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <PSx_HandlerUART+0x108>)
 8006624:	2202      	movs	r2, #2
 8006626:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)&psxbt->ReceiveBuffer[2], 11);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3303      	adds	r3, #3
 8006630:	220b      	movs	r2, #11
 8006632:	4619      	mov	r1, r3
 8006634:	f013 ffc0 	bl	801a5b8 <HAL_UART_Receive_IT>
	break;
 8006638:	e04f      	b.n	80066da <PSx_HandlerUART+0xfe>
			state = 0;
 800663a:	4b2a      	ldr	r3, [pc, #168]	; (80066e4 <PSx_HandlerUART+0x108>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3301      	adds	r3, #1
 8006648:	2201      	movs	r2, #1
 800664a:	4619      	mov	r1, r3
 800664c:	f013 ffb4 	bl	801a5b8 <HAL_UART_Receive_IT>
	break;
 8006650:	e043      	b.n	80066da <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[11] == 0x03 && psxbt->ReceiveBuffer[12] == 0x04){
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	7b1b      	ldrb	r3, [r3, #12]
 8006656:	2b03      	cmp	r3, #3
 8006658:	d133      	bne.n	80066c2 <PSx_HandlerUART+0xe6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	7b5b      	ldrb	r3, [r3, #13]
 800665e:	2b04      	cmp	r3, #4
 8006660:	d12f      	bne.n	80066c2 <PSx_HandlerUART+0xe6>
			psxbt->buf1 = psxbt->ReceiveBuffer[2];
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	78da      	ldrb	r2, [r3, #3]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			psxbt->buf2 = psxbt->ReceiveBuffer[3];
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	791a      	ldrb	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			psxbt->leftjoy_x = psxbt->ReceiveBuffer[4];
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	795b      	ldrb	r3, [r3, #5]
 800667a:	461a      	mov	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	635a      	str	r2, [r3, #52]	; 0x34
			psxbt->leftjoy_y = psxbt->ReceiveBuffer[5];
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	799b      	ldrb	r3, [r3, #6]
 8006684:	461a      	mov	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	639a      	str	r2, [r3, #56]	; 0x38
			psxbt->rightjoy_x = psxbt->ReceiveBuffer[6];
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	79db      	ldrb	r3, [r3, #7]
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	63da      	str	r2, [r3, #60]	; 0x3c
			psxbt->rightjoy_y = psxbt->ReceiveBuffer[7];
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7a1b      	ldrb	r3, [r3, #8]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
			psxbt->an_L2 = psxbt->ReceiveBuffer[8];
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	7a5b      	ldrb	r3, [r3, #9]
 80066a2:	461a      	mov	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	645a      	str	r2, [r3, #68]	; 0x44
			psxbt->an_R2 = psxbt->ReceiveBuffer[9];
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	7a9b      	ldrb	r3, [r3, #10]
 80066ac:	461a      	mov	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	649a      	str	r2, [r3, #72]	; 0x48
			psxbt->buf3 = psxbt->ReceiveBuffer[10];
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	7ada      	ldrb	r2, [r3, #11]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			PSxBTGetXY(psxbt);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f813 	bl	80066e8 <PSxBTGetXY>
		state = 0;
 80066c2:	4b08      	ldr	r3, [pc, #32]	; (80066e4 <PSx_HandlerUART+0x108>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3301      	adds	r3, #1
 80066d0:	2201      	movs	r2, #1
 80066d2:	4619      	mov	r1, r3
 80066d4:	f013 ff70 	bl	801a5b8 <HAL_UART_Receive_IT>
}
 80066d8:	e7ff      	b.n	80066da <PSx_HandlerUART+0xfe>
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200008b9 	.word	0x200008b9

080066e8 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8006a10 <PSxBTGetXY+0x328>
 8006700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006708:	d53e      	bpl.n	8006788 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	ee17 0a90 	vmov	r0, s15
 800671a:	f7f9 ff15 	bl	8000548 <__aeabi_f2d>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	a1b9      	add	r1, pc, #740	; (adr r1, 8006a08 <PSxBTGetXY+0x320>)
 8006724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006728:	f7f9 fdae 	bl	8000288 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4bb6      	ldr	r3, [pc, #728]	; (8006a14 <PSxBTGetXY+0x32c>)
 800673a:	f7fa f887 	bl	800084c <__aeabi_ddiv>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	f7fa fa4f 	bl	8000be8 <__aeabi_d2f>
 800674a:	4602      	mov	r2, r0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800675a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675e:	d504      	bpl.n	800676a <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	64da      	str	r2, [r3, #76]	; 0x4c
 8006768:	e05d      	b.n	8006826 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677c:	dd53      	ble.n	8006826 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
 8006786:	e04e      	b.n	8006826 <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006794:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006a20 <PSxBTGetXY+0x338>
 8006798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800679c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a0:	dd3d      	ble.n	800681e <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ae:	ee17 0a90 	vmov	r0, s15
 80067b2:	f7f9 fec9 	bl	8000548 <__aeabi_f2d>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	f04f 0000 	mov.w	r0, #0
 80067be:	4996      	ldr	r1, [pc, #600]	; (8006a18 <PSxBTGetXY+0x330>)
 80067c0:	f7f9 fd62 	bl	8000288 <__aeabi_dsub>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <PSxBTGetXY+0x32c>)
 80067d2:	f7fa f83b 	bl	800084c <__aeabi_ddiv>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4610      	mov	r0, r2
 80067dc:	4619      	mov	r1, r3
 80067de:	f7fa fa03 	bl	8000be8 <__aeabi_d2f>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80067ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f6:	dd04      	ble.n	8006802 <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8006800:	e011      	b.n	8006826 <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006808:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800680c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006814:	d507      	bpl.n	8006826 <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a80      	ldr	r2, [pc, #512]	; (8006a1c <PSxBTGetXY+0x334>)
 800681a:	64da      	str	r2, [r3, #76]	; 0x4c
 800681c:	e003      	b.n	8006826 <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006832:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8006a10 <PSxBTGetXY+0x328>
 8006836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683e:	d542      	bpl.n	80068c6 <PSxBTGetXY+0x1de>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006844:	ee07 3a90 	vmov	s15, r3
 8006848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684c:	ee17 0a90 	vmov	r0, s15
 8006850:	f7f9 fe7a 	bl	8000548 <__aeabi_f2d>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	a16b      	add	r1, pc, #428	; (adr r1, 8006a08 <PSxBTGetXY+0x320>)
 800685a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	4b69      	ldr	r3, [pc, #420]	; (8006a14 <PSxBTGetXY+0x32c>)
 8006870:	f7f9 ffec 	bl	800084c <__aeabi_ddiv>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	f7fa f9b4 	bl	8000be8 <__aeabi_d2f>
 8006880:	4603      	mov	r3, r0
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef1 7a67 	vneg.f32	s15, s15
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800689a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689e:	dd04      	ble.n	80068aa <PSxBTGetXY+0x1c2>
			psxbt->joyR_x = 0.0;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	651a      	str	r2, [r3, #80]	; 0x50
 80068a8:	e062      	b.n	8006970 <PSxBTGetXY+0x288>
		}else if(psxbt->joyR_x < -1.0){
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80068b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80068b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068bc:	d558      	bpl.n	8006970 <PSxBTGetXY+0x288>
			psxbt->joyR_x = -1.0;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a56      	ldr	r2, [pc, #344]	; (8006a1c <PSxBTGetXY+0x334>)
 80068c2:	651a      	str	r2, [r3, #80]	; 0x50
 80068c4:	e054      	b.n	8006970 <PSxBTGetXY+0x288>
		}
	}else if(joyR_right){
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006a20 <PSxBTGetXY+0x338>
 80068d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068de:	dd43      	ble.n	8006968 <PSxBTGetXY+0x280>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ec:	ee17 0a90 	vmov	r0, s15
 80068f0:	f7f9 fe2a 	bl	8000548 <__aeabi_f2d>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	f04f 0000 	mov.w	r0, #0
 80068fc:	4946      	ldr	r1, [pc, #280]	; (8006a18 <PSxBTGetXY+0x330>)
 80068fe:	f7f9 fcc3 	bl	8000288 <__aeabi_dsub>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4610      	mov	r0, r2
 8006908:	4619      	mov	r1, r3
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	4b41      	ldr	r3, [pc, #260]	; (8006a14 <PSxBTGetXY+0x32c>)
 8006910:	f7f9 ff9c 	bl	800084c <__aeabi_ddiv>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	4610      	mov	r0, r2
 800691a:	4619      	mov	r1, r3
 800691c:	f7fa f964 	bl	8000be8 <__aeabi_d2f>
 8006920:	4603      	mov	r3, r0
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eef1 7a67 	vneg.f32	s15, s15
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800693a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693e:	d504      	bpl.n	800694a <PSxBTGetXY+0x262>
			psxbt->joyR_x = 0.0;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	651a      	str	r2, [r3, #80]	; 0x50
 8006948:	e012      	b.n	8006970 <PSxBTGetXY+0x288>
		}else if(psxbt->joyR_x > 1.0){
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800695c:	dd08      	ble.n	8006970 <PSxBTGetXY+0x288>
			psxbt->joyR_x = 1.0;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006964:	651a      	str	r2, [r3, #80]	; 0x50
 8006966:	e003      	b.n	8006970 <PSxBTGetXY+0x288>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006a10 <PSxBTGetXY+0x328>
 8006980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006988:	d54c      	bpl.n	8006a24 <PSxBTGetXY+0x33c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	ee17 0a90 	vmov	r0, s15
 800699a:	f7f9 fdd5 	bl	8000548 <__aeabi_f2d>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	a119      	add	r1, pc, #100	; (adr r1, 8006a08 <PSxBTGetXY+0x320>)
 80069a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069a8:	f7f9 fc6e 	bl	8000288 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <PSxBTGetXY+0x32c>)
 80069ba:	f7f9 ff47 	bl	800084c <__aeabi_ddiv>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	f7fa f90f 	bl	8000be8 <__aeabi_d2f>
 80069ca:	4602      	mov	r2, r0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80069d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069de:	d504      	bpl.n	80069ea <PSxBTGetXY+0x302>
			psxbt->joyL_y = 0.0;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
 80069e8:	e06b      	b.n	8006ac2 <PSxBTGetXY+0x3da>
		}else if(psxbt->joyL_y > 1.0){
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80069f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fc:	dd61      	ble.n	8006ac2 <PSxBTGetXY+0x3da>
			psxbt->joyL_y = 1.0;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006a04:	655a      	str	r2, [r3, #84]	; 0x54
 8006a06:	e05c      	b.n	8006ac2 <PSxBTGetXY+0x3da>
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	405cc000 	.word	0x405cc000
 8006a10:	42e60000 	.word	0x42e60000
 8006a14:	40590000 	.word	0x40590000
 8006a18:	40618000 	.word	0x40618000
 8006a1c:	bf800000 	.word	0xbf800000
 8006a20:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8006a20 <PSxBTGetXY+0x338>
 8006a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3c:	dd3d      	ble.n	8006aba <PSxBTGetXY+0x3d2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4a:	ee17 0a90 	vmov	r0, s15
 8006a4e:	f7f9 fd7b 	bl	8000548 <__aeabi_f2d>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	f04f 0000 	mov.w	r0, #0
 8006a5a:	4985      	ldr	r1, [pc, #532]	; (8006c70 <PSxBTGetXY+0x588>)
 8006a5c:	f7f9 fc14 	bl	8000288 <__aeabi_dsub>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4610      	mov	r0, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	f04f 0200 	mov.w	r2, #0
 8006a6c:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <PSxBTGetXY+0x58c>)
 8006a6e:	f7f9 feed 	bl	800084c <__aeabi_ddiv>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4610      	mov	r0, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f7fa f8b5 	bl	8000be8 <__aeabi_d2f>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a92:	dd04      	ble.n	8006a9e <PSxBTGetXY+0x3b6>
			psxbt->joyL_y = 0.0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
 8006a9c:	e011      	b.n	8006ac2 <PSxBTGetXY+0x3da>
		}else if(psxbt->joyL_y < -1.0){
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006aa4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab0:	d507      	bpl.n	8006ac2 <PSxBTGetXY+0x3da>
			psxbt->joyL_y = -1.0;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a70      	ldr	r2, [pc, #448]	; (8006c78 <PSxBTGetXY+0x590>)
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
 8006ab8:	e003      	b.n	8006ac2 <PSxBTGetXY+0x3da>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f04f 0200 	mov.w	r2, #0
 8006ac0:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8006c7c <PSxBTGetXY+0x594>
 8006ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ada:	d542      	bpl.n	8006b62 <PSxBTGetXY+0x47a>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	ee17 0a90 	vmov	r0, s15
 8006aec:	f7f9 fd2c 	bl	8000548 <__aeabi_f2d>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	a15a      	add	r1, pc, #360	; (adr r1, 8006c60 <PSxBTGetXY+0x578>)
 8006af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afa:	f7f9 fbc5 	bl	8000288 <__aeabi_dsub>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	4b5a      	ldr	r3, [pc, #360]	; (8006c74 <PSxBTGetXY+0x58c>)
 8006b0c:	f7f9 fe9e 	bl	800084c <__aeabi_ddiv>
 8006b10:	4602      	mov	r2, r0
 8006b12:	460b      	mov	r3, r1
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	f7fa f866 	bl	8000be8 <__aeabi_d2f>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef1 7a67 	vneg.f32	s15, s15
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006b32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3a:	dd04      	ble.n	8006b46 <PSxBTGetXY+0x45e>
			psxbt->joyL_x = 0.0;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	659a      	str	r2, [r3, #88]	; 0x58
 8006b44:	e062      	b.n	8006c0c <PSxBTGetXY+0x524>
		}else if(psxbt->joyL_x < -1.0){
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006b4c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b58:	d558      	bpl.n	8006c0c <PSxBTGetXY+0x524>
			psxbt->joyL_x = -1.0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a46      	ldr	r2, [pc, #280]	; (8006c78 <PSxBTGetXY+0x590>)
 8006b5e:	659a      	str	r2, [r3, #88]	; 0x58
 8006b60:	e054      	b.n	8006c0c <PSxBTGetXY+0x524>
		}
	}else if(joyL_right){
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006c80 <PSxBTGetXY+0x598>
 8006b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7a:	dd43      	ble.n	8006c04 <PSxBTGetXY+0x51c>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	ee07 3a90 	vmov	s15, r3
 8006b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b88:	ee17 0a90 	vmov	r0, s15
 8006b8c:	f7f9 fcdc 	bl	8000548 <__aeabi_f2d>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	f04f 0000 	mov.w	r0, #0
 8006b98:	4935      	ldr	r1, [pc, #212]	; (8006c70 <PSxBTGetXY+0x588>)
 8006b9a:	f7f9 fb75 	bl	8000288 <__aeabi_dsub>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	4b32      	ldr	r3, [pc, #200]	; (8006c74 <PSxBTGetXY+0x58c>)
 8006bac:	f7f9 fe4e 	bl	800084c <__aeabi_ddiv>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	f7fa f816 	bl	8000be8 <__aeabi_d2f>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef1 7a67 	vneg.f32	s15, s15
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	d504      	bpl.n	8006be6 <PSxBTGetXY+0x4fe>
			psxbt->joyL_x = 0.0;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	659a      	str	r2, [r3, #88]	; 0x58
 8006be4:	e012      	b.n	8006c0c <PSxBTGetXY+0x524>
		}else if(psxbt->joyL_x > 1.0){
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006bec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf8:	dd08      	ble.n	8006c0c <PSxBTGetXY+0x524>
			psxbt->joyL_x = 1.0;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c00:	659a      	str	r2, [r3, #88]	; 0x58
 8006c02:	e003      	b.n	8006c0c <PSxBTGetXY+0x524>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7f9 fc77 	bl	8000504 <__aeabi_ui2d>
 8006c16:	a314      	add	r3, pc, #80	; (adr r3, 8006c68 <PSxBTGetXY+0x580>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fe16 	bl	800084c <__aeabi_ddiv>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	f7f9 ffde 	bl	8000be8 <__aeabi_d2f>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7f9 fc64 	bl	8000504 <__aeabi_ui2d>
 8006c3c:	a30a      	add	r3, pc, #40	; (adr r3, 8006c68 <PSxBTGetXY+0x580>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fe03 	bl	800084c <__aeabi_ddiv>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	f7f9 ffcb 	bl	8000be8 <__aeabi_d2f>
 8006c52:	4602      	mov	r2, r0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	00000000 	.word	0x00000000
 8006c64:	405cc000 	.word	0x405cc000
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	406fe000 	.word	0x406fe000
 8006c70:	40618000 	.word	0x40618000
 8006c74:	40590000 	.word	0x40590000
 8006c78:	bf800000 	.word	0xbf800000
 8006c7c:	42e60000 	.word	0x42e60000
 8006c80:	430c0000 	.word	0x430c0000

08006c84 <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	rns->busy=0;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->rns_hcanx = hcanx;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	601a      	str	r2, [r3, #0]
	insData_send[0] = 1;
 8006c9c:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <RNSInit+0xc4>)
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 8006ca2:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <RNSInit+0xc4>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6818      	ldr	r0, [r3, #0]
 8006cac:	2302      	movs	r3, #2
 8006cae:	4a26      	ldr	r2, [pc, #152]	; (8006d48 <RNSInit+0xc4>)
 8006cb0:	2117      	movs	r1, #23
 8006cb2:	f7fc ffb1 	bl	8003c18 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_PENDING;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <RNSInit+0xc4>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 8006cc4:	4b20      	ldr	r3, [pc, #128]	; (8006d48 <RNSInit+0xc4>)
 8006cc6:	2214      	movs	r2, #20
 8006cc8:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	2302      	movs	r3, #2
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <RNSInit+0xc4>)
 8006cd2:	2117      	movs	r1, #23
 8006cd4:	f7fc ffa0 	bl	8003c18 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8006ce4:	e022      	b.n	8006d2c <RNSInit+0xa8>
		if(wait >= 2000000){
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <RNSInit+0xc8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	dd1b      	ble.n	8006d26 <RNSInit+0xa2>
			insData_send[0] = 1;
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <RNSInit+0xc4>)
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <RNSInit+0xc4>)
 8006cf6:	2214      	movs	r2, #20
 8006cf8:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	2302      	movs	r3, #2
 8006d00:	4a11      	ldr	r2, [pc, #68]	; (8006d48 <RNSInit+0xc4>)
 8006d02:	2117      	movs	r1, #23
 8006d04:	f7fc ff88 	bl	8003c18 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <RNSInit+0xcc>)
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	b25b      	sxtb	r3, r3
 8006d0e:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <RNSInit+0xcc>)
 8006d10:	43db      	mvns	r3, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	09db      	lsrs	r3, r3, #7
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	7853      	ldrb	r3, [r2, #1]
 8006d1a:	f361 13c7 	bfi	r3, r1, #7, #1
 8006d1e:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e002      	b.n	8006d2c <RNSInit+0xa8>
		}else{
			wait ++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d0d7      	beq.n	8006ce6 <RNSInit+0x62>
		}
	}
	rns->busy=1;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8006d3e:	bf00      	nop
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	2000abf4 	.word	0x2000abf4
 8006d4c:	001e847f 	.word	0x001e847f
 8006d50:	40020814 	.word	0x40020814

08006d54 <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	rns->ins.instruction = RNS_STOP;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2203      	movs	r2, #3
 8006d60:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f04f 0200 	mov.w	r2, #0
 8006d78:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2202      	movs	r2, #2
 8006d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	rns->busy=0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	insData_send[0] = 17;
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <RNSStop+0x9c>)
 8006d94:	2211      	movs	r2, #17
 8006d96:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	791a      	ldrb	r2, [r3, #4]
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <RNSStop+0x9c>)
 8006d9e:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
 8006da4:	2302      	movs	r3, #2
 8006da6:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <RNSStop+0x9c>)
 8006da8:	2117      	movs	r1, #23
 8006daa:	f7fc ff35 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0]),8);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f103 0208 	add.w	r2, r3, #8
 8006db8:	2308      	movs	r3, #8
 8006dba:	2118      	movs	r1, #24
 8006dbc:	f7fc ff2c 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2]),8);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f103 0210 	add.w	r2, r3, #16
 8006dca:	2308      	movs	r3, #8
 8006dcc:	2119      	movs	r1, #25
 8006dce:	f7fc ff23 	bl	8003c18 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8006dd2:	bf00      	nop
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d0fa      	beq.n	8006dd4 <RNSStop+0x80>

	rns->busy=1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2000abf4 	.word	0x2000abf4

08006df4 <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	ed87 0a05 	vstr	s0, [r7, #20]
 8006dfe:	edc7 0a04 	vstr	s1, [r7, #16]
 8006e02:	ed87 1a03 	vstr	s2, [r7, #12]
 8006e06:	edc7 1a02 	vstr	s3, [r7, #8]
 8006e0a:	6078      	str	r0, [r7, #4]
	rns->ins.instruction = RNS_VELOCITY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2205      	movs	r2, #5
 8006e10:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f97e 	bl	800712c <RNSSendIns>

}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <RNSIMURotate>:
 * Function Arguments	: AngleDeg		Rotate angle. Max:+-180degree, +:clkwise, -:anticlkwise
 * 						  rns 			pointer to a RNS data structure with RNS_interface _t type
 * Function Return		: None
 * Function Example		: RNSIMURotate(70,&RNS);
 */
void RNSIMURotate(int AngleDeg,RNS_interface_t* rns){
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
	rns->ins.instruction = RNS_ROTATE;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2211      	movs	r2, #17
 8006e46:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = (float)AngleDeg;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	edc3 7a02 	vstr	s15, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	f000 f95b 	bl	800712c <RNSSendIns>
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <RNSPPstart>:
 * Function Return		: None
 * Function Example		: float point[1][7] = {{3.0, 0.001, 1.0, -180.0, 0.0, 0.0, 1.5}};					//for coordinates use this type of naming
 * 								RNSPPstart(point,1,&rns);
 */

void RNSPPstart(float allpoints[][7],int no_point,RNS_interface_t* rns){
 8006e7e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e82:	b098      	sub	sp, #96	; 0x60
 8006e84:	af0c      	add	r7, sp, #48	; 0x30
 8006e86:	6278      	str	r0, [r7, #36]	; 0x24
 8006e88:	6239      	str	r1, [r7, #32]
 8006e8a:	61fa      	str	r2, [r7, #28]
	RNSSet(rns, RNS_PPSend_num_Point,(float)no_point);
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e96:	ee17 0a90 	vmov	r0, s15
 8006e9a:	f7f9 fb55 	bl	8000548 <__aeabi_f2d>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	2119      	movs	r1, #25
 8006ea4:	69f8      	ldr	r0, [r7, #28]
 8006ea6:	f000 f983 	bl	80071b0 <RNSSet>
	int k;
	for(k=0;k<no_point;k++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eae:	e07a      	b.n	8006fa6 <RNSPPstart+0x128>
		RNSSet(rns, RNS_PPSendPoint, allpoints[k][0],allpoints[k][1],allpoints[k][2],allpoints[k][3],allpoints[k][4],allpoints[k][5],allpoints[k][6]);
 8006eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	461a      	mov	r2, r3
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	4413      	add	r3, r2
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7f9 fb40 	bl	8000548 <__aeabi_f2d>
 8006ec8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006ecc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	4413      	add	r3, r2
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 fb32 	bl	8000548 <__aeabi_f2d>
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	1a9b      	subs	r3, r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	4413      	add	r3, r2
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7f9 fb24 	bl	8000548 <__aeabi_f2d>
 8006f00:	4682      	mov	sl, r0
 8006f02:	468b      	mov	fp, r1
 8006f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f06:	4613      	mov	r3, r2
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	4413      	add	r3, r2
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7f9 fb16 	bl	8000548 <__aeabi_f2d>
 8006f1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f22:	4613      	mov	r3, r2
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	1a9b      	subs	r3, r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	4413      	add	r3, r2
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7f9 fb08 	bl	8000548 <__aeabi_f2d>
 8006f38:	e9c7 0100 	strd	r0, r1, [r7]
 8006f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	461a      	mov	r2, r3
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	4413      	add	r3, r2
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7f9 fafa 	bl	8000548 <__aeabi_f2d>
 8006f54:	4604      	mov	r4, r0
 8006f56:	460d      	mov	r5, r1
 8006f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	461a      	mov	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	4413      	add	r3, r2
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 faec 	bl	8000548 <__aeabi_f2d>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006f78:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006f7c:	ed97 7b00 	vldr	d7, [r7]
 8006f80:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f84:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f8c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8006f90:	e9cd 8900 	strd	r8, r9, [sp]
 8006f94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f98:	2153      	movs	r1, #83	; 0x53
 8006f9a:	69f8      	ldr	r0, [r7, #28]
 8006f9c:	f000 f908 	bl	80071b0 <RNSSet>
	for(k=0;k<no_point;k++)
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	db80      	blt.n	8006eb0 <RNSPPstart+0x32>
	rns->ins.instruction = RNS_PPStart;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006fd4:	69f8      	ldr	r0, [r7, #28]
 8006fd6:	f000 f8a9 	bl	800712c <RNSSendIns>
}
 8006fda:	bf00      	nop
 8006fdc:	3730      	adds	r7, #48	; 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fe4 <RNSPPstart_PS>:

void RNSPPstart_PS(float** allpoints,int no_point,RNS_interface_t* rns){
 8006fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fe8:	b098      	sub	sp, #96	; 0x60
 8006fea:	af0c      	add	r7, sp, #48	; 0x30
 8006fec:	6278      	str	r0, [r7, #36]	; 0x24
 8006fee:	6239      	str	r1, [r7, #32]
 8006ff0:	61fa      	str	r2, [r7, #28]
	RNSSet(rns, RNS_PPSend_num_Point,(float)no_point);
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	ee07 3a90 	vmov	s15, r3
 8006ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffc:	ee17 0a90 	vmov	r0, s15
 8007000:	f7f9 faa2 	bl	8000548 <__aeabi_f2d>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	2119      	movs	r1, #25
 800700a:	69f8      	ldr	r0, [r7, #28]
 800700c:	f000 f8d0 	bl	80071b0 <RNSSet>
	int k;
	for(k=0;k<no_point;k++)
 8007010:	2300      	movs	r3, #0
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007014:	e06b      	b.n	80070ee <RNSPPstart_PS+0x10a>
		RNSSet(rns, RNS_PPSendPoint, allpoints[k][0],allpoints[k][1],allpoints[k][2],allpoints[k][3],allpoints[k][4],allpoints[k][5],allpoints[k][6]);
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701c:	4413      	add	r3, r2
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f7f9 fa90 	bl	8000548 <__aeabi_f2d>
 8007028:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007032:	4413      	add	r3, r2
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3304      	adds	r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7f9 fa84 	bl	8000548 <__aeabi_f2d>
 8007040:	4680      	mov	r8, r0
 8007042:	4689      	mov	r9, r1
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704a:	4413      	add	r3, r2
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7f9 fa78 	bl	8000548 <__aeabi_f2d>
 8007058:	4682      	mov	sl, r0
 800705a:	468b      	mov	fp, r1
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007062:	4413      	add	r3, r2
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 fa6c 	bl	8000548 <__aeabi_f2d>
 8007070:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707a:	4413      	add	r3, r2
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3310      	adds	r3, #16
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7f9 fa60 	bl	8000548 <__aeabi_f2d>
 8007088:	e9c7 0100 	strd	r0, r1, [r7]
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007092:	4413      	add	r3, r2
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3314      	adds	r3, #20
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7f9 fa54 	bl	8000548 <__aeabi_f2d>
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070aa:	4413      	add	r3, r2
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3318      	adds	r3, #24
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7f9 fa48 	bl	8000548 <__aeabi_f2d>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80070c0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80070c4:	ed97 7b00 	vldr	d7, [r7]
 80070c8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070cc:	ed97 7b02 	vldr	d7, [r7, #8]
 80070d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070d4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80070d8:	e9cd 8900 	strd	r8, r9, [sp]
 80070dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070e0:	2153      	movs	r1, #83	; 0x53
 80070e2:	69f8      	ldr	r0, [r7, #28]
 80070e4:	f000 f864 	bl	80071b0 <RNSSet>
	for(k=0;k<no_point;k++)
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	3301      	adds	r3, #1
 80070ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	db8f      	blt.n	8007016 <RNSPPstart_PS+0x32>
	rns->ins.instruction = RNS_PPStart;
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	2210      	movs	r2, #16
 80070fa:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0;
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 800711c:	69f8      	ldr	r0, [r7, #28]
 800711e:	f000 f805 	bl	800712c <RNSSendIns>
}
 8007122:	bf00      	nop
 8007124:	3730      	adds	r7, #48	; 0x30
 8007126:	46bd      	mov	sp, r7
 8007128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800712c <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
	rns->busy=0;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 800713c:	bf00      	nop
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007144:	2b01      	cmp	r3, #1
 8007146:	d0fa      	beq.n	800713e <RNSSendIns+0x12>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8007150:	4b16      	ldr	r3, [pc, #88]	; (80071ac <RNSSendIns+0x80>)
 8007152:	2211      	movs	r2, #17
 8007154:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	791a      	ldrb	r2, [r3, #4]
 800715a:	4b14      	ldr	r3, [pc, #80]	; (80071ac <RNSSendIns+0x80>)
 800715c:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	2302      	movs	r3, #2
 8007164:	4a11      	ldr	r2, [pc, #68]	; (80071ac <RNSSendIns+0x80>)
 8007166:	2117      	movs	r1, #23
 8007168:	f7fc fd56 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0].data),8);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f103 0208 	add.w	r2, r3, #8
 8007176:	2308      	movs	r3, #8
 8007178:	2118      	movs	r1, #24
 800717a:	f7fc fd4d 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2].data),8);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f103 0210 	add.w	r2, r3, #16
 8007188:	2308      	movs	r3, #8
 800718a:	2119      	movs	r1, #25
 800718c:	f7fc fd44 	bl	8003c18 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8007190:	bf00      	nop
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007198:	2b02      	cmp	r3, #2
 800719a:	d0fa      	beq.n	8007192 <RNSSendIns+0x66>
		//		} else{
		//			GPIOC_OUT->bit14=1;
		//		}
	}

	rns->busy=1;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	2000abf4 	.word	0x2000abf4

080071b0 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 80071b0:	b40e      	push	{r1, r2, r3}
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
	va_list value;
	rns->param.parameter = parameter;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7f3a      	ldrb	r2, [r7, #28]
 80071be:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 80071c0:	f107 0320 	add.w	r3, r7, #32
 80071c4:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 80071c6:	bf00      	nop
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d0fa      	beq.n	80071c8 <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 80071d2:	7f3b      	ldrb	r3, [r7, #28]
 80071d4:	2b18      	cmp	r3, #24
 80071d6:	d92b      	bls.n	8007230 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3307      	adds	r3, #7
 80071dc:	f023 0307 	bic.w	r3, r3, #7
 80071e0:	f103 0208 	add.w	r2, r3, #8
 80071e4:	60fa      	str	r2, [r7, #12]
 80071e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7f9 fcfb 	bl	8000be8 <__aeabi_d2f>
 80071f2:	4602      	mov	r2, r0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 8007230:	7f3b      	ldrb	r3, [r7, #28]
 8007232:	2b1e      	cmp	r3, #30
 8007234:	d927      	bls.n	8007286 <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3307      	adds	r3, #7
 800723a:	f023 0307 	bic.w	r3, r3, #7
 800723e:	f103 0208 	add.w	r2, r3, #8
 8007242:	60fa      	str	r2, [r7, #12]
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	4610      	mov	r0, r2
 800724a:	4619      	mov	r1, r3
 800724c:	f7f9 fccc 	bl	8000be8 <__aeabi_d2f>
 8007250:	4602      	mov	r2, r0
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f04f 0200 	mov.w	r2, #0
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 8007286:	7f3b      	ldrb	r3, [r7, #28]
 8007288:	2b23      	cmp	r3, #35	; 0x23
 800728a:	d923      	bls.n	80072d4 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3307      	adds	r3, #7
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	f103 0208 	add.w	r2, r3, #8
 8007298:	60fa      	str	r2, [r7, #12]
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	4610      	mov	r0, r2
 80072a0:	4619      	mov	r1, r3
 80072a2:	f7f9 fca1 	bl	8000be8 <__aeabi_d2f>
 80072a6:	4602      	mov	r2, r0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 80072d4:	7f3b      	ldrb	r3, [r7, #28]
 80072d6:	2b48      	cmp	r3, #72	; 0x48
 80072d8:	d91f      	bls.n	800731a <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3307      	adds	r3, #7
 80072de:	f023 0307 	bic.w	r3, r3, #7
 80072e2:	f103 0208 	add.w	r2, r3, #8
 80072e6:	60fa      	str	r2, [r7, #12]
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	f7f9 fc7a 	bl	8000be8 <__aeabi_d2f>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 800731a:	7f3b      	ldrb	r3, [r7, #28]
 800731c:	2b50      	cmp	r3, #80	; 0x50
 800731e:	d91b      	bls.n	8007358 <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	3307      	adds	r3, #7
 8007324:	f023 0307 	bic.w	r3, r3, #7
 8007328:	f103 0208 	add.w	r2, r3, #8
 800732c:	60fa      	str	r2, [r7, #12]
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	4610      	mov	r0, r2
 8007334:	4619      	mov	r1, r3
 8007336:	f7f9 fc57 	bl	8000be8 <__aeabi_d2f>
 800733a:	4602      	mov	r2, r0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f04f 0200 	mov.w	r2, #0
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 8007358:	7f3b      	ldrb	r3, [r7, #28]
 800735a:	2b51      	cmp	r3, #81	; 0x51
 800735c:	d917      	bls.n	800738e <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3307      	adds	r3, #7
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	f103 0208 	add.w	r2, r3, #8
 800736a:	60fa      	str	r2, [r7, #12]
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	f7f9 fc38 	bl	8000be8 <__aeabi_d2f>
 8007378:	4602      	mov	r2, r0
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 800738e:	7f3b      	ldrb	r3, [r7, #28]
 8007390:	2b52      	cmp	r3, #82	; 0x52
 8007392:	d913      	bls.n	80073bc <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	f103 0208 	add.w	r2, r3, #8
 80073a0:	60fa      	str	r2, [r7, #12]
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	4610      	mov	r0, r2
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7f9 fc1d 	bl	8000be8 <__aeabi_d2f>
 80073ae:	4602      	mov	r2, r0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 80073bc:	7f3b      	ldrb	r3, [r7, #28]
 80073be:	2b54      	cmp	r3, #84	; 0x54
 80073c0:	d90f      	bls.n	80073e2 <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3307      	adds	r3, #7
 80073c6:	f023 0307 	bic.w	r3, r3, #7
 80073ca:	f103 0208 	add.w	r2, r3, #8
 80073ce:	60fa      	str	r2, [r7, #12]
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	4610      	mov	r0, r2
 80073d6:	4619      	mov	r1, r3
 80073d8:	f7f9 fc06 	bl	8000be8 <__aeabi_d2f>
 80073dc:	4602      	mov	r2, r0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	rns->busy=0;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	insData_send[0] = 17;
 80073ea:	4b26      	ldr	r3, [pc, #152]	; (8007484 <RNSSet+0x2d4>)
 80073ec:	2211      	movs	r2, #17
 80073ee:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7e1a      	ldrb	r2, [r3, #24]
 80073f4:	4b23      	ldr	r3, [pc, #140]	; (8007484 <RNSSet+0x2d4>)
 80073f6:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	2302      	movs	r3, #2
 80073fe:	4a21      	ldr	r2, [pc, #132]	; (8007484 <RNSSet+0x2d4>)
 8007400:	2117      	movs	r1, #23
 8007402:	f7fc fc09 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->param.param_buffer[0]),8);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6818      	ldr	r0, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f103 021c 	add.w	r2, r3, #28
 8007410:	2308      	movs	r3, #8
 8007412:	2118      	movs	r1, #24
 8007414:	f7fc fc00 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->param.param_buffer[2]),8);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8007422:	2308      	movs	r3, #8
 8007424:	2119      	movs	r1, #25
 8007426:	f7fc fbf7 	bl	8003c18 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 800742a:	7f3b      	ldrb	r3, [r7, #28]
 800742c:	2b50      	cmp	r3, #80	; 0x50
 800742e:	d908      	bls.n	8007442 <RNSSet+0x292>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,(uint8_t*)&(rns->param.param_buffer[4]),8);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6818      	ldr	r0, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800743a:	2308      	movs	r3, #8
 800743c:	211a      	movs	r1, #26
 800743e:	f7fc fbeb 	bl	8003c18 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8007442:	7f3b      	ldrb	r3, [r7, #28]
 8007444:	2b52      	cmp	r3, #82	; 0x52
 8007446:	d908      	bls.n	800745a <RNSSet+0x2aa>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,(uint8_t*)&(rns->param.param_buffer[6]),8);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007452:	2308      	movs	r3, #8
 8007454:	211b      	movs	r1, #27
 8007456:	f7fc fbdf 	bl	8003c18 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8007462:	bf00      	nop
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800746a:	2b02      	cmp	r3, #2
 800746c:	d0fa      	beq.n	8007464 <RNSSet+0x2b4>
	//UARTPrintString(&huart5,"1\r\n");
	rns->busy=1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007480:	b003      	add	sp, #12
 8007482:	4770      	bx	lr
 8007484:	2000abf4 	.word	0x2000abf4

08007488 <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	79fa      	ldrb	r2, [r7, #7]
 8007498:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f04f 0200 	mov.w	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	f04f 0200 	mov.w	r2, #0
 80074b0:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	615a      	str	r2, [r3, #20]

	//	RNSSendIns(rns);

	rns->busy=0;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->RNS_data.common_instruction = RNS_WAITING;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <RNSEnquire+0xc8>)
 80074cc:	2211      	movs	r2, #17
 80074ce:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	791a      	ldrb	r2, [r3, #4]
 80074d4:	4b1e      	ldr	r3, [pc, #120]	; (8007550 <RNSEnquire+0xc8>)
 80074d6:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6818      	ldr	r0, [r3, #0]
 80074dc:	2302      	movs	r3, #2
 80074de:	4a1c      	ldr	r2, [pc, #112]	; (8007550 <RNSEnquire+0xc8>)
 80074e0:	2117      	movs	r1, #23
 80074e2:	f7fc fb99 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0].data),8);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f103 0208 	add.w	r2, r3, #8
 80074f0:	2308      	movs	r3, #8
 80074f2:	2118      	movs	r1, #24
 80074f4:	f7fc fb90 	bl	8003c18 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2].data),8);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	f103 0210 	add.w	r2, r3, #16
 8007502:	2308      	movs	r3, #8
 8007504:	2119      	movs	r1, #25
 8007506:	f7fc fb87 	bl	8003c18 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING){
 800750a:	bf00      	nop
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007512:	2b02      	cmp	r3, #2
 8007514:	d0fa      	beq.n	800750c <RNSEnquire+0x84>
		//				} else{
		//					GPIOC_OUT->bit14=1;
		//				}
	}

	rns->busy=1;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->enq.enquiry = parameter;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	79fa      	ldrb	r2, [r7, #7]
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	64da      	str	r2, [r3, #76]	; 0x4c

	return 1;
 8007546:	2301      	movs	r3, #1
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	2000abf4 	.word	0x2000abf4

08007554 <ROS_Init>:

/*
 * Call this function in set() as initialization
 */
void ROS_Init(UART_HandleTypeDef* huartx)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	ROS_UART = huartx;
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <ROS_Init+0x2c>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
	path_num = 0;
 8007562:	4b08      	ldr	r3, [pc, #32]	; (8007584 <ROS_Init+0x30>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
	ros_counter = 0;
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <ROS_Init+0x34>)
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huartx, ROS_buff, 7);
 800756e:	2207      	movs	r2, #7
 8007570:	4906      	ldr	r1, [pc, #24]	; (800758c <ROS_Init+0x38>)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f013 f820 	bl	801a5b8 <HAL_UART_Receive_IT>
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20009eec 	.word	0x20009eec
 8007584:	20009cd0 	.word	0x20009cd0
 8007588:	200098cc 	.word	0x200098cc
 800758c:	20007e58 	.word	0x20007e58

08007590 <ROS_Write_Flash>:
/*
 *  Write All the PP_Points into Flash
 *  Including different path
 */
uint32_t ROS_Write_Flash(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
	uint32_t success = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	61fb      	str	r3, [r7, #28]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800759a:	f00e fbbd 	bl	8015d18 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800759e:	4b47      	ldr	r3, [pc, #284]	; (80076bc <ROS_Write_Flash+0x12c>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80075a4:	4b45      	ldr	r3, [pc, #276]	; (80076bc <ROS_Write_Flash+0x12c>)
 80075a6:	2202      	movs	r2, #2
 80075a8:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_8;
 80075aa:	4b44      	ldr	r3, [pc, #272]	; (80076bc <ROS_Write_Flash+0x12c>)
 80075ac:	2208      	movs	r2, #8
 80075ae:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 80075b0:	4b42      	ldr	r3, [pc, #264]	; (80076bc <ROS_Write_Flash+0x12c>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4840      	ldr	r0, [pc, #256]	; (80076bc <ROS_Write_Flash+0x12c>)
 80075bc:	f00e fd1a 	bl	8015ff4 <HAL_FLASHEx_Erase>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <ROS_Write_Flash+0x3e>
	{
		return HAL_FLASH_GetError ();
 80075c6:	f00e fbd9 	bl	8015d7c <HAL_FLASH_GetError>
 80075ca:	4603      	mov	r3, r0
 80075cc:	e072      	b.n	80076b4 <ROS_Write_Flash+0x124>
	}

	uint32_t address = SECTOR8;
 80075ce:	4b3c      	ldr	r3, [pc, #240]	; (80076c0 <ROS_Write_Flash+0x130>)
 80075d0:	61bb      	str	r3, [r7, #24]
 80075d2:	4b3c      	ldr	r3, [pc, #240]	; (80076c4 <ROS_Write_Flash+0x134>)
 80075d4:	681b      	ldr	r3, [r3, #0]
	uint32_t temp;

	memcpy(&temp, &path_num, 4);
 80075d6:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	69b9      	ldr	r1, [r7, #24]
 80075e2:	2002      	movs	r0, #2
 80075e4:	f00e fb44 	bl	8015c70 <HAL_FLASH_Program>
	address += 4;
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	3304      	adds	r3, #4
 80075ec:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < path_num; i++)
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e014      	b.n	800761e <ROS_Write_Flash+0x8e>
	{
		memcpy(&temp, &point_num[i], 4);
 80075f4:	4b34      	ldr	r3, [pc, #208]	; (80076c8 <ROS_Write_Flash+0x138>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	69b9      	ldr	r1, [r7, #24]
 800760c:	2002      	movs	r0, #2
 800760e:	f00e fb2f 	bl	8015c70 <HAL_FLASH_Program>
		address += 4;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	3304      	adds	r3, #4
 8007616:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < path_num; i++)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	4b29      	ldr	r3, [pc, #164]	; (80076c4 <ROS_Write_Flash+0x134>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	dbe5      	blt.n	80075f4 <ROS_Write_Flash+0x64>
	}

	for(int i = 0; i < path_num; i++) // Number of path
 8007628:	2300      	movs	r3, #0
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	e03a      	b.n	80076a4 <ROS_Write_Flash+0x114>
	{
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e02b      	b.n	800768c <ROS_Write_Flash+0xfc>
		{
			for(int k = 0; k < 7; k++)
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
 8007638:	e022      	b.n	8007680 <ROS_Write_Flash+0xf0>
			{
				memcpy(&temp, &PP_Points[i][j][k], 4);
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <ROS_Write_Flash+0x13c>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4413      	add	r3, r2
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	603b      	str	r3, [r7, #0]
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp) == HAL_OK)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	2002      	movs	r0, #2
 8007664:	f00e fb04 	bl	8015c70 <HAL_FLASH_Program>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <ROS_Write_Flash+0xe4>
				{
					success++;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	3301      	adds	r3, #1
 8007672:	61fb      	str	r3, [r7, #28]
				}
				address += 4;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3304      	adds	r3, #4
 8007678:	61bb      	str	r3, [r7, #24]
			for(int k = 0; k < 7; k++)
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3301      	adds	r3, #1
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b06      	cmp	r3, #6
 8007684:	ddd9      	ble.n	800763a <ROS_Write_Flash+0xaa>
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <ROS_Write_Flash+0x138>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	429a      	cmp	r2, r3
 800769c:	dbca      	blt.n	8007634 <ROS_Write_Flash+0xa4>
	for(int i = 0; i < path_num; i++) // Number of path
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3301      	adds	r3, #1
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <ROS_Write_Flash+0x134>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	dbbf      	blt.n	800762e <ROS_Write_Flash+0x9e>
			}
		}
	}
	HAL_FLASH_Lock();
 80076ae:	f00e fb55 	bl	8015d5c <HAL_FLASH_Lock>
	return success;
 80076b2:	69fb      	ldr	r3, [r7, #28]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3720      	adds	r7, #32
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	200008bc 	.word	0x200008bc
 80076c0:	08080004 	.word	0x08080004
 80076c4:	20009cd0 	.word	0x20009cd0
 80076c8:	20009754 	.word	0x20009754
 80076cc:	2000972c 	.word	0x2000972c

080076d0 <ROS_Handler>:

/*
 * Call this function in the USART Receive CallBack
 */
void ROS_Handler(void)
{
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b08f      	sub	sp, #60	; 0x3c
 80076d4:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
 80076d6:	4ba1      	ldr	r3, [pc, #644]	; (800795c <ROS_Handler+0x28c>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f200 8343 	bhi.w	8007d66 <ROS_Handler+0x696>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <ROS_Handler+0x18>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	080076f9 	.word	0x080076f9
 80076ec:	08007abd 	.word	0x08007abd
 80076f0:	08007b6b 	.word	0x08007b6b
 80076f4:	08007c63 	.word	0x08007c63
	{
	case 0:
		if(ROS_buff[0] == 0x01 && ROS_buff[1] == 0x02)
 80076f8:	4b99      	ldr	r3, [pc, #612]	; (8007960 <ROS_Handler+0x290>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	f040 81d3 	bne.w	8007aa8 <ROS_Handler+0x3d8>
 8007702:	4b97      	ldr	r3, [pc, #604]	; (8007960 <ROS_Handler+0x290>)
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b02      	cmp	r3, #2
 8007708:	f040 81ce 	bne.w	8007aa8 <ROS_Handler+0x3d8>
 800770c:	4b94      	ldr	r3, [pc, #592]	; (8007960 <ROS_Handler+0x290>)
 800770e:	789a      	ldrb	r2, [r3, #2]
		{
//			led2 = !led2;
			memcpy(&instruction, &ROS_buff[2], 1);
 8007710:	4b94      	ldr	r3, [pc, #592]	; (8007964 <ROS_Handler+0x294>)
 8007712:	701a      	strb	r2, [r3, #0]
			if(instruction == TEST)
 8007714:	4b93      	ldr	r3, [pc, #588]	; (8007964 <ROS_Handler+0x294>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d13e      	bne.n	800779a <ROS_Handler+0xca>
			{
				state = 1;
 800771c:	4b8f      	ldr	r3, [pc, #572]	; (800795c <ROS_Handler+0x28c>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	4b8f      	ldr	r3, [pc, #572]	; (8007960 <ROS_Handler+0x290>)
 8007724:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007728:	461a      	mov	r2, r3
				memcpy(&test_point_num, &ROS_buff[3], 4);
 800772a:	4b8f      	ldr	r3, [pc, #572]	; (8007968 <ROS_Handler+0x298>)
 800772c:	601a      	str	r2, [r3, #0]

				test_points = (float**)malloc(test_point_num * sizeof(float*));
 800772e:	4b8e      	ldr	r3, [pc, #568]	; (8007968 <ROS_Handler+0x298>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4618      	mov	r0, r3
 8007736:	f017 fae3 	bl	801ed00 <malloc>
 800773a:	4603      	mov	r3, r0
 800773c:	461a      	mov	r2, r3
 800773e:	4b8b      	ldr	r3, [pc, #556]	; (800796c <ROS_Handler+0x29c>)
 8007740:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < test_point_num; i++)
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	e00c      	b.n	8007762 <ROS_Handler+0x92>
					test_points[i] = (float*)malloc(7 * sizeof(float));
 8007748:	4b88      	ldr	r3, [pc, #544]	; (800796c <ROS_Handler+0x29c>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	18d4      	adds	r4, r2, r3
 8007752:	201c      	movs	r0, #28
 8007754:	f017 fad4 	bl	801ed00 <malloc>
 8007758:	4603      	mov	r3, r0
 800775a:	6023      	str	r3, [r4, #0]
				for(int i = 0; i < test_point_num; i++)
 800775c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775e:	3301      	adds	r3, #1
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
 8007762:	4b81      	ldr	r3, [pc, #516]	; (8007968 <ROS_Handler+0x298>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007768:	429a      	cmp	r2, r3
 800776a:	dbed      	blt.n	8007748 <ROS_Handler+0x78>

				HAL_UART_Transmit(ROS_UART, (uint8_t* )&test_point_num, 4, HAL_MAX_DELAY);
 800776c:	4b80      	ldr	r3, [pc, #512]	; (8007970 <ROS_Handler+0x2a0>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007774:	2204      	movs	r2, #4
 8007776:	497c      	ldr	r1, [pc, #496]	; (8007968 <ROS_Handler+0x298>)
 8007778:	f012 fe85 	bl	801a486 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 28 * test_point_num);
 800777c:	4b7c      	ldr	r3, [pc, #496]	; (8007970 <ROS_Handler+0x2a0>)
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	4b79      	ldr	r3, [pc, #484]	; (8007968 <ROS_Handler+0x298>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	461a      	mov	r2, r3
 8007788:	00d2      	lsls	r2, r2, #3
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	b29b      	uxth	r3, r3
 8007790:	461a      	mov	r2, r3
 8007792:	4973      	ldr	r1, [pc, #460]	; (8007960 <ROS_Handler+0x290>)
 8007794:	f012 ff10 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007798:	e18e      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == REGISTER)
 800779a:	4b72      	ldr	r3, [pc, #456]	; (8007964 <ROS_Handler+0x294>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d105      	bne.n	80077ae <ROS_Handler+0xde>
			{
				state = 0;
 80077a2:	4b6e      	ldr	r3, [pc, #440]	; (800795c <ROS_Handler+0x28c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
				ROS_Register();
 80077a8:	f000 fc7c 	bl	80080a4 <ROS_Register>
			if(instruction == TEST)
 80077ac:	e184      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == WRITE)
 80077ae:	4b6d      	ldr	r3, [pc, #436]	; (8007964 <ROS_Handler+0x294>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d14a      	bne.n	800784c <ROS_Handler+0x17c>
			{
				total_point_num = 0;
 80077b6:	4b6f      	ldr	r3, [pc, #444]	; (8007974 <ROS_Handler+0x2a4>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
				uint32_t write_success = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	607b      	str	r3, [r7, #4]
				write_success += ROS_Write_Flash();
 80077c0:	f7ff fee6 	bl	8007590 <ROS_Write_Flash>
 80077c4:	4602      	mov	r2, r0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	607b      	str	r3, [r7, #4]

				for(int i = 0; i < path_num; i++)
 80077cc:	2300      	movs	r3, #0
 80077ce:	633b      	str	r3, [r7, #48]	; 0x30
 80077d0:	e00d      	b.n	80077ee <ROS_Handler+0x11e>
				{
					total_point_num += point_num[i];
 80077d2:	4b69      	ldr	r3, [pc, #420]	; (8007978 <ROS_Handler+0x2a8>)
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b65      	ldr	r3, [pc, #404]	; (8007974 <ROS_Handler+0x2a4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4413      	add	r3, r2
 80077e4:	4a63      	ldr	r2, [pc, #396]	; (8007974 <ROS_Handler+0x2a4>)
 80077e6:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < path_num; i++)
 80077e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ea:	3301      	adds	r3, #1
 80077ec:	633b      	str	r3, [r7, #48]	; 0x30
 80077ee:	4b63      	ldr	r3, [pc, #396]	; (800797c <ROS_Handler+0x2ac>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f4:	429a      	cmp	r2, r3
 80077f6:	dbec      	blt.n	80077d2 <ROS_Handler+0x102>
				}

				if(write_success == total_point_num * 7)
 80077f8:	4b5e      	ldr	r3, [pc, #376]	; (8007974 <ROS_Handler+0x2a4>)
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	1a9a      	subs	r2, r3, r2
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d10b      	bne.n	8007820 <ROS_Handler+0x150>
				{
					ack = 0x21;
 8007808:	4b5d      	ldr	r3, [pc, #372]	; (8007980 <ROS_Handler+0x2b0>)
 800780a:	2221      	movs	r2, #33	; 0x21
 800780c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 800780e:	4b58      	ldr	r3, [pc, #352]	; (8007970 <ROS_Handler+0x2a0>)
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007816:	2201      	movs	r2, #1
 8007818:	4959      	ldr	r1, [pc, #356]	; (8007980 <ROS_Handler+0x2b0>)
 800781a:	f012 fe34 	bl	801a486 <HAL_UART_Transmit>
 800781e:	e00a      	b.n	8007836 <ROS_Handler+0x166>
				}
				else
				{
					ack = 0x22;
 8007820:	4b57      	ldr	r3, [pc, #348]	; (8007980 <ROS_Handler+0x2b0>)
 8007822:	2222      	movs	r2, #34	; 0x22
 8007824:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 8007826:	4b52      	ldr	r3, [pc, #328]	; (8007970 <ROS_Handler+0x2a0>)
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782e:	2201      	movs	r2, #1
 8007830:	4953      	ldr	r1, [pc, #332]	; (8007980 <ROS_Handler+0x2b0>)
 8007832:	f012 fe28 	bl	801a486 <HAL_UART_Transmit>
				}

				state = 0;
 8007836:	4b49      	ldr	r3, [pc, #292]	; (800795c <ROS_Handler+0x28c>)
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800783c:	4b4c      	ldr	r3, [pc, #304]	; (8007970 <ROS_Handler+0x2a0>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2207      	movs	r2, #7
 8007842:	4947      	ldr	r1, [pc, #284]	; (8007960 <ROS_Handler+0x290>)
 8007844:	4618      	mov	r0, r3
 8007846:	f012 feb7 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800784a:	e135      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE)
 800784c:	4b45      	ldr	r3, [pc, #276]	; (8007964 <ROS_Handler+0x294>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b05      	cmp	r3, #5
 8007852:	d10e      	bne.n	8007872 <ROS_Handler+0x1a2>
			{
				state = 0;
 8007854:	4b41      	ldr	r3, [pc, #260]	; (800795c <ROS_Handler+0x28c>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	4b41      	ldr	r3, [pc, #260]	; (8007960 <ROS_Handler+0x290>)
 800785c:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007860:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8007862:	4b48      	ldr	r3, [pc, #288]	; (8007984 <ROS_Handler+0x2b4>)
 8007864:	601a      	str	r2, [r3, #0]

				ROS_Delete(path_index);
 8007866:	4b47      	ldr	r3, [pc, #284]	; (8007984 <ROS_Handler+0x2b4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fd34 	bl	80082d8 <ROS_Delete>
			if(instruction == TEST)
 8007870:	e122      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == READ)
 8007872:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <ROS_Handler+0x294>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d144      	bne.n	8007904 <ROS_Handler+0x234>
 800787a:	4b39      	ldr	r3, [pc, #228]	; (8007960 <ROS_Handler+0x290>)
 800787c:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007880:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 8007882:	4b40      	ldr	r3, [pc, #256]	; (8007984 <ROS_Handler+0x2b4>)
 8007884:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < point_num[path_index - 1]; i++)
 8007886:	2300      	movs	r3, #0
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788a:	e023      	b.n	80078d4 <ROS_Handler+0x204>
				{
					for(int j = 0; j < 7; j++)
 800788c:	2300      	movs	r3, #0
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007890:	e01a      	b.n	80078c8 <ROS_Handler+0x1f8>
					{
						HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_index - 1][i][j], 4, HAL_MAX_DELAY);
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <ROS_Handler+0x2a0>)
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	4b3c      	ldr	r3, [pc, #240]	; (8007988 <ROS_Handler+0x2b8>)
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	4b3a      	ldr	r3, [pc, #232]	; (8007984 <ROS_Handler+0x2b4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078a2:	3b01      	subs	r3, #1
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	18d1      	adds	r1, r2, r3
 80078b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078bc:	2204      	movs	r2, #4
 80078be:	f012 fde2 	bl	801a486 <HAL_UART_Transmit>
					for(int j = 0; j < 7; j++)
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	3301      	adds	r3, #1
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2b06      	cmp	r3, #6
 80078cc:	dde1      	ble.n	8007892 <ROS_Handler+0x1c2>
				for(int i = 0; i < point_num[path_index - 1]; i++)
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	3301      	adds	r3, #1
 80078d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d4:	4b28      	ldr	r3, [pc, #160]	; (8007978 <ROS_Handler+0x2a8>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <ROS_Handler+0x2b4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	3b01      	subs	r3, #1
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ea:	429a      	cmp	r2, r3
 80078ec:	dbce      	blt.n	800788c <ROS_Handler+0x1bc>
					}
				}
				state = 0;
 80078ee:	4b1b      	ldr	r3, [pc, #108]	; (800795c <ROS_Handler+0x28c>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80078f4:	4b1e      	ldr	r3, [pc, #120]	; (8007970 <ROS_Handler+0x2a0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2207      	movs	r2, #7
 80078fa:	4919      	ldr	r1, [pc, #100]	; (8007960 <ROS_Handler+0x290>)
 80078fc:	4618      	mov	r0, r3
 80078fe:	f012 fe5b 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007902:	e0d9      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_ALL)
 8007904:	4b17      	ldr	r3, [pc, #92]	; (8007964 <ROS_Handler+0x294>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b07      	cmp	r3, #7
 800790a:	d105      	bne.n	8007918 <ROS_Handler+0x248>
			{
				state = 0;
 800790c:	4b13      	ldr	r3, [pc, #76]	; (800795c <ROS_Handler+0x28c>)
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
				ROS_DeleteAll();
 8007912:	f000 fdbb 	bl	800848c <ROS_DeleteAll>
			if(instruction == TEST)
 8007916:	e0cf      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == EDIT_PATH)
 8007918:	4b12      	ldr	r3, [pc, #72]	; (8007964 <ROS_Handler+0x294>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b03      	cmp	r3, #3
 800791e:	d105      	bne.n	800792c <ROS_Handler+0x25c>
			{
				state = 0;
 8007920:	4b0e      	ldr	r3, [pc, #56]	; (800795c <ROS_Handler+0x28c>)
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
				ROS_EditPath();
 8007926:	f000 fe0b 	bl	8008540 <ROS_EditPath>
			if(instruction == TEST)
 800792a:	e0c5      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == GET_COUNTER)
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <ROS_Handler+0x294>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b09      	cmp	r3, #9
 8007932:	d12d      	bne.n	8007990 <ROS_Handler+0x2c0>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&ros_counter, 4, HAL_MAX_DELAY);
 8007934:	4b0e      	ldr	r3, [pc, #56]	; (8007970 <ROS_Handler+0x2a0>)
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800793c:	2204      	movs	r2, #4
 800793e:	4913      	ldr	r1, [pc, #76]	; (800798c <ROS_Handler+0x2bc>)
 8007940:	f012 fda1 	bl	801a486 <HAL_UART_Transmit>

				state = 0;
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <ROS_Handler+0x28c>)
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800794a:	4b09      	ldr	r3, [pc, #36]	; (8007970 <ROS_Handler+0x2a0>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2207      	movs	r2, #7
 8007950:	4903      	ldr	r1, [pc, #12]	; (8007960 <ROS_Handler+0x290>)
 8007952:	4618      	mov	r0, r3
 8007954:	f012 fe30 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007958:	e0ae      	b.n	8007ab8 <ROS_Handler+0x3e8>
 800795a:	bf00      	nop
 800795c:	200008d0 	.word	0x200008d0
 8007960:	20007e58 	.word	0x20007e58
 8007964:	20009734 	.word	0x20009734
 8007968:	2000974c 	.word	0x2000974c
 800796c:	2000a270 	.word	0x2000a270
 8007970:	20009eec 	.word	0x20009eec
 8007974:	200098c8 	.word	0x200098c8
 8007978:	20009754 	.word	0x20009754
 800797c:	20009cd0 	.word	0x20009cd0
 8007980:	20007680 	.word	0x20007680
 8007984:	200076b4 	.word	0x200076b4
 8007988:	2000972c 	.word	0x2000972c
 800798c:	200098cc 	.word	0x200098cc
			}

			else if(instruction == EDIT_POINT)
 8007990:	4b92      	ldr	r3, [pc, #584]	; (8007bdc <ROS_Handler+0x50c>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b04      	cmp	r3, #4
 8007996:	d118      	bne.n	80079ca <ROS_Handler+0x2fa>
			{
				state = 2;
 8007998:	4b91      	ldr	r3, [pc, #580]	; (8007be0 <ROS_Handler+0x510>)
 800799a:	2202      	movs	r2, #2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	4b91      	ldr	r3, [pc, #580]	; (8007be4 <ROS_Handler+0x514>)
 80079a0:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80079a4:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 80079a6:	4b90      	ldr	r3, [pc, #576]	; (8007be8 <ROS_Handler+0x518>)
 80079a8:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 80079aa:	4b90      	ldr	r3, [pc, #576]	; (8007bec <ROS_Handler+0x51c>)
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079b2:	2204      	movs	r2, #4
 80079b4:	498c      	ldr	r1, [pc, #560]	; (8007be8 <ROS_Handler+0x518>)
 80079b6:	f012 fd66 	bl	801a486 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 32); // 7 Data + 1 Point Index
 80079ba:	4b8c      	ldr	r3, [pc, #560]	; (8007bec <ROS_Handler+0x51c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2220      	movs	r2, #32
 80079c0:	4988      	ldr	r1, [pc, #544]	; (8007be4 <ROS_Handler+0x514>)
 80079c2:	4618      	mov	r0, r3
 80079c4:	f012 fdf8 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80079c8:	e076      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_POINT)
 80079ca:	4b84      	ldr	r3, [pc, #528]	; (8007bdc <ROS_Handler+0x50c>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	2b06      	cmp	r3, #6
 80079d0:	d118      	bne.n	8007a04 <ROS_Handler+0x334>
			{
				state = 3;
 80079d2:	4b83      	ldr	r3, [pc, #524]	; (8007be0 <ROS_Handler+0x510>)
 80079d4:	2203      	movs	r2, #3
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	4b82      	ldr	r3, [pc, #520]	; (8007be4 <ROS_Handler+0x514>)
 80079da:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80079de:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 80079e0:	4b81      	ldr	r3, [pc, #516]	; (8007be8 <ROS_Handler+0x518>)
 80079e2:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 80079e4:	4b81      	ldr	r3, [pc, #516]	; (8007bec <ROS_Handler+0x51c>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ec:	2204      	movs	r2, #4
 80079ee:	497e      	ldr	r1, [pc, #504]	; (8007be8 <ROS_Handler+0x518>)
 80079f0:	f012 fd49 	bl	801a486 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 4);
 80079f4:	4b7d      	ldr	r3, [pc, #500]	; (8007bec <ROS_Handler+0x51c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2204      	movs	r2, #4
 80079fa:	497a      	ldr	r1, [pc, #488]	; (8007be4 <ROS_Handler+0x514>)
 80079fc:	4618      	mov	r0, r3
 80079fe:	f012 fddb 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007a02:	e059      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == TEST_RUN)
 8007a04:	4b75      	ldr	r3, [pc, #468]	; (8007bdc <ROS_Handler+0x50c>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b0a      	cmp	r3, #10
 8007a0a:	d113      	bne.n	8007a34 <ROS_Handler+0x364>
			{
				if(test_point_num)
 8007a0c:	4b78      	ldr	r3, [pc, #480]	; (8007bf0 <ROS_Handler+0x520>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <ROS_Handler+0x34e>
				{
					ros.ros_test_start = 1;
 8007a14:	4a77      	ldr	r2, [pc, #476]	; (8007bf4 <ROS_Handler+0x524>)
 8007a16:	7813      	ldrb	r3, [r2, #0]
 8007a18:	f043 0304 	orr.w	r3, r3, #4
 8007a1c:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 8007a1e:	4b70      	ldr	r3, [pc, #448]	; (8007be0 <ROS_Handler+0x510>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007a24:	4b71      	ldr	r3, [pc, #452]	; (8007bec <ROS_Handler+0x51c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2207      	movs	r2, #7
 8007a2a:	496e      	ldr	r1, [pc, #440]	; (8007be4 <ROS_Handler+0x514>)
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f012 fdc3 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007a32:	e041      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == RUN_PATH)
 8007a34:	4b69      	ldr	r3, [pc, #420]	; (8007bdc <ROS_Handler+0x50c>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b0b      	cmp	r3, #11
 8007a3a:	d121      	bne.n	8007a80 <ROS_Handler+0x3b0>
 8007a3c:	4b69      	ldr	r3, [pc, #420]	; (8007be4 <ROS_Handler+0x514>)
 8007a3e:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007a42:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 8007a44:	4b68      	ldr	r3, [pc, #416]	; (8007be8 <ROS_Handler+0x518>)
 8007a46:	601a      	str	r2, [r3, #0]
				if(point_num[path_index - 1])
 8007a48:	4b6b      	ldr	r3, [pc, #428]	; (8007bf8 <ROS_Handler+0x528>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b66      	ldr	r3, [pc, #408]	; (8007be8 <ROS_Handler+0x518>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a54:	3b01      	subs	r3, #1
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d004      	beq.n	8007a6a <ROS_Handler+0x39a>
				{
					ros.ros_path_start = 1;
 8007a60:	4a64      	ldr	r2, [pc, #400]	; (8007bf4 <ROS_Handler+0x524>)
 8007a62:	7813      	ldrb	r3, [r2, #0]
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 8007a6a:	4b5d      	ldr	r3, [pc, #372]	; (8007be0 <ROS_Handler+0x510>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007a70:	4b5e      	ldr	r3, [pc, #376]	; (8007bec <ROS_Handler+0x51c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2207      	movs	r2, #7
 8007a76:	495b      	ldr	r1, [pc, #364]	; (8007be4 <ROS_Handler+0x514>)
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f012 fd9d 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007a7e:	e01b      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}

			else if(instruction == STOP_RUN)
 8007a80:	4b56      	ldr	r3, [pc, #344]	; (8007bdc <ROS_Handler+0x50c>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d117      	bne.n	8007ab8 <ROS_Handler+0x3e8>
			{
				ros.ros_stop = 1;
 8007a88:	4a5a      	ldr	r2, [pc, #360]	; (8007bf4 <ROS_Handler+0x524>)
 8007a8a:	7813      	ldrb	r3, [r2, #0]
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	7013      	strb	r3, [r2, #0]
				state = 0;
 8007a92:	4b53      	ldr	r3, [pc, #332]	; (8007be0 <ROS_Handler+0x510>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007a98:	4b54      	ldr	r3, [pc, #336]	; (8007bec <ROS_Handler+0x51c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	4951      	ldr	r1, [pc, #324]	; (8007be4 <ROS_Handler+0x514>)
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f012 fd89 	bl	801a5b8 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007aa6:	e007      	b.n	8007ab8 <ROS_Handler+0x3e8>
			}
		}

		else
		{
			HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007aa8:	4b50      	ldr	r3, [pc, #320]	; (8007bec <ROS_Handler+0x51c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2207      	movs	r2, #7
 8007aae:	494d      	ldr	r1, [pc, #308]	; (8007be4 <ROS_Handler+0x514>)
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f012 fd81 	bl	801a5b8 <HAL_UART_Receive_IT>
		}

		break;
 8007ab6:	e156      	b.n	8007d66 <ROS_Handler+0x696>
			if(instruction == TEST)
 8007ab8:	bf00      	nop
		break;
 8007aba:	e154      	b.n	8007d66 <ROS_Handler+0x696>

	case 1:
		for(int i = 0; i < test_point_num; i++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	e01f      	b.n	8007b02 <ROS_Handler+0x432>
		{
			for(int j = 0; j < 7; j++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	623b      	str	r3, [r7, #32]
 8007ac6:	e016      	b.n	8007af6 <ROS_Handler+0x426>
			{
				memcpy(&test_points[i][j], &ROS_buff[j * 4 + i * 28], 4);
 8007ac8:	4b4c      	ldr	r3, [pc, #304]	; (8007bfc <ROS_Handler+0x52c>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	18d1      	adds	r1, r2, r3
 8007ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007adc:	4613      	mov	r3, r2
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	1a9a      	subs	r2, r3, r2
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4a3e      	ldr	r2, [pc, #248]	; (8007be4 <ROS_Handler+0x514>)
 8007aea:	4413      	add	r3, r2
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	600b      	str	r3, [r1, #0]
			for(int j = 0; j < 7; j++)
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	3301      	adds	r3, #1
 8007af4:	623b      	str	r3, [r7, #32]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	2b06      	cmp	r3, #6
 8007afa:	dde5      	ble.n	8007ac8 <ROS_Handler+0x3f8>
		for(int i = 0; i < test_point_num; i++)
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	3301      	adds	r3, #1
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
 8007b02:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <ROS_Handler+0x520>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	dbda      	blt.n	8007ac2 <ROS_Handler+0x3f2>
			}
		}

		for(int i = 0; i < test_point_num; i++)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	e01b      	b.n	8007b4a <ROS_Handler+0x47a>
		{
			for(int j = 0; j < 7; j++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	e012      	b.n	8007b3e <ROS_Handler+0x46e>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&test_points[i][j], 4, HAL_MAX_DELAY);
 8007b18:	4b34      	ldr	r3, [pc, #208]	; (8007bec <ROS_Handler+0x51c>)
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	4b37      	ldr	r3, [pc, #220]	; (8007bfc <ROS_Handler+0x52c>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	18d1      	adds	r1, r2, r3
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b32:	2204      	movs	r2, #4
 8007b34:	f012 fca7 	bl	801a486 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b06      	cmp	r3, #6
 8007b42:	dde9      	ble.n	8007b18 <ROS_Handler+0x448>
		for(int i = 0; i < test_point_num; i++)
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	3301      	adds	r3, #1
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	4b29      	ldr	r3, [pc, #164]	; (8007bf0 <ROS_Handler+0x520>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	dbde      	blt.n	8007b12 <ROS_Handler+0x442>
			}
		}
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007b54:	4b25      	ldr	r3, [pc, #148]	; (8007bec <ROS_Handler+0x51c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4922      	ldr	r1, [pc, #136]	; (8007be4 <ROS_Handler+0x514>)
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f012 fd2b 	bl	801a5b8 <HAL_UART_Receive_IT>
		state = 0;
 8007b62:	4b1f      	ldr	r3, [pc, #124]	; (8007be0 <ROS_Handler+0x510>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
		break;
 8007b68:	e0fd      	b.n	8007d66 <ROS_Handler+0x696>

	case 2:
		point_buf = (float*)malloc(7 * sizeof(float));
 8007b6a:	201c      	movs	r0, #28
 8007b6c:	f017 f8c8 	bl	801ed00 <malloc>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	4b22      	ldr	r3, [pc, #136]	; (8007c00 <ROS_Handler+0x530>)
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <ROS_Handler+0x514>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
		memcpy(&point_index, &ROS_buff[0], 4);
 8007b7e:	4b21      	ldr	r3, [pc, #132]	; (8007c04 <ROS_Handler+0x534>)
 8007b80:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 7; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e00e      	b.n	8007ba6 <ROS_Handler+0x4d6>
		{
			memcpy(&point_buf[i], &ROS_buff[4 + i * 4], 4);
 8007b88:	4b1d      	ldr	r3, [pc, #116]	; (8007c00 <ROS_Handler+0x530>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	3201      	adds	r2, #1
 8007b96:	0092      	lsls	r2, r2, #2
 8007b98:	4912      	ldr	r1, [pc, #72]	; (8007be4 <ROS_Handler+0x514>)
 8007b9a:	440a      	add	r2, r1
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b06      	cmp	r3, #6
 8007baa:	dded      	ble.n	8007b88 <ROS_Handler+0x4b8>
		}

		for(int i = 0; i < 7; i++)
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	e00e      	b.n	8007bd0 <ROS_Handler+0x500>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&point_buf[i], 4, HAL_MAX_DELAY);
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	; (8007bec <ROS_Handler+0x51c>)
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <ROS_Handler+0x530>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	18d1      	adds	r1, r2, r3
 8007bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	f012 fc5e 	bl	801a486 <HAL_UART_Transmit>
		for(int i = 0; i < 7; i++)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b06      	cmp	r3, #6
 8007bd4:	dded      	ble.n	8007bb2 <ROS_Handler+0x4e2>
		}

		for(int i = 0; i < 7; i++)
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	e034      	b.n	8007c46 <ROS_Handler+0x576>
 8007bdc:	20009734 	.word	0x20009734
 8007be0:	200008d0 	.word	0x200008d0
 8007be4:	20007e58 	.word	0x20007e58
 8007be8:	200076b4 	.word	0x200076b4
 8007bec:	20009eec 	.word	0x20009eec
 8007bf0:	2000974c 	.word	0x2000974c
 8007bf4:	2000a6f8 	.word	0x2000a6f8
 8007bf8:	20009754 	.word	0x20009754
 8007bfc:	2000a270 	.word	0x2000a270
 8007c00:	2000973c 	.word	0x2000973c
 8007c04:	20009bc0 	.word	0x20009bc0
		{
			PP_Points[path_index - 1][point_index - 1][i] = point_buf[i];
 8007c08:	4b59      	ldr	r3, [pc, #356]	; (8007d70 <ROS_Handler+0x6a0>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	441a      	add	r2, r3
 8007c12:	4b58      	ldr	r3, [pc, #352]	; (8007d74 <ROS_Handler+0x6a4>)
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	4b58      	ldr	r3, [pc, #352]	; (8007d78 <ROS_Handler+0x6a8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	6819      	ldr	r1, [r3, #0]
 8007c26:	4b55      	ldr	r3, [pc, #340]	; (8007d7c <ROS_Handler+0x6ac>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b06      	cmp	r3, #6
 8007c4a:	dddd      	ble.n	8007c08 <ROS_Handler+0x538>
		}

		state = 0;
 8007c4c:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <ROS_Handler+0x6b0>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007c52:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <ROS_Handler+0x6b4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2207      	movs	r2, #7
 8007c58:	494b      	ldr	r1, [pc, #300]	; (8007d88 <ROS_Handler+0x6b8>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f012 fcac 	bl	801a5b8 <HAL_UART_Receive_IT>
		break;
 8007c60:	e081      	b.n	8007d66 <ROS_Handler+0x696>
 8007c62:	4b49      	ldr	r3, [pc, #292]	; (8007d88 <ROS_Handler+0x6b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3

	case 3:
		memcpy(&point_index, &ROS_buff, 4);
 8007c68:	4b44      	ldr	r3, [pc, #272]	; (8007d7c <ROS_Handler+0x6ac>)
 8007c6a:	601a      	str	r2, [r3, #0]

		if(point_num[path_index - 1] == 1)
 8007c6c:	4b47      	ldr	r3, [pc, #284]	; (8007d8c <ROS_Handler+0x6bc>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	4b41      	ldr	r3, [pc, #260]	; (8007d78 <ROS_Handler+0x6a8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d105      	bne.n	8007c90 <ROS_Handler+0x5c0>
		{
			ROS_Delete(path_index);
 8007c84:	4b3c      	ldr	r3, [pc, #240]	; (8007d78 <ROS_Handler+0x6a8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fb25 	bl	80082d8 <ROS_Delete>
 8007c8e:	e05f      	b.n	8007d50 <ROS_Handler+0x680>
		}
		else
		{
			point_num[path_index - 1]--;
 8007c90:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <ROS_Handler+0x6bc>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b38      	ldr	r3, [pc, #224]	; (8007d78 <ROS_Handler+0x6a8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	3a01      	subs	r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]

			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 8007ca8:	4b34      	ldr	r3, [pc, #208]	; (8007d7c <ROS_Handler+0x6ac>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	60bb      	str	r3, [r7, #8]
 8007cb0:	e01f      	b.n	8007cf2 <ROS_Handler+0x622>
			{
				PP_Points[path_index - 1][i] = PP_Points[path_index - 1][i + 1];
 8007cb2:	4b30      	ldr	r3, [pc, #192]	; (8007d74 <ROS_Handler+0x6a4>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b30      	ldr	r3, [pc, #192]	; (8007d78 <ROS_Handler+0x6a8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <ROS_Handler+0x6a4>)
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <ROS_Handler+0x6a8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	6819      	ldr	r1, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	601a      	str	r2, [r3, #0]
			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60bb      	str	r3, [r7, #8]
 8007cf2:	4b26      	ldr	r3, [pc, #152]	; (8007d8c <ROS_Handler+0x6bc>)
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <ROS_Handler+0x6a8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	dbd2      	blt.n	8007cb2 <ROS_Handler+0x5e2>
			}

			PP_Points[path_index - 1] = (float**)realloc(PP_Points[path_index - 1], point_num[path_index - 1] * sizeof(float*));
 8007d0c:	4b19      	ldr	r3, [pc, #100]	; (8007d74 <ROS_Handler+0x6a4>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <ROS_Handler+0x6a8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	4b1a      	ldr	r3, [pc, #104]	; (8007d8c <ROS_Handler+0x6bc>)
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <ROS_Handler+0x6a8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	0099      	lsls	r1, r3, #2
 8007d36:	4b0f      	ldr	r3, [pc, #60]	; (8007d74 <ROS_Handler+0x6a4>)
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <ROS_Handler+0x6a8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d42:	3b01      	subs	r3, #1
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	18d4      	adds	r4, r2, r3
 8007d48:	f017 ff24 	bl	801fb94 <realloc>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	6023      	str	r3, [r4, #0]
		}

		state = 0;
 8007d50:	4b0b      	ldr	r3, [pc, #44]	; (8007d80 <ROS_Handler+0x6b0>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007d56:	4b0b      	ldr	r3, [pc, #44]	; (8007d84 <ROS_Handler+0x6b4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2207      	movs	r2, #7
 8007d5c:	490a      	ldr	r1, [pc, #40]	; (8007d88 <ROS_Handler+0x6b8>)
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f012 fc2a 	bl	801a5b8 <HAL_UART_Receive_IT>
		break;
 8007d64:	bf00      	nop
	}

}
 8007d66:	bf00      	nop
 8007d68:	373c      	adds	r7, #60	; 0x3c
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd90      	pop	{r4, r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000973c 	.word	0x2000973c
 8007d74:	2000972c 	.word	0x2000972c
 8007d78:	200076b4 	.word	0x200076b4
 8007d7c:	20009bc0 	.word	0x20009bc0
 8007d80:	200008d0 	.word	0x200008d0
 8007d84:	20009eec 	.word	0x20009eec
 8007d88:	20007e58 	.word	0x20007e58
 8007d8c:	20009754 	.word	0x20009754

08007d90 <ROS_Read_Flash>:

/*
 * Call this function in set() to rewrite PP_Points with value stored in Flash
 */
void ROS_Read_Flash(void)
{
 8007d90:	b590      	push	{r4, r7, lr}
 8007d92:	b091      	sub	sp, #68	; 0x44
 8007d94:	af02      	add	r7, sp, #8
	// Enabling checking of FLASH value using usart5 by pressing reset button
	uint32_t address = SECTOR8;
 8007d96:	4b7d      	ldr	r3, [pc, #500]	; (8007f8c <ROS_Read_Flash+0x1fc>)
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&path_num, (__IO uint32_t *)address, 4);
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007da2:	601a      	str	r2, [r3, #0]
	address += 4;
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	3304      	adds	r3, #4
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34

	int n = 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
	if(path_num)
 8007dae:	4b78      	ldr	r3, [pc, #480]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 814e 	beq.w	8008054 <ROS_Read_Flash+0x2c4>
	{
		sprintf((char*)ROS_buff, "path_num is %d\n\n", path_num);
 8007db8:	4b75      	ldr	r3, [pc, #468]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4975      	ldr	r1, [pc, #468]	; (8007f94 <ROS_Read_Flash+0x204>)
 8007dc0:	4875      	ldr	r0, [pc, #468]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007dc2:	f017 ff9d 	bl	801fd00 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 8007dc6:	4874      	ldr	r0, [pc, #464]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007dc8:	f7f8 fa02 	bl	80001d0 <strlen>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dd4:	4970      	ldr	r1, [pc, #448]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007dd6:	4871      	ldr	r0, [pc, #452]	; (8007f9c <ROS_Read_Flash+0x20c>)
 8007dd8:	f012 fb55 	bl	801a486 <HAL_UART_Transmit>

		PP_Points = (float***)malloc(path_num * sizeof(float**));
 8007ddc:	4b6c      	ldr	r3, [pc, #432]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f016 ff8c 	bl	801ed00 <malloc>
 8007de8:	4603      	mov	r3, r0
 8007dea:	461a      	mov	r2, r3
 8007dec:	4b6c      	ldr	r3, [pc, #432]	; (8007fa0 <ROS_Read_Flash+0x210>)
 8007dee:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 8007df0:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f016 ff82 	bl	801ed00 <malloc>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4b68      	ldr	r3, [pc, #416]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007e02:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < path_num; i++)
 8007e04:	2300      	movs	r3, #0
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e08:	e00d      	b.n	8007e26 <ROS_Read_Flash+0x96>
		{
			memcpy(&point_num[i], (__IO uint32_t *)address, 4);
 8007e0a:	4b66      	ldr	r3, [pc, #408]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	601a      	str	r2, [r3, #0]
			address += 4;
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i = 0; i < path_num; i++)
 8007e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e22:	3301      	adds	r3, #1
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e26:	4b5a      	ldr	r3, [pc, #360]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	dbec      	blt.n	8007e0a <ROS_Read_Flash+0x7a>
		}

		for(int i = 0; i < path_num; i++)
 8007e30:	2300      	movs	r3, #0
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e34:	e01a      	b.n	8007e6c <ROS_Read_Flash+0xdc>
		{
			sprintf((char*)ROS_buff, "Point num for path %d is %d\n", i + 1, point_num[i]);
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	1c59      	adds	r1, r3, #1
 8007e3a:	4b5a      	ldr	r3, [pc, #360]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	460a      	mov	r2, r1
 8007e48:	4957      	ldr	r1, [pc, #348]	; (8007fa8 <ROS_Read_Flash+0x218>)
 8007e4a:	4853      	ldr	r0, [pc, #332]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007e4c:	f017 ff58 	bl	801fd00 <siprintf>
			HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 8007e50:	4851      	ldr	r0, [pc, #324]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007e52:	f7f8 f9bd 	bl	80001d0 <strlen>
 8007e56:	4603      	mov	r3, r0
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e5e:	494e      	ldr	r1, [pc, #312]	; (8007f98 <ROS_Read_Flash+0x208>)
 8007e60:	484e      	ldr	r0, [pc, #312]	; (8007f9c <ROS_Read_Flash+0x20c>)
 8007e62:	f012 fb10 	bl	801a486 <HAL_UART_Transmit>
		for(int i = 0; i < path_num; i++)
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	3301      	adds	r3, #1
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e6c:	4b48      	ldr	r3, [pc, #288]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e72:	429a      	cmp	r2, r3
 8007e74:	dbdf      	blt.n	8007e36 <ROS_Read_Flash+0xa6>
		}
		HAL_UART_Transmit(&huart5, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	494b      	ldr	r1, [pc, #300]	; (8007fac <ROS_Read_Flash+0x21c>)
 8007e7e:	4847      	ldr	r0, [pc, #284]	; (8007f9c <ROS_Read_Flash+0x20c>)
 8007e80:	f012 fb01 	bl	801a486 <HAL_UART_Transmit>

		for(int i = 0; i < path_num; i++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	e013      	b.n	8007eb2 <ROS_Read_Flash+0x122>
		{
			PP_Points[i] = (float**)malloc(point_num[i] * sizeof(float*));
 8007e8a:	4b46      	ldr	r3, [pc, #280]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	0099      	lsls	r1, r3, #2
 8007e98:	4b41      	ldr	r3, [pc, #260]	; (8007fa0 <ROS_Read_Flash+0x210>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	18d4      	adds	r4, r2, r3
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	f016 ff2c 	bl	801ed00 <malloc>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < path_num; i++)
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb2:	4b37      	ldr	r3, [pc, #220]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	dbe6      	blt.n	8007e8a <ROS_Read_Flash+0xfa>
		}

		for(int i = 0; i < path_num; i++)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	623b      	str	r3, [r7, #32]
 8007ec0:	e01f      	b.n	8007f02 <ROS_Read_Flash+0x172>
		{
			for(int j = 0; j < point_num[i]; j++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
 8007ec6:	e010      	b.n	8007eea <ROS_Read_Flash+0x15a>
			{
				PP_Points[i][j] = (float*)malloc(7 * sizeof(float));
 8007ec8:	4b35      	ldr	r3, [pc, #212]	; (8007fa0 <ROS_Read_Flash+0x210>)
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	18d4      	adds	r4, r2, r3
 8007eda:	201c      	movs	r0, #28
 8007edc:	f016 ff10 	bl	801ed00 <malloc>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[i]; j++)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69fa      	ldr	r2, [r7, #28]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	dbe5      	blt.n	8007ec8 <ROS_Read_Flash+0x138>
		for(int i = 0; i < path_num; i++)
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	3301      	adds	r3, #1
 8007f00:	623b      	str	r3, [r7, #32]
 8007f02:	4b23      	ldr	r3, [pc, #140]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a3a      	ldr	r2, [r7, #32]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	dbda      	blt.n	8007ec2 <ROS_Read_Flash+0x132>
			}
		}

		for(int i = 0; i < path_num; i++)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e02d      	b.n	8007f6e <ROS_Read_Flash+0x1de>
		{
			for(int j = 0; j < point_num[i]; j++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e01e      	b.n	8007f56 <ROS_Read_Flash+0x1c6>
			{
				for(int k = 0; k < 7; k++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e015      	b.n	8007f4a <ROS_Read_Flash+0x1ba>
				{
					memcpy(&PP_Points[i][j][k], (__IO uint32_t *)address, 4);
 8007f1e:	4b20      	ldr	r3, [pc, #128]	; (8007fa0 <ROS_Read_Flash+0x210>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	601a      	str	r2, [r3, #0]
					address += 4;
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	3304      	adds	r3, #4
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
				for(int k = 0; k < 7; k++)
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	3301      	adds	r3, #1
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b06      	cmp	r3, #6
 8007f4e:	dde6      	ble.n	8007f1e <ROS_Read_Flash+0x18e>
			for(int j = 0; j < point_num[i]; j++)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3301      	adds	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <ROS_Read_Flash+0x214>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	dbd7      	blt.n	8007f18 <ROS_Read_Flash+0x188>
		for(int i = 0; i < path_num; i++)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <ROS_Read_Flash+0x200>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	dbcc      	blt.n	8007f12 <ROS_Read_Flash+0x182>
				}
			}
		}

		for(int i = 0; i < path_num; i++)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
 8007f7c:	e064      	b.n	8008048 <ROS_Read_Flash+0x2b8>
		{
			for(int j = 0; j < point_num[i]; j++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60bb      	str	r3, [r7, #8]
 8007f82:	e04e      	b.n	8008022 <ROS_Read_Flash+0x292>
			{
				for(int k = 0; k < 7; k++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	607b      	str	r3, [r7, #4]
 8007f88:	e03b      	b.n	8008002 <ROS_Read_Flash+0x272>
 8007f8a:	bf00      	nop
 8007f8c:	08080004 	.word	0x08080004
 8007f90:	20009cd0 	.word	0x20009cd0
 8007f94:	080241f4 	.word	0x080241f4
 8007f98:	20007e58 	.word	0x20007e58
 8007f9c:	200068c4 	.word	0x200068c4
 8007fa0:	2000972c 	.word	0x2000972c
 8007fa4:	20009754 	.word	0x20009754
 8007fa8:	08024208 	.word	0x08024208
 8007fac:	08024228 	.word	0x08024228
				{
					sprintf(data, "\npoint%d[%d] = %.3f;", n, k, PP_Points[i][j][k]);
 8007fb0:	4b32      	ldr	r3, [pc, #200]	; (800807c <ROS_Read_Flash+0x2ec>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7f8 fabb 	bl	8000548 <__aeabi_f2d>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9cd 2300 	strd	r2, r3, [sp]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fde:	4928      	ldr	r1, [pc, #160]	; (8008080 <ROS_Read_Flash+0x2f0>)
 8007fe0:	4828      	ldr	r0, [pc, #160]	; (8008084 <ROS_Read_Flash+0x2f4>)
 8007fe2:	f017 fe8d 	bl	801fd00 <siprintf>
					HAL_UART_Transmit(&huart5, data, strlen(data), HAL_MAX_DELAY);
 8007fe6:	4827      	ldr	r0, [pc, #156]	; (8008084 <ROS_Read_Flash+0x2f4>)
 8007fe8:	f7f8 f8f2 	bl	80001d0 <strlen>
 8007fec:	4603      	mov	r3, r0
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ff4:	4923      	ldr	r1, [pc, #140]	; (8008084 <ROS_Read_Flash+0x2f4>)
 8007ff6:	4824      	ldr	r0, [pc, #144]	; (8008088 <ROS_Read_Flash+0x2f8>)
 8007ff8:	f012 fa45 	bl	801a486 <HAL_UART_Transmit>
				for(int k = 0; k < 7; k++)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3301      	adds	r3, #1
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b06      	cmp	r3, #6
 8008006:	ddd3      	ble.n	8007fb0 <ROS_Read_Flash+0x220>
				}
				HAL_UART_Transmit(&huart5, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8008008:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800800c:	2201      	movs	r2, #1
 800800e:	491f      	ldr	r1, [pc, #124]	; (800808c <ROS_Read_Flash+0x2fc>)
 8008010:	481d      	ldr	r0, [pc, #116]	; (8008088 <ROS_Read_Flash+0x2f8>)
 8008012:	f012 fa38 	bl	801a486 <HAL_UART_Transmit>
				n ++;
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	3301      	adds	r3, #1
 800801a:	633b      	str	r3, [r7, #48]	; 0x30
			for(int j = 0; j < point_num[i]; j++)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	3301      	adds	r3, #1
 8008020:	60bb      	str	r3, [r7, #8]
 8008022:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <ROS_Read_Flash+0x300>)
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	429a      	cmp	r2, r3
 8008032:	dba7      	blt.n	8007f84 <ROS_Read_Flash+0x1f4>
			}
			HAL_UART_Transmit(&huart5, (uint8_t*)"//next path", 1, HAL_MAX_DELAY);
 8008034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008038:	2201      	movs	r2, #1
 800803a:	4916      	ldr	r1, [pc, #88]	; (8008094 <ROS_Read_Flash+0x304>)
 800803c:	4812      	ldr	r0, [pc, #72]	; (8008088 <ROS_Read_Flash+0x2f8>)
 800803e:	f012 fa22 	bl	801a486 <HAL_UART_Transmit>
		for(int i = 0; i < path_num; i++)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	3301      	adds	r3, #1
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <ROS_Read_Flash+0x308>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	429a      	cmp	r2, r3
 8008050:	db95      	blt.n	8007f7e <ROS_Read_Flash+0x1ee>
	else
	{
		sprintf((char*)ROS_buff, "No memory in flash");
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
	}
}
 8008052:	e00e      	b.n	8008072 <ROS_Read_Flash+0x2e2>
		sprintf((char*)ROS_buff, "No memory in flash");
 8008054:	4911      	ldr	r1, [pc, #68]	; (800809c <ROS_Read_Flash+0x30c>)
 8008056:	4812      	ldr	r0, [pc, #72]	; (80080a0 <ROS_Read_Flash+0x310>)
 8008058:	f017 fe52 	bl	801fd00 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 800805c:	4810      	ldr	r0, [pc, #64]	; (80080a0 <ROS_Read_Flash+0x310>)
 800805e:	f7f8 f8b7 	bl	80001d0 <strlen>
 8008062:	4603      	mov	r3, r0
 8008064:	b29a      	uxth	r2, r3
 8008066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800806a:	490d      	ldr	r1, [pc, #52]	; (80080a0 <ROS_Read_Flash+0x310>)
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <ROS_Read_Flash+0x2f8>)
 800806e:	f012 fa0a 	bl	801a486 <HAL_UART_Transmit>
}
 8008072:	bf00      	nop
 8008074:	373c      	adds	r7, #60	; 0x3c
 8008076:	46bd      	mov	sp, r7
 8008078:	bd90      	pop	{r4, r7, pc}
 800807a:	bf00      	nop
 800807c:	2000972c 	.word	0x2000972c
 8008080:	0802422c 	.word	0x0802422c
 8008084:	20006a8c 	.word	0x20006a8c
 8008088:	200068c4 	.word	0x200068c4
 800808c:	08024228 	.word	0x08024228
 8008090:	20009754 	.word	0x20009754
 8008094:	08024244 	.word	0x08024244
 8008098:	20009cd0 	.word	0x20009cd0
 800809c:	08024250 	.word	0x08024250
 80080a0:	20007e58 	.word	0x20007e58

080080a4 <ROS_Register>:
/*
 * Once the testing path is satisfied, calling this function will register the path in PP_Points
 * Only registered path can be run through RNSPPstart(PP_Points[counter])
 */
void ROS_Register(void)
{
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
	path_num++;
 80080aa:	4b84      	ldr	r3, [pc, #528]	; (80082bc <ROS_Register+0x218>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	4a82      	ldr	r2, [pc, #520]	; (80082bc <ROS_Register+0x218>)
 80080b2:	6013      	str	r3, [r2, #0]
	if(path_num > 1)
 80080b4:	4b81      	ldr	r3, [pc, #516]	; (80082bc <ROS_Register+0x218>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	dd46      	ble.n	800814a <ROS_Register+0xa6>
	{
		PP_Points = (float***)realloc(PP_Points, path_num * sizeof(float**));
 80080bc:	4b80      	ldr	r3, [pc, #512]	; (80082c0 <ROS_Register+0x21c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a7e      	ldr	r2, [pc, #504]	; (80082bc <ROS_Register+0x218>)
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	0092      	lsls	r2, r2, #2
 80080c6:	4611      	mov	r1, r2
 80080c8:	4618      	mov	r0, r3
 80080ca:	f017 fd63 	bl	801fb94 <realloc>
 80080ce:	4603      	mov	r3, r0
 80080d0:	4a7b      	ldr	r2, [pc, #492]	; (80082c0 <ROS_Register+0x21c>)
 80080d2:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 80080d4:	4b7b      	ldr	r3, [pc, #492]	; (80082c4 <ROS_Register+0x220>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a78      	ldr	r2, [pc, #480]	; (80082bc <ROS_Register+0x218>)
 80080da:	6812      	ldr	r2, [r2, #0]
 80080dc:	0092      	lsls	r2, r2, #2
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f017 fd57 	bl	801fb94 <realloc>
 80080e6:	4603      	mov	r3, r0
 80080e8:	4a76      	ldr	r2, [pc, #472]	; (80082c4 <ROS_Register+0x220>)
 80080ea:	6013      	str	r3, [r2, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 80080ec:	4b76      	ldr	r3, [pc, #472]	; (80082c8 <ROS_Register+0x224>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	0099      	lsls	r1, r3, #2
 80080f2:	4b73      	ldr	r3, [pc, #460]	; (80082c0 <ROS_Register+0x21c>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b71      	ldr	r3, [pc, #452]	; (80082bc <ROS_Register+0x218>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80080fe:	3b01      	subs	r3, #1
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	18d4      	adds	r4, r2, r3
 8008104:	4608      	mov	r0, r1
 8008106:	f016 fdfb 	bl	801ed00 <malloc>
 800810a:	4603      	mov	r3, r0
 800810c:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	e014      	b.n	800813e <ROS_Register+0x9a>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 8008114:	4b6a      	ldr	r3, [pc, #424]	; (80082c0 <ROS_Register+0x21c>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	4b68      	ldr	r3, [pc, #416]	; (80082bc <ROS_Register+0x218>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008120:	3b01      	subs	r3, #1
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	18d4      	adds	r4, r2, r3
 800812e:	201c      	movs	r0, #28
 8008130:	f016 fde6 	bl	801ed00 <malloc>
 8008134:	4603      	mov	r3, r0
 8008136:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3301      	adds	r3, #1
 800813c:	617b      	str	r3, [r7, #20]
 800813e:	4b62      	ldr	r3, [pc, #392]	; (80082c8 <ROS_Register+0x224>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	429a      	cmp	r2, r3
 8008146:	dbe5      	blt.n	8008114 <ROS_Register+0x70>
 8008148:	e045      	b.n	80081d6 <ROS_Register+0x132>
		}
	}
	else if(path_num == 1)
 800814a:	4b5c      	ldr	r3, [pc, #368]	; (80082bc <ROS_Register+0x218>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d141      	bne.n	80081d6 <ROS_Register+0x132>
	{
		PP_Points = (float***)malloc(path_num * sizeof(float**));
 8008152:	4b5a      	ldr	r3, [pc, #360]	; (80082bc <ROS_Register+0x218>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4618      	mov	r0, r3
 800815a:	f016 fdd1 	bl	801ed00 <malloc>
 800815e:	4603      	mov	r3, r0
 8008160:	461a      	mov	r2, r3
 8008162:	4b57      	ldr	r3, [pc, #348]	; (80082c0 <ROS_Register+0x21c>)
 8008164:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 8008166:	4b55      	ldr	r3, [pc, #340]	; (80082bc <ROS_Register+0x218>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4618      	mov	r0, r3
 800816e:	f016 fdc7 	bl	801ed00 <malloc>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	4b53      	ldr	r3, [pc, #332]	; (80082c4 <ROS_Register+0x220>)
 8008178:	601a      	str	r2, [r3, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 800817a:	4b53      	ldr	r3, [pc, #332]	; (80082c8 <ROS_Register+0x224>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	0099      	lsls	r1, r3, #2
 8008180:	4b4f      	ldr	r3, [pc, #316]	; (80082c0 <ROS_Register+0x21c>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b4d      	ldr	r3, [pc, #308]	; (80082bc <ROS_Register+0x218>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800818c:	3b01      	subs	r3, #1
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	18d4      	adds	r4, r2, r3
 8008192:	4608      	mov	r0, r1
 8008194:	f016 fdb4 	bl	801ed00 <malloc>
 8008198:	4603      	mov	r3, r0
 800819a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800819c:	2300      	movs	r3, #0
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	e014      	b.n	80081cc <ROS_Register+0x128>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 80081a2:	4b47      	ldr	r3, [pc, #284]	; (80082c0 <ROS_Register+0x21c>)
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	4b45      	ldr	r3, [pc, #276]	; (80082bc <ROS_Register+0x218>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081ae:	3b01      	subs	r3, #1
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	18d4      	adds	r4, r2, r3
 80081bc:	201c      	movs	r0, #28
 80081be:	f016 fd9f 	bl	801ed00 <malloc>
 80081c2:	4603      	mov	r3, r0
 80081c4:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3301      	adds	r3, #1
 80081ca:	613b      	str	r3, [r7, #16]
 80081cc:	4b3e      	ldr	r3, [pc, #248]	; (80082c8 <ROS_Register+0x224>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	dbe5      	blt.n	80081a2 <ROS_Register+0xfe>
		}
	}

	point_num[path_num - 1] = test_point_num;
 80081d6:	4b3b      	ldr	r3, [pc, #236]	; (80082c4 <ROS_Register+0x220>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b38      	ldr	r3, [pc, #224]	; (80082bc <ROS_Register+0x218>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081e2:	3b01      	subs	r3, #1
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	4a37      	ldr	r2, [pc, #220]	; (80082c8 <ROS_Register+0x224>)
 80081ea:	6812      	ldr	r2, [r2, #0]
 80081ec:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < test_point_num; i++)
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e027      	b.n	8008244 <ROS_Register+0x1a0>
	{
		for(int j = 0; j < 7; j++)
 80081f4:	2300      	movs	r3, #0
 80081f6:	60bb      	str	r3, [r7, #8]
 80081f8:	e01e      	b.n	8008238 <ROS_Register+0x194>
		{
			PP_Points[path_num - 1][i][j] = test_points[i][j];
 80081fa:	4b34      	ldr	r3, [pc, #208]	; (80082cc <ROS_Register+0x228>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	441a      	add	r2, r3
 800820c:	4b2c      	ldr	r3, [pc, #176]	; (80082c0 <ROS_Register+0x21c>)
 800820e:	6819      	ldr	r1, [r3, #0]
 8008210:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <ROS_Register+0x218>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008218:	3b01      	subs	r3, #1
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	6819      	ldr	r1, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	6819      	ldr	r1, [r3, #0]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 7; j++)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3301      	adds	r3, #1
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b06      	cmp	r3, #6
 800823c:	dddd      	ble.n	80081fa <ROS_Register+0x156>
	for(int i = 0; i < test_point_num; i++)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	4b20      	ldr	r3, [pc, #128]	; (80082c8 <ROS_Register+0x224>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	429a      	cmp	r2, r3
 800824c:	dbd2      	blt.n	80081f4 <ROS_Register+0x150>
		}
	}

	for(int i = 0; i < test_point_num; i++)
 800824e:	2300      	movs	r3, #0
 8008250:	607b      	str	r3, [r7, #4]
 8008252:	e023      	b.n	800829c <ROS_Register+0x1f8>
	{
		for(int j = 0; j < 7; j++)
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	e01a      	b.n	8008290 <ROS_Register+0x1ec>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_num - 1][i][j], 4, HAL_MAX_DELAY);
 800825a:	4b1d      	ldr	r3, [pc, #116]	; (80082d0 <ROS_Register+0x22c>)
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	4b18      	ldr	r3, [pc, #96]	; (80082c0 <ROS_Register+0x21c>)
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b16      	ldr	r3, [pc, #88]	; (80082bc <ROS_Register+0x218>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800826a:	3b01      	subs	r3, #1
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	18d1      	adds	r1, r2, r3
 8008280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008284:	2204      	movs	r2, #4
 8008286:	f012 f8fe 	bl	801a486 <HAL_UART_Transmit>
		for(int j = 0; j < 7; j++)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	2b06      	cmp	r3, #6
 8008294:	dde1      	ble.n	800825a <ROS_Register+0x1b6>
	for(int i = 0; i < test_point_num; i++)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3301      	adds	r3, #1
 800829a:	607b      	str	r3, [r7, #4]
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <ROS_Register+0x224>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	dbd6      	blt.n	8008254 <ROS_Register+0x1b0>
		}
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <ROS_Register+0x22c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2207      	movs	r2, #7
 80082ac:	4909      	ldr	r1, [pc, #36]	; (80082d4 <ROS_Register+0x230>)
 80082ae:	4618      	mov	r0, r3
 80082b0:	f012 f982 	bl	801a5b8 <HAL_UART_Receive_IT>
}
 80082b4:	bf00      	nop
 80082b6:	371c      	adds	r7, #28
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd90      	pop	{r4, r7, pc}
 80082bc:	20009cd0 	.word	0x20009cd0
 80082c0:	2000972c 	.word	0x2000972c
 80082c4:	20009754 	.word	0x20009754
 80082c8:	2000974c 	.word	0x2000974c
 80082cc:	2000a270 	.word	0x2000a270
 80082d0:	20009eec 	.word	0x20009eec
 80082d4:	20007e58 	.word	0x20007e58

080082d8 <ROS_Delete>:
 * Delete specific path in PP_Points
 * User not able to run the path again
 * Can only delete registered path
 */
void ROS_Delete(int path_index)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	path_num--;
 80082e0:	4b62      	ldr	r3, [pc, #392]	; (800846c <ROS_Delete+0x194>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	4a61      	ldr	r2, [pc, #388]	; (800846c <ROS_Delete+0x194>)
 80082e8:	6013      	str	r3, [r2, #0]
	if(path_index - 1 == path_num)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	1e5a      	subs	r2, r3, #1
 80082ee:	4b5f      	ldr	r3, [pc, #380]	; (800846c <ROS_Delete+0x194>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d13e      	bne.n	8008374 <ROS_Delete+0x9c>
	{
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 80082f6:	4b5e      	ldr	r3, [pc, #376]	; (8008470 <ROS_Delete+0x198>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a5c      	ldr	r2, [pc, #368]	; (800846c <ROS_Delete+0x194>)
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	0092      	lsls	r2, r2, #2
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f017 fc46 	bl	801fb94 <realloc>
 8008308:	4603      	mov	r3, r0
 800830a:	4a59      	ldr	r2, [pc, #356]	; (8008470 <ROS_Delete+0x198>)
 800830c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	e00d      	b.n	8008330 <ROS_Delete+0x58>
		{
			total_point_num += point_num[i];
 8008314:	4b56      	ldr	r3, [pc, #344]	; (8008470 <ROS_Delete+0x198>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b54      	ldr	r3, [pc, #336]	; (8008474 <ROS_Delete+0x19c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4413      	add	r3, r2
 8008326:	4a53      	ldr	r2, [pc, #332]	; (8008474 <ROS_Delete+0x19c>)
 8008328:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	3301      	adds	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	4b4e      	ldr	r3, [pc, #312]	; (800846c <ROS_Delete+0x194>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	429a      	cmp	r2, r3
 8008338:	dbec      	blt.n	8008314 <ROS_Delete+0x3c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800833a:	4b4f      	ldr	r3, [pc, #316]	; (8008478 <ROS_Delete+0x1a0>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4b4d      	ldr	r3, [pc, #308]	; (8008474 <ROS_Delete+0x19c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	460b      	mov	r3, r1
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	1a5b      	subs	r3, r3, r1
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4619      	mov	r1, r3
 800834e:	4610      	mov	r0, r2
 8008350:	f017 fc20 	bl	801fb94 <realloc>
 8008354:	4603      	mov	r3, r0
 8008356:	4a48      	ldr	r2, [pc, #288]	; (8008478 <ROS_Delete+0x1a0>)
 8008358:	6013      	str	r3, [r2, #0]

		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	4947      	ldr	r1, [pc, #284]	; (800847c <ROS_Delete+0x1a4>)
 800835e:	4848      	ldr	r0, [pc, #288]	; (8008480 <ROS_Delete+0x1a8>)
 8008360:	f017 fcce 	bl	801fd00 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
 8008364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008368:	2210      	movs	r2, #16
 800836a:	4945      	ldr	r1, [pc, #276]	; (8008480 <ROS_Delete+0x1a8>)
 800836c:	4845      	ldr	r0, [pc, #276]	; (8008484 <ROS_Delete+0x1ac>)
 800836e:	f012 f88a 	bl	801a486 <HAL_UART_Transmit>
 8008372:	e06f      	b.n	8008454 <ROS_Delete+0x17c>
	}

	else
	{
		for(int i = path_index - 1; i < path_num; i++)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3b01      	subs	r3, #1
 8008378:	613b      	str	r3, [r7, #16]
 800837a:	e00f      	b.n	800839c <ROS_Delete+0xc4>
		{
			point_num[i] = point_num[i + 1];
 800837c:	4b3c      	ldr	r3, [pc, #240]	; (8008470 <ROS_Delete+0x198>)
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	3301      	adds	r3, #1
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	441a      	add	r2, r3
 8008388:	4b39      	ldr	r3, [pc, #228]	; (8008470 <ROS_Delete+0x198>)
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	4b33      	ldr	r3, [pc, #204]	; (800846c <ROS_Delete+0x194>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	dbea      	blt.n	800837c <ROS_Delete+0xa4>
		}
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 80083a6:	4b32      	ldr	r3, [pc, #200]	; (8008470 <ROS_Delete+0x198>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a30      	ldr	r2, [pc, #192]	; (800846c <ROS_Delete+0x194>)
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	0092      	lsls	r2, r2, #2
 80083b0:	4611      	mov	r1, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f017 fbee 	bl	801fb94 <realloc>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4a2d      	ldr	r2, [pc, #180]	; (8008470 <ROS_Delete+0x198>)
 80083bc:	6013      	str	r3, [r2, #0]

		for(int i = path_index - 1; i < path_num; i++)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
 80083c4:	e00f      	b.n	80083e6 <ROS_Delete+0x10e>
		{
			PP_Points[i] = PP_Points[i + 1];
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <ROS_Delete+0x1a0>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3301      	adds	r3, #1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	4b29      	ldr	r3, [pc, #164]	; (8008478 <ROS_Delete+0x1a0>)
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	6812      	ldr	r2, [r2, #0]
 80083de:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	4b21      	ldr	r3, [pc, #132]	; (800846c <ROS_Delete+0x194>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	dbea      	blt.n	80083c6 <ROS_Delete+0xee>
		}

		for(int i = 0; i < path_num; i++)
 80083f0:	2300      	movs	r3, #0
 80083f2:	60bb      	str	r3, [r7, #8]
 80083f4:	e00d      	b.n	8008412 <ROS_Delete+0x13a>
		{
			total_point_num += point_num[i];
 80083f6:	4b1e      	ldr	r3, [pc, #120]	; (8008470 <ROS_Delete+0x198>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <ROS_Delete+0x19c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4413      	add	r3, r2
 8008408:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <ROS_Delete+0x19c>)
 800840a:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	4b16      	ldr	r3, [pc, #88]	; (800846c <ROS_Delete+0x194>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	429a      	cmp	r2, r3
 800841a:	dbec      	blt.n	80083f6 <ROS_Delete+0x11e>
		}

		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 800841c:	4b16      	ldr	r3, [pc, #88]	; (8008478 <ROS_Delete+0x1a0>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <ROS_Delete+0x19c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	460b      	mov	r3, r1
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	1a5b      	subs	r3, r3, r1
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4619      	mov	r1, r3
 8008430:	4610      	mov	r0, r2
 8008432:	f017 fbaf 	bl	801fb94 <realloc>
 8008436:	4603      	mov	r3, r0
 8008438:	4a0f      	ldr	r2, [pc, #60]	; (8008478 <ROS_Delete+0x1a0>)
 800843a:	6013      	str	r3, [r2, #0]
		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	490f      	ldr	r1, [pc, #60]	; (800847c <ROS_Delete+0x1a4>)
 8008440:	480f      	ldr	r0, [pc, #60]	; (8008480 <ROS_Delete+0x1a8>)
 8008442:	f017 fc5d 	bl	801fd00 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
 8008446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800844a:	2210      	movs	r2, #16
 800844c:	490c      	ldr	r1, [pc, #48]	; (8008480 <ROS_Delete+0x1a8>)
 800844e:	480d      	ldr	r0, [pc, #52]	; (8008484 <ROS_Delete+0x1ac>)
 8008450:	f012 f819 	bl	801a486 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <ROS_Delete+0x1b0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2207      	movs	r2, #7
 800845a:	4909      	ldr	r1, [pc, #36]	; (8008480 <ROS_Delete+0x1a8>)
 800845c:	4618      	mov	r0, r3
 800845e:	f012 f8ab 	bl	801a5b8 <HAL_UART_Receive_IT>

}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20009cd0 	.word	0x20009cd0
 8008470:	20009754 	.word	0x20009754
 8008474:	200098c8 	.word	0x200098c8
 8008478:	2000972c 	.word	0x2000972c
 800847c:	08024264 	.word	0x08024264
 8008480:	20007e58 	.word	0x20007e58
 8008484:	200068c4 	.word	0x200068c4
 8008488:	20009eec 	.word	0x20009eec

0800848c <ROS_DeleteAll>:
/*
 * Delete all existing registered path
 * Usually used to reset all path registered
 */
void ROS_DeleteAll(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
	for(int i = 0; i < path_num; i++)
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e01e      	b.n	80084d6 <ROS_DeleteAll+0x4a>
	{
		for(int j = 0; j < point_num[i]; j++)
 8008498:	2300      	movs	r3, #0
 800849a:	60bb      	str	r3, [r7, #8]
 800849c:	e00f      	b.n	80084be <ROS_DeleteAll+0x32>
		{
			free(PP_Points[i][j]);
 800849e:	4b24      	ldr	r3, [pc, #144]	; (8008530 <ROS_DeleteAll+0xa4>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4618      	mov	r0, r3
 80084b4:	f016 fc2c 	bl	801ed10 <free>
		for(int j = 0; j < point_num[i]; j++)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	4b1d      	ldr	r3, [pc, #116]	; (8008534 <ROS_DeleteAll+0xa8>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	dbe6      	blt.n	800849e <ROS_DeleteAll+0x12>
	for(int i = 0; i < path_num; i++)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <ROS_DeleteAll+0xac>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	429a      	cmp	r2, r3
 80084de:	dbdb      	blt.n	8008498 <ROS_DeleteAll+0xc>
		}
	}

	for(int i = 0; i < path_num; i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	607b      	str	r3, [r7, #4]
 80084e4:	e00b      	b.n	80084fe <ROS_DeleteAll+0x72>
	{
		free(PP_Points[i]);
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <ROS_DeleteAll+0xa4>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f016 fc0c 	bl	801ed10 <free>
	for(int i = 0; i < path_num; i++)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3301      	adds	r3, #1
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	4b0e      	ldr	r3, [pc, #56]	; (8008538 <ROS_DeleteAll+0xac>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	dbee      	blt.n	80084e6 <ROS_DeleteAll+0x5a>
	}

	free(PP_Points);
 8008508:	4b09      	ldr	r3, [pc, #36]	; (8008530 <ROS_DeleteAll+0xa4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f016 fbff 	bl	801ed10 <free>
	free(point_num);
 8008512:	4b08      	ldr	r3, [pc, #32]	; (8008534 <ROS_DeleteAll+0xa8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f016 fbfa 	bl	801ed10 <free>

	ROS_Init(ROS_UART);
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <ROS_DeleteAll+0xb0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff f817 	bl	8007554 <ROS_Init>
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	2000972c 	.word	0x2000972c
 8008534:	20009754 	.word	0x20009754
 8008538:	20009cd0 	.word	0x20009cd0
 800853c:	20009eec 	.word	0x20009eec

08008540 <ROS_EditPath>:
 * Allow user to edit registered path with different number of points than original ones
 * After satisfied the testing path, it will overwrite the desired path in PP_Points
 * Call RNSPPStart(PP_Points[${editing_index}] to see changes
 */
void ROS_EditPath(void)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b095      	sub	sp, #84	; 0x54
 8008544:	af00      	add	r7, sp, #0
	total_point_num = 0;
 8008546:	4b99      	ldr	r3, [pc, #612]	; (80087ac <ROS_EditPath+0x26c>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	4b98      	ldr	r3, [pc, #608]	; (80087b0 <ROS_EditPath+0x270>)
 800854e:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8008552:	461a      	mov	r2, r3
	memcpy(&edit_index, &ROS_buff[3], 4);
 8008554:	4b97      	ldr	r3, [pc, #604]	; (80087b4 <ROS_EditPath+0x274>)
 8008556:	601a      	str	r2, [r3, #0]

	if(edit_index == path_num)
 8008558:	4b96      	ldr	r3, [pc, #600]	; (80087b4 <ROS_EditPath+0x274>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	4b96      	ldr	r3, [pc, #600]	; (80087b8 <ROS_EditPath+0x278>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d137      	bne.n	80085d4 <ROS_EditPath+0x94>
	{
		/*
		 Just delete the last path and require user to register again
		 */
		path_num--;
 8008564:	4b94      	ldr	r3, [pc, #592]	; (80087b8 <ROS_EditPath+0x278>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3b01      	subs	r3, #1
 800856a:	4a93      	ldr	r2, [pc, #588]	; (80087b8 <ROS_EditPath+0x278>)
 800856c:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 800856e:	4b93      	ldr	r3, [pc, #588]	; (80087bc <ROS_EditPath+0x27c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a91      	ldr	r2, [pc, #580]	; (80087b8 <ROS_EditPath+0x278>)
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	0092      	lsls	r2, r2, #2
 8008578:	4611      	mov	r1, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f017 fb0a 	bl	801fb94 <realloc>
 8008580:	4603      	mov	r3, r0
 8008582:	4a8e      	ldr	r2, [pc, #568]	; (80087bc <ROS_EditPath+0x27c>)
 8008584:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8008586:	2300      	movs	r3, #0
 8008588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800858a:	e00d      	b.n	80085a8 <ROS_EditPath+0x68>
		{
			total_point_num += point_num[i];
 800858c:	4b8b      	ldr	r3, [pc, #556]	; (80087bc <ROS_EditPath+0x27c>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b84      	ldr	r3, [pc, #528]	; (80087ac <ROS_EditPath+0x26c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4413      	add	r3, r2
 800859e:	4a83      	ldr	r2, [pc, #524]	; (80087ac <ROS_EditPath+0x26c>)
 80085a0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 80085a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a4:	3301      	adds	r3, #1
 80085a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085a8:	4b83      	ldr	r3, [pc, #524]	; (80087b8 <ROS_EditPath+0x278>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ae:	429a      	cmp	r2, r3
 80085b0:	dbec      	blt.n	800858c <ROS_EditPath+0x4c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 80085b2:	4b83      	ldr	r3, [pc, #524]	; (80087c0 <ROS_EditPath+0x280>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b7d      	ldr	r3, [pc, #500]	; (80087ac <ROS_EditPath+0x26c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	460b      	mov	r3, r1
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	1a5b      	subs	r3, r3, r1
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f017 fae4 	bl	801fb94 <realloc>
 80085cc:	4603      	mov	r3, r0
 80085ce:	4a7c      	ldr	r2, [pc, #496]	; (80087c0 <ROS_EditPath+0x280>)
 80085d0:	6013      	str	r3, [r2, #0]
//		}
//
//		free(Edit_Buff);
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
	}
}
 80085d2:	e21a      	b.n	8008a0a <ROS_EditPath+0x4ca>
		edit_offset = path_num - edit_index;
 80085d4:	4b78      	ldr	r3, [pc, #480]	; (80087b8 <ROS_EditPath+0x278>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b76      	ldr	r3, [pc, #472]	; (80087b4 <ROS_EditPath+0x274>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	4a79      	ldr	r2, [pc, #484]	; (80087c4 <ROS_EditPath+0x284>)
 80085e0:	6013      	str	r3, [r2, #0]
		Edit_Buff = (float***)malloc(edit_offset * sizeof(float**));
 80085e2:	4b78      	ldr	r3, [pc, #480]	; (80087c4 <ROS_EditPath+0x284>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f016 fb89 	bl	801ed00 <malloc>
 80085ee:	4603      	mov	r3, r0
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b75      	ldr	r3, [pc, #468]	; (80087c8 <ROS_EditPath+0x288>)
 80085f4:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < edit_offset ; i++)
 80085f6:	2300      	movs	r3, #0
 80085f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085fa:	e016      	b.n	800862a <ROS_EditPath+0xea>
			Edit_Buff[i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 80085fc:	4b6f      	ldr	r3, [pc, #444]	; (80087bc <ROS_EditPath+0x27c>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4b6c      	ldr	r3, [pc, #432]	; (80087b4 <ROS_EditPath+0x274>)
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008606:	440b      	add	r3, r1
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	0099      	lsls	r1, r3, #2
 8008610:	4b6d      	ldr	r3, [pc, #436]	; (80087c8 <ROS_EditPath+0x288>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	18d4      	adds	r4, r2, r3
 800861a:	4608      	mov	r0, r1
 800861c:	f016 fb70 	bl	801ed00 <malloc>
 8008620:	4603      	mov	r3, r0
 8008622:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset ; i++)
 8008624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008626:	3301      	adds	r3, #1
 8008628:	64bb      	str	r3, [r7, #72]	; 0x48
 800862a:	4b66      	ldr	r3, [pc, #408]	; (80087c4 <ROS_EditPath+0x284>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008630:	429a      	cmp	r2, r3
 8008632:	dbe3      	blt.n	80085fc <ROS_EditPath+0xbc>
		for(int i = 0; i < edit_offset; i++)
 8008634:	2300      	movs	r3, #0
 8008636:	647b      	str	r3, [r7, #68]	; 0x44
 8008638:	e022      	b.n	8008680 <ROS_EditPath+0x140>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800863a:	2300      	movs	r3, #0
 800863c:	643b      	str	r3, [r7, #64]	; 0x40
 800863e:	e010      	b.n	8008662 <ROS_EditPath+0x122>
				Edit_Buff[i][j] = (float*)malloc(7 * sizeof(float));
 8008640:	4b61      	ldr	r3, [pc, #388]	; (80087c8 <ROS_EditPath+0x288>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	18d4      	adds	r4, r2, r3
 8008652:	201c      	movs	r0, #28
 8008654:	f016 fb54 	bl	801ed00 <malloc>
 8008658:	4603      	mov	r3, r0
 800865a:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800865c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865e:	3301      	adds	r3, #1
 8008660:	643b      	str	r3, [r7, #64]	; 0x40
 8008662:	4b56      	ldr	r3, [pc, #344]	; (80087bc <ROS_EditPath+0x27c>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b53      	ldr	r3, [pc, #332]	; (80087b4 <ROS_EditPath+0x274>)
 8008668:	6819      	ldr	r1, [r3, #0]
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	440b      	add	r3, r1
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008676:	429a      	cmp	r2, r3
 8008678:	dbe2      	blt.n	8008640 <ROS_EditPath+0x100>
		for(int i = 0; i < edit_offset; i++)
 800867a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867c:	3301      	adds	r3, #1
 800867e:	647b      	str	r3, [r7, #68]	; 0x44
 8008680:	4b50      	ldr	r3, [pc, #320]	; (80087c4 <ROS_EditPath+0x284>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008686:	429a      	cmp	r2, r3
 8008688:	dbd7      	blt.n	800863a <ROS_EditPath+0xfa>
		for(int i = 0; i < edit_offset; i++)
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800868e:	e03c      	b.n	800870a <ROS_EditPath+0x1ca>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008690:	2300      	movs	r3, #0
 8008692:	63bb      	str	r3, [r7, #56]	; 0x38
 8008694:	e02a      	b.n	80086ec <ROS_EditPath+0x1ac>
				for(int k = 0; k < 7; k++)
 8008696:	2300      	movs	r3, #0
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
 800869a:	e021      	b.n	80086e0 <ROS_EditPath+0x1a0>
					Edit_Buff[i][j][k] = PP_Points[edit_index + i][j][k];
 800869c:	4b48      	ldr	r3, [pc, #288]	; (80087c0 <ROS_EditPath+0x280>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	4b44      	ldr	r3, [pc, #272]	; (80087b4 <ROS_EditPath+0x274>)
 80086a2:	6819      	ldr	r1, [r3, #0]
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	440b      	add	r3, r1
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	4b42      	ldr	r3, [pc, #264]	; (80087c8 <ROS_EditPath+0x288>)
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	6819      	ldr	r1, [r3, #0]
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	6819      	ldr	r1, [r3, #0]
 80086d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	6812      	ldr	r2, [r2, #0]
 80086d8:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	3301      	adds	r3, #1
 80086de:	637b      	str	r3, [r7, #52]	; 0x34
 80086e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e2:	2b06      	cmp	r3, #6
 80086e4:	ddda      	ble.n	800869c <ROS_EditPath+0x15c>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	3301      	adds	r3, #1
 80086ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ec:	4b33      	ldr	r3, [pc, #204]	; (80087bc <ROS_EditPath+0x27c>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <ROS_EditPath+0x274>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f6:	440b      	add	r3, r1
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008700:	429a      	cmp	r2, r3
 8008702:	dbc8      	blt.n	8008696 <ROS_EditPath+0x156>
		for(int i = 0; i < edit_offset; i++)
 8008704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008706:	3301      	adds	r3, #1
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800870a:	4b2e      	ldr	r3, [pc, #184]	; (80087c4 <ROS_EditPath+0x284>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008710:	429a      	cmp	r2, r3
 8008712:	dbbd      	blt.n	8008690 <ROS_EditPath+0x150>
		for(int i = 0; i < path_num; i++)
 8008714:	2300      	movs	r3, #0
 8008716:	633b      	str	r3, [r7, #48]	; 0x30
 8008718:	e01f      	b.n	800875a <ROS_EditPath+0x21a>
			if(i % edit_index == 0)
 800871a:	4b26      	ldr	r3, [pc, #152]	; (80087b4 <ROS_EditPath+0x274>)
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	fb93 f1f2 	sdiv	r1, r3, r2
 8008724:	fb02 f201 	mul.w	r2, r2, r1
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <ROS_EditPath+0x1fe>
				total_point_num += test_point_num;
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <ROS_EditPath+0x26c>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4b26      	ldr	r3, [pc, #152]	; (80087cc <ROS_EditPath+0x28c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4413      	add	r3, r2
 8008738:	4a1c      	ldr	r2, [pc, #112]	; (80087ac <ROS_EditPath+0x26c>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	e00a      	b.n	8008754 <ROS_EditPath+0x214>
				total_point_num += point_num[i];
 800873e:	4b1f      	ldr	r3, [pc, #124]	; (80087bc <ROS_EditPath+0x27c>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b18      	ldr	r3, [pc, #96]	; (80087ac <ROS_EditPath+0x26c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4413      	add	r3, r2
 8008750:	4a16      	ldr	r2, [pc, #88]	; (80087ac <ROS_EditPath+0x26c>)
 8008752:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	3301      	adds	r3, #1
 8008758:	633b      	str	r3, [r7, #48]	; 0x30
 800875a:	4b17      	ldr	r3, [pc, #92]	; (80087b8 <ROS_EditPath+0x278>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008760:	429a      	cmp	r2, r3
 8008762:	dbda      	blt.n	800871a <ROS_EditPath+0x1da>
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <ROS_EditPath+0x280>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4b10      	ldr	r3, [pc, #64]	; (80087ac <ROS_EditPath+0x26c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4619      	mov	r1, r3
 800876e:	460b      	mov	r3, r1
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	1a5b      	subs	r3, r3, r1
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f017 fa0b 	bl	801fb94 <realloc>
 800877e:	4603      	mov	r3, r0
 8008780:	4a0f      	ldr	r2, [pc, #60]	; (80087c0 <ROS_EditPath+0x280>)
 8008782:	6013      	str	r3, [r2, #0]
		PP_Points[edit_index - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8008784:	4b11      	ldr	r3, [pc, #68]	; (80087cc <ROS_EditPath+0x28c>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	0099      	lsls	r1, r3, #2
 800878a:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <ROS_EditPath+0x280>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <ROS_EditPath+0x274>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008796:	3b01      	subs	r3, #1
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	18d4      	adds	r4, r2, r3
 800879c:	4608      	mov	r0, r1
 800879e:	f016 faaf 	bl	801ed00 <malloc>
 80087a2:	4603      	mov	r3, r0
 80087a4:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087aa:	e026      	b.n	80087fa <ROS_EditPath+0x2ba>
 80087ac:	200098c8 	.word	0x200098c8
 80087b0:	20007e58 	.word	0x20007e58
 80087b4:	20009ba4 	.word	0x20009ba4
 80087b8:	20009cd0 	.word	0x20009cd0
 80087bc:	20009754 	.word	0x20009754
 80087c0:	2000972c 	.word	0x2000972c
 80087c4:	2000ab80 	.word	0x2000ab80
 80087c8:	20007198 	.word	0x20007198
 80087cc:	2000974c 	.word	0x2000974c
			PP_Points[edit_index - 1][i] = (float*)malloc(7 * sizeof(float));
 80087d0:	4b90      	ldr	r3, [pc, #576]	; (8008a14 <ROS_EditPath+0x4d4>)
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	4b90      	ldr	r3, [pc, #576]	; (8008a18 <ROS_EditPath+0x4d8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087dc:	3b01      	subs	r3, #1
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	18d4      	adds	r4, r2, r3
 80087ea:	201c      	movs	r0, #28
 80087ec:	f016 fa88 	bl	801ed00 <malloc>
 80087f0:	4603      	mov	r3, r0
 80087f2:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	3301      	adds	r3, #1
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087fa:	4b88      	ldr	r3, [pc, #544]	; (8008a1c <ROS_EditPath+0x4dc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008800:	429a      	cmp	r2, r3
 8008802:	dbe5      	blt.n	80087d0 <ROS_EditPath+0x290>
		for(int i = 0; i < test_point_num; i++)
 8008804:	2300      	movs	r3, #0
 8008806:	62bb      	str	r3, [r7, #40]	; 0x28
 8008808:	e027      	b.n	800885a <ROS_EditPath+0x31a>
			for(int j = 0; j < 7; j++)
 800880a:	2300      	movs	r3, #0
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
 800880e:	e01e      	b.n	800884e <ROS_EditPath+0x30e>
				PP_Points[edit_index - 1][i][j] = test_points[i][j];
 8008810:	4b83      	ldr	r3, [pc, #524]	; (8008a20 <ROS_EditPath+0x4e0>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	441a      	add	r2, r3
 8008822:	4b7c      	ldr	r3, [pc, #496]	; (8008a14 <ROS_EditPath+0x4d4>)
 8008824:	6819      	ldr	r1, [r3, #0]
 8008826:	4b7c      	ldr	r3, [pc, #496]	; (8008a18 <ROS_EditPath+0x4d8>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800882e:	3b01      	subs	r3, #1
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	6819      	ldr	r1, [r3, #0]
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	440b      	add	r3, r1
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < 7; j++)
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	3301      	adds	r3, #1
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	2b06      	cmp	r3, #6
 8008852:	dddd      	ble.n	8008810 <ROS_EditPath+0x2d0>
		for(int i = 0; i < test_point_num; i++)
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	3301      	adds	r3, #1
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
 800885a:	4b70      	ldr	r3, [pc, #448]	; (8008a1c <ROS_EditPath+0x4dc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008860:	429a      	cmp	r2, r3
 8008862:	dbd2      	blt.n	800880a <ROS_EditPath+0x2ca>
		for(int i = 0; i < edit_offset; i++)
 8008864:	2300      	movs	r3, #0
 8008866:	623b      	str	r3, [r7, #32]
 8008868:	e018      	b.n	800889c <ROS_EditPath+0x35c>
			PP_Points[edit_index + i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800886a:	4b6e      	ldr	r3, [pc, #440]	; (8008a24 <ROS_EditPath+0x4e4>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	4b6a      	ldr	r3, [pc, #424]	; (8008a18 <ROS_EditPath+0x4d8>)
 8008870:	6819      	ldr	r1, [r3, #0]
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	440b      	add	r3, r1
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	0098      	lsls	r0, r3, #2
 800887e:	4b65      	ldr	r3, [pc, #404]	; (8008a14 <ROS_EditPath+0x4d4>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b65      	ldr	r3, [pc, #404]	; (8008a18 <ROS_EditPath+0x4d8>)
 8008884:	6819      	ldr	r1, [r3, #0]
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	440b      	add	r3, r1
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	18d4      	adds	r4, r2, r3
 800888e:	f016 fa37 	bl	801ed00 <malloc>
 8008892:	4603      	mov	r3, r0
 8008894:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset; i++)
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	3301      	adds	r3, #1
 800889a:	623b      	str	r3, [r7, #32]
 800889c:	4b62      	ldr	r3, [pc, #392]	; (8008a28 <ROS_EditPath+0x4e8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	dbe1      	blt.n	800886a <ROS_EditPath+0x32a>
		for(int i = 0; i < edit_offset; i++)
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	e025      	b.n	80088f8 <ROS_EditPath+0x3b8>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	e013      	b.n	80088da <ROS_EditPath+0x39a>
				PP_Points[edit_index + i][j] = (float*)malloc(7 * sizeof(float));
 80088b2:	4b58      	ldr	r3, [pc, #352]	; (8008a14 <ROS_EditPath+0x4d4>)
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	4b58      	ldr	r3, [pc, #352]	; (8008a18 <ROS_EditPath+0x4d8>)
 80088b8:	6819      	ldr	r1, [r3, #0]
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	440b      	add	r3, r1
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	18d4      	adds	r4, r2, r3
 80088ca:	201c      	movs	r0, #28
 80088cc:	f016 fa18 	bl	801ed00 <malloc>
 80088d0:	4603      	mov	r3, r0
 80088d2:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	4b52      	ldr	r3, [pc, #328]	; (8008a24 <ROS_EditPath+0x4e4>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b4e      	ldr	r3, [pc, #312]	; (8008a18 <ROS_EditPath+0x4d8>)
 80088e0:	6819      	ldr	r1, [r3, #0]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	440b      	add	r3, r1
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	dbdf      	blt.n	80088b2 <ROS_EditPath+0x372>
		for(int i = 0; i < edit_offset; i++)
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	3301      	adds	r3, #1
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	4b4b      	ldr	r3, [pc, #300]	; (8008a28 <ROS_EditPath+0x4e8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	429a      	cmp	r2, r3
 8008900:	dbd4      	blt.n	80088ac <ROS_EditPath+0x36c>
		for(int i = 0; i < edit_offset; i++)
 8008902:	2300      	movs	r3, #0
 8008904:	617b      	str	r3, [r7, #20]
 8008906:	e03c      	b.n	8008982 <ROS_EditPath+0x442>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	e02a      	b.n	8008964 <ROS_EditPath+0x424>
				for(int k = 0; k < 7; k++)
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e021      	b.n	8008958 <ROS_EditPath+0x418>
					PP_Points[edit_index + i][j][k] = Edit_Buff[i][j][k];
 8008914:	4b45      	ldr	r3, [pc, #276]	; (8008a2c <ROS_EditPath+0x4ec>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <ROS_EditPath+0x4d4>)
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	4b39      	ldr	r3, [pc, #228]	; (8008a18 <ROS_EditPath+0x4d8>)
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4403      	add	r3, r0
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	440b      	add	r3, r1
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	440b      	add	r3, r1
 8008946:	6819      	ldr	r1, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	6812      	ldr	r2, [r2, #0]
 8008950:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3301      	adds	r3, #1
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b06      	cmp	r3, #6
 800895c:	ddda      	ble.n	8008914 <ROS_EditPath+0x3d4>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	3301      	adds	r3, #1
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <ROS_EditPath+0x4e4>)
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <ROS_EditPath+0x4d8>)
 800896a:	6819      	ldr	r1, [r3, #0]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	440b      	add	r3, r1
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	429a      	cmp	r2, r3
 800897a:	dbc8      	blt.n	800890e <ROS_EditPath+0x3ce>
		for(int i = 0; i < edit_offset; i++)
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3301      	adds	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <ROS_EditPath+0x4e8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	429a      	cmp	r2, r3
 800898a:	dbbd      	blt.n	8008908 <ROS_EditPath+0x3c8>
		point_num[edit_index - 1] = test_point_num;
 800898c:	4b25      	ldr	r3, [pc, #148]	; (8008a24 <ROS_EditPath+0x4e4>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <ROS_EditPath+0x4d8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008998:	3b01      	subs	r3, #1
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <ROS_EditPath+0x4dc>)
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < test_point_num; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	60bb      	str	r3, [r7, #8]
 80089a8:	e023      	b.n	80089f2 <ROS_EditPath+0x4b2>
			for(int j = 0; j < 7; j++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
 80089ae:	e01a      	b.n	80089e6 <ROS_EditPath+0x4a6>
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[edit_index - 1][i][j], 4, HAL_MAX_DELAY);
 80089b0:	4b1f      	ldr	r3, [pc, #124]	; (8008a30 <ROS_EditPath+0x4f0>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4b17      	ldr	r3, [pc, #92]	; (8008a14 <ROS_EditPath+0x4d4>)
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	4b17      	ldr	r3, [pc, #92]	; (8008a18 <ROS_EditPath+0x4d8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089c0:	3b01      	subs	r3, #1
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	18d1      	adds	r1, r2, r3
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089da:	2204      	movs	r2, #4
 80089dc:	f011 fd53 	bl	801a486 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3301      	adds	r3, #1
 80089e4:	607b      	str	r3, [r7, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b06      	cmp	r3, #6
 80089ea:	dde1      	ble.n	80089b0 <ROS_EditPath+0x470>
		for(int i = 0; i < test_point_num; i++)
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	3301      	adds	r3, #1
 80089f0:	60bb      	str	r3, [r7, #8]
 80089f2:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <ROS_EditPath+0x4dc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	dbd6      	blt.n	80089aa <ROS_EditPath+0x46a>
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80089fc:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <ROS_EditPath+0x4f0>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2207      	movs	r2, #7
 8008a02:	490c      	ldr	r1, [pc, #48]	; (8008a34 <ROS_EditPath+0x4f4>)
 8008a04:	4618      	mov	r0, r3
 8008a06:	f011 fdd7 	bl	801a5b8 <HAL_UART_Receive_IT>
}
 8008a0a:	bf00      	nop
 8008a0c:	3754      	adds	r7, #84	; 0x54
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd90      	pop	{r4, r7, pc}
 8008a12:	bf00      	nop
 8008a14:	2000972c 	.word	0x2000972c
 8008a18:	20009ba4 	.word	0x20009ba4
 8008a1c:	2000974c 	.word	0x2000974c
 8008a20:	2000a270 	.word	0x2000a270
 8008a24:	20009754 	.word	0x20009754
 8008a28:	2000ab80 	.word	0x2000ab80
 8008a2c:	20007198 	.word	0x20007198
 8008a30:	20009eec 	.word	0x20009eec
 8008a34:	20007e58 	.word	0x20007e58

08008a38 <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08c      	sub	sp, #48	; 0x30
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a46:	f107 0318 	add.w	r3, r7, #24
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	605a      	str	r2, [r3, #4]
 8008a50:	609a      	str	r2, [r3, #8]
 8008a52:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	2200      	movs	r2, #0
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	4a6d      	ldr	r2, [pc, #436]	; (8008c18 <ServoxInit+0x1e0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d106      	bne.n	8008a74 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	4a6c      	ldr	r2, [pc, #432]	; (8008c1c <ServoxInit+0x1e4>)
 8008a6a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	22a7      	movs	r2, #167	; 0xa7
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	e078      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4a6a      	ldr	r2, [pc, #424]	; (8008c20 <ServoxInit+0x1e8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d107      	bne.n	8008a8c <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008a82:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2253      	movs	r2, #83	; 0x53
 8008a88:	605a      	str	r2, [r3, #4]
 8008a8a:	e06c      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4a65      	ldr	r2, [pc, #404]	; (8008c24 <ServoxInit+0x1ec>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d106      	bne.n	8008aa2 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4a64      	ldr	r2, [pc, #400]	; (8008c28 <ServoxInit+0x1f0>)
 8008a98:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2253      	movs	r2, #83	; 0x53
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	e061      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	4a61      	ldr	r2, [pc, #388]	; (8008c2c <ServoxInit+0x1f4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d106      	bne.n	8008ab8 <ServoxInit+0x80>
			htimx->Instance = TIM4;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4a60      	ldr	r2, [pc, #384]	; (8008c30 <ServoxInit+0x1f8>)
 8008aae:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2253      	movs	r2, #83	; 0x53
 8008ab4:	605a      	str	r2, [r3, #4]
 8008ab6:	e056      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4a5e      	ldr	r2, [pc, #376]	; (8008c34 <ServoxInit+0x1fc>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d106      	bne.n	8008ace <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4a5d      	ldr	r2, [pc, #372]	; (8008c38 <ServoxInit+0x200>)
 8008ac4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	2253      	movs	r2, #83	; 0x53
 8008aca:	605a      	str	r2, [r3, #4]
 8008acc:	e04b      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a5a      	ldr	r2, [pc, #360]	; (8008c3c <ServoxInit+0x204>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d106      	bne.n	8008ae4 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a59      	ldr	r2, [pc, #356]	; (8008c40 <ServoxInit+0x208>)
 8008ada:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	22a7      	movs	r2, #167	; 0xa7
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	e040      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4a57      	ldr	r2, [pc, #348]	; (8008c44 <ServoxInit+0x20c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d106      	bne.n	8008afa <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a56      	ldr	r2, [pc, #344]	; (8008c48 <ServoxInit+0x210>)
 8008af0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	22a7      	movs	r2, #167	; 0xa7
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	e035      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a53      	ldr	r2, [pc, #332]	; (8008c4c <ServoxInit+0x214>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d106      	bne.n	8008b10 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a52      	ldr	r2, [pc, #328]	; (8008c50 <ServoxInit+0x218>)
 8008b06:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	22a7      	movs	r2, #167	; 0xa7
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	e02a      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	4a50      	ldr	r2, [pc, #320]	; (8008c54 <ServoxInit+0x21c>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d106      	bne.n	8008b26 <ServoxInit+0xee>
			htimx->Instance = TIM11;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a4f      	ldr	r2, [pc, #316]	; (8008c58 <ServoxInit+0x220>)
 8008b1c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	22a7      	movs	r2, #167	; 0xa7
 8008b22:	605a      	str	r2, [r3, #4]
 8008b24:	e01f      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a4c      	ldr	r2, [pc, #304]	; (8008c5c <ServoxInit+0x224>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d106      	bne.n	8008b3c <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4a4b      	ldr	r2, [pc, #300]	; (8008c60 <ServoxInit+0x228>)
 8008b32:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2253      	movs	r2, #83	; 0x53
 8008b38:	605a      	str	r2, [r3, #4]
 8008b3a:	e014      	b.n	8008b66 <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4a49      	ldr	r2, [pc, #292]	; (8008c64 <ServoxInit+0x22c>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d106      	bne.n	8008b52 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a48      	ldr	r2, [pc, #288]	; (8008c68 <ServoxInit+0x230>)
 8008b48:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	2253      	movs	r2, #83	; 0x53
 8008b4e:	605a      	str	r2, [r3, #4]
 8008b50:	e009      	b.n	8008b66 <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4a45      	ldr	r2, [pc, #276]	; (8008c6c <ServoxInit+0x234>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d105      	bne.n	8008b66 <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4a44      	ldr	r2, [pc, #272]	; (8008c70 <ServoxInit+0x238>)
 8008b5e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2253      	movs	r2, #83	; 0x53
 8008b64:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008b72:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2280      	movs	r2, #128	; 0x80
 8008b7e:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	f010 fc33 	bl	80193ec <HAL_TIM_Base_Init>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <ServoxInit+0x158>
		  {
		    Error_Handler();
 8008b8c:	f7fc fe2e 	bl	80057ec <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b94:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8008b96:	f107 0318 	add.w	r3, r7, #24
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68b8      	ldr	r0, [r7, #8]
 8008b9e:	f010 ff99 	bl	8019ad4 <HAL_TIM_ConfigClockSource>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <ServoxInit+0x174>
		  {
		    Error_Handler();
 8008ba8:	f7fc fe20 	bl	80057ec <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8008bac:	68b8      	ldr	r0, [r7, #8]
 8008bae:	f010 fc90 	bl	80194d2 <HAL_TIM_PWM_Init>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <ServoxInit+0x184>
			{
				Error_Handler();
 8008bb8:	f7fc fe18 	bl	80057ec <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8008bc4:	f107 0310 	add.w	r3, r7, #16
 8008bc8:	4619      	mov	r1, r3
 8008bca:	68b8      	ldr	r0, [r7, #8]
 8008bcc:	f011 fb7e 	bl	801a2cc <HAL_TIMEx_MasterConfigSynchronization>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <ServoxInit+0x1a2>
		{
			Error_Handler();
 8008bd6:	f7fc fe09 	bl	80057ec <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 8008bda:	68b8      	ldr	r0, [r7, #8]
 8008bdc:	f010 fc31 	bl	8019442 <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008be0:	8879      	ldrh	r1, [r7, #2]
 8008be2:	2301      	movs	r3, #1
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	2302      	movs	r3, #2
 8008be8:	2202      	movs	r2, #2
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f8 fc84 	bl	80014f8 <GPIOPinsInit>

	servo->htimx = htimx;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfa:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c02:	68b8      	ldr	r0, [r7, #8]
 8008c04:	f7f8 fe58 	bl	80018b8 <PWMChannelConfig>

	servo->currentPulse = 0;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	bf00      	nop
 8008c10:	3728      	adds	r7, #40	; 0x28
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20006b30 	.word	0x20006b30
 8008c1c:	40010000 	.word	0x40010000
 8008c20:	20006c34 	.word	0x20006c34
 8008c24:	20006880 	.word	0x20006880
 8008c28:	40000400 	.word	0x40000400
 8008c2c:	200066bc 	.word	0x200066bc
 8008c30:	40000800 	.word	0x40000800
 8008c34:	20006840 	.word	0x20006840
 8008c38:	40000c00 	.word	0x40000c00
 8008c3c:	2000667c 	.word	0x2000667c
 8008c40:	40010400 	.word	0x40010400
 8008c44:	20006b70 	.word	0x20006b70
 8008c48:	40014000 	.word	0x40014000
 8008c4c:	2000679c 	.word	0x2000679c
 8008c50:	40014400 	.word	0x40014400
 8008c54:	20006a48 	.word	0x20006a48
 8008c58:	40014800 	.word	0x40014800
 8008c5c:	20006d54 	.word	0x20006d54
 8008c60:	40001800 	.word	0x40001800
 8008c64:	20006964 	.word	0x20006964
 8008c68:	40001c00 	.word	0x40001c00
 8008c6c:	20006d14 	.word	0x20006d14
 8008c70:	40002000 	.word	0x40002000

08008c74 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d204      	bcs.n	8008c92 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	695a      	ldr	r2, [r3, #20]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	621a      	str	r2, [r3, #32]
 8008c90:	e00c      	b.n	8008cac <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d904      	bls.n	8008ca6 <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699a      	ldr	r2, [r3, #24]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	621a      	str	r2, [r3, #32]
 8008ca4:	e002      	b.n	8008cac <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <ServoSetPulse+0x4e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	6a12      	ldr	r2, [r2, #32]
 8008cbe:	635a      	str	r2, [r3, #52]	; 0x34

}
 8008cc0:	e01b      	b.n	8008cfa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d106      	bne.n	8008cd8 <ServoSetPulse+0x64>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008cd6:	e010      	b.n	8008cfa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d106      	bne.n	8008cee <ServoSetPulse+0x7a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8008cec:	e005      	b.n	8008cfa <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	619a      	str	r2, [r3, #24]
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	441a      	add	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1a      	ldr	r2, [r3, #32]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d203      	bcs.n	8008d54 <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	695a      	ldr	r2, [r3, #20]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d903      	bls.n	8008d68 <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	699a      	ldr	r2, [r3, #24]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d106      	bne.n	8008d7e <ServoMovePulse+0x54>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6a12      	ldr	r2, [r2, #32]
 8008d7a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008d7c:	e01b      	b.n	8008db6 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d106      	bne.n	8008d94 <ServoMovePulse+0x6a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a1b      	ldr	r3, [r3, #32]
 8008d90:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008d92:	e010      	b.n	8008db6 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d106      	bne.n	8008daa <ServoMovePulse+0x80>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8008da8:	e005      	b.n	8008db6 <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
	...

08008dc4 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8008dc8:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <SPI1_IRQHandler+0x10>)
 8008dca:	f010 f9f1 	bl	80191b0 <HAL_SPI_IRQHandler>
}
 8008dce:	bf00      	nop
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000a040 	.word	0x2000a040

08008dd8 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8008ddc:	4802      	ldr	r0, [pc, #8]	; (8008de8 <SPI2_IRQHandler+0x10>)
 8008dde:	f010 f9e7 	bl	80191b0 <HAL_SPI_IRQHandler>
}
 8008de2:	bf00      	nop
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	200074e4 	.word	0x200074e4

08008dec <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 8008df0:	4802      	ldr	r0, [pc, #8]	; (8008dfc <SPI3_IRQHandler+0x10>)
 8008df2:	f010 f9dd 	bl	80191b0 <HAL_SPI_IRQHandler>
}
 8008df6:	bf00      	nop
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20007d84 	.word	0x20007d84

08008e00 <TFmini_Init>:
 *  Created on: 2 May 2022
 *      Author: wai
 */
#include "tfmini.h"

void TFmini_Init(tfmini_t* tfmini, UART_HandleTypeDef* huartx){
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
	tfmini->huartx = huartx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	601a      	str	r2, [r3, #0]
	tfmini->checksum = 0;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	711a      	strb	r2, [r3, #4]
	HAL_UART_Receive_IT(tfmini->huartx, UARTbuf, 9);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2209      	movs	r2, #9
 8008e1c:	4903      	ldr	r1, [pc, #12]	; (8008e2c <TFmini_Init+0x2c>)
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f011 fbca 	bl	801a5b8 <HAL_UART_Receive_IT>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	200069e4 	.word	0x200069e4

08008e30 <TFmini_Handler>:
//		break;
//	}
//	va_end(value);
//}

void TFmini_Handler(tfmini_t* tfmini){
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
	if(UARTbuf[0] == 0x59 && UARTbuf[1] == 0x59){
 8008e38:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b59      	cmp	r3, #89	; 0x59
 8008e3e:	d160      	bne.n	8008f02 <TFmini_Handler+0xd2>
 8008e40:	4b32      	ldr	r3, [pc, #200]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	2b59      	cmp	r3, #89	; 0x59
 8008e46:	d15c      	bne.n	8008f02 <TFmini_Handler+0xd2>
		tfmini->checksum = 0;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	711a      	strb	r2, [r3, #4]
		tfmini->checksum = UARTbuf[0] + UARTbuf[1] + UARTbuf[2] + UARTbuf[3]
 8008e4e:	4b2f      	ldr	r3, [pc, #188]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	4b2e      	ldr	r3, [pc, #184]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	4413      	add	r3, r2
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	4b2c      	ldr	r3, [pc, #176]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e5c:	789b      	ldrb	r3, [r3, #2]
 8008e5e:	4413      	add	r3, r2
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	4b2a      	ldr	r3, [pc, #168]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e64:	78db      	ldrb	r3, [r3, #3]
 8008e66:	4413      	add	r3, r2
 8008e68:	b2da      	uxtb	r2, r3
							+ UARTbuf[4] + UARTbuf[5] + UARTbuf[6] + UARTbuf[7];
 8008e6a:	4b28      	ldr	r3, [pc, #160]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e6c:	791b      	ldrb	r3, [r3, #4]
 8008e6e:	4413      	add	r3, r2
 8008e70:	b2da      	uxtb	r2, r3
 8008e72:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e74:	795b      	ldrb	r3, [r3, #5]
 8008e76:	4413      	add	r3, r2
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e7c:	799b      	ldrb	r3, [r3, #6]
 8008e7e:	4413      	add	r3, r2
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e84:	79db      	ldrb	r3, [r3, #7]
 8008e86:	4413      	add	r3, r2
 8008e88:	b2da      	uxtb	r2, r3
		tfmini->checksum = UARTbuf[0] + UARTbuf[1] + UARTbuf[2] + UARTbuf[3]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	711a      	strb	r2, [r3, #4]
		if(tfmini->checksum == UARTbuf[8]){
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	791a      	ldrb	r2, [r3, #4]
 8008e92:	4b1e      	ldr	r3, [pc, #120]	; (8008f0c <TFmini_Handler+0xdc>)
 8008e94:	7a1b      	ldrb	r3, [r3, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d12e      	bne.n	8008ef8 <TFmini_Handler+0xc8>
			tfmini->dist = *((int16_t*)&UARTbuf[2]);
 8008e9a:	4b1d      	ldr	r3, [pc, #116]	; (8008f10 <TFmini_Handler+0xe0>)
 8008e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	edc3 7a04 	vstr	s15, [r3, #16]
			tfmini->dist /= 100;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	ed93 7a04 	vldr	s14, [r3, #16]
 8008eb4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8008f14 <TFmini_Handler+0xe4>
 8008eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	edc3 7a04 	vstr	s15, [r3, #16]
			tfmini->str  = *((int16_t*)&UARTbuf[4]);
 8008ec2:	4b15      	ldr	r3, [pc, #84]	; (8008f18 <TFmini_Handler+0xe8>)
 8008ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ec8:	ee07 3a90 	vmov	s15, r3
 8008ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	edc3 7a05 	vstr	s15, [r3, #20]
			tfmini->temp = *((int16_t*)&UARTbuf[6]) / 8 - 256;
 8008ed6:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <TFmini_Handler+0xec>)
 8008ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	da00      	bge.n	8008ee2 <TFmini_Handler+0xb2>
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	10db      	asrs	r3, r3, #3
 8008ee4:	b21b      	sxth	r3, r3
 8008ee6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008eea:	ee07 3a90 	vmov	s15, r3
 8008eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	edc3 7a06 	vstr	s15, [r3, #24]
		}
		memset(UARTbuf, 0, 9);
 8008ef8:	2209      	movs	r2, #9
 8008efa:	2100      	movs	r1, #0
 8008efc:	4803      	ldr	r0, [pc, #12]	; (8008f0c <TFmini_Handler+0xdc>)
 8008efe:	f015 ff1d 	bl	801ed3c <memset>
	}

//	HAL_UART_Receive_IT(tfmini->huartx, UARTbuf, 9);
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200069e4 	.word	0x200069e4
 8008f10:	200069e6 	.word	0x200069e6
 8008f14:	42c80000 	.word	0x42c80000
 8008f18:	200069e8 	.word	0x200069e8
 8008f1c:	200069ea 	.word	0x200069ea

08008f20 <registerPath>:
 */

#include "TuningInterface/TuningInterface.h"
#include "Tune.h"

void registerPath(float path[][7], int numPoint, ...){
 8008f20:	b40e      	push	{r1, r2, r3}
 8008f22:	b480      	push	{r7}
 8008f24:	b086      	sub	sp, #24
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
	va_list pinconfig;
	va_start(pinconfig, numPoint);
 8008f2a:	f107 0320 	add.w	r3, r7, #32
 8008f2e:	60bb      	str	r3, [r7, #8]
	float* point;
	for(int i=0; i<numPoint; i++){
 8008f30:	2300      	movs	r3, #0
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e021      	b.n	8008f7a <registerPath+0x5a>
		point = va_arg(pinconfig, float *);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	1d1a      	adds	r2, r3, #4
 8008f3a:	60ba      	str	r2, [r7, #8]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<7; j++){
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	e013      	b.n	8008f6e <registerPath+0x4e>
			path[i][j] = point[j];
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	18d0      	adds	r0, r2, r3
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	1899      	adds	r1, r3, r2
 8008f5e:	6802      	ldr	r2, [r0, #0]
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	601a      	str	r2, [r3, #0]
		for(int j=0; j<7; j++){
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	2b06      	cmp	r3, #6
 8008f72:	dde8      	ble.n	8008f46 <registerPath+0x26>
	for(int i=0; i<numPoint; i++){
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	3301      	adds	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	dbd9      	blt.n	8008f36 <registerPath+0x16>
		}
	}
	va_end(pinconfig);
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	b003      	add	sp, #12
 8008f90:	4770      	bx	lr
	...

08008f94 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008f9a:	f00a fe37 	bl	8013c0c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8008f9e:	f7fa f989 	bl	80032b4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008fae:	48c4      	ldr	r0, [pc, #784]	; (80092c0 <Initialize+0x32c>)
 8008fb0:	f7f8 faa2 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	2302      	movs	r3, #2
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008fc0:	48bf      	ldr	r0, [pc, #764]	; (80092c0 <Initialize+0x32c>)
 8008fc2:	f7f8 fa99 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	2302      	movs	r3, #2
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fd2:	48bb      	ldr	r0, [pc, #748]	; (80092c0 <Initialize+0x32c>)
 8008fd4:	f7f8 fa90 	bl	80014f8 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008fd8:	2301      	movs	r3, #1
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	2302      	movs	r3, #2
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2180      	movs	r1, #128	; 0x80
 8008fe2:	48b8      	ldr	r0, [pc, #736]	; (80092c4 <Initialize+0x330>)
 8008fe4:	f7f8 fa88 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2302      	movs	r3, #2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2101      	movs	r1, #1
 8008ff2:	48b5      	ldr	r0, [pc, #724]	; (80092c8 <Initialize+0x334>)
 8008ff4:	f7f8 fa80 	bl	80014f8 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	2200      	movs	r2, #0
 8009000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009004:	48b0      	ldr	r0, [pc, #704]	; (80092c8 <Initialize+0x334>)
 8009006:	f7f8 fa77 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800900a:	2301      	movs	r3, #1
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	2301      	movs	r3, #1
 8009010:	2200      	movs	r2, #0
 8009012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009016:	48ac      	ldr	r0, [pc, #688]	; (80092c8 <Initialize+0x334>)
 8009018:	f7f8 fa6e 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800901c:	2301      	movs	r3, #1
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	2301      	movs	r3, #1
 8009022:	2200      	movs	r2, #0
 8009024:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009028:	48a7      	ldr	r0, [pc, #668]	; (80092c8 <Initialize+0x334>)
 800902a:	f7f8 fa65 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800902e:	2301      	movs	r3, #1
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2301      	movs	r3, #1
 8009034:	2200      	movs	r2, #0
 8009036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800903a:	48a3      	ldr	r0, [pc, #652]	; (80092c8 <Initialize+0x334>)
 800903c:	f7f8 fa5c 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009040:	2301      	movs	r3, #1
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	2301      	movs	r3, #1
 8009046:	2200      	movs	r2, #0
 8009048:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800904c:	489d      	ldr	r0, [pc, #628]	; (80092c4 <Initialize+0x330>)
 800904e:	f7f8 fa53 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009052:	2301      	movs	r3, #1
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	2301      	movs	r3, #1
 8009058:	2200      	movs	r2, #0
 800905a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800905e:	4899      	ldr	r0, [pc, #612]	; (80092c4 <Initialize+0x330>)
 8009060:	f7f8 fa4a 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009064:	2301      	movs	r3, #1
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2301      	movs	r3, #1
 800906a:	2200      	movs	r2, #0
 800906c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009070:	4896      	ldr	r0, [pc, #600]	; (80092cc <Initialize+0x338>)
 8009072:	f7f8 fa41 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009076:	2301      	movs	r3, #1
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	2301      	movs	r3, #1
 800907c:	2200      	movs	r2, #0
 800907e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009082:	4892      	ldr	r0, [pc, #584]	; (80092cc <Initialize+0x338>)
 8009084:	f7f8 fa38 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8009088:	2301      	movs	r3, #1
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2301      	movs	r3, #1
 800908e:	2200      	movs	r2, #0
 8009090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009094:	488a      	ldr	r0, [pc, #552]	; (80092c0 <Initialize+0x32c>)
 8009096:	f7f8 fa2f 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800909a:	2301      	movs	r3, #1
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	2301      	movs	r3, #1
 80090a0:	2200      	movs	r2, #0
 80090a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090a6:	488a      	ldr	r0, [pc, #552]	; (80092d0 <Initialize+0x33c>)
 80090a8:	f7f8 fa26 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090ac:	2301      	movs	r3, #1
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	2301      	movs	r3, #1
 80090b2:	2200      	movs	r2, #0
 80090b4:	2108      	movs	r1, #8
 80090b6:	4885      	ldr	r0, [pc, #532]	; (80092cc <Initialize+0x338>)
 80090b8:	f7f8 fa1e 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090bc:	2301      	movs	r3, #1
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	2301      	movs	r3, #1
 80090c2:	2200      	movs	r2, #0
 80090c4:	2110      	movs	r1, #16
 80090c6:	4881      	ldr	r0, [pc, #516]	; (80092cc <Initialize+0x338>)
 80090c8:	f7f8 fa16 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090cc:	2301      	movs	r3, #1
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2301      	movs	r3, #1
 80090d2:	2200      	movs	r2, #0
 80090d4:	2180      	movs	r1, #128	; 0x80
 80090d6:	487d      	ldr	r0, [pc, #500]	; (80092cc <Initialize+0x338>)
 80090d8:	f7f8 fa0e 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090dc:	2301      	movs	r3, #1
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	2301      	movs	r3, #1
 80090e2:	2200      	movs	r2, #0
 80090e4:	2120      	movs	r1, #32
 80090e6:	4877      	ldr	r0, [pc, #476]	; (80092c4 <Initialize+0x330>)
 80090e8:	f7f8 fa06 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090ec:	2301      	movs	r3, #1
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	2301      	movs	r3, #1
 80090f2:	2200      	movs	r2, #0
 80090f4:	2140      	movs	r1, #64	; 0x40
 80090f6:	4873      	ldr	r0, [pc, #460]	; (80092c4 <Initialize+0x330>)
 80090f8:	f7f8 f9fe 	bl	80014f8 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80090fc:	2301      	movs	r3, #1
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2301      	movs	r3, #1
 8009102:	2200      	movs	r2, #0
 8009104:	2101      	movs	r1, #1
 8009106:	486e      	ldr	r0, [pc, #440]	; (80092c0 <Initialize+0x32c>)
 8009108:	f7f8 f9f6 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800910c:	2301      	movs	r3, #1
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2301      	movs	r3, #1
 8009112:	2200      	movs	r2, #0
 8009114:	2102      	movs	r1, #2
 8009116:	486a      	ldr	r0, [pc, #424]	; (80092c0 <Initialize+0x32c>)
 8009118:	f7f8 f9ee 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800911c:	2301      	movs	r3, #1
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	2301      	movs	r3, #1
 8009122:	2200      	movs	r2, #0
 8009124:	2104      	movs	r1, #4
 8009126:	4866      	ldr	r0, [pc, #408]	; (80092c0 <Initialize+0x32c>)
 8009128:	f7f8 f9e6 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800912c:	2301      	movs	r3, #1
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2301      	movs	r3, #1
 8009132:	2200      	movs	r2, #0
 8009134:	2108      	movs	r1, #8
 8009136:	4862      	ldr	r0, [pc, #392]	; (80092c0 <Initialize+0x32c>)
 8009138:	f7f8 f9de 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800913c:	2301      	movs	r3, #1
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2301      	movs	r3, #1
 8009142:	2200      	movs	r2, #0
 8009144:	2110      	movs	r1, #16
 8009146:	485e      	ldr	r0, [pc, #376]	; (80092c0 <Initialize+0x32c>)
 8009148:	f7f8 f9d6 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800914c:	2301      	movs	r3, #1
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	2301      	movs	r3, #1
 8009152:	2200      	movs	r2, #0
 8009154:	2120      	movs	r1, #32
 8009156:	485a      	ldr	r0, [pc, #360]	; (80092c0 <Initialize+0x32c>)
 8009158:	f7f8 f9ce 	bl	80014f8 <GPIOPinsInit>

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 800915c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009160:	9303      	str	r3, [sp, #12]
 8009162:	4b59      	ldr	r3, [pc, #356]	; (80092c8 <Initialize+0x334>)
 8009164:	9302      	str	r3, [sp, #8]
 8009166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	4b56      	ldr	r3, [pc, #344]	; (80092c8 <Initialize+0x334>)
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	4a55      	ldr	r2, [pc, #340]	; (80092c8 <Initialize+0x334>)
 8009174:	2101      	movs	r1, #1
 8009176:	4857      	ldr	r0, [pc, #348]	; (80092d4 <Initialize+0x340>)
 8009178:	f7f9 f832 	bl	80021e0 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800917c:	2003      	movs	r0, #3
 800917e:	f00c f91c 	bl	80153ba <HAL_NVIC_SetPriorityGrouping>

	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8009182:	4b55      	ldr	r3, [pc, #340]	; (80092d8 <Initialize+0x344>)
 8009184:	2208      	movs	r2, #8
 8009186:	4955      	ldr	r1, [pc, #340]	; (80092dc <Initialize+0x348>)
 8009188:	4855      	ldr	r0, [pc, #340]	; (80092e0 <Initialize+0x34c>)
 800918a:	f7fa fdeb 	bl	8003d64 <I2CX_DMA_RX_Init>
	I2CX_DMA_RX_Init(&hi2c2, &hi2c2_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800918e:	4b52      	ldr	r3, [pc, #328]	; (80092d8 <Initialize+0x344>)
 8009190:	2208      	movs	r2, #8
 8009192:	4954      	ldr	r1, [pc, #336]	; (80092e4 <Initialize+0x350>)
 8009194:	4854      	ldr	r0, [pc, #336]	; (80092e8 <Initialize+0x354>)
 8009196:	f7fa fde5 	bl	8003d64 <I2CX_DMA_RX_Init>
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
//	UARTInit(&huart2, 115200, DISABLE);
	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 800919a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800919e:	4953      	ldr	r1, [pc, #332]	; (80092ec <Initialize+0x358>)
 80091a0:	4853      	ldr	r0, [pc, #332]	; (80092f0 <Initialize+0x35c>)
 80091a2:	f7fa fb95 	bl	80038d0 <UARTx_DMA_Rx_Init>
//	UARTInit(&huart2, 115200, ENABLE);					//ros
	UARTInit(&huart4, 115200, ENABLE);					//tfmini
 80091a6:	2201      	movs	r2, #1
 80091a8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80091ac:	4851      	ldr	r0, [pc, #324]	; (80092f4 <Initialize+0x360>)
 80091ae:	f7fa fa87 	bl	80036c0 <UARTInit>
	UARTInit(&huart5, 115200, DISABLE);
 80091b2:	2200      	movs	r2, #0
 80091b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80091b8:	484f      	ldr	r0, [pc, #316]	; (80092f8 <Initialize+0x364>)
 80091ba:	f7fa fa81 	bl	80036c0 <UARTInit>

	QEIInit(&htim1);
 80091be:	484f      	ldr	r0, [pc, #316]	; (80092fc <Initialize+0x368>)
 80091c0:	f7f8 fd06 	bl	8001bd0 <QEIInit>
	QEIInit(&htim4);
 80091c4:	484e      	ldr	r0, [pc, #312]	; (8009300 <Initialize+0x36c>)
 80091c6:	f7f8 fd03 	bl	8001bd0 <QEIInit>
//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 80091ca:	2300      	movs	r3, #0
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	2300      	movs	r3, #0
 80091d0:	9301      	str	r3, [sp, #4]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	2104      	movs	r1, #4
 80091dc:	4849      	ldr	r0, [pc, #292]	; (8009304 <Initialize+0x370>)
 80091de:	f7fa fc5b 	bl	8003a98 <CANxInit>

	PWMTimeBaseInit(&htim3, 20000, 3);
 80091e2:	2203      	movs	r2, #3
 80091e4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80091e8:	4847      	ldr	r0, [pc, #284]	; (8009308 <Initialize+0x374>)
 80091ea:	f7f8 fa7f 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 80091ee:	2301      	movs	r3, #1
 80091f0:	4a34      	ldr	r2, [pc, #208]	; (80092c4 <Initialize+0x330>)
 80091f2:	2108      	movs	r1, #8
 80091f4:	4844      	ldr	r0, [pc, #272]	; (8009308 <Initialize+0x374>)
 80091f6:	f7f8 fb5f 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 80091fa:	2302      	movs	r3, #2
 80091fc:	4a31      	ldr	r2, [pc, #196]	; (80092c4 <Initialize+0x330>)
 80091fe:	210c      	movs	r1, #12
 8009200:	4841      	ldr	r0, [pc, #260]	; (8009308 <Initialize+0x374>)
 8009202:	f7f8 fb59 	bl	80018b8 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 2000, 88);
 8009206:	2258      	movs	r2, #88	; 0x58
 8009208:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800920c:	483f      	ldr	r0, [pc, #252]	; (800930c <Initialize+0x378>)
 800920e:	f7f8 fa6d 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8009212:	2301      	movs	r3, #1
 8009214:	4a2e      	ldr	r2, [pc, #184]	; (80092d0 <Initialize+0x33c>)
 8009216:	2100      	movs	r1, #0
 8009218:	483c      	ldr	r0, [pc, #240]	; (800930c <Initialize+0x378>)
 800921a:	f7f8 fb4d 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 800921e:	2302      	movs	r3, #2
 8009220:	4a2b      	ldr	r2, [pc, #172]	; (80092d0 <Initialize+0x33c>)
 8009222:	2104      	movs	r1, #4
 8009224:	4839      	ldr	r0, [pc, #228]	; (800930c <Initialize+0x378>)
 8009226:	f7f8 fb47 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 800922a:	2304      	movs	r3, #4
 800922c:	4a28      	ldr	r2, [pc, #160]	; (80092d0 <Initialize+0x33c>)
 800922e:	2108      	movs	r1, #8
 8009230:	4836      	ldr	r0, [pc, #216]	; (800930c <Initialize+0x378>)
 8009232:	f7f8 fb41 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8009236:	2308      	movs	r3, #8
 8009238:	4a25      	ldr	r2, [pc, #148]	; (80092d0 <Initialize+0x33c>)
 800923a:	210c      	movs	r1, #12
 800923c:	4833      	ldr	r0, [pc, #204]	; (800930c <Initialize+0x378>)
 800923e:	f7f8 fb3b 	bl	80018b8 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 2000, 4);
 8009242:	2204      	movs	r2, #4
 8009244:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009248:	4831      	ldr	r0, [pc, #196]	; (8009310 <Initialize+0x37c>)
 800924a:	f7f8 fa4f 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 800924e:	2320      	movs	r3, #32
 8009250:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <Initialize+0x334>)
 8009252:	2100      	movs	r1, #0
 8009254:	482e      	ldr	r0, [pc, #184]	; (8009310 <Initialize+0x37c>)
 8009256:	f7f8 fb2f 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 800925a:	2340      	movs	r3, #64	; 0x40
 800925c:	4a1a      	ldr	r2, [pc, #104]	; (80092c8 <Initialize+0x334>)
 800925e:	2104      	movs	r1, #4
 8009260:	482b      	ldr	r0, [pc, #172]	; (8009310 <Initialize+0x37c>)
 8009262:	f7f8 fb29 	bl	80018b8 <PWMChannelConfig>

	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8009266:	2380      	movs	r3, #128	; 0x80
 8009268:	9302      	str	r3, [sp, #8]
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	4b29      	ldr	r3, [pc, #164]	; (8009314 <Initialize+0x380>)
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	220c      	movs	r2, #12
 8009276:	4924      	ldr	r1, [pc, #144]	; (8009308 <Initialize+0x374>)
 8009278:	4827      	ldr	r0, [pc, #156]	; (8009318 <Initialize+0x384>)
 800927a:	f7f7 fff8 	bl	800126e <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 800927e:	2320      	movs	r3, #32
 8009280:	9302      	str	r3, [sp, #8]
 8009282:	2310      	movs	r3, #16
 8009284:	9301      	str	r3, [sp, #4]
 8009286:	4b23      	ldr	r3, [pc, #140]	; (8009314 <Initialize+0x380>)
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	2300      	movs	r3, #0
 800928c:	2208      	movs	r2, #8
 800928e:	491e      	ldr	r1, [pc, #120]	; (8009308 <Initialize+0x374>)
 8009290:	4822      	ldr	r0, [pc, #136]	; (800931c <Initialize+0x388>)
 8009292:	f7f7 ffec 	bl	800126e <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8009296:	2308      	movs	r3, #8
 8009298:	9302      	str	r3, [sp, #8]
 800929a:	2304      	movs	r3, #4
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	4b1d      	ldr	r3, [pc, #116]	; (8009314 <Initialize+0x380>)
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	2300      	movs	r3, #0
 80092a4:	2200      	movs	r2, #0
 80092a6:	491a      	ldr	r1, [pc, #104]	; (8009310 <Initialize+0x37c>)
 80092a8:	481d      	ldr	r0, [pc, #116]	; (8009320 <Initialize+0x38c>)
 80092aa:	f7f7 ffe0 	bl	800126e <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 80092ae:	2302      	movs	r3, #2
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	2301      	movs	r3, #1
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	4b17      	ldr	r3, [pc, #92]	; (8009314 <Initialize+0x380>)
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	2300      	movs	r3, #0
 80092bc:	2204      	movs	r2, #4
 80092be:	e031      	b.n	8009324 <Initialize+0x390>
 80092c0:	40020800 	.word	0x40020800
 80092c4:	40020400 	.word	0x40020400
 80092c8:	40021000 	.word	0x40021000
 80092cc:	40020c00 	.word	0x40020c00
 80092d0:	40020000 	.word	0x40020000
 80092d4:	200098d0 	.word	0x200098d0
 80092d8:	00061a80 	.word	0x00061a80
 80092dc:	2000a3e4 	.word	0x2000a3e4
 80092e0:	200077ac 	.word	0x200077ac
 80092e4:	200071f4 	.word	0x200071f4
 80092e8:	20007804 	.word	0x20007804
 80092ec:	20006618 	.word	0x20006618
 80092f0:	20006c74 	.word	0x20006c74
 80092f4:	20006bf4 	.word	0x20006bf4
 80092f8:	200068c4 	.word	0x200068c4
 80092fc:	20006b30 	.word	0x20006b30
 8009300:	200066bc 	.word	0x200066bc
 8009304:	20007128 	.word	0x20007128
 8009308:	20006880 	.word	0x20006880
 800930c:	20006840 	.word	0x20006840
 8009310:	20006b70 	.word	0x20006b70
 8009314:	200098ec 	.word	0x200098ec
 8009318:	2000aa24 	.word	0x2000aa24
 800931c:	20007cd4 	.word	0x20007cd4
 8009320:	20007858 	.word	0x20007858
 8009324:	497d      	ldr	r1, [pc, #500]	; (800951c <Initialize+0x588>)
 8009326:	487e      	ldr	r0, [pc, #504]	; (8009520 <Initialize+0x58c>)
 8009328:	f7f7 ffa1 	bl	800126e <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 800932c:	2380      	movs	r3, #128	; 0x80
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	2340      	movs	r3, #64	; 0x40
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	4b7b      	ldr	r3, [pc, #492]	; (8009524 <Initialize+0x590>)
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	2300      	movs	r3, #0
 800933a:	220c      	movs	r2, #12
 800933c:	497a      	ldr	r1, [pc, #488]	; (8009528 <Initialize+0x594>)
 800933e:	487b      	ldr	r0, [pc, #492]	; (800952c <Initialize+0x598>)
 8009340:	f7f7 ff95 	bl	800126e <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8009344:	2320      	movs	r3, #32
 8009346:	9302      	str	r3, [sp, #8]
 8009348:	2310      	movs	r3, #16
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	4b75      	ldr	r3, [pc, #468]	; (8009524 <Initialize+0x590>)
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	2300      	movs	r3, #0
 8009352:	2208      	movs	r2, #8
 8009354:	4974      	ldr	r1, [pc, #464]	; (8009528 <Initialize+0x594>)
 8009356:	4876      	ldr	r0, [pc, #472]	; (8009530 <Initialize+0x59c>)
 8009358:	f7f7 ff89 	bl	800126e <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 800935c:	2308      	movs	r3, #8
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	2304      	movs	r3, #4
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	4b6f      	ldr	r3, [pc, #444]	; (8009524 <Initialize+0x590>)
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	2300      	movs	r3, #0
 800936a:	2204      	movs	r2, #4
 800936c:	496e      	ldr	r1, [pc, #440]	; (8009528 <Initialize+0x594>)
 800936e:	4871      	ldr	r0, [pc, #452]	; (8009534 <Initialize+0x5a0>)
 8009370:	f7f7 ff7d 	bl	800126e <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8009374:	2302      	movs	r3, #2
 8009376:	9302      	str	r3, [sp, #8]
 8009378:	2301      	movs	r3, #1
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	4b69      	ldr	r3, [pc, #420]	; (8009524 <Initialize+0x590>)
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	2300      	movs	r3, #0
 8009382:	2200      	movs	r2, #0
 8009384:	4968      	ldr	r1, [pc, #416]	; (8009528 <Initialize+0x594>)
 8009386:	486c      	ldr	r0, [pc, #432]	; (8009538 <Initialize+0x5a4>)
 8009388:	f7f7 ff71 	bl	800126e <BDCInit>

	//Laser
	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
 800938c:	2302      	movs	r3, #2
 800938e:	4a6b      	ldr	r2, [pc, #428]	; (800953c <Initialize+0x5a8>)
 8009390:	496b      	ldr	r1, [pc, #428]	; (8009540 <Initialize+0x5ac>)
 8009392:	486c      	ldr	r0, [pc, #432]	; (8009544 <Initialize+0x5b0>)
 8009394:	f7f7 fe2a 	bl	8000fec <ADC_DMAxInit>
	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
 8009398:	2301      	movs	r3, #1
 800939a:	4a6b      	ldr	r2, [pc, #428]	; (8009548 <Initialize+0x5b4>)
 800939c:	210a      	movs	r1, #10
 800939e:	4869      	ldr	r0, [pc, #420]	; (8009544 <Initialize+0x5b0>)
 80093a0:	f7f7 ff2a 	bl	80011f8 <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);
 80093a4:	2302      	movs	r3, #2
 80093a6:	4a68      	ldr	r2, [pc, #416]	; (8009548 <Initialize+0x5b4>)
 80093a8:	210b      	movs	r1, #11
 80093aa:	4866      	ldr	r0, [pc, #408]	; (8009544 <Initialize+0x5b0>)
 80093ac:	f7f7 ff24 	bl	80011f8 <ADC_Channel_Config>

	KalmanFilterInit(1, &(adc.ADC_value[0]), &x_kfo, 7.27, 16.03, 0.15, &kf_adc_x);
 80093b0:	4b66      	ldr	r3, [pc, #408]	; (800954c <Initialize+0x5b8>)
 80093b2:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8009550 <Initialize+0x5bc>
 80093b6:	eddf 0a67 	vldr	s1, [pc, #412]	; 8009554 <Initialize+0x5c0>
 80093ba:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8009558 <Initialize+0x5c4>
 80093be:	4a67      	ldr	r2, [pc, #412]	; (800955c <Initialize+0x5c8>)
 80093c0:	4967      	ldr	r1, [pc, #412]	; (8009560 <Initialize+0x5cc>)
 80093c2:	2001      	movs	r0, #1
 80093c4:	f7fa fe46 	bl	8004054 <KalmanFilterInit>
	KalmanFilterInit(1, &(adc.ADC_value[1]), &y_kfo, 7.5, 12.01, 2.0, &kf_adc_y);
 80093c8:	4b66      	ldr	r3, [pc, #408]	; (8009564 <Initialize+0x5d0>)
 80093ca:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80093ce:	eddf 0a66 	vldr	s1, [pc, #408]	; 8009568 <Initialize+0x5d4>
 80093d2:	eeb1 0a0e 	vmov.f32	s0, #30	; 0x40f00000  7.5
 80093d6:	4a65      	ldr	r2, [pc, #404]	; (800956c <Initialize+0x5d8>)
 80093d8:	4965      	ldr	r1, [pc, #404]	; (8009570 <Initialize+0x5dc>)
 80093da:	2001      	movs	r0, #1
 80093dc:	f7fa fe3a 	bl	8004054 <KalmanFilterInit>

	Moving_Average_Init (&move_aveX, &x_kfo, &x_kfoav);
 80093e0:	4a64      	ldr	r2, [pc, #400]	; (8009574 <Initialize+0x5e0>)
 80093e2:	495e      	ldr	r1, [pc, #376]	; (800955c <Initialize+0x5c8>)
 80093e4:	4864      	ldr	r0, [pc, #400]	; (8009578 <Initialize+0x5e4>)
 80093e6:	f7fd f80f 	bl	8006408 <Moving_Average_Init>
	Moving_Average_Init (&move_aveY, &y_kfo, &y_kfoav);
 80093ea:	4a64      	ldr	r2, [pc, #400]	; (800957c <Initialize+0x5e8>)
 80093ec:	495f      	ldr	r1, [pc, #380]	; (800956c <Initialize+0x5d8>)
 80093ee:	4864      	ldr	r0, [pc, #400]	; (8009580 <Initialize+0x5ec>)
 80093f0:	f7fd f80a 	bl	8006408 <Moving_Average_Init>

	LaserInit (80, 4052, 0.03, 7.0, &x_kfoav, &laser_dist_x, &X_laser);
 80093f4:	4a63      	ldr	r2, [pc, #396]	; (8009584 <Initialize+0x5f0>)
 80093f6:	4964      	ldr	r1, [pc, #400]	; (8009588 <Initialize+0x5f4>)
 80093f8:	485e      	ldr	r0, [pc, #376]	; (8009574 <Initialize+0x5e0>)
 80093fa:	eef1 1a0c 	vmov.f32	s3, #28	; 0x40e00000  7.0
 80093fe:	ed9f 1a63 	vldr	s2, [pc, #396]	; 800958c <Initialize+0x5f8>
 8009402:	eddf 0a63 	vldr	s1, [pc, #396]	; 8009590 <Initialize+0x5fc>
 8009406:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8009594 <Initialize+0x600>
 800940a:	f7fa ff0d 	bl	8004228 <LaserInit>
	LaserInit (82, 4072, 0.03, 7.0, &y_kfoav, &laser_dist_y, &Y_laser);
 800940e:	4a62      	ldr	r2, [pc, #392]	; (8009598 <Initialize+0x604>)
 8009410:	4962      	ldr	r1, [pc, #392]	; (800959c <Initialize+0x608>)
 8009412:	485a      	ldr	r0, [pc, #360]	; (800957c <Initialize+0x5e8>)
 8009414:	eef1 1a0c 	vmov.f32	s3, #28	; 0x40e00000  7.0
 8009418:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 800958c <Initialize+0x5f8>
 800941c:	eddf 0a60 	vldr	s1, [pc, #384]	; 80095a0 <Initialize+0x60c>
 8009420:	ed9f 0a60 	vldr	s0, [pc, #384]	; 80095a4 <Initialize+0x610>
 8009424:	f7fa ff00 	bl	8004228 <LaserInit>
//
//	PIDSourceInit(&pidi_laser_Y, &pido_laser_Y, &pid_laser_Y);
//	PIDGainInit(0.001, 1.0, 1.0/0.2, 3.0, 2.0, 0.0, 0.00, 30, &pid_laser_Y);
//	PIDDelayInit(&pid_laser_Y);

	ServoxInit(&SERVO_LagoriF1, &htim5, GPIOA, GPIO_PIN_3, TIM_CHANNEL_4);
 8009428:	230c      	movs	r3, #12
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	2308      	movs	r3, #8
 800942e:	4a5e      	ldr	r2, [pc, #376]	; (80095a8 <Initialize+0x614>)
 8009430:	493d      	ldr	r1, [pc, #244]	; (8009528 <Initialize+0x594>)
 8009432:	485e      	ldr	r0, [pc, #376]	; (80095ac <Initialize+0x618>)
 8009434:	f7ff fb00 	bl	8008a38 <ServoxInit>
	ServoxInit(&SERVO_LagoriF2, &htim5, GPIOA, GPIO_PIN_2, TIM_CHANNEL_3);
 8009438:	2308      	movs	r3, #8
 800943a:	9300      	str	r3, [sp, #0]
 800943c:	2304      	movs	r3, #4
 800943e:	4a5a      	ldr	r2, [pc, #360]	; (80095a8 <Initialize+0x614>)
 8009440:	4939      	ldr	r1, [pc, #228]	; (8009528 <Initialize+0x594>)
 8009442:	485b      	ldr	r0, [pc, #364]	; (80095b0 <Initialize+0x61c>)
 8009444:	f7ff faf8 	bl	8008a38 <ServoxInit>
	ServoxInit(&SERVO_BallV, &htim5, GPIOA, GPIO_PIN_1, TIM_CHANNEL_2);
 8009448:	2304      	movs	r3, #4
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	2302      	movs	r3, #2
 800944e:	4a56      	ldr	r2, [pc, #344]	; (80095a8 <Initialize+0x614>)
 8009450:	4935      	ldr	r1, [pc, #212]	; (8009528 <Initialize+0x594>)
 8009452:	4858      	ldr	r0, [pc, #352]	; (80095b4 <Initialize+0x620>)
 8009454:	f7ff faf0 	bl	8008a38 <ServoxInit>
	ServoxInit(&SERVO_BallH, &htim5, GPIOA, GPIO_PIN_0, TIM_CHANNEL_1);
 8009458:	2300      	movs	r3, #0
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	2301      	movs	r3, #1
 800945e:	4a52      	ldr	r2, [pc, #328]	; (80095a8 <Initialize+0x614>)
 8009460:	4931      	ldr	r1, [pc, #196]	; (8009528 <Initialize+0x594>)
 8009462:	4855      	ldr	r0, [pc, #340]	; (80095b8 <Initialize+0x624>)
 8009464:	f7ff fae8 	bl	8008a38 <ServoxInit>

	ServoInitPulseLimit(&SERVO_BallV, svbvrealu_pulse, svbvd_pulse);
 8009468:	f640 12f6 	movw	r2, #2550	; 0x9f6
 800946c:	f240 11a9 	movw	r1, #425	; 0x1a9
 8009470:	4850      	ldr	r0, [pc, #320]	; (80095b4 <Initialize+0x620>)
 8009472:	f7ff fc48 	bl	8008d06 <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_BallH, svbhB2_pulse, svbhA2_pulse);
 8009476:	f640 0276 	movw	r2, #2166	; 0x876
 800947a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800947e:	484e      	ldr	r0, [pc, #312]	; (80095b8 <Initialize+0x624>)
 8009480:	f7ff fc41 	bl	8008d06 <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_LagoriF1, svlf, svloff);
 8009484:	f240 729e 	movw	r2, #1950	; 0x79e
 8009488:	f240 2126 	movw	r1, #550	; 0x226
 800948c:	4847      	ldr	r0, [pc, #284]	; (80095ac <Initialize+0x618>)
 800948e:	f7ff fc3a 	bl	8008d06 <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_LagoriF2, svloff2, svlf2);
 8009492:	f640 02da 	movw	r2, #2266	; 0x8da
 8009496:	f44f 7161 	mov.w	r1, #900	; 0x384
 800949a:	4845      	ldr	r0, [pc, #276]	; (80095b0 <Initialize+0x61c>)
 800949c:	f7ff fc33 	bl	8008d06 <ServoInitPulseLimit>
//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);

	//Unused peripheral pins can be used as GPIO Input or Output
	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094a0:	2301      	movs	r3, #1
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	2302      	movs	r3, #2
 80094a6:	2201      	movs	r2, #1
 80094a8:	2140      	movs	r1, #64	; 0x40
 80094aa:	483f      	ldr	r0, [pc, #252]	; (80095a8 <Initialize+0x614>)
 80094ac:	f7f8 f824 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_MOSI_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094b0:	2301      	movs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	2302      	movs	r3, #2
 80094b6:	2201      	movs	r2, #1
 80094b8:	2180      	movs	r1, #128	; 0x80
 80094ba:	483b      	ldr	r0, [pc, #236]	; (80095a8 <Initialize+0x614>)
 80094bc:	f7f8 f81c 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_SCK_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094c0:	2301      	movs	r3, #1
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2302      	movs	r3, #2
 80094c6:	2201      	movs	r2, #1
 80094c8:	2120      	movs	r1, #32
 80094ca:	4837      	ldr	r0, [pc, #220]	; (80095a8 <Initialize+0x614>)
 80094cc:	f7f8 f814 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_NSS_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094d0:	2301      	movs	r3, #1
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2302      	movs	r3, #2
 80094d6:	2201      	movs	r2, #1
 80094d8:	2110      	movs	r1, #16
 80094da:	4833      	ldr	r0, [pc, #204]	; (80095a8 <Initialize+0x614>)
 80094dc:	f7f8 f80c 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (UART3_Tx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094e0:	2301      	movs	r3, #1
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	2302      	movs	r3, #2
 80094e6:	2201      	movs	r2, #1
 80094e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80094ec:	4833      	ldr	r0, [pc, #204]	; (80095bc <Initialize+0x628>)
 80094ee:	f7f8 f803 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80094f2:	2301      	movs	r3, #1
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	2302      	movs	r3, #2
 80094f8:	2201      	movs	r2, #1
 80094fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80094fe:	482f      	ldr	r0, [pc, #188]	; (80095bc <Initialize+0x628>)
 8009500:	f7f7 fffa 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8009504:	2301      	movs	r3, #1
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2302      	movs	r3, #2
 800950a:	2201      	movs	r2, #1
 800950c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009510:	480d      	ldr	r0, [pc, #52]	; (8009548 <Initialize+0x5b4>)
 8009512:	f7f7 fff1 	bl	80014f8 <GPIOPinsInit>
}
 8009516:	bf00      	nop
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20006b70 	.word	0x20006b70
 8009520:	20009a14 	.word	0x20009a14
 8009524:	200098e8 	.word	0x200098e8
 8009528:	20006840 	.word	0x20006840
 800952c:	2000a8e0 	.word	0x2000a8e0
 8009530:	20009ac4 	.word	0x20009ac4
 8009534:	20009ae8 	.word	0x20009ae8
 8009538:	20007a5c 	.word	0x20007a5c
 800953c:	20006fcc 	.word	0x20006fcc
 8009540:	20006e94 	.word	0x20006e94
 8009544:	2000994c 	.word	0x2000994c
 8009548:	40020800 	.word	0x40020800
 800954c:	200071cc 	.word	0x200071cc
 8009550:	3e19999a 	.word	0x3e19999a
 8009554:	41803d71 	.word	0x41803d71
 8009558:	40e8a3d7 	.word	0x40e8a3d7
 800955c:	2000787c 	.word	0x2000787c
 8009560:	20009958 	.word	0x20009958
 8009564:	20009c1c 	.word	0x20009c1c
 8009568:	414028f6 	.word	0x414028f6
 800956c:	20007270 	.word	0x20007270
 8009570:	2000995a 	.word	0x2000995a
 8009574:	2000ab0c 	.word	0x2000ab0c
 8009578:	200095e8 	.word	0x200095e8
 800957c:	200074e0 	.word	0x200074e0
 8009580:	2000a6fc 	.word	0x2000a6fc
 8009584:	20009b84 	.word	0x20009b84
 8009588:	2000a6e8 	.word	0x2000a6e8
 800958c:	3cf5c28f 	.word	0x3cf5c28f
 8009590:	457d4000 	.word	0x457d4000
 8009594:	42a00000 	.word	0x42a00000
 8009598:	20009c88 	.word	0x20009c88
 800959c:	20007908 	.word	0x20007908
 80095a0:	457e8000 	.word	0x457e8000
 80095a4:	42a40000 	.word	0x42a40000
 80095a8:	40020000 	.word	0x40020000
 80095ac:	20009c44 	.word	0x20009c44
 80095b0:	2000aa48 	.word	0x2000aa48
 80095b4:	20009a58 	.word	0x20009a58
 80095b8:	20009bf4 	.word	0x20009bf4
 80095bc:	40020c00 	.word	0x40020c00

080095c0 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 80095c4:	4802      	ldr	r0, [pc, #8]	; (80095d0 <CAN1_RX0_IRQHandler+0x10>)
 80095c6:	f00b fbe3 	bl	8014d90 <HAL_CAN_IRQHandler>

}
 80095ca:	bf00      	nop
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20007128 	.word	0x20007128

080095d4 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 80095d8:	4802      	ldr	r0, [pc, #8]	; (80095e4 <CAN2_RX1_IRQHandler+0x10>)
 80095da:	f00b fbd9 	bl	8014d90 <HAL_CAN_IRQHandler>

}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	20007100 	.word	0x20007100

080095e8 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d004      	beq.n	8009602 <CAN_PROCESS+0x1a>
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d12f      	bne.n	800965c <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 80095fc:	f00a f986 	bl	801390c <decode_VESC>
		//		varF(DI, 0.5, 5.0),
		//		varF(DD, 0.000, 0.5),
		break;
 8009600:	e02c      	b.n	800965c <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 8009602:	4b18      	ldr	r3, [pc, #96]	; (8009664 <CAN_PROCESS+0x7c>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d107      	bne.n	800961a <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 800960a:	4b16      	ldr	r3, [pc, #88]	; (8009664 <CAN_PROCESS+0x7c>)
 800960c:	785a      	ldrb	r2, [r3, #1]
 800960e:	4b16      	ldr	r3, [pc, #88]	; (8009668 <CAN_PROCESS+0x80>)
 8009610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 8009614:	4b13      	ldr	r3, [pc, #76]	; (8009664 <CAN_PROCESS+0x7c>)
 8009616:	2202      	movs	r2, #2
 8009618:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <CAN_PROCESS+0x7c>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	2b11      	cmp	r3, #17
 8009620:	d11b      	bne.n	800965a <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 8009622:	4b12      	ldr	r3, [pc, #72]	; (800966c <CAN_PROCESS+0x84>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d117      	bne.n	800965a <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <CAN_PROCESS+0x7c>)
 800962c:	785a      	ldrb	r2, [r3, #1]
 800962e:	4b0e      	ldr	r3, [pc, #56]	; (8009668 <CAN_PROCESS+0x80>)
 8009630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8009634:	4b0e      	ldr	r3, [pc, #56]	; (8009670 <CAN_PROCESS+0x88>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a0b      	ldr	r2, [pc, #44]	; (8009668 <CAN_PROCESS+0x80>)
 800963a:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 800963c:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <CAN_PROCESS+0x88>)
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a09      	ldr	r2, [pc, #36]	; (8009668 <CAN_PROCESS+0x80>)
 8009642:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <CAN_PROCESS+0x8c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a07      	ldr	r2, [pc, #28]	; (8009668 <CAN_PROCESS+0x80>)
 800964a:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <CAN_PROCESS+0x8c>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a05      	ldr	r2, [pc, #20]	; (8009668 <CAN_PROCESS+0x80>)
 8009652:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 8009654:	4b03      	ldr	r3, [pc, #12]	; (8009664 <CAN_PROCESS+0x7c>)
 8009656:	2203      	movs	r2, #3
 8009658:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 800965a:	bf00      	nop

	}

}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	2000768c 	.word	0x2000768c
 8009668:	200093ec 	.word	0x200093ec
 800966c:	20000914 	.word	0x20000914
 8009670:	2000a02c 	.word	0x2000a02c
 8009674:	2000a1fc 	.word	0x2000a1fc

08009678 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8009678:	b5b0      	push	{r4, r5, r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4aa4      	ldr	r2, [pc, #656]	; (8009914 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	f040 8122 	bne.w	80098ce <HAL_CAN_RxFifo0MsgPendingCallback+0x256>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 800968a:	f107 030c 	add.w	r3, r7, #12
 800968e:	4aa2      	ldr	r2, [pc, #648]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8009690:	2100      	movs	r1, #0
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f00b fa44 	bl	8014b20 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 8009698:	4b9f      	ldr	r3, [pc, #636]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	2b04      	cmp	r3, #4
 800969e:	d117      	bne.n	80096d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 80096a0:	4a9e      	ldr	r2, [pc, #632]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80096a2:	4b9d      	ldr	r3, [pc, #628]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80096a4:	4614      	mov	r4, r2
 80096a6:	461d      	mov	r5, r3
 80096a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80096ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80096b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80096b4:	4b99      	ldr	r3, [pc, #612]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80096b6:	331c      	adds	r3, #28
 80096b8:	f107 020c 	add.w	r2, r7, #12
 80096bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096c0:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80096c4:	4895      	ldr	r0, [pc, #596]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80096c6:	f00a fa41 	bl	8013b4c <set_rx_frames>
			source = VESC_PACKET;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
 80096ce:	e0f5      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
		}else{
			source = RNS_PACKET;
 80096d0:	2300      	movs	r3, #0
 80096d2:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 80096d4:	4b90      	ldr	r3, [pc, #576]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 80096dc:	d06a      	beq.n	80097b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 80096de:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 80096e2:	f200 80e8 	bhi.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 80096e6:	f240 52cf 	movw	r2, #1487	; 0x5cf
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d07f      	beq.n	80097ee <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
 80096ee:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80096f2:	f080 80e0 	bcs.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 80096f6:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80096fa:	4293      	cmp	r3, r2
 80096fc:	f000 80cf 	beq.w	800989e <HAL_CAN_RxFifo0MsgPendingCallback+0x226>
 8009700:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
 8009704:	f080 80d7 	bcs.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 8009708:	f240 32cf 	movw	r2, #975	; 0x3cf
 800970c:	4293      	cmp	r3, r2
 800970e:	f000 80ba 	beq.w	8009886 <HAL_CAN_RxFifo0MsgPendingCallback+0x20e>
 8009712:	f5b3 7f74 	cmp.w	r3, #976	; 0x3d0
 8009716:	f080 80ce 	bcs.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 800971a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800971e:	4293      	cmp	r3, r2
 8009720:	f000 80a5 	beq.w	800986e <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
 8009724:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8009728:	f080 80c5 	bcs.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 800972c:	2b1c      	cmp	r3, #28
 800972e:	d81b      	bhi.n	8009768 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8009730:	2b14      	cmp	r3, #20
 8009732:	f0c0 80c0 	bcc.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 8009736:	3b14      	subs	r3, #20
 8009738:	2b08      	cmp	r3, #8
 800973a:	f200 80bc 	bhi.w	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 800973e:	a201      	add	r2, pc, #4	; (adr r2, 8009744 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8009740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009744:	08009773 	.word	0x08009773
 8009748:	0800978b 	.word	0x0800978b
 800974c:	0800979d 	.word	0x0800979d
 8009750:	080098b7 	.word	0x080098b7
 8009754:	080098b7 	.word	0x080098b7
 8009758:	080098b7 	.word	0x080098b7
 800975c:	080098b7 	.word	0x080098b7
 8009760:	080098b7 	.word	0x080098b7
 8009764:	080098b7 	.word	0x080098b7
 8009768:	f240 12cf 	movw	r2, #463	; 0x1cf
 800976c:	4293      	cmp	r3, r2
 800976e:	d078      	beq.n	8009862 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ea>
				Faul_t.statusword = *((uint16_t *)aData);
				Faul_t.tor_act = *((int *)&aData[2]);
			}

			default:
				break;
 8009770:	e0a1      	b.n	80098b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8009772:	4b69      	ldr	r3, [pc, #420]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8009774:	691a      	ldr	r2, [r3, #16]
 8009776:	f107 030c 	add.w	r3, r7, #12
 800977a:	4619      	mov	r1, r3
 800977c:	4868      	ldr	r0, [pc, #416]	; (8009920 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800977e:	f015 facf 	bl	801ed20 <memcpy>
				buf2_flag = 0;
 8009782:	4b68      	ldr	r3, [pc, #416]	; (8009924 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]
				break;
 8009788:	e098      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800978a:	4b63      	ldr	r3, [pc, #396]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800978c:	691a      	ldr	r2, [r3, #16]
 800978e:	f107 030c 	add.w	r3, r7, #12
 8009792:	4619      	mov	r1, r3
 8009794:	4864      	ldr	r0, [pc, #400]	; (8009928 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 8009796:	f015 fac3 	bl	801ed20 <memcpy>
				break;
 800979a:	e08f      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800979c:	4b5e      	ldr	r3, [pc, #376]	; (8009918 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	4619      	mov	r1, r3
 80097a6:	4861      	ldr	r0, [pc, #388]	; (800992c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 80097a8:	f015 faba 	bl	801ed20 <memcpy>
				buf2_flag = 1;
 80097ac:	4b5d      	ldr	r3, [pc, #372]	; (8009924 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
				break;
 80097b2:	e083      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				if(faul_counter >= 2000){
 80097b4:	4b5e      	ldr	r3, [pc, #376]	; (8009930 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80097bc:	d312      	bcc.n	80097e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
					led2 = !led2;
 80097be:	4b5d      	ldr	r3, [pc, #372]	; (8009934 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80097c0:	785b      	ldrb	r3, [r3, #1]
 80097c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	4a5a      	ldr	r2, [pc, #360]	; (8009934 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bf0c      	ite	eq
 80097ce:	2301      	moveq	r3, #1
 80097d0:	2300      	movne	r3, #0
 80097d2:	b2d9      	uxtb	r1, r3
 80097d4:	7853      	ldrb	r3, [r2, #1]
 80097d6:	f361 1386 	bfi	r3, r1, #6, #1
 80097da:	7053      	strb	r3, [r2, #1]
					faul_counter = 0;
 80097dc:	4b54      	ldr	r3, [pc, #336]	; (8009930 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e004      	b.n	80097ee <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
					faul_counter ++;
 80097e4:	4b52      	ldr	r3, [pc, #328]	; (8009930 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	3301      	adds	r3, #1
 80097ea:	4a51      	ldr	r2, [pc, #324]	; (8009930 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 80097ec:	6013      	str	r3, [r2, #0]
				Faul_t.ODindex = *((uint16_t *)&aData[1]);
 80097ee:	f107 030c 	add.w	r3, r7, #12
 80097f2:	3301      	adds	r3, #1
 80097f4:	881a      	ldrh	r2, [r3, #0]
 80097f6:	4b50      	ldr	r3, [pc, #320]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80097f8:	81da      	strh	r2, [r3, #14]
				Faul_t.ODsubindex = aData[3];
 80097fa:	7bfa      	ldrb	r2, [r7, #15]
 80097fc:	4b4e      	ldr	r3, [pc, #312]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80097fe:	741a      	strb	r2, [r3, #16]
				if(aData[0] == 0x60){
 8009800:	7b3b      	ldrb	r3, [r7, #12]
 8009802:	2b60      	cmp	r3, #96	; 0x60
 8009804:	d059      	beq.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
					if(aData[0] == 0x4F){
 8009806:	7b3b      	ldrb	r3, [r7, #12]
 8009808:	2b4f      	cmp	r3, #79	; 0x4f
 800980a:	d106      	bne.n	800981a <HAL_CAN_RxFifo0MsgPendingCallback+0x1a2>
						Faul_t.num_valid = 1;
 800980c:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800980e:	2201      	movs	r2, #1
 8009810:	745a      	strb	r2, [r3, #17]
						Faul_t.buffer[0] = aData[4];
 8009812:	7c3a      	ldrb	r2, [r7, #16]
 8009814:	4b48      	ldr	r3, [pc, #288]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009816:	749a      	strb	r2, [r3, #18]
			break;
 8009818:	e04f      	b.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
					}else if(aData[0] == 0x4B){
 800981a:	7b3b      	ldrb	r3, [r7, #12]
 800981c:	2b4b      	cmp	r3, #75	; 0x4b
 800981e:	d106      	bne.n	800982e <HAL_CAN_RxFifo0MsgPendingCallback+0x1b6>
						Faul_t.num_valid = 2;
 8009820:	4b45      	ldr	r3, [pc, #276]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009822:	2202      	movs	r2, #2
 8009824:	745a      	strb	r2, [r3, #17]
 8009826:	8a3a      	ldrh	r2, [r7, #16]
						memcpy(Faul_t.buffer, &aData[4], 2);
 8009828:	4b43      	ldr	r3, [pc, #268]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800982a:	825a      	strh	r2, [r3, #18]
			break;
 800982c:	e045      	b.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
					}else if(aData[0] == 0x47){
 800982e:	7b3b      	ldrb	r3, [r7, #12]
 8009830:	2b47      	cmp	r3, #71	; 0x47
 8009832:	d10b      	bne.n	800984c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>
						Faul_t.num_valid = 3;
 8009834:	4b40      	ldr	r3, [pc, #256]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009836:	2203      	movs	r2, #3
 8009838:	745a      	strb	r2, [r3, #17]
						memcpy(Faul_t.buffer, &aData[4], 3);
 800983a:	f107 030c 	add.w	r3, r7, #12
 800983e:	3304      	adds	r3, #4
 8009840:	2203      	movs	r2, #3
 8009842:	4619      	mov	r1, r3
 8009844:	483d      	ldr	r0, [pc, #244]	; (800993c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8009846:	f015 fa6b 	bl	801ed20 <memcpy>
			break;
 800984a:	e036      	b.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
					}else if(aData[0] == 0x43){
 800984c:	7b3b      	ldrb	r3, [r7, #12]
 800984e:	2b43      	cmp	r3, #67	; 0x43
 8009850:	d133      	bne.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
						Faul_t.num_valid = 4;
 8009852:	4b39      	ldr	r3, [pc, #228]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009854:	2204      	movs	r2, #4
 8009856:	745a      	strb	r2, [r3, #17]
 8009858:	693b      	ldr	r3, [r7, #16]
						memcpy(Faul_t.buffer, &aData[4], 4);
 800985a:	4a37      	ldr	r2, [pc, #220]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800985c:	f8c2 3012 	str.w	r3, [r2, #18]
			break;
 8009860:	e02b      	b.n	80098ba <HAL_CAN_RxFifo0MsgPendingCallback+0x242>
				Faul_t.statusword = *((uint16_t *)aData);
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	881a      	ldrh	r2, [r3, #0]
 8009868:	4b33      	ldr	r3, [pc, #204]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800986a:	801a      	strh	r2, [r3, #0]
			break;
 800986c:	e026      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				Faul_t.statusword = *((uint16_t *)aData);
 800986e:	f107 030c 	add.w	r3, r7, #12
 8009872:	881a      	ldrh	r2, [r3, #0]
 8009874:	4b30      	ldr	r3, [pc, #192]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009876:	801a      	strh	r2, [r3, #0]
				Faul_t.pos_act = *((int *)&aData[2]);
 8009878:	f107 030c 	add.w	r3, r7, #12
 800987c:	3302      	adds	r3, #2
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a2d      	ldr	r2, [pc, #180]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8009882:	6053      	str	r3, [r2, #4]
			break;
 8009884:	e01a      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				Faul_t.statusword = *((uint16_t *)aData);
 8009886:	f107 030c 	add.w	r3, r7, #12
 800988a:	881a      	ldrh	r2, [r3, #0]
 800988c:	4b2a      	ldr	r3, [pc, #168]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800988e:	801a      	strh	r2, [r3, #0]
				Faul_t.vel_act = *((int *)&aData[2]);
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	3302      	adds	r3, #2
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a27      	ldr	r2, [pc, #156]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800989a:	6093      	str	r3, [r2, #8]
			break;
 800989c:	e00e      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
				Faul_t.statusword = *((uint16_t *)aData);
 800989e:	f107 030c 	add.w	r3, r7, #12
 80098a2:	881a      	ldrh	r2, [r3, #0]
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80098a6:	801a      	strh	r2, [r3, #0]
				Faul_t.tor_act = *((int *)&aData[2]);
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	3302      	adds	r3, #2
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	b21a      	sxth	r2, r3
 80098b2:	4b21      	ldr	r3, [pc, #132]	; (8009938 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 80098b4:	819a      	strh	r2, [r3, #12]
				break;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>
			break;
 80098ba:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fe92 	bl	80095e8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80098c4:	2102      	movs	r1, #2
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f00b fa3c 	bl	8014d44 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 80098cc:	e115      	b.n	8009afa <HAL_CAN_RxFifo0MsgPendingCallback+0x482>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 80098ce:	f107 030c 	add.w	r3, r7, #12
 80098d2:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80098d4:	2100      	movs	r1, #0
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f00b f922 	bl	8014b20 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 80098dc:	4b18      	ldr	r3, [pc, #96]	; (8009940 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d12f      	bne.n	8009944 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>
			vescmsg.Rxmsg = CAN2RxMessage;
 80098e4:	4a0d      	ldr	r2, [pc, #52]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80098e6:	4b16      	ldr	r3, [pc, #88]	; (8009940 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 80098e8:	4614      	mov	r4, r2
 80098ea:	461d      	mov	r5, r3
 80098ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80098f8:	4b08      	ldr	r3, [pc, #32]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 80098fa:	331c      	adds	r3, #28
 80098fc:	f107 020c 	add.w	r2, r7, #12
 8009900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009904:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009908:	4804      	ldr	r0, [pc, #16]	; (800991c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800990a:	f00a f91f 	bl	8013b4c <set_rx_frames>
			source = VESC_PACKET;
 800990e:	2301      	movs	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
 8009912:	e0ea      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
 8009914:	20007128 	.word	0x20007128
 8009918:	20007150 	.word	0x20007150
 800991c:	20009a9c 	.word	0x20009a9c
 8009920:	2000768c 	.word	0x2000768c
 8009924:	20000914 	.word	0x20000914
 8009928:	2000a02c 	.word	0x2000a02c
 800992c:	2000a1fc 	.word	0x2000a1fc
 8009930:	20009b14 	.word	0x20009b14
 8009934:	40020814 	.word	0x40020814
 8009938:	2000a098 	.word	0x2000a098
 800993c:	2000a0aa 	.word	0x2000a0aa
 8009940:	200070bc 	.word	0x200070bc
			source = RNS_PACKET;
 8009944:	2300      	movs	r3, #0
 8009946:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 8009948:	4b6e      	ldr	r3, [pc, #440]	; (8009b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x48c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f240 52cf 	movw	r2, #1487	; 0x5cf
 8009950:	4293      	cmp	r3, r2
 8009952:	d063      	beq.n	8009a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x3a4>
 8009954:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8009958:	f080 80c4 	bcs.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 800995c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8009960:	4293      	cmp	r3, r2
 8009962:	f000 80b3 	beq.w	8009acc <HAL_CAN_RxFifo0MsgPendingCallback+0x454>
 8009966:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
 800996a:	f080 80bb 	bcs.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 800996e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009972:	4293      	cmp	r3, r2
 8009974:	f000 809e 	beq.w	8009ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>
 8009978:	f5b3 7f74 	cmp.w	r3, #976	; 0x3d0
 800997c:	f080 80b2 	bcs.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 8009980:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009984:	4293      	cmp	r3, r2
 8009986:	f000 8089 	beq.w	8009a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x424>
 800998a:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800998e:	f080 80a9 	bcs.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 8009992:	2b1c      	cmp	r3, #28
 8009994:	d81c      	bhi.n	80099d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x358>
 8009996:	2b14      	cmp	r3, #20
 8009998:	f0c0 80a4 	bcc.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 800999c:	3b14      	subs	r3, #20
 800999e:	2b08      	cmp	r3, #8
 80099a0:	f200 80a0 	bhi.w	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
 80099a4:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <HAL_CAN_RxFifo0MsgPendingCallback+0x334>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099db 	.word	0x080099db
 80099b0:	080099f3 	.word	0x080099f3
 80099b4:	08009a05 	.word	0x08009a05
 80099b8:	08009ae5 	.word	0x08009ae5
 80099bc:	08009ae5 	.word	0x08009ae5
 80099c0:	08009ae5 	.word	0x08009ae5
 80099c4:	08009ae5 	.word	0x08009ae5
 80099c8:	08009ae5 	.word	0x08009ae5
 80099cc:	08009ae5 	.word	0x08009ae5
 80099d0:	f240 12cf 	movw	r2, #463	; 0x1cf
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d05b      	beq.n	8009a90 <HAL_CAN_RxFifo0MsgPendingCallback+0x418>
				break;
 80099d8:	e084      	b.n	8009ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 80099da:	4b4b      	ldr	r3, [pc, #300]	; (8009b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x490>)
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	f107 030c 	add.w	r3, r7, #12
 80099e2:	4619      	mov	r1, r3
 80099e4:	4849      	ldr	r0, [pc, #292]	; (8009b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x494>)
 80099e6:	f015 f99b 	bl	801ed20 <memcpy>
				buf2_flag = 0;
 80099ea:	4b49      	ldr	r3, [pc, #292]	; (8009b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
				break;
 80099f0:	e07b      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 80099f2:	4b45      	ldr	r3, [pc, #276]	; (8009b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x490>)
 80099f4:	691a      	ldr	r2, [r3, #16]
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4619      	mov	r1, r3
 80099fc:	4845      	ldr	r0, [pc, #276]	; (8009b14 <HAL_CAN_RxFifo0MsgPendingCallback+0x49c>)
 80099fe:	f015 f98f 	bl	801ed20 <memcpy>
				break;
 8009a02:	e072      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8009a04:	4b40      	ldr	r3, [pc, #256]	; (8009b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x490>)
 8009a06:	691a      	ldr	r2, [r3, #16]
 8009a08:	f107 030c 	add.w	r3, r7, #12
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4842      	ldr	r0, [pc, #264]	; (8009b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a0>)
 8009a10:	f015 f986 	bl	801ed20 <memcpy>
				buf2_flag = 1;
 8009a14:	4b3e      	ldr	r3, [pc, #248]	; (8009b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x498>)
 8009a16:	2201      	movs	r2, #1
 8009a18:	701a      	strb	r2, [r3, #0]
				break;
 8009a1a:	e066      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				Faul_t.ODindex = *((uint16_t *)&aData[1]);
 8009a1c:	f107 030c 	add.w	r3, r7, #12
 8009a20:	3301      	adds	r3, #1
 8009a22:	881a      	ldrh	r2, [r3, #0]
 8009a24:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a26:	81da      	strh	r2, [r3, #14]
				Faul_t.ODsubindex = aData[3];
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	4b3c      	ldr	r3, [pc, #240]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a2c:	741a      	strb	r2, [r3, #16]
				if(aData[0] == 0x60){
 8009a2e:	7b3b      	ldrb	r3, [r7, #12]
 8009a30:	2b60      	cmp	r3, #96	; 0x60
 8009a32:	d059      	beq.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
					if(aData[0] == 0x4F){
 8009a34:	7b3b      	ldrb	r3, [r7, #12]
 8009a36:	2b4f      	cmp	r3, #79	; 0x4f
 8009a38:	d106      	bne.n	8009a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>
						Faul_t.num_valid = 1;
 8009a3a:	4b38      	ldr	r3, [pc, #224]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	745a      	strb	r2, [r3, #17]
						Faul_t.buffer[0] = aData[4];
 8009a40:	7c3a      	ldrb	r2, [r7, #16]
 8009a42:	4b36      	ldr	r3, [pc, #216]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a44:	749a      	strb	r2, [r3, #18]
			break;
 8009a46:	e04f      	b.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
					}else if(aData[0] == 0x4B){
 8009a48:	7b3b      	ldrb	r3, [r7, #12]
 8009a4a:	2b4b      	cmp	r3, #75	; 0x4b
 8009a4c:	d106      	bne.n	8009a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x3e4>
						Faul_t.num_valid = 2;
 8009a4e:	4b33      	ldr	r3, [pc, #204]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a50:	2202      	movs	r2, #2
 8009a52:	745a      	strb	r2, [r3, #17]
 8009a54:	8a3a      	ldrh	r2, [r7, #16]
						memcpy(Faul_t.buffer, &aData[4], 2);
 8009a56:	4b31      	ldr	r3, [pc, #196]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a58:	825a      	strh	r2, [r3, #18]
			break;
 8009a5a:	e045      	b.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
					}else if(aData[0] == 0x47){
 8009a5c:	7b3b      	ldrb	r3, [r7, #12]
 8009a5e:	2b47      	cmp	r3, #71	; 0x47
 8009a60:	d10b      	bne.n	8009a7a <HAL_CAN_RxFifo0MsgPendingCallback+0x402>
						Faul_t.num_valid = 3;
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a64:	2203      	movs	r2, #3
 8009a66:	745a      	strb	r2, [r3, #17]
						memcpy(Faul_t.buffer, &aData[4], 3);
 8009a68:	f107 030c 	add.w	r3, r7, #12
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	2203      	movs	r2, #3
 8009a70:	4619      	mov	r1, r3
 8009a72:	482b      	ldr	r0, [pc, #172]	; (8009b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a8>)
 8009a74:	f015 f954 	bl	801ed20 <memcpy>
			break;
 8009a78:	e036      	b.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
					}else if(aData[0] == 0x43){
 8009a7a:	7b3b      	ldrb	r3, [r7, #12]
 8009a7c:	2b43      	cmp	r3, #67	; 0x43
 8009a7e:	d133      	bne.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
						Faul_t.num_valid = 4;
 8009a80:	4b26      	ldr	r3, [pc, #152]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a82:	2204      	movs	r2, #4
 8009a84:	745a      	strb	r2, [r3, #17]
 8009a86:	693b      	ldr	r3, [r7, #16]
						memcpy(Faul_t.buffer, &aData[4], 4);
 8009a88:	4a24      	ldr	r2, [pc, #144]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a8a:	f8c2 3012 	str.w	r3, [r2, #18]
			break;
 8009a8e:	e02b      	b.n	8009ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>
				Faul_t.statusword = *((uint16_t *)aData);
 8009a90:	f107 030c 	add.w	r3, r7, #12
 8009a94:	881a      	ldrh	r2, [r3, #0]
 8009a96:	4b21      	ldr	r3, [pc, #132]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009a98:	801a      	strh	r2, [r3, #0]
			break;
 8009a9a:	e026      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				Faul_t.statusword = *((uint16_t *)aData);
 8009a9c:	f107 030c 	add.w	r3, r7, #12
 8009aa0:	881a      	ldrh	r2, [r3, #0]
 8009aa2:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009aa4:	801a      	strh	r2, [r3, #0]
				Faul_t.pos_act = *((int *)&aData[2]);
 8009aa6:	f107 030c 	add.w	r3, r7, #12
 8009aaa:	3302      	adds	r3, #2
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a1b      	ldr	r2, [pc, #108]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009ab0:	6053      	str	r3, [r2, #4]
			break;
 8009ab2:	e01a      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				Faul_t.statusword = *((uint16_t *)aData);
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	881a      	ldrh	r2, [r3, #0]
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009abc:	801a      	strh	r2, [r3, #0]
				Faul_t.vel_act = *((int *)&aData[2]);
 8009abe:	f107 030c 	add.w	r3, r7, #12
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009ac8:	6093      	str	r3, [r2, #8]
			break;
 8009aca:	e00e      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
				Faul_t.statusword = *((uint16_t *)aData);
 8009acc:	f107 030c 	add.w	r3, r7, #12
 8009ad0:	881a      	ldrh	r2, [r3, #0]
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009ad4:	801a      	strh	r2, [r3, #0]
				Faul_t.tor_act = *((int *)&aData[2]);
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	3302      	adds	r3, #2
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	b21a      	sxth	r2, r3
 8009ae0:	4b0e      	ldr	r3, [pc, #56]	; (8009b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x4a4>)
 8009ae2:	819a      	strh	r2, [r3, #12]
				break;
 8009ae4:	bf00      	nop
 8009ae6:	e000      	b.n	8009aea <HAL_CAN_RxFifo0MsgPendingCallback+0x472>
			break;
 8009ae8:	bf00      	nop
		CAN_PROCESS(source);
 8009aea:	7dfb      	ldrb	r3, [r7, #23]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fd7b 	bl	80095e8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8009af2:	2110      	movs	r1, #16
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f00b f925 	bl	8014d44 <HAL_CAN_ActivateNotification>
}
 8009afa:	bf00      	nop
 8009afc:	3718      	adds	r7, #24
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bdb0      	pop	{r4, r5, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20007150 	.word	0x20007150
 8009b08:	200070bc 	.word	0x200070bc
 8009b0c:	2000768c 	.word	0x2000768c
 8009b10:	20000914 	.word	0x20000914
 8009b14:	2000a02c 	.word	0x2000a02c
 8009b18:	2000a1fc 	.word	0x2000a1fc
 8009b1c:	2000a098 	.word	0x2000a098
 8009b20:	2000a0aa 	.word	0x2000a0aa

08009b24 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8009b24:	b5b0      	push	{r4, r5, r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4a6d      	ldr	r2, [pc, #436]	; (8009ce4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d16a      	bne.n	8009c0a <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 8009b34:	f107 030c 	add.w	r3, r7, #12
 8009b38:	4a6b      	ldr	r2, [pc, #428]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f00a ffef 	bl	8014b20 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 8009b42:	4b69      	ldr	r3, [pc, #420]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d117      	bne.n	8009b7a <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 8009b4a:	4a68      	ldr	r2, [pc, #416]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009b4c:	4b66      	ldr	r3, [pc, #408]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009b4e:	4614      	mov	r4, r2
 8009b50:	461d      	mov	r5, r3
 8009b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009b5e:	4b63      	ldr	r3, [pc, #396]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009b60:	331c      	adds	r3, #28
 8009b62:	f107 020c 	add.w	r2, r7, #12
 8009b66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b6a:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009b6e:	485f      	ldr	r0, [pc, #380]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009b70:	f009 ffec 	bl	8013b4c <set_rx_frames>
			source = VESC_PACKET;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
 8009b78:	e03e      	b.n	8009bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8009b7e:	4b5c      	ldr	r3, [pc, #368]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3b14      	subs	r3, #20
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d836      	bhi.n	8009bf6 <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bcd 	.word	0x08009bcd
 8009b98:	08009bdf 	.word	0x08009bdf
 8009b9c:	08009bf7 	.word	0x08009bf7
 8009ba0:	08009bf7 	.word	0x08009bf7
 8009ba4:	08009bf7 	.word	0x08009bf7
 8009ba8:	08009bf7 	.word	0x08009bf7
 8009bac:	08009bf7 	.word	0x08009bf7
 8009bb0:	08009bf7 	.word	0x08009bf7
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8009bb4:	4b4c      	ldr	r3, [pc, #304]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	f107 030c 	add.w	r3, r7, #12
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	484d      	ldr	r0, [pc, #308]	; (8009cf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8009bc0:	f015 f8ae 	bl	801ed20 <memcpy>
				buf2_flag = 0;
 8009bc4:	4b4c      	ldr	r3, [pc, #304]	; (8009cf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]

				break;
 8009bca:	e015      	b.n	8009bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8009bcc:	4b46      	ldr	r3, [pc, #280]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	f107 030c 	add.w	r3, r7, #12
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4849      	ldr	r0, [pc, #292]	; (8009cfc <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8009bd8:	f015 f8a2 	bl	801ed20 <memcpy>

				break;
 8009bdc:	e00c      	b.n	8009bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8009bde:	4b42      	ldr	r3, [pc, #264]	; (8009ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	f107 030c 	add.w	r3, r7, #12
 8009be6:	4619      	mov	r1, r3
 8009be8:	4845      	ldr	r0, [pc, #276]	; (8009d00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8009bea:	f015 f899 	bl	801ed20 <memcpy>
				buf2_flag = 1;
 8009bee:	4b42      	ldr	r3, [pc, #264]	; (8009cf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
				break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 8009bf6:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff fcf4 	bl	80095e8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009c00:	2102      	movs	r1, #2
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f00b f89e 	bl	8014d44 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 8009c08:	e068      	b.n	8009cdc <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 8009c0a:	f107 030c 	add.w	r3, r7, #12
 8009c0e:	4a38      	ldr	r2, [pc, #224]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009c10:	2101      	movs	r1, #1
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f00a ff84 	bl	8014b20 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 8009c18:	4b35      	ldr	r3, [pc, #212]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d117      	bne.n	8009c50 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 8009c20:	4a32      	ldr	r2, [pc, #200]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009c22:	4b33      	ldr	r3, [pc, #204]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009c24:	4614      	mov	r4, r2
 8009c26:	461d      	mov	r5, r3
 8009c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009c30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009c34:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009c36:	331c      	adds	r3, #28
 8009c38:	f107 020c 	add.w	r2, r7, #12
 8009c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c40:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009c44:	4829      	ldr	r0, [pc, #164]	; (8009cec <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009c46:	f009 ff81 	bl	8013b4c <set_rx_frames>
			source = VESC_PACKET;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	75fb      	strb	r3, [r7, #23]
 8009c4e:	e03d      	b.n	8009ccc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 8009c50:	2300      	movs	r3, #0
 8009c52:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8009c54:	4b26      	ldr	r3, [pc, #152]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3b14      	subs	r3, #20
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	d835      	bhi.n	8009cca <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 8009c5e:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009ca1 	.word	0x08009ca1
 8009c6c:	08009cb3 	.word	0x08009cb3
 8009c70:	08009ccb 	.word	0x08009ccb
 8009c74:	08009ccb 	.word	0x08009ccb
 8009c78:	08009ccb 	.word	0x08009ccb
 8009c7c:	08009ccb 	.word	0x08009ccb
 8009c80:	08009ccb 	.word	0x08009ccb
 8009c84:	08009ccb 	.word	0x08009ccb
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8009c88:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	f107 030c 	add.w	r3, r7, #12
 8009c90:	4619      	mov	r1, r3
 8009c92:	4818      	ldr	r0, [pc, #96]	; (8009cf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8009c94:	f015 f844 	bl	801ed20 <memcpy>
				buf2_flag = 0;
 8009c98:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
				break;
 8009c9e:	e015      	b.n	8009ccc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8009ca0:	4b13      	ldr	r3, [pc, #76]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4814      	ldr	r0, [pc, #80]	; (8009cfc <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8009cac:	f015 f838 	bl	801ed20 <memcpy>
				break;
 8009cb0:	e00c      	b.n	8009ccc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8009cb2:	4b0f      	ldr	r3, [pc, #60]	; (8009cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009cb4:	691a      	ldr	r2, [r3, #16]
 8009cb6:	f107 030c 	add.w	r3, r7, #12
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4810      	ldr	r0, [pc, #64]	; (8009d00 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8009cbe:	f015 f82f 	bl	801ed20 <memcpy>
				buf2_flag = 1;
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	; (8009cf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	701a      	strb	r2, [r3, #0]
				break;
 8009cc8:	e000      	b.n	8009ccc <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 8009cca:	bf00      	nop
		CAN_PROCESS(source);
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff fc8a 	bl	80095e8 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8009cd4:	2110      	movs	r1, #16
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f00b f834 	bl	8014d44 <HAL_CAN_ActivateNotification>
}
 8009cdc:	bf00      	nop
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce4:	20007128 	.word	0x20007128
 8009ce8:	20007150 	.word	0x20007150
 8009cec:	20009a9c 	.word	0x20009a9c
 8009cf0:	200070bc 	.word	0x200070bc
 8009cf4:	2000768c 	.word	0x2000768c
 8009cf8:	20000914 	.word	0x20000914
 8009cfc:	2000a02c 	.word	0x2000a02c
 8009d00:	2000a1fc 	.word	0x2000a1fc

08009d04 <set>:
/*********************************************/

#include "common.h"

float expath[1][7];
void set(void) {
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0

	Initialize();
 8009d08:	f7ff f944 	bl	8008f94 <Initialize>
	PSxInitDMA(&ps4,&hi2c2);
 8009d0c:	4932      	ldr	r1, [pc, #200]	; (8009dd8 <set+0xd4>)
 8009d0e:	4833      	ldr	r0, [pc, #204]	; (8009ddc <set+0xd8>)
 8009d10:	f7fc fc0d 	bl	800652e <PSxInitDMA>
	//	PSxInitUART(&ps4, &huart3);
	TIMxInit(&htim6, 20000, 84);
 8009d14:	2254      	movs	r2, #84	; 0x54
 8009d16:	f644 6120 	movw	r1, #20000	; 0x4e20
 8009d1a:	4831      	ldr	r0, [pc, #196]	; (8009de0 <set+0xdc>)
 8009d1c:	f7f9 fb36 	bl	800338c <TIMxInit>
	RNS_config(&hcan1);
 8009d20:	4830      	ldr	r0, [pc, #192]	; (8009de4 <set+0xe0>)
 8009d22:	f000 f875 	bl	8009e10 <RNS_config>
	led3 = 1;
 8009d26:	4a30      	ldr	r2, [pc, #192]	; (8009de8 <set+0xe4>)
 8009d28:	7853      	ldrb	r3, [r2, #1]
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2e:	7053      	strb	r3, [r2, #1]

	MODNInit(MODN_FWD_OMNI, 4.5, 0.625, 3.0, 0.03, 800);
 8009d30:	f44f 7148 	mov.w	r1, #800	; 0x320
 8009d34:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8009dec <set+0xe8>
 8009d38:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8009d3c:	eef6 0a04 	vmov.f32	s1, #100	; 0x3f200000  0.625
 8009d40:	eeb1 0a02 	vmov.f32	s0, #18	; 0x40900000  4.5
 8009d44:	2000      	movs	r0, #0
 8009d46:	f7fb fd5b 	bl	8005800 <MODNInit>

	TFmini_Init(&tfmini, &huart4);
 8009d4a:	4929      	ldr	r1, [pc, #164]	; (8009df0 <set+0xec>)
 8009d4c:	4829      	ldr	r0, [pc, #164]	; (8009df4 <set+0xf0>)
 8009d4e:	f7ff f857 	bl	8008e00 <TFmini_Init>

	tuneRegister(3, &huart2);
 8009d52:	4929      	ldr	r1, [pc, #164]	; (8009df8 <set+0xf4>)
 8009d54:	2003      	movs	r0, #3
 8009d56:	f005 f8e7 	bl	800ef28 <tuneRegister>
	tuneRead();
 8009d5a:	f005 fd8d 	bl	800f878 <tuneRead>
	setPP_points();
 8009d5e:	f002 fb47 	bl	800c3f0 <setPP_points>
//	ROS_Init(&huart2);
//	ROS_Read_Flash();

	tfmini.dist_target = 0.45;
 8009d62:	4b24      	ldr	r3, [pc, #144]	; (8009df4 <set+0xf0>)
 8009d64:	4a25      	ldr	r2, [pc, #148]	; (8009dfc <set+0xf8>)
 8009d66:	61da      	str	r2, [r3, #28]

	svBRup
 8009d68:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009d6c:	4824      	ldr	r0, [pc, #144]	; (8009e00 <set+0xfc>)
 8009d6e:	f7fe ff81 	bl	8008c74 <ServoSetPulse>
	svBRAback
 8009d72:	f640 0176 	movw	r1, #2166	; 0x876
 8009d76:	4823      	ldr	r0, [pc, #140]	; (8009e04 <set+0x100>)
 8009d78:	f7fe ff7c 	bl	8008c74 <ServoSetPulse>
	Await(1000);
 8009d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009d80:	f004 fdb0 	bl	800e8e4 <Await>
	led3 = 0;
 8009d84:	4a18      	ldr	r2, [pc, #96]	; (8009de8 <set+0xe4>)
 8009d86:	7853      	ldrb	r3, [r2, #1]
 8009d88:	f36f 13c7 	bfc	r3, #7, #1
 8009d8c:	7053      	strb	r3, [r2, #1]
	svBRrealup
 8009d8e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8009d92:	481b      	ldr	r0, [pc, #108]	; (8009e00 <set+0xfc>)
 8009d94:	f7fe ff6e 	bl	8008c74 <ServoSetPulse>
	BgripOFF
 8009d98:	4a13      	ldr	r2, [pc, #76]	; (8009de8 <set+0xe4>)
 8009d9a:	7853      	ldrb	r3, [r2, #1]
 8009d9c:	f36f 0300 	bfc	r3, #0, #1
 8009da0:	7053      	strb	r3, [r2, #1]
	svCloseFlip
 8009da2:	f240 719e 	movw	r1, #1950	; 0x79e
 8009da6:	4818      	ldr	r0, [pc, #96]	; (8009e08 <set+0x104>)
 8009da8:	f7fe ff64 	bl	8008c74 <ServoSetPulse>
 8009dac:	f44f 7161 	mov.w	r1, #900	; 0x384
 8009db0:	4816      	ldr	r0, [pc, #88]	; (8009e0c <set+0x108>)
 8009db2:	f7fe ff5f 	bl	8008c74 <ServoSetPulse>
	QEIReset(QEI1);
 8009db6:	2001      	movs	r0, #1
 8009db8:	f7f8 f808 	bl	8001dcc <QEIReset>
	QEIReset(QEI4);
 8009dbc:	2004      	movs	r0, #4
 8009dbe:	f7f8 f805 	bl	8001dcc <QEIReset>
	QEISwap(QEI1, QEI_Swap);
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	2001      	movs	r0, #1
 8009dc6:	f7f8 f861 	bl	8001e8c <QEISwap>
	QEISwap(QEI4, QEI_Swap);
 8009dca:	2101      	movs	r1, #1
 8009dcc:	2004      	movs	r0, #4
 8009dce:	f7f8 f85d 	bl	8001e8c <QEISwap>
}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	20007804 	.word	0x20007804
 8009ddc:	2000a448 	.word	0x2000a448
 8009de0:	20006af0 	.word	0x20006af0
 8009de4:	20007128 	.word	0x20007128
 8009de8:	40020814 	.word	0x40020814
 8009dec:	3cf5c28f 	.word	0x3cf5c28f
 8009df0:	20006bf4 	.word	0x20006bf4
 8009df4:	20009704 	.word	0x20009704
 8009df8:	20006c74 	.word	0x20006c74
 8009dfc:	3ee66666 	.word	0x3ee66666
 8009e00:	20009a58 	.word	0x20009a58
 8009e04:	20009bf4 	.word	0x20009bf4
 8009e08:	20009c44 	.word	0x20009c44
 8009e0c:	2000aa48 	.word	0x2000aa48

08009e10 <RNS_config>:

void RNS_config(CAN_HandleTypeDef* hcanx) {
 8009e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009e14:	b088      	sub	sp, #32
 8009e16:	af06      	add	r7, sp, #24
 8009e18:	6078      	str	r0, [r7, #4]
//	AP = 1.617; AI = 4.173; AD = 0.014;
//	BP = 1.62; BI = 4.249; BD = 0.014;
//	CP = 1.63; CI = 4.012; CD = 0.014;
//	DP = 1.66; DI = 4.264; DD = 0.014;

	AP = 1.46; AI = 2.722; AD = 0.010;
 8009e1a:	4bb1      	ldr	r3, [pc, #708]	; (800a0e0 <RNS_config+0x2d0>)
 8009e1c:	4ab1      	ldr	r2, [pc, #708]	; (800a0e4 <RNS_config+0x2d4>)
 8009e1e:	601a      	str	r2, [r3, #0]
 8009e20:	4bb1      	ldr	r3, [pc, #708]	; (800a0e8 <RNS_config+0x2d8>)
 8009e22:	4ab2      	ldr	r2, [pc, #712]	; (800a0ec <RNS_config+0x2dc>)
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	4bb2      	ldr	r3, [pc, #712]	; (800a0f0 <RNS_config+0x2e0>)
 8009e28:	4ab2      	ldr	r2, [pc, #712]	; (800a0f4 <RNS_config+0x2e4>)
 8009e2a:	601a      	str	r2, [r3, #0]
	BP = 1.50; BI = 2.696; BD = 0.010;
 8009e2c:	4bb2      	ldr	r3, [pc, #712]	; (800a0f8 <RNS_config+0x2e8>)
 8009e2e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	4bb1      	ldr	r3, [pc, #708]	; (800a0fc <RNS_config+0x2ec>)
 8009e36:	4ab2      	ldr	r2, [pc, #712]	; (800a100 <RNS_config+0x2f0>)
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	4bb2      	ldr	r3, [pc, #712]	; (800a104 <RNS_config+0x2f4>)
 8009e3c:	4aad      	ldr	r2, [pc, #692]	; (800a0f4 <RNS_config+0x2e4>)
 8009e3e:	601a      	str	r2, [r3, #0]
	CP = 1.49; CI = 2.549; CD = 0.010;
 8009e40:	4bb1      	ldr	r3, [pc, #708]	; (800a108 <RNS_config+0x2f8>)
 8009e42:	4ab2      	ldr	r2, [pc, #712]	; (800a10c <RNS_config+0x2fc>)
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	4bb2      	ldr	r3, [pc, #712]	; (800a110 <RNS_config+0x300>)
 8009e48:	4ab2      	ldr	r2, [pc, #712]	; (800a114 <RNS_config+0x304>)
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	4bb2      	ldr	r3, [pc, #712]	; (800a118 <RNS_config+0x308>)
 8009e4e:	4aa9      	ldr	r2, [pc, #676]	; (800a0f4 <RNS_config+0x2e4>)
 8009e50:	601a      	str	r2, [r3, #0]
	DP = 1.53; DI = 2.748; DD = 0.010;
 8009e52:	4bb2      	ldr	r3, [pc, #712]	; (800a11c <RNS_config+0x30c>)
 8009e54:	4ab2      	ldr	r2, [pc, #712]	; (800a120 <RNS_config+0x310>)
 8009e56:	601a      	str	r2, [r3, #0]
 8009e58:	4bb2      	ldr	r3, [pc, #712]	; (800a124 <RNS_config+0x314>)
 8009e5a:	4ab3      	ldr	r2, [pc, #716]	; (800a128 <RNS_config+0x318>)
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	4bb3      	ldr	r3, [pc, #716]	; (800a12c <RNS_config+0x31c>)
 8009e60:	4aa4      	ldr	r2, [pc, #656]	; (800a0f4 <RNS_config+0x2e4>)
 8009e62:	601a      	str	r2, [r3, #0]

	RNSInit(hcanx, &rns);
 8009e64:	49b2      	ldr	r1, [pc, #712]	; (800a130 <RNS_config+0x320>)
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f7fc ff0c 	bl	8006c84 <RNSInit>
	//Encoder dcba(0-swap, 1-keep)  BDC dir dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00000101, (float) fwd_omni, (float) roboconPID);
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e80:	e9cd 2300 	strd	r2, r3, [sp]
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	4baa      	ldr	r3, [pc, #680]	; (800a134 <RNS_config+0x324>)
 8009e8a:	2124      	movs	r1, #36	; 0x24
 8009e8c:	48a8      	ldr	r0, [pc, #672]	; (800a130 <RNS_config+0x320>)
 8009e8e:	f7fd f98f 	bl	80071b0 <RNSSet>

	/*****************INITIALIZE ENC VALUE | ENC RATIO*****************/
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e9e:	a37a      	add	r3, pc, #488	; (adr r3, 800a088 <RNS_config+0x278>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8009eb4:	a374      	add	r3, pc, #464	; (adr r3, 800a088 <RNS_config+0x278>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	2149      	movs	r1, #73	; 0x49
 8009ebc:	489c      	ldr	r0, [pc, #624]	; (800a130 <RNS_config+0x320>)
 8009ebe:	f7fd f977 	bl	80071b0 <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
//	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.051 / 4000.0 * 3.142, 2.0,
//			0.051 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, 2593.721/2588.222, 0.125 * 31.42 / 2593.721);
 8009ec2:	a373      	add	r3, pc, #460	; (adr r3, 800a090 <RNS_config+0x280>)
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8009ecc:	a372      	add	r3, pc, #456	; (adr r3, 800a098 <RNS_config+0x288>)
 8009ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed2:	211f      	movs	r1, #31
 8009ed4:	4896      	ldr	r0, [pc, #600]	; (800a130 <RNS_config+0x320>)
 8009ed6:	f7fd f96b 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_B_KCD_PTD, 2579.189/2572.120, 0.125 * 31.42 / 2579.189);
 8009eda:	a371      	add	r3, pc, #452	; (adr r3, 800a0a0 <RNS_config+0x290>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	e9cd 2300 	strd	r2, r3, [sp]
 8009ee4:	a370      	add	r3, pc, #448	; (adr r3, 800a0a8 <RNS_config+0x298>)
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	2120      	movs	r1, #32
 8009eec:	4890      	ldr	r0, [pc, #576]	; (800a130 <RNS_config+0x320>)
 8009eee:	f7fd f95f 	bl	80071b0 <RNSSet>

	/*****************INITIALIZE MOTOR MAX SPEED*****************/
	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 8.596, 19999.0);
 8009ef2:	a36f      	add	r3, pc, #444	; (adr r3, 800a0b0 <RNS_config+0x2a0>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009efc:	a36e      	add	r3, pc, #440	; (adr r3, 800a0b8 <RNS_config+0x2a8>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	e9cd 2300 	strd	r2, r3, [sp]
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	4b8b      	ldr	r3, [pc, #556]	; (800a138 <RNS_config+0x328>)
 8009f0c:	212b      	movs	r1, #43	; 0x2b
 8009f0e:	4888      	ldr	r0, [pc, #544]	; (800a130 <RNS_config+0x320>)
 8009f10:	f7fd f94e 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 9.548, 19999.0);
 8009f14:	a366      	add	r3, pc, #408	; (adr r3, 800a0b0 <RNS_config+0x2a0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f1e:	a368      	add	r3, pc, #416	; (adr r3, 800a0c0 <RNS_config+0x2b0>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	e9cd 2300 	strd	r2, r3, [sp]
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	4b82      	ldr	r3, [pc, #520]	; (800a138 <RNS_config+0x328>)
 8009f2e:	212c      	movs	r1, #44	; 0x2c
 8009f30:	487f      	ldr	r0, [pc, #508]	; (800a130 <RNS_config+0x320>)
 8009f32:	f7fd f93d 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 8.385, 19999.0);
 8009f36:	a35e      	add	r3, pc, #376	; (adr r3, 800a0b0 <RNS_config+0x2a0>)
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f40:	a361      	add	r3, pc, #388	; (adr r3, 800a0c8 <RNS_config+0x2b8>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	e9cd 2300 	strd	r2, r3, [sp]
 8009f4a:	f04f 0200 	mov.w	r2, #0
 8009f4e:	4b7a      	ldr	r3, [pc, #488]	; (800a138 <RNS_config+0x328>)
 8009f50:	212d      	movs	r1, #45	; 0x2d
 8009f52:	4877      	ldr	r0, [pc, #476]	; (800a130 <RNS_config+0x320>)
 8009f54:	f7fd f92c 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.993, 19999.0);
 8009f58:	a355      	add	r3, pc, #340	; (adr r3, 800a0b0 <RNS_config+0x2a0>)
 8009f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f62:	a35b      	add	r3, pc, #364	; (adr r3, 800a0d0 <RNS_config+0x2c0>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	e9cd 2300 	strd	r2, r3, [sp]
 8009f6c:	f04f 0200 	mov.w	r2, #0
 8009f70:	4b71      	ldr	r3, [pc, #452]	; (800a138 <RNS_config+0x328>)
 8009f72:	212e      	movs	r1, #46	; 0x2e
 8009f74:	486e      	ldr	r0, [pc, #440]	; (800a130 <RNS_config+0x320>)
 8009f76:	f7fd f91b 	bl	80071b0 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID,  AP, AI, AD);
 8009f7a:	4b59      	ldr	r3, [pc, #356]	; (800a0e0 <RNS_config+0x2d0>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7f6 fae2 	bl	8000548 <__aeabi_f2d>
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	4b57      	ldr	r3, [pc, #348]	; (800a0e8 <RNS_config+0x2d8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f6 fadb 	bl	8000548 <__aeabi_f2d>
 8009f92:	4604      	mov	r4, r0
 8009f94:	460d      	mov	r5, r1
 8009f96:	4b56      	ldr	r3, [pc, #344]	; (800a0f0 <RNS_config+0x2e0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f6 fad4 	bl	8000548 <__aeabi_f2d>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fa8:	e9cd 4500 	strd	r4, r5, [sp]
 8009fac:	4642      	mov	r2, r8
 8009fae:	464b      	mov	r3, r9
 8009fb0:	212f      	movs	r1, #47	; 0x2f
 8009fb2:	485f      	ldr	r0, [pc, #380]	; (800a130 <RNS_config+0x320>)
 8009fb4:	f7fd f8fc 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI , BD);
 8009fb8:	4b4f      	ldr	r3, [pc, #316]	; (800a0f8 <RNS_config+0x2e8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f6 fac3 	bl	8000548 <__aeabi_f2d>
 8009fc2:	4680      	mov	r8, r0
 8009fc4:	4689      	mov	r9, r1
 8009fc6:	4b4d      	ldr	r3, [pc, #308]	; (800a0fc <RNS_config+0x2ec>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7f6 fabc 	bl	8000548 <__aeabi_f2d>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	460d      	mov	r5, r1
 8009fd4:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <RNS_config+0x2f4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7f6 fab5 	bl	8000548 <__aeabi_f2d>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fe6:	e9cd 4500 	strd	r4, r5, [sp]
 8009fea:	4642      	mov	r2, r8
 8009fec:	464b      	mov	r3, r9
 8009fee:	2130      	movs	r1, #48	; 0x30
 8009ff0:	484f      	ldr	r0, [pc, #316]	; (800a130 <RNS_config+0x320>)
 8009ff2:	f7fd f8dd 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID,  CP, CI, CD);
 8009ff6:	4b44      	ldr	r3, [pc, #272]	; (800a108 <RNS_config+0x2f8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f6 faa4 	bl	8000548 <__aeabi_f2d>
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	4b42      	ldr	r3, [pc, #264]	; (800a110 <RNS_config+0x300>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7f6 fa9d 	bl	8000548 <__aeabi_f2d>
 800a00e:	4604      	mov	r4, r0
 800a010:	460d      	mov	r5, r1
 800a012:	4b41      	ldr	r3, [pc, #260]	; (800a118 <RNS_config+0x308>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4618      	mov	r0, r3
 800a018:	f7f6 fa96 	bl	8000548 <__aeabi_f2d>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a024:	e9cd 4500 	strd	r4, r5, [sp]
 800a028:	4642      	mov	r2, r8
 800a02a:	464b      	mov	r3, r9
 800a02c:	2131      	movs	r1, #49	; 0x31
 800a02e:	4840      	ldr	r0, [pc, #256]	; (800a130 <RNS_config+0x320>)
 800a030:	f7fd f8be 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID,  DP, DI, DD);
 800a034:	4b39      	ldr	r3, [pc, #228]	; (800a11c <RNS_config+0x30c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f6 fa85 	bl	8000548 <__aeabi_f2d>
 800a03e:	4680      	mov	r8, r0
 800a040:	4689      	mov	r9, r1
 800a042:	4b38      	ldr	r3, [pc, #224]	; (800a124 <RNS_config+0x314>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4618      	mov	r0, r3
 800a048:	f7f6 fa7e 	bl	8000548 <__aeabi_f2d>
 800a04c:	4604      	mov	r4, r0
 800a04e:	460d      	mov	r5, r1
 800a050:	4b36      	ldr	r3, [pc, #216]	; (800a12c <RNS_config+0x31c>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f7f6 fa77 	bl	8000548 <__aeabi_f2d>
 800a05a:	4602      	mov	r2, r0
 800a05c:	460b      	mov	r3, r1
 800a05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a062:	e9cd 4500 	strd	r4, r5, [sp]
 800a066:	4642      	mov	r2, r8
 800a068:	464b      	mov	r3, r9
 800a06a:	2132      	movs	r1, #50	; 0x32
 800a06c:	4830      	ldr	r0, [pc, #192]	; (800a130 <RNS_config+0x320>)
 800a06e:	f7fd f89f 	bl	80071b0 <RNSSet>

	RNSSet(&rns, RNS_ROTATE_SATEU, 1.0, 1.0 / 180, 19999.0);
 800a072:	a30f      	add	r3, pc, #60	; (adr r3, 800a0b0 <RNS_config+0x2a0>)
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a07c:	a316      	add	r3, pc, #88	; (adr r3, 800a0d8 <RNS_config+0x2c8>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	e05b      	b.n	800a13c <RNS_config+0x32c>
 800a084:	f3af 8000 	nop.w
 800a088:	b9727cf5 	.word	0xb9727cf5
 800a08c:	3f049766 	.word	0x3f049766
 800a090:	28ef68aa 	.word	0x28ef68aa
 800a094:	3f58cf28 	.word	0x3f58cf28
 800a098:	d48f4833 	.word	0xd48f4833
 800a09c:	3ff008b3 	.word	0x3ff008b3
 800a0a0:	fe8286d1 	.word	0xfe8286d1
 800a0a4:	3f58f2f0 	.word	0x3f58f2f0
 800a0a8:	d19c2ac3 	.word	0xd19c2ac3
 800a0ac:	3ff00b41 	.word	0x3ff00b41
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	40d387c0 	.word	0x40d387c0
 800a0b8:	dbe7b2ce 	.word	0xdbe7b2ce
 800a0bc:	3fbdc802 	.word	0x3fbdc802
 800a0c0:	886b3f62 	.word	0x886b3f62
 800a0c4:	3fbacfd8 	.word	0x3fbacfd8
 800a0c8:	9599b8dd 	.word	0x9599b8dd
 800a0cc:	3fbe87dc 	.word	0x3fbe87dc
 800a0d0:	1f5ec3e8 	.word	0x1f5ec3e8
 800a0d4:	3fbc7772 	.word	0x3fbc7772
 800a0d8:	16c16c17 	.word	0x16c16c17
 800a0dc:	3f76c16c 	.word	0x3f76c16c
 800a0e0:	2000a6f4 	.word	0x2000a6f4
 800a0e4:	3fbae148 	.word	0x3fbae148
 800a0e8:	200078e8 	.word	0x200078e8
 800a0ec:	402e353f 	.word	0x402e353f
 800a0f0:	2000a6ec 	.word	0x2000a6ec
 800a0f4:	3c23d70a 	.word	0x3c23d70a
 800a0f8:	20007bac 	.word	0x20007bac
 800a0fc:	20009730 	.word	0x20009730
 800a100:	402c8b44 	.word	0x402c8b44
 800a104:	200078dc 	.word	0x200078dc
 800a108:	20009a08 	.word	0x20009a08
 800a10c:	3fbeb852 	.word	0x3fbeb852
 800a110:	20009b7c 	.word	0x20009b7c
 800a114:	402322d1 	.word	0x402322d1
 800a118:	200071a4 	.word	0x200071a4
 800a11c:	2000a278 	.word	0x2000a278
 800a120:	3fc3d70a 	.word	0x3fc3d70a
 800a124:	200076b0 	.word	0x200076b0
 800a128:	402fdf3b 	.word	0x402fdf3b
 800a12c:	20009df4 	.word	0x20009df4
 800a130:	200093ec 	.word	0x200093ec
 800a134:	40140000 	.word	0x40140000
 800a138:	3ff00000 	.word	0x3ff00000
 800a13c:	e9cd 2300 	strd	r2, r3, [sp]
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	4b36      	ldr	r3, [pc, #216]	; (800a220 <RNS_config+0x410>)
 800a146:	2133      	movs	r1, #51	; 0x33
 800a148:	4836      	ldr	r0, [pc, #216]	; (800a224 <RNS_config+0x414>)
 800a14a:	f7fd f831 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_ROTATE_PID,  0.05, 1.0, 0.03);
 800a14e:	a32c      	add	r3, pc, #176	; (adr r3, 800a200 <RNS_config+0x3f0>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	4b30      	ldr	r3, [pc, #192]	; (800a220 <RNS_config+0x410>)
 800a15e:	e9cd 2300 	strd	r2, r3, [sp]
 800a162:	a329      	add	r3, pc, #164	; (adr r3, 800a208 <RNS_config+0x3f8>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	2134      	movs	r1, #52	; 0x34
 800a16a:	482e      	ldr	r0, [pc, #184]	; (800a224 <RNS_config+0x414>)
 800a16c:	f7fd f820 	bl	80071b0 <RNSSet>

	RNSSet(&rns, RNS_PPInit); //Path Planning
 800a170:	2116      	movs	r1, #22
 800a172:	482c      	ldr	r0, [pc, #176]	; (800a224 <RNS_config+0x414>)
 800a174:	f7fd f81c 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 800a178:	f04f 0200 	mov.w	r2, #0
 800a17c:	4b2a      	ldr	r3, [pc, #168]	; (800a228 <RNS_config+0x418>)
 800a17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	4b28      	ldr	r3, [pc, #160]	; (800a228 <RNS_config+0x418>)
 800a188:	e9cd 2300 	strd	r2, r3, [sp]
 800a18c:	f04f 0200 	mov.w	r2, #0
 800a190:	4b23      	ldr	r3, [pc, #140]	; (800a220 <RNS_config+0x410>)
 800a192:	2146      	movs	r1, #70	; 0x46
 800a194:	4823      	ldr	r0, [pc, #140]	; (800a224 <RNS_config+0x414>)
 800a196:	f7fd f80b 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 1.0);
 800a19a:	f04f 0200 	mov.w	r2, #0
 800a19e:	4b20      	ldr	r3, [pc, #128]	; (800a220 <RNS_config+0x410>)
 800a1a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1a4:	a31a      	add	r3, pc, #104	; (adr r3, 800a210 <RNS_config+0x400>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	e9cd 2300 	strd	r2, r3, [sp]
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <RNS_config+0x418>)
 800a1b4:	2147      	movs	r1, #71	; 0x47
 800a1b6:	481b      	ldr	r0, [pc, #108]	; (800a224 <RNS_config+0x414>)
 800a1b8:	f7fc fffa 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 1.0, 0.05, 0.2, 5.5);
 800a1bc:	f04f 0200 	mov.w	r2, #0
 800a1c0:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <RNS_config+0x41c>)
 800a1c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1c6:	a314      	add	r3, pc, #80	; (adr r3, 800a218 <RNS_config+0x408>)
 800a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1d0:	a30d      	add	r3, pc, #52	; (adr r3, 800a208 <RNS_config+0x3f8>)
 800a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d6:	e9cd 2300 	strd	r2, r3, [sp]
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <RNS_config+0x410>)
 800a1e0:	214f      	movs	r1, #79	; 0x4f
 800a1e2:	4810      	ldr	r0, [pc, #64]	; (800a224 <RNS_config+0x414>)
 800a1e4:	f7fc ffe4 	bl	80071b0 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0);         // Change No. of Points in the Curved Path
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <RNS_config+0x420>)
 800a1ee:	211d      	movs	r1, #29
 800a1f0:	480c      	ldr	r0, [pc, #48]	; (800a224 <RNS_config+0x414>)
 800a1f2:	f7fc ffdd 	bl	80071b0 <RNSSet>
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a200:	eb851eb8 	.word	0xeb851eb8
 800a204:	3f9eb851 	.word	0x3f9eb851
 800a208:	9999999a 	.word	0x9999999a
 800a20c:	3fa99999 	.word	0x3fa99999
 800a210:	9999999a 	.word	0x9999999a
 800a214:	3fb99999 	.word	0x3fb99999
 800a218:	9999999a 	.word	0x9999999a
 800a21c:	3fc99999 	.word	0x3fc99999
 800a220:	3ff00000 	.word	0x3ff00000
 800a224:	200093ec 	.word	0x200093ec
 800a228:	3fe00000 	.word	0x3fe00000
 800a22c:	40160000 	.word	0x40160000
 800a230:	40240000 	.word	0x40240000
 800a234:	00000000 	.word	0x00000000

0800a238 <seeker_mode>:

void seeker_mode(void){
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af06      	add	r7, sp, #24
	while(sys.manual){
 800a23e:	e3ba      	b.n	800a9b6 <seeker_mode+0x77e>
		//NAVI, servo, pw(h)
		if(pp.base > 0 && pp.base < 6){
 800a240:	4b9d      	ldr	r3, [pc, #628]	; (800a4b8 <seeker_mode+0x280>)
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	f003 0307 	and.w	r3, r3, #7
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 80f3 	beq.w	800a436 <seeker_mode+0x1fe>
 800a250:	4b99      	ldr	r3, [pc, #612]	; (800a4b8 <seeker_mode+0x280>)
 800a252:	785b      	ldrb	r3, [r3, #1]
 800a254:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	2b05      	cmp	r3, #5
 800a25c:	f200 80eb 	bhi.w	800a436 <seeker_mode+0x1fe>
			if(pp.base == 1){	//right
 800a260:	4b95      	ldr	r3, [pc, #596]	; (800a4b8 <seeker_mode+0x280>)
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d16a      	bne.n	800a344 <seeker_mode+0x10c>
				target_enq = 10000;
 800a26e:	4b93      	ldr	r3, [pc, #588]	; (800a4bc <seeker_mode+0x284>)
 800a270:	f242 7210 	movw	r2, #10000	; 0x2710
 800a274:	601a      	str	r2, [r3, #0]
				lagori.bldcstart = 1;
 800a276:	4a92      	ldr	r2, [pc, #584]	; (800a4c0 <seeker_mode+0x288>)
 800a278:	7853      	ldrb	r3, [r2, #1]
 800a27a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27e:	7053      	strb	r3, [r2, #1]
				RNSSet(&rns, RNS_RESET_POS);
 800a280:	2114      	movs	r1, #20
 800a282:	4890      	ldr	r0, [pc, #576]	; (800a4c4 <seeker_mode+0x28c>)
 800a284:	f7fc ff94 	bl	80071b0 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800a288:	2117      	movs	r1, #23
 800a28a:	488e      	ldr	r0, [pc, #568]	; (800a4c4 <seeker_mode+0x28c>)
 800a28c:	f7fc ff90 	bl	80071b0 <RNSSet>
				registerPath(LBaseS, 1, pLSE);
 800a290:	4a8d      	ldr	r2, [pc, #564]	; (800a4c8 <seeker_mode+0x290>)
 800a292:	2101      	movs	r1, #1
 800a294:	488d      	ldr	r0, [pc, #564]	; (800a4cc <seeker_mode+0x294>)
 800a296:	f7fe fe43 	bl	8008f20 <registerPath>
				RNSSet(&rns, RNS_PPSetXYZerror, 0.05, 2.0, 0.025, 1.0);
 800a29a:	f04f 0200 	mov.w	r2, #0
 800a29e:	4b8c      	ldr	r3, [pc, #560]	; (800a4d0 <seeker_mode+0x298>)
 800a2a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2a4:	a37c      	add	r3, pc, #496	; (adr r3, 800a498 <seeker_mode+0x260>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2ae:	f04f 0200 	mov.w	r2, #0
 800a2b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2b6:	e9cd 2300 	strd	r2, r3, [sp]
 800a2ba:	a379      	add	r3, pc, #484	; (adr r3, 800a4a0 <seeker_mode+0x268>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	2145      	movs	r1, #69	; 0x45
 800a2c2:	4880      	ldr	r0, [pc, #512]	; (800a4c4 <seeker_mode+0x28c>)
 800a2c4:	f7fc ff74 	bl	80071b0 <RNSSet>
				RNSPPstart(LBaseS, 1, &rns);
 800a2c8:	4a7e      	ldr	r2, [pc, #504]	; (800a4c4 <seeker_mode+0x28c>)
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	487f      	ldr	r0, [pc, #508]	; (800a4cc <seeker_mode+0x294>)
 800a2ce:	f7fc fdd6 	bl	8006e7e <RNSPPstart>
				Await(333);
 800a2d2:	f240 104d 	movw	r0, #333	; 0x14d
 800a2d6:	f004 fb05 	bl	800e8e4 <Await>
				pLNE[0] = 7.2;
 800a2da:	4b7e      	ldr	r3, [pc, #504]	; (800a4d4 <seeker_mode+0x29c>)
 800a2dc:	4a7e      	ldr	r2, [pc, #504]	; (800a4d8 <seeker_mode+0x2a0>)
 800a2de:	601a      	str	r2, [r3, #0]
				pLNE[1] = 1.25;
 800a2e0:	4b7c      	ldr	r3, [pc, #496]	; (800a4d4 <seeker_mode+0x29c>)
 800a2e2:	4a7e      	ldr	r2, [pc, #504]	; (800a4dc <seeker_mode+0x2a4>)
 800a2e4:	605a      	str	r2, [r3, #4]
				pLNE[2] = 5.20;
 800a2e6:	4b7b      	ldr	r3, [pc, #492]	; (800a4d4 <seeker_mode+0x29c>)
 800a2e8:	4a7d      	ldr	r2, [pc, #500]	; (800a4e0 <seeker_mode+0x2a8>)
 800a2ea:	609a      	str	r2, [r3, #8]
				pLNW[0] = 4.8;
 800a2ec:	4b7d      	ldr	r3, [pc, #500]	; (800a4e4 <seeker_mode+0x2ac>)
 800a2ee:	4a7e      	ldr	r2, [pc, #504]	; (800a4e8 <seeker_mode+0x2b0>)
 800a2f0:	601a      	str	r2, [r3, #0]
				pLNW[1] = -0.75;
 800a2f2:	4b7c      	ldr	r3, [pc, #496]	; (800a4e4 <seeker_mode+0x2ac>)
 800a2f4:	4a7d      	ldr	r2, [pc, #500]	; (800a4ec <seeker_mode+0x2b4>)
 800a2f6:	605a      	str	r2, [r3, #4]
				pLNW[2] = 5.85;
 800a2f8:	4b7a      	ldr	r3, [pc, #488]	; (800a4e4 <seeker_mode+0x2ac>)
 800a2fa:	4a7d      	ldr	r2, [pc, #500]	; (800a4f0 <seeker_mode+0x2b8>)
 800a2fc:	609a      	str	r2, [r3, #8]
				registerPath(LBaseN, 2, pLNE, pLNW);
 800a2fe:	4b79      	ldr	r3, [pc, #484]	; (800a4e4 <seeker_mode+0x2ac>)
 800a300:	4a74      	ldr	r2, [pc, #464]	; (800a4d4 <seeker_mode+0x29c>)
 800a302:	2102      	movs	r1, #2
 800a304:	487b      	ldr	r0, [pc, #492]	; (800a4f4 <seeker_mode+0x2bc>)
 800a306:	f7fe fe0b 	bl	8008f20 <registerPath>
				RNSSet(&rns, RNS_PPSetXYZerror, 0.20, 2.0, 0.10, 1.0);
 800a30a:	f04f 0200 	mov.w	r2, #0
 800a30e:	4b70      	ldr	r3, [pc, #448]	; (800a4d0 <seeker_mode+0x298>)
 800a310:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a314:	a364      	add	r3, pc, #400	; (adr r3, 800a4a8 <seeker_mode+0x270>)
 800a316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a31e:	f04f 0200 	mov.w	r2, #0
 800a322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a326:	e9cd 2300 	strd	r2, r3, [sp]
 800a32a:	a361      	add	r3, pc, #388	; (adr r3, 800a4b0 <seeker_mode+0x278>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	2145      	movs	r1, #69	; 0x45
 800a332:	4864      	ldr	r0, [pc, #400]	; (800a4c4 <seeker_mode+0x28c>)
 800a334:	f7fc ff3c 	bl	80071b0 <RNSSet>
				RNSPPstart(LBaseN, 2, &rns);
 800a338:	4a62      	ldr	r2, [pc, #392]	; (800a4c4 <seeker_mode+0x28c>)
 800a33a:	2102      	movs	r1, #2
 800a33c:	486d      	ldr	r0, [pc, #436]	; (800a4f4 <seeker_mode+0x2bc>)
 800a33e:	f7fc fd9e 	bl	8006e7e <RNSPPstart>
 800a342:	e071      	b.n	800a428 <seeker_mode+0x1f0>
			}
			else if(pp.base == 2){
 800a344:	4b5c      	ldr	r3, [pc, #368]	; (800a4b8 <seeker_mode+0x280>)
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d16a      	bne.n	800a428 <seeker_mode+0x1f0>
				target_enq = 10000;
 800a352:	4b5a      	ldr	r3, [pc, #360]	; (800a4bc <seeker_mode+0x284>)
 800a354:	f242 7210 	movw	r2, #10000	; 0x2710
 800a358:	601a      	str	r2, [r3, #0]
				lagori.bldcstart = 1;
 800a35a:	4a59      	ldr	r2, [pc, #356]	; (800a4c0 <seeker_mode+0x288>)
 800a35c:	7853      	ldrb	r3, [r2, #1]
 800a35e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a362:	7053      	strb	r3, [r2, #1]
				RNSSet(&rns, RNS_RESET_POS);
 800a364:	2114      	movs	r1, #20
 800a366:	4857      	ldr	r0, [pc, #348]	; (800a4c4 <seeker_mode+0x28c>)
 800a368:	f7fc ff22 	bl	80071b0 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800a36c:	2117      	movs	r1, #23
 800a36e:	4855      	ldr	r0, [pc, #340]	; (800a4c4 <seeker_mode+0x28c>)
 800a370:	f7fc ff1e 	bl	80071b0 <RNSSet>
				RNSSet(&rns, RNS_PPSetXYZerror, 0.05, 2.0, 0.025, 1.0);
 800a374:	f04f 0200 	mov.w	r2, #0
 800a378:	4b55      	ldr	r3, [pc, #340]	; (800a4d0 <seeker_mode+0x298>)
 800a37a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a37e:	a346      	add	r3, pc, #280	; (adr r3, 800a498 <seeker_mode+0x260>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a388:	f04f 0200 	mov.w	r2, #0
 800a38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a390:	e9cd 2300 	strd	r2, r3, [sp]
 800a394:	a342      	add	r3, pc, #264	; (adr r3, 800a4a0 <seeker_mode+0x268>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	2145      	movs	r1, #69	; 0x45
 800a39c:	4849      	ldr	r0, [pc, #292]	; (800a4c4 <seeker_mode+0x28c>)
 800a39e:	f7fc ff07 	bl	80071b0 <RNSSet>
				registerPath(LBaseS, 1, pLSW);
 800a3a2:	4a55      	ldr	r2, [pc, #340]	; (800a4f8 <seeker_mode+0x2c0>)
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	4849      	ldr	r0, [pc, #292]	; (800a4cc <seeker_mode+0x294>)
 800a3a8:	f7fe fdba 	bl	8008f20 <registerPath>
				RNSPPstart(LBaseS, 1, &rns);
 800a3ac:	4a45      	ldr	r2, [pc, #276]	; (800a4c4 <seeker_mode+0x28c>)
 800a3ae:	2101      	movs	r1, #1
 800a3b0:	4846      	ldr	r0, [pc, #280]	; (800a4cc <seeker_mode+0x294>)
 800a3b2:	f7fc fd64 	bl	8006e7e <RNSPPstart>
				Await(333);
 800a3b6:	f240 104d 	movw	r0, #333	; 0x14d
 800a3ba:	f004 fa93 	bl	800e8e4 <Await>
				pLNW[0] = 7.2;
 800a3be:	4b49      	ldr	r3, [pc, #292]	; (800a4e4 <seeker_mode+0x2ac>)
 800a3c0:	4a45      	ldr	r2, [pc, #276]	; (800a4d8 <seeker_mode+0x2a0>)
 800a3c2:	601a      	str	r2, [r3, #0]
				pLNW[1] = -1.25;
 800a3c4:	4b47      	ldr	r3, [pc, #284]	; (800a4e4 <seeker_mode+0x2ac>)
 800a3c6:	4a4d      	ldr	r2, [pc, #308]	; (800a4fc <seeker_mode+0x2c4>)
 800a3c8:	605a      	str	r2, [r3, #4]
				pLNW[2] = 5.35;
 800a3ca:	4b46      	ldr	r3, [pc, #280]	; (800a4e4 <seeker_mode+0x2ac>)
 800a3cc:	4a4c      	ldr	r2, [pc, #304]	; (800a500 <seeker_mode+0x2c8>)
 800a3ce:	609a      	str	r2, [r3, #8]
				pLNE[0] = 4.8;
 800a3d0:	4b40      	ldr	r3, [pc, #256]	; (800a4d4 <seeker_mode+0x29c>)
 800a3d2:	4a45      	ldr	r2, [pc, #276]	; (800a4e8 <seeker_mode+0x2b0>)
 800a3d4:	601a      	str	r2, [r3, #0]
				pLNE[1] = 0.75;
 800a3d6:	4b3f      	ldr	r3, [pc, #252]	; (800a4d4 <seeker_mode+0x29c>)
 800a3d8:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800a3dc:	605a      	str	r2, [r3, #4]
				pLNE[2] = 6.00;
 800a3de:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <seeker_mode+0x29c>)
 800a3e0:	4a48      	ldr	r2, [pc, #288]	; (800a504 <seeker_mode+0x2cc>)
 800a3e2:	609a      	str	r2, [r3, #8]
				registerPath(LBaseN, 2, pLNW, pLNE);
 800a3e4:	4b3b      	ldr	r3, [pc, #236]	; (800a4d4 <seeker_mode+0x29c>)
 800a3e6:	4a3f      	ldr	r2, [pc, #252]	; (800a4e4 <seeker_mode+0x2ac>)
 800a3e8:	2102      	movs	r1, #2
 800a3ea:	4842      	ldr	r0, [pc, #264]	; (800a4f4 <seeker_mode+0x2bc>)
 800a3ec:	f7fe fd98 	bl	8008f20 <registerPath>
				RNSSet(&rns, RNS_PPSetXYZerror, 0.20, 2.0, 0.10, 1.0);
 800a3f0:	f04f 0200 	mov.w	r2, #0
 800a3f4:	4b36      	ldr	r3, [pc, #216]	; (800a4d0 <seeker_mode+0x298>)
 800a3f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3fa:	a32b      	add	r3, pc, #172	; (adr r3, 800a4a8 <seeker_mode+0x270>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a40c:	e9cd 2300 	strd	r2, r3, [sp]
 800a410:	a327      	add	r3, pc, #156	; (adr r3, 800a4b0 <seeker_mode+0x278>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	2145      	movs	r1, #69	; 0x45
 800a418:	482a      	ldr	r0, [pc, #168]	; (800a4c4 <seeker_mode+0x28c>)
 800a41a:	f7fc fec9 	bl	80071b0 <RNSSet>
				RNSPPstart(LBaseN, 2, &rns);
 800a41e:	4a29      	ldr	r2, [pc, #164]	; (800a4c4 <seeker_mode+0x28c>)
 800a420:	2102      	movs	r1, #2
 800a422:	4834      	ldr	r0, [pc, #208]	; (800a4f4 <seeker_mode+0x2bc>)
 800a424:	f7fc fd2b 	bl	8006e7e <RNSPPstart>
			}
			pp.base = 6;
 800a428:	4a23      	ldr	r2, [pc, #140]	; (800a4b8 <seeker_mode+0x280>)
 800a42a:	7853      	ldrb	r3, [r2, #1]
 800a42c:	2106      	movs	r1, #6
 800a42e:	f361 0302 	bfi	r3, r1, #0, #3
 800a432:	7053      	strb	r3, [r2, #1]
 800a434:	e19d      	b.n	800a772 <seeker_mode+0x53a>
		}
		else if(rns.RNS_data.common_instruction != RNS_BUSY){	// adjustment
 800a436:	4b23      	ldr	r3, [pc, #140]	; (800a4c4 <seeker_mode+0x28c>)
 800a438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	f000 8198 	beq.w	800a772 <seeker_mode+0x53a>
			if(pp.base == 7){
 800a442:	4b1d      	ldr	r3, [pc, #116]	; (800a4b8 <seeker_mode+0x280>)
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	f003 0307 	and.w	r3, r3, #7
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b07      	cmp	r3, #7
 800a44e:	f040 8179 	bne.w	800a744 <seeker_mode+0x50c>
				for(int i = 0; i < 2; i++){
 800a452:	2300      	movs	r3, #0
 800a454:	607b      	str	r3, [r7, #4]
 800a456:	e16c      	b.n	800a732 <seeker_mode+0x4fa>
					while(pp.base != 0){
						RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 800a458:	491a      	ldr	r1, [pc, #104]	; (800a4c4 <seeker_mode+0x28c>)
 800a45a:	205f      	movs	r0, #95	; 0x5f
 800a45c:	f7fd f814 	bl	8007488 <RNSEnquire>
						z = rns.enq.enq_buffer[2].data;
 800a460:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <seeker_mode+0x28c>)
 800a462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a464:	4a28      	ldr	r2, [pc, #160]	; (800a508 <seeker_mode+0x2d0>)
 800a466:	6013      	str	r3, [r2, #0]
//				if(fabs(z - z_tar) > z_err)
//					RNSIMURotate(z_tar, &rns);
						if(z > 350)			z -= 360;
 800a468:	4b27      	ldr	r3, [pc, #156]	; (800a508 <seeker_mode+0x2d0>)
 800a46a:	edd3 7a00 	vldr	s15, [r3]
 800a46e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a50c <seeker_mode+0x2d4>
 800a472:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a47a:	dd4b      	ble.n	800a514 <seeker_mode+0x2dc>
 800a47c:	4b22      	ldr	r3, [pc, #136]	; (800a508 <seeker_mode+0x2d0>)
 800a47e:	edd3 7a00 	vldr	s15, [r3]
 800a482:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800a510 <seeker_mode+0x2d8>
 800a486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a48a:	4b1f      	ldr	r3, [pc, #124]	; (800a508 <seeker_mode+0x2d0>)
 800a48c:	edc3 7a00 	vstr	s15, [r3]
 800a490:	e054      	b.n	800a53c <seeker_mode+0x304>
 800a492:	bf00      	nop
 800a494:	f3af 8000 	nop.w
 800a498:	9999999a 	.word	0x9999999a
 800a49c:	3f999999 	.word	0x3f999999
 800a4a0:	9999999a 	.word	0x9999999a
 800a4a4:	3fa99999 	.word	0x3fa99999
 800a4a8:	9999999a 	.word	0x9999999a
 800a4ac:	3fb99999 	.word	0x3fb99999
 800a4b0:	9999999a 	.word	0x9999999a
 800a4b4:	3fc99999 	.word	0x3fc99999
 800a4b8:	20007880 	.word	0x20007880
 800a4bc:	20009738 	.word	0x20009738
 800a4c0:	20009b10 	.word	0x20009b10
 800a4c4:	200093ec 	.word	0x200093ec
 800a4c8:	200096e8 	.word	0x200096e8
 800a4cc:	200079a4 	.word	0x200079a4
 800a4d0:	3ff00000 	.word	0x3ff00000
 800a4d4:	2000aa6c 	.word	0x2000aa6c
 800a4d8:	40e66666 	.word	0x40e66666
 800a4dc:	3fa00000 	.word	0x3fa00000
 800a4e0:	40a66666 	.word	0x40a66666
 800a4e4:	2000790c 	.word	0x2000790c
 800a4e8:	4099999a 	.word	0x4099999a
 800a4ec:	bf400000 	.word	0xbf400000
 800a4f0:	40bb3333 	.word	0x40bb3333
 800a4f4:	2000a218 	.word	0x2000a218
 800a4f8:	20009a38 	.word	0x20009a38
 800a4fc:	bfa00000 	.word	0xbfa00000
 800a500:	40ab3333 	.word	0x40ab3333
 800a504:	40c00000 	.word	0x40c00000
 800a508:	200093e8 	.word	0x200093e8
 800a50c:	43af0000 	.word	0x43af0000
 800a510:	43b40000 	.word	0x43b40000
						else if(z < -10)	z += 360;
 800a514:	4bc2      	ldr	r3, [pc, #776]	; (800a820 <seeker_mode+0x5e8>)
 800a516:	edd3 7a00 	vldr	s15, [r3]
 800a51a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800a51e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a526:	d509      	bpl.n	800a53c <seeker_mode+0x304>
 800a528:	4bbd      	ldr	r3, [pc, #756]	; (800a820 <seeker_mode+0x5e8>)
 800a52a:	edd3 7a00 	vldr	s15, [r3]
 800a52e:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800a824 <seeker_mode+0x5ec>
 800a532:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a536:	4bba      	ldr	r3, [pc, #744]	; (800a820 <seeker_mode+0x5e8>)
 800a538:	edc3 7a00 	vstr	s15, [r3]
						vz = (z - z_tar) / 15.0;
 800a53c:	4bb8      	ldr	r3, [pc, #736]	; (800a820 <seeker_mode+0x5e8>)
 800a53e:	ed93 7a00 	vldr	s14, [r3]
 800a542:	4bb9      	ldr	r3, [pc, #740]	; (800a828 <seeker_mode+0x5f0>)
 800a544:	edd3 7a00 	vldr	s15, [r3]
 800a548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a54c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800a550:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a554:	4bb5      	ldr	r3, [pc, #724]	; (800a82c <seeker_mode+0x5f4>)
 800a556:	edc3 7a00 	vstr	s15, [r3]
						if(vz < 0.50)			vz = 0.50;
 800a55a:	4bb4      	ldr	r3, [pc, #720]	; (800a82c <seeker_mode+0x5f4>)
 800a55c:	edd3 7a00 	vldr	s15, [r3]
 800a560:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a564:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56c:	d504      	bpl.n	800a578 <seeker_mode+0x340>
 800a56e:	4baf      	ldr	r3, [pc, #700]	; (800a82c <seeker_mode+0x5f4>)
 800a570:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	e029      	b.n	800a5cc <seeker_mode+0x394>
						else if(vz > 3.00)		vz = 3.00;
 800a578:	4bac      	ldr	r3, [pc, #688]	; (800a82c <seeker_mode+0x5f4>)
 800a57a:	edd3 7a00 	vldr	s15, [r3]
 800a57e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800a582:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58a:	dd03      	ble.n	800a594 <seeker_mode+0x35c>
 800a58c:	4ba7      	ldr	r3, [pc, #668]	; (800a82c <seeker_mode+0x5f4>)
 800a58e:	4aa8      	ldr	r2, [pc, #672]	; (800a830 <seeker_mode+0x5f8>)
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	e01b      	b.n	800a5cc <seeker_mode+0x394>
						else if (vz > -0.50)	vz = -0.50;
 800a594:	4ba5      	ldr	r3, [pc, #660]	; (800a82c <seeker_mode+0x5f4>)
 800a596:	edd3 7a00 	vldr	s15, [r3]
 800a59a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a59e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a6:	dd04      	ble.n	800a5b2 <seeker_mode+0x37a>
 800a5a8:	4ba0      	ldr	r3, [pc, #640]	; (800a82c <seeker_mode+0x5f4>)
 800a5aa:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	e00c      	b.n	800a5cc <seeker_mode+0x394>
						else if (vz < -3.00)	vz = -3.00;
 800a5b2:	4b9e      	ldr	r3, [pc, #632]	; (800a82c <seeker_mode+0x5f4>)
 800a5b4:	edd3 7a00 	vldr	s15, [r3]
 800a5b8:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800a5bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	d502      	bpl.n	800a5cc <seeker_mode+0x394>
 800a5c6:	4b99      	ldr	r3, [pc, #612]	; (800a82c <seeker_mode+0x5f4>)
 800a5c8:	4a9a      	ldr	r2, [pc, #616]	; (800a834 <seeker_mode+0x5fc>)
 800a5ca:	601a      	str	r2, [r3, #0]

						if(fabs(z - z_tar) > z_err)
 800a5cc:	4b94      	ldr	r3, [pc, #592]	; (800a820 <seeker_mode+0x5e8>)
 800a5ce:	ed93 7a00 	vldr	s14, [r3]
 800a5d2:	4b95      	ldr	r3, [pc, #596]	; (800a828 <seeker_mode+0x5f0>)
 800a5d4:	edd3 7a00 	vldr	s15, [r3]
 800a5d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5dc:	eef0 7ae7 	vabs.f32	s15, s15
 800a5e0:	ee17 0a90 	vmov	r0, s15
 800a5e4:	f7f5 ffb0 	bl	8000548 <__aeabi_f2d>
 800a5e8:	a387      	add	r3, pc, #540	; (adr r3, 800a808 <seeker_mode+0x5d0>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	f7f6 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d01b      	beq.n	800a630 <seeker_mode+0x3f8>
							RNSVelocity(vz, -vz, vz, -vz, &rns);
 800a5f8:	4b8c      	ldr	r3, [pc, #560]	; (800a82c <seeker_mode+0x5f4>)
 800a5fa:	ed93 7a00 	vldr	s14, [r3]
 800a5fe:	4b8b      	ldr	r3, [pc, #556]	; (800a82c <seeker_mode+0x5f4>)
 800a600:	edd3 7a00 	vldr	s15, [r3]
 800a604:	eef1 6a67 	vneg.f32	s13, s15
 800a608:	4b88      	ldr	r3, [pc, #544]	; (800a82c <seeker_mode+0x5f4>)
 800a60a:	ed93 6a00 	vldr	s12, [r3]
 800a60e:	4b87      	ldr	r3, [pc, #540]	; (800a82c <seeker_mode+0x5f4>)
 800a610:	edd3 7a00 	vldr	s15, [r3]
 800a614:	eef1 7a67 	vneg.f32	s15, s15
 800a618:	4887      	ldr	r0, [pc, #540]	; (800a838 <seeker_mode+0x600>)
 800a61a:	eef0 1a67 	vmov.f32	s3, s15
 800a61e:	eeb0 1a46 	vmov.f32	s2, s12
 800a622:	eef0 0a66 	vmov.f32	s1, s13
 800a626:	eeb0 0a47 	vmov.f32	s0, s14
 800a62a:	f7fc fbe3 	bl	8006df4 <RNSVelocity>
 800a62e:	e061      	b.n	800a6f4 <seeker_mode+0x4bc>
						else{
							if(tfmini.dist_err > 0.05)			RNSVelocity(-2.5, -2.5, -2.5, -2.5, &rns);
 800a630:	4b82      	ldr	r3, [pc, #520]	; (800a83c <seeker_mode+0x604>)
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	4618      	mov	r0, r3
 800a636:	f7f5 ff87 	bl	8000548 <__aeabi_f2d>
 800a63a:	a375      	add	r3, pc, #468	; (adr r3, 800a810 <seeker_mode+0x5d8>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7f6 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00b      	beq.n	800a662 <seeker_mode+0x42a>
 800a64a:	487b      	ldr	r0, [pc, #492]	; (800a838 <seeker_mode+0x600>)
 800a64c:	eef8 1a04 	vmov.f32	s3, #132	; 0xc0200000 -2.5
 800a650:	eeb8 1a04 	vmov.f32	s2, #132	; 0xc0200000 -2.5
 800a654:	eef8 0a04 	vmov.f32	s1, #132	; 0xc0200000 -2.5
 800a658:	eeb8 0a04 	vmov.f32	s0, #132	; 0xc0200000 -2.5
 800a65c:	f7fc fbca 	bl	8006df4 <RNSVelocity>
 800a660:	e048      	b.n	800a6f4 <seeker_mode+0x4bc>
							else if(tfmini.dist_err < -0.30)	RNSVelocity(0.75, 0.75, 0.75, 0.75, &rns);
 800a662:	4b76      	ldr	r3, [pc, #472]	; (800a83c <seeker_mode+0x604>)
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	4618      	mov	r0, r3
 800a668:	f7f5 ff6e 	bl	8000548 <__aeabi_f2d>
 800a66c:	a36a      	add	r3, pc, #424	; (adr r3, 800a818 <seeker_mode+0x5e0>)
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	f7f6 fa33 	bl	8000adc <__aeabi_dcmplt>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <seeker_mode+0x45c>
 800a67c:	486e      	ldr	r0, [pc, #440]	; (800a838 <seeker_mode+0x600>)
 800a67e:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 800a682:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800a686:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800a68a:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800a68e:	f7fc fbb1 	bl	8006df4 <RNSVelocity>
 800a692:	e02f      	b.n	800a6f4 <seeker_mode+0x4bc>
							else if(!(LGbasel))					RNSVelocity(1.00, -1.00, -1.00, 1.00, &rns);
 800a694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a698:	4869      	ldr	r0, [pc, #420]	; (800a840 <seeker_mode+0x608>)
 800a69a:	f00c f865 	bl	8016768 <HAL_GPIO_ReadPin>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <seeker_mode+0x484>
 800a6a4:	4864      	ldr	r0, [pc, #400]	; (800a838 <seeker_mode+0x600>)
 800a6a6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800a6aa:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 800a6ae:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800a6b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a6b6:	f7fc fb9d 	bl	8006df4 <RNSVelocity>
 800a6ba:	e01b      	b.n	800a6f4 <seeker_mode+0x4bc>
							else if(!(LGbaser))					RNSVelocity(-1.00, 1.00, 1.00, -1.00, &rns);
 800a6bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a6c0:	485f      	ldr	r0, [pc, #380]	; (800a840 <seeker_mode+0x608>)
 800a6c2:	f00c f851 	bl	8016768 <HAL_GPIO_ReadPin>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <seeker_mode+0x4ac>
 800a6cc:	485a      	ldr	r0, [pc, #360]	; (800a838 <seeker_mode+0x600>)
 800a6ce:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800a6d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800a6d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800a6da:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a6de:	f7fc fb89 	bl	8006df4 <RNSVelocity>
 800a6e2:	e007      	b.n	800a6f4 <seeker_mode+0x4bc>
							else{
								RNSStop(&rns);
 800a6e4:	4854      	ldr	r0, [pc, #336]	; (800a838 <seeker_mode+0x600>)
 800a6e6:	f7fc fb35 	bl	8006d54 <RNSStop>
								pp.base = 0;
 800a6ea:	4a56      	ldr	r2, [pc, #344]	; (800a844 <seeker_mode+0x60c>)
 800a6ec:	7853      	ldrb	r3, [r2, #1]
 800a6ee:	f36f 0302 	bfc	r3, #0, #3
 800a6f2:	7053      	strb	r3, [r2, #1]
							}
						}
						if(ps4.button == L1){
 800a6f4:	4b54      	ldr	r3, [pc, #336]	; (800a848 <seeker_mode+0x610>)
 800a6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fc:	d103      	bne.n	800a706 <seeker_mode+0x4ce>
							RNSStop(&rns);
 800a6fe:	484e      	ldr	r0, [pc, #312]	; (800a838 <seeker_mode+0x600>)
 800a700:	f7fc fb28 	bl	8006d54 <RNSStop>
							break;
 800a704:	e007      	b.n	800a716 <seeker_mode+0x4de>
					while(pp.base != 0){
 800a706:	4b4f      	ldr	r3, [pc, #316]	; (800a844 <seeker_mode+0x60c>)
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	f47f aea1 	bne.w	800a458 <seeker_mode+0x220>
						}
					}
					RNSStop(&rns);
 800a716:	4848      	ldr	r0, [pc, #288]	; (800a838 <seeker_mode+0x600>)
 800a718:	f7fc fb1c 	bl	8006d54 <RNSStop>
					Await(100);
 800a71c:	2064      	movs	r0, #100	; 0x64
 800a71e:	f004 f8e1 	bl	800e8e4 <Await>
					pp.base = 7;
 800a722:	4a48      	ldr	r2, [pc, #288]	; (800a844 <seeker_mode+0x60c>)
 800a724:	7853      	ldrb	r3, [r2, #1]
 800a726:	f043 0307 	orr.w	r3, r3, #7
 800a72a:	7053      	strb	r3, [r2, #1]
				for(int i = 0; i < 2; i++){
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3301      	adds	r3, #1
 800a730:	607b      	str	r3, [r7, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2b01      	cmp	r3, #1
 800a736:	dde6      	ble.n	800a706 <seeker_mode+0x4ce>
				}
				pp.base = 0;
 800a738:	4a42      	ldr	r2, [pc, #264]	; (800a844 <seeker_mode+0x60c>)
 800a73a:	7853      	ldrb	r3, [r2, #1]
 800a73c:	f36f 0302 	bfc	r3, #0, #3
 800a740:	7053      	strb	r3, [r2, #1]
 800a742:	e016      	b.n	800a772 <seeker_mode+0x53a>
//				pp.baseok = 1;
			}
			else if(pp.baseleft)
 800a744:	4b3f      	ldr	r3, [pc, #252]	; (800a844 <seeker_mode+0x60c>)
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <seeker_mode+0x532>
				RNSVelocity(5.2, 5.2, 5.2, 5.2, &rns);
 800a752:	4839      	ldr	r0, [pc, #228]	; (800a838 <seeker_mode+0x600>)
 800a754:	eddf 1a3d 	vldr	s3, [pc, #244]	; 800a84c <seeker_mode+0x614>
 800a758:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800a84c <seeker_mode+0x614>
 800a75c:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800a84c <seeker_mode+0x614>
 800a760:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800a84c <seeker_mode+0x614>
 800a764:	f7fc fb46 	bl	8006df4 <RNSVelocity>
 800a768:	e003      	b.n	800a772 <seeker_mode+0x53a>
			else
				realMODN(&ps4, &rns);
 800a76a:	4933      	ldr	r1, [pc, #204]	; (800a838 <seeker_mode+0x600>)
 800a76c:	4836      	ldr	r0, [pc, #216]	; (800a848 <seeker_mode+0x610>)
 800a76e:	f7fb fb8b 	bl	8005e88 <realMODN>
		}

		if(ps4.button == R1)
 800a772:	4b35      	ldr	r3, [pc, #212]	; (800a848 <seeker_mode+0x610>)
 800a774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a77a:	d104      	bne.n	800a786 <seeker_mode+0x54e>
			setSpeedMODN(7.6);
 800a77c:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800a850 <seeker_mode+0x618>
 800a780:	f7fb fe32 	bl	80063e8 <setSpeedMODN>
 800a784:	e003      	b.n	800a78e <seeker_mode+0x556>
		else
			setSpeedMODN(4.5);
 800a786:	eeb1 0a02 	vmov.f32	s0, #18	; 0x40900000  4.5
 800a78a:	f7fb fe2d 	bl	80063e8 <setSpeedMODN>

		//flipservo
		if(lagori.flip == 1){
 800a78e:	4b31      	ldr	r3, [pc, #196]	; (800a854 <seeker_mode+0x61c>)
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	f003 0303 	and.w	r3, r3, #3
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d10a      	bne.n	800a7b2 <seeker_mode+0x57a>
			svFlip
 800a79c:	f240 2126 	movw	r1, #550	; 0x226
 800a7a0:	482d      	ldr	r0, [pc, #180]	; (800a858 <seeker_mode+0x620>)
 800a7a2:	f7fe fa67 	bl	8008c74 <ServoSetPulse>
 800a7a6:	f640 01da 	movw	r1, #2266	; 0x8da
 800a7aa:	482c      	ldr	r0, [pc, #176]	; (800a85c <seeker_mode+0x624>)
 800a7ac:	f7fe fa62 	bl	8008c74 <ServoSetPulse>
 800a7b0:	e010      	b.n	800a7d4 <seeker_mode+0x59c>
		}else if(lagori.flip == 0){
 800a7b2:	4b28      	ldr	r3, [pc, #160]	; (800a854 <seeker_mode+0x61c>)
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <seeker_mode+0x59c>
			svNoFlip
 800a7c0:	f240 4101 	movw	r1, #1025	; 0x401
 800a7c4:	4824      	ldr	r0, [pc, #144]	; (800a858 <seeker_mode+0x620>)
 800a7c6:	f7fe fa55 	bl	8008c74 <ServoSetPulse>
 800a7ca:	f240 61ef 	movw	r1, #1775	; 0x6ef
 800a7ce:	4823      	ldr	r0, [pc, #140]	; (800a85c <seeker_mode+0x624>)
 800a7d0:	f7fe fa50 	bl	8008c74 <ServoSetPulse>
		}

		//lagori gripper
		if(lagori.pwstate == 0){	//open
 800a7d4:	4b1f      	ldr	r3, [pc, #124]	; (800a854 <seeker_mode+0x61c>)
 800a7d6:	785b      	ldrb	r3, [r3, #1]
 800a7d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d14e      	bne.n	800a880 <seeker_mode+0x648>
			lagori.gripok = 0;
 800a7e2:	4a1c      	ldr	r2, [pc, #112]	; (800a854 <seeker_mode+0x61c>)
 800a7e4:	7853      	ldrb	r3, [r2, #1]
 800a7e6:	f36f 1386 	bfc	r3, #6, #1
 800a7ea:	7053      	strb	r3, [r2, #1]
			if(!LGopen)
 800a7ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a7f0:	481b      	ldr	r0, [pc, #108]	; (800a860 <seeker_mode+0x628>)
 800a7f2:	f00b ffb9 	bl	8016768 <HAL_GPIO_ReadPin>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d037      	beq.n	800a86c <seeker_mode+0x634>
				LGPW(12000)
 800a7fc:	4919      	ldr	r1, [pc, #100]	; (800a864 <seeker_mode+0x62c>)
 800a7fe:	481a      	ldr	r0, [pc, #104]	; (800a868 <seeker_mode+0x630>)
 800a800:	f7f6 fdbe 	bl	8001380 <WriteBDC>
 800a804:	e0d7      	b.n	800a9b6 <seeker_mode+0x77e>
 800a806:	bf00      	nop
 800a808:	66666666 	.word	0x66666666
 800a80c:	401a6666 	.word	0x401a6666
 800a810:	9999999a 	.word	0x9999999a
 800a814:	3fa99999 	.word	0x3fa99999
 800a818:	33333333 	.word	0x33333333
 800a81c:	bfd33333 	.word	0xbfd33333
 800a820:	200093e8 	.word	0x200093e8
 800a824:	43b40000 	.word	0x43b40000
 800a828:	20007684 	.word	0x20007684
 800a82c:	2000719c 	.word	0x2000719c
 800a830:	40400000 	.word	0x40400000
 800a834:	c0400000 	.word	0xc0400000
 800a838:	200093ec 	.word	0x200093ec
 800a83c:	20009704 	.word	0x20009704
 800a840:	40020c00 	.word	0x40020c00
 800a844:	20007880 	.word	0x20007880
 800a848:	2000a448 	.word	0x2000a448
 800a84c:	40a66666 	.word	0x40a66666
 800a850:	40f33333 	.word	0x40f33333
 800a854:	20009b10 	.word	0x20009b10
 800a858:	20009c44 	.word	0x20009c44
 800a85c:	2000aa48 	.word	0x2000aa48
 800a860:	40021000 	.word	0x40021000
 800a864:	ffffd120 	.word	0xffffd120
 800a868:	2000aa24 	.word	0x2000aa24
			else{
				LGPW(0)
 800a86c:	2100      	movs	r1, #0
 800a86e:	4858      	ldr	r0, [pc, #352]	; (800a9d0 <seeker_mode+0x798>)
 800a870:	f7f6 fd86 	bl	8001380 <WriteBDC>
				lagori.pwstate = 3;
 800a874:	4a57      	ldr	r2, [pc, #348]	; (800a9d4 <seeker_mode+0x79c>)
 800a876:	7853      	ldrb	r3, [r2, #1]
 800a878:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a87c:	7053      	strb	r3, [r2, #1]
 800a87e:	e09a      	b.n	800a9b6 <seeker_mode+0x77e>
			}
		}
		else if(lagori.pwstate == 1){	//grip
 800a880:	4b54      	ldr	r3, [pc, #336]	; (800a9d4 <seeker_mode+0x79c>)
 800a882:	785b      	ldrb	r3, [r3, #1]
 800a884:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d172      	bne.n	800a974 <seeker_mode+0x73c>
			if(lsLGl && lsLGr){
 800a88e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a892:	4851      	ldr	r0, [pc, #324]	; (800a9d8 <seeker_mode+0x7a0>)
 800a894:	f00b ff68 	bl	8016768 <HAL_GPIO_ReadPin>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d14d      	bne.n	800a93a <seeker_mode+0x702>
 800a89e:	2108      	movs	r1, #8
 800a8a0:	484e      	ldr	r0, [pc, #312]	; (800a9dc <seeker_mode+0x7a4>)
 800a8a2:	f00b ff61 	bl	8016768 <HAL_GPIO_ReadPin>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d146      	bne.n	800a93a <seeker_mode+0x702>
				LGPW(-12000)
 800a8ac:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800a8b0:	4847      	ldr	r0, [pc, #284]	; (800a9d0 <seeker_mode+0x798>)
 800a8b2:	f7f6 fd65 	bl	8001380 <WriteBDC>
				if(LGclose || enqpwLG < dangerclose){
 800a8b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a8ba:	4849      	ldr	r0, [pc, #292]	; (800a9e0 <seeker_mode+0x7a8>)
 800a8bc:	f00b ff54 	bl	8016768 <HAL_GPIO_ReadPin>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <seeker_mode+0x696>
 800a8c6:	4b47      	ldr	r3, [pc, #284]	; (800a9e4 <seeker_mode+0x7ac>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b63      	cmp	r3, #99	; 0x63
 800a8cc:	dc23      	bgt.n	800a916 <seeker_mode+0x6de>
					LGPW(0)
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	483f      	ldr	r0, [pc, #252]	; (800a9d0 <seeker_mode+0x798>)
 800a8d2:	f7f6 fd55 	bl	8001380 <WriteBDC>
					lagori.pwstate = 3;
 800a8d6:	4a3f      	ldr	r2, [pc, #252]	; (800a9d4 <seeker_mode+0x79c>)
 800a8d8:	7853      	ldrb	r3, [r2, #1]
 800a8da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a8de:	7053      	strb	r3, [r2, #1]
					lagori.bldclayer = 5;
 800a8e0:	4a3c      	ldr	r2, [pc, #240]	; (800a9d4 <seeker_mode+0x79c>)
 800a8e2:	7813      	ldrb	r3, [r2, #0]
 800a8e4:	2105      	movs	r1, #5
 800a8e6:	f361 0384 	bfi	r3, r1, #2, #3
 800a8ea:	7013      	strb	r3, [r2, #0]
					lagori.flip = 2;
 800a8ec:	4a39      	ldr	r2, [pc, #228]	; (800a9d4 <seeker_mode+0x79c>)
 800a8ee:	7853      	ldrb	r3, [r2, #1]
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	f361 0301 	bfi	r3, r1, #0, #2
 800a8f6:	7053      	strb	r3, [r2, #1]
					svLGF1(1275)
 800a8f8:	f240 41fb 	movw	r1, #1275	; 0x4fb
 800a8fc:	483a      	ldr	r0, [pc, #232]	; (800a9e8 <seeker_mode+0x7b0>)
 800a8fe:	f7fe f9b9 	bl	8008c74 <ServoSetPulse>
					svLGF2(1525)
 800a902:	f240 51f5 	movw	r1, #1525	; 0x5f5
 800a906:	4839      	ldr	r0, [pc, #228]	; (800a9ec <seeker_mode+0x7b4>)
 800a908:	f7fe f9b4 	bl	8008c74 <ServoSetPulse>
					lagori.bldclapp = 1;
 800a90c:	4a31      	ldr	r2, [pc, #196]	; (800a9d4 <seeker_mode+0x79c>)
 800a90e:	7813      	ldrb	r3, [r2, #0]
 800a910:	f043 0301 	orr.w	r3, r3, #1
 800a914:	7013      	strb	r3, [r2, #0]
				}
				if(LGclose){
 800a916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a91a:	4831      	ldr	r0, [pc, #196]	; (800a9e0 <seeker_mode+0x7a8>)
 800a91c:	f00b ff24 	bl	8016768 <HAL_GPIO_ReadPin>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d147      	bne.n	800a9b6 <seeker_mode+0x77e>
					LGPW(0)
 800a926:	2100      	movs	r1, #0
 800a928:	4829      	ldr	r0, [pc, #164]	; (800a9d0 <seeker_mode+0x798>)
 800a92a:	f7f6 fd29 	bl	8001380 <WriteBDC>
					lagori.pwstate = 3;
 800a92e:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <seeker_mode+0x79c>)
 800a930:	7853      	ldrb	r3, [r2, #1]
 800a932:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a936:	7053      	strb	r3, [r2, #1]
				if(LGclose){
 800a938:	e03d      	b.n	800a9b6 <seeker_mode+0x77e>
				}
			}else{
				Await(75);
 800a93a:	204b      	movs	r0, #75	; 0x4b
 800a93c:	f003 ffd2 	bl	800e8e4 <Await>
				LGPW(0)
 800a940:	2100      	movs	r1, #0
 800a942:	4823      	ldr	r0, [pc, #140]	; (800a9d0 <seeker_mode+0x798>)
 800a944:	f7f6 fd1c 	bl	8001380 <WriteBDC>
				lagori.gripok = 1;
 800a948:	4a22      	ldr	r2, [pc, #136]	; (800a9d4 <seeker_mode+0x79c>)
 800a94a:	7853      	ldrb	r3, [r2, #1]
 800a94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a950:	7053      	strb	r3, [r2, #1]
				lagori.pwstate = 3;
 800a952:	4a20      	ldr	r2, [pc, #128]	; (800a9d4 <seeker_mode+0x79c>)
 800a954:	7853      	ldrb	r3, [r2, #1]
 800a956:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a95a:	7053      	strb	r3, [r2, #1]
				sprintf(data, "pwenq, %d\n", enqpwLG);
 800a95c:	4b21      	ldr	r3, [pc, #132]	; (800a9e4 <seeker_mode+0x7ac>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	4923      	ldr	r1, [pc, #140]	; (800a9f0 <seeker_mode+0x7b8>)
 800a964:	4823      	ldr	r0, [pc, #140]	; (800a9f4 <seeker_mode+0x7bc>)
 800a966:	f015 f9cb 	bl	801fd00 <siprintf>
				UARTSend
 800a96a:	4922      	ldr	r1, [pc, #136]	; (800a9f4 <seeker_mode+0x7bc>)
 800a96c:	4822      	ldr	r0, [pc, #136]	; (800a9f8 <seeker_mode+0x7c0>)
 800a96e:	f7f9 f87f 	bl	8003a70 <UARTPrintString>
 800a972:	e020      	b.n	800a9b6 <seeker_mode+0x77e>
			}
		}
		else if(lagori.pwstate == 2){	//close OR retry
 800a974:	4b17      	ldr	r3, [pc, #92]	; (800a9d4 <seeker_mode+0x79c>)
 800a976:	785b      	ldrb	r3, [r3, #1]
 800a978:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b20      	cmp	r3, #32
 800a980:	d119      	bne.n	800a9b6 <seeker_mode+0x77e>
			if(!(LGclose))	LGPW(-12000)
 800a982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a986:	4816      	ldr	r0, [pc, #88]	; (800a9e0 <seeker_mode+0x7a8>)
 800a988:	f00b feee 	bl	8016768 <HAL_GPIO_ReadPin>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <seeker_mode+0x766>
 800a992:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800a996:	480e      	ldr	r0, [pc, #56]	; (800a9d0 <seeker_mode+0x798>)
 800a998:	f7f6 fcf2 	bl	8001380 <WriteBDC>
 800a99c:	e00b      	b.n	800a9b6 <seeker_mode+0x77e>
			else{
				LGPW(0)
 800a99e:	2100      	movs	r1, #0
 800a9a0:	480b      	ldr	r0, [pc, #44]	; (800a9d0 <seeker_mode+0x798>)
 800a9a2:	f7f6 fced 	bl	8001380 <WriteBDC>
				QEIReset(QEI1);
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	f7f7 fa10 	bl	8001dcc <QEIReset>
				lagori.pwstate = 3;
 800a9ac:	4a09      	ldr	r2, [pc, #36]	; (800a9d4 <seeker_mode+0x79c>)
 800a9ae:	7853      	ldrb	r3, [r2, #1]
 800a9b0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800a9b4:	7053      	strb	r3, [r2, #1]
	while(sys.manual){
 800a9b6:	4b11      	ldr	r3, [pc, #68]	; (800a9fc <seeker_mode+0x7c4>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f47f ac3d 	bne.w	800a240 <seeker_mode+0x8>
			}
		}
	}
}
 800a9c6:	bf00      	nop
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	2000aa24 	.word	0x2000aa24
 800a9d4:	20009b10 	.word	0x20009b10
 800a9d8:	40020000 	.word	0x40020000
 800a9dc:	40020c00 	.word	0x40020c00
 800a9e0:	40021000 	.word	0x40021000
 800a9e4:	20009ccc 	.word	0x20009ccc
 800a9e8:	20009c44 	.word	0x20009c44
 800a9ec:	2000aa48 	.word	0x2000aa48
 800a9f0:	08024670 	.word	0x08024670
 800a9f4:	20006a8c 	.word	0x20006a8c
 800a9f8:	20006c74 	.word	0x20006c74
 800a9fc:	2000794c 	.word	0x2000794c

0800aa00 <lagori_func>:

void lagori_func (void){
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af06      	add	r7, sp, #24

	lagori.flip = 2;
 800aa06:	4aa8      	ldr	r2, [pc, #672]	; (800aca8 <lagori_func+0x2a8>)
 800aa08:	7853      	ldrb	r3, [r2, #1]
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	f361 0301 	bfi	r3, r1, #0, #2
 800aa10:	7053      	strb	r3, [r2, #1]
	QEIReset(QEI4);
 800aa12:	2004      	movs	r0, #4
 800aa14:	f7f7 f9da 	bl	8001dcc <QEIReset>
	svBRup
 800aa18:	f44f 7116 	mov.w	r1, #600	; 0x258
 800aa1c:	48a3      	ldr	r0, [pc, #652]	; (800acac <lagori_func+0x2ac>)
 800aa1e:	f7fe f929 	bl	8008c74 <ServoSetPulse>
	svBRAback
 800aa22:	f640 0176 	movw	r1, #2166	; 0x876
 800aa26:	48a2      	ldr	r0, [pc, #648]	; (800acb0 <lagori_func+0x2b0>)
 800aa28:	f7fe f924 	bl	8008c74 <ServoSetPulse>
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.051 / 4000.0 * 3.142, 2.0,
 800aa2c:	f04f 0200 	mov.w	r2, #0
 800aa30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa38:	a399      	add	r3, pc, #612	; (adr r3, 800aca0 <lagori_func+0x2a0>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa42:	f04f 0200 	mov.w	r2, #0
 800aa46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa4a:	e9cd 2300 	strd	r2, r3, [sp]
 800aa4e:	a394      	add	r3, pc, #592	; (adr r3, 800aca0 <lagori_func+0x2a0>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	2149      	movs	r1, #73	; 0x49
 800aa56:	4897      	ldr	r0, [pc, #604]	; (800acb4 <lagori_func+0x2b4>)
 800aa58:	f7fc fbaa 	bl	80071b0 <RNSSet>
			0.051 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	Await(500);
 800aa5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa60:	f003 ff40 	bl	800e8e4 <Await>
	BgripOFF
 800aa64:	4a94      	ldr	r2, [pc, #592]	; (800acb8 <lagori_func+0x2b8>)
 800aa66:	7853      	ldrb	r3, [r2, #1]
 800aa68:	f36f 0300 	bfc	r3, #0, #1
 800aa6c:	7053      	strb	r3, [r2, #1]
	svBRrealup
 800aa6e:	f240 11a9 	movw	r1, #425	; 0x1a9
 800aa72:	488e      	ldr	r0, [pc, #568]	; (800acac <lagori_func+0x2ac>)
 800aa74:	f7fe f8fe 	bl	8008c74 <ServoSetPulse>
	svCloseFlip
 800aa78:	f240 719e 	movw	r1, #1950	; 0x79e
 800aa7c:	488f      	ldr	r0, [pc, #572]	; (800acbc <lagori_func+0x2bc>)
 800aa7e:	f7fe f8f9 	bl	8008c74 <ServoSetPulse>
 800aa82:	f44f 7161 	mov.w	r1, #900	; 0x384
 800aa86:	488e      	ldr	r0, [pc, #568]	; (800acc0 <lagori_func+0x2c0>)
 800aa88:	f7fe f8f4 	bl	8008c74 <ServoSetPulse>
	lagori.pwstate = 0;
 800aa8c:	4a86      	ldr	r2, [pc, #536]	; (800aca8 <lagori_func+0x2a8>)
 800aa8e:	7853      	ldrb	r3, [r2, #1]
 800aa90:	f36f 1305 	bfc	r3, #4, #2
 800aa94:	7053      	strb	r3, [r2, #1]

	while(sys.manual){
 800aa96:	e371      	b.n	800b17c <lagori_func+0x77c>
		if(ps4.button == CROSS){		//close lagori gripper
 800aa98:	4b8a      	ldr	r3, [pc, #552]	; (800acc4 <lagori_func+0x2c4>)
 800aa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaa0:	d10b      	bne.n	800aaba <lagori_func+0xba>
				lagori.pwstate = 1;
 800aaa2:	4a81      	ldr	r2, [pc, #516]	; (800aca8 <lagori_func+0x2a8>)
 800aaa4:	7853      	ldrb	r3, [r2, #1]
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	f361 1305 	bfi	r3, r1, #4, #2
 800aaac:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CROSS);
 800aaae:	bf00      	nop
 800aab0:	4b84      	ldr	r3, [pc, #528]	; (800acc4 <lagori_func+0x2c4>)
 800aab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab8:	d0fa      	beq.n	800aab0 <lagori_func+0xb0>
		}

		if(ps4.button == CIRCLE){		//flip + push
 800aaba:	4b82      	ldr	r3, [pc, #520]	; (800acc4 <lagori_func+0x2c4>)
 800aabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac2:	f040 80c7 	bne.w	800ac54 <lagori_func+0x254>
			while(ps4.button == CIRCLE);
 800aac6:	bf00      	nop
 800aac8:	4b7e      	ldr	r3, [pc, #504]	; (800acc4 <lagori_func+0x2c4>)
 800aaca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aacc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aad0:	d0fa      	beq.n	800aac8 <lagori_func+0xc8>
			if(ps4.button == R1_CIRCLE){
 800aad2:	4b7c      	ldr	r3, [pc, #496]	; (800acc4 <lagori_func+0x2c4>)
 800aad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aad6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aada:	d12c      	bne.n	800ab36 <lagori_func+0x136>
				fx.svapp = 1;
 800aadc:	4a7a      	ldr	r2, [pc, #488]	; (800acc8 <lagori_func+0x2c8>)
 800aade:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
				while(ps4.button == R1_CIRCLE);
 800aaea:	bf00      	nop
 800aaec:	4b75      	ldr	r3, [pc, #468]	; (800acc4 <lagori_func+0x2c4>)
 800aaee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aaf4:	d0fa      	beq.n	800aaec <lagori_func+0xec>
				lagori.pwstate = 2;
 800aaf6:	4a6c      	ldr	r2, [pc, #432]	; (800aca8 <lagori_func+0x2a8>)
 800aaf8:	7853      	ldrb	r3, [r2, #1]
 800aafa:	2102      	movs	r1, #2
 800aafc:	f361 1305 	bfi	r3, r1, #4, #2
 800ab00:	7053      	strb	r3, [r2, #1]
//				lagori.bldcflayer = 2;
//				lagori.bldcfapp = 1;
				target_enq = svfms_layer - 500;
 800ab02:	4b72      	ldr	r3, [pc, #456]	; (800accc <lagori_func+0x2cc>)
 800ab04:	f241 0268 	movw	r2, #4200	; 0x1068
 800ab08:	601a      	str	r2, [r3, #0]
				lagori.bldcstart = 1;
 800ab0a:	4a67      	ldr	r2, [pc, #412]	; (800aca8 <lagori_func+0x2a8>)
 800ab0c:	7853      	ldrb	r3, [r2, #1]
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab12:	7053      	strb	r3, [r2, #1]
				lagori.flip = 2;
 800ab14:	4a64      	ldr	r2, [pc, #400]	; (800aca8 <lagori_func+0x2a8>)
 800ab16:	7853      	ldrb	r3, [r2, #1]
 800ab18:	2102      	movs	r1, #2
 800ab1a:	f361 0301 	bfi	r3, r1, #0, #2
 800ab1e:	7053      	strb	r3, [r2, #1]
				svLGF1(1150)
 800ab20:	f240 417e 	movw	r1, #1150	; 0x47e
 800ab24:	4865      	ldr	r0, [pc, #404]	; (800acbc <lagori_func+0x2bc>)
 800ab26:	f7fe f8a5 	bl	8008c74 <ServoSetPulse>
				svLGF2(1650)
 800ab2a:	f240 6172 	movw	r1, #1650	; 0x672
 800ab2e:	4864      	ldr	r0, [pc, #400]	; (800acc0 <lagori_func+0x2c0>)
 800ab30:	f7fe f8a0 	bl	8008c74 <ServoSetPulse>
 800ab34:	e08e      	b.n	800ac54 <lagori_func+0x254>
			}
			else{
				lagori.pwstate = 0;
 800ab36:	4a5c      	ldr	r2, [pc, #368]	; (800aca8 <lagori_func+0x2a8>)
 800ab38:	7853      	ldrb	r3, [r2, #1]
 800ab3a:	f36f 1305 	bfc	r3, #4, #2
 800ab3e:	7053      	strb	r3, [r2, #1]
				lagori.bldclapp = 0;
 800ab40:	4a59      	ldr	r2, [pc, #356]	; (800aca8 <lagori_func+0x2a8>)
 800ab42:	7813      	ldrb	r3, [r2, #0]
 800ab44:	f36f 0300 	bfc	r3, #0, #1
 800ab48:	7013      	strb	r3, [r2, #0]
				lagori.bldcfapp = 1;
 800ab4a:	4a57      	ldr	r2, [pc, #348]	; (800aca8 <lagori_func+0x2a8>)
 800ab4c:	7813      	ldrb	r3, [r2, #0]
 800ab4e:	f043 0302 	orr.w	r3, r3, #2
 800ab52:	7013      	strb	r3, [r2, #0]
//				Await(750);
//				while(lagori.bldcstart != 0){}
				while(enqpwLlf <= svfs_layer - 300);
 800ab54:	bf00      	nop
 800ab56:	4b5e      	ldr	r3, [pc, #376]	; (800acd0 <lagori_func+0x2d0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f640 421c 	movw	r2, #3100	; 0xc1c
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	ddf9      	ble.n	800ab56 <lagori_func+0x156>
				lagori.flip = 1;
 800ab62:	4a51      	ldr	r2, [pc, #324]	; (800aca8 <lagori_func+0x2a8>)
 800ab64:	7853      	ldrb	r3, [r2, #1]
 800ab66:	2101      	movs	r1, #1
 800ab68:	f361 0301 	bfi	r3, r1, #0, #2
 800ab6c:	7053      	strb	r3, [r2, #1]
				while(enqpwLlf <= target_enq);
 800ab6e:	bf00      	nop
 800ab70:	4b57      	ldr	r3, [pc, #348]	; (800acd0 <lagori_func+0x2d0>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	4b55      	ldr	r3, [pc, #340]	; (800accc <lagori_func+0x2cc>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	ddf9      	ble.n	800ab70 <lagori_func+0x170>
				lagori.pwstate = 1;
 800ab7c:	4a4a      	ldr	r2, [pc, #296]	; (800aca8 <lagori_func+0x2a8>)
 800ab7e:	7853      	ldrb	r3, [r2, #1]
 800ab80:	2101      	movs	r1, #1
 800ab82:	f361 1305 	bfi	r3, r1, #4, #2
 800ab86:	7053      	strb	r3, [r2, #1]
				while(!lagori.gripok){
 800ab88:	e043      	b.n	800ac12 <lagori_func+0x212>
					if(LGclose || enqpwLG < dangerclose){
 800ab8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ab8e:	4851      	ldr	r0, [pc, #324]	; (800acd4 <lagori_func+0x2d4>)
 800ab90:	f00b fdea 	bl	8016768 <HAL_GPIO_ReadPin>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <lagori_func+0x1a2>
 800ab9a:	4b4f      	ldr	r3, [pc, #316]	; (800acd8 <lagori_func+0x2d8>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b63      	cmp	r3, #99	; 0x63
 800aba0:	dc27      	bgt.n	800abf2 <lagori_func+0x1f2>
						lagori.pwstate = 3;
 800aba2:	4a41      	ldr	r2, [pc, #260]	; (800aca8 <lagori_func+0x2a8>)
 800aba4:	7853      	ldrb	r3, [r2, #1]
 800aba6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800abaa:	7053      	strb	r3, [r2, #1]
						LGPW(0)
 800abac:	2100      	movs	r1, #0
 800abae:	484b      	ldr	r0, [pc, #300]	; (800acdc <lagori_func+0x2dc>)
 800abb0:	f7f6 fbe6 	bl	8001380 <WriteBDC>
						Await(100);
 800abb4:	2064      	movs	r0, #100	; 0x64
 800abb6:	f003 fe95 	bl	800e8e4 <Await>
						lagori.bldclayer = 5;
 800abba:	4a3b      	ldr	r2, [pc, #236]	; (800aca8 <lagori_func+0x2a8>)
 800abbc:	7813      	ldrb	r3, [r2, #0]
 800abbe:	2105      	movs	r1, #5
 800abc0:	f361 0384 	bfi	r3, r1, #2, #3
 800abc4:	7013      	strb	r3, [r2, #0]
						lagori.flip = 2;
 800abc6:	4a38      	ldr	r2, [pc, #224]	; (800aca8 <lagori_func+0x2a8>)
 800abc8:	7853      	ldrb	r3, [r2, #1]
 800abca:	2102      	movs	r1, #2
 800abcc:	f361 0301 	bfi	r3, r1, #0, #2
 800abd0:	7053      	strb	r3, [r2, #1]
						svLGF1(1150)
 800abd2:	f240 417e 	movw	r1, #1150	; 0x47e
 800abd6:	4839      	ldr	r0, [pc, #228]	; (800acbc <lagori_func+0x2bc>)
 800abd8:	f7fe f84c 	bl	8008c74 <ServoSetPulse>
						svLGF2(1650)
 800abdc:	f240 6172 	movw	r1, #1650	; 0x672
 800abe0:	4837      	ldr	r0, [pc, #220]	; (800acc0 <lagori_func+0x2c0>)
 800abe2:	f7fe f847 	bl	8008c74 <ServoSetPulse>
						lagori.bldclapp = 1;
 800abe6:	4a30      	ldr	r2, [pc, #192]	; (800aca8 <lagori_func+0x2a8>)
 800abe8:	7813      	ldrb	r3, [r2, #0]
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	7013      	strb	r3, [r2, #0]
						break;
 800abf0:	e018      	b.n	800ac24 <lagori_func+0x224>
					}
					if(ps4.button == CIRCLE)
 800abf2:	4b34      	ldr	r3, [pc, #208]	; (800acc4 <lagori_func+0x2c4>)
 800abf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abfa:	d105      	bne.n	800ac08 <lagori_func+0x208>
						lagori.pwstate = 1;
 800abfc:	4a2a      	ldr	r2, [pc, #168]	; (800aca8 <lagori_func+0x2a8>)
 800abfe:	7853      	ldrb	r3, [r2, #1]
 800ac00:	2101      	movs	r1, #1
 800ac02:	f361 1305 	bfi	r3, r1, #4, #2
 800ac06:	7053      	strb	r3, [r2, #1]
					if(ps4.button == L1)	//cancel
 800ac08:	4b2e      	ldr	r3, [pc, #184]	; (800acc4 <lagori_func+0x2c4>)
 800ac0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac10:	d007      	beq.n	800ac22 <lagori_func+0x222>
				while(!lagori.gripok){
 800ac12:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <lagori_func+0x2a8>)
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0b4      	beq.n	800ab8a <lagori_func+0x18a>
 800ac20:	e000      	b.n	800ac24 <lagori_func+0x224>
						break;
 800ac22:	bf00      	nop
				}
				Await(100);
 800ac24:	2064      	movs	r0, #100	; 0x64
 800ac26:	f003 fe5d 	bl	800e8e4 <Await>
				if(ps4.button != L1){
 800ac2a:	4b26      	ldr	r3, [pc, #152]	; (800acc4 <lagori_func+0x2c4>)
 800ac2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac32:	d00f      	beq.n	800ac54 <lagori_func+0x254>
					lagori.flip = 2;
 800ac34:	4a1c      	ldr	r2, [pc, #112]	; (800aca8 <lagori_func+0x2a8>)
 800ac36:	7853      	ldrb	r3, [r2, #1]
 800ac38:	2102      	movs	r1, #2
 800ac3a:	f361 0301 	bfi	r3, r1, #0, #2
 800ac3e:	7053      	strb	r3, [r2, #1]
					svLGF1(1250)
 800ac40:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800ac44:	481d      	ldr	r0, [pc, #116]	; (800acbc <lagori_func+0x2bc>)
 800ac46:	f7fe f815 	bl	8008c74 <ServoSetPulse>
					svLGF2(1550)
 800ac4a:	f240 610e 	movw	r1, #1550	; 0x60e
 800ac4e:	481c      	ldr	r0, [pc, #112]	; (800acc0 <lagori_func+0x2c0>)
 800ac50:	f7fe f810 	bl	8008c74 <ServoSetPulse>
				}
			}
		}

		if(ps4.button == TRIANGLE){		//servo
 800ac54:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <lagori_func+0x2c4>)
 800ac56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac5c:	d157      	bne.n	800ad0e <lagori_func+0x30e>
			while(ps4.button == TRIANGLE);
 800ac5e:	bf00      	nop
 800ac60:	4b18      	ldr	r3, [pc, #96]	; (800acc4 <lagori_func+0x2c4>)
 800ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac68:	d0fa      	beq.n	800ac60 <lagori_func+0x260>
			if(!fx.svapp){
 800ac6a:	4b17      	ldr	r3, [pc, #92]	; (800acc8 <lagori_func+0x2c8>)
 800ac6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d132      	bne.n	800ace0 <lagori_func+0x2e0>
				lagori.flip = 2;
 800ac7a:	4a0b      	ldr	r2, [pc, #44]	; (800aca8 <lagori_func+0x2a8>)
 800ac7c:	7853      	ldrb	r3, [r2, #1]
 800ac7e:	2102      	movs	r1, #2
 800ac80:	f361 0301 	bfi	r3, r1, #0, #2
 800ac84:	7053      	strb	r3, [r2, #1]
				svLGF1(1350)
 800ac86:	f240 5146 	movw	r1, #1350	; 0x546
 800ac8a:	480c      	ldr	r0, [pc, #48]	; (800acbc <lagori_func+0x2bc>)
 800ac8c:	f7fd fff2 	bl	8008c74 <ServoSetPulse>
				svLGF2(1450)
 800ac90:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800ac94:	480a      	ldr	r0, [pc, #40]	; (800acc0 <lagori_func+0x2c0>)
 800ac96:	f7fd ffed 	bl	8008c74 <ServoSetPulse>
 800ac9a:	e026      	b.n	800acea <lagori_func+0x2ea>
 800ac9c:	f3af 8000 	nop.w
 800aca0:	4c84234c 	.word	0x4c84234c
 800aca4:	3f0500d4 	.word	0x3f0500d4
 800aca8:	20009b10 	.word	0x20009b10
 800acac:	20009a58 	.word	0x20009a58
 800acb0:	20009bf4 	.word	0x20009bf4
 800acb4:	200093ec 	.word	0x200093ec
 800acb8:	40020814 	.word	0x40020814
 800acbc:	20009c44 	.word	0x20009c44
 800acc0:	2000aa48 	.word	0x2000aa48
 800acc4:	2000a448 	.word	0x2000a448
 800acc8:	2000a4c4 	.word	0x2000a4c4
 800accc:	20009738 	.word	0x20009738
 800acd0:	20007d7c 	.word	0x20007d7c
 800acd4:	40021000 	.word	0x40021000
 800acd8:	20009ccc 	.word	0x20009ccc
 800acdc:	2000aa24 	.word	0x2000aa24
			}
			else{
				lagori.flip = 0;
 800ace0:	4aa5      	ldr	r2, [pc, #660]	; (800af78 <lagori_func+0x578>)
 800ace2:	7853      	ldrb	r3, [r2, #1]
 800ace4:	f36f 0301 	bfc	r3, #0, #2
 800ace8:	7053      	strb	r3, [r2, #1]
			}
			fx.svapp = !fx.svapp;
 800acea:	4ba4      	ldr	r3, [pc, #656]	; (800af7c <lagori_func+0x57c>)
 800acec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	bf0c      	ite	eq
 800acfa:	2301      	moveq	r3, #1
 800acfc:	2300      	movne	r3, #0
 800acfe:	b2d9      	uxtb	r1, r3
 800ad00:	4a9e      	ldr	r2, [pc, #632]	; (800af7c <lagori_func+0x57c>)
 800ad02:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800ad06:	f361 0300 	bfi	r3, r1, #0, #1
 800ad0a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		}

		if(ps4.button == SQUARE || pp.baseok){	//release lagori
 800ad0e:	4b9c      	ldr	r3, [pc, #624]	; (800af80 <lagori_func+0x580>)
 800ad10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad16:	d007      	beq.n	800ad28 <lagori_func+0x328>
 800ad18:	4b9a      	ldr	r3, [pc, #616]	; (800af84 <lagori_func+0x584>)
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	f003 0308 	and.w	r3, r3, #8
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f000 8088 	beq.w	800ae38 <lagori_func+0x438>
			lagori.pwstate = 0;
 800ad28:	4a93      	ldr	r2, [pc, #588]	; (800af78 <lagori_func+0x578>)
 800ad2a:	7853      	ldrb	r3, [r2, #1]
 800ad2c:	f36f 1305 	bfc	r3, #4, #2
 800ad30:	7053      	strb	r3, [r2, #1]
			lagori.flip = 2;
 800ad32:	4a91      	ldr	r2, [pc, #580]	; (800af78 <lagori_func+0x578>)
 800ad34:	7853      	ldrb	r3, [r2, #1]
 800ad36:	2102      	movs	r1, #2
 800ad38:	f361 0301 	bfi	r3, r1, #0, #2
 800ad3c:	7053      	strb	r3, [r2, #1]
			while(ps4.button == SQUARE);
 800ad3e:	bf00      	nop
 800ad40:	4b8f      	ldr	r3, [pc, #572]	; (800af80 <lagori_func+0x580>)
 800ad42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad48:	d0fa      	beq.n	800ad40 <lagori_func+0x340>
			if(ps4.button == R1_SQUARE){	//retry state
 800ad4a:	4b8d      	ldr	r3, [pc, #564]	; (800af80 <lagori_func+0x580>)
 800ad4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad4e:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800ad52:	d126      	bne.n	800ada2 <lagori_func+0x3a2>
				while(ps4.button == R1_SQUARE);
 800ad54:	bf00      	nop
 800ad56:	4b8a      	ldr	r3, [pc, #552]	; (800af80 <lagori_func+0x580>)
 800ad58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5a:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800ad5e:	d0fa      	beq.n	800ad56 <lagori_func+0x356>
				lagori.pwstate = 2;
 800ad60:	4a85      	ldr	r2, [pc, #532]	; (800af78 <lagori_func+0x578>)
 800ad62:	7853      	ldrb	r3, [r2, #1]
 800ad64:	2102      	movs	r1, #2
 800ad66:	f361 1305 	bfi	r3, r1, #4, #2
 800ad6a:	7053      	strb	r3, [r2, #1]
				lagori.flip = 2;
 800ad6c:	4a82      	ldr	r2, [pc, #520]	; (800af78 <lagori_func+0x578>)
 800ad6e:	7853      	ldrb	r3, [r2, #1]
 800ad70:	2102      	movs	r1, #2
 800ad72:	f361 0301 	bfi	r3, r1, #0, #2
 800ad76:	7053      	strb	r3, [r2, #1]
				svCloseFlip
 800ad78:	f240 719e 	movw	r1, #1950	; 0x79e
 800ad7c:	4882      	ldr	r0, [pc, #520]	; (800af88 <lagori_func+0x588>)
 800ad7e:	f7fd ff79 	bl	8008c74 <ServoSetPulse>
 800ad82:	f44f 7161 	mov.w	r1, #900	; 0x384
 800ad86:	4881      	ldr	r0, [pc, #516]	; (800af8c <lagori_func+0x58c>)
 800ad88:	f7fd ff74 	bl	8008c74 <ServoSetPulse>
				lagori.bldclayer = 0;
 800ad8c:	4a7a      	ldr	r2, [pc, #488]	; (800af78 <lagori_func+0x578>)
 800ad8e:	7813      	ldrb	r3, [r2, #0]
 800ad90:	f36f 0384 	bfc	r3, #2, #3
 800ad94:	7013      	strb	r3, [r2, #0]
				lagori.bldclapp = 1;
 800ad96:	4a78      	ldr	r2, [pc, #480]	; (800af78 <lagori_func+0x578>)
 800ad98:	7813      	ldrb	r3, [r2, #0]
 800ad9a:	f043 0301 	orr.w	r3, r3, #1
 800ad9e:	7013      	strb	r3, [r2, #0]
 800ada0:	e04a      	b.n	800ae38 <lagori_func+0x438>
			}
			else if(ps4.button == L1_SQUARE){	//ready state
 800ada2:	4b77      	ldr	r3, [pc, #476]	; (800af80 <lagori_func+0x580>)
 800ada4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ada6:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800adaa:	d11f      	bne.n	800adec <lagori_func+0x3ec>
				lagori.flip = 0;
 800adac:	4a72      	ldr	r2, [pc, #456]	; (800af78 <lagori_func+0x578>)
 800adae:	7853      	ldrb	r3, [r2, #1]
 800adb0:	f36f 0301 	bfc	r3, #0, #2
 800adb4:	7053      	strb	r3, [r2, #1]
				lagori.bldclayer = 0;
 800adb6:	4a70      	ldr	r2, [pc, #448]	; (800af78 <lagori_func+0x578>)
 800adb8:	7813      	ldrb	r3, [r2, #0]
 800adba:	f36f 0384 	bfc	r3, #2, #3
 800adbe:	7013      	strb	r3, [r2, #0]
				lagori.bldclapp = 1;
 800adc0:	4a6d      	ldr	r2, [pc, #436]	; (800af78 <lagori_func+0x578>)
 800adc2:	7813      	ldrb	r3, [r2, #0]
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	7013      	strb	r3, [r2, #0]
				while(ps4.button == L1_SQUARE || ps4.button == SQUARE || ps4.button == L1);
 800adca:	bf00      	nop
 800adcc:	4b6c      	ldr	r3, [pc, #432]	; (800af80 <lagori_func+0x580>)
 800adce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800add0:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800add4:	d0fa      	beq.n	800adcc <lagori_func+0x3cc>
 800add6:	4b6a      	ldr	r3, [pc, #424]	; (800af80 <lagori_func+0x580>)
 800add8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adde:	d0f5      	beq.n	800adcc <lagori_func+0x3cc>
 800ade0:	4b67      	ldr	r3, [pc, #412]	; (800af80 <lagori_func+0x580>)
 800ade2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade8:	d0f0      	beq.n	800adcc <lagori_func+0x3cc>
 800adea:	e025      	b.n	800ae38 <lagori_func+0x438>
			}
			else{				//wait to release lagori and give time to go back
				Await(350);
 800adec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800adf0:	f003 fd78 	bl	800e8e4 <Await>
				pp.baseok = 0;
 800adf4:	4a63      	ldr	r2, [pc, #396]	; (800af84 <lagori_func+0x584>)
 800adf6:	7853      	ldrb	r3, [r2, #1]
 800adf8:	f36f 03c3 	bfc	r3, #3, #1
 800adfc:	7053      	strb	r3, [r2, #1]
				pp.baseleft = 1;
 800adfe:	4a61      	ldr	r2, [pc, #388]	; (800af84 <lagori_func+0x584>)
 800ae00:	7853      	ldrb	r3, [r2, #1]
 800ae02:	f043 0310 	orr.w	r3, r3, #16
 800ae06:	7053      	strb	r3, [r2, #1]
				Await(375);
 800ae08:	f240 1077 	movw	r0, #375	; 0x177
 800ae0c:	f003 fd6a 	bl	800e8e4 <Await>
				pp.baseleft = 0;
 800ae10:	4a5c      	ldr	r2, [pc, #368]	; (800af84 <lagori_func+0x584>)
 800ae12:	7853      	ldrb	r3, [r2, #1]
 800ae14:	f36f 1304 	bfc	r3, #4, #1
 800ae18:	7053      	strb	r3, [r2, #1]
				lagori.flip = 0;
 800ae1a:	4a57      	ldr	r2, [pc, #348]	; (800af78 <lagori_func+0x578>)
 800ae1c:	7853      	ldrb	r3, [r2, #1]
 800ae1e:	f36f 0301 	bfc	r3, #0, #2
 800ae22:	7053      	strb	r3, [r2, #1]
				lagori.bldclayer = 0;
 800ae24:	4a54      	ldr	r2, [pc, #336]	; (800af78 <lagori_func+0x578>)
 800ae26:	7813      	ldrb	r3, [r2, #0]
 800ae28:	f36f 0384 	bfc	r3, #2, #3
 800ae2c:	7013      	strb	r3, [r2, #0]
				lagori.bldclapp = 1;
 800ae2e:	4a52      	ldr	r2, [pc, #328]	; (800af78 <lagori_func+0x578>)
 800ae30:	7813      	ldrb	r3, [r2, #0]
 800ae32:	f043 0301 	orr.w	r3, r3, #1
 800ae36:	7013      	strb	r3, [r2, #0]
			}
		}

		//auto pilling
		if(ps4.button == UP){
 800ae38:	4b51      	ldr	r3, [pc, #324]	; (800af80 <lagori_func+0x580>)
 800ae3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae3c:	2b10      	cmp	r3, #16
 800ae3e:	d145      	bne.n	800aecc <lagori_func+0x4cc>
			while(ps4.button == UP);
 800ae40:	bf00      	nop
 800ae42:	4b4f      	ldr	r3, [pc, #316]	; (800af80 <lagori_func+0x580>)
 800ae44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae46:	2b10      	cmp	r3, #16
 800ae48:	d0fb      	beq.n	800ae42 <lagori_func+0x442>
			if(ps4.button == R1_UP){
 800ae4a:	4b4d      	ldr	r3, [pc, #308]	; (800af80 <lagori_func+0x580>)
 800ae4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae4e:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800ae52:	d116      	bne.n	800ae82 <lagori_func+0x482>
				while(ps4.button == R1_UP);
 800ae54:	bf00      	nop
 800ae56:	4b4a      	ldr	r3, [pc, #296]	; (800af80 <lagori_func+0x580>)
 800ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800ae5e:	d0fa      	beq.n	800ae56 <lagori_func+0x456>
				pp.base = 1;
 800ae60:	4a48      	ldr	r2, [pc, #288]	; (800af84 <lagori_func+0x584>)
 800ae62:	7853      	ldrb	r3, [r2, #1]
 800ae64:	2101      	movs	r1, #1
 800ae66:	f361 0302 	bfi	r3, r1, #0, #3
 800ae6a:	7053      	strb	r3, [r2, #1]
				while(ps4.button == R1 || ps4.button == UP);
 800ae6c:	bf00      	nop
 800ae6e:	4b44      	ldr	r3, [pc, #272]	; (800af80 <lagori_func+0x580>)
 800ae70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae76:	d0fa      	beq.n	800ae6e <lagori_func+0x46e>
 800ae78:	4b41      	ldr	r3, [pc, #260]	; (800af80 <lagori_func+0x580>)
 800ae7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7c:	2b10      	cmp	r3, #16
 800ae7e:	d0f6      	beq.n	800ae6e <lagori_func+0x46e>
 800ae80:	e024      	b.n	800aecc <lagori_func+0x4cc>
			}
			else if(ps4.button == L1_UP){
 800ae82:	4b3f      	ldr	r3, [pc, #252]	; (800af80 <lagori_func+0x580>)
 800ae84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae86:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800ae8a:	d116      	bne.n	800aeba <lagori_func+0x4ba>
				while(ps4.button == L1_UP);
 800ae8c:	bf00      	nop
 800ae8e:	4b3c      	ldr	r3, [pc, #240]	; (800af80 <lagori_func+0x580>)
 800ae90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae92:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800ae96:	d0fa      	beq.n	800ae8e <lagori_func+0x48e>
				pp.base = 2;
 800ae98:	4a3a      	ldr	r2, [pc, #232]	; (800af84 <lagori_func+0x584>)
 800ae9a:	7853      	ldrb	r3, [r2, #1]
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	f361 0302 	bfi	r3, r1, #0, #3
 800aea2:	7053      	strb	r3, [r2, #1]
				while(ps4.button == L1 || ps4.button == UP);
 800aea4:	bf00      	nop
 800aea6:	4b36      	ldr	r3, [pc, #216]	; (800af80 <lagori_func+0x580>)
 800aea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeae:	d0fa      	beq.n	800aea6 <lagori_func+0x4a6>
 800aeb0:	4b33      	ldr	r3, [pc, #204]	; (800af80 <lagori_func+0x580>)
 800aeb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb4:	2b10      	cmp	r3, #16
 800aeb6:	d0f6      	beq.n	800aea6 <lagori_func+0x4a6>
 800aeb8:	e008      	b.n	800aecc <lagori_func+0x4cc>
			}
			else{
				pp.base = 7;
 800aeba:	4a32      	ldr	r2, [pc, #200]	; (800af84 <lagori_func+0x584>)
 800aebc:	7853      	ldrb	r3, [r2, #1]
 800aebe:	f043 0307 	orr.w	r3, r3, #7
 800aec2:	7053      	strb	r3, [r2, #1]
				z_tar = 0;
 800aec4:	4b32      	ldr	r3, [pc, #200]	; (800af90 <lagori_func+0x590>)
 800aec6:	f04f 0200 	mov.w	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
			}
		}
		if(ps4.button == DOWN){
 800aecc:	4b2c      	ldr	r3, [pc, #176]	; (800af80 <lagori_func+0x580>)
 800aece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed0:	2b40      	cmp	r3, #64	; 0x40
 800aed2:	d10c      	bne.n	800aeee <lagori_func+0x4ee>
			while(ps4.button == DOWN);
 800aed4:	bf00      	nop
 800aed6:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <lagori_func+0x580>)
 800aed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	d0fb      	beq.n	800aed6 <lagori_func+0x4d6>
			pp.base = 7;
 800aede:	4a29      	ldr	r2, [pc, #164]	; (800af84 <lagori_func+0x584>)
 800aee0:	7853      	ldrb	r3, [r2, #1]
 800aee2:	f043 0307 	orr.w	r3, r3, #7
 800aee6:	7053      	strb	r3, [r2, #1]
			z_tar = 180;
 800aee8:	4b29      	ldr	r3, [pc, #164]	; (800af90 <lagori_func+0x590>)
 800aeea:	4a2a      	ldr	r2, [pc, #168]	; (800af94 <lagori_func+0x594>)
 800aeec:	601a      	str	r2, [r3, #0]
		}
		if(ps4.button == LEFT){
 800aeee:	4b24      	ldr	r3, [pc, #144]	; (800af80 <lagori_func+0x580>)
 800aef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d10c      	bne.n	800af10 <lagori_func+0x510>
			while(ps4.button == LEFT);
 800aef6:	bf00      	nop
 800aef8:	4b21      	ldr	r3, [pc, #132]	; (800af80 <lagori_func+0x580>)
 800aefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefc:	2b80      	cmp	r3, #128	; 0x80
 800aefe:	d0fb      	beq.n	800aef8 <lagori_func+0x4f8>
			pp.base = 7;
 800af00:	4a20      	ldr	r2, [pc, #128]	; (800af84 <lagori_func+0x584>)
 800af02:	7853      	ldrb	r3, [r2, #1]
 800af04:	f043 0307 	orr.w	r3, r3, #7
 800af08:	7053      	strb	r3, [r2, #1]
			z_tar = 270;
 800af0a:	4b21      	ldr	r3, [pc, #132]	; (800af90 <lagori_func+0x590>)
 800af0c:	4a22      	ldr	r2, [pc, #136]	; (800af98 <lagori_func+0x598>)
 800af0e:	601a      	str	r2, [r3, #0]
		}
		if(ps4.button == RIGHT){
 800af10:	4b1b      	ldr	r3, [pc, #108]	; (800af80 <lagori_func+0x580>)
 800af12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af14:	2b20      	cmp	r3, #32
 800af16:	d10c      	bne.n	800af32 <lagori_func+0x532>
			while(ps4.button == RIGHT);
 800af18:	bf00      	nop
 800af1a:	4b19      	ldr	r3, [pc, #100]	; (800af80 <lagori_func+0x580>)
 800af1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d0fb      	beq.n	800af1a <lagori_func+0x51a>
			pp.base = 7;
 800af22:	4a18      	ldr	r2, [pc, #96]	; (800af84 <lagori_func+0x584>)
 800af24:	7853      	ldrb	r3, [r2, #1]
 800af26:	f043 0307 	orr.w	r3, r3, #7
 800af2a:	7053      	strb	r3, [r2, #1]
			z_tar = 90;
 800af2c:	4b18      	ldr	r3, [pc, #96]	; (800af90 <lagori_func+0x590>)
 800af2e:	4a1b      	ldr	r2, [pc, #108]	; (800af9c <lagori_func+0x59c>)
 800af30:	601a      	str	r2, [r3, #0]
		}
		if(ps4.button == OPTION){
 800af32:	4b13      	ldr	r3, [pc, #76]	; (800af80 <lagori_func+0x580>)
 800af34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af3a:	f040 808c 	bne.w	800b056 <lagori_func+0x656>
			while(ps4.button == OPTION);
 800af3e:	bf00      	nop
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <lagori_func+0x580>)
 800af42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d0fa      	beq.n	800af40 <lagori_func+0x540>
			RNSSet(&rns, RNS_RESET_POS);
 800af4a:	2114      	movs	r1, #20
 800af4c:	4814      	ldr	r0, [pc, #80]	; (800afa0 <lagori_func+0x5a0>)
 800af4e:	f7fc f92f 	bl	80071b0 <RNSSet>
			RNSSet(&rns, RNS_PP_Reset);
 800af52:	2117      	movs	r1, #23
 800af54:	4812      	ldr	r0, [pc, #72]	; (800afa0 <lagori_func+0x5a0>)
 800af56:	f7fc f92b 	bl	80071b0 <RNSSet>
			pLNE[0] = 1.5;
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <lagori_func+0x5a4>)
 800af5c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800af60:	601a      	str	r2, [r3, #0]
			pLNE[1] = 0.0;
 800af62:	4b10      	ldr	r3, [pc, #64]	; (800afa4 <lagori_func+0x5a4>)
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	605a      	str	r2, [r3, #4]
			pLNE[2] = 0.0;
 800af6a:	4b0e      	ldr	r3, [pc, #56]	; (800afa4 <lagori_func+0x5a4>)
 800af6c:	f04f 0200 	mov.w	r2, #0
 800af70:	609a      	str	r2, [r3, #8]
			for(int i = 0; i <= 6; i++){
 800af72:	2300      	movs	r3, #0
 800af74:	607b      	str	r3, [r7, #4]
 800af76:	e06b      	b.n	800b050 <lagori_func+0x650>
 800af78:	20009b10 	.word	0x20009b10
 800af7c:	2000a4c4 	.word	0x2000a4c4
 800af80:	2000a448 	.word	0x2000a448
 800af84:	20007880 	.word	0x20007880
 800af88:	20009c44 	.word	0x20009c44
 800af8c:	2000aa48 	.word	0x2000aa48
 800af90:	20007684 	.word	0x20007684
 800af94:	43340000 	.word	0x43340000
 800af98:	43870000 	.word	0x43870000
 800af9c:	42b40000 	.word	0x42b40000
 800afa0:	200093ec 	.word	0x200093ec
 800afa4:	2000aa6c 	.word	0x2000aa6c
				target_enq = 10000;
 800afa8:	4b7b      	ldr	r3, [pc, #492]	; (800b198 <lagori_func+0x798>)
 800afaa:	f242 7210 	movw	r2, #10000	; 0x2710
 800afae:	601a      	str	r2, [r3, #0]
				lagori.bldcstart = 1;
 800afb0:	4a7a      	ldr	r2, [pc, #488]	; (800b19c <lagori_func+0x79c>)
 800afb2:	7853      	ldrb	r3, [r2, #1]
 800afb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb8:	7053      	strb	r3, [r2, #1]
//				else if(i == 3)	pLNE[3] = 0.0;
//				registerPath(LBaseN, 1, pLNE);
//				RNSSet(&rns, RNS_PPSetXYZerror, 0.10, 2.0, 0.05, 1.0);
//				RNSPPstart(LBaseN, 1, &rns);
//				while(rns.RNS_data.common_instruction == RNS_BUSY){
					if(!fx.svapp){
 800afba:	4b79      	ldr	r3, [pc, #484]	; (800b1a0 <lagori_func+0x7a0>)
 800afbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d110      	bne.n	800afec <lagori_func+0x5ec>
						lagori.flip = 2;
 800afca:	4a74      	ldr	r2, [pc, #464]	; (800b19c <lagori_func+0x79c>)
 800afcc:	7853      	ldrb	r3, [r2, #1]
 800afce:	2102      	movs	r1, #2
 800afd0:	f361 0301 	bfi	r3, r1, #0, #2
 800afd4:	7053      	strb	r3, [r2, #1]
						svLGF1(1350)
 800afd6:	f240 5146 	movw	r1, #1350	; 0x546
 800afda:	4872      	ldr	r0, [pc, #456]	; (800b1a4 <lagori_func+0x7a4>)
 800afdc:	f7fd fe4a 	bl	8008c74 <ServoSetPulse>
						svLGF2(svlnf2);
 800afe0:	f240 61ef 	movw	r1, #1775	; 0x6ef
 800afe4:	4870      	ldr	r0, [pc, #448]	; (800b1a8 <lagori_func+0x7a8>)
 800afe6:	f7fd fe45 	bl	8008c74 <ServoSetPulse>
 800afea:	e00f      	b.n	800b00c <lagori_func+0x60c>
					}
					else{
						lagori.flip = 2;
 800afec:	4a6b      	ldr	r2, [pc, #428]	; (800b19c <lagori_func+0x79c>)
 800afee:	7853      	ldrb	r3, [r2, #1]
 800aff0:	2102      	movs	r1, #2
 800aff2:	f361 0301 	bfi	r3, r1, #0, #2
 800aff6:	7053      	strb	r3, [r2, #1]
						svLGF1(svlnf);
 800aff8:	f240 4101 	movw	r1, #1025	; 0x401
 800affc:	4869      	ldr	r0, [pc, #420]	; (800b1a4 <lagori_func+0x7a4>)
 800affe:	f7fd fe39 	bl	8008c74 <ServoSetPulse>
						svLGF2(1450)
 800b002:	f240 51aa 	movw	r1, #1450	; 0x5aa
 800b006:	4868      	ldr	r0, [pc, #416]	; (800b1a8 <lagori_func+0x7a8>)
 800b008:	f7fd fe34 	bl	8008c74 <ServoSetPulse>
					}
					fx.svapp = !fx.svapp;
 800b00c:	4b64      	ldr	r3, [pc, #400]	; (800b1a0 <lagori_func+0x7a0>)
 800b00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b00      	cmp	r3, #0
 800b01a:	bf0c      	ite	eq
 800b01c:	2301      	moveq	r3, #1
 800b01e:	2300      	movne	r3, #0
 800b020:	b2d9      	uxtb	r1, r3
 800b022:	4a5f      	ldr	r2, [pc, #380]	; (800b1a0 <lagori_func+0x7a0>)
 800b024:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800b028:	f361 0300 	bfi	r3, r1, #0, #1
 800b02c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
//					if(ps4.button == L1){
//						RNSStop(&rns);
//						break;
//					}
					Await(330);
 800b030:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800b034:	f003 fc56 	bl	800e8e4 <Await>
//				}
				if(ps4.button == L1){
 800b038:	4b5c      	ldr	r3, [pc, #368]	; (800b1ac <lagori_func+0x7ac>)
 800b03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b040:	d103      	bne.n	800b04a <lagori_func+0x64a>
					RNSStop(&rns);
 800b042:	485b      	ldr	r0, [pc, #364]	; (800b1b0 <lagori_func+0x7b0>)
 800b044:	f7fb fe86 	bl	8006d54 <RNSStop>
					break;
 800b048:	e005      	b.n	800b056 <lagori_func+0x656>
			for(int i = 0; i <= 6; i++){
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3301      	adds	r3, #1
 800b04e:	607b      	str	r3, [r7, #4]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2b06      	cmp	r3, #6
 800b054:	dda8      	ble.n	800afa8 <lagori_func+0x5a8>
				}
			}
		}

		//manual pulley + no auto pilling
		if(ps4.button == L1){
 800b056:	4b55      	ldr	r3, [pc, #340]	; (800b1ac <lagori_func+0x7ac>)
 800b058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b05a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05e:	d134      	bne.n	800b0ca <lagori_func+0x6ca>
			if(pp.base != 0){
 800b060:	4b54      	ldr	r3, [pc, #336]	; (800b1b4 <lagori_func+0x7b4>)
 800b062:	785b      	ldrb	r3, [r3, #1]
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d007      	beq.n	800b07e <lagori_func+0x67e>
				pp.base = 0;
 800b06e:	4a51      	ldr	r2, [pc, #324]	; (800b1b4 <lagori_func+0x7b4>)
 800b070:	7853      	ldrb	r3, [r2, #1]
 800b072:	f36f 0302 	bfc	r3, #0, #3
 800b076:	7053      	strb	r3, [r2, #1]
				RNSStop(&rns);
 800b078:	484d      	ldr	r0, [pc, #308]	; (800b1b0 <lagori_func+0x7b0>)
 800b07a:	f7fb fe6b 	bl	8006d54 <RNSStop>
			}
			lagori.bldcstart  = 0;
 800b07e:	4a47      	ldr	r2, [pc, #284]	; (800b19c <lagori_func+0x79c>)
 800b080:	7853      	ldrb	r3, [r2, #1]
 800b082:	f36f 13c7 	bfc	r3, #7, #1
 800b086:	7053      	strb	r3, [r2, #1]
			if(fabs(ps4.joyR_y) >= 0.5)
 800b088:	4b48      	ldr	r3, [pc, #288]	; (800b1ac <lagori_func+0x7ac>)
 800b08a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b08e:	eef0 7ae7 	vabs.f32	s15, s15
 800b092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09e:	db10      	blt.n	800b0c2 <lagori_func+0x6c2>
				LFPW(ps4.joyR_y * 19999)
 800b0a0:	4b42      	ldr	r3, [pc, #264]	; (800b1ac <lagori_func+0x7ac>)
 800b0a2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b0a6:	eef1 7a67 	vneg.f32	s15, s15
 800b0aa:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800b1b8 <lagori_func+0x7b8>
 800b0ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0b6:	ee17 1a90 	vmov	r1, s15
 800b0ba:	4840      	ldr	r0, [pc, #256]	; (800b1bc <lagori_func+0x7bc>)
 800b0bc:	f7f6 f960 	bl	8001380 <WriteBDC>
 800b0c0:	e003      	b.n	800b0ca <lagori_func+0x6ca>
			else
				LFPW(0)
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	483d      	ldr	r0, [pc, #244]	; (800b1bc <lagori_func+0x7bc>)
 800b0c6:	f7f6 f95b 	bl	8001380 <WriteBDC>
		}
		if(lagoricounter > 1000 && ps4.joyR_x >= 0.5){
 800b0ca:	4b3d      	ldr	r3, [pc, #244]	; (800b1c0 <lagori_func+0x7c0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0d2:	dd2d      	ble.n	800b130 <lagori_func+0x730>
 800b0d4:	4b35      	ldr	r3, [pc, #212]	; (800b1ac <lagori_func+0x7ac>)
 800b0d6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b0da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b0de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e6:	db23      	blt.n	800b130 <lagori_func+0x730>
			lagori.bldclayer ++;
 800b0e8:	4b2c      	ldr	r3, [pc, #176]	; (800b19c <lagori_func+0x79c>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	f003 0307 	and.w	r3, r3, #7
 800b0f8:	b2d9      	uxtb	r1, r3
 800b0fa:	4a28      	ldr	r2, [pc, #160]	; (800b19c <lagori_func+0x79c>)
 800b0fc:	7813      	ldrb	r3, [r2, #0]
 800b0fe:	f361 0384 	bfi	r3, r1, #2, #3
 800b102:	7013      	strb	r3, [r2, #0]
			if(lagori.bldclayer > 5)
 800b104:	4b25      	ldr	r3, [pc, #148]	; (800b19c <lagori_func+0x79c>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b05      	cmp	r3, #5
 800b110:	d905      	bls.n	800b11e <lagori_func+0x71e>
				lagori.bldclayer = 5;
 800b112:	4a22      	ldr	r2, [pc, #136]	; (800b19c <lagori_func+0x79c>)
 800b114:	7813      	ldrb	r3, [r2, #0]
 800b116:	2105      	movs	r1, #5
 800b118:	f361 0384 	bfi	r3, r1, #2, #3
 800b11c:	7013      	strb	r3, [r2, #0]
			lagori.bldclapp = 1;
 800b11e:	4a1f      	ldr	r2, [pc, #124]	; (800b19c <lagori_func+0x79c>)
 800b120:	7813      	ldrb	r3, [r2, #0]
 800b122:	f043 0301 	orr.w	r3, r3, #1
 800b126:	7013      	strb	r3, [r2, #0]
			lagoricounter = 0;
 800b128:	4b25      	ldr	r3, [pc, #148]	; (800b1c0 <lagori_func+0x7c0>)
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e025      	b.n	800b17c <lagori_func+0x77c>
		}
		else if(lagoricounter > 1000 && ps4.joyR_x <= -0.5){
 800b130:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <lagori_func+0x7c0>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b138:	dd20      	ble.n	800b17c <lagori_func+0x77c>
 800b13a:	4b1c      	ldr	r3, [pc, #112]	; (800b1ac <lagori_func+0x7ac>)
 800b13c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b140:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b144:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14c:	d900      	bls.n	800b150 <lagori_func+0x750>
 800b14e:	e015      	b.n	800b17c <lagori_func+0x77c>
			lagori.bldclayer --;
 800b150:	4b12      	ldr	r3, [pc, #72]	; (800b19c <lagori_func+0x79c>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	3307      	adds	r3, #7
 800b15c:	f003 0307 	and.w	r3, r3, #7
 800b160:	b2d9      	uxtb	r1, r3
 800b162:	4a0e      	ldr	r2, [pc, #56]	; (800b19c <lagori_func+0x79c>)
 800b164:	7813      	ldrb	r3, [r2, #0]
 800b166:	f361 0384 	bfi	r3, r1, #2, #3
 800b16a:	7013      	strb	r3, [r2, #0]
			if(lagori.bldclayer < 0)
				lagori.bldclayer = 0;
			lagori.bldclapp = 1;
 800b16c:	4a0b      	ldr	r2, [pc, #44]	; (800b19c <lagori_func+0x79c>)
 800b16e:	7813      	ldrb	r3, [r2, #0]
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	7013      	strb	r3, [r2, #0]
			lagoricounter = 0;
 800b176:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <lagori_func+0x7c0>)
 800b178:	2200      	movs	r2, #0
 800b17a:	601a      	str	r2, [r3, #0]
	while(sys.manual){
 800b17c:	4b11      	ldr	r3, [pc, #68]	; (800b1c4 <lagori_func+0x7c4>)
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 0310 	and.w	r3, r3, #16
 800b184:	b2db      	uxtb	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	f47f ac86 	bne.w	800aa98 <lagori_func+0x98>
		}
	}
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20009738 	.word	0x20009738
 800b19c:	20009b10 	.word	0x20009b10
 800b1a0:	2000a4c4 	.word	0x2000a4c4
 800b1a4:	20009c44 	.word	0x20009c44
 800b1a8:	2000aa48 	.word	0x2000aa48
 800b1ac:	2000a448 	.word	0x2000a448
 800b1b0:	200093ec 	.word	0x200093ec
 800b1b4:	20007880 	.word	0x20007880
 800b1b8:	469c3e00 	.word	0x469c3e00
 800b1bc:	20007cd4 	.word	0x20007cd4
 800b1c0:	20009968 	.word	0x20009968
 800b1c4:	2000794c 	.word	0x2000794c

0800b1c8 <lifting_func>:

void lifting_func(void){
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
	int enqerr = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	603b      	str	r3, [r7, #0]
	float pwspeed = 0;
 800b1d2:	f04f 0300 	mov.w	r3, #0
 800b1d6:	607b      	str	r3, [r7, #4]
	laserdir = 0;
 800b1d8:	4bb1      	ldr	r3, [pc, #708]	; (800b4a0 <lifting_func+0x2d8>)
 800b1da:	f04f 0200 	mov.w	r2, #0
 800b1de:	601a      	str	r2, [r3, #0]
	while(sys.manual){
 800b1e0:	e1f5      	b.n	800b5ce <lifting_func+0x406>
		//auto pulley
		if(lagori.gripok){
 800b1e2:	4bb0      	ldr	r3, [pc, #704]	; (800b4a4 <lifting_func+0x2dc>)
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d05a      	beq.n	800b2a6 <lifting_func+0xde>
			if(enqpwLG < LGsize2){
 800b1f0:	4bad      	ldr	r3, [pc, #692]	; (800b4a8 <lifting_func+0x2e0>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b1f8:	da1d      	bge.n	800b236 <lifting_func+0x6e>
				lagori.bldclayer = 5;
 800b1fa:	4aaa      	ldr	r2, [pc, #680]	; (800b4a4 <lifting_func+0x2dc>)
 800b1fc:	7813      	ldrb	r3, [r2, #0]
 800b1fe:	2105      	movs	r1, #5
 800b200:	f361 0384 	bfi	r3, r1, #2, #3
 800b204:	7013      	strb	r3, [r2, #0]
				lagori.flip = 2;
 800b206:	4aa7      	ldr	r2, [pc, #668]	; (800b4a4 <lifting_func+0x2dc>)
 800b208:	7853      	ldrb	r3, [r2, #1]
 800b20a:	2102      	movs	r1, #2
 800b20c:	f361 0301 	bfi	r3, r1, #0, #2
 800b210:	7053      	strb	r3, [r2, #1]
				fx.svapp = 0;
 800b212:	4aa6      	ldr	r2, [pc, #664]	; (800b4ac <lifting_func+0x2e4>)
 800b214:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800b218:	f36f 0300 	bfc	r3, #0, #1
 800b21c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
				svLGF1(1275)
 800b220:	f240 41fb 	movw	r1, #1275	; 0x4fb
 800b224:	48a2      	ldr	r0, [pc, #648]	; (800b4b0 <lifting_func+0x2e8>)
 800b226:	f7fd fd25 	bl	8008c74 <ServoSetPulse>
				svLGF2(1525)
 800b22a:	f240 51f5 	movw	r1, #1525	; 0x5f5
 800b22e:	48a1      	ldr	r0, [pc, #644]	; (800b4b4 <lifting_func+0x2ec>)
 800b230:	f7fd fd20 	bl	8008c74 <ServoSetPulse>
 800b234:	e02a      	b.n	800b28c <lifting_func+0xc4>
			}
			else if(enqpwLG < LGsize3)	lagori.bldclayer = 4;
 800b236:	4b9c      	ldr	r3, [pc, #624]	; (800b4a8 <lifting_func+0x2e0>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f5b3 7f33 	cmp.w	r3, #716	; 0x2cc
 800b23e:	dc06      	bgt.n	800b24e <lifting_func+0x86>
 800b240:	4a98      	ldr	r2, [pc, #608]	; (800b4a4 <lifting_func+0x2dc>)
 800b242:	7813      	ldrb	r3, [r2, #0]
 800b244:	2104      	movs	r1, #4
 800b246:	f361 0384 	bfi	r3, r1, #2, #3
 800b24a:	7013      	strb	r3, [r2, #0]
 800b24c:	e01e      	b.n	800b28c <lifting_func+0xc4>
			else if(enqpwLG < LGsize4)	lagori.bldclayer = 3;
 800b24e:	4b96      	ldr	r3, [pc, #600]	; (800b4a8 <lifting_func+0x2e0>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b256:	dc06      	bgt.n	800b266 <lifting_func+0x9e>
 800b258:	4a92      	ldr	r2, [pc, #584]	; (800b4a4 <lifting_func+0x2dc>)
 800b25a:	7813      	ldrb	r3, [r2, #0]
 800b25c:	2103      	movs	r1, #3
 800b25e:	f361 0384 	bfi	r3, r1, #2, #3
 800b262:	7013      	strb	r3, [r2, #0]
 800b264:	e012      	b.n	800b28c <lifting_func+0xc4>
			else if(enqpwLG < LGsize5)	lagori.bldclayer = 2;
 800b266:	4b90      	ldr	r3, [pc, #576]	; (800b4a8 <lifting_func+0x2e0>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f240 622e 	movw	r2, #1582	; 0x62e
 800b26e:	4293      	cmp	r3, r2
 800b270:	dc06      	bgt.n	800b280 <lifting_func+0xb8>
 800b272:	4a8c      	ldr	r2, [pc, #560]	; (800b4a4 <lifting_func+0x2dc>)
 800b274:	7813      	ldrb	r3, [r2, #0]
 800b276:	2102      	movs	r1, #2
 800b278:	f361 0384 	bfi	r3, r1, #2, #3
 800b27c:	7013      	strb	r3, [r2, #0]
 800b27e:	e005      	b.n	800b28c <lifting_func+0xc4>
			else 						lagori.bldclayer = 1;
 800b280:	4a88      	ldr	r2, [pc, #544]	; (800b4a4 <lifting_func+0x2dc>)
 800b282:	7813      	ldrb	r3, [r2, #0]
 800b284:	2101      	movs	r1, #1
 800b286:	f361 0384 	bfi	r3, r1, #2, #3
 800b28a:	7013      	strb	r3, [r2, #0]
			//				if(lagori.bldcflayer < 5)	lagori.bldclayer --;
			lagori.bldclapp = 1;
 800b28c:	4a85      	ldr	r2, [pc, #532]	; (800b4a4 <lifting_func+0x2dc>)
 800b28e:	7813      	ldrb	r3, [r2, #0]
 800b290:	f043 0301 	orr.w	r3, r3, #1
 800b294:	7013      	strb	r3, [r2, #0]
			Await(5);
 800b296:	2005      	movs	r0, #5
 800b298:	f003 fb24 	bl	800e8e4 <Await>
			lagori.gripok = 0;
 800b29c:	4a81      	ldr	r2, [pc, #516]	; (800b4a4 <lifting_func+0x2dc>)
 800b29e:	7853      	ldrb	r3, [r2, #1]
 800b2a0:	f36f 1386 	bfc	r3, #6, #1
 800b2a4:	7053      	strb	r3, [r2, #1]
		}

		// flip lagori
		if(LGHl)
 800b2a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2aa:	4883      	ldr	r0, [pc, #524]	; (800b4b8 <lifting_func+0x2f0>)
 800b2ac:	f00b fa5c 	bl	8016768 <HAL_GPIO_ReadPin>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <lifting_func+0xfc>
			lagori.bldcflayer = 1;
 800b2b6:	4a7b      	ldr	r2, [pc, #492]	; (800b4a4 <lifting_func+0x2dc>)
 800b2b8:	7813      	ldrb	r3, [r2, #0]
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	f361 1347 	bfi	r3, r1, #5, #3
 800b2c0:	7013      	strb	r3, [r2, #0]
 800b2c2:	e032      	b.n	800b32a <lifting_func+0x162>
		else if(LGHml)
 800b2c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b2c8:	487b      	ldr	r0, [pc, #492]	; (800b4b8 <lifting_func+0x2f0>)
 800b2ca:	f00b fa4d 	bl	8016768 <HAL_GPIO_ReadPin>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d106      	bne.n	800b2e2 <lifting_func+0x11a>
			lagori.bldcflayer = 2;
 800b2d4:	4a73      	ldr	r2, [pc, #460]	; (800b4a4 <lifting_func+0x2dc>)
 800b2d6:	7813      	ldrb	r3, [r2, #0]
 800b2d8:	2102      	movs	r1, #2
 800b2da:	f361 1347 	bfi	r3, r1, #5, #3
 800b2de:	7013      	strb	r3, [r2, #0]
 800b2e0:	e023      	b.n	800b32a <lifting_func+0x162>
		else if(LGHm)
 800b2e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b2e6:	4875      	ldr	r0, [pc, #468]	; (800b4bc <lifting_func+0x2f4>)
 800b2e8:	f00b fa3e 	bl	8016768 <HAL_GPIO_ReadPin>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <lifting_func+0x138>
			lagori.bldcflayer = 3;
 800b2f2:	4a6c      	ldr	r2, [pc, #432]	; (800b4a4 <lifting_func+0x2dc>)
 800b2f4:	7813      	ldrb	r3, [r2, #0]
 800b2f6:	2103      	movs	r1, #3
 800b2f8:	f361 1347 	bfi	r3, r1, #5, #3
 800b2fc:	7013      	strb	r3, [r2, #0]
 800b2fe:	e014      	b.n	800b32a <lifting_func+0x162>
		else if(LGHms)
 800b300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b304:	486d      	ldr	r0, [pc, #436]	; (800b4bc <lifting_func+0x2f4>)
 800b306:	f00b fa2f 	bl	8016768 <HAL_GPIO_ReadPin>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d106      	bne.n	800b31e <lifting_func+0x156>
			lagori.bldcflayer = 4;
 800b310:	4a64      	ldr	r2, [pc, #400]	; (800b4a4 <lifting_func+0x2dc>)
 800b312:	7813      	ldrb	r3, [r2, #0]
 800b314:	2104      	movs	r1, #4
 800b316:	f361 1347 	bfi	r3, r1, #5, #3
 800b31a:	7013      	strb	r3, [r2, #0]
 800b31c:	e005      	b.n	800b32a <lifting_func+0x162>
		else
			lagori.bldcflayer = 5;
 800b31e:	4a61      	ldr	r2, [pc, #388]	; (800b4a4 <lifting_func+0x2dc>)
 800b320:	7813      	ldrb	r3, [r2, #0]
 800b322:	2105      	movs	r1, #5
 800b324:	f361 1347 	bfi	r3, r1, #5, #3
 800b328:	7013      	strb	r3, [r2, #0]

		if(lagori.bldclapp){
 800b32a:	4b5e      	ldr	r3, [pc, #376]	; (800b4a4 <lifting_func+0x2dc>)
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	f003 0301 	and.w	r3, r3, #1
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b00      	cmp	r3, #0
 800b336:	d051      	beq.n	800b3dc <lifting_func+0x214>
			if(lagori.bldclayer == 0)			target_enq = layerG;
 800b338:	4b5a      	ldr	r3, [pc, #360]	; (800b4a4 <lifting_func+0x2dc>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 031c 	and.w	r3, r3, #28
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d104      	bne.n	800b350 <lifting_func+0x188>
 800b346:	4b5e      	ldr	r3, [pc, #376]	; (800b4c0 <lifting_func+0x2f8>)
 800b348:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e03a      	b.n	800b3c6 <lifting_func+0x1fe>
			else if(lagori.bldclayer == 1)		target_enq = layer1;
 800b350:	4b54      	ldr	r3, [pc, #336]	; (800b4a4 <lifting_func+0x2dc>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	f003 031c 	and.w	r3, r3, #28
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d104      	bne.n	800b368 <lifting_func+0x1a0>
 800b35e:	4b58      	ldr	r3, [pc, #352]	; (800b4c0 <lifting_func+0x2f8>)
 800b360:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	e02e      	b.n	800b3c6 <lifting_func+0x1fe>
			else if(lagori.bldclayer == 2)		target_enq = layer2;
 800b368:	4b4e      	ldr	r3, [pc, #312]	; (800b4a4 <lifting_func+0x2dc>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	f003 031c 	and.w	r3, r3, #28
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b08      	cmp	r3, #8
 800b374:	d104      	bne.n	800b380 <lifting_func+0x1b8>
 800b376:	4b52      	ldr	r3, [pc, #328]	; (800b4c0 <lifting_func+0x2f8>)
 800b378:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e022      	b.n	800b3c6 <lifting_func+0x1fe>
			else if(lagori.bldclayer == 3)		target_enq = layer3;
 800b380:	4b48      	ldr	r3, [pc, #288]	; (800b4a4 <lifting_func+0x2dc>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 031c 	and.w	r3, r3, #28
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b0c      	cmp	r3, #12
 800b38c:	d104      	bne.n	800b398 <lifting_func+0x1d0>
 800b38e:	4b4c      	ldr	r3, [pc, #304]	; (800b4c0 <lifting_func+0x2f8>)
 800b390:	f244 425c 	movw	r2, #17500	; 0x445c
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	e016      	b.n	800b3c6 <lifting_func+0x1fe>
			else if(lagori.bldclayer == 4)		target_enq = layer4;
 800b398:	4b42      	ldr	r3, [pc, #264]	; (800b4a4 <lifting_func+0x2dc>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 031c 	and.w	r3, r3, #28
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b10      	cmp	r3, #16
 800b3a4:	d104      	bne.n	800b3b0 <lifting_func+0x1e8>
 800b3a6:	4b46      	ldr	r3, [pc, #280]	; (800b4c0 <lifting_func+0x2f8>)
 800b3a8:	f245 2208 	movw	r2, #21000	; 0x5208
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	e00a      	b.n	800b3c6 <lifting_func+0x1fe>
			else if(lagori.bldclayer == 5)		target_enq = layer5;
 800b3b0:	4b3c      	ldr	r3, [pc, #240]	; (800b4a4 <lifting_func+0x2dc>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f003 031c 	and.w	r3, r3, #28
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b14      	cmp	r3, #20
 800b3bc:	d103      	bne.n	800b3c6 <lifting_func+0x1fe>
 800b3be:	4b40      	ldr	r3, [pc, #256]	; (800b4c0 <lifting_func+0x2f8>)
 800b3c0:	f245 6254 	movw	r2, #22100	; 0x5654
 800b3c4:	601a      	str	r2, [r3, #0]
			lagori.bldclapp = 0;
 800b3c6:	4a37      	ldr	r2, [pc, #220]	; (800b4a4 <lifting_func+0x2dc>)
 800b3c8:	7813      	ldrb	r3, [r2, #0]
 800b3ca:	f36f 0300 	bfc	r3, #0, #1
 800b3ce:	7013      	strb	r3, [r2, #0]
			lagori.bldcstart = 1;
 800b3d0:	4a34      	ldr	r2, [pc, #208]	; (800b4a4 <lifting_func+0x2dc>)
 800b3d2:	7853      	ldrb	r3, [r2, #1]
 800b3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d8:	7053      	strb	r3, [r2, #1]
 800b3da:	e04b      	b.n	800b474 <lifting_func+0x2ac>
		}
		else if(lagori.bldcfapp){
 800b3dc:	4b31      	ldr	r3, [pc, #196]	; (800b4a4 <lifting_func+0x2dc>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d044      	beq.n	800b474 <lifting_func+0x2ac>
			if(lagori.bldcflayer == 1)			target_enq = svfl_layer;
 800b3ea:	4b2e      	ldr	r3, [pc, #184]	; (800b4a4 <lifting_func+0x2dc>)
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f023 031f 	bic.w	r3, r3, #31
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d104      	bne.n	800b402 <lifting_func+0x23a>
 800b3f8:	4b31      	ldr	r3, [pc, #196]	; (800b4c0 <lifting_func+0x2f8>)
 800b3fa:	f641 3258 	movw	r2, #7000	; 0x1b58
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	e02e      	b.n	800b460 <lifting_func+0x298>
			else if(lagori.bldcflayer == 2)		target_enq = svfml_layer;
 800b402:	4b28      	ldr	r3, [pc, #160]	; (800b4a4 <lifting_func+0x2dc>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f023 031f 	bic.w	r3, r3, #31
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b40      	cmp	r3, #64	; 0x40
 800b40e:	d104      	bne.n	800b41a <lifting_func+0x252>
 800b410:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <lifting_func+0x2f8>)
 800b412:	f641 12c8 	movw	r2, #6600	; 0x19c8
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	e022      	b.n	800b460 <lifting_func+0x298>
			else if(lagori.bldcflayer == 3)		target_enq = svfm_layer;
 800b41a:	4b22      	ldr	r3, [pc, #136]	; (800b4a4 <lifting_func+0x2dc>)
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	f023 031f 	bic.w	r3, r3, #31
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b60      	cmp	r3, #96	; 0x60
 800b426:	d104      	bne.n	800b432 <lifting_func+0x26a>
 800b428:	4b25      	ldr	r3, [pc, #148]	; (800b4c0 <lifting_func+0x2f8>)
 800b42a:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 800b42e:	601a      	str	r2, [r3, #0]
 800b430:	e016      	b.n	800b460 <lifting_func+0x298>
			else if(lagori.bldcflayer == 4)		target_enq = svfms_layer;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <lifting_func+0x2dc>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	f023 031f 	bic.w	r3, r3, #31
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b80      	cmp	r3, #128	; 0x80
 800b43e:	d104      	bne.n	800b44a <lifting_func+0x282>
 800b440:	4b1f      	ldr	r3, [pc, #124]	; (800b4c0 <lifting_func+0x2f8>)
 800b442:	f241 225c 	movw	r2, #4700	; 0x125c
 800b446:	601a      	str	r2, [r3, #0]
 800b448:	e00a      	b.n	800b460 <lifting_func+0x298>
			else if(lagori.bldcflayer == 5)		target_enq = svfs_layer;
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <lifting_func+0x2dc>)
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	f023 031f 	bic.w	r3, r3, #31
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2ba0      	cmp	r3, #160	; 0xa0
 800b456:	d103      	bne.n	800b460 <lifting_func+0x298>
 800b458:	4b19      	ldr	r3, [pc, #100]	; (800b4c0 <lifting_func+0x2f8>)
 800b45a:	f640 5248 	movw	r2, #3400	; 0xd48
 800b45e:	601a      	str	r2, [r3, #0]
			lagori.bldcfapp = 0;
 800b460:	4a10      	ldr	r2, [pc, #64]	; (800b4a4 <lifting_func+0x2dc>)
 800b462:	7813      	ldrb	r3, [r2, #0]
 800b464:	f36f 0341 	bfc	r3, #1, #1
 800b468:	7013      	strb	r3, [r2, #0]
			lagori.bldcstart = 1;
 800b46a:	4a0e      	ldr	r2, [pc, #56]	; (800b4a4 <lifting_func+0x2dc>)
 800b46c:	7853      	ldrb	r3, [r2, #1]
 800b46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b472:	7053      	strb	r3, [r2, #1]
		}

		//if +ve is up, arr = 20000
		enqerr = target_enq - enqpwLlf;
 800b474:	4b12      	ldr	r3, [pc, #72]	; (800b4c0 <lifting_func+0x2f8>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	4b12      	ldr	r3, [pc, #72]	; (800b4c4 <lifting_func+0x2fc>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	603b      	str	r3, [r7, #0]
		pwspeed = enqerr;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48a:	edc7 7a01 	vstr	s15, [r7, #4]
		if(enqerr >= 19999)						pwspeed = 19999;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	f644 621e 	movw	r2, #19998	; 0x4e1e
 800b494:	4293      	cmp	r3, r2
 800b496:	dd19      	ble.n	800b4cc <lifting_func+0x304>
 800b498:	4b0b      	ldr	r3, [pc, #44]	; (800b4c8 <lifting_func+0x300>)
 800b49a:	607b      	str	r3, [r7, #4]
 800b49c:	e031      	b.n	800b502 <lifting_func+0x33a>
 800b49e:	bf00      	nop
 800b4a0:	20009b80 	.word	0x20009b80
 800b4a4:	20009b10 	.word	0x20009b10
 800b4a8:	20009ccc 	.word	0x20009ccc
 800b4ac:	2000a4c4 	.word	0x2000a4c4
 800b4b0:	20009c44 	.word	0x20009c44
 800b4b4:	2000aa48 	.word	0x2000aa48
 800b4b8:	40020400 	.word	0x40020400
 800b4bc:	40021000 	.word	0x40021000
 800b4c0:	20009738 	.word	0x20009738
 800b4c4:	20007d7c 	.word	0x20007d7c
 800b4c8:	469c3e00 	.word	0x469c3e00
		else if(enqerr <= 17500 && enqerr > 0)	pwspeed = 17500;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	f244 425c 	movw	r2, #17500	; 0x445c
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	dc05      	bgt.n	800b4e2 <lifting_func+0x31a>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dd02      	ble.n	800b4e2 <lifting_func+0x31a>
 800b4dc:	4b42      	ldr	r3, [pc, #264]	; (800b5e8 <lifting_func+0x420>)
 800b4de:	607b      	str	r3, [r7, #4]
 800b4e0:	e00f      	b.n	800b502 <lifting_func+0x33a>
		else if(enqerr <= -19999)				pwspeed = -19999;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	4a41      	ldr	r2, [pc, #260]	; (800b5ec <lifting_func+0x424>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	da02      	bge.n	800b4f0 <lifting_func+0x328>
 800b4ea:	4b41      	ldr	r3, [pc, #260]	; (800b5f0 <lifting_func+0x428>)
 800b4ec:	607b      	str	r3, [r7, #4]
 800b4ee:	e008      	b.n	800b502 <lifting_func+0x33a>
		else if(enqerr >= -17500 && enqerr < 0)	pwspeed = -17500;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	4a40      	ldr	r2, [pc, #256]	; (800b5f4 <lifting_func+0x42c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	db04      	blt.n	800b502 <lifting_func+0x33a>
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	da01      	bge.n	800b502 <lifting_func+0x33a>
 800b4fe:	4b3e      	ldr	r3, [pc, #248]	; (800b5f8 <lifting_func+0x430>)
 800b500:	607b      	str	r3, [r7, #4]

		if(lagori.bldcstart){
 800b502:	4b3e      	ldr	r3, [pc, #248]	; (800b5fc <lifting_func+0x434>)
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d05e      	beq.n	800b5ce <lifting_func+0x406>
			if(enqpwLlf >= 22500){
 800b510:	4b3b      	ldr	r3, [pc, #236]	; (800b600 <lifting_func+0x438>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f245 72e3 	movw	r2, #22499	; 0x57e3
 800b518:	4293      	cmp	r3, r2
 800b51a:	dd09      	ble.n	800b530 <lifting_func+0x368>
				LFPW(0);
 800b51c:	2100      	movs	r1, #0
 800b51e:	4839      	ldr	r0, [pc, #228]	; (800b604 <lifting_func+0x43c>)
 800b520:	f7f5 ff2e 	bl	8001380 <WriteBDC>
				lagori.bldcstart = 0;
 800b524:	4a35      	ldr	r2, [pc, #212]	; (800b5fc <lifting_func+0x434>)
 800b526:	7853      	ldrb	r3, [r2, #1]
 800b528:	f36f 13c7 	bfc	r3, #7, #1
 800b52c:	7053      	strb	r3, [r2, #1]
 800b52e:	e04e      	b.n	800b5ce <lifting_func+0x406>
			}
			else if(target_enq == layer5 && enqerr <= 750){
 800b530:	4b35      	ldr	r3, [pc, #212]	; (800b608 <lifting_func+0x440>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f245 6254 	movw	r2, #22100	; 0x5654
 800b538:	4293      	cmp	r3, r2
 800b53a:	d111      	bne.n	800b560 <lifting_func+0x398>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b542:	4293      	cmp	r3, r2
 800b544:	dc0c      	bgt.n	800b560 <lifting_func+0x398>
				Await(150);
 800b546:	2096      	movs	r0, #150	; 0x96
 800b548:	f003 f9cc 	bl	800e8e4 <Await>
				LFPW(0);
 800b54c:	2100      	movs	r1, #0
 800b54e:	482d      	ldr	r0, [pc, #180]	; (800b604 <lifting_func+0x43c>)
 800b550:	f7f5 ff16 	bl	8001380 <WriteBDC>
				lagori.bldcstart = 0;
 800b554:	4a29      	ldr	r2, [pc, #164]	; (800b5fc <lifting_func+0x434>)
 800b556:	7853      	ldrb	r3, [r2, #1]
 800b558:	f36f 13c7 	bfc	r3, #7, #1
 800b55c:	7053      	strb	r3, [r2, #1]
 800b55e:	e036      	b.n	800b5ce <lifting_func+0x406>
			}
			else if(target_enq == layerG && enqerr >= -750){
 800b560:	4b29      	ldr	r3, [pc, #164]	; (800b608 <lifting_func+0x440>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b568:	d110      	bne.n	800b58c <lifting_func+0x3c4>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	4a27      	ldr	r2, [pc, #156]	; (800b60c <lifting_func+0x444>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	db0c      	blt.n	800b58c <lifting_func+0x3c4>
				Await(200);
 800b572:	20c8      	movs	r0, #200	; 0xc8
 800b574:	f003 f9b6 	bl	800e8e4 <Await>
				LFPW(0);
 800b578:	2100      	movs	r1, #0
 800b57a:	4822      	ldr	r0, [pc, #136]	; (800b604 <lifting_func+0x43c>)
 800b57c:	f7f5 ff00 	bl	8001380 <WriteBDC>
				lagori.bldcstart = 0;
 800b580:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <lifting_func+0x434>)
 800b582:	7853      	ldrb	r3, [r2, #1]
 800b584:	f36f 13c7 	bfc	r3, #7, #1
 800b588:	7053      	strb	r3, [r2, #1]
 800b58a:	e020      	b.n	800b5ce <lifting_func+0x406>
			}
			else if(enqerr <= 750 && enqerr >= -750){	//stop
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b592:	4293      	cmp	r3, r2
 800b594:	dc10      	bgt.n	800b5b8 <lifting_func+0x3f0>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	4a1c      	ldr	r2, [pc, #112]	; (800b60c <lifting_func+0x444>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	db0c      	blt.n	800b5b8 <lifting_func+0x3f0>
				Await(150);
 800b59e:	2096      	movs	r0, #150	; 0x96
 800b5a0:	f003 f9a0 	bl	800e8e4 <Await>
				LFPW(0);
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	4817      	ldr	r0, [pc, #92]	; (800b604 <lifting_func+0x43c>)
 800b5a8:	f7f5 feea 	bl	8001380 <WriteBDC>
				lagori.bldcstart = 0;
 800b5ac:	4a13      	ldr	r2, [pc, #76]	; (800b5fc <lifting_func+0x434>)
 800b5ae:	7853      	ldrb	r3, [r2, #1]
 800b5b0:	f36f 13c7 	bfc	r3, #7, #1
 800b5b4:	7053      	strb	r3, [r2, #1]
 800b5b6:	e00a      	b.n	800b5ce <lifting_func+0x406>
			}
			else
				LFPW(pwspeed);
 800b5b8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5bc:	eef1 7a67 	vneg.f32	s15, s15
 800b5c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5c4:	ee17 1a90 	vmov	r1, s15
 800b5c8:	480e      	ldr	r0, [pc, #56]	; (800b604 <lifting_func+0x43c>)
 800b5ca:	f7f5 fed9 	bl	8001380 <WriteBDC>
	while(sys.manual){
 800b5ce:	4b10      	ldr	r3, [pc, #64]	; (800b610 <lifting_func+0x448>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	f003 0310 	and.w	r3, r3, #16
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f47f ae02 	bne.w	800b1e2 <lifting_func+0x1a>
//					}
//				}
//			}
//		}
	}
}
 800b5de:	bf00      	nop
 800b5e0:	bf00      	nop
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	4688b800 	.word	0x4688b800
 800b5ec:	ffffb1e2 	.word	0xffffb1e2
 800b5f0:	c69c3e00 	.word	0xc69c3e00
 800b5f4:	ffffbba4 	.word	0xffffbba4
 800b5f8:	c688b800 	.word	0xc688b800
 800b5fc:	20009b10 	.word	0x20009b10
 800b600:	20007d7c 	.word	0x20007d7c
 800b604:	20007cd4 	.word	0x20007cd4
 800b608:	20009738 	.word	0x20009738
 800b60c:	fffffd12 	.word	0xfffffd12
 800b610:	2000794c 	.word	0x2000794c
 800b614:	00000000 	.word	0x00000000

0800b618 <hitter_mode>:

void hitter_mode(void){
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af06      	add	r7, sp, #24
	//	initiate cylinder, servoBallH and servoBallV
	BgripOFF
 800b61e:	4abc      	ldr	r2, [pc, #752]	; (800b910 <hitter_mode+0x2f8>)
 800b620:	7853      	ldrb	r3, [r2, #1]
 800b622:	f36f 0300 	bfc	r3, #0, #1
 800b626:	7053      	strb	r3, [r2, #1]
	svBRrealup
 800b628:	f240 11a9 	movw	r1, #425	; 0x1a9
 800b62c:	48b9      	ldr	r0, [pc, #740]	; (800b914 <hitter_mode+0x2fc>)
 800b62e:	f7fd fb21 	bl	8008c74 <ServoSetPulse>
	svCloseFlip
 800b632:	f240 719e 	movw	r1, #1950	; 0x79e
 800b636:	48b8      	ldr	r0, [pc, #736]	; (800b918 <hitter_mode+0x300>)
 800b638:	f7fd fb1c 	bl	8008c74 <ServoSetPulse>
 800b63c:	f44f 7161 	mov.w	r1, #900	; 0x384
 800b640:	48b6      	ldr	r0, [pc, #728]	; (800b91c <hitter_mode+0x304>)
 800b642:	f7fd fb17 	bl	8008c74 <ServoSetPulse>
	sys.auto2manual = 1;
 800b646:	4ab6      	ldr	r2, [pc, #728]	; (800b920 <hitter_mode+0x308>)
 800b648:	7813      	ldrb	r3, [r2, #0]
 800b64a:	f043 0320 	orr.w	r3, r3, #32
 800b64e:	7013      	strb	r3, [r2, #0]
	MODN.speed = 2.0;
 800b650:	4bb4      	ldr	r3, [pc, #720]	; (800b924 <hitter_mode+0x30c>)
 800b652:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b656:	61da      	str	r2, [r3, #28]
	while(sys.manual == 0){
 800b658:	f000 bcab 	b.w	800bfb2 <hitter_mode+0x99a>
		if(!LGclose)	LGPW(-9000)
 800b65c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b660:	48b1      	ldr	r0, [pc, #708]	; (800b928 <hitter_mode+0x310>)
 800b662:	f00b f881 	bl	8016768 <HAL_GPIO_ReadPin>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d005      	beq.n	800b678 <hitter_mode+0x60>
 800b66c:	f242 3128 	movw	r1, #9000	; 0x2328
 800b670:	48ae      	ldr	r0, [pc, #696]	; (800b92c <hitter_mode+0x314>)
 800b672:	f7f5 fe85 	bl	8001380 <WriteBDC>
 800b676:	e003      	b.n	800b680 <hitter_mode+0x68>
		else			LGPW(0)
 800b678:	2100      	movs	r1, #0
 800b67a:	48ac      	ldr	r0, [pc, #688]	; (800b92c <hitter_mode+0x314>)
 800b67c:	f7f5 fe80 	bl	8001380 <WriteBDC>

		if(ps4.button == CIRCLE){
 800b680:	4bab      	ldr	r3, [pc, #684]	; (800b930 <hitter_mode+0x318>)
 800b682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b688:	d135      	bne.n	800b6f6 <hitter_mode+0xde>
			while(ps4.button == CIRCLE);
 800b68a:	bf00      	nop
 800b68c:	4ba8      	ldr	r3, [pc, #672]	; (800b930 <hitter_mode+0x318>)
 800b68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b694:	d0fa      	beq.n	800b68c <hitter_mode+0x74>
			pp.task = 7;
 800b696:	4aa7      	ldr	r2, [pc, #668]	; (800b934 <hitter_mode+0x31c>)
 800b698:	7813      	ldrb	r3, [r2, #0]
 800b69a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800b69e:	7013      	strb	r3, [r2, #0]
			pp.path = 7;
 800b6a0:	4aa4      	ldr	r2, [pc, #656]	; (800b934 <hitter_mode+0x31c>)
 800b6a2:	7813      	ldrb	r3, [r2, #0]
 800b6a4:	f043 0307 	orr.w	r3, r3, #7
 800b6a8:	7013      	strb	r3, [r2, #0]
			sys.auto2manual = 0;
 800b6aa:	4a9d      	ldr	r2, [pc, #628]	; (800b920 <hitter_mode+0x308>)
 800b6ac:	7813      	ldrb	r3, [r2, #0]
 800b6ae:	f36f 1345 	bfc	r3, #5, #1
 800b6b2:	7013      	strb	r3, [r2, #0]
			RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	4b9f      	ldr	r3, [pc, #636]	; (800b938 <hitter_mode+0x320>)
 800b6ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6be:	a390      	add	r3, pc, #576	; (adr r3, 800b900 <hitter_mode+0x2e8>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6c8:	f04f 0200 	mov.w	r2, #0
 800b6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6d0:	e9cd 2300 	strd	r2, r3, [sp]
 800b6d4:	a38c      	add	r3, pc, #560	; (adr r3, 800b908 <hitter_mode+0x2f0>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	2145      	movs	r1, #69	; 0x45
 800b6dc:	4897      	ldr	r0, [pc, #604]	; (800b93c <hitter_mode+0x324>)
 800b6de:	f7fb fd67 	bl	80071b0 <RNSSet>
			registerPath(expath, 1, point8);
 800b6e2:	4a97      	ldr	r2, [pc, #604]	; (800b940 <hitter_mode+0x328>)
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	4897      	ldr	r0, [pc, #604]	; (800b944 <hitter_mode+0x32c>)
 800b6e8:	f7fd fc1a 	bl	8008f20 <registerPath>
			RNSPPstart(expath, 1, &rns);
 800b6ec:	4a93      	ldr	r2, [pc, #588]	; (800b93c <hitter_mode+0x324>)
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4894      	ldr	r0, [pc, #592]	; (800b944 <hitter_mode+0x32c>)
 800b6f2:	f7fb fbc4 	bl	8006e7e <RNSPPstart>
		}
		//led2 - function
		//led3 - path plan
		if(ps4.button == SQUARE){		//to ball rack B
 800b6f6:	4b8e      	ldr	r3, [pc, #568]	; (800b930 <hitter_mode+0x318>)
 800b6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6fe:	d148      	bne.n	800b792 <hitter_mode+0x17a>
			sys.auto2manual = 0;
 800b700:	4a87      	ldr	r2, [pc, #540]	; (800b920 <hitter_mode+0x308>)
 800b702:	7813      	ldrb	r3, [r2, #0]
 800b704:	f36f 1345 	bfc	r3, #5, #1
 800b708:	7013      	strb	r3, [r2, #0]
			while(ps4.button == SQUARE);
 800b70a:	bf00      	nop
 800b70c:	4b88      	ldr	r3, [pc, #544]	; (800b930 <hitter_mode+0x318>)
 800b70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b714:	d0fa      	beq.n	800b70c <hitter_mode+0xf4>
			if(ps4.button == L1_SQUARE){
 800b716:	4b86      	ldr	r3, [pc, #536]	; (800b930 <hitter_mode+0x318>)
 800b718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b71a:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800b71e:	d114      	bne.n	800b74a <hitter_mode+0x132>
				while(ps4.button == L1_SQUARE){
 800b720:	e00d      	b.n	800b73e <hitter_mode+0x126>
					pp.task = 3;
 800b722:	4a84      	ldr	r2, [pc, #528]	; (800b934 <hitter_mode+0x31c>)
 800b724:	7813      	ldrb	r3, [r2, #0]
 800b726:	2103      	movs	r1, #3
 800b728:	f361 03c5 	bfi	r3, r1, #3, #3
 800b72c:	7013      	strb	r3, [r2, #0]
					pp.path = 3;
 800b72e:	4a81      	ldr	r2, [pc, #516]	; (800b934 <hitter_mode+0x31c>)
 800b730:	7813      	ldrb	r3, [r2, #0]
 800b732:	2103      	movs	r1, #3
 800b734:	f361 0302 	bfi	r3, r1, #0, #3
 800b738:	7013      	strb	r3, [r2, #0]
					pp_func();
 800b73a:	f000 fded 	bl	800c318 <pp_func>
				while(ps4.button == L1_SQUARE){
 800b73e:	4b7c      	ldr	r3, [pc, #496]	; (800b930 <hitter_mode+0x318>)
 800b740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b742:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800b746:	d0ec      	beq.n	800b722 <hitter_mode+0x10a>
 800b748:	e023      	b.n	800b792 <hitter_mode+0x17a>
				}
			}
			else if(ps4.button == R1_SQUARE){
 800b74a:	4b79      	ldr	r3, [pc, #484]	; (800b930 <hitter_mode+0x318>)
 800b74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b74e:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800b752:	d11e      	bne.n	800b792 <hitter_mode+0x17a>
				while(ps4.button == R1_SQUARE);
 800b754:	bf00      	nop
 800b756:	4b76      	ldr	r3, [pc, #472]	; (800b930 <hitter_mode+0x318>)
 800b758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b75a:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800b75e:	d0fa      	beq.n	800b756 <hitter_mode+0x13e>
				RNSSet(&rns, RNS_RESET_POS);
 800b760:	2114      	movs	r1, #20
 800b762:	4876      	ldr	r0, [pc, #472]	; (800b93c <hitter_mode+0x324>)
 800b764:	f7fb fd24 	bl	80071b0 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800b768:	2117      	movs	r1, #23
 800b76a:	4874      	ldr	r0, [pc, #464]	; (800b93c <hitter_mode+0x324>)
 800b76c:	f7fb fd20 	bl	80071b0 <RNSSet>
				pp.path = 2;
 800b770:	4a70      	ldr	r2, [pc, #448]	; (800b934 <hitter_mode+0x31c>)
 800b772:	7813      	ldrb	r3, [r2, #0]
 800b774:	2102      	movs	r1, #2
 800b776:	f361 0302 	bfi	r3, r1, #0, #3
 800b77a:	7013      	strb	r3, [r2, #0]
				pp.task = 2;
 800b77c:	4a6d      	ldr	r2, [pc, #436]	; (800b934 <hitter_mode+0x31c>)
 800b77e:	7813      	ldrb	r3, [r2, #0]
 800b780:	2102      	movs	r1, #2
 800b782:	f361 03c5 	bfi	r3, r1, #3, #3
 800b786:	7013      	strb	r3, [r2, #0]
				sys.ppstart = 1;
 800b788:	4a65      	ldr	r2, [pc, #404]	; (800b920 <hitter_mode+0x308>)
 800b78a:	7813      	ldrb	r3, [r2, #0]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b790:	7013      	strb	r3, [r2, #0]
			}
		}
		if(ps4.button == TRIANGLE){
 800b792:	4b67      	ldr	r3, [pc, #412]	; (800b930 <hitter_mode+0x318>)
 800b794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79a:	d146      	bne.n	800b82a <hitter_mode+0x212>
			sys.auto2manual = 0;
 800b79c:	4a60      	ldr	r2, [pc, #384]	; (800b920 <hitter_mode+0x308>)
 800b79e:	7813      	ldrb	r3, [r2, #0]
 800b7a0:	f36f 1345 	bfc	r3, #5, #1
 800b7a4:	7013      	strb	r3, [r2, #0]
			while(ps4.button == TRIANGLE);
 800b7a6:	bf00      	nop
 800b7a8:	4b61      	ldr	r3, [pc, #388]	; (800b930 <hitter_mode+0x318>)
 800b7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b0:	d0fa      	beq.n	800b7a8 <hitter_mode+0x190>
			if(ps4.button == L1_TRIANGLE){
 800b7b2:	4b5f      	ldr	r3, [pc, #380]	; (800b930 <hitter_mode+0x318>)
 800b7b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b7ba:	d114      	bne.n	800b7e6 <hitter_mode+0x1ce>
				while(ps4.button == L1_TRIANGLE);
 800b7bc:	bf00      	nop
 800b7be:	4b5c      	ldr	r3, [pc, #368]	; (800b930 <hitter_mode+0x318>)
 800b7c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b7c6:	d0fa      	beq.n	800b7be <hitter_mode+0x1a6>
				pp.task = 1;
 800b7c8:	4a5a      	ldr	r2, [pc, #360]	; (800b934 <hitter_mode+0x31c>)
 800b7ca:	7813      	ldrb	r3, [r2, #0]
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	f361 03c5 	bfi	r3, r1, #3, #3
 800b7d2:	7013      	strb	r3, [r2, #0]
				pp.path = 1;
 800b7d4:	4a57      	ldr	r2, [pc, #348]	; (800b934 <hitter_mode+0x31c>)
 800b7d6:	7813      	ldrb	r3, [r2, #0]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	f361 0302 	bfi	r3, r1, #0, #3
 800b7de:	7013      	strb	r3, [r2, #0]
				pp_func();
 800b7e0:	f000 fd9a 	bl	800c318 <pp_func>
 800b7e4:	e021      	b.n	800b82a <hitter_mode+0x212>
			}
			else if(ps4.button == R1_TRIANGLE){
 800b7e6:	4b52      	ldr	r3, [pc, #328]	; (800b930 <hitter_mode+0x318>)
 800b7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ea:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800b7ee:	d11c      	bne.n	800b82a <hitter_mode+0x212>
				while(ps4.button == R1_TRIANGLE);
 800b7f0:	bf00      	nop
 800b7f2:	4b4f      	ldr	r3, [pc, #316]	; (800b930 <hitter_mode+0x318>)
 800b7f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7f6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800b7fa:	d0fa      	beq.n	800b7f2 <hitter_mode+0x1da>
				pp.task = 0;
 800b7fc:	4a4d      	ldr	r2, [pc, #308]	; (800b934 <hitter_mode+0x31c>)
 800b7fe:	7813      	ldrb	r3, [r2, #0]
 800b800:	f36f 03c5 	bfc	r3, #3, #3
 800b804:	7013      	strb	r3, [r2, #0]
				pp.path = 0;
 800b806:	4a4b      	ldr	r2, [pc, #300]	; (800b934 <hitter_mode+0x31c>)
 800b808:	7813      	ldrb	r3, [r2, #0]
 800b80a:	f36f 0302 	bfc	r3, #0, #3
 800b80e:	7013      	strb	r3, [r2, #0]
				RNSSet(&rns, RNS_RESET_POS);
 800b810:	2114      	movs	r1, #20
 800b812:	484a      	ldr	r0, [pc, #296]	; (800b93c <hitter_mode+0x324>)
 800b814:	f7fb fccc 	bl	80071b0 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800b818:	2117      	movs	r1, #23
 800b81a:	4848      	ldr	r0, [pc, #288]	; (800b93c <hitter_mode+0x324>)
 800b81c:	f7fb fcc8 	bl	80071b0 <RNSSet>
				sys.ppstart = 1;
 800b820:	4a3f      	ldr	r2, [pc, #252]	; (800b920 <hitter_mode+0x308>)
 800b822:	7813      	ldrb	r3, [r2, #0]
 800b824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b828:	7013      	strb	r3, [r2, #0]
			}
		}
		if(ps4.button == CROSS){
 800b82a:	4b41      	ldr	r3, [pc, #260]	; (800b930 <hitter_mode+0x318>)
 800b82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b82e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b832:	d10d      	bne.n	800b850 <hitter_mode+0x238>
			RNSStop(&rns);
 800b834:	4841      	ldr	r0, [pc, #260]	; (800b93c <hitter_mode+0x324>)
 800b836:	f7fb fa8d 	bl	8006d54 <RNSStop>
			sys.auto2manual = 1;
 800b83a:	4a39      	ldr	r2, [pc, #228]	; (800b920 <hitter_mode+0x308>)
 800b83c:	7813      	ldrb	r3, [r2, #0]
 800b83e:	f043 0320 	orr.w	r3, r3, #32
 800b842:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CROSS);
 800b844:	bf00      	nop
 800b846:	4b3a      	ldr	r3, [pc, #232]	; (800b930 <hitter_mode+0x318>)
 800b848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b84e:	d0fa      	beq.n	800b846 <hitter_mode+0x22e>
		}

		if(sys.auto2manual){
 800b850:	4b33      	ldr	r3, [pc, #204]	; (800b920 <hitter_mode+0x308>)
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	f003 0320 	and.w	r3, r3, #32
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 8134 	beq.w	800bac8 <hitter_mode+0x4b0>
			if(ps4.button == R1){
 800b860:	4b33      	ldr	r3, [pc, #204]	; (800b930 <hitter_mode+0x318>)
 800b862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b868:	d12d      	bne.n	800b8c6 <hitter_mode+0x2ae>
				MODN.speed = 5.0;
 800b86a:	4b2e      	ldr	r3, [pc, #184]	; (800b924 <hitter_mode+0x30c>)
 800b86c:	4a36      	ldr	r2, [pc, #216]	; (800b948 <hitter_mode+0x330>)
 800b86e:	61da      	str	r2, [r3, #28]
				while(ps4.button == R1){
 800b870:	e024      	b.n	800b8bc <hitter_mode+0x2a4>
					if(ps4.joyR_x >= 0.5){
 800b872:	4b2f      	ldr	r3, [pc, #188]	; (800b930 <hitter_mode+0x318>)
 800b874:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b878:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b87c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	db08      	blt.n	800b898 <hitter_mode+0x280>
						ServoMovePulse(&SERVO_BallH, -25);
 800b886:	f06f 0118 	mvn.w	r1, #24
 800b88a:	4830      	ldr	r0, [pc, #192]	; (800b94c <hitter_mode+0x334>)
 800b88c:	f7fd fa4d 	bl	8008d2a <ServoMovePulse>
						Await(250);
 800b890:	20fa      	movs	r0, #250	; 0xfa
 800b892:	f003 f827 	bl	800e8e4 <Await>
 800b896:	e011      	b.n	800b8bc <hitter_mode+0x2a4>
					}
					else if(ps4.joyR_x <= -0.5){
 800b898:	4b25      	ldr	r3, [pc, #148]	; (800b930 <hitter_mode+0x318>)
 800b89a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b89e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800b8a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8aa:	d900      	bls.n	800b8ae <hitter_mode+0x296>
 800b8ac:	e006      	b.n	800b8bc <hitter_mode+0x2a4>
						ServoMovePulse(&SERVO_BallH, 25);
 800b8ae:	2119      	movs	r1, #25
 800b8b0:	4826      	ldr	r0, [pc, #152]	; (800b94c <hitter_mode+0x334>)
 800b8b2:	f7fd fa3a 	bl	8008d2a <ServoMovePulse>
						Await(250);
 800b8b6:	20fa      	movs	r0, #250	; 0xfa
 800b8b8:	f003 f814 	bl	800e8e4 <Await>
				while(ps4.button == R1){
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	; (800b930 <hitter_mode+0x318>)
 800b8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c4:	d0d5      	beq.n	800b872 <hitter_mode+0x25a>
					}
				}
			}

			realMODN(&ps4, &rns);
 800b8c6:	491d      	ldr	r1, [pc, #116]	; (800b93c <hitter_mode+0x324>)
 800b8c8:	4819      	ldr	r0, [pc, #100]	; (800b930 <hitter_mode+0x318>)
 800b8ca:	f7fa fadd 	bl	8005e88 <realMODN>

			if(ps4.button == L1){
 800b8ce:	4b18      	ldr	r3, [pc, #96]	; (800b930 <hitter_mode+0x318>)
 800b8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d6:	d155      	bne.n	800b984 <hitter_mode+0x36c>
				MODN.speed = 2.0;
 800b8d8:	4b12      	ldr	r3, [pc, #72]	; (800b924 <hitter_mode+0x30c>)
 800b8da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b8de:	61da      	str	r2, [r3, #28]
				if(pp.cyon == 0)
 800b8e0:	4b14      	ldr	r3, [pc, #80]	; (800b934 <hitter_mode+0x31c>)
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d130      	bne.n	800b950 <hitter_mode+0x338>
					BgripON
 800b8ee:	4a08      	ldr	r2, [pc, #32]	; (800b910 <hitter_mode+0x2f8>)
 800b8f0:	7853      	ldrb	r3, [r2, #1]
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	7053      	strb	r3, [r2, #1]
 800b8f8:	e02f      	b.n	800b95a <hitter_mode+0x342>
 800b8fa:	bf00      	nop
 800b8fc:	f3af 8000 	nop.w
 800b900:	9999999a 	.word	0x9999999a
 800b904:	3fa99999 	.word	0x3fa99999
 800b908:	9999999a 	.word	0x9999999a
 800b90c:	3fb99999 	.word	0x3fb99999
 800b910:	40020814 	.word	0x40020814
 800b914:	20009a58 	.word	0x20009a58
 800b918:	20009c44 	.word	0x20009c44
 800b91c:	2000aa48 	.word	0x2000aa48
 800b920:	2000794c 	.word	0x2000794c
 800b924:	200076bc 	.word	0x200076bc
 800b928:	40021000 	.word	0x40021000
 800b92c:	2000aa24 	.word	0x2000aa24
 800b930:	2000a448 	.word	0x2000a448
 800b934:	20007880 	.word	0x20007880
 800b938:	3ff00000 	.word	0x3ff00000
 800b93c:	200093ec 	.word	0x200093ec
 800b940:	20009bcc 	.word	0x20009bcc
 800b944:	2000abf8 	.word	0x2000abf8
 800b948:	40a00000 	.word	0x40a00000
 800b94c:	20009bf4 	.word	0x20009bf4
				else
					BgripOFF
 800b950:	4abd      	ldr	r2, [pc, #756]	; (800bc48 <hitter_mode+0x630>)
 800b952:	7853      	ldrb	r3, [r2, #1]
 800b954:	f36f 0300 	bfc	r3, #0, #1
 800b958:	7053      	strb	r3, [r2, #1]
				pp.cyon = !pp.cyon;
 800b95a:	4bbc      	ldr	r3, [pc, #752]	; (800bc4c <hitter_mode+0x634>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b962:	b2db      	uxtb	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	bf0c      	ite	eq
 800b968:	2301      	moveq	r3, #1
 800b96a:	2300      	movne	r3, #0
 800b96c:	b2d9      	uxtb	r1, r3
 800b96e:	4ab7      	ldr	r2, [pc, #732]	; (800bc4c <hitter_mode+0x634>)
 800b970:	7813      	ldrb	r3, [r2, #0]
 800b972:	f361 1386 	bfi	r3, r1, #6, #1
 800b976:	7013      	strb	r3, [r2, #0]
				while(ps4.button == L1);
 800b978:	bf00      	nop
 800b97a:	4bb5      	ldr	r3, [pc, #724]	; (800bc50 <hitter_mode+0x638>)
 800b97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b982:	d0fa      	beq.n	800b97a <hitter_mode+0x362>
			}

			if(ps4.button == DOWN){
 800b984:	4bb2      	ldr	r3, [pc, #712]	; (800bc50 <hitter_mode+0x638>)
 800b986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b988:	2b40      	cmp	r3, #64	; 0x40
 800b98a:	d109      	bne.n	800b9a0 <hitter_mode+0x388>
				while(ps4.button == DOWN);
 800b98c:	bf00      	nop
 800b98e:	4bb0      	ldr	r3, [pc, #704]	; (800bc50 <hitter_mode+0x638>)
 800b990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b992:	2b40      	cmp	r3, #64	; 0x40
 800b994:	d0fb      	beq.n	800b98e <hitter_mode+0x376>
				svBRdown
 800b996:	f640 11f6 	movw	r1, #2550	; 0x9f6
 800b99a:	48ae      	ldr	r0, [pc, #696]	; (800bc54 <hitter_mode+0x63c>)
 800b99c:	f7fd f96a 	bl	8008c74 <ServoSetPulse>
			}

			if(ps4.button == UP){
 800b9a0:	4bab      	ldr	r3, [pc, #684]	; (800bc50 <hitter_mode+0x638>)
 800b9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a4:	2b10      	cmp	r3, #16
 800b9a6:	d109      	bne.n	800b9bc <hitter_mode+0x3a4>
				while(ps4.button == UP);
 800b9a8:	bf00      	nop
 800b9aa:	4ba9      	ldr	r3, [pc, #676]	; (800bc50 <hitter_mode+0x638>)
 800b9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ae:	2b10      	cmp	r3, #16
 800b9b0:	d0fb      	beq.n	800b9aa <hitter_mode+0x392>
				svBRrealup
 800b9b2:	f240 11a9 	movw	r1, #425	; 0x1a9
 800b9b6:	48a7      	ldr	r0, [pc, #668]	; (800bc54 <hitter_mode+0x63c>)
 800b9b8:	f7fd f95c 	bl	8008c74 <ServoSetPulse>
			}

			if(ps4.button == LEFT){
 800b9bc:	4ba4      	ldr	r3, [pc, #656]	; (800bc50 <hitter_mode+0x638>)
 800b9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c0:	2b80      	cmp	r3, #128	; 0x80
 800b9c2:	d109      	bne.n	800b9d8 <hitter_mode+0x3c0>
				while(ps4.button == LEFT);
 800b9c4:	bf00      	nop
 800b9c6:	4ba2      	ldr	r3, [pc, #648]	; (800bc50 <hitter_mode+0x638>)
 800b9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9ca:	2b80      	cmp	r3, #128	; 0x80
 800b9cc:	d0fb      	beq.n	800b9c6 <hitter_mode+0x3ae>
				svBRB
 800b9ce:	f240 3123 	movw	r1, #803	; 0x323
 800b9d2:	48a1      	ldr	r0, [pc, #644]	; (800bc58 <hitter_mode+0x640>)
 800b9d4:	f7fd f94e 	bl	8008c74 <ServoSetPulse>
			}

			if(ps4.button == RIGHT){
 800b9d8:	4b9d      	ldr	r3, [pc, #628]	; (800bc50 <hitter_mode+0x638>)
 800b9da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9dc:	2b20      	cmp	r3, #32
 800b9de:	d109      	bne.n	800b9f4 <hitter_mode+0x3dc>
				while(ps4.button == RIGHT);
 800b9e0:	bf00      	nop
 800b9e2:	4b9b      	ldr	r3, [pc, #620]	; (800bc50 <hitter_mode+0x638>)
 800b9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e6:	2b20      	cmp	r3, #32
 800b9e8:	d0fb      	beq.n	800b9e2 <hitter_mode+0x3ca>
				svBRA
 800b9ea:	f640 0134 	movw	r1, #2100	; 0x834
 800b9ee:	489a      	ldr	r0, [pc, #616]	; (800bc58 <hitter_mode+0x640>)
 800b9f0:	f7fd f940 	bl	8008c74 <ServoSetPulse>
			}

			if(ps4.joyR_y >= 0.5){
 800b9f4:	4b96      	ldr	r3, [pc, #600]	; (800bc50 <hitter_mode+0x638>)
 800b9f6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800b9fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b9fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	db0f      	blt.n	800ba28 <hitter_mode+0x410>
				while(ps4.joyR_y >= 0.5);
 800ba08:	bf00      	nop
 800ba0a:	4b91      	ldr	r3, [pc, #580]	; (800bc50 <hitter_mode+0x638>)
 800ba0c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ba10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ba14:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba1c:	daf5      	bge.n	800ba0a <hitter_mode+0x3f2>
				svBRup
 800ba1e:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ba22:	488c      	ldr	r0, [pc, #560]	; (800bc54 <hitter_mode+0x63c>)
 800ba24:	f7fd f926 	bl	8008c74 <ServoSetPulse>
			}
			if(ps4.joyR_y <= -0.5){
 800ba28:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <hitter_mode+0x638>)
 800ba2a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ba2e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ba32:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3a:	d80f      	bhi.n	800ba5c <hitter_mode+0x444>
				while(ps4.joyR_y <= -0.5);
 800ba3c:	bf00      	nop
 800ba3e:	4b84      	ldr	r3, [pc, #528]	; (800bc50 <hitter_mode+0x638>)
 800ba40:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ba44:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ba48:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba50:	d9f5      	bls.n	800ba3e <hitter_mode+0x426>
				svBallvp(1200);
 800ba52:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800ba56:	487f      	ldr	r0, [pc, #508]	; (800bc54 <hitter_mode+0x63c>)
 800ba58:	f7fd f90c 	bl	8008c74 <ServoSetPulse>
			}
			if(ps4.joyR_x >= 0.5){
 800ba5c:	4b7c      	ldr	r3, [pc, #496]	; (800bc50 <hitter_mode+0x638>)
 800ba5e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800ba62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ba66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6e:	db0f      	blt.n	800ba90 <hitter_mode+0x478>
				while(ps4.joyR_x >= 0.5);
 800ba70:	bf00      	nop
 800ba72:	4b77      	ldr	r3, [pc, #476]	; (800bc50 <hitter_mode+0x638>)
 800ba74:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800ba78:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ba7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	daf5      	bge.n	800ba72 <hitter_mode+0x45a>
				svBRAback
 800ba86:	f640 0176 	movw	r1, #2166	; 0x876
 800ba8a:	4873      	ldr	r0, [pc, #460]	; (800bc58 <hitter_mode+0x640>)
 800ba8c:	f7fd f8f2 	bl	8008c74 <ServoSetPulse>
			}
			if(ps4.joyR_x <= -0.5){
 800ba90:	4b6f      	ldr	r3, [pc, #444]	; (800bc50 <hitter_mode+0x638>)
 800ba92:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800ba96:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ba9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa2:	f200 8205 	bhi.w	800beb0 <hitter_mode+0x898>
				while(ps4.joyR_x <= -0.5);
 800baa6:	bf00      	nop
 800baa8:	4b69      	ldr	r3, [pc, #420]	; (800bc50 <hitter_mode+0x638>)
 800baaa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800baae:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800bab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baba:	d9f5      	bls.n	800baa8 <hitter_mode+0x490>
				svBRBback
 800babc:	f240 21ee 	movw	r1, #750	; 0x2ee
 800bac0:	4865      	ldr	r0, [pc, #404]	; (800bc58 <hitter_mode+0x640>)
 800bac2:	f7fd f8d7 	bl	8008c74 <ServoSetPulse>
 800bac6:	e1f3      	b.n	800beb0 <hitter_mode+0x898>
			}
		}
		else if(pp.path <= 4 && pp.task <= 4){
 800bac8:	4b60      	ldr	r3, [pc, #384]	; (800bc4c <hitter_mode+0x634>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bad0:	b2db      	uxtb	r3, r3
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	f200 81ec 	bhi.w	800beb0 <hitter_mode+0x898>
 800bad8:	4b5c      	ldr	r3, [pc, #368]	; (800bc4c <hitter_mode+0x634>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	f200 81e4 	bhi.w	800beb0 <hitter_mode+0x898>
			//auto mode
			if(rns.RNS_data.common_instruction == RNS_BUSY){
 800bae8:	4b5c      	ldr	r3, [pc, #368]	; (800bc5c <hitter_mode+0x644>)
 800baea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d105      	bne.n	800bafe <hitter_mode+0x4e6>
				led3 = 0;
 800baf2:	4a55      	ldr	r2, [pc, #340]	; (800bc48 <hitter_mode+0x630>)
 800baf4:	7853      	ldrb	r3, [r2, #1]
 800baf6:	f36f 13c7 	bfc	r3, #7, #1
 800bafa:	7053      	strb	r3, [r2, #1]
 800bafc:	e1d8      	b.n	800beb0 <hitter_mode+0x898>
			}
			else if(sys.ppstart == 1 && (rns.RNS_data.common_instruction != RNS_BUSY)){
 800bafe:	4b58      	ldr	r3, [pc, #352]	; (800bc60 <hitter_mode+0x648>)
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01f      	beq.n	800bb4c <hitter_mode+0x534>
 800bb0c:	4b53      	ldr	r3, [pc, #332]	; (800bc5c <hitter_mode+0x644>)
 800bb0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d01a      	beq.n	800bb4c <hitter_mode+0x534>
				led2 = 1;
 800bb16:	4a4c      	ldr	r2, [pc, #304]	; (800bc48 <hitter_mode+0x630>)
 800bb18:	7853      	ldrb	r3, [r2, #1]
 800bb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1e:	7053      	strb	r3, [r2, #1]
				pp.path ++;
 800bb20:	4b4a      	ldr	r3, [pc, #296]	; (800bc4c <hitter_mode+0x634>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	b2d9      	uxtb	r1, r3
 800bb32:	4a46      	ldr	r2, [pc, #280]	; (800bc4c <hitter_mode+0x634>)
 800bb34:	7813      	ldrb	r3, [r2, #0]
 800bb36:	f361 0302 	bfi	r3, r1, #0, #3
 800bb3a:	7013      	strb	r3, [r2, #0]
				pp_runpath();
 800bb3c:	f000 fa4c 	bl	800bfd8 <pp_runpath>
				sys.ppstart = 0;
 800bb40:	4a47      	ldr	r2, [pc, #284]	; (800bc60 <hitter_mode+0x648>)
 800bb42:	7813      	ldrb	r3, [r2, #0]
 800bb44:	f36f 1386 	bfc	r3, #6, #1
 800bb48:	7013      	strb	r3, [r2, #0]
 800bb4a:	e1b1      	b.n	800beb0 <hitter_mode+0x898>
			}
			else if(sys.ppend == 1 && (rns.RNS_data.common_instruction != RNS_BUSY)){
 800bb4c:	4b44      	ldr	r3, [pc, #272]	; (800bc60 <hitter_mode+0x648>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	f000 8197 	beq.w	800be8a <hitter_mode+0x872>
 800bb5c:	4b3f      	ldr	r3, [pc, #252]	; (800bc5c <hitter_mode+0x644>)
 800bb5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	f000 8191 	beq.w	800be8a <hitter_mode+0x872>
				led3 = 1;
 800bb68:	4a37      	ldr	r2, [pc, #220]	; (800bc48 <hitter_mode+0x630>)
 800bb6a:	7853      	ldrb	r3, [r2, #1]
 800bb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb70:	7053      	strb	r3, [r2, #1]
				if(pp.path == 1){
 800bb72:	4b36      	ldr	r3, [pc, #216]	; (800bc4c <hitter_mode+0x634>)
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	f003 0307 	and.w	r3, r3, #7
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	f040 809b 	bne.w	800bcb8 <hitter_mode+0x6a0>
					//stick france
					for(int i = 0; i < 2; i++){
 800bb82:	2300      	movs	r3, #0
 800bb84:	607b      	str	r3, [r7, #4]
 800bb86:	e093      	b.n	800bcb0 <hitter_mode+0x698>
						while (lsl1|| lsl2 || lsr1){
							if((!(lsl2 || lsr1)) && lsl1)
 800bb88:	2180      	movs	r1, #128	; 0x80
 800bb8a:	4836      	ldr	r0, [pc, #216]	; (800bc64 <hitter_mode+0x64c>)
 800bb8c:	f00a fdec 	bl	8016768 <HAL_GPIO_ReadPin>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d019      	beq.n	800bbca <hitter_mode+0x5b2>
 800bb96:	2120      	movs	r1, #32
 800bb98:	4833      	ldr	r0, [pc, #204]	; (800bc68 <hitter_mode+0x650>)
 800bb9a:	f00a fde5 	bl	8016768 <HAL_GPIO_ReadPin>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d012      	beq.n	800bbca <hitter_mode+0x5b2>
 800bba4:	2110      	movs	r1, #16
 800bba6:	482f      	ldr	r0, [pc, #188]	; (800bc64 <hitter_mode+0x64c>)
 800bba8:	f00a fdde 	bl	8016768 <HAL_GPIO_ReadPin>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d10b      	bne.n	800bbca <hitter_mode+0x5b2>
								RNSVelocity(0.00, 1.50, 0.00, 1.00, &rns);
 800bbb2:	482a      	ldr	r0, [pc, #168]	; (800bc5c <hitter_mode+0x644>)
 800bbb4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800bbb8:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800bc6c <hitter_mode+0x654>
 800bbbc:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800bbc0:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800bc6c <hitter_mode+0x654>
 800bbc4:	f7fb f916 	bl	8006df4 <RNSVelocity>
 800bbc8:	e02f      	b.n	800bc2a <hitter_mode+0x612>
							else if(lsl1 || lsl2)
 800bbca:	2110      	movs	r1, #16
 800bbcc:	4825      	ldr	r0, [pc, #148]	; (800bc64 <hitter_mode+0x64c>)
 800bbce:	f00a fdcb 	bl	8016768 <HAL_GPIO_ReadPin>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d006      	beq.n	800bbe6 <hitter_mode+0x5ce>
 800bbd8:	2180      	movs	r1, #128	; 0x80
 800bbda:	4822      	ldr	r0, [pc, #136]	; (800bc64 <hitter_mode+0x64c>)
 800bbdc:	f00a fdc4 	bl	8016768 <HAL_GPIO_ReadPin>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d10b      	bne.n	800bbfe <hitter_mode+0x5e6>
								RNSVelocity(0.75, 1.25, 0.75, 1.00, &rns);
 800bbe6:	481d      	ldr	r0, [pc, #116]	; (800bc5c <hitter_mode+0x644>)
 800bbe8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800bbec:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800bbf0:	eef7 0a04 	vmov.f32	s1, #116	; 0x3fa00000  1.250
 800bbf4:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800bbf8:	f7fb f8fc 	bl	8006df4 <RNSVelocity>
 800bbfc:	e015      	b.n	800bc2a <hitter_mode+0x612>
							else if(lsr1)
 800bbfe:	2120      	movs	r1, #32
 800bc00:	4819      	ldr	r0, [pc, #100]	; (800bc68 <hitter_mode+0x650>)
 800bc02:	f00a fdb1 	bl	8016768 <HAL_GPIO_ReadPin>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d10b      	bne.n	800bc24 <hitter_mode+0x60c>
								RNSVelocity(-0.75, 1.00, 1.00, -0.75, &rns);
 800bc0c:	4813      	ldr	r0, [pc, #76]	; (800bc5c <hitter_mode+0x644>)
 800bc0e:	eefe 1a08 	vmov.f32	s3, #232	; 0xbf400000 -0.750
 800bc12:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800bc16:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bc1a:	eebe 0a08 	vmov.f32	s0, #232	; 0xbf400000 -0.750
 800bc1e:	f7fb f8e9 	bl	8006df4 <RNSVelocity>
 800bc22:	e002      	b.n	800bc2a <hitter_mode+0x612>
							else{
								RNSStop(&rns);
 800bc24:	480d      	ldr	r0, [pc, #52]	; (800bc5c <hitter_mode+0x644>)
 800bc26:	f7fb f895 	bl	8006d54 <RNSStop>
							}
							if(ps4.button == CROSS){
 800bc2a:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <hitter_mode+0x638>)
 800bc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc32:	d11d      	bne.n	800bc70 <hitter_mode+0x658>
								RNSStop(&rns);
 800bc34:	4809      	ldr	r0, [pc, #36]	; (800bc5c <hitter_mode+0x644>)
 800bc36:	f7fb f88d 	bl	8006d54 <RNSStop>
								sys.auto2manual = 1;
 800bc3a:	4a09      	ldr	r2, [pc, #36]	; (800bc60 <hitter_mode+0x648>)
 800bc3c:	7813      	ldrb	r3, [r2, #0]
 800bc3e:	f043 0320 	orr.w	r3, r3, #32
 800bc42:	7013      	strb	r3, [r2, #0]
								break;
 800bc44:	e02b      	b.n	800bc9e <hitter_mode+0x686>
 800bc46:	bf00      	nop
 800bc48:	40020814 	.word	0x40020814
 800bc4c:	20007880 	.word	0x20007880
 800bc50:	2000a448 	.word	0x2000a448
 800bc54:	20009a58 	.word	0x20009a58
 800bc58:	20009bf4 	.word	0x20009bf4
 800bc5c:	200093ec 	.word	0x200093ec
 800bc60:	2000794c 	.word	0x2000794c
 800bc64:	40020c00 	.word	0x40020c00
 800bc68:	40020400 	.word	0x40020400
 800bc6c:	00000000 	.word	0x00000000
						while (lsl1|| lsl2 || lsr1){
 800bc70:	2110      	movs	r1, #16
 800bc72:	48ba      	ldr	r0, [pc, #744]	; (800bf5c <hitter_mode+0x944>)
 800bc74:	f00a fd78 	bl	8016768 <HAL_GPIO_ReadPin>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d084      	beq.n	800bb88 <hitter_mode+0x570>
 800bc7e:	2180      	movs	r1, #128	; 0x80
 800bc80:	48b6      	ldr	r0, [pc, #728]	; (800bf5c <hitter_mode+0x944>)
 800bc82:	f00a fd71 	bl	8016768 <HAL_GPIO_ReadPin>
 800bc86:	4603      	mov	r3, r0
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f43f af7d 	beq.w	800bb88 <hitter_mode+0x570>
 800bc8e:	2120      	movs	r1, #32
 800bc90:	48b3      	ldr	r0, [pc, #716]	; (800bf60 <hitter_mode+0x948>)
 800bc92:	f00a fd69 	bl	8016768 <HAL_GPIO_ReadPin>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	f43f af75 	beq.w	800bb88 <hitter_mode+0x570>
							}
						}
						Await(150);
 800bc9e:	2096      	movs	r0, #150	; 0x96
 800bca0:	f002 fe20 	bl	800e8e4 <Await>
						RNSStop(&rns);
 800bca4:	48af      	ldr	r0, [pc, #700]	; (800bf64 <hitter_mode+0x94c>)
 800bca6:	f7fb f855 	bl	8006d54 <RNSStop>
					for(int i = 0; i < 2; i++){
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	3301      	adds	r3, #1
 800bcae:	607b      	str	r3, [r7, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	dddc      	ble.n	800bc70 <hitter_mode+0x658>
 800bcb6:	e0c7      	b.n	800be48 <hitter_mode+0x830>
					}
				}
				else if(pp.path == 2 && pp.laser == 0){
 800bcb8:	4bab      	ldr	r3, [pc, #684]	; (800bf68 <hitter_mode+0x950>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	f003 0307 	and.w	r3, r3, #7
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d114      	bne.n	800bcf0 <hitter_mode+0x6d8>
 800bcc6:	4ba8      	ldr	r3, [pc, #672]	; (800bf68 <hitter_mode+0x950>)
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10d      	bne.n	800bcf0 <hitter_mode+0x6d8>
					RNSStop(&rns);
 800bcd4:	48a3      	ldr	r0, [pc, #652]	; (800bf64 <hitter_mode+0x94c>)
 800bcd6:	f7fb f83d 	bl	8006d54 <RNSStop>
					sys.auto2manual = 1;
 800bcda:	4aa4      	ldr	r2, [pc, #656]	; (800bf6c <hitter_mode+0x954>)
 800bcdc:	7813      	ldrb	r3, [r2, #0]
 800bcde:	f043 0320 	orr.w	r3, r3, #32
 800bce2:	7013      	strb	r3, [r2, #0]
					pp.cyon = 0;
 800bce4:	4aa0      	ldr	r2, [pc, #640]	; (800bf68 <hitter_mode+0x950>)
 800bce6:	7813      	ldrb	r3, [r2, #0]
 800bce8:	f36f 1386 	bfc	r3, #6, #1
 800bcec:	7013      	strb	r3, [r2, #0]
 800bcee:	e0ab      	b.n	800be48 <hitter_mode+0x830>
				}
				else if(pp.path == 3){
 800bcf0:	4b9d      	ldr	r3, [pc, #628]	; (800bf68 <hitter_mode+0x950>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	f003 0307 	and.w	r3, r3, #7
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	f040 8084 	bne.w	800be08 <hitter_mode+0x7f0>
					//stick france
					for(int i = 0; i < 3; i++){
 800bd00:	2300      	movs	r3, #0
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	e07c      	b.n	800be00 <hitter_mode+0x7e8>
						while (lsl2|| lsr1 || lsr2){
							if((!(lsl2 || lsr1)) && lsr2)
 800bd06:	2180      	movs	r1, #128	; 0x80
 800bd08:	4894      	ldr	r0, [pc, #592]	; (800bf5c <hitter_mode+0x944>)
 800bd0a:	f00a fd2d 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d019      	beq.n	800bd48 <hitter_mode+0x730>
 800bd14:	2120      	movs	r1, #32
 800bd16:	4892      	ldr	r0, [pc, #584]	; (800bf60 <hitter_mode+0x948>)
 800bd18:	f00a fd26 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d012      	beq.n	800bd48 <hitter_mode+0x730>
 800bd22:	2140      	movs	r1, #64	; 0x40
 800bd24:	488e      	ldr	r0, [pc, #568]	; (800bf60 <hitter_mode+0x948>)
 800bd26:	f00a fd1f 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d10b      	bne.n	800bd48 <hitter_mode+0x730>
								RNSVelocity(0.00, 0.00, 1.50, -1.00, &rns);
 800bd30:	488c      	ldr	r0, [pc, #560]	; (800bf64 <hitter_mode+0x94c>)
 800bd32:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800bd36:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 800bd3a:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800bf70 <hitter_mode+0x958>
 800bd3e:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 800bf70 <hitter_mode+0x958>
 800bd42:	f7fb f857 	bl	8006df4 <RNSVelocity>
 800bd46:	e02f      	b.n	800bda8 <hitter_mode+0x790>
							else if(lsr1 || lsr2)
 800bd48:	2120      	movs	r1, #32
 800bd4a:	4885      	ldr	r0, [pc, #532]	; (800bf60 <hitter_mode+0x948>)
 800bd4c:	f00a fd0c 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d006      	beq.n	800bd64 <hitter_mode+0x74c>
 800bd56:	2140      	movs	r1, #64	; 0x40
 800bd58:	4881      	ldr	r0, [pc, #516]	; (800bf60 <hitter_mode+0x948>)
 800bd5a:	f00a fd05 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d10b      	bne.n	800bd7c <hitter_mode+0x764>
								RNSVelocity(-0.75, 0.75, 2.00, -1.75, &rns);
 800bd64:	487f      	ldr	r0, [pc, #508]	; (800bf64 <hitter_mode+0x94c>)
 800bd66:	eeff 1a0c 	vmov.f32	s3, #252	; 0xbfe00000 -1.750
 800bd6a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800bd6e:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800bd72:	eebe 0a08 	vmov.f32	s0, #232	; 0xbf400000 -0.750
 800bd76:	f7fb f83d 	bl	8006df4 <RNSVelocity>
 800bd7a:	e015      	b.n	800bda8 <hitter_mode+0x790>
							else if(lsl2)
 800bd7c:	2180      	movs	r1, #128	; 0x80
 800bd7e:	4877      	ldr	r0, [pc, #476]	; (800bf5c <hitter_mode+0x944>)
 800bd80:	f00a fcf2 	bl	8016768 <HAL_GPIO_ReadPin>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d10b      	bne.n	800bda2 <hitter_mode+0x78a>
								RNSVelocity(0.75, 1.00, 1.00, 0.75, &rns);
 800bd8a:	4876      	ldr	r0, [pc, #472]	; (800bf64 <hitter_mode+0x94c>)
 800bd8c:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 800bd90:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800bd94:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800bd98:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 800bd9c:	f7fb f82a 	bl	8006df4 <RNSVelocity>
 800bda0:	e002      	b.n	800bda8 <hitter_mode+0x790>
							else{
								RNSStop(&rns);
 800bda2:	4870      	ldr	r0, [pc, #448]	; (800bf64 <hitter_mode+0x94c>)
 800bda4:	f7fa ffd6 	bl	8006d54 <RNSStop>
							}
							if(ps4.button == CROSS){
 800bda8:	4b72      	ldr	r3, [pc, #456]	; (800bf74 <hitter_mode+0x95c>)
 800bdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdb0:	d108      	bne.n	800bdc4 <hitter_mode+0x7ac>
								RNSStop(&rns);
 800bdb2:	486c      	ldr	r0, [pc, #432]	; (800bf64 <hitter_mode+0x94c>)
 800bdb4:	f7fa ffce 	bl	8006d54 <RNSStop>
								sys.auto2manual = 1;
 800bdb8:	4a6c      	ldr	r2, [pc, #432]	; (800bf6c <hitter_mode+0x954>)
 800bdba:	7813      	ldrb	r3, [r2, #0]
 800bdbc:	f043 0320 	orr.w	r3, r3, #32
 800bdc0:	7013      	strb	r3, [r2, #0]
								break;
 800bdc2:	e014      	b.n	800bdee <hitter_mode+0x7d6>
						while (lsl2|| lsr1 || lsr2){
 800bdc4:	2180      	movs	r1, #128	; 0x80
 800bdc6:	4865      	ldr	r0, [pc, #404]	; (800bf5c <hitter_mode+0x944>)
 800bdc8:	f00a fcce 	bl	8016768 <HAL_GPIO_ReadPin>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d099      	beq.n	800bd06 <hitter_mode+0x6ee>
 800bdd2:	2120      	movs	r1, #32
 800bdd4:	4862      	ldr	r0, [pc, #392]	; (800bf60 <hitter_mode+0x948>)
 800bdd6:	f00a fcc7 	bl	8016768 <HAL_GPIO_ReadPin>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d092      	beq.n	800bd06 <hitter_mode+0x6ee>
 800bde0:	2140      	movs	r1, #64	; 0x40
 800bde2:	485f      	ldr	r0, [pc, #380]	; (800bf60 <hitter_mode+0x948>)
 800bde4:	f00a fcc0 	bl	8016768 <HAL_GPIO_ReadPin>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d08b      	beq.n	800bd06 <hitter_mode+0x6ee>
							}
						}
						Await(150);
 800bdee:	2096      	movs	r0, #150	; 0x96
 800bdf0:	f002 fd78 	bl	800e8e4 <Await>
						RNSStop(&rns);
 800bdf4:	485b      	ldr	r0, [pc, #364]	; (800bf64 <hitter_mode+0x94c>)
 800bdf6:	f7fa ffad 	bl	8006d54 <RNSStop>
					for(int i = 0; i < 3; i++){
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	603b      	str	r3, [r7, #0]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	2b02      	cmp	r3, #2
 800be04:	ddde      	ble.n	800bdc4 <hitter_mode+0x7ac>
 800be06:	e01f      	b.n	800be48 <hitter_mode+0x830>
					}
				}
				else if(pp.path == 4 && pp.laser == 0){
 800be08:	4b57      	ldr	r3, [pc, #348]	; (800bf68 <hitter_mode+0x950>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	f003 0307 	and.w	r3, r3, #7
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b04      	cmp	r3, #4
 800be14:	d118      	bne.n	800be48 <hitter_mode+0x830>
 800be16:	4b54      	ldr	r3, [pc, #336]	; (800bf68 <hitter_mode+0x950>)
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d111      	bne.n	800be48 <hitter_mode+0x830>
					RNSStop(&rns);
 800be24:	484f      	ldr	r0, [pc, #316]	; (800bf64 <hitter_mode+0x94c>)
 800be26:	f7fa ff95 	bl	8006d54 <RNSStop>
					sys.auto2manual = 1;
 800be2a:	4a50      	ldr	r2, [pc, #320]	; (800bf6c <hitter_mode+0x954>)
 800be2c:	7813      	ldrb	r3, [r2, #0]
 800be2e:	f043 0320 	orr.w	r3, r3, #32
 800be32:	7013      	strb	r3, [r2, #0]
					pp.cyon = 0;
 800be34:	4a4c      	ldr	r2, [pc, #304]	; (800bf68 <hitter_mode+0x950>)
 800be36:	7813      	ldrb	r3, [r2, #0]
 800be38:	f36f 1386 	bfc	r3, #6, #1
 800be3c:	7013      	strb	r3, [r2, #0]
					pp.path = 7;
 800be3e:	4a4a      	ldr	r2, [pc, #296]	; (800bf68 <hitter_mode+0x950>)
 800be40:	7813      	ldrb	r3, [r2, #0]
 800be42:	f043 0307 	orr.w	r3, r3, #7
 800be46:	7013      	strb	r3, [r2, #0]
				}

				if(ps4.button == CROSS){
 800be48:	4b4a      	ldr	r3, [pc, #296]	; (800bf74 <hitter_mode+0x95c>)
 800be4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be50:	d105      	bne.n	800be5e <hitter_mode+0x846>
					pp.task = 7;
 800be52:	4a45      	ldr	r2, [pc, #276]	; (800bf68 <hitter_mode+0x950>)
 800be54:	7813      	ldrb	r3, [r2, #0]
 800be56:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800be5a:	7013      	strb	r3, [r2, #0]
 800be5c:	e00f      	b.n	800be7e <hitter_mode+0x866>
				}
				else{
					pp.task ++;
 800be5e:	4b42      	ldr	r3, [pc, #264]	; (800bf68 <hitter_mode+0x950>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800be66:	b2db      	uxtb	r3, r3
 800be68:	3301      	adds	r3, #1
 800be6a:	f003 0307 	and.w	r3, r3, #7
 800be6e:	b2d9      	uxtb	r1, r3
 800be70:	4a3d      	ldr	r2, [pc, #244]	; (800bf68 <hitter_mode+0x950>)
 800be72:	7813      	ldrb	r3, [r2, #0]
 800be74:	f361 03c5 	bfi	r3, r1, #3, #3
 800be78:	7013      	strb	r3, [r2, #0]
					pp_func();
 800be7a:	f000 fa4d 	bl	800c318 <pp_func>
				}
				sys.ppend = 0;
 800be7e:	4a3b      	ldr	r2, [pc, #236]	; (800bf6c <hitter_mode+0x954>)
 800be80:	7813      	ldrb	r3, [r2, #0]
 800be82:	f36f 13c7 	bfc	r3, #7, #1
 800be86:	7013      	strb	r3, [r2, #0]
 800be88:	e012      	b.n	800beb0 <hitter_mode+0x898>
			}
			else if(sys.ppend == 0 && sys.ppstart == 0){
 800be8a:	4b38      	ldr	r3, [pc, #224]	; (800bf6c <hitter_mode+0x954>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <hitter_mode+0x898>
 800be98:	4b34      	ldr	r3, [pc, #208]	; (800bf6c <hitter_mode+0x954>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d104      	bne.n	800beb0 <hitter_mode+0x898>
				led2 = 0;
 800bea6:	4a34      	ldr	r2, [pc, #208]	; (800bf78 <hitter_mode+0x960>)
 800bea8:	7853      	ldrb	r3, [r2, #1]
 800beaa:	f36f 1386 	bfc	r3, #6, #1
 800beae:	7053      	strb	r3, [r2, #1]
			}
		}

		if(pp.path == 0)
 800beb0:	4b2d      	ldr	r3, [pc, #180]	; (800bf68 <hitter_mode+0x950>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 0307 	and.w	r3, r3, #7
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d105      	bne.n	800beca <hitter_mode+0x8b2>
			exled1 = 1;
 800bebe:	4a2f      	ldr	r2, [pc, #188]	; (800bf7c <hitter_mode+0x964>)
 800bec0:	7853      	ldrb	r3, [r2, #1]
 800bec2:	f043 0302 	orr.w	r3, r3, #2
 800bec6:	7053      	strb	r3, [r2, #1]
 800bec8:	e016      	b.n	800bef8 <hitter_mode+0x8e0>
		else if(pp.path == 2)
 800beca:	4b27      	ldr	r3, [pc, #156]	; (800bf68 <hitter_mode+0x950>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	f003 0307 	and.w	r3, r3, #7
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d105      	bne.n	800bee4 <hitter_mode+0x8cc>
			exled2 = 1;
 800bed8:	4a28      	ldr	r2, [pc, #160]	; (800bf7c <hitter_mode+0x964>)
 800beda:	7853      	ldrb	r3, [r2, #1]
 800bedc:	f043 0301 	orr.w	r3, r3, #1
 800bee0:	7053      	strb	r3, [r2, #1]
 800bee2:	e009      	b.n	800bef8 <hitter_mode+0x8e0>
		else{
			exled1 = 0;
 800bee4:	4a25      	ldr	r2, [pc, #148]	; (800bf7c <hitter_mode+0x964>)
 800bee6:	7853      	ldrb	r3, [r2, #1]
 800bee8:	f36f 0341 	bfc	r3, #1, #1
 800beec:	7053      	strb	r3, [r2, #1]
			exled2 = 0;
 800beee:	4a23      	ldr	r2, [pc, #140]	; (800bf7c <hitter_mode+0x964>)
 800bef0:	7853      	ldrb	r3, [r2, #1]
 800bef2:	f36f 0300 	bfc	r3, #0, #1
 800bef6:	7053      	strb	r3, [r2, #1]
		}

		if(!(lsl1))		exled3 = 1;
 800bef8:	2110      	movs	r1, #16
 800befa:	4818      	ldr	r0, [pc, #96]	; (800bf5c <hitter_mode+0x944>)
 800befc:	f00a fc34 	bl	8016768 <HAL_GPIO_ReadPin>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d005      	beq.n	800bf12 <hitter_mode+0x8fa>
 800bf06:	4a1e      	ldr	r2, [pc, #120]	; (800bf80 <hitter_mode+0x968>)
 800bf08:	7813      	ldrb	r3, [r2, #0]
 800bf0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0e:	7013      	strb	r3, [r2, #0]
 800bf10:	e004      	b.n	800bf1c <hitter_mode+0x904>
		else			exled3 = 0;
 800bf12:	4a1b      	ldr	r2, [pc, #108]	; (800bf80 <hitter_mode+0x968>)
 800bf14:	7813      	ldrb	r3, [r2, #0]
 800bf16:	f36f 13c7 	bfc	r3, #7, #1
 800bf1a:	7013      	strb	r3, [r2, #0]
		if(!(lsl2))		exled4 = 1;
 800bf1c:	2180      	movs	r1, #128	; 0x80
 800bf1e:	480f      	ldr	r0, [pc, #60]	; (800bf5c <hitter_mode+0x944>)
 800bf20:	f00a fc22 	bl	8016768 <HAL_GPIO_ReadPin>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d005      	beq.n	800bf36 <hitter_mode+0x91e>
 800bf2a:	4a15      	ldr	r2, [pc, #84]	; (800bf80 <hitter_mode+0x968>)
 800bf2c:	7813      	ldrb	r3, [r2, #0]
 800bf2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf32:	7013      	strb	r3, [r2, #0]
 800bf34:	e004      	b.n	800bf40 <hitter_mode+0x928>
		else			exled4 = 0;
 800bf36:	4a12      	ldr	r2, [pc, #72]	; (800bf80 <hitter_mode+0x968>)
 800bf38:	7813      	ldrb	r3, [r2, #0]
 800bf3a:	f36f 1386 	bfc	r3, #6, #1
 800bf3e:	7013      	strb	r3, [r2, #0]
		if(!(lsr1))		exled5 = 1;
 800bf40:	2120      	movs	r1, #32
 800bf42:	4807      	ldr	r0, [pc, #28]	; (800bf60 <hitter_mode+0x948>)
 800bf44:	f00a fc10 	bl	8016768 <HAL_GPIO_ReadPin>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d01a      	beq.n	800bf84 <hitter_mode+0x96c>
 800bf4e:	4a0c      	ldr	r2, [pc, #48]	; (800bf80 <hitter_mode+0x968>)
 800bf50:	7813      	ldrb	r3, [r2, #0]
 800bf52:	f043 0320 	orr.w	r3, r3, #32
 800bf56:	7013      	strb	r3, [r2, #0]
 800bf58:	e019      	b.n	800bf8e <hitter_mode+0x976>
 800bf5a:	bf00      	nop
 800bf5c:	40020c00 	.word	0x40020c00
 800bf60:	40020400 	.word	0x40020400
 800bf64:	200093ec 	.word	0x200093ec
 800bf68:	20007880 	.word	0x20007880
 800bf6c:	2000794c 	.word	0x2000794c
 800bf70:	00000000 	.word	0x00000000
 800bf74:	2000a448 	.word	0x2000a448
 800bf78:	40020814 	.word	0x40020814
 800bf7c:	40020c14 	.word	0x40020c14
 800bf80:	40020014 	.word	0x40020014
		else			exled5 = 0;
 800bf84:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <hitter_mode+0x9b4>)
 800bf86:	7813      	ldrb	r3, [r2, #0]
 800bf88:	f36f 1345 	bfc	r3, #5, #1
 800bf8c:	7013      	strb	r3, [r2, #0]
		if(!(lsr2))		exled6 = 1;
 800bf8e:	2140      	movs	r1, #64	; 0x40
 800bf90:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <hitter_mode+0x9b8>)
 800bf92:	f00a fbe9 	bl	8016768 <HAL_GPIO_ReadPin>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d005      	beq.n	800bfa8 <hitter_mode+0x990>
 800bf9c:	4a0b      	ldr	r2, [pc, #44]	; (800bfcc <hitter_mode+0x9b4>)
 800bf9e:	7813      	ldrb	r3, [r2, #0]
 800bfa0:	f043 0310 	orr.w	r3, r3, #16
 800bfa4:	7013      	strb	r3, [r2, #0]
 800bfa6:	e004      	b.n	800bfb2 <hitter_mode+0x99a>
		else			exled6 = 0;
 800bfa8:	4a08      	ldr	r2, [pc, #32]	; (800bfcc <hitter_mode+0x9b4>)
 800bfaa:	7813      	ldrb	r3, [r2, #0]
 800bfac:	f36f 1304 	bfc	r3, #4, #1
 800bfb0:	7013      	strb	r3, [r2, #0]
	while(sys.manual == 0){
 800bfb2:	4b08      	ldr	r3, [pc, #32]	; (800bfd4 <hitter_mode+0x9bc>)
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f43f ab4d 	beq.w	800b65c <hitter_mode+0x44>
	}
}
 800bfc2:	bf00      	nop
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	40020014 	.word	0x40020014
 800bfd0:	40020400 	.word	0x40020400
 800bfd4:	2000794c 	.word	0x2000794c

0800bfd8 <pp_runpath>:

void pp_runpath(void){
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af06      	add	r7, sp, #24
	switch(pp.path){
 800bfde:	4bb0      	ldr	r3, [pc, #704]	; (800c2a0 <pp_runpath+0x2c8>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b04      	cmp	r3, #4
 800bfea:	f200 8141 	bhi.w	800c270 <pp_runpath+0x298>
 800bfee:	a201      	add	r2, pc, #4	; (adr r2, 800bff4 <pp_runpath+0x1c>)
 800bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff4:	0800c009 	.word	0x0800c009
 800bff8:	0800c011 	.word	0x0800c011
 800bffc:	0800c091 	.word	0x0800c091
 800c000:	0800c139 	.word	0x0800c139
 800c004:	0800c1d1 	.word	0x0800c1d1
	case 0:
		RNSStop(&rns);
 800c008:	48a6      	ldr	r0, [pc, #664]	; (800c2a4 <pp_runpath+0x2cc>)
 800c00a:	f7fa fea3 	bl	8006d54 <RNSStop>
		break;
 800c00e:	e135      	b.n	800c27c <pp_runpath+0x2a4>
	case 1:
		svBRup
 800c010:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c014:	48a4      	ldr	r0, [pc, #656]	; (800c2a8 <pp_runpath+0x2d0>)
 800c016:	f7fc fe2d 	bl	8008c74 <ServoSetPulse>
		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800c01a:	f04f 0200 	mov.w	r2, #0
 800c01e:	4ba3      	ldr	r3, [pc, #652]	; (800c2ac <pp_runpath+0x2d4>)
 800c020:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c024:	a39a      	add	r3, pc, #616	; (adr r3, 800c290 <pp_runpath+0x2b8>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c02e:	f04f 0200 	mov.w	r2, #0
 800c032:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c036:	e9cd 2300 	strd	r2, r3, [sp]
 800c03a:	a397      	add	r3, pc, #604	; (adr r3, 800c298 <pp_runpath+0x2c0>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	2145      	movs	r1, #69	; 0x45
 800c042:	4898      	ldr	r0, [pc, #608]	; (800c2a4 <pp_runpath+0x2cc>)
 800c044:	f7fb f8b4 	bl	80071b0 <RNSSet>
//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(ToBallRackA, 3, point1, point2, point3);
 800c048:	4b99      	ldr	r3, [pc, #612]	; (800c2b0 <pp_runpath+0x2d8>)
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	4b99      	ldr	r3, [pc, #612]	; (800c2b4 <pp_runpath+0x2dc>)
 800c04e:	4a9a      	ldr	r2, [pc, #616]	; (800c2b8 <pp_runpath+0x2e0>)
 800c050:	2103      	movs	r1, #3
 800c052:	489a      	ldr	r0, [pc, #616]	; (800c2bc <pp_runpath+0x2e4>)
 800c054:	f7fc ff64 	bl	8008f20 <registerPath>
		RNSPPstart(ToBallRackA, 3, &rns);
 800c058:	4a92      	ldr	r2, [pc, #584]	; (800c2a4 <pp_runpath+0x2cc>)
 800c05a:	2103      	movs	r1, #3
 800c05c:	4897      	ldr	r0, [pc, #604]	; (800c2bc <pp_runpath+0x2e4>)
 800c05e:	f7fa ff0e 	bl	8006e7e <RNSPPstart>
		svBRAback
 800c062:	f640 0176 	movw	r1, #2166	; 0x876
 800c066:	4896      	ldr	r0, [pc, #600]	; (800c2c0 <pp_runpath+0x2e8>)
 800c068:	f7fc fe04 	bl	8008c74 <ServoSetPulse>
		Await(4500);
 800c06c:	f241 1094 	movw	r0, #4500	; 0x1194
 800c070:	f002 fc38 	bl	800e8e4 <Await>
		svBallvp(1200);
 800c074:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800c078:	488b      	ldr	r0, [pc, #556]	; (800c2a8 <pp_runpath+0x2d0>)
 800c07a:	f7fc fdfb 	bl	8008c74 <ServoSetPulse>
		BgripON
 800c07e:	4a91      	ldr	r2, [pc, #580]	; (800c2c4 <pp_runpath+0x2ec>)
 800c080:	7853      	ldrb	r3, [r2, #1]
 800c082:	f043 0301 	orr.w	r3, r3, #1
 800c086:	7053      	strb	r3, [r2, #1]
//		svBRA
		point8[3] = 90.0;
 800c088:	4b8f      	ldr	r3, [pc, #572]	; (800c2c8 <pp_runpath+0x2f0>)
 800c08a:	4a90      	ldr	r2, [pc, #576]	; (800c2cc <pp_runpath+0x2f4>)
 800c08c:	60da      	str	r2, [r3, #12]
		break;
 800c08e:	e0f5      	b.n	800c27c <pp_runpath+0x2a4>
	case 2:
		svBRAback
 800c090:	f640 0176 	movw	r1, #2166	; 0x876
 800c094:	488a      	ldr	r0, [pc, #552]	; (800c2c0 <pp_runpath+0x2e8>)
 800c096:	f7fc fded 	bl	8008c74 <ServoSetPulse>
		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800c09a:	f04f 0200 	mov.w	r2, #0
 800c09e:	4b83      	ldr	r3, [pc, #524]	; (800c2ac <pp_runpath+0x2d4>)
 800c0a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0a4:	a37a      	add	r3, pc, #488	; (adr r3, 800c290 <pp_runpath+0x2b8>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0b6:	e9cd 2300 	strd	r2, r3, [sp]
 800c0ba:	a377      	add	r3, pc, #476	; (adr r3, 800c298 <pp_runpath+0x2c0>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	2145      	movs	r1, #69	; 0x45
 800c0c2:	4878      	ldr	r0, [pc, #480]	; (800c2a4 <pp_runpath+0x2cc>)
 800c0c4:	f7fb f874 	bl	80071b0 <RNSSet>
		//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
//		registerPath(BackToR1A, 4, point5, point6, point7, point8);
//		RNSPPstart(BackToR1A, 4, &rns);
		registerPath(BackToR1A, 4, point5, point6, point7,point8);
 800c0c8:	4b7f      	ldr	r3, [pc, #508]	; (800c2c8 <pp_runpath+0x2f0>)
 800c0ca:	9301      	str	r3, [sp, #4]
 800c0cc:	4b80      	ldr	r3, [pc, #512]	; (800c2d0 <pp_runpath+0x2f8>)
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	4b80      	ldr	r3, [pc, #512]	; (800c2d4 <pp_runpath+0x2fc>)
 800c0d2:	4a81      	ldr	r2, [pc, #516]	; (800c2d8 <pp_runpath+0x300>)
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	4881      	ldr	r0, [pc, #516]	; (800c2dc <pp_runpath+0x304>)
 800c0d8:	f7fc ff22 	bl	8008f20 <registerPath>
		RNSPPstart(BackToR1A, 4, &rns);
 800c0dc:	4a71      	ldr	r2, [pc, #452]	; (800c2a4 <pp_runpath+0x2cc>)
 800c0de:	2104      	movs	r1, #4
 800c0e0:	487e      	ldr	r0, [pc, #504]	; (800c2dc <pp_runpath+0x304>)
 800c0e2:	f7fa fecc 	bl	8006e7e <RNSPPstart>
		while(SERVO_BallV.currentPulse > svbvrealu_pulse + 150){
 800c0e6:	e007      	b.n	800c0f8 <pp_runpath+0x120>
			ServoMovePulse(&SERVO_BallV, -6);
 800c0e8:	f06f 0105 	mvn.w	r1, #5
 800c0ec:	486e      	ldr	r0, [pc, #440]	; (800c2a8 <pp_runpath+0x2d0>)
 800c0ee:	f7fc fe1c 	bl	8008d2a <ServoMovePulse>
			Await(3);
 800c0f2:	2003      	movs	r0, #3
 800c0f4:	f002 fbf6 	bl	800e8e4 <Await>
		while(SERVO_BallV.currentPulse > svbvrealu_pulse + 150){
 800c0f8:	4b6b      	ldr	r3, [pc, #428]	; (800c2a8 <pp_runpath+0x2d0>)
 800c0fa:	6a1b      	ldr	r3, [r3, #32]
 800c0fc:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800c100:	d2f2      	bcs.n	800c0e8 <pp_runpath+0x110>
		}
		svBRup
 800c102:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c106:	4868      	ldr	r0, [pc, #416]	; (800c2a8 <pp_runpath+0x2d0>)
 800c108:	f7fc fdb4 	bl	8008c74 <ServoSetPulse>
		svBRA
 800c10c:	f640 0134 	movw	r1, #2100	; 0x834
 800c110:	486b      	ldr	r0, [pc, #428]	; (800c2c0 <pp_runpath+0x2e8>)
 800c112:	f7fc fdaf 	bl	8008c74 <ServoSetPulse>
		Await(2000);
 800c116:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c11a:	f002 fbe3 	bl	800e8e4 <Await>
		svBRrealup
 800c11e:	f240 11a9 	movw	r1, #425	; 0x1a9
 800c122:	4861      	ldr	r0, [pc, #388]	; (800c2a8 <pp_runpath+0x2d0>)
 800c124:	f7fc fda6 	bl	8008c74 <ServoSetPulse>
		laserdir = 0;
 800c128:	4b6d      	ldr	r3, [pc, #436]	; (800c2e0 <pp_runpath+0x308>)
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	601a      	str	r2, [r3, #0]
		z_tar = 90.0;
 800c130:	4b6c      	ldr	r3, [pc, #432]	; (800c2e4 <pp_runpath+0x30c>)
 800c132:	4a66      	ldr	r2, [pc, #408]	; (800c2cc <pp_runpath+0x2f4>)
 800c134:	601a      	str	r2, [r3, #0]
//		pp.laser = 1;
		break;
 800c136:	e0a1      	b.n	800c27c <pp_runpath+0x2a4>
	case 3:
		svBRup
 800c138:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c13c:	485a      	ldr	r0, [pc, #360]	; (800c2a8 <pp_runpath+0x2d0>)
 800c13e:	f7fc fd99 	bl	8008c74 <ServoSetPulse>
		svBRB
 800c142:	f240 3123 	movw	r1, #803	; 0x323
 800c146:	485e      	ldr	r0, [pc, #376]	; (800c2c0 <pp_runpath+0x2e8>)
 800c148:	f7fc fd94 	bl	8008c74 <ServoSetPulse>
		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800c14c:	f04f 0200 	mov.w	r2, #0
 800c150:	4b56      	ldr	r3, [pc, #344]	; (800c2ac <pp_runpath+0x2d4>)
 800c152:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c156:	a34e      	add	r3, pc, #312	; (adr r3, 800c290 <pp_runpath+0x2b8>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c168:	e9cd 2300 	strd	r2, r3, [sp]
 800c16c:	a34a      	add	r3, pc, #296	; (adr r3, 800c298 <pp_runpath+0x2c0>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	2145      	movs	r1, #69	; 0x45
 800c174:	484b      	ldr	r0, [pc, #300]	; (800c2a4 <pp_runpath+0x2cc>)
 800c176:	f7fb f81b 	bl	80071b0 <RNSSet>
//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(ToBallRackB, 3, point9, point10, point11);
 800c17a:	4b5b      	ldr	r3, [pc, #364]	; (800c2e8 <pp_runpath+0x310>)
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	4b5b      	ldr	r3, [pc, #364]	; (800c2ec <pp_runpath+0x314>)
 800c180:	4a5b      	ldr	r2, [pc, #364]	; (800c2f0 <pp_runpath+0x318>)
 800c182:	2103      	movs	r1, #3
 800c184:	485b      	ldr	r0, [pc, #364]	; (800c2f4 <pp_runpath+0x31c>)
 800c186:	f7fc fecb 	bl	8008f20 <registerPath>
		RNSPPstart(ToBallRackB, 3, &rns);
 800c18a:	4a46      	ldr	r2, [pc, #280]	; (800c2a4 <pp_runpath+0x2cc>)
 800c18c:	2103      	movs	r1, #3
 800c18e:	4859      	ldr	r0, [pc, #356]	; (800c2f4 <pp_runpath+0x31c>)
 800c190:	f7fa fe75 	bl	8006e7e <RNSPPstart>
		BgripOFF
 800c194:	4a4b      	ldr	r2, [pc, #300]	; (800c2c4 <pp_runpath+0x2ec>)
 800c196:	7853      	ldrb	r3, [r2, #1]
 800c198:	f36f 0300 	bfc	r3, #0, #1
 800c19c:	7053      	strb	r3, [r2, #1]
		Await(4500);
 800c19e:	f241 1094 	movw	r0, #4500	; 0x1194
 800c1a2:	f002 fb9f 	bl	800e8e4 <Await>
		svBallvp(1200);
 800c1a6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800c1aa:	483f      	ldr	r0, [pc, #252]	; (800c2a8 <pp_runpath+0x2d0>)
 800c1ac:	f7fc fd62 	bl	8008c74 <ServoSetPulse>
		BgripON
 800c1b0:	4a44      	ldr	r2, [pc, #272]	; (800c2c4 <pp_runpath+0x2ec>)
 800c1b2:	7853      	ldrb	r3, [r2, #1]
 800c1b4:	f043 0301 	orr.w	r3, r3, #1
 800c1b8:	7053      	strb	r3, [r2, #1]
		point8[1] = 0.385;
 800c1ba:	4b43      	ldr	r3, [pc, #268]	; (800c2c8 <pp_runpath+0x2f0>)
 800c1bc:	4a4e      	ldr	r2, [pc, #312]	; (800c2f8 <pp_runpath+0x320>)
 800c1be:	605a      	str	r2, [r3, #4]
		point8[2] = 0.74;
 800c1c0:	4b41      	ldr	r3, [pc, #260]	; (800c2c8 <pp_runpath+0x2f0>)
 800c1c2:	4a4e      	ldr	r2, [pc, #312]	; (800c2fc <pp_runpath+0x324>)
 800c1c4:	609a      	str	r2, [r3, #8]
		point8[3] = 0.0;
 800c1c6:	4b40      	ldr	r3, [pc, #256]	; (800c2c8 <pp_runpath+0x2f0>)
 800c1c8:	f04f 0200 	mov.w	r2, #0
 800c1cc:	60da      	str	r2, [r3, #12]
		break;
 800c1ce:	e055      	b.n	800c27c <pp_runpath+0x2a4>
	case 4:
//		svBRBback
		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800c1d0:	f04f 0200 	mov.w	r2, #0
 800c1d4:	4b35      	ldr	r3, [pc, #212]	; (800c2ac <pp_runpath+0x2d4>)
 800c1d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1da:	a32d      	add	r3, pc, #180	; (adr r3, 800c290 <pp_runpath+0x2b8>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1ec:	e9cd 2300 	strd	r2, r3, [sp]
 800c1f0:	a329      	add	r3, pc, #164	; (adr r3, 800c298 <pp_runpath+0x2c0>)
 800c1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f6:	2145      	movs	r1, #69	; 0x45
 800c1f8:	482a      	ldr	r0, [pc, #168]	; (800c2a4 <pp_runpath+0x2cc>)
 800c1fa:	f7fa ffd9 	bl	80071b0 <RNSSet>
//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
//		registerPath(BackToR1B, 3, point12, point4, point13);
//		RNSPPstart(BackToR1B, 3, &rns);
		registerPath(BackToR1B, 4, point14, point12, point4, point13);
 800c1fe:	4b40      	ldr	r3, [pc, #256]	; (800c300 <pp_runpath+0x328>)
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	4b40      	ldr	r3, [pc, #256]	; (800c304 <pp_runpath+0x32c>)
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4b40      	ldr	r3, [pc, #256]	; (800c308 <pp_runpath+0x330>)
 800c208:	4a40      	ldr	r2, [pc, #256]	; (800c30c <pp_runpath+0x334>)
 800c20a:	2104      	movs	r1, #4
 800c20c:	4840      	ldr	r0, [pc, #256]	; (800c310 <pp_runpath+0x338>)
 800c20e:	f7fc fe87 	bl	8008f20 <registerPath>
		RNSPPstart(BackToR1B, 4, &rns);
 800c212:	4a24      	ldr	r2, [pc, #144]	; (800c2a4 <pp_runpath+0x2cc>)
 800c214:	2104      	movs	r1, #4
 800c216:	483e      	ldr	r0, [pc, #248]	; (800c310 <pp_runpath+0x338>)
 800c218:	f7fa fe31 	bl	8006e7e <RNSPPstart>
		while(SERVO_BallV.currentPulse > svbvrealu_pulse + 150){
 800c21c:	e007      	b.n	800c22e <pp_runpath+0x256>
			ServoMovePulse(&SERVO_BallV, -6);
 800c21e:	f06f 0105 	mvn.w	r1, #5
 800c222:	4821      	ldr	r0, [pc, #132]	; (800c2a8 <pp_runpath+0x2d0>)
 800c224:	f7fc fd81 	bl	8008d2a <ServoMovePulse>
			Await(3);
 800c228:	2003      	movs	r0, #3
 800c22a:	f002 fb5b 	bl	800e8e4 <Await>
		while(SERVO_BallV.currentPulse > svbvrealu_pulse + 150){
 800c22e:	4b1e      	ldr	r3, [pc, #120]	; (800c2a8 <pp_runpath+0x2d0>)
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800c236:	d2f2      	bcs.n	800c21e <pp_runpath+0x246>
		}
		svBRB
 800c238:	f240 3123 	movw	r1, #803	; 0x323
 800c23c:	4820      	ldr	r0, [pc, #128]	; (800c2c0 <pp_runpath+0x2e8>)
 800c23e:	f7fc fd19 	bl	8008c74 <ServoSetPulse>
		svBRup
 800c242:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c246:	4818      	ldr	r0, [pc, #96]	; (800c2a8 <pp_runpath+0x2d0>)
 800c248:	f7fc fd14 	bl	8008c74 <ServoSetPulse>
		Await(3000);
 800c24c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c250:	f002 fb48 	bl	800e8e4 <Await>
		svBRrealup
 800c254:	f240 11a9 	movw	r1, #425	; 0x1a9
 800c258:	4813      	ldr	r0, [pc, #76]	; (800c2a8 <pp_runpath+0x2d0>)
 800c25a:	f7fc fd0b 	bl	8008c74 <ServoSetPulse>
		laserdir = 0;
 800c25e:	4b20      	ldr	r3, [pc, #128]	; (800c2e0 <pp_runpath+0x308>)
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
		z_tar = 0.0;
 800c266:	4b1f      	ldr	r3, [pc, #124]	; (800c2e4 <pp_runpath+0x30c>)
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	601a      	str	r2, [r3, #0]
//		pp.laser = 1;
		break;
 800c26e:	e005      	b.n	800c27c <pp_runpath+0x2a4>
	default:
		pp.path = 0;
 800c270:	4a0b      	ldr	r2, [pc, #44]	; (800c2a0 <pp_runpath+0x2c8>)
 800c272:	7813      	ldrb	r3, [r2, #0]
 800c274:	f36f 0302 	bfc	r3, #0, #3
 800c278:	7013      	strb	r3, [r2, #0]
		break;
 800c27a:	bf00      	nop
	}
	sys.ppend = 1;
 800c27c:	4a25      	ldr	r2, [pc, #148]	; (800c314 <pp_runpath+0x33c>)
 800c27e:	7813      	ldrb	r3, [r2, #0]
 800c280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c284:	7013      	strb	r3, [r2, #0]
}
 800c286:	bf00      	nop
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	f3af 8000 	nop.w
 800c290:	9999999a 	.word	0x9999999a
 800c294:	3fa99999 	.word	0x3fa99999
 800c298:	9999999a 	.word	0x9999999a
 800c29c:	3fb99999 	.word	0x3fb99999
 800c2a0:	20007880 	.word	0x20007880
 800c2a4:	200093ec 	.word	0x200093ec
 800c2a8:	20009a58 	.word	0x20009a58
 800c2ac:	3ff00000 	.word	0x3ff00000
 800c2b0:	2000a00c 	.word	0x2000a00c
 800c2b4:	20007690 	.word	0x20007690
 800c2b8:	20009dd8 	.word	0x20009dd8
 800c2bc:	20007950 	.word	0x20007950
 800c2c0:	20009bf4 	.word	0x20009bf4
 800c2c4:	40020814 	.word	0x40020814
 800c2c8:	20009bcc 	.word	0x20009bcc
 800c2cc:	42b40000 	.word	0x42b40000
 800c2d0:	200071a8 	.word	0x200071a8
 800c2d4:	20007bb8 	.word	0x20007bb8
 800c2d8:	2000aa08 	.word	0x2000aa08
 800c2dc:	20009994 	.word	0x20009994
 800c2e0:	20009b80 	.word	0x20009b80
 800c2e4:	20007684 	.word	0x20007684
 800c2e8:	20007544 	.word	0x20007544
 800c2ec:	20009a7c 	.word	0x20009a7c
 800c2f0:	20007254 	.word	0x20007254
 800c2f4:	20009e7c 	.word	0x20009e7c
 800c2f8:	3ec51eb8 	.word	0x3ec51eb8
 800c2fc:	3f3d70a4 	.word	0x3f3d70a4
 800c300:	20009c68 	.word	0x20009c68
 800c304:	20009468 	.word	0x20009468
 800c308:	20007930 	.word	0x20007930
 800c30c:	2000a85c 	.word	0x2000a85c
 800c310:	2000ab84 	.word	0x2000ab84
 800c314:	2000794c 	.word	0x2000794c

0800c318 <pp_func>:

void pp_func(void){
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
	switch(pp.task){
 800c31c:	4b2f      	ldr	r3, [pc, #188]	; (800c3dc <pp_func+0xc4>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b01      	cmp	r3, #1
 800c328:	d002      	beq.n	800c330 <pp_func+0x18>
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d027      	beq.n	800c37e <pp_func+0x66>
		BgripOFF;
		Await(700);
		svBallvp(2000)
		break;
	default:
		break;
 800c32e:	e04d      	b.n	800c3cc <pp_func+0xb4>
		svBRA
 800c330:	f640 0134 	movw	r1, #2100	; 0x834
 800c334:	482a      	ldr	r0, [pc, #168]	; (800c3e0 <pp_func+0xc8>)
 800c336:	f7fc fc9d 	bl	8008c74 <ServoSetPulse>
		svBRup
 800c33a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c33e:	4829      	ldr	r0, [pc, #164]	; (800c3e4 <pp_func+0xcc>)
 800c340:	f7fc fc98 	bl	8008c74 <ServoSetPulse>
		BgripON
 800c344:	4a28      	ldr	r2, [pc, #160]	; (800c3e8 <pp_func+0xd0>)
 800c346:	7853      	ldrb	r3, [r2, #1]
 800c348:	f043 0301 	orr.w	r3, r3, #1
 800c34c:	7053      	strb	r3, [r2, #1]
		svBRdown
 800c34e:	f640 11f6 	movw	r1, #2550	; 0x9f6
 800c352:	4824      	ldr	r0, [pc, #144]	; (800c3e4 <pp_func+0xcc>)
 800c354:	f7fc fc8e 	bl	8008c74 <ServoSetPulse>
		Await(550);
 800c358:	f240 2026 	movw	r0, #550	; 0x226
 800c35c:	f002 fac2 	bl	800e8e4 <Await>
		BgripOFF
 800c360:	4a21      	ldr	r2, [pc, #132]	; (800c3e8 <pp_func+0xd0>)
 800c362:	7853      	ldrb	r3, [r2, #1]
 800c364:	f36f 0300 	bfc	r3, #0, #1
 800c368:	7053      	strb	r3, [r2, #1]
		Await(550);
 800c36a:	f240 2026 	movw	r0, #550	; 0x226
 800c36e:	f002 fab9 	bl	800e8e4 <Await>
		svBallvp(2000)
 800c372:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c376:	481b      	ldr	r0, [pc, #108]	; (800c3e4 <pp_func+0xcc>)
 800c378:	f7fc fc7c 	bl	8008c74 <ServoSetPulse>
		break;
 800c37c:	e026      	b.n	800c3cc <pp_func+0xb4>
		svBRB
 800c37e:	f240 3123 	movw	r1, #803	; 0x323
 800c382:	4817      	ldr	r0, [pc, #92]	; (800c3e0 <pp_func+0xc8>)
 800c384:	f7fc fc76 	bl	8008c74 <ServoSetPulse>
		svBRup
 800c388:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c38c:	4815      	ldr	r0, [pc, #84]	; (800c3e4 <pp_func+0xcc>)
 800c38e:	f7fc fc71 	bl	8008c74 <ServoSetPulse>
		BgripON
 800c392:	4a15      	ldr	r2, [pc, #84]	; (800c3e8 <pp_func+0xd0>)
 800c394:	7853      	ldrb	r3, [r2, #1]
 800c396:	f043 0301 	orr.w	r3, r3, #1
 800c39a:	7053      	strb	r3, [r2, #1]
		svBRdown
 800c39c:	f640 11f6 	movw	r1, #2550	; 0x9f6
 800c3a0:	4810      	ldr	r0, [pc, #64]	; (800c3e4 <pp_func+0xcc>)
 800c3a2:	f7fc fc67 	bl	8008c74 <ServoSetPulse>
		Await(700);
 800c3a6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800c3aa:	f002 fa9b 	bl	800e8e4 <Await>
		BgripOFF;
 800c3ae:	4a0e      	ldr	r2, [pc, #56]	; (800c3e8 <pp_func+0xd0>)
 800c3b0:	7853      	ldrb	r3, [r2, #1]
 800c3b2:	f36f 0300 	bfc	r3, #0, #1
 800c3b6:	7053      	strb	r3, [r2, #1]
		Await(700);
 800c3b8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800c3bc:	f002 fa92 	bl	800e8e4 <Await>
		svBallvp(2000)
 800c3c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c3c4:	4807      	ldr	r0, [pc, #28]	; (800c3e4 <pp_func+0xcc>)
 800c3c6:	f7fc fc55 	bl	8008c74 <ServoSetPulse>
		break;
 800c3ca:	bf00      	nop
	}
	sys.ppstart = 1;
 800c3cc:	4a07      	ldr	r2, [pc, #28]	; (800c3ec <pp_func+0xd4>)
 800c3ce:	7813      	ldrb	r3, [r2, #0]
 800c3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d4:	7013      	strb	r3, [r2, #0]
}
 800c3d6:	bf00      	nop
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20007880 	.word	0x20007880
 800c3e0:	20009bf4 	.word	0x20009bf4
 800c3e4:	20009a58 	.word	0x20009a58
 800c3e8:	40020814 	.word	0x40020814
 800c3ec:	2000794c 	.word	0x2000794c

0800c3f0 <setPP_points>:

void setPP_points(void){
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0

	//to back rack A
	point1[0] = 7.6;
 800c3f4:	4b90      	ldr	r3, [pc, #576]	; (800c638 <setPP_points+0x248>)
 800c3f6:	4a91      	ldr	r2, [pc, #580]	; (800c63c <setPP_points+0x24c>)
 800c3f8:	601a      	str	r2, [r3, #0]
	point1[1] = 3.8500;
 800c3fa:	4b8f      	ldr	r3, [pc, #572]	; (800c638 <setPP_points+0x248>)
 800c3fc:	4a90      	ldr	r2, [pc, #576]	; (800c640 <setPP_points+0x250>)
 800c3fe:	605a      	str	r2, [r3, #4]
	point1[2] = 0.600;
 800c400:	4b8d      	ldr	r3, [pc, #564]	; (800c638 <setPP_points+0x248>)
 800c402:	4a90      	ldr	r2, [pc, #576]	; (800c644 <setPP_points+0x254>)
 800c404:	609a      	str	r2, [r3, #8]
	point1[3] = 90.00;
 800c406:	4b8c      	ldr	r3, [pc, #560]	; (800c638 <setPP_points+0x248>)
 800c408:	4a8f      	ldr	r2, [pc, #572]	; (800c648 <setPP_points+0x258>)
 800c40a:	60da      	str	r2, [r3, #12]
	point1[4] = 0.0;
 800c40c:	4b8a      	ldr	r3, [pc, #552]	; (800c638 <setPP_points+0x248>)
 800c40e:	f04f 0200 	mov.w	r2, #0
 800c412:	611a      	str	r2, [r3, #16]

	point2[0] = 5.0;
 800c414:	4b8d      	ldr	r3, [pc, #564]	; (800c64c <setPP_points+0x25c>)
 800c416:	4a8e      	ldr	r2, [pc, #568]	; (800c650 <setPP_points+0x260>)
 800c418:	601a      	str	r2, [r3, #0]
	point2[1] = 5.20;
 800c41a:	4b8c      	ldr	r3, [pc, #560]	; (800c64c <setPP_points+0x25c>)
 800c41c:	4a8d      	ldr	r2, [pc, #564]	; (800c654 <setPP_points+0x264>)
 800c41e:	605a      	str	r2, [r3, #4]
	point2[2] = 3.100;
 800c420:	4b8a      	ldr	r3, [pc, #552]	; (800c64c <setPP_points+0x25c>)
 800c422:	4a8d      	ldr	r2, [pc, #564]	; (800c658 <setPP_points+0x268>)
 800c424:	609a      	str	r2, [r3, #8]
	point2[3] = 90.00;
 800c426:	4b89      	ldr	r3, [pc, #548]	; (800c64c <setPP_points+0x25c>)
 800c428:	4a87      	ldr	r2, [pc, #540]	; (800c648 <setPP_points+0x258>)
 800c42a:	60da      	str	r2, [r3, #12]
	point2[4] = 0.0;
 800c42c:	4b87      	ldr	r3, [pc, #540]	; (800c64c <setPP_points+0x25c>)
 800c42e:	f04f 0200 	mov.w	r2, #0
 800c432:	611a      	str	r2, [r3, #16]

	point3[0] = 2.6;
 800c434:	4b89      	ldr	r3, [pc, #548]	; (800c65c <setPP_points+0x26c>)
 800c436:	4a8a      	ldr	r2, [pc, #552]	; (800c660 <setPP_points+0x270>)
 800c438:	601a      	str	r2, [r3, #0]
	point3[1] = 5.33;
 800c43a:	4b88      	ldr	r3, [pc, #544]	; (800c65c <setPP_points+0x26c>)
 800c43c:	4a89      	ldr	r2, [pc, #548]	; (800c664 <setPP_points+0x274>)
 800c43e:	605a      	str	r2, [r3, #4]
	point3[2] = 4.150;
 800c440:	4b86      	ldr	r3, [pc, #536]	; (800c65c <setPP_points+0x26c>)
 800c442:	4a89      	ldr	r2, [pc, #548]	; (800c668 <setPP_points+0x278>)
 800c444:	609a      	str	r2, [r3, #8]
	point3[3] = 90.00;
 800c446:	4b85      	ldr	r3, [pc, #532]	; (800c65c <setPP_points+0x26c>)
 800c448:	4a7f      	ldr	r2, [pc, #508]	; (800c648 <setPP_points+0x258>)
 800c44a:	60da      	str	r2, [r3, #12]
	point3[4] = 0.0;
 800c44c:	4b83      	ldr	r3, [pc, #524]	; (800c65c <setPP_points+0x26c>)
 800c44e:	f04f 0200 	mov.w	r2, #0
 800c452:	611a      	str	r2, [r3, #16]

	//Back to R1

	point5[0] = 7.5;
 800c454:	4b85      	ldr	r3, [pc, #532]	; (800c66c <setPP_points+0x27c>)
 800c456:	4a86      	ldr	r2, [pc, #536]	; (800c670 <setPP_points+0x280>)
 800c458:	601a      	str	r2, [r3, #0]
	point5[1] = 5.200;
 800c45a:	4b84      	ldr	r3, [pc, #528]	; (800c66c <setPP_points+0x27c>)
 800c45c:	4a7d      	ldr	r2, [pc, #500]	; (800c654 <setPP_points+0x264>)
 800c45e:	605a      	str	r2, [r3, #4]
	point5[2] = 1.45;
 800c460:	4b82      	ldr	r3, [pc, #520]	; (800c66c <setPP_points+0x27c>)
 800c462:	4a84      	ldr	r2, [pc, #528]	; (800c674 <setPP_points+0x284>)
 800c464:	609a      	str	r2, [r3, #8]
	point5[3] = 90.00;
 800c466:	4b81      	ldr	r3, [pc, #516]	; (800c66c <setPP_points+0x27c>)
 800c468:	4a77      	ldr	r2, [pc, #476]	; (800c648 <setPP_points+0x258>)
 800c46a:	60da      	str	r2, [r3, #12]
	point5[4] = 6.0;
 800c46c:	4b7f      	ldr	r3, [pc, #508]	; (800c66c <setPP_points+0x27c>)
 800c46e:	4a82      	ldr	r2, [pc, #520]	; (800c678 <setPP_points+0x288>)
 800c470:	611a      	str	r2, [r3, #16]

	point6[0] = 7.5;
 800c472:	4b82      	ldr	r3, [pc, #520]	; (800c67c <setPP_points+0x28c>)
 800c474:	4a7e      	ldr	r2, [pc, #504]	; (800c670 <setPP_points+0x280>)
 800c476:	601a      	str	r2, [r3, #0]
	point6[1] = 1.70;
 800c478:	4b80      	ldr	r3, [pc, #512]	; (800c67c <setPP_points+0x28c>)
 800c47a:	4a81      	ldr	r2, [pc, #516]	; (800c680 <setPP_points+0x290>)
 800c47c:	605a      	str	r2, [r3, #4]
	point6[2] = 0.60;
 800c47e:	4b7f      	ldr	r3, [pc, #508]	; (800c67c <setPP_points+0x28c>)
 800c480:	4a70      	ldr	r2, [pc, #448]	; (800c644 <setPP_points+0x254>)
 800c482:	609a      	str	r2, [r3, #8]
	point6[3] = 90.00;
 800c484:	4b7d      	ldr	r3, [pc, #500]	; (800c67c <setPP_points+0x28c>)
 800c486:	4a70      	ldr	r2, [pc, #448]	; (800c648 <setPP_points+0x258>)
 800c488:	60da      	str	r2, [r3, #12]
	point6[4] = 0.0;
 800c48a:	4b7c      	ldr	r3, [pc, #496]	; (800c67c <setPP_points+0x28c>)
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	611a      	str	r2, [r3, #16]

	point7[0] = 3.3;
 800c492:	4b7c      	ldr	r3, [pc, #496]	; (800c684 <setPP_points+0x294>)
 800c494:	4a7c      	ldr	r2, [pc, #496]	; (800c688 <setPP_points+0x298>)
 800c496:	601a      	str	r2, [r3, #0]
	point7[1] = 0.325;
 800c498:	4b7a      	ldr	r3, [pc, #488]	; (800c684 <setPP_points+0x294>)
 800c49a:	4a7c      	ldr	r2, [pc, #496]	; (800c68c <setPP_points+0x29c>)
 800c49c:	605a      	str	r2, [r3, #4]
	point7[2] = 0.520;
 800c49e:	4b79      	ldr	r3, [pc, #484]	; (800c684 <setPP_points+0x294>)
 800c4a0:	4a7b      	ldr	r2, [pc, #492]	; (800c690 <setPP_points+0x2a0>)
 800c4a2:	609a      	str	r2, [r3, #8]
	point7[3] = 90.00;
 800c4a4:	4b77      	ldr	r3, [pc, #476]	; (800c684 <setPP_points+0x294>)
 800c4a6:	4a68      	ldr	r2, [pc, #416]	; (800c648 <setPP_points+0x258>)
 800c4a8:	60da      	str	r2, [r3, #12]
	point7[4] = 0.0;
 800c4aa:	4b76      	ldr	r3, [pc, #472]	; (800c684 <setPP_points+0x294>)
 800c4ac:	f04f 0200 	mov.w	r2, #0
 800c4b0:	611a      	str	r2, [r3, #16]
//-0.175, 0.6
	point8[0] = 2.5;
 800c4b2:	4b78      	ldr	r3, [pc, #480]	; (800c694 <setPP_points+0x2a4>)
 800c4b4:	4a78      	ldr	r2, [pc, #480]	; (800c698 <setPP_points+0x2a8>)
 800c4b6:	601a      	str	r2, [r3, #0]
	point8[1] = 0.125;
 800c4b8:	4b76      	ldr	r3, [pc, #472]	; (800c694 <setPP_points+0x2a4>)
 800c4ba:	f04f 5278 	mov.w	r2, #1040187392	; 0x3e000000
 800c4be:	605a      	str	r2, [r3, #4]
	point8[2] = 0.685;
 800c4c0:	4b74      	ldr	r3, [pc, #464]	; (800c694 <setPP_points+0x2a4>)
 800c4c2:	4a76      	ldr	r2, [pc, #472]	; (800c69c <setPP_points+0x2ac>)
 800c4c4:	609a      	str	r2, [r3, #8]
	point8[3] = 90.00;
 800c4c6:	4b73      	ldr	r3, [pc, #460]	; (800c694 <setPP_points+0x2a4>)
 800c4c8:	4a5f      	ldr	r2, [pc, #380]	; (800c648 <setPP_points+0x258>)
 800c4ca:	60da      	str	r2, [r3, #12]
	point8[4] = 0.0;
 800c4cc:	4b71      	ldr	r3, [pc, #452]	; (800c694 <setPP_points+0x2a4>)
 800c4ce:	f04f 0200 	mov.w	r2, #0
 800c4d2:	611a      	str	r2, [r3, #16]

	//to ball rack B

	point9[0] = 5.8;
 800c4d4:	4b72      	ldr	r3, [pc, #456]	; (800c6a0 <setPP_points+0x2b0>)
 800c4d6:	4a73      	ldr	r2, [pc, #460]	; (800c6a4 <setPP_points+0x2b4>)
 800c4d8:	601a      	str	r2, [r3, #0]
	point9[1] = -4.15;
 800c4da:	4b71      	ldr	r3, [pc, #452]	; (800c6a0 <setPP_points+0x2b0>)
 800c4dc:	4a72      	ldr	r2, [pc, #456]	; (800c6a8 <setPP_points+0x2b8>)
 800c4de:	605a      	str	r2, [r3, #4]
	point9[2] = 0.7;
 800c4e0:	4b6f      	ldr	r3, [pc, #444]	; (800c6a0 <setPP_points+0x2b0>)
 800c4e2:	4a72      	ldr	r2, [pc, #456]	; (800c6ac <setPP_points+0x2bc>)
 800c4e4:	609a      	str	r2, [r3, #8]
	point9[3] = 0;
 800c4e6:	4b6e      	ldr	r3, [pc, #440]	; (800c6a0 <setPP_points+0x2b0>)
 800c4e8:	f04f 0200 	mov.w	r2, #0
 800c4ec:	60da      	str	r2, [r3, #12]
	point9[4] = 0;
 800c4ee:	4b6c      	ldr	r3, [pc, #432]	; (800c6a0 <setPP_points+0x2b0>)
 800c4f0:	f04f 0200 	mov.w	r2, #0
 800c4f4:	611a      	str	r2, [r3, #16]
	point9[5] = 0;
 800c4f6:	4b6a      	ldr	r3, [pc, #424]	; (800c6a0 <setPP_points+0x2b0>)
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	615a      	str	r2, [r3, #20]
	point9[6] = 0;
 800c4fe:	4b68      	ldr	r3, [pc, #416]	; (800c6a0 <setPP_points+0x2b0>)
 800c500:	f04f 0200 	mov.w	r2, #0
 800c504:	619a      	str	r2, [r3, #24]

	point10[0] = 5.5;
 800c506:	4b6a      	ldr	r3, [pc, #424]	; (800c6b0 <setPP_points+0x2c0>)
 800c508:	4a6a      	ldr	r2, [pc, #424]	; (800c6b4 <setPP_points+0x2c4>)
 800c50a:	601a      	str	r2, [r3, #0]
	point10[1] = -5.2;
 800c50c:	4b68      	ldr	r3, [pc, #416]	; (800c6b0 <setPP_points+0x2c0>)
 800c50e:	4a6a      	ldr	r2, [pc, #424]	; (800c6b8 <setPP_points+0x2c8>)
 800c510:	605a      	str	r2, [r3, #4]
	point10[2] = 3.7;
 800c512:	4b67      	ldr	r3, [pc, #412]	; (800c6b0 <setPP_points+0x2c0>)
 800c514:	4a69      	ldr	r2, [pc, #420]	; (800c6bc <setPP_points+0x2cc>)
 800c516:	609a      	str	r2, [r3, #8]
	point10[3] = 0;
 800c518:	4b65      	ldr	r3, [pc, #404]	; (800c6b0 <setPP_points+0x2c0>)
 800c51a:	f04f 0200 	mov.w	r2, #0
 800c51e:	60da      	str	r2, [r3, #12]
	point10[4] = 0;
 800c520:	4b63      	ldr	r3, [pc, #396]	; (800c6b0 <setPP_points+0x2c0>)
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	611a      	str	r2, [r3, #16]
	point10[5] = 0;
 800c528:	4b61      	ldr	r3, [pc, #388]	; (800c6b0 <setPP_points+0x2c0>)
 800c52a:	f04f 0200 	mov.w	r2, #0
 800c52e:	615a      	str	r2, [r3, #20]
	point10[6] = 0;
 800c530:	4b5f      	ldr	r3, [pc, #380]	; (800c6b0 <setPP_points+0x2c0>)
 800c532:	f04f 0200 	mov.w	r2, #0
 800c536:	619a      	str	r2, [r3, #24]

	point11[0] = 2.6;
 800c538:	4b61      	ldr	r3, [pc, #388]	; (800c6c0 <setPP_points+0x2d0>)
 800c53a:	4a49      	ldr	r2, [pc, #292]	; (800c660 <setPP_points+0x270>)
 800c53c:	601a      	str	r2, [r3, #0]
	point11[1] = -5.50;
 800c53e:	4b60      	ldr	r3, [pc, #384]	; (800c6c0 <setPP_points+0x2d0>)
 800c540:	4a60      	ldr	r2, [pc, #384]	; (800c6c4 <setPP_points+0x2d4>)
 800c542:	605a      	str	r2, [r3, #4]
	point11[2] = 4.30;
 800c544:	4b5e      	ldr	r3, [pc, #376]	; (800c6c0 <setPP_points+0x2d0>)
 800c546:	4a60      	ldr	r2, [pc, #384]	; (800c6c8 <setPP_points+0x2d8>)
 800c548:	609a      	str	r2, [r3, #8]
	point11[3] = 0;
 800c54a:	4b5d      	ldr	r3, [pc, #372]	; (800c6c0 <setPP_points+0x2d0>)
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	60da      	str	r2, [r3, #12]
	point11[4] = 0;
 800c552:	4b5b      	ldr	r3, [pc, #364]	; (800c6c0 <setPP_points+0x2d0>)
 800c554:	f04f 0200 	mov.w	r2, #0
 800c558:	611a      	str	r2, [r3, #16]
	point11[5] = 0;
 800c55a:	4b59      	ldr	r3, [pc, #356]	; (800c6c0 <setPP_points+0x2d0>)
 800c55c:	f04f 0200 	mov.w	r2, #0
 800c560:	615a      	str	r2, [r3, #20]
	point11[6] = 0;
 800c562:	4b57      	ldr	r3, [pc, #348]	; (800c6c0 <setPP_points+0x2d0>)
 800c564:	f04f 0200 	mov.w	r2, #0
 800c568:	619a      	str	r2, [r3, #24]


	//back to R1
	point14[0] = 3.3;
 800c56a:	4b58      	ldr	r3, [pc, #352]	; (800c6cc <setPP_points+0x2dc>)
 800c56c:	4a46      	ldr	r2, [pc, #280]	; (800c688 <setPP_points+0x298>)
 800c56e:	601a      	str	r2, [r3, #0]
	point14[1] = -5.35;
 800c570:	4b56      	ldr	r3, [pc, #344]	; (800c6cc <setPP_points+0x2dc>)
 800c572:	4a57      	ldr	r2, [pc, #348]	; (800c6d0 <setPP_points+0x2e0>)
 800c574:	605a      	str	r2, [r3, #4]
	point14[2] = 4.3;
 800c576:	4b55      	ldr	r3, [pc, #340]	; (800c6cc <setPP_points+0x2dc>)
 800c578:	4a53      	ldr	r2, [pc, #332]	; (800c6c8 <setPP_points+0x2d8>)
 800c57a:	609a      	str	r2, [r3, #8]
	point14[3] = 0;
 800c57c:	4b53      	ldr	r3, [pc, #332]	; (800c6cc <setPP_points+0x2dc>)
 800c57e:	f04f 0200 	mov.w	r2, #0
 800c582:	60da      	str	r2, [r3, #12]
	point14[4] = 0;
 800c584:	4b51      	ldr	r3, [pc, #324]	; (800c6cc <setPP_points+0x2dc>)
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	611a      	str	r2, [r3, #16]
	point14[5] = 0;
 800c58c:	4b4f      	ldr	r3, [pc, #316]	; (800c6cc <setPP_points+0x2dc>)
 800c58e:	f04f 0200 	mov.w	r2, #0
 800c592:	615a      	str	r2, [r3, #20]
	point14[6] = 0;
 800c594:	4b4d      	ldr	r3, [pc, #308]	; (800c6cc <setPP_points+0x2dc>)
 800c596:	f04f 0200 	mov.w	r2, #0
 800c59a:	619a      	str	r2, [r3, #24]

	point12[0] = 6.0;
 800c59c:	4b4d      	ldr	r3, [pc, #308]	; (800c6d4 <setPP_points+0x2e4>)
 800c59e:	4a36      	ldr	r2, [pc, #216]	; (800c678 <setPP_points+0x288>)
 800c5a0:	601a      	str	r2, [r3, #0]
	point12[1] = -5.20;
 800c5a2:	4b4c      	ldr	r3, [pc, #304]	; (800c6d4 <setPP_points+0x2e4>)
 800c5a4:	4a44      	ldr	r2, [pc, #272]	; (800c6b8 <setPP_points+0x2c8>)
 800c5a6:	605a      	str	r2, [r3, #4]
	point12[2] = 1.65;
 800c5a8:	4b4a      	ldr	r3, [pc, #296]	; (800c6d4 <setPP_points+0x2e4>)
 800c5aa:	4a4b      	ldr	r2, [pc, #300]	; (800c6d8 <setPP_points+0x2e8>)
 800c5ac:	609a      	str	r2, [r3, #8]
	point12[3] = 0;
 800c5ae:	4b49      	ldr	r3, [pc, #292]	; (800c6d4 <setPP_points+0x2e4>)
 800c5b0:	f04f 0200 	mov.w	r2, #0
 800c5b4:	60da      	str	r2, [r3, #12]
	point12[4] = 0;
 800c5b6:	4b47      	ldr	r3, [pc, #284]	; (800c6d4 <setPP_points+0x2e4>)
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	611a      	str	r2, [r3, #16]
	point12[5] = 0;
 800c5be:	4b45      	ldr	r3, [pc, #276]	; (800c6d4 <setPP_points+0x2e4>)
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	615a      	str	r2, [r3, #20]
	point12[6] = 0;
 800c5c6:	4b43      	ldr	r3, [pc, #268]	; (800c6d4 <setPP_points+0x2e4>)
 800c5c8:	f04f 0200 	mov.w	r2, #0
 800c5cc:	619a      	str	r2, [r3, #24]

	point4[0] = 4.5;
 800c5ce:	4b43      	ldr	r3, [pc, #268]	; (800c6dc <setPP_points+0x2ec>)
 800c5d0:	4a43      	ldr	r2, [pc, #268]	; (800c6e0 <setPP_points+0x2f0>)
 800c5d2:	601a      	str	r2, [r3, #0]
	point4[1] = -3.0;
 800c5d4:	4b41      	ldr	r3, [pc, #260]	; (800c6dc <setPP_points+0x2ec>)
 800c5d6:	4a43      	ldr	r2, [pc, #268]	; (800c6e4 <setPP_points+0x2f4>)
 800c5d8:	605a      	str	r2, [r3, #4]
	point4[2] = 0.55;
 800c5da:	4b40      	ldr	r3, [pc, #256]	; (800c6dc <setPP_points+0x2ec>)
 800c5dc:	4a42      	ldr	r2, [pc, #264]	; (800c6e8 <setPP_points+0x2f8>)
 800c5de:	609a      	str	r2, [r3, #8]
	point4[3] = 0;
 800c5e0:	4b3e      	ldr	r3, [pc, #248]	; (800c6dc <setPP_points+0x2ec>)
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	60da      	str	r2, [r3, #12]
	point4[4] = 0;
 800c5e8:	4b3c      	ldr	r3, [pc, #240]	; (800c6dc <setPP_points+0x2ec>)
 800c5ea:	f04f 0200 	mov.w	r2, #0
 800c5ee:	611a      	str	r2, [r3, #16]
	point4[5] = 0;
 800c5f0:	4b3a      	ldr	r3, [pc, #232]	; (800c6dc <setPP_points+0x2ec>)
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	615a      	str	r2, [r3, #20]
	point4[6] = 0;
 800c5f8:	4b38      	ldr	r3, [pc, #224]	; (800c6dc <setPP_points+0x2ec>)
 800c5fa:	f04f 0200 	mov.w	r2, #0
 800c5fe:	619a      	str	r2, [r3, #24]

	point13[0] = 3.9;
 800c600:	4b3a      	ldr	r3, [pc, #232]	; (800c6ec <setPP_points+0x2fc>)
 800c602:	4a3b      	ldr	r2, [pc, #236]	; (800c6f0 <setPP_points+0x300>)
 800c604:	601a      	str	r2, [r3, #0]
	point13[1] = -0.175;
 800c606:	4b39      	ldr	r3, [pc, #228]	; (800c6ec <setPP_points+0x2fc>)
 800c608:	4a3a      	ldr	r2, [pc, #232]	; (800c6f4 <setPP_points+0x304>)
 800c60a:	605a      	str	r2, [r3, #4]
	point13[2] = 0.25;
 800c60c:	4b37      	ldr	r3, [pc, #220]	; (800c6ec <setPP_points+0x2fc>)
 800c60e:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800c612:	609a      	str	r2, [r3, #8]
	point13[3] = 0;
 800c614:	4b35      	ldr	r3, [pc, #212]	; (800c6ec <setPP_points+0x2fc>)
 800c616:	f04f 0200 	mov.w	r2, #0
 800c61a:	60da      	str	r2, [r3, #12]
	point13[4] = 0;
 800c61c:	4b33      	ldr	r3, [pc, #204]	; (800c6ec <setPP_points+0x2fc>)
 800c61e:	f04f 0200 	mov.w	r2, #0
 800c622:	611a      	str	r2, [r3, #16]
	point13[5] = 0;
 800c624:	4b31      	ldr	r3, [pc, #196]	; (800c6ec <setPP_points+0x2fc>)
 800c626:	f04f 0200 	mov.w	r2, #0
 800c62a:	615a      	str	r2, [r3, #20]
	point13[6] = 0;
 800c62c:	4b2f      	ldr	r3, [pc, #188]	; (800c6ec <setPP_points+0x2fc>)
 800c62e:	f04f 0200 	mov.w	r2, #0
 800c632:	619a      	str	r2, [r3, #24]


	//lagori base
	pLNE[0] = 7.2;
 800c634:	4b30      	ldr	r3, [pc, #192]	; (800c6f8 <setPP_points+0x308>)
 800c636:	e061      	b.n	800c6fc <setPP_points+0x30c>
 800c638:	20009dd8 	.word	0x20009dd8
 800c63c:	40f33333 	.word	0x40f33333
 800c640:	40766666 	.word	0x40766666
 800c644:	3f19999a 	.word	0x3f19999a
 800c648:	42b40000 	.word	0x42b40000
 800c64c:	20007690 	.word	0x20007690
 800c650:	40a00000 	.word	0x40a00000
 800c654:	40a66666 	.word	0x40a66666
 800c658:	40466666 	.word	0x40466666
 800c65c:	2000a00c 	.word	0x2000a00c
 800c660:	40266666 	.word	0x40266666
 800c664:	40aa8f5c 	.word	0x40aa8f5c
 800c668:	4084cccd 	.word	0x4084cccd
 800c66c:	2000aa08 	.word	0x2000aa08
 800c670:	40f00000 	.word	0x40f00000
 800c674:	3fb9999a 	.word	0x3fb9999a
 800c678:	40c00000 	.word	0x40c00000
 800c67c:	20007bb8 	.word	0x20007bb8
 800c680:	3fd9999a 	.word	0x3fd9999a
 800c684:	200071a8 	.word	0x200071a8
 800c688:	40533333 	.word	0x40533333
 800c68c:	3ea66666 	.word	0x3ea66666
 800c690:	3f051eb8 	.word	0x3f051eb8
 800c694:	20009bcc 	.word	0x20009bcc
 800c698:	40200000 	.word	0x40200000
 800c69c:	3f2f5c29 	.word	0x3f2f5c29
 800c6a0:	20007254 	.word	0x20007254
 800c6a4:	40b9999a 	.word	0x40b9999a
 800c6a8:	c084cccd 	.word	0xc084cccd
 800c6ac:	3f333333 	.word	0x3f333333
 800c6b0:	20009a7c 	.word	0x20009a7c
 800c6b4:	40b00000 	.word	0x40b00000
 800c6b8:	c0a66666 	.word	0xc0a66666
 800c6bc:	406ccccd 	.word	0x406ccccd
 800c6c0:	20007544 	.word	0x20007544
 800c6c4:	c0b00000 	.word	0xc0b00000
 800c6c8:	4089999a 	.word	0x4089999a
 800c6cc:	2000a85c 	.word	0x2000a85c
 800c6d0:	c0ab3333 	.word	0xc0ab3333
 800c6d4:	20007930 	.word	0x20007930
 800c6d8:	3fd33333 	.word	0x3fd33333
 800c6dc:	20009468 	.word	0x20009468
 800c6e0:	40900000 	.word	0x40900000
 800c6e4:	c0400000 	.word	0xc0400000
 800c6e8:	3f0ccccd 	.word	0x3f0ccccd
 800c6ec:	20009c68 	.word	0x20009c68
 800c6f0:	4079999a 	.word	0x4079999a
 800c6f4:	be333333 	.word	0xbe333333
 800c6f8:	2000aa6c 	.word	0x2000aa6c
 800c6fc:	4a24      	ldr	r2, [pc, #144]	; (800c790 <setPP_points+0x3a0>)
 800c6fe:	601a      	str	r2, [r3, #0]
	pLNE[1] = 1.25;
 800c700:	4b24      	ldr	r3, [pc, #144]	; (800c794 <setPP_points+0x3a4>)
 800c702:	4a25      	ldr	r2, [pc, #148]	; (800c798 <setPP_points+0x3a8>)
 800c704:	605a      	str	r2, [r3, #4]
	pLNE[2] = 5.33;
 800c706:	4b23      	ldr	r3, [pc, #140]	; (800c794 <setPP_points+0x3a4>)
 800c708:	4a24      	ldr	r2, [pc, #144]	; (800c79c <setPP_points+0x3ac>)
 800c70a:	609a      	str	r2, [r3, #8]
	pLNE[3] = 0.0;
 800c70c:	4b21      	ldr	r3, [pc, #132]	; (800c794 <setPP_points+0x3a4>)
 800c70e:	f04f 0200 	mov.w	r2, #0
 800c712:	60da      	str	r2, [r3, #12]
	pLNE[4] = 0.0;
 800c714:	4b1f      	ldr	r3, [pc, #124]	; (800c794 <setPP_points+0x3a4>)
 800c716:	f04f 0200 	mov.w	r2, #0
 800c71a:	611a      	str	r2, [r3, #16]

	pLNW[0] = 7.2;
 800c71c:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <setPP_points+0x3b0>)
 800c71e:	4a1c      	ldr	r2, [pc, #112]	; (800c790 <setPP_points+0x3a0>)
 800c720:	601a      	str	r2, [r3, #0]
	pLNW[1] = -1.25;
 800c722:	4b1f      	ldr	r3, [pc, #124]	; (800c7a0 <setPP_points+0x3b0>)
 800c724:	4a1f      	ldr	r2, [pc, #124]	; (800c7a4 <setPP_points+0x3b4>)
 800c726:	605a      	str	r2, [r3, #4]
	pLNW[2] = 5.33;
 800c728:	4b1d      	ldr	r3, [pc, #116]	; (800c7a0 <setPP_points+0x3b0>)
 800c72a:	4a1c      	ldr	r2, [pc, #112]	; (800c79c <setPP_points+0x3ac>)
 800c72c:	609a      	str	r2, [r3, #8]
	pLNW[3] = 0.0;
 800c72e:	4b1c      	ldr	r3, [pc, #112]	; (800c7a0 <setPP_points+0x3b0>)
 800c730:	f04f 0200 	mov.w	r2, #0
 800c734:	60da      	str	r2, [r3, #12]
	pLNW[4] = 0.0;
 800c736:	4b1a      	ldr	r3, [pc, #104]	; (800c7a0 <setPP_points+0x3b0>)
 800c738:	f04f 0200 	mov.w	r2, #0
 800c73c:	611a      	str	r2, [r3, #16]

	pLSE[0] = 4.2;
 800c73e:	4b1a      	ldr	r3, [pc, #104]	; (800c7a8 <setPP_points+0x3b8>)
 800c740:	4a1a      	ldr	r2, [pc, #104]	; (800c7ac <setPP_points+0x3bc>)
 800c742:	601a      	str	r2, [r3, #0]
	pLSE[1] = 1.33;
 800c744:	4b18      	ldr	r3, [pc, #96]	; (800c7a8 <setPP_points+0x3b8>)
 800c746:	4a1a      	ldr	r2, [pc, #104]	; (800c7b0 <setPP_points+0x3c0>)
 800c748:	605a      	str	r2, [r3, #4]
	pLSE[2] = 0.5;
 800c74a:	4b17      	ldr	r3, [pc, #92]	; (800c7a8 <setPP_points+0x3b8>)
 800c74c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c750:	609a      	str	r2, [r3, #8]
	pLSE[3] = 0.0;
 800c752:	4b15      	ldr	r3, [pc, #84]	; (800c7a8 <setPP_points+0x3b8>)
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	60da      	str	r2, [r3, #12]
	pLSE[4] = 0.0;
 800c75a:	4b13      	ldr	r3, [pc, #76]	; (800c7a8 <setPP_points+0x3b8>)
 800c75c:	f04f 0200 	mov.w	r2, #0
 800c760:	611a      	str	r2, [r3, #16]

	pLSW[0] = 4.2;
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <setPP_points+0x3c4>)
 800c764:	4a11      	ldr	r2, [pc, #68]	; (800c7ac <setPP_points+0x3bc>)
 800c766:	601a      	str	r2, [r3, #0]
	pLSW[1] = -1.33;
 800c768:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <setPP_points+0x3c4>)
 800c76a:	4a13      	ldr	r2, [pc, #76]	; (800c7b8 <setPP_points+0x3c8>)
 800c76c:	605a      	str	r2, [r3, #4]
	pLSW[2] = 0.5;
 800c76e:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <setPP_points+0x3c4>)
 800c770:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800c774:	609a      	str	r2, [r3, #8]
	pLSW[3] = 0.0;
 800c776:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <setPP_points+0x3c4>)
 800c778:	f04f 0200 	mov.w	r2, #0
 800c77c:	60da      	str	r2, [r3, #12]
	pLSW[4] = 0.0;
 800c77e:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <setPP_points+0x3c4>)
 800c780:	f04f 0200 	mov.w	r2, #0
 800c784:	611a      	str	r2, [r3, #16]
}
 800c786:	bf00      	nop
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	40e66666 	.word	0x40e66666
 800c794:	2000aa6c 	.word	0x2000aa6c
 800c798:	3fa00000 	.word	0x3fa00000
 800c79c:	40aa8f5c 	.word	0x40aa8f5c
 800c7a0:	2000790c 	.word	0x2000790c
 800c7a4:	bfa00000 	.word	0xbfa00000
 800c7a8:	200096e8 	.word	0x200096e8
 800c7ac:	40866666 	.word	0x40866666
 800c7b0:	3faa3d71 	.word	0x3faa3d71
 800c7b4:	20009a38 	.word	0x20009a38
 800c7b8:	bfaa3d71 	.word	0xbfaa3d71

0800c7bc <button>:

void button(void){
 800c7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7c0:	b08a      	sub	sp, #40	; 0x28
 800c7c2:	af06      	add	r7, sp, #24
	int pulseH = 1000, pulseV = 500, pulseF1 = 1000, pulseF2 = 1000;;
 800c7c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c7c8:	60fb      	str	r3, [r7, #12]
 800c7ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c7ce:	60bb      	str	r3, [r7, #8]
 800c7d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c7d4:	607b      	str	r3, [r7, #4]
 800c7d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c7da:	603b      	str	r3, [r7, #0]
	if(ps4.button == CROSS){
 800c7dc:	4b9c      	ldr	r3, [pc, #624]	; (800ca50 <button+0x294>)
 800c7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7e4:	f040 80f3 	bne.w	800c9ce <button+0x212>
		counter = 0;
 800c7e8:	4b9a      	ldr	r3, [pc, #616]	; (800ca54 <button+0x298>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	601a      	str	r2, [r3, #0]
		press ++;
 800c7ee:	4b9a      	ldr	r3, [pc, #616]	; (800ca58 <button+0x29c>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	4a98      	ldr	r2, [pc, #608]	; (800ca58 <button+0x29c>)
 800c7f6:	6013      	str	r3, [r2, #0]
		led3 = 0;
 800c7f8:	4a98      	ldr	r2, [pc, #608]	; (800ca5c <button+0x2a0>)
 800c7fa:	7853      	ldrb	r3, [r2, #1]
 800c7fc:	f36f 13c7 	bfc	r3, #7, #1
 800c800:	7053      	strb	r3, [r2, #1]
		while(ps4.button == CROSS){
 800c802:	e01c      	b.n	800c83e <button+0x82>
			//for long push button 1
			if(counter >= 2000){
 800c804:	4b93      	ldr	r3, [pc, #588]	; (800ca54 <button+0x298>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c80c:	db17      	blt.n	800c83e <button+0x82>
				led2 = !led2;
 800c80e:	4b93      	ldr	r3, [pc, #588]	; (800ca5c <button+0x2a0>)
 800c810:	785b      	ldrb	r3, [r3, #1]
 800c812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c816:	b2db      	uxtb	r3, r3
 800c818:	4a90      	ldr	r2, [pc, #576]	; (800ca5c <button+0x2a0>)
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	bf0c      	ite	eq
 800c81e:	2301      	moveq	r3, #1
 800c820:	2300      	movne	r3, #0
 800c822:	b2d9      	uxtb	r1, r3
 800c824:	7853      	ldrb	r3, [r2, #1]
 800c826:	f361 1386 	bfi	r3, r1, #6, #1
 800c82a:	7053      	strb	r3, [r2, #1]
				press= 0;
 800c82c:	4b8a      	ldr	r3, [pc, #552]	; (800ca58 <button+0x29c>)
 800c82e:	2200      	movs	r2, #0
 800c830:	601a      	str	r2, [r3, #0]
				while(ps4.button == CROSS);
 800c832:	bf00      	nop
 800c834:	4b86      	ldr	r3, [pc, #536]	; (800ca50 <button+0x294>)
 800c836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c83c:	d0fa      	beq.n	800c834 <button+0x78>
		while(ps4.button == CROSS){
 800c83e:	4b84      	ldr	r3, [pc, #528]	; (800ca50 <button+0x294>)
 800c840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c846:	d0dd      	beq.n	800c804 <button+0x48>
			}
		}
		led3 = 1;
 800c848:	4a84      	ldr	r2, [pc, #528]	; (800ca5c <button+0x2a0>)
 800c84a:	7853      	ldrb	r3, [r2, #1]
 800c84c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c850:	7053      	strb	r3, [r2, #1]
		switch (press){
 800c852:	4b81      	ldr	r3, [pc, #516]	; (800ca58 <button+0x29c>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	3b01      	subs	r3, #1
 800c858:	2b06      	cmp	r3, #6
 800c85a:	f200 80b4 	bhi.w	800c9c6 <button+0x20a>
 800c85e:	a201      	add	r2, pc, #4	; (adr r2, 800c864 <button+0xa8>)
 800c860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c864:	0800c881 	.word	0x0800c881
 800c868:	0800c8af 	.word	0x0800c8af
 800c86c:	0800c8dd 	.word	0x0800c8dd
 800c870:	0800c90b 	.word	0x0800c90b
 800c874:	0800c939 	.word	0x0800c939
 800c878:	0800c94b 	.word	0x0800c94b
 800c87c:	0800c989 	.word	0x0800c989
		case 1:
			sprintf(data, "get servo pulse of verticle ball(joyR_y)\n");
 800c880:	4977      	ldr	r1, [pc, #476]	; (800ca60 <button+0x2a4>)
 800c882:	4878      	ldr	r0, [pc, #480]	; (800ca64 <button+0x2a8>)
 800c884:	f013 fa3c 	bl	801fd00 <siprintf>
			UARTSend
 800c888:	4976      	ldr	r1, [pc, #472]	; (800ca64 <button+0x2a8>)
 800c88a:	4877      	ldr	r0, [pc, #476]	; (800ca68 <button+0x2ac>)
 800c88c:	f7f7 f8f0 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c890:	2032      	movs	r0, #50	; 0x32
 800c892:	f002 f827 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE to record pulses\n\n");
 800c896:	4975      	ldr	r1, [pc, #468]	; (800ca6c <button+0x2b0>)
 800c898:	4872      	ldr	r0, [pc, #456]	; (800ca64 <button+0x2a8>)
 800c89a:	f013 fa31 	bl	801fd00 <siprintf>
			UARTSend
 800c89e:	4971      	ldr	r1, [pc, #452]	; (800ca64 <button+0x2a8>)
 800c8a0:	4871      	ldr	r0, [pc, #452]	; (800ca68 <button+0x2ac>)
 800c8a2:	f7f7 f8e5 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c8a6:	2032      	movs	r0, #50	; 0x32
 800c8a8:	f002 f81c 	bl	800e8e4 <Await>
			break;
 800c8ac:	e090      	b.n	800c9d0 <button+0x214>
		case 2:
			sprintf(data, "get servo pulse of horizontal ball(joyR_y)\n");
 800c8ae:	4970      	ldr	r1, [pc, #448]	; (800ca70 <button+0x2b4>)
 800c8b0:	486c      	ldr	r0, [pc, #432]	; (800ca64 <button+0x2a8>)
 800c8b2:	f013 fa25 	bl	801fd00 <siprintf>
			UARTSend
 800c8b6:	496b      	ldr	r1, [pc, #428]	; (800ca64 <button+0x2a8>)
 800c8b8:	486b      	ldr	r0, [pc, #428]	; (800ca68 <button+0x2ac>)
 800c8ba:	f7f7 f8d9 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c8be:	2032      	movs	r0, #50	; 0x32
 800c8c0:	f002 f810 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE to record pulses\n\n");
 800c8c4:	4969      	ldr	r1, [pc, #420]	; (800ca6c <button+0x2b0>)
 800c8c6:	4867      	ldr	r0, [pc, #412]	; (800ca64 <button+0x2a8>)
 800c8c8:	f013 fa1a 	bl	801fd00 <siprintf>
			UARTSend
 800c8cc:	4965      	ldr	r1, [pc, #404]	; (800ca64 <button+0x2a8>)
 800c8ce:	4866      	ldr	r0, [pc, #408]	; (800ca68 <button+0x2ac>)
 800c8d0:	f7f7 f8ce 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c8d4:	2032      	movs	r0, #50	; 0x32
 800c8d6:	f002 f805 	bl	800e8e4 <Await>
			break;
 800c8da:	e079      	b.n	800c9d0 <button+0x214>
		case 3:
			sprintf(data, "get servo pulse of lagori flip(joyR_y)\n");
 800c8dc:	4965      	ldr	r1, [pc, #404]	; (800ca74 <button+0x2b8>)
 800c8de:	4861      	ldr	r0, [pc, #388]	; (800ca64 <button+0x2a8>)
 800c8e0:	f013 fa0e 	bl	801fd00 <siprintf>
			UARTSend
 800c8e4:	495f      	ldr	r1, [pc, #380]	; (800ca64 <button+0x2a8>)
 800c8e6:	4860      	ldr	r0, [pc, #384]	; (800ca68 <button+0x2ac>)
 800c8e8:	f7f7 f8c2 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c8ec:	2032      	movs	r0, #50	; 0x32
 800c8ee:	f001 fff9 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800c8f2:	4961      	ldr	r1, [pc, #388]	; (800ca78 <button+0x2bc>)
 800c8f4:	485b      	ldr	r0, [pc, #364]	; (800ca64 <button+0x2a8>)
 800c8f6:	f013 fa03 	bl	801fd00 <siprintf>
			UARTSend
 800c8fa:	495a      	ldr	r1, [pc, #360]	; (800ca64 <button+0x2a8>)
 800c8fc:	485a      	ldr	r0, [pc, #360]	; (800ca68 <button+0x2ac>)
 800c8fe:	f7f7 f8b7 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c902:	2032      	movs	r0, #50	; 0x32
 800c904:	f001 ffee 	bl	800e8e4 <Await>
			break;
 800c908:	e062      	b.n	800c9d0 <button+0x214>
		case 4:
			sprintf(data, "get servo pulse of lagori flip(joyR_y)\n");
 800c90a:	495a      	ldr	r1, [pc, #360]	; (800ca74 <button+0x2b8>)
 800c90c:	4855      	ldr	r0, [pc, #340]	; (800ca64 <button+0x2a8>)
 800c90e:	f013 f9f7 	bl	801fd00 <siprintf>
			UARTSend
 800c912:	4954      	ldr	r1, [pc, #336]	; (800ca64 <button+0x2a8>)
 800c914:	4854      	ldr	r0, [pc, #336]	; (800ca68 <button+0x2ac>)
 800c916:	f7f7 f8ab 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c91a:	2032      	movs	r0, #50	; 0x32
 800c91c:	f001 ffe2 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800c920:	4955      	ldr	r1, [pc, #340]	; (800ca78 <button+0x2bc>)
 800c922:	4850      	ldr	r0, [pc, #320]	; (800ca64 <button+0x2a8>)
 800c924:	f013 f9ec 	bl	801fd00 <siprintf>
			UARTSend
 800c928:	494e      	ldr	r1, [pc, #312]	; (800ca64 <button+0x2a8>)
 800c92a:	484f      	ldr	r0, [pc, #316]	; (800ca68 <button+0x2ac>)
 800c92c:	f7f7 f8a0 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c930:	2032      	movs	r0, #50	; 0x32
 800c932:	f001 ffd7 	bl	800e8e4 <Await>
			break;
 800c936:	e04b      	b.n	800c9d0 <button+0x214>
		case 5:
			sprintf(data, "lazer(KF)\n\n");
 800c938:	4950      	ldr	r1, [pc, #320]	; (800ca7c <button+0x2c0>)
 800c93a:	484a      	ldr	r0, [pc, #296]	; (800ca64 <button+0x2a8>)
 800c93c:	f013 f9e0 	bl	801fd00 <siprintf>
			UARTSend
 800c940:	4948      	ldr	r1, [pc, #288]	; (800ca64 <button+0x2a8>)
 800c942:	4849      	ldr	r0, [pc, #292]	; (800ca68 <button+0x2ac>)
 800c944:	f7f7 f894 	bl	8003a70 <UARTPrintString>
			break;
 800c948:	e042      	b.n	800c9d0 <button+0x214>
		case 6:
			sprintf(data, "get pulses at ball racks, press and hold L1 for verticle\n");
 800c94a:	494d      	ldr	r1, [pc, #308]	; (800ca80 <button+0x2c4>)
 800c94c:	4845      	ldr	r0, [pc, #276]	; (800ca64 <button+0x2a8>)
 800c94e:	f013 f9d7 	bl	801fd00 <siprintf>
			UARTSend
 800c952:	4944      	ldr	r1, [pc, #272]	; (800ca64 <button+0x2a8>)
 800c954:	4844      	ldr	r0, [pc, #272]	; (800ca68 <button+0x2ac>)
 800c956:	f7f7 f88b 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c95a:	2032      	movs	r0, #50	; 0x32
 800c95c:	f001 ffc2 	bl	800e8e4 <Await>
			sprintf(data, "ball pulse, R1 for valve, joyR_y to adj. pulses\n");
 800c960:	4948      	ldr	r1, [pc, #288]	; (800ca84 <button+0x2c8>)
 800c962:	4840      	ldr	r0, [pc, #256]	; (800ca64 <button+0x2a8>)
 800c964:	f013 f9cc 	bl	801fd00 <siprintf>
			UARTSend
 800c968:	493e      	ldr	r1, [pc, #248]	; (800ca64 <button+0x2a8>)
 800c96a:	483f      	ldr	r0, [pc, #252]	; (800ca68 <button+0x2ac>)
 800c96c:	f7f7 f880 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c970:	2032      	movs	r0, #50	; 0x32
 800c972:	f001 ffb7 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS(special) to record pulses\n\n");
 800c976:	4944      	ldr	r1, [pc, #272]	; (800ca88 <button+0x2cc>)
 800c978:	483a      	ldr	r0, [pc, #232]	; (800ca64 <button+0x2a8>)
 800c97a:	f013 f9c1 	bl	801fd00 <siprintf>
			UARTSend
 800c97e:	4939      	ldr	r1, [pc, #228]	; (800ca64 <button+0x2a8>)
 800c980:	4839      	ldr	r0, [pc, #228]	; (800ca68 <button+0x2ac>)
 800c982:	f7f7 f875 	bl	8003a70 <UARTPrintString>
			break;
 800c986:	e023      	b.n	800c9d0 <button+0x214>
		case 7:
			sprintf(data, "get pulses at lagori sv, press and hold L1 for F2 pulse\n");
 800c988:	4940      	ldr	r1, [pc, #256]	; (800ca8c <button+0x2d0>)
 800c98a:	4836      	ldr	r0, [pc, #216]	; (800ca64 <button+0x2a8>)
 800c98c:	f013 f9b8 	bl	801fd00 <siprintf>
			UARTSend
 800c990:	4934      	ldr	r1, [pc, #208]	; (800ca64 <button+0x2a8>)
 800c992:	4835      	ldr	r0, [pc, #212]	; (800ca68 <button+0x2ac>)
 800c994:	f7f7 f86c 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c998:	2032      	movs	r0, #50	; 0x32
 800c99a:	f001 ffa3 	bl	800e8e4 <Await>
			sprintf(data, "and gripping, joyR_y to adj. pulses, joyL_x for pw\n");
 800c99e:	493c      	ldr	r1, [pc, #240]	; (800ca90 <button+0x2d4>)
 800c9a0:	4830      	ldr	r0, [pc, #192]	; (800ca64 <button+0x2a8>)
 800c9a2:	f013 f9ad 	bl	801fd00 <siprintf>
			UARTSend
 800c9a6:	492f      	ldr	r1, [pc, #188]	; (800ca64 <button+0x2a8>)
 800c9a8:	482f      	ldr	r0, [pc, #188]	; (800ca68 <button+0x2ac>)
 800c9aa:	f7f7 f861 	bl	8003a70 <UARTPrintString>
			Await(50);
 800c9ae:	2032      	movs	r0, #50	; 0x32
 800c9b0:	f001 ff98 	bl	800e8e4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800c9b4:	4930      	ldr	r1, [pc, #192]	; (800ca78 <button+0x2bc>)
 800c9b6:	482b      	ldr	r0, [pc, #172]	; (800ca64 <button+0x2a8>)
 800c9b8:	f013 f9a2 	bl	801fd00 <siprintf>
			UARTSend
 800c9bc:	4929      	ldr	r1, [pc, #164]	; (800ca64 <button+0x2a8>)
 800c9be:	482a      	ldr	r0, [pc, #168]	; (800ca68 <button+0x2ac>)
 800c9c0:	f7f7 f856 	bl	8003a70 <UARTPrintString>
			break;
 800c9c4:	e004      	b.n	800c9d0 <button+0x214>
		default:
			press = 0;
 800c9c6:	4b24      	ldr	r3, [pc, #144]	; (800ca58 <button+0x29c>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]
			break;
 800c9cc:	e000      	b.n	800c9d0 <button+0x214>
		}
	}
 800c9ce:	bf00      	nop
	if(ps4.button == CIRCLE){
 800c9d0:	4b1f      	ldr	r3, [pc, #124]	; (800ca50 <button+0x294>)
 800c9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9d8:	f040 8598 	bne.w	800d50c <button+0xd50>
		led3 = 0;
 800c9dc:	4a1f      	ldr	r2, [pc, #124]	; (800ca5c <button+0x2a0>)
 800c9de:	7853      	ldrb	r3, [r2, #1]
 800c9e0:	f36f 13c7 	bfc	r3, #7, #1
 800c9e4:	7053      	strb	r3, [r2, #1]
		while(ps4.button == CIRCLE){
 800c9e6:	bf00      	nop
 800c9e8:	4b19      	ldr	r3, [pc, #100]	; (800ca50 <button+0x294>)
 800c9ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9f0:	d0fa      	beq.n	800c9e8 <button+0x22c>
		}
		led3 = 1;
 800c9f2:	4a1a      	ldr	r2, [pc, #104]	; (800ca5c <button+0x2a0>)
 800c9f4:	7853      	ldrb	r3, [r2, #1]
 800c9f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fa:	7053      	strb	r3, [r2, #1]
		switch (press){
 800c9fc:	4b16      	ldr	r3, [pc, #88]	; (800ca58 <button+0x29c>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	2b06      	cmp	r3, #6
 800ca04:	f200 857f 	bhi.w	800d506 <button+0xd4a>
 800ca08:	a201      	add	r2, pc, #4	; (adr r2, 800ca10 <button+0x254>)
 800ca0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0e:	bf00      	nop
 800ca10:	0800ca2d 	.word	0x0800ca2d
 800ca14:	0800cb3f 	.word	0x0800cb3f
 800ca18:	0800cbff 	.word	0x0800cbff
 800ca1c:	0800cd9b 	.word	0x0800cd9b
 800ca20:	0800cef9 	.word	0x0800cef9
 800ca24:	0800cf85 	.word	0x0800cf85
 800ca28:	0800d239 	.word	0x0800d239
		case 1:
			exled1 = 1;
 800ca2c:	4a19      	ldr	r2, [pc, #100]	; (800ca94 <button+0x2d8>)
 800ca2e:	7853      	ldrb	r3, [r2, #1]
 800ca30:	f043 0302 	orr.w	r3, r3, #2
 800ca34:	7053      	strb	r3, [r2, #1]
			pulse = 1000;
 800ca36:	4b18      	ldr	r3, [pc, #96]	; (800ca98 <button+0x2dc>)
 800ca38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ca3c:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_BallV, 300, 2800);
 800ca3e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800ca42:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ca46:	4815      	ldr	r0, [pc, #84]	; (800ca9c <button+0x2e0>)
 800ca48:	f7fc f95d 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800ca4c:	e059      	b.n	800cb02 <button+0x346>
 800ca4e:	bf00      	nop
 800ca50:	2000a448 	.word	0x2000a448
 800ca54:	20009ac0 	.word	0x20009ac0
 800ca58:	2000a03c 	.word	0x2000a03c
 800ca5c:	40020814 	.word	0x40020814
 800ca60:	0802467c 	.word	0x0802467c
 800ca64:	20006a8c 	.word	0x20006a8c
 800ca68:	20006c74 	.word	0x20006c74
 800ca6c:	080246a8 	.word	0x080246a8
 800ca70:	080246d4 	.word	0x080246d4
 800ca74:	08024700 	.word	0x08024700
 800ca78:	08024728 	.word	0x08024728
 800ca7c:	08024758 	.word	0x08024758
 800ca80:	08024764 	.word	0x08024764
 800ca84:	080247a0 	.word	0x080247a0
 800ca88:	080247d4 	.word	0x080247d4
 800ca8c:	0802480c 	.word	0x0802480c
 800ca90:	08024848 	.word	0x08024848
 800ca94:	40020c14 	.word	0x40020c14
 800ca98:	20009b0c 	.word	0x20009b0c
 800ca9c:	20009a58 	.word	0x20009a58
				SERVO_getPulse();
 800caa0:	f000 ff96 	bl	800d9d0 <SERVO_getPulse>
				svBallvp(pulse)
 800caa4:	4b89      	ldr	r3, [pc, #548]	; (800cccc <button+0x510>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4619      	mov	r1, r3
 800caaa:	4889      	ldr	r0, [pc, #548]	; (800ccd0 <button+0x514>)
 800caac:	f7fc f8e2 	bl	8008c74 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800cab0:	4b88      	ldr	r3, [pc, #544]	; (800ccd4 <button+0x518>)
 800cab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cab8:	d109      	bne.n	800cace <button+0x312>
					fx.svbV1 = pulse;
 800caba:	4b84      	ldr	r3, [pc, #528]	; (800cccc <button+0x510>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a86      	ldr	r2, [pc, #536]	; (800ccd8 <button+0x51c>)
 800cac0:	6093      	str	r3, [r2, #8]
					while(ps4.button == TRIANGLE);
 800cac2:	bf00      	nop
 800cac4:	4b83      	ldr	r3, [pc, #524]	; (800ccd4 <button+0x518>)
 800cac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cacc:	d0fa      	beq.n	800cac4 <button+0x308>
				}
				if(ps4.button == SQUARE){
 800cace:	4b81      	ldr	r3, [pc, #516]	; (800ccd4 <button+0x518>)
 800cad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad6:	d109      	bne.n	800caec <button+0x330>
					fx.svbV2 = pulse;
 800cad8:	4b7c      	ldr	r3, [pc, #496]	; (800cccc <button+0x510>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a7e      	ldr	r2, [pc, #504]	; (800ccd8 <button+0x51c>)
 800cade:	60d3      	str	r3, [r2, #12]
					while(ps4.button == SQUARE);
 800cae0:	bf00      	nop
 800cae2:	4b7c      	ldr	r3, [pc, #496]	; (800ccd4 <button+0x518>)
 800cae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caea:	d0fa      	beq.n	800cae2 <button+0x326>
				}
				sprintf(data, "pulse: %d\n", pulse);
 800caec:	4b77      	ldr	r3, [pc, #476]	; (800cccc <button+0x510>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	497a      	ldr	r1, [pc, #488]	; (800ccdc <button+0x520>)
 800caf4:	487a      	ldr	r0, [pc, #488]	; (800cce0 <button+0x524>)
 800caf6:	f013 f903 	bl	801fd00 <siprintf>
				UARTSend
 800cafa:	4979      	ldr	r1, [pc, #484]	; (800cce0 <button+0x524>)
 800cafc:	4879      	ldr	r0, [pc, #484]	; (800cce4 <button+0x528>)
 800cafe:	f7f6 ffb7 	bl	8003a70 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800cb02:	4b74      	ldr	r3, [pc, #464]	; (800ccd4 <button+0x518>)
 800cb04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb0a:	d1c9      	bne.n	800caa0 <button+0x2e4>
			}
			sprintf(data, "BV: %d %d\n", fx.svbV1, fx.svbV2);
 800cb0c:	4b72      	ldr	r3, [pc, #456]	; (800ccd8 <button+0x51c>)
 800cb0e:	689a      	ldr	r2, [r3, #8]
 800cb10:	4b71      	ldr	r3, [pc, #452]	; (800ccd8 <button+0x51c>)
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	4974      	ldr	r1, [pc, #464]	; (800cce8 <button+0x52c>)
 800cb16:	4872      	ldr	r0, [pc, #456]	; (800cce0 <button+0x524>)
 800cb18:	f013 f8f2 	bl	801fd00 <siprintf>
			UARTSend
 800cb1c:	4970      	ldr	r1, [pc, #448]	; (800cce0 <button+0x524>)
 800cb1e:	4871      	ldr	r0, [pc, #452]	; (800cce4 <button+0x528>)
 800cb20:	f7f6 ffa6 	bl	8003a70 <UARTPrintString>
			exled1 = 0;
 800cb24:	4a71      	ldr	r2, [pc, #452]	; (800ccec <button+0x530>)
 800cb26:	7853      	ldrb	r3, [r2, #1]
 800cb28:	f36f 0341 	bfc	r3, #1, #1
 800cb2c:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800cb2e:	bf00      	nop
 800cb30:	4b68      	ldr	r3, [pc, #416]	; (800ccd4 <button+0x518>)
 800cb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb38:	d0fa      	beq.n	800cb30 <button+0x374>
			break;
 800cb3a:	f000 bce4 	b.w	800d506 <button+0xd4a>
		case 2:
			exled2 = 1;
 800cb3e:	4a6b      	ldr	r2, [pc, #428]	; (800ccec <button+0x530>)
 800cb40:	7853      	ldrb	r3, [r2, #1]
 800cb42:	f043 0301 	orr.w	r3, r3, #1
 800cb46:	7053      	strb	r3, [r2, #1]
			pulse = 1000;
 800cb48:	4b60      	ldr	r3, [pc, #384]	; (800cccc <button+0x510>)
 800cb4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb4e:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_BallH, 300, 2800);
 800cb50:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800cb54:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cb58:	4865      	ldr	r0, [pc, #404]	; (800ccf0 <button+0x534>)
 800cb5a:	f7fc f8d4 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800cb5e:	e030      	b.n	800cbc2 <button+0x406>
				SERVO_getPulse();
 800cb60:	f000 ff36 	bl	800d9d0 <SERVO_getPulse>
				svBallhp(pulse)
 800cb64:	4b59      	ldr	r3, [pc, #356]	; (800cccc <button+0x510>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4861      	ldr	r0, [pc, #388]	; (800ccf0 <button+0x534>)
 800cb6c:	f7fc f882 	bl	8008c74 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800cb70:	4b58      	ldr	r3, [pc, #352]	; (800ccd4 <button+0x518>)
 800cb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb78:	d109      	bne.n	800cb8e <button+0x3d2>
					fx.svbH1 = pulse;
 800cb7a:	4b54      	ldr	r3, [pc, #336]	; (800cccc <button+0x510>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a56      	ldr	r2, [pc, #344]	; (800ccd8 <button+0x51c>)
 800cb80:	6013      	str	r3, [r2, #0]
					while(ps4.button == TRIANGLE);
 800cb82:	bf00      	nop
 800cb84:	4b53      	ldr	r3, [pc, #332]	; (800ccd4 <button+0x518>)
 800cb86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb8c:	d0fa      	beq.n	800cb84 <button+0x3c8>
				}
				if(ps4.button == SQUARE){
 800cb8e:	4b51      	ldr	r3, [pc, #324]	; (800ccd4 <button+0x518>)
 800cb90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb96:	d109      	bne.n	800cbac <button+0x3f0>
					fx.svbH2 = pulse;
 800cb98:	4b4c      	ldr	r3, [pc, #304]	; (800cccc <button+0x510>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a4e      	ldr	r2, [pc, #312]	; (800ccd8 <button+0x51c>)
 800cb9e:	6053      	str	r3, [r2, #4]
					while(ps4.button == SQUARE);
 800cba0:	bf00      	nop
 800cba2:	4b4c      	ldr	r3, [pc, #304]	; (800ccd4 <button+0x518>)
 800cba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbaa:	d0fa      	beq.n	800cba2 <button+0x3e6>
				}
				sprintf(data, "pulse: %d\n", pulse);
 800cbac:	4b47      	ldr	r3, [pc, #284]	; (800cccc <button+0x510>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	494a      	ldr	r1, [pc, #296]	; (800ccdc <button+0x520>)
 800cbb4:	484a      	ldr	r0, [pc, #296]	; (800cce0 <button+0x524>)
 800cbb6:	f013 f8a3 	bl	801fd00 <siprintf>
				UARTSend
 800cbba:	4949      	ldr	r1, [pc, #292]	; (800cce0 <button+0x524>)
 800cbbc:	4849      	ldr	r0, [pc, #292]	; (800cce4 <button+0x528>)
 800cbbe:	f7f6 ff57 	bl	8003a70 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800cbc2:	4b44      	ldr	r3, [pc, #272]	; (800ccd4 <button+0x518>)
 800cbc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbca:	d1c9      	bne.n	800cb60 <button+0x3a4>
			}
			sprintf(data, "BH: %d %d\n", fx.svbH1, fx.svbH2);
 800cbcc:	4b42      	ldr	r3, [pc, #264]	; (800ccd8 <button+0x51c>)
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	4b41      	ldr	r3, [pc, #260]	; (800ccd8 <button+0x51c>)
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	4947      	ldr	r1, [pc, #284]	; (800ccf4 <button+0x538>)
 800cbd6:	4842      	ldr	r0, [pc, #264]	; (800cce0 <button+0x524>)
 800cbd8:	f013 f892 	bl	801fd00 <siprintf>
			UARTSend
 800cbdc:	4940      	ldr	r1, [pc, #256]	; (800cce0 <button+0x524>)
 800cbde:	4841      	ldr	r0, [pc, #260]	; (800cce4 <button+0x528>)
 800cbe0:	f7f6 ff46 	bl	8003a70 <UARTPrintString>
			exled2 = 0;
 800cbe4:	4a41      	ldr	r2, [pc, #260]	; (800ccec <button+0x530>)
 800cbe6:	7853      	ldrb	r3, [r2, #1]
 800cbe8:	f36f 0300 	bfc	r3, #0, #1
 800cbec:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800cbee:	bf00      	nop
 800cbf0:	4b38      	ldr	r3, [pc, #224]	; (800ccd4 <button+0x518>)
 800cbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbf8:	d0fa      	beq.n	800cbf0 <button+0x434>
			break;
 800cbfa:	f000 bc84 	b.w	800d506 <button+0xd4a>
		case 3:
			pulse = 1000;
 800cbfe:	4b33      	ldr	r3, [pc, #204]	; (800cccc <button+0x510>)
 800cc00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc04:	601a      	str	r2, [r3, #0]
			exled3 = 1;
 800cc06:	4a3c      	ldr	r2, [pc, #240]	; (800ccf8 <button+0x53c>)
 800cc08:	7813      	ldrb	r3, [r2, #0]
 800cc0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc0e:	7013      	strb	r3, [r2, #0]
			ServoInitPulseLimit(&SERVO_LagoriF1, 300, 2800);
 800cc10:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800cc14:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cc18:	4838      	ldr	r0, [pc, #224]	; (800ccfc <button+0x540>)
 800cc1a:	f7fc f874 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800cc1e:	e09a      	b.n	800cd56 <button+0x59a>
				SERVO_getPulse();
 800cc20:	f000 fed6 	bl	800d9d0 <SERVO_getPulse>
				svLGF1(pulse)
 800cc24:	4b29      	ldr	r3, [pc, #164]	; (800cccc <button+0x510>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4834      	ldr	r0, [pc, #208]	; (800ccfc <button+0x540>)
 800cc2c:	f7fc f822 	bl	8008c74 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800cc30:	4b28      	ldr	r3, [pc, #160]	; (800ccd4 <button+0x518>)
 800cc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc38:	d109      	bne.n	800cc4e <button+0x492>
					fx.svlgf1 = pulse;
 800cc3a:	4b24      	ldr	r3, [pc, #144]	; (800cccc <button+0x510>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a26      	ldr	r2, [pc, #152]	; (800ccd8 <button+0x51c>)
 800cc40:	6113      	str	r3, [r2, #16]
					while(ps4.button == TRIANGLE);
 800cc42:	bf00      	nop
 800cc44:	4b23      	ldr	r3, [pc, #140]	; (800ccd4 <button+0x518>)
 800cc46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc4c:	d0fa      	beq.n	800cc44 <button+0x488>
				}
				if(ps4.button == SQUARE){
 800cc4e:	4b21      	ldr	r3, [pc, #132]	; (800ccd4 <button+0x518>)
 800cc50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc56:	d109      	bne.n	800cc6c <button+0x4b0>
					fx.svlgf2 = pulse;
 800cc58:	4b1c      	ldr	r3, [pc, #112]	; (800cccc <button+0x510>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a1e      	ldr	r2, [pc, #120]	; (800ccd8 <button+0x51c>)
 800cc5e:	6153      	str	r3, [r2, #20]
					while(ps4.button == SQUARE);
 800cc60:	bf00      	nop
 800cc62:	4b1c      	ldr	r3, [pc, #112]	; (800ccd4 <button+0x518>)
 800cc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc6a:	d0fa      	beq.n	800cc62 <button+0x4a6>
				}
				if(ps4.button == CROSS){
 800cc6c:	4b19      	ldr	r3, [pc, #100]	; (800ccd4 <button+0x518>)
 800cc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc74:	d109      	bne.n	800cc8a <button+0x4ce>
					fx.svlgf3 = pulse;
 800cc76:	4b15      	ldr	r3, [pc, #84]	; (800cccc <button+0x510>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a17      	ldr	r2, [pc, #92]	; (800ccd8 <button+0x51c>)
 800cc7c:	6193      	str	r3, [r2, #24]
					while(ps4.button == CROSS);
 800cc7e:	bf00      	nop
 800cc80:	4b14      	ldr	r3, [pc, #80]	; (800ccd4 <button+0x518>)
 800cc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cc88:	d0fa      	beq.n	800cc80 <button+0x4c4>
				}
				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_y) >= 0.5)
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <button+0x518>)
 800cc8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc92:	d139      	bne.n	800cd08 <button+0x54c>
 800cc94:	4b0f      	ldr	r3, [pc, #60]	; (800ccd4 <button+0x518>)
 800cc96:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800cc9a:	eef0 7ae7 	vabs.f32	s15, s15
 800cc9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccaa:	db2d      	blt.n	800cd08 <button+0x54c>
					LFPW(ps4.joyL_y * -600)
 800ccac:	4b09      	ldr	r3, [pc, #36]	; (800ccd4 <button+0x518>)
 800ccae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800ccb2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800cd00 <button+0x544>
 800ccb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ccba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ccbe:	ee17 1a90 	vmov	r1, s15
 800ccc2:	4810      	ldr	r0, [pc, #64]	; (800cd04 <button+0x548>)
 800ccc4:	f7f4 fb5c 	bl	8001380 <WriteBDC>
 800ccc8:	e03a      	b.n	800cd40 <button+0x584>
 800ccca:	bf00      	nop
 800cccc:	20009b0c 	.word	0x20009b0c
 800ccd0:	20009a58 	.word	0x20009a58
 800ccd4:	2000a448 	.word	0x2000a448
 800ccd8:	2000a4c4 	.word	0x2000a4c4
 800ccdc:	0802487c 	.word	0x0802487c
 800cce0:	20006a8c 	.word	0x20006a8c
 800cce4:	20006c74 	.word	0x20006c74
 800cce8:	08024888 	.word	0x08024888
 800ccec:	40020c14 	.word	0x40020c14
 800ccf0:	20009bf4 	.word	0x20009bf4
 800ccf4:	08024894 	.word	0x08024894
 800ccf8:	40020014 	.word	0x40020014
 800ccfc:	20009c44 	.word	0x20009c44
 800cd00:	44160000 	.word	0x44160000
 800cd04:	20007cd4 	.word	0x20007cd4
				else if(fabs(ps4.joyR_x) >= 0.5)
 800cd08:	4bae      	ldr	r3, [pc, #696]	; (800cfc4 <button+0x808>)
 800cd0a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800cd0e:	eef0 7ae7 	vabs.f32	s15, s15
 800cd12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd1e:	db0f      	blt.n	800cd40 <button+0x584>
					LGPW(ps4.joyL_x * 600)
 800cd20:	4ba8      	ldr	r3, [pc, #672]	; (800cfc4 <button+0x808>)
 800cd22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800cd26:	eef1 7a67 	vneg.f32	s15, s15
 800cd2a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800cfc8 <button+0x80c>
 800cd2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cd32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cd36:	ee17 1a90 	vmov	r1, s15
 800cd3a:	48a4      	ldr	r0, [pc, #656]	; (800cfcc <button+0x810>)
 800cd3c:	f7f4 fb20 	bl	8001380 <WriteBDC>
				sprintf(data, "pulse: %d\n", pulse);
 800cd40:	4ba3      	ldr	r3, [pc, #652]	; (800cfd0 <button+0x814>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	461a      	mov	r2, r3
 800cd46:	49a3      	ldr	r1, [pc, #652]	; (800cfd4 <button+0x818>)
 800cd48:	48a3      	ldr	r0, [pc, #652]	; (800cfd8 <button+0x81c>)
 800cd4a:	f012 ffd9 	bl	801fd00 <siprintf>
				UARTSend
 800cd4e:	49a2      	ldr	r1, [pc, #648]	; (800cfd8 <button+0x81c>)
 800cd50:	48a2      	ldr	r0, [pc, #648]	; (800cfdc <button+0x820>)
 800cd52:	f7f6 fe8d 	bl	8003a70 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800cd56:	4b9b      	ldr	r3, [pc, #620]	; (800cfc4 <button+0x808>)
 800cd58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd5e:	f47f af5f 	bne.w	800cc20 <button+0x464>
			}
			sprintf(data, "LF1: %d %d %d\n", fx.svlgf1, fx.svlgf2, fx.svlgf3);
 800cd62:	4b9f      	ldr	r3, [pc, #636]	; (800cfe0 <button+0x824>)
 800cd64:	691a      	ldr	r2, [r3, #16]
 800cd66:	4b9e      	ldr	r3, [pc, #632]	; (800cfe0 <button+0x824>)
 800cd68:	6959      	ldr	r1, [r3, #20]
 800cd6a:	4b9d      	ldr	r3, [pc, #628]	; (800cfe0 <button+0x824>)
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	460b      	mov	r3, r1
 800cd72:	499c      	ldr	r1, [pc, #624]	; (800cfe4 <button+0x828>)
 800cd74:	4898      	ldr	r0, [pc, #608]	; (800cfd8 <button+0x81c>)
 800cd76:	f012 ffc3 	bl	801fd00 <siprintf>
			UARTSend
 800cd7a:	4997      	ldr	r1, [pc, #604]	; (800cfd8 <button+0x81c>)
 800cd7c:	4897      	ldr	r0, [pc, #604]	; (800cfdc <button+0x820>)
 800cd7e:	f7f6 fe77 	bl	8003a70 <UARTPrintString>
			exled3 = 0;
 800cd82:	4a99      	ldr	r2, [pc, #612]	; (800cfe8 <button+0x82c>)
 800cd84:	7813      	ldrb	r3, [r2, #0]
 800cd86:	f36f 13c7 	bfc	r3, #7, #1
 800cd8a:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800cd8c:	bf00      	nop
 800cd8e:	4b8d      	ldr	r3, [pc, #564]	; (800cfc4 <button+0x808>)
 800cd90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd96:	d0fa      	beq.n	800cd8e <button+0x5d2>
			break;
 800cd98:	e3b5      	b.n	800d506 <button+0xd4a>
		case 4:
			exled4 = 1;
 800cd9a:	4a93      	ldr	r2, [pc, #588]	; (800cfe8 <button+0x82c>)
 800cd9c:	7813      	ldrb	r3, [r2, #0]
 800cd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cda2:	7013      	strb	r3, [r2, #0]
			pulse = 1000;
 800cda4:	4b8a      	ldr	r3, [pc, #552]	; (800cfd0 <button+0x814>)
 800cda6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cdaa:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_LagoriF2, 300, 2800);
 800cdac:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800cdb0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cdb4:	488d      	ldr	r0, [pc, #564]	; (800cfec <button+0x830>)
 800cdb6:	f7fb ffa6 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800cdba:	e07b      	b.n	800ceb4 <button+0x6f8>
				SERVO_getPulse();
 800cdbc:	f000 fe08 	bl	800d9d0 <SERVO_getPulse>
				svLGF2(pulse)
 800cdc0:	4b83      	ldr	r3, [pc, #524]	; (800cfd0 <button+0x814>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4889      	ldr	r0, [pc, #548]	; (800cfec <button+0x830>)
 800cdc8:	f7fb ff54 	bl	8008c74 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800cdcc:	4b7d      	ldr	r3, [pc, #500]	; (800cfc4 <button+0x808>)
 800cdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd4:	d109      	bne.n	800cdea <button+0x62e>
					fx.svlgf21 = pulse;
 800cdd6:	4b7e      	ldr	r3, [pc, #504]	; (800cfd0 <button+0x814>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a81      	ldr	r2, [pc, #516]	; (800cfe0 <button+0x824>)
 800cddc:	61d3      	str	r3, [r2, #28]
					while(ps4.button == TRIANGLE);
 800cdde:	bf00      	nop
 800cde0:	4b78      	ldr	r3, [pc, #480]	; (800cfc4 <button+0x808>)
 800cde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde8:	d0fa      	beq.n	800cde0 <button+0x624>
				}
				if(ps4.button == SQUARE){
 800cdea:	4b76      	ldr	r3, [pc, #472]	; (800cfc4 <button+0x808>)
 800cdec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdf2:	d109      	bne.n	800ce08 <button+0x64c>
					fx.svlgf22 = pulse;
 800cdf4:	4b76      	ldr	r3, [pc, #472]	; (800cfd0 <button+0x814>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a79      	ldr	r2, [pc, #484]	; (800cfe0 <button+0x824>)
 800cdfa:	6213      	str	r3, [r2, #32]
					while(ps4.button == SQUARE);
 800cdfc:	bf00      	nop
 800cdfe:	4b71      	ldr	r3, [pc, #452]	; (800cfc4 <button+0x808>)
 800ce00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce06:	d0fa      	beq.n	800cdfe <button+0x642>
				}
				if(ps4.button == CROSS){
 800ce08:	4b6e      	ldr	r3, [pc, #440]	; (800cfc4 <button+0x808>)
 800ce0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce10:	d109      	bne.n	800ce26 <button+0x66a>
					fx.svlgf23 = pulse;
 800ce12:	4b6f      	ldr	r3, [pc, #444]	; (800cfd0 <button+0x814>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4a72      	ldr	r2, [pc, #456]	; (800cfe0 <button+0x824>)
 800ce18:	6253      	str	r3, [r2, #36]	; 0x24
					while(ps4.button == CROSS);
 800ce1a:	bf00      	nop
 800ce1c:	4b69      	ldr	r3, [pc, #420]	; (800cfc4 <button+0x808>)
 800ce1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ce24:	d0fa      	beq.n	800ce1c <button+0x660>
				}
				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_y) >= 0.5)
 800ce26:	4b67      	ldr	r3, [pc, #412]	; (800cfc4 <button+0x808>)
 800ce28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce2e:	d11a      	bne.n	800ce66 <button+0x6aa>
 800ce30:	4b64      	ldr	r3, [pc, #400]	; (800cfc4 <button+0x808>)
 800ce32:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800ce36:	eef0 7ae7 	vabs.f32	s15, s15
 800ce3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ce3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce46:	db0e      	blt.n	800ce66 <button+0x6aa>
					LFPW(ps4.joyL_y * -600)
 800ce48:	4b5e      	ldr	r3, [pc, #376]	; (800cfc4 <button+0x808>)
 800ce4a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800ce4e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800cfc8 <button+0x80c>
 800ce52:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce5a:	ee17 1a90 	vmov	r1, s15
 800ce5e:	4864      	ldr	r0, [pc, #400]	; (800cff0 <button+0x834>)
 800ce60:	f7f4 fa8e 	bl	8001380 <WriteBDC>
 800ce64:	e01b      	b.n	800ce9e <button+0x6e2>
				else if(fabs(ps4.joyL_x) >= 0.5)
 800ce66:	4b57      	ldr	r3, [pc, #348]	; (800cfc4 <button+0x808>)
 800ce68:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ce6c:	eef0 7ae7 	vabs.f32	s15, s15
 800ce70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ce74:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7c:	db0f      	blt.n	800ce9e <button+0x6e2>
					LGPW(ps4.joyL_x * 600)
 800ce7e:	4b51      	ldr	r3, [pc, #324]	; (800cfc4 <button+0x808>)
 800ce80:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ce84:	eef1 7a67 	vneg.f32	s15, s15
 800ce88:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800cfc8 <button+0x80c>
 800ce8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce94:	ee17 1a90 	vmov	r1, s15
 800ce98:	484c      	ldr	r0, [pc, #304]	; (800cfcc <button+0x810>)
 800ce9a:	f7f4 fa71 	bl	8001380 <WriteBDC>
				sprintf(data, "pulse: %d\n", pulse);
 800ce9e:	4b4c      	ldr	r3, [pc, #304]	; (800cfd0 <button+0x814>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	461a      	mov	r2, r3
 800cea4:	494b      	ldr	r1, [pc, #300]	; (800cfd4 <button+0x818>)
 800cea6:	484c      	ldr	r0, [pc, #304]	; (800cfd8 <button+0x81c>)
 800cea8:	f012 ff2a 	bl	801fd00 <siprintf>
				UARTSend
 800ceac:	494a      	ldr	r1, [pc, #296]	; (800cfd8 <button+0x81c>)
 800ceae:	484b      	ldr	r0, [pc, #300]	; (800cfdc <button+0x820>)
 800ceb0:	f7f6 fdde 	bl	8003a70 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800ceb4:	4b43      	ldr	r3, [pc, #268]	; (800cfc4 <button+0x808>)
 800ceb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cebc:	f47f af7e 	bne.w	800cdbc <button+0x600>
			}
			sprintf(data, "LF2: %d %d %d\n", fx.svlgf21, fx.svlgf22, fx.svlgf23);
 800cec0:	4b47      	ldr	r3, [pc, #284]	; (800cfe0 <button+0x824>)
 800cec2:	69da      	ldr	r2, [r3, #28]
 800cec4:	4b46      	ldr	r3, [pc, #280]	; (800cfe0 <button+0x824>)
 800cec6:	6a19      	ldr	r1, [r3, #32]
 800cec8:	4b45      	ldr	r3, [pc, #276]	; (800cfe0 <button+0x824>)
 800ceca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cecc:	9300      	str	r3, [sp, #0]
 800cece:	460b      	mov	r3, r1
 800ced0:	4948      	ldr	r1, [pc, #288]	; (800cff4 <button+0x838>)
 800ced2:	4841      	ldr	r0, [pc, #260]	; (800cfd8 <button+0x81c>)
 800ced4:	f012 ff14 	bl	801fd00 <siprintf>
			UARTSend
 800ced8:	493f      	ldr	r1, [pc, #252]	; (800cfd8 <button+0x81c>)
 800ceda:	4840      	ldr	r0, [pc, #256]	; (800cfdc <button+0x820>)
 800cedc:	f7f6 fdc8 	bl	8003a70 <UARTPrintString>
			exled4 = 1;
 800cee0:	4a41      	ldr	r2, [pc, #260]	; (800cfe8 <button+0x82c>)
 800cee2:	7813      	ldrb	r3, [r2, #0]
 800cee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cee8:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800ceea:	bf00      	nop
 800ceec:	4b35      	ldr	r3, [pc, #212]	; (800cfc4 <button+0x808>)
 800ceee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cef4:	d0fa      	beq.n	800ceec <button+0x730>
			break;
 800cef6:	e306      	b.n	800d506 <button+0xd4a>
		case 5:
			exled5 = 1;
 800cef8:	4a3b      	ldr	r2, [pc, #236]	; (800cfe8 <button+0x82c>)
 800cefa:	7813      	ldrb	r3, [r2, #0]
 800cefc:	f043 0320 	orr.w	r3, r3, #32
 800cf00:	7013      	strb	r3, [r2, #0]
			while(ps4.button != CIRCLE){
 800cf02:	e02e      	b.n	800cf62 <button+0x7a6>
				sprintf(data, "kfx=%.3f, kfy=%.3f, x=%.3f, y=%.3f\n", x_kfo, y_kfo, laser_dist_x, laser_dist_y);
 800cf04:	4b3c      	ldr	r3, [pc, #240]	; (800cff8 <button+0x83c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7f3 fb1d 	bl	8000548 <__aeabi_f2d>
 800cf0e:	4682      	mov	sl, r0
 800cf10:	468b      	mov	fp, r1
 800cf12:	4b3a      	ldr	r3, [pc, #232]	; (800cffc <button+0x840>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f3 fb16 	bl	8000548 <__aeabi_f2d>
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	4b37      	ldr	r3, [pc, #220]	; (800d000 <button+0x844>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7f3 fb0f 	bl	8000548 <__aeabi_f2d>
 800cf2a:	4680      	mov	r8, r0
 800cf2c:	4689      	mov	r9, r1
 800cf2e:	4b35      	ldr	r3, [pc, #212]	; (800d004 <button+0x848>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f3 fb08 	bl	8000548 <__aeabi_f2d>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cf44:	e9cd 4500 	strd	r4, r5, [sp]
 800cf48:	4652      	mov	r2, sl
 800cf4a:	465b      	mov	r3, fp
 800cf4c:	492e      	ldr	r1, [pc, #184]	; (800d008 <button+0x84c>)
 800cf4e:	4822      	ldr	r0, [pc, #136]	; (800cfd8 <button+0x81c>)
 800cf50:	f012 fed6 	bl	801fd00 <siprintf>
				UARTSend
 800cf54:	4920      	ldr	r1, [pc, #128]	; (800cfd8 <button+0x81c>)
 800cf56:	4821      	ldr	r0, [pc, #132]	; (800cfdc <button+0x820>)
 800cf58:	f7f6 fd8a 	bl	8003a70 <UARTPrintString>
				Await(50);
 800cf5c:	2032      	movs	r0, #50	; 0x32
 800cf5e:	f001 fcc1 	bl	800e8e4 <Await>
			while(ps4.button != CIRCLE){
 800cf62:	4b18      	ldr	r3, [pc, #96]	; (800cfc4 <button+0x808>)
 800cf64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf6a:	d1cb      	bne.n	800cf04 <button+0x748>
			}
			exled5 = 0;
 800cf6c:	4a1e      	ldr	r2, [pc, #120]	; (800cfe8 <button+0x82c>)
 800cf6e:	7813      	ldrb	r3, [r2, #0]
 800cf70:	f36f 1345 	bfc	r3, #5, #1
 800cf74:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800cf76:	bf00      	nop
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <button+0x808>)
 800cf7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf80:	d0fa      	beq.n	800cf78 <button+0x7bc>
			break;
 800cf82:	e2c0      	b.n	800d506 <button+0xd4a>
		case 6:
			exled1 = 1;
 800cf84:	4a21      	ldr	r2, [pc, #132]	; (800d00c <button+0x850>)
 800cf86:	7853      	ldrb	r3, [r2, #1]
 800cf88:	f043 0302 	orr.w	r3, r3, #2
 800cf8c:	7053      	strb	r3, [r2, #1]
			exled2 = 1;
 800cf8e:	4a1f      	ldr	r2, [pc, #124]	; (800d00c <button+0x850>)
 800cf90:	7853      	ldrb	r3, [r2, #1]
 800cf92:	f043 0301 	orr.w	r3, r3, #1
 800cf96:	7053      	strb	r3, [r2, #1]
			pulseV = 1000;
 800cf98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cf9c:	60bb      	str	r3, [r7, #8]
			pulseH = 1000;
 800cf9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfa2:	60fb      	str	r3, [r7, #12]
			ServoInitPulseLimit(&SERVO_BallV, 300, 2800);
 800cfa4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800cfa8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cfac:	4818      	ldr	r0, [pc, #96]	; (800d010 <button+0x854>)
 800cfae:	f7fb feaa 	bl	8008d06 <ServoInitPulseLimit>
			ServoInitPulseLimit(&SERVO_BallH, 300, 2800);
 800cfb2:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800cfb6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800cfba:	4816      	ldr	r0, [pc, #88]	; (800d014 <button+0x858>)
 800cfbc:	f7fb fea3 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800cfc0:	e100      	b.n	800d1c4 <button+0xa08>
 800cfc2:	bf00      	nop
 800cfc4:	2000a448 	.word	0x2000a448
 800cfc8:	44160000 	.word	0x44160000
 800cfcc:	2000aa24 	.word	0x2000aa24
 800cfd0:	20009b0c 	.word	0x20009b0c
 800cfd4:	0802487c 	.word	0x0802487c
 800cfd8:	20006a8c 	.word	0x20006a8c
 800cfdc:	20006c74 	.word	0x20006c74
 800cfe0:	2000a4c4 	.word	0x2000a4c4
 800cfe4:	080248a0 	.word	0x080248a0
 800cfe8:	40020014 	.word	0x40020014
 800cfec:	2000aa48 	.word	0x2000aa48
 800cff0:	20007cd4 	.word	0x20007cd4
 800cff4:	080248b0 	.word	0x080248b0
 800cff8:	2000787c 	.word	0x2000787c
 800cffc:	20007270 	.word	0x20007270
 800d000:	2000a6e8 	.word	0x2000a6e8
 800d004:	20007908 	.word	0x20007908
 800d008:	080248c0 	.word	0x080248c0
 800d00c:	40020c14 	.word	0x40020c14
 800d010:	20009a58 	.word	0x20009a58
 800d014:	20009bf4 	.word	0x20009bf4
				if(ps4.button == L1 && ps4.joyR_y >= 0.75)			pulseV += 25;
 800d018:	4baa      	ldr	r3, [pc, #680]	; (800d2c4 <button+0xb08>)
 800d01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d020:	d10d      	bne.n	800d03e <button+0x882>
 800d022:	4ba8      	ldr	r3, [pc, #672]	; (800d2c4 <button+0xb08>)
 800d024:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d028:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d02c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d034:	db03      	blt.n	800d03e <button+0x882>
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3319      	adds	r3, #25
 800d03a:	60bb      	str	r3, [r7, #8]
 800d03c:	e02d      	b.n	800d09a <button+0x8de>
				else if(ps4.button == L1 && ps4.joyR_y <= -0.75)	pulseV -= 25;
 800d03e:	4ba1      	ldr	r3, [pc, #644]	; (800d2c4 <button+0xb08>)
 800d040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d046:	d10d      	bne.n	800d064 <button+0x8a8>
 800d048:	4b9e      	ldr	r3, [pc, #632]	; (800d2c4 <button+0xb08>)
 800d04a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d04e:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800d052:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d05a:	d803      	bhi.n	800d064 <button+0x8a8>
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	3b19      	subs	r3, #25
 800d060:	60bb      	str	r3, [r7, #8]
 800d062:	e01a      	b.n	800d09a <button+0x8de>
				else if(ps4.joyR_y >= 0.75)							pulseH += 25;
 800d064:	4b97      	ldr	r3, [pc, #604]	; (800d2c4 <button+0xb08>)
 800d066:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d06a:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d06e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d076:	db03      	blt.n	800d080 <button+0x8c4>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	3319      	adds	r3, #25
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	e00c      	b.n	800d09a <button+0x8de>
				else if(ps4.joyR_y <= -0.75)						pulseH -= 25;
 800d080:	4b90      	ldr	r3, [pc, #576]	; (800d2c4 <button+0xb08>)
 800d082:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d086:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800d08a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d092:	d802      	bhi.n	800d09a <button+0x8de>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	3b19      	subs	r3, #25
 800d098:	60fb      	str	r3, [r7, #12]

				if(pulseV < 300)	pulseV = 300;
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d0a0:	da02      	bge.n	800d0a8 <button+0x8ec>
 800d0a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d0a6:	60bb      	str	r3, [r7, #8]
				if(pulseV > 2800)	pulseV = 2800;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800d0ae:	dd02      	ble.n	800d0b6 <button+0x8fa>
 800d0b0:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800d0b4:	60bb      	str	r3, [r7, #8]
				if(pulseH < 300)	pulseH = 300;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d0bc:	da02      	bge.n	800d0c4 <button+0x908>
 800d0be:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d0c2:	60fb      	str	r3, [r7, #12]
				if(pulseH > 2800)	pulseH = 2800;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800d0ca:	dd02      	ble.n	800d0d2 <button+0x916>
 800d0cc:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800d0d0:	60fb      	str	r3, [r7, #12]

				if(ps4.button == TRIANGLE){
 800d0d2:	4b7c      	ldr	r3, [pc, #496]	; (800d2c4 <button+0xb08>)
 800d0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0da:	d10b      	bne.n	800d0f4 <button+0x938>
					fx.svbV1 = pulseV;
 800d0dc:	4a7a      	ldr	r2, [pc, #488]	; (800d2c8 <button+0xb0c>)
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	6093      	str	r3, [r2, #8]
					fx.svbH1 = pulseH;
 800d0e2:	4a79      	ldr	r2, [pc, #484]	; (800d2c8 <button+0xb0c>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6013      	str	r3, [r2, #0]
					while(ps4.button == TRIANGLE);
 800d0e8:	bf00      	nop
 800d0ea:	4b76      	ldr	r3, [pc, #472]	; (800d2c4 <button+0xb08>)
 800d0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0f2:	d0fa      	beq.n	800d0ea <button+0x92e>
				}
				if(ps4.button == SQUARE){
 800d0f4:	4b73      	ldr	r3, [pc, #460]	; (800d2c4 <button+0xb08>)
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0fc:	d10b      	bne.n	800d116 <button+0x95a>
					fx.svbV2 = pulseV;
 800d0fe:	4a72      	ldr	r2, [pc, #456]	; (800d2c8 <button+0xb0c>)
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	60d3      	str	r3, [r2, #12]
					fx.svbH2 = pulseH;
 800d104:	4a70      	ldr	r2, [pc, #448]	; (800d2c8 <button+0xb0c>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6053      	str	r3, [r2, #4]
					while(ps4.button == SQUARE);
 800d10a:	bf00      	nop
 800d10c:	4b6d      	ldr	r3, [pc, #436]	; (800d2c4 <button+0xb08>)
 800d10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d114:	d0fa      	beq.n	800d10c <button+0x950>
				}
				if(ps4.button == CROSS){
 800d116:	4b6b      	ldr	r3, [pc, #428]	; (800d2c4 <button+0xb08>)
 800d118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d11e:	d108      	bne.n	800d132 <button+0x976>
					fx.svbV1 = pulseV;
 800d120:	4a69      	ldr	r2, [pc, #420]	; (800d2c8 <button+0xb0c>)
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	6093      	str	r3, [r2, #8]
					while(ps4.button == CROSS);
 800d126:	bf00      	nop
 800d128:	4b66      	ldr	r3, [pc, #408]	; (800d2c4 <button+0xb08>)
 800d12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d12c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d130:	d0fa      	beq.n	800d128 <button+0x96c>
				}
				if(ps4.button == R1){
 800d132:	4b64      	ldr	r3, [pc, #400]	; (800d2c4 <button+0xb08>)
 800d134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d13a:	d136      	bne.n	800d1aa <button+0x9ee>
					while(ps4.button == R1);
 800d13c:	bf00      	nop
 800d13e:	4b61      	ldr	r3, [pc, #388]	; (800d2c4 <button+0xb08>)
 800d140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d146:	d0fa      	beq.n	800d13e <button+0x982>
					led3 = !led3;
 800d148:	4b60      	ldr	r3, [pc, #384]	; (800d2cc <button+0xb10>)
 800d14a:	785b      	ldrb	r3, [r3, #1]
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	4a5f      	ldr	r2, [pc, #380]	; (800d2cc <button+0xb10>)
 800d150:	43db      	mvns	r3, r3
 800d152:	b2db      	uxtb	r3, r3
 800d154:	09db      	lsrs	r3, r3, #7
 800d156:	b2d9      	uxtb	r1, r3
 800d158:	7853      	ldrb	r3, [r2, #1]
 800d15a:	f361 13c7 	bfi	r3, r1, #7, #1
 800d15e:	7053      	strb	r3, [r2, #1]
					if(!fx.cyapp)
 800d160:	4b59      	ldr	r3, [pc, #356]	; (800d2c8 <button+0xb0c>)
 800d162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d105      	bne.n	800d17c <button+0x9c0>
						BgripON
 800d170:	4a56      	ldr	r2, [pc, #344]	; (800d2cc <button+0xb10>)
 800d172:	7853      	ldrb	r3, [r2, #1]
 800d174:	f043 0301 	orr.w	r3, r3, #1
 800d178:	7053      	strb	r3, [r2, #1]
 800d17a:	e004      	b.n	800d186 <button+0x9ca>
					else
						BgripOFF
 800d17c:	4a53      	ldr	r2, [pc, #332]	; (800d2cc <button+0xb10>)
 800d17e:	7853      	ldrb	r3, [r2, #1]
 800d180:	f36f 0300 	bfc	r3, #0, #1
 800d184:	7053      	strb	r3, [r2, #1]
						fx.cyapp = !fx.cyapp;
 800d186:	4b50      	ldr	r3, [pc, #320]	; (800d2c8 <button+0xb0c>)
 800d188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d18c:	f003 0302 	and.w	r3, r3, #2
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b00      	cmp	r3, #0
 800d194:	bf0c      	ite	eq
 800d196:	2301      	moveq	r3, #1
 800d198:	2300      	movne	r3, #0
 800d19a:	b2d9      	uxtb	r1, r3
 800d19c:	4a4a      	ldr	r2, [pc, #296]	; (800d2c8 <button+0xb0c>)
 800d19e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d1a2:	f361 0341 	bfi	r3, r1, #1, #1
 800d1a6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
				}
				svBallhp(pulseH)
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	4848      	ldr	r0, [pc, #288]	; (800d2d0 <button+0xb14>)
 800d1b0:	f7fb fd60 	bl	8008c74 <ServoSetPulse>
				svBallvp(pulseV)
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	4846      	ldr	r0, [pc, #280]	; (800d2d4 <button+0xb18>)
 800d1ba:	f7fb fd5b 	bl	8008c74 <ServoSetPulse>
				Await(150);
 800d1be:	2096      	movs	r0, #150	; 0x96
 800d1c0:	f001 fb90 	bl	800e8e4 <Await>
			while(ps4.button != CIRCLE){
 800d1c4:	4b3f      	ldr	r3, [pc, #252]	; (800d2c4 <button+0xb08>)
 800d1c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1cc:	f47f af24 	bne.w	800d018 <button+0x85c>
			}
			sprintf(data, "BV: %d %d,  BH: %d, %d\n", fx.svbV1, fx.svbV2, fx.svbH1, fx.svbH2);
 800d1d0:	4b3d      	ldr	r3, [pc, #244]	; (800d2c8 <button+0xb0c>)
 800d1d2:	6899      	ldr	r1, [r3, #8]
 800d1d4:	4b3c      	ldr	r3, [pc, #240]	; (800d2c8 <button+0xb0c>)
 800d1d6:	68d8      	ldr	r0, [r3, #12]
 800d1d8:	4b3b      	ldr	r3, [pc, #236]	; (800d2c8 <button+0xb0c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a3a      	ldr	r2, [pc, #232]	; (800d2c8 <button+0xb0c>)
 800d1de:	6852      	ldr	r2, [r2, #4]
 800d1e0:	9201      	str	r2, [sp, #4]
 800d1e2:	9300      	str	r3, [sp, #0]
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	493b      	ldr	r1, [pc, #236]	; (800d2d8 <button+0xb1c>)
 800d1ea:	483c      	ldr	r0, [pc, #240]	; (800d2dc <button+0xb20>)
 800d1ec:	f012 fd88 	bl	801fd00 <siprintf>
			UARTSend
 800d1f0:	493a      	ldr	r1, [pc, #232]	; (800d2dc <button+0xb20>)
 800d1f2:	483b      	ldr	r0, [pc, #236]	; (800d2e0 <button+0xb24>)
 800d1f4:	f7f6 fc3c 	bl	8003a70 <UARTPrintString>
			Await(20);
 800d1f8:	2014      	movs	r0, #20
 800d1fa:	f001 fb73 	bl	800e8e4 <Await>
			sprintf(data, "%d, %d\n", enqpwLG, enqpwLlf);
 800d1fe:	4b39      	ldr	r3, [pc, #228]	; (800d2e4 <button+0xb28>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	4b39      	ldr	r3, [pc, #228]	; (800d2e8 <button+0xb2c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4939      	ldr	r1, [pc, #228]	; (800d2ec <button+0xb30>)
 800d208:	4834      	ldr	r0, [pc, #208]	; (800d2dc <button+0xb20>)
 800d20a:	f012 fd79 	bl	801fd00 <siprintf>
			UARTSend
 800d20e:	4933      	ldr	r1, [pc, #204]	; (800d2dc <button+0xb20>)
 800d210:	4833      	ldr	r0, [pc, #204]	; (800d2e0 <button+0xb24>)
 800d212:	f7f6 fc2d 	bl	8003a70 <UARTPrintString>
			exled1 = 0;
 800d216:	4a36      	ldr	r2, [pc, #216]	; (800d2f0 <button+0xb34>)
 800d218:	7853      	ldrb	r3, [r2, #1]
 800d21a:	f36f 0341 	bfc	r3, #1, #1
 800d21e:	7053      	strb	r3, [r2, #1]
			exled2 = 0;
 800d220:	4a33      	ldr	r2, [pc, #204]	; (800d2f0 <button+0xb34>)
 800d222:	7853      	ldrb	r3, [r2, #1]
 800d224:	f36f 0300 	bfc	r3, #0, #1
 800d228:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800d22a:	bf00      	nop
 800d22c:	4b25      	ldr	r3, [pc, #148]	; (800d2c4 <button+0xb08>)
 800d22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d234:	d0fa      	beq.n	800d22c <button+0xa70>
			break;
 800d236:	e166      	b.n	800d506 <button+0xd4a>
		case 7:
			exled3 = 1;
 800d238:	4a2e      	ldr	r2, [pc, #184]	; (800d2f4 <button+0xb38>)
 800d23a:	7813      	ldrb	r3, [r2, #0]
 800d23c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d240:	7013      	strb	r3, [r2, #0]
			exled4 = 1;
 800d242:	4a2c      	ldr	r2, [pc, #176]	; (800d2f4 <button+0xb38>)
 800d244:	7813      	ldrb	r3, [r2, #0]
 800d246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24a:	7013      	strb	r3, [r2, #0]
			pulseF1 = 1000;
 800d24c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d250:	607b      	str	r3, [r7, #4]
			pulseF2 = 1650;
 800d252:	f240 6372 	movw	r3, #1650	; 0x672
 800d256:	603b      	str	r3, [r7, #0]
			ServoInitPulseLimit(&SERVO_LagoriF1, 300, 2800);
 800d258:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800d25c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d260:	4825      	ldr	r0, [pc, #148]	; (800d2f8 <button+0xb3c>)
 800d262:	f7fb fd50 	bl	8008d06 <ServoInitPulseLimit>
			ServoInitPulseLimit(&SERVO_LagoriF2, 300, 2800);
 800d266:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800d26a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d26e:	4823      	ldr	r0, [pc, #140]	; (800d2fc <button+0xb40>)
 800d270:	f7fb fd49 	bl	8008d06 <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800d274:	e10a      	b.n	800d48c <button+0xcd0>
				if(ps4.button == L1 && ps4.joyR_y >= 0.75)			pulseF2 += 25;
 800d276:	4b13      	ldr	r3, [pc, #76]	; (800d2c4 <button+0xb08>)
 800d278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d27a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d27e:	d10d      	bne.n	800d29c <button+0xae0>
 800d280:	4b10      	ldr	r3, [pc, #64]	; (800d2c4 <button+0xb08>)
 800d282:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d286:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d28a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d292:	db03      	blt.n	800d29c <button+0xae0>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	3319      	adds	r3, #25
 800d298:	603b      	str	r3, [r7, #0]
 800d29a:	e04c      	b.n	800d336 <button+0xb7a>
				else if(ps4.button == L1 && ps4.joyR_y <= -0.75)	pulseF2 -= 25;
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <button+0xb08>)
 800d29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a4:	d12c      	bne.n	800d300 <button+0xb44>
 800d2a6:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <button+0xb08>)
 800d2a8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d2ac:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800d2b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d2b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2b8:	d822      	bhi.n	800d300 <button+0xb44>
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	3b19      	subs	r3, #25
 800d2be:	603b      	str	r3, [r7, #0]
 800d2c0:	e039      	b.n	800d336 <button+0xb7a>
 800d2c2:	bf00      	nop
 800d2c4:	2000a448 	.word	0x2000a448
 800d2c8:	2000a4c4 	.word	0x2000a4c4
 800d2cc:	40020814 	.word	0x40020814
 800d2d0:	20009bf4 	.word	0x20009bf4
 800d2d4:	20009a58 	.word	0x20009a58
 800d2d8:	080248e4 	.word	0x080248e4
 800d2dc:	20006a8c 	.word	0x20006a8c
 800d2e0:	20006c74 	.word	0x20006c74
 800d2e4:	20009ccc 	.word	0x20009ccc
 800d2e8:	20007d7c 	.word	0x20007d7c
 800d2ec:	080248fc 	.word	0x080248fc
 800d2f0:	40020c14 	.word	0x40020c14
 800d2f4:	40020014 	.word	0x40020014
 800d2f8:	20009c44 	.word	0x20009c44
 800d2fc:	2000aa48 	.word	0x2000aa48
				else if(ps4.joyR_y >= 0.75)							pulseF1 += 25;
 800d300:	4b85      	ldr	r3, [pc, #532]	; (800d518 <button+0xd5c>)
 800d302:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d306:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d30a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d312:	db03      	blt.n	800d31c <button+0xb60>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3319      	adds	r3, #25
 800d318:	607b      	str	r3, [r7, #4]
 800d31a:	e00c      	b.n	800d336 <button+0xb7a>
				else if(ps4.joyR_y <= -0.75)						pulseF1 -= 25;
 800d31c:	4b7e      	ldr	r3, [pc, #504]	; (800d518 <button+0xd5c>)
 800d31e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d322:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800d326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d32e:	d802      	bhi.n	800d336 <button+0xb7a>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	3b19      	subs	r3, #25
 800d334:	607b      	str	r3, [r7, #4]

				if(pulseF1 < 300)	pulseF1 = 300;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d33c:	da02      	bge.n	800d344 <button+0xb88>
 800d33e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d342:	607b      	str	r3, [r7, #4]
				if(pulseF1 > 2800)	pulseF1 = 2800;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800d34a:	dd02      	ble.n	800d352 <button+0xb96>
 800d34c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800d350:	607b      	str	r3, [r7, #4]
				if(pulseF2 < 300)	pulseF2 = 300;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d358:	da02      	bge.n	800d360 <button+0xba4>
 800d35a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d35e:	603b      	str	r3, [r7, #0]
				if(pulseF2 > 2800)	pulseF1 = 2800;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 800d366:	dd02      	ble.n	800d36e <button+0xbb2>
 800d368:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 800d36c:	607b      	str	r3, [r7, #4]

				if(ps4.button == TRIANGLE){
 800d36e:	4b6a      	ldr	r3, [pc, #424]	; (800d518 <button+0xd5c>)
 800d370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d376:	d10b      	bne.n	800d390 <button+0xbd4>
					fx.svlgf1 = pulseF1;
 800d378:	4a68      	ldr	r2, [pc, #416]	; (800d51c <button+0xd60>)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6113      	str	r3, [r2, #16]
					fx.svlgf21 = pulseF2;
 800d37e:	4a67      	ldr	r2, [pc, #412]	; (800d51c <button+0xd60>)
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	61d3      	str	r3, [r2, #28]
					while(ps4.button == TRIANGLE);
 800d384:	bf00      	nop
 800d386:	4b64      	ldr	r3, [pc, #400]	; (800d518 <button+0xd5c>)
 800d388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d38e:	d0fa      	beq.n	800d386 <button+0xbca>
				}
				if(ps4.button == SQUARE){
 800d390:	4b61      	ldr	r3, [pc, #388]	; (800d518 <button+0xd5c>)
 800d392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d398:	d10b      	bne.n	800d3b2 <button+0xbf6>
					fx.svlgf2 = pulseF1;
 800d39a:	4a60      	ldr	r2, [pc, #384]	; (800d51c <button+0xd60>)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6153      	str	r3, [r2, #20]
					fx.svlgf22 = pulseF2;
 800d3a0:	4a5e      	ldr	r2, [pc, #376]	; (800d51c <button+0xd60>)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	6213      	str	r3, [r2, #32]
					while(ps4.button == SQUARE);
 800d3a6:	bf00      	nop
 800d3a8:	4b5b      	ldr	r3, [pc, #364]	; (800d518 <button+0xd5c>)
 800d3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3b0:	d0fa      	beq.n	800d3a8 <button+0xbec>
				}
				if(ps4.button == CROSS){
 800d3b2:	4b59      	ldr	r3, [pc, #356]	; (800d518 <button+0xd5c>)
 800d3b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3ba:	d10b      	bne.n	800d3d4 <button+0xc18>
					fx.svlgf3 = pulseF1;
 800d3bc:	4a57      	ldr	r2, [pc, #348]	; (800d51c <button+0xd60>)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6193      	str	r3, [r2, #24]
					fx.svlgf23 = pulseF2;
 800d3c2:	4a56      	ldr	r2, [pc, #344]	; (800d51c <button+0xd60>)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	6253      	str	r3, [r2, #36]	; 0x24
					while(ps4.button == CROSS);
 800d3c8:	bf00      	nop
 800d3ca:	4b53      	ldr	r3, [pc, #332]	; (800d518 <button+0xd5c>)
 800d3cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3d2:	d0fa      	beq.n	800d3ca <button+0xc0e>
				}

				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_x) >= 0.5)
 800d3d4:	4b50      	ldr	r3, [pc, #320]	; (800d518 <button+0xd5c>)
 800d3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3dc:	d11a      	bne.n	800d414 <button+0xc58>
 800d3de:	4b4e      	ldr	r3, [pc, #312]	; (800d518 <button+0xd5c>)
 800d3e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d3e4:	eef0 7ae7 	vabs.f32	s15, s15
 800d3e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d3ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f4:	db0e      	blt.n	800d414 <button+0xc58>
					LGPW(ps4.joyL_x * -6000)
 800d3f6:	4b48      	ldr	r3, [pc, #288]	; (800d518 <button+0xd5c>)
 800d3f8:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800d3fc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d520 <button+0xd64>
 800d400:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d408:	ee17 1a90 	vmov	r1, s15
 800d40c:	4845      	ldr	r0, [pc, #276]	; (800d524 <button+0xd68>)
 800d40e:	f7f3 ffb7 	bl	8001380 <WriteBDC>
 800d412:	e024      	b.n	800d45e <button+0xca2>
				else if(fabs(ps4.joyL_y) >= 0.5)
 800d414:	4b40      	ldr	r3, [pc, #256]	; (800d518 <button+0xd5c>)
 800d416:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d41a:	eef0 7ae7 	vabs.f32	s15, s15
 800d41e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d422:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42a:	db10      	blt.n	800d44e <button+0xc92>
					LFPW(ps4.joyL_y * 6000)
 800d42c:	4b3a      	ldr	r3, [pc, #232]	; (800d518 <button+0xd5c>)
 800d42e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800d432:	eef1 7a67 	vneg.f32	s15, s15
 800d436:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800d520 <button+0xd64>
 800d43a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d43e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d442:	ee17 1a90 	vmov	r1, s15
 800d446:	4838      	ldr	r0, [pc, #224]	; (800d528 <button+0xd6c>)
 800d448:	f7f3 ff9a 	bl	8001380 <WriteBDC>
 800d44c:	e007      	b.n	800d45e <button+0xca2>
				else{
					LGPW(0)
 800d44e:	2100      	movs	r1, #0
 800d450:	4834      	ldr	r0, [pc, #208]	; (800d524 <button+0xd68>)
 800d452:	f7f3 ff95 	bl	8001380 <WriteBDC>
					LFPW(0)
 800d456:	2100      	movs	r1, #0
 800d458:	4833      	ldr	r0, [pc, #204]	; (800d528 <button+0xd6c>)
 800d45a:	f7f3 ff91 	bl	8001380 <WriteBDC>
				}

				svLGF1(pulseF1)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4619      	mov	r1, r3
 800d462:	4832      	ldr	r0, [pc, #200]	; (800d52c <button+0xd70>)
 800d464:	f7fb fc06 	bl	8008c74 <ServoSetPulse>
				svLGF2(pulseF2)
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	4619      	mov	r1, r3
 800d46c:	4830      	ldr	r0, [pc, #192]	; (800d530 <button+0xd74>)
 800d46e:	f7fb fc01 	bl	8008c74 <ServoSetPulse>
				sprintf(data, "%d %d\n", pulseF1, pulseF2);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	492f      	ldr	r1, [pc, #188]	; (800d534 <button+0xd78>)
 800d478:	482f      	ldr	r0, [pc, #188]	; (800d538 <button+0xd7c>)
 800d47a:	f012 fc41 	bl	801fd00 <siprintf>
				UARTSend
 800d47e:	492e      	ldr	r1, [pc, #184]	; (800d538 <button+0xd7c>)
 800d480:	482e      	ldr	r0, [pc, #184]	; (800d53c <button+0xd80>)
 800d482:	f7f6 faf5 	bl	8003a70 <UARTPrintString>
				Await(150);
 800d486:	2096      	movs	r0, #150	; 0x96
 800d488:	f001 fa2c 	bl	800e8e4 <Await>
			while(ps4.button != CIRCLE){
 800d48c:	4b22      	ldr	r3, [pc, #136]	; (800d518 <button+0xd5c>)
 800d48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d494:	f47f aeef 	bne.w	800d276 <button+0xaba>
			}
			sprintf(data, "LF1: %d %d %d\n", fx.svlgf1, fx.svlgf2, fx.svlgf3);
 800d498:	4b20      	ldr	r3, [pc, #128]	; (800d51c <button+0xd60>)
 800d49a:	691a      	ldr	r2, [r3, #16]
 800d49c:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <button+0xd60>)
 800d49e:	6959      	ldr	r1, [r3, #20]
 800d4a0:	4b1e      	ldr	r3, [pc, #120]	; (800d51c <button+0xd60>)
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	4925      	ldr	r1, [pc, #148]	; (800d540 <button+0xd84>)
 800d4aa:	4823      	ldr	r0, [pc, #140]	; (800d538 <button+0xd7c>)
 800d4ac:	f012 fc28 	bl	801fd00 <siprintf>
			UARTSend
 800d4b0:	4921      	ldr	r1, [pc, #132]	; (800d538 <button+0xd7c>)
 800d4b2:	4822      	ldr	r0, [pc, #136]	; (800d53c <button+0xd80>)
 800d4b4:	f7f6 fadc 	bl	8003a70 <UARTPrintString>
			Await(50);
 800d4b8:	2032      	movs	r0, #50	; 0x32
 800d4ba:	f001 fa13 	bl	800e8e4 <Await>
			sprintf(data, "LF2: %d %d %d\n", fx.svlgf21, fx.svlgf22, fx.svlgf23);
 800d4be:	4b17      	ldr	r3, [pc, #92]	; (800d51c <button+0xd60>)
 800d4c0:	69da      	ldr	r2, [r3, #28]
 800d4c2:	4b16      	ldr	r3, [pc, #88]	; (800d51c <button+0xd60>)
 800d4c4:	6a19      	ldr	r1, [r3, #32]
 800d4c6:	4b15      	ldr	r3, [pc, #84]	; (800d51c <button+0xd60>)
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	9300      	str	r3, [sp, #0]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	491d      	ldr	r1, [pc, #116]	; (800d544 <button+0xd88>)
 800d4d0:	4819      	ldr	r0, [pc, #100]	; (800d538 <button+0xd7c>)
 800d4d2:	f012 fc15 	bl	801fd00 <siprintf>
			UARTSend
 800d4d6:	4918      	ldr	r1, [pc, #96]	; (800d538 <button+0xd7c>)
 800d4d8:	4818      	ldr	r0, [pc, #96]	; (800d53c <button+0xd80>)
 800d4da:	f7f6 fac9 	bl	8003a70 <UARTPrintString>
			Await(50);
 800d4de:	2032      	movs	r0, #50	; 0x32
 800d4e0:	f001 fa00 	bl	800e8e4 <Await>
			exled3 = 0;
 800d4e4:	4a18      	ldr	r2, [pc, #96]	; (800d548 <button+0xd8c>)
 800d4e6:	7813      	ldrb	r3, [r2, #0]
 800d4e8:	f36f 13c7 	bfc	r3, #7, #1
 800d4ec:	7013      	strb	r3, [r2, #0]
			exled4 = 0;
 800d4ee:	4a16      	ldr	r2, [pc, #88]	; (800d548 <button+0xd8c>)
 800d4f0:	7813      	ldrb	r3, [r2, #0]
 800d4f2:	f36f 1386 	bfc	r3, #6, #1
 800d4f6:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800d4f8:	bf00      	nop
 800d4fa:	4b07      	ldr	r3, [pc, #28]	; (800d518 <button+0xd5c>)
 800d4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d502:	d0fa      	beq.n	800d4fa <button+0xd3e>
			break;
 800d504:	bf00      	nop
		}
		press = 0;
 800d506:	4b11      	ldr	r3, [pc, #68]	; (800d54c <button+0xd90>)
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
	}
}
 800d50c:	bf00      	nop
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d516:	bf00      	nop
 800d518:	2000a448 	.word	0x2000a448
 800d51c:	2000a4c4 	.word	0x2000a4c4
 800d520:	45bb8000 	.word	0x45bb8000
 800d524:	2000aa24 	.word	0x2000aa24
 800d528:	20007cd4 	.word	0x20007cd4
 800d52c:	20009c44 	.word	0x20009c44
 800d530:	2000aa48 	.word	0x2000aa48
 800d534:	08024904 	.word	0x08024904
 800d538:	20006a8c 	.word	0x20006a8c
 800d53c:	20006c74 	.word	0x20006c74
 800d540:	080248a0 	.word	0x080248a0
 800d544:	080248b0 	.word	0x080248b0
 800d548:	40020014 	.word	0x40020014
 800d54c:	2000a03c 	.word	0x2000a03c

0800d550 <limit_sw>:

void limit_sw(void){
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
	if(!(lsLGl))
 800d554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d558:	4836      	ldr	r0, [pc, #216]	; (800d634 <limit_sw+0xe4>)
 800d55a:	f009 f905 	bl	8016768 <HAL_GPIO_ReadPin>
 800d55e:	4603      	mov	r3, r0
 800d560:	2b01      	cmp	r3, #1
 800d562:	d005      	beq.n	800d570 <limit_sw+0x20>
		exled1 = 1;
 800d564:	4a34      	ldr	r2, [pc, #208]	; (800d638 <limit_sw+0xe8>)
 800d566:	7853      	ldrb	r3, [r2, #1]
 800d568:	f043 0302 	orr.w	r3, r3, #2
 800d56c:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
		exled4 = 0;
		exled5 = 0;
		exled6 = 0;
	}
}
 800d56e:	e05e      	b.n	800d62e <limit_sw+0xde>
	else if(!(lsLGr))
 800d570:	2108      	movs	r1, #8
 800d572:	4832      	ldr	r0, [pc, #200]	; (800d63c <limit_sw+0xec>)
 800d574:	f009 f8f8 	bl	8016768 <HAL_GPIO_ReadPin>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d005      	beq.n	800d58a <limit_sw+0x3a>
		exled2 = 1;
 800d57e:	4a2e      	ldr	r2, [pc, #184]	; (800d638 <limit_sw+0xe8>)
 800d580:	7853      	ldrb	r3, [r2, #1]
 800d582:	f043 0301 	orr.w	r3, r3, #1
 800d586:	7053      	strb	r3, [r2, #1]
}
 800d588:	e051      	b.n	800d62e <limit_sw+0xde>
	else if(!(lsl1))
 800d58a:	2110      	movs	r1, #16
 800d58c:	482b      	ldr	r0, [pc, #172]	; (800d63c <limit_sw+0xec>)
 800d58e:	f009 f8eb 	bl	8016768 <HAL_GPIO_ReadPin>
 800d592:	4603      	mov	r3, r0
 800d594:	2b01      	cmp	r3, #1
 800d596:	d005      	beq.n	800d5a4 <limit_sw+0x54>
		exled3 = 1;
 800d598:	4a29      	ldr	r2, [pc, #164]	; (800d640 <limit_sw+0xf0>)
 800d59a:	7813      	ldrb	r3, [r2, #0]
 800d59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a0:	7013      	strb	r3, [r2, #0]
}
 800d5a2:	e044      	b.n	800d62e <limit_sw+0xde>
	else if(!(lsl2))
 800d5a4:	2180      	movs	r1, #128	; 0x80
 800d5a6:	4825      	ldr	r0, [pc, #148]	; (800d63c <limit_sw+0xec>)
 800d5a8:	f009 f8de 	bl	8016768 <HAL_GPIO_ReadPin>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d005      	beq.n	800d5be <limit_sw+0x6e>
		exled4 = 1;
 800d5b2:	4a23      	ldr	r2, [pc, #140]	; (800d640 <limit_sw+0xf0>)
 800d5b4:	7813      	ldrb	r3, [r2, #0]
 800d5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ba:	7013      	strb	r3, [r2, #0]
}
 800d5bc:	e037      	b.n	800d62e <limit_sw+0xde>
	else if(!(lsr1))
 800d5be:	2120      	movs	r1, #32
 800d5c0:	4820      	ldr	r0, [pc, #128]	; (800d644 <limit_sw+0xf4>)
 800d5c2:	f009 f8d1 	bl	8016768 <HAL_GPIO_ReadPin>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d005      	beq.n	800d5d8 <limit_sw+0x88>
		exled5 = 1;
 800d5cc:	4a1c      	ldr	r2, [pc, #112]	; (800d640 <limit_sw+0xf0>)
 800d5ce:	7813      	ldrb	r3, [r2, #0]
 800d5d0:	f043 0320 	orr.w	r3, r3, #32
 800d5d4:	7013      	strb	r3, [r2, #0]
}
 800d5d6:	e02a      	b.n	800d62e <limit_sw+0xde>
	else if(!(lsr2))
 800d5d8:	2140      	movs	r1, #64	; 0x40
 800d5da:	481a      	ldr	r0, [pc, #104]	; (800d644 <limit_sw+0xf4>)
 800d5dc:	f009 f8c4 	bl	8016768 <HAL_GPIO_ReadPin>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d005      	beq.n	800d5f2 <limit_sw+0xa2>
		exled6 = 1;
 800d5e6:	4a16      	ldr	r2, [pc, #88]	; (800d640 <limit_sw+0xf0>)
 800d5e8:	7813      	ldrb	r3, [r2, #0]
 800d5ea:	f043 0310 	orr.w	r3, r3, #16
 800d5ee:	7013      	strb	r3, [r2, #0]
}
 800d5f0:	e01d      	b.n	800d62e <limit_sw+0xde>
		exled1 = 0;
 800d5f2:	4a11      	ldr	r2, [pc, #68]	; (800d638 <limit_sw+0xe8>)
 800d5f4:	7853      	ldrb	r3, [r2, #1]
 800d5f6:	f36f 0341 	bfc	r3, #1, #1
 800d5fa:	7053      	strb	r3, [r2, #1]
		exled2 = 0;
 800d5fc:	4a0e      	ldr	r2, [pc, #56]	; (800d638 <limit_sw+0xe8>)
 800d5fe:	7853      	ldrb	r3, [r2, #1]
 800d600:	f36f 0300 	bfc	r3, #0, #1
 800d604:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
 800d606:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <limit_sw+0xf0>)
 800d608:	7813      	ldrb	r3, [r2, #0]
 800d60a:	f36f 13c7 	bfc	r3, #7, #1
 800d60e:	7013      	strb	r3, [r2, #0]
		exled4 = 0;
 800d610:	4a0b      	ldr	r2, [pc, #44]	; (800d640 <limit_sw+0xf0>)
 800d612:	7813      	ldrb	r3, [r2, #0]
 800d614:	f36f 1386 	bfc	r3, #6, #1
 800d618:	7013      	strb	r3, [r2, #0]
		exled5 = 0;
 800d61a:	4a09      	ldr	r2, [pc, #36]	; (800d640 <limit_sw+0xf0>)
 800d61c:	7813      	ldrb	r3, [r2, #0]
 800d61e:	f36f 1345 	bfc	r3, #5, #1
 800d622:	7013      	strb	r3, [r2, #0]
		exled6 = 0;
 800d624:	4a06      	ldr	r2, [pc, #24]	; (800d640 <limit_sw+0xf0>)
 800d626:	7813      	ldrb	r3, [r2, #0]
 800d628:	f36f 1304 	bfc	r3, #4, #1
 800d62c:	7013      	strb	r3, [r2, #0]
}
 800d62e:	bf00      	nop
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	40020000 	.word	0x40020000
 800d638:	40020c14 	.word	0x40020c14
 800d63c:	40020c00 	.word	0x40020c00
 800d640:	40020014 	.word	0x40020014
 800d644:	40020400 	.word	0x40020400

0800d648 <functest>:
	exled5 = 0;
	exled6 = 0;
	Await(20);
}

void functest(void){
 800d648:	b580      	push	{r7, lr}
 800d64a:	af00      	add	r7, sp, #0
	//NAVI
	if(ps4.button == R1)
 800d64c:	4b9e      	ldr	r3, [pc, #632]	; (800d8c8 <functest+0x280>)
 800d64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d654:	d103      	bne.n	800d65e <functest+0x16>
		MODN.speed = 7.0;
 800d656:	4b9d      	ldr	r3, [pc, #628]	; (800d8cc <functest+0x284>)
 800d658:	4a9d      	ldr	r2, [pc, #628]	; (800d8d0 <functest+0x288>)
 800d65a:	61da      	str	r2, [r3, #28]
 800d65c:	e00c      	b.n	800d678 <functest+0x30>
	else if(ps4.button == L1)
 800d65e:	4b9a      	ldr	r3, [pc, #616]	; (800d8c8 <functest+0x280>)
 800d660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d666:	d104      	bne.n	800d672 <functest+0x2a>
		MODN.speed = 2.0;
 800d668:	4b98      	ldr	r3, [pc, #608]	; (800d8cc <functest+0x284>)
 800d66a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d66e:	61da      	str	r2, [r3, #28]
 800d670:	e002      	b.n	800d678 <functest+0x30>
	else
		MODN.speed = 4.5;
 800d672:	4b96      	ldr	r3, [pc, #600]	; (800d8cc <functest+0x284>)
 800d674:	4a97      	ldr	r2, [pc, #604]	; (800d8d4 <functest+0x28c>)
 800d676:	61da      	str	r2, [r3, #28]
	realMODN(&ps4, &rns);
 800d678:	4997      	ldr	r1, [pc, #604]	; (800d8d8 <functest+0x290>)
 800d67a:	4893      	ldr	r0, [pc, #588]	; (800d8c8 <functest+0x280>)
 800d67c:	f7f8 fc04 	bl	8005e88 <realMODN>

	//power window (direction)
	if(ps4.button == L1 && fabs(ps4.joyR_x) >= 0.5)
 800d680:	4b91      	ldr	r3, [pc, #580]	; (800d8c8 <functest+0x280>)
 800d682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d688:	d11c      	bne.n	800d6c4 <functest+0x7c>
 800d68a:	4b8f      	ldr	r3, [pc, #572]	; (800d8c8 <functest+0x280>)
 800d68c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d690:	eef0 7ae7 	vabs.f32	s15, s15
 800d694:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a0:	db10      	blt.n	800d6c4 <functest+0x7c>
		LGPW(ps4.joyR_x * 6000)
 800d6a2:	4b89      	ldr	r3, [pc, #548]	; (800d8c8 <functest+0x280>)
 800d6a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800d6a8:	eef1 7a67 	vneg.f32	s15, s15
 800d6ac:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800d8dc <functest+0x294>
 800d6b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6b8:	ee17 1a90 	vmov	r1, s15
 800d6bc:	4888      	ldr	r0, [pc, #544]	; (800d8e0 <functest+0x298>)
 800d6be:	f7f3 fe5f 	bl	8001380 <WriteBDC>
 800d6c2:	e03d      	b.n	800d740 <functest+0xf8>
	else if(ps4.joyR_y >= 0.5)
 800d6c4:	4b80      	ldr	r3, [pc, #512]	; (800d8c8 <functest+0x280>)
 800d6c6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d6ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d6ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d6:	db10      	blt.n	800d6fa <functest+0xb2>
		LFPW(ps4.joyR_y * 7500)
 800d6d8:	4b7b      	ldr	r3, [pc, #492]	; (800d8c8 <functest+0x280>)
 800d6da:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d6de:	eef1 7a67 	vneg.f32	s15, s15
 800d6e2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800d8e4 <functest+0x29c>
 800d6e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ee:	ee17 1a90 	vmov	r1, s15
 800d6f2:	487d      	ldr	r0, [pc, #500]	; (800d8e8 <functest+0x2a0>)
 800d6f4:	f7f3 fe44 	bl	8001380 <WriteBDC>
 800d6f8:	e022      	b.n	800d740 <functest+0xf8>
	else if(ps4.joyR_y <= -0.5)
 800d6fa:	4b73      	ldr	r3, [pc, #460]	; (800d8c8 <functest+0x280>)
 800d6fc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d700:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d704:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	d810      	bhi.n	800d730 <functest+0xe8>
		LFPW(ps4.joyR_y * 6000)
 800d70e:	4b6e      	ldr	r3, [pc, #440]	; (800d8c8 <functest+0x280>)
 800d710:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d714:	eef1 7a67 	vneg.f32	s15, s15
 800d718:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800d8dc <functest+0x294>
 800d71c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d724:	ee17 1a90 	vmov	r1, s15
 800d728:	486f      	ldr	r0, [pc, #444]	; (800d8e8 <functest+0x2a0>)
 800d72a:	f7f3 fe29 	bl	8001380 <WriteBDC>
 800d72e:	e007      	b.n	800d740 <functest+0xf8>
	else{
		LFPW(0)
 800d730:	2100      	movs	r1, #0
 800d732:	486d      	ldr	r0, [pc, #436]	; (800d8e8 <functest+0x2a0>)
 800d734:	f7f3 fe24 	bl	8001380 <WriteBDC>
		LGPW(0)
 800d738:	2100      	movs	r1, #0
 800d73a:	4869      	ldr	r0, [pc, #420]	; (800d8e0 <functest+0x298>)
 800d73c:	f7f3 fe20 	bl	8001380 <WriteBDC>
	}

	if(ps4.button == OPTION){
 800d740:	4b61      	ldr	r3, [pc, #388]	; (800d8c8 <functest+0x280>)
 800d742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d748:	d107      	bne.n	800d75a <functest+0x112>
		n = 8;
 800d74a:	4b68      	ldr	r3, [pc, #416]	; (800d8ec <functest+0x2a4>)
 800d74c:	2208      	movs	r2, #8
 800d74e:	601a      	str	r2, [r3, #0]
		enq();
 800d750:	f000 fc22 	bl	800df98 <enq>
		Await(200);
 800d754:	20c8      	movs	r0, #200	; 0xc8
 800d756:	f001 f8c5 	bl	800e8e4 <Await>
	}

	if(ps4.button == SHARE){
 800d75a:	4b5b      	ldr	r3, [pc, #364]	; (800d8c8 <functest+0x280>)
 800d75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d105      	bne.n	800d76e <functest+0x126>
		QEIReset(QEI1);
 800d762:	2001      	movs	r0, #1
 800d764:	f7f4 fb32 	bl	8001dcc <QEIReset>
		QEIReset(QEI4);
 800d768:	2004      	movs	r0, #4
 800d76a:	f7f4 fb2f 	bl	8001dcc <QEIReset>
	}

	//test SERVO at ball gripper
	if(ps4.button == UP){
 800d76e:	4b56      	ldr	r3, [pc, #344]	; (800d8c8 <functest+0x280>)
 800d770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d772:	2b10      	cmp	r3, #16
 800d774:	d136      	bne.n	800d7e4 <functest+0x19c>
		while(ps4.button == UP);
 800d776:	bf00      	nop
 800d778:	4b53      	ldr	r3, [pc, #332]	; (800d8c8 <functest+0x280>)
 800d77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d77c:	2b10      	cmp	r3, #16
 800d77e:	d0fb      	beq.n	800d778 <functest+0x130>
		led3 = !led3;
 800d780:	4b5b      	ldr	r3, [pc, #364]	; (800d8f0 <functest+0x2a8>)
 800d782:	785b      	ldrb	r3, [r3, #1]
 800d784:	b25b      	sxtb	r3, r3
 800d786:	4a5a      	ldr	r2, [pc, #360]	; (800d8f0 <functest+0x2a8>)
 800d788:	43db      	mvns	r3, r3
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	09db      	lsrs	r3, r3, #7
 800d78e:	b2d9      	uxtb	r1, r3
 800d790:	7853      	ldrb	r3, [r2, #1]
 800d792:	f361 13c7 	bfi	r3, r1, #7, #1
 800d796:	7053      	strb	r3, [r2, #1]
		if(!fx.svapp){
 800d798:	4b56      	ldr	r3, [pc, #344]	; (800d8f4 <functest+0x2ac>)
 800d79a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d105      	bne.n	800d7b4 <functest+0x16c>
			svBRup
 800d7a8:	f44f 7116 	mov.w	r1, #600	; 0x258
 800d7ac:	4852      	ldr	r0, [pc, #328]	; (800d8f8 <functest+0x2b0>)
 800d7ae:	f7fb fa61 	bl	8008c74 <ServoSetPulse>
 800d7b2:	e004      	b.n	800d7be <functest+0x176>
		}
		else{
			svBRdown
 800d7b4:	f640 11f6 	movw	r1, #2550	; 0x9f6
 800d7b8:	484f      	ldr	r0, [pc, #316]	; (800d8f8 <functest+0x2b0>)
 800d7ba:	f7fb fa5b 	bl	8008c74 <ServoSetPulse>
		}
		fx.svapp = !fx.svapp;
 800d7be:	4b4d      	ldr	r3, [pc, #308]	; (800d8f4 <functest+0x2ac>)
 800d7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2301      	moveq	r3, #1
 800d7d0:	2300      	movne	r3, #0
 800d7d2:	b2d9      	uxtb	r1, r3
 800d7d4:	4a47      	ldr	r2, [pc, #284]	; (800d8f4 <functest+0x2ac>)
 800d7d6:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d7da:	f361 0300 	bfi	r3, r1, #0, #1
 800d7de:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800d7e2:	e0ad      	b.n	800d940 <functest+0x2f8>
	}
	else if(ps4.button == LEFT){
 800d7e4:	4b38      	ldr	r3, [pc, #224]	; (800d8c8 <functest+0x280>)
 800d7e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7e8:	2b80      	cmp	r3, #128	; 0x80
 800d7ea:	d136      	bne.n	800d85a <functest+0x212>
		while(ps4.button == LEFT);
 800d7ec:	bf00      	nop
 800d7ee:	4b36      	ldr	r3, [pc, #216]	; (800d8c8 <functest+0x280>)
 800d7f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f2:	2b80      	cmp	r3, #128	; 0x80
 800d7f4:	d0fb      	beq.n	800d7ee <functest+0x1a6>
		led3 = !led3;
 800d7f6:	4b3e      	ldr	r3, [pc, #248]	; (800d8f0 <functest+0x2a8>)
 800d7f8:	785b      	ldrb	r3, [r3, #1]
 800d7fa:	b25b      	sxtb	r3, r3
 800d7fc:	4a3c      	ldr	r2, [pc, #240]	; (800d8f0 <functest+0x2a8>)
 800d7fe:	43db      	mvns	r3, r3
 800d800:	b2db      	uxtb	r3, r3
 800d802:	09db      	lsrs	r3, r3, #7
 800d804:	b2d9      	uxtb	r1, r3
 800d806:	7853      	ldrb	r3, [r2, #1]
 800d808:	f361 13c7 	bfi	r3, r1, #7, #1
 800d80c:	7053      	strb	r3, [r2, #1]
		if(!fx.svapp){
 800d80e:	4b39      	ldr	r3, [pc, #228]	; (800d8f4 <functest+0x2ac>)
 800d810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d814:	f003 0301 	and.w	r3, r3, #1
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d105      	bne.n	800d82a <functest+0x1e2>
			svBRA
 800d81e:	f640 0134 	movw	r1, #2100	; 0x834
 800d822:	4836      	ldr	r0, [pc, #216]	; (800d8fc <functest+0x2b4>)
 800d824:	f7fb fa26 	bl	8008c74 <ServoSetPulse>
 800d828:	e004      	b.n	800d834 <functest+0x1ec>
		}
		else{
			svBRB
 800d82a:	f240 3123 	movw	r1, #803	; 0x323
 800d82e:	4833      	ldr	r0, [pc, #204]	; (800d8fc <functest+0x2b4>)
 800d830:	f7fb fa20 	bl	8008c74 <ServoSetPulse>
		}
		fx.svapp = !fx.svapp;
 800d834:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <functest+0x2ac>)
 800d836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	2b00      	cmp	r3, #0
 800d842:	bf0c      	ite	eq
 800d844:	2301      	moveq	r3, #1
 800d846:	2300      	movne	r3, #0
 800d848:	b2d9      	uxtb	r1, r3
 800d84a:	4a2a      	ldr	r2, [pc, #168]	; (800d8f4 <functest+0x2ac>)
 800d84c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d850:	f361 0300 	bfi	r3, r1, #0, #1
 800d854:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800d858:	e072      	b.n	800d940 <functest+0x2f8>
	}

	//test flipping servo
	else if(ps4.button == DOWN){
 800d85a:	4b1b      	ldr	r3, [pc, #108]	; (800d8c8 <functest+0x280>)
 800d85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d85e:	2b40      	cmp	r3, #64	; 0x40
 800d860:	d16e      	bne.n	800d940 <functest+0x2f8>
		svNoFlip
 800d862:	f240 4101 	movw	r1, #1025	; 0x401
 800d866:	4826      	ldr	r0, [pc, #152]	; (800d900 <functest+0x2b8>)
 800d868:	f7fb fa04 	bl	8008c74 <ServoSetPulse>
 800d86c:	f240 61ef 	movw	r1, #1775	; 0x6ef
 800d870:	4824      	ldr	r0, [pc, #144]	; (800d904 <functest+0x2bc>)
 800d872:	f7fb f9ff 	bl	8008c74 <ServoSetPulse>
		while(ps4.button == DOWN);
 800d876:	bf00      	nop
 800d878:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <functest+0x280>)
 800d87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d87c:	2b40      	cmp	r3, #64	; 0x40
 800d87e:	d0fb      	beq.n	800d878 <functest+0x230>
		if(ps4.button == L1_DOWN){
 800d880:	4b11      	ldr	r3, [pc, #68]	; (800d8c8 <functest+0x280>)
 800d882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d884:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800d888:	d15a      	bne.n	800d940 <functest+0x2f8>
			led3 = !led3;
 800d88a:	4b19      	ldr	r3, [pc, #100]	; (800d8f0 <functest+0x2a8>)
 800d88c:	785b      	ldrb	r3, [r3, #1]
 800d88e:	b25b      	sxtb	r3, r3
 800d890:	4a17      	ldr	r2, [pc, #92]	; (800d8f0 <functest+0x2a8>)
 800d892:	43db      	mvns	r3, r3
 800d894:	b2db      	uxtb	r3, r3
 800d896:	09db      	lsrs	r3, r3, #7
 800d898:	b2d9      	uxtb	r1, r3
 800d89a:	7853      	ldrb	r3, [r2, #1]
 800d89c:	f361 13c7 	bfi	r3, r1, #7, #1
 800d8a0:	7053      	strb	r3, [r2, #1]
			if(!fx.svapp){
 800d8a2:	4b14      	ldr	r3, [pc, #80]	; (800d8f4 <functest+0x2ac>)
 800d8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8a8:	f003 0301 	and.w	r3, r3, #1
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d12a      	bne.n	800d908 <functest+0x2c0>
				svCloseFlip
 800d8b2:	f240 719e 	movw	r1, #1950	; 0x79e
 800d8b6:	4812      	ldr	r0, [pc, #72]	; (800d900 <functest+0x2b8>)
 800d8b8:	f7fb f9dc 	bl	8008c74 <ServoSetPulse>
 800d8bc:	f44f 7161 	mov.w	r1, #900	; 0x384
 800d8c0:	4810      	ldr	r0, [pc, #64]	; (800d904 <functest+0x2bc>)
 800d8c2:	f7fb f9d7 	bl	8008c74 <ServoSetPulse>
 800d8c6:	e029      	b.n	800d91c <functest+0x2d4>
 800d8c8:	2000a448 	.word	0x2000a448
 800d8cc:	200076bc 	.word	0x200076bc
 800d8d0:	40e00000 	.word	0x40e00000
 800d8d4:	40900000 	.word	0x40900000
 800d8d8:	200093ec 	.word	0x200093ec
 800d8dc:	45bb8000 	.word	0x45bb8000
 800d8e0:	2000aa24 	.word	0x2000aa24
 800d8e4:	45ea6000 	.word	0x45ea6000
 800d8e8:	20007cd4 	.word	0x20007cd4
 800d8ec:	2000767c 	.word	0x2000767c
 800d8f0:	40020814 	.word	0x40020814
 800d8f4:	2000a4c4 	.word	0x2000a4c4
 800d8f8:	20009a58 	.word	0x20009a58
 800d8fc:	20009bf4 	.word	0x20009bf4
 800d900:	20009c44 	.word	0x20009c44
 800d904:	2000aa48 	.word	0x2000aa48
			}
			else{
				svFlip
 800d908:	f240 2126 	movw	r1, #550	; 0x226
 800d90c:	482b      	ldr	r0, [pc, #172]	; (800d9bc <functest+0x374>)
 800d90e:	f7fb f9b1 	bl	8008c74 <ServoSetPulse>
 800d912:	f640 01da 	movw	r1, #2266	; 0x8da
 800d916:	482a      	ldr	r0, [pc, #168]	; (800d9c0 <functest+0x378>)
 800d918:	f7fb f9ac 	bl	8008c74 <ServoSetPulse>
			}
			fx.svapp = !fx.svapp;
 800d91c:	4b29      	ldr	r3, [pc, #164]	; (800d9c4 <functest+0x37c>)
 800d91e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d922:	f003 0301 	and.w	r3, r3, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bf0c      	ite	eq
 800d92c:	2301      	moveq	r3, #1
 800d92e:	2300      	movne	r3, #0
 800d930:	b2d9      	uxtb	r1, r3
 800d932:	4a24      	ldr	r2, [pc, #144]	; (800d9c4 <functest+0x37c>)
 800d934:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d938:	f361 0300 	bfi	r3, r1, #0, #1
 800d93c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		}
	}

	//test ball cylinder
	if(ps4.button == TRIANGLE){
 800d940:	4b21      	ldr	r3, [pc, #132]	; (800d9c8 <functest+0x380>)
 800d942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d948:	d136      	bne.n	800d9b8 <functest+0x370>
		while(ps4.button == TRIANGLE);
 800d94a:	bf00      	nop
 800d94c:	4b1e      	ldr	r3, [pc, #120]	; (800d9c8 <functest+0x380>)
 800d94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d954:	d0fa      	beq.n	800d94c <functest+0x304>
		led3 = !led3;
 800d956:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <functest+0x384>)
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	b25b      	sxtb	r3, r3
 800d95c:	4a1b      	ldr	r2, [pc, #108]	; (800d9cc <functest+0x384>)
 800d95e:	43db      	mvns	r3, r3
 800d960:	b2db      	uxtb	r3, r3
 800d962:	09db      	lsrs	r3, r3, #7
 800d964:	b2d9      	uxtb	r1, r3
 800d966:	7853      	ldrb	r3, [r2, #1]
 800d968:	f361 13c7 	bfi	r3, r1, #7, #1
 800d96c:	7053      	strb	r3, [r2, #1]
		if(!fx.cyapp)
 800d96e:	4b15      	ldr	r3, [pc, #84]	; (800d9c4 <functest+0x37c>)
 800d970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d974:	f003 0302 	and.w	r3, r3, #2
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <functest+0x342>
			BgripOFF
 800d97e:	4a13      	ldr	r2, [pc, #76]	; (800d9cc <functest+0x384>)
 800d980:	7853      	ldrb	r3, [r2, #1]
 800d982:	f36f 0300 	bfc	r3, #0, #1
 800d986:	7053      	strb	r3, [r2, #1]
 800d988:	e004      	b.n	800d994 <functest+0x34c>
		else
			BgripON
 800d98a:	4a10      	ldr	r2, [pc, #64]	; (800d9cc <functest+0x384>)
 800d98c:	7853      	ldrb	r3, [r2, #1]
 800d98e:	f043 0301 	orr.w	r3, r3, #1
 800d992:	7053      	strb	r3, [r2, #1]
		fx.cyapp = !fx.cyapp;
 800d994:	4b0b      	ldr	r3, [pc, #44]	; (800d9c4 <functest+0x37c>)
 800d996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d99a:	f003 0302 	and.w	r3, r3, #2
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bf0c      	ite	eq
 800d9a4:	2301      	moveq	r3, #1
 800d9a6:	2300      	movne	r3, #0
 800d9a8:	b2d9      	uxtb	r1, r3
 800d9aa:	4a06      	ldr	r2, [pc, #24]	; (800d9c4 <functest+0x37c>)
 800d9ac:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800d9b0:	f361 0341 	bfi	r3, r1, #1, #1
 800d9b4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
}
 800d9b8:	bf00      	nop
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	20009c44 	.word	0x20009c44
 800d9c0:	2000aa48 	.word	0x2000aa48
 800d9c4:	2000a4c4 	.word	0x2000a4c4
 800d9c8:	2000a448 	.word	0x2000a448
 800d9cc:	40020814 	.word	0x40020814

0800d9d0 <SERVO_getPulse>:

void SERVO_getPulse(void){
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	af00      	add	r7, sp, #0
	if(ps4.joyR_y >= 0.75){
 800d9d4:	4b11      	ldr	r3, [pc, #68]	; (800da1c <SERVO_getPulse+0x4c>)
 800d9d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d9da:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800d9de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e6:	db04      	blt.n	800d9f2 <SERVO_getPulse+0x22>
		pulse += 25;
 800d9e8:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <SERVO_getPulse+0x50>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3319      	adds	r3, #25
 800d9ee:	4a0c      	ldr	r2, [pc, #48]	; (800da20 <SERVO_getPulse+0x50>)
 800d9f0:	6013      	str	r3, [r2, #0]
	}
	if(ps4.joyR_y <= -0.75){
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <SERVO_getPulse+0x4c>)
 800d9f4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800d9f8:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800d9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da04:	d804      	bhi.n	800da10 <SERVO_getPulse+0x40>
		pulse -= 25;
 800da06:	4b06      	ldr	r3, [pc, #24]	; (800da20 <SERVO_getPulse+0x50>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3b19      	subs	r3, #25
 800da0c:	4a04      	ldr	r2, [pc, #16]	; (800da20 <SERVO_getPulse+0x50>)
 800da0e:	6013      	str	r3, [r2, #0]
	}
	Await(100);
 800da10:	2064      	movs	r0, #100	; 0x64
 800da12:	f000 ff67 	bl	800e8e4 <Await>
}
 800da16:	bf00      	nop
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2000a448 	.word	0x2000a448
 800da20:	20009b0c 	.word	0x20009b0c
 800da24:	00000000 	.word	0x00000000

0800da28 <KFilterAdjust>:

void KFilterAdjust(void){
 800da28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da2c:	b08c      	sub	sp, #48	; 0x30
 800da2e:	af08      	add	r7, sp, #32
	static float avg_x = 0, avg_y = 0;
	static float kf[2][3]={{7.27, 16.03, 0.15}, {7.5, 12.01, 2.0}};
	static int arr_x = 0, arr_y = 0, num = 0, n = 0;
	while(ps4.button == TRIANGLE){
 800da30:	e089      	b.n	800db46 <KFilterAdjust+0x11e>
		avg_x = (avg_x * n + adc.ADC_value[0]) / (n + 1);
 800da32:	4b50      	ldr	r3, [pc, #320]	; (800db74 <KFilterAdjust+0x14c>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	ee07 3a90 	vmov	s15, r3
 800da3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da3e:	4b4e      	ldr	r3, [pc, #312]	; (800db78 <KFilterAdjust+0x150>)
 800da40:	edd3 7a00 	vldr	s15, [r3]
 800da44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da48:	4b4c      	ldr	r3, [pc, #304]	; (800db7c <KFilterAdjust+0x154>)
 800da4a:	899b      	ldrh	r3, [r3, #12]
 800da4c:	ee07 3a90 	vmov	s15, r3
 800da50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da54:	ee77 6a27 	vadd.f32	s13, s14, s15
 800da58:	4b46      	ldr	r3, [pc, #280]	; (800db74 <KFilterAdjust+0x14c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	3301      	adds	r3, #1
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da6a:	4b43      	ldr	r3, [pc, #268]	; (800db78 <KFilterAdjust+0x150>)
 800da6c:	edc3 7a00 	vstr	s15, [r3]
		avg_y = (avg_y * n + adc.ADC_value[1]) / (n + 1);
 800da70:	4b40      	ldr	r3, [pc, #256]	; (800db74 <KFilterAdjust+0x14c>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	ee07 3a90 	vmov	s15, r3
 800da78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800da7c:	4b40      	ldr	r3, [pc, #256]	; (800db80 <KFilterAdjust+0x158>)
 800da7e:	edd3 7a00 	vldr	s15, [r3]
 800da82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da86:	4b3d      	ldr	r3, [pc, #244]	; (800db7c <KFilterAdjust+0x154>)
 800da88:	89db      	ldrh	r3, [r3, #14]
 800da8a:	ee07 3a90 	vmov	s15, r3
 800da8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da92:	ee77 6a27 	vadd.f32	s13, s14, s15
 800da96:	4b37      	ldr	r3, [pc, #220]	; (800db74 <KFilterAdjust+0x14c>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	3301      	adds	r3, #1
 800da9c:	ee07 3a90 	vmov	s15, r3
 800daa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800daa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daa8:	4b35      	ldr	r3, [pc, #212]	; (800db80 <KFilterAdjust+0x158>)
 800daaa:	edc3 7a00 	vstr	s15, [r3]
		sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n", avg_x, x_kfo, avg_y, y_kfo, y_kfoav);
 800daae:	4b32      	ldr	r3, [pc, #200]	; (800db78 <KFilterAdjust+0x150>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7f2 fd48 	bl	8000548 <__aeabi_f2d>
 800dab8:	e9c7 0100 	strd	r0, r1, [r7]
 800dabc:	4b31      	ldr	r3, [pc, #196]	; (800db84 <KFilterAdjust+0x15c>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7f2 fd41 	bl	8000548 <__aeabi_f2d>
 800dac6:	4604      	mov	r4, r0
 800dac8:	460d      	mov	r5, r1
 800daca:	4b2d      	ldr	r3, [pc, #180]	; (800db80 <KFilterAdjust+0x158>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f2 fd3a 	bl	8000548 <__aeabi_f2d>
 800dad4:	4680      	mov	r8, r0
 800dad6:	4689      	mov	r9, r1
 800dad8:	4b2b      	ldr	r3, [pc, #172]	; (800db88 <KFilterAdjust+0x160>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f2 fd33 	bl	8000548 <__aeabi_f2d>
 800dae2:	4682      	mov	sl, r0
 800dae4:	468b      	mov	fp, r1
 800dae6:	4b29      	ldr	r3, [pc, #164]	; (800db8c <KFilterAdjust+0x164>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4618      	mov	r0, r3
 800daec:	f7f2 fd2c 	bl	8000548 <__aeabi_f2d>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800daf8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800dafc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800db00:	e9cd 4500 	strd	r4, r5, [sp]
 800db04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db08:	4921      	ldr	r1, [pc, #132]	; (800db90 <KFilterAdjust+0x168>)
 800db0a:	4822      	ldr	r0, [pc, #136]	; (800db94 <KFilterAdjust+0x16c>)
 800db0c:	f012 f8f8 	bl	801fd00 <siprintf>
//		sprintf(data, "%d, %.3f, %.3f\n", adc.ADC_value[0], x_kfo, avg_x);
		UARTSend
 800db10:	4920      	ldr	r1, [pc, #128]	; (800db94 <KFilterAdjust+0x16c>)
 800db12:	4821      	ldr	r0, [pc, #132]	; (800db98 <KFilterAdjust+0x170>)
 800db14:	f7f5 ffac 	bl	8003a70 <UARTPrintString>
		led2 = !led2;
 800db18:	4b20      	ldr	r3, [pc, #128]	; (800db9c <KFilterAdjust+0x174>)
 800db1a:	785b      	ldrb	r3, [r3, #1]
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	b2db      	uxtb	r3, r3
 800db22:	4a1e      	ldr	r2, [pc, #120]	; (800db9c <KFilterAdjust+0x174>)
 800db24:	2b00      	cmp	r3, #0
 800db26:	bf0c      	ite	eq
 800db28:	2301      	moveq	r3, #1
 800db2a:	2300      	movne	r3, #0
 800db2c:	b2d9      	uxtb	r1, r3
 800db2e:	7853      	ldrb	r3, [r2, #1]
 800db30:	f361 1386 	bfi	r3, r1, #6, #1
 800db34:	7053      	strb	r3, [r2, #1]
		Await(20);
 800db36:	2014      	movs	r0, #20
 800db38:	f000 fed4 	bl	800e8e4 <Await>
		n++;
 800db3c:	4b0d      	ldr	r3, [pc, #52]	; (800db74 <KFilterAdjust+0x14c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	4a0c      	ldr	r2, [pc, #48]	; (800db74 <KFilterAdjust+0x14c>)
 800db44:	6013      	str	r3, [r2, #0]
	while(ps4.button == TRIANGLE){
 800db46:	4b16      	ldr	r3, [pc, #88]	; (800dba0 <KFilterAdjust+0x178>)
 800db48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db4e:	f43f af70 	beq.w	800da32 <KFilterAdjust+0xa>
	}
	if(ps4.button == SQUARE){
 800db52:	4b13      	ldr	r3, [pc, #76]	; (800dba0 <KFilterAdjust+0x178>)
 800db54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db5a:	d14e      	bne.n	800dbfa <KFilterAdjust+0x1d2>
		while(ps4.button == SQUARE);
 800db5c:	bf00      	nop
 800db5e:	4b10      	ldr	r3, [pc, #64]	; (800dba0 <KFilterAdjust+0x178>)
 800db60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db66:	d0fa      	beq.n	800db5e <KFilterAdjust+0x136>
		for(int i = 0; i < 2; i++){
 800db68:	2300      	movs	r3, #0
 800db6a:	60fb      	str	r3, [r7, #12]
 800db6c:	e03a      	b.n	800dbe4 <KFilterAdjust+0x1bc>
			for(int j = 0; j < 3; j++){
 800db6e:	2300      	movs	r3, #0
 800db70:	60bb      	str	r3, [r7, #8]
 800db72:	e031      	b.n	800dbd8 <KFilterAdjust+0x1b0>
 800db74:	20000918 	.word	0x20000918
 800db78:	2000091c 	.word	0x2000091c
 800db7c:	2000994c 	.word	0x2000994c
 800db80:	20000920 	.word	0x20000920
 800db84:	2000787c 	.word	0x2000787c
 800db88:	20007270 	.word	0x20007270
 800db8c:	200074e0 	.word	0x200074e0
 800db90:	0802490c 	.word	0x0802490c
 800db94:	20006a8c 	.word	0x20006a8c
 800db98:	20006c74 	.word	0x20006c74
 800db9c:	40020814 	.word	0x40020814
 800dba0:	2000a448 	.word	0x2000a448
				sprintf(data, "%.3f ", kf[i][j]);
 800dba4:	49ae      	ldr	r1, [pc, #696]	; (800de60 <KFilterAdjust+0x438>)
 800dba6:	68fa      	ldr	r2, [r7, #12]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7f2 fcc5 	bl	8000548 <__aeabi_f2d>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	49a8      	ldr	r1, [pc, #672]	; (800de64 <KFilterAdjust+0x43c>)
 800dbc4:	48a8      	ldr	r0, [pc, #672]	; (800de68 <KFilterAdjust+0x440>)
 800dbc6:	f012 f89b 	bl	801fd00 <siprintf>
				UARTSend
 800dbca:	49a7      	ldr	r1, [pc, #668]	; (800de68 <KFilterAdjust+0x440>)
 800dbcc:	48a7      	ldr	r0, [pc, #668]	; (800de6c <KFilterAdjust+0x444>)
 800dbce:	f7f5 ff4f 	bl	8003a70 <UARTPrintString>
			for(int j = 0; j < 3; j++){
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	60bb      	str	r3, [r7, #8]
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	dde2      	ble.n	800dba4 <KFilterAdjust+0x17c>
		for(int i = 0; i < 2; i++){
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	ddc1      	ble.n	800db6e <KFilterAdjust+0x146>
			}
		}
		sprintf(data, "kf\n");
 800dbea:	49a1      	ldr	r1, [pc, #644]	; (800de70 <KFilterAdjust+0x448>)
 800dbec:	489e      	ldr	r0, [pc, #632]	; (800de68 <KFilterAdjust+0x440>)
 800dbee:	f012 f887 	bl	801fd00 <siprintf>
		UARTSend
 800dbf2:	499d      	ldr	r1, [pc, #628]	; (800de68 <KFilterAdjust+0x440>)
 800dbf4:	489d      	ldr	r0, [pc, #628]	; (800de6c <KFilterAdjust+0x444>)
 800dbf6:	f7f5 ff3b 	bl	8003a70 <UARTPrintString>
	}
	if(ps4.button == CIRCLE){
 800dbfa:	4b9e      	ldr	r3, [pc, #632]	; (800de74 <KFilterAdjust+0x44c>)
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc02:	d13d      	bne.n	800dc80 <KFilterAdjust+0x258>
		while(ps4.button == CIRCLE);
 800dc04:	bf00      	nop
 800dc06:	4b9b      	ldr	r3, [pc, #620]	; (800de74 <KFilterAdjust+0x44c>)
 800dc08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc0e:	d0fa      	beq.n	800dc06 <KFilterAdjust+0x1de>
		avg_x = 0;
 800dc10:	4b99      	ldr	r3, [pc, #612]	; (800de78 <KFilterAdjust+0x450>)
 800dc12:	f04f 0200 	mov.w	r2, #0
 800dc16:	601a      	str	r2, [r3, #0]
		avg_y = 0;
 800dc18:	4b98      	ldr	r3, [pc, #608]	; (800de7c <KFilterAdjust+0x454>)
 800dc1a:	f04f 0200 	mov.w	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
		n = 0;
 800dc20:	4b97      	ldr	r3, [pc, #604]	; (800de80 <KFilterAdjust+0x458>)
 800dc22:	2200      	movs	r2, #0
 800dc24:	601a      	str	r2, [r3, #0]
		KalmanFilterInit(1, &(adc.ADC_value[0]), &x_kfo, kf[0][0], kf[0][1], kf[0][2], &kf_adc_x);
 800dc26:	4b8e      	ldr	r3, [pc, #568]	; (800de60 <KFilterAdjust+0x438>)
 800dc28:	edd3 7a00 	vldr	s15, [r3]
 800dc2c:	4b8c      	ldr	r3, [pc, #560]	; (800de60 <KFilterAdjust+0x438>)
 800dc2e:	ed93 7a01 	vldr	s14, [r3, #4]
 800dc32:	4b8b      	ldr	r3, [pc, #556]	; (800de60 <KFilterAdjust+0x438>)
 800dc34:	edd3 6a02 	vldr	s13, [r3, #8]
 800dc38:	4b92      	ldr	r3, [pc, #584]	; (800de84 <KFilterAdjust+0x45c>)
 800dc3a:	eeb0 1a66 	vmov.f32	s2, s13
 800dc3e:	eef0 0a47 	vmov.f32	s1, s14
 800dc42:	eeb0 0a67 	vmov.f32	s0, s15
 800dc46:	4a90      	ldr	r2, [pc, #576]	; (800de88 <KFilterAdjust+0x460>)
 800dc48:	4990      	ldr	r1, [pc, #576]	; (800de8c <KFilterAdjust+0x464>)
 800dc4a:	2001      	movs	r0, #1
 800dc4c:	f7f6 fa02 	bl	8004054 <KalmanFilterInit>
		KalmanFilterInit(1, &(adc.ADC_value[1]), &y_kfo, kf[1][0], kf[1][1], kf[1][2], &kf_adc_y);
 800dc50:	4b83      	ldr	r3, [pc, #524]	; (800de60 <KFilterAdjust+0x438>)
 800dc52:	edd3 7a03 	vldr	s15, [r3, #12]
 800dc56:	4b82      	ldr	r3, [pc, #520]	; (800de60 <KFilterAdjust+0x438>)
 800dc58:	ed93 7a04 	vldr	s14, [r3, #16]
 800dc5c:	4b80      	ldr	r3, [pc, #512]	; (800de60 <KFilterAdjust+0x438>)
 800dc5e:	edd3 6a05 	vldr	s13, [r3, #20]
 800dc62:	4b8b      	ldr	r3, [pc, #556]	; (800de90 <KFilterAdjust+0x468>)
 800dc64:	eeb0 1a66 	vmov.f32	s2, s13
 800dc68:	eef0 0a47 	vmov.f32	s1, s14
 800dc6c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc70:	4a88      	ldr	r2, [pc, #544]	; (800de94 <KFilterAdjust+0x46c>)
 800dc72:	4989      	ldr	r1, [pc, #548]	; (800de98 <KFilterAdjust+0x470>)
 800dc74:	2001      	movs	r0, #1
 800dc76:	f7f6 f9ed 	bl	8004054 <KalmanFilterInit>
		Await(50);
 800dc7a:	2032      	movs	r0, #50	; 0x32
 800dc7c:	f000 fe32 	bl	800e8e4 <Await>
	}
	if(ps4.button == CROSS){
 800dc80:	4b7c      	ldr	r3, [pc, #496]	; (800de74 <KFilterAdjust+0x44c>)
 800dc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc88:	d15d      	bne.n	800dd46 <KFilterAdjust+0x31e>
		while(ps4.button == CROSS){}
 800dc8a:	bf00      	nop
 800dc8c:	4b79      	ldr	r3, [pc, #484]	; (800de74 <KFilterAdjust+0x44c>)
 800dc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc94:	d0fa      	beq.n	800dc8c <KFilterAdjust+0x264>
		kf[arr_y][arr_x] = kf[arr_y][arr_x] + num * 0.01;
 800dc96:	4b81      	ldr	r3, [pc, #516]	; (800de9c <KFilterAdjust+0x474>)
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	4b81      	ldr	r3, [pc, #516]	; (800dea0 <KFilterAdjust+0x478>)
 800dc9c:	6819      	ldr	r1, [r3, #0]
 800dc9e:	4870      	ldr	r0, [pc, #448]	; (800de60 <KFilterAdjust+0x438>)
 800dca0:	4613      	mov	r3, r2
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	4413      	add	r3, r2
 800dca6:	440b      	add	r3, r1
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4403      	add	r3, r0
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f2 fc4a 	bl	8000548 <__aeabi_f2d>
 800dcb4:	4604      	mov	r4, r0
 800dcb6:	460d      	mov	r5, r1
 800dcb8:	4b7a      	ldr	r3, [pc, #488]	; (800dea4 <KFilterAdjust+0x47c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7f2 fc31 	bl	8000524 <__aeabi_i2d>
 800dcc2:	a365      	add	r3, pc, #404	; (adr r3, 800de58 <KFilterAdjust+0x430>)
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f7f2 fc96 	bl	80005f8 <__aeabi_dmul>
 800dccc:	4602      	mov	r2, r0
 800dcce:	460b      	mov	r3, r1
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	f7f2 fada 	bl	800028c <__adddf3>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	496f      	ldr	r1, [pc, #444]	; (800de9c <KFilterAdjust+0x474>)
 800dcde:	680c      	ldr	r4, [r1, #0]
 800dce0:	496f      	ldr	r1, [pc, #444]	; (800dea0 <KFilterAdjust+0x478>)
 800dce2:	680d      	ldr	r5, [r1, #0]
 800dce4:	4610      	mov	r0, r2
 800dce6:	4619      	mov	r1, r3
 800dce8:	f7f2 ff7e 	bl	8000be8 <__aeabi_d2f>
 800dcec:	4602      	mov	r2, r0
 800dcee:	495c      	ldr	r1, [pc, #368]	; (800de60 <KFilterAdjust+0x438>)
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	4423      	add	r3, r4
 800dcf6:	442b      	add	r3, r5
 800dcf8:	009b      	lsls	r3, r3, #2
 800dcfa:	440b      	add	r3, r1
 800dcfc:	601a      	str	r2, [r3, #0]
		sprintf(data, "y = %d, x = %d, kf = %f\n", arr_y, arr_x, kf[arr_y][arr_x]);
 800dcfe:	4b67      	ldr	r3, [pc, #412]	; (800de9c <KFilterAdjust+0x474>)
 800dd00:	681c      	ldr	r4, [r3, #0]
 800dd02:	4b67      	ldr	r3, [pc, #412]	; (800dea0 <KFilterAdjust+0x478>)
 800dd04:	681d      	ldr	r5, [r3, #0]
 800dd06:	4b65      	ldr	r3, [pc, #404]	; (800de9c <KFilterAdjust+0x474>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b65      	ldr	r3, [pc, #404]	; (800dea0 <KFilterAdjust+0x478>)
 800dd0c:	6819      	ldr	r1, [r3, #0]
 800dd0e:	4854      	ldr	r0, [pc, #336]	; (800de60 <KFilterAdjust+0x438>)
 800dd10:	4613      	mov	r3, r2
 800dd12:	005b      	lsls	r3, r3, #1
 800dd14:	4413      	add	r3, r2
 800dd16:	440b      	add	r3, r1
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4403      	add	r3, r0
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f2 fc12 	bl	8000548 <__aeabi_f2d>
 800dd24:	4602      	mov	r2, r0
 800dd26:	460b      	mov	r3, r1
 800dd28:	e9cd 2300 	strd	r2, r3, [sp]
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	4622      	mov	r2, r4
 800dd30:	495d      	ldr	r1, [pc, #372]	; (800dea8 <KFilterAdjust+0x480>)
 800dd32:	484d      	ldr	r0, [pc, #308]	; (800de68 <KFilterAdjust+0x440>)
 800dd34:	f011 ffe4 	bl	801fd00 <siprintf>
		UARTSend
 800dd38:	494b      	ldr	r1, [pc, #300]	; (800de68 <KFilterAdjust+0x440>)
 800dd3a:	484c      	ldr	r0, [pc, #304]	; (800de6c <KFilterAdjust+0x444>)
 800dd3c:	f7f5 fe98 	bl	8003a70 <UARTPrintString>
		num = 0;
 800dd40:	4b58      	ldr	r3, [pc, #352]	; (800dea4 <KFilterAdjust+0x47c>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
	}
	if(ps4.button == UP){
 800dd46:	4b4b      	ldr	r3, [pc, #300]	; (800de74 <KFilterAdjust+0x44c>)
 800dd48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd4a:	2b10      	cmp	r3, #16
 800dd4c:	d11b      	bne.n	800dd86 <KFilterAdjust+0x35e>
		while(ps4.button == UP){}
 800dd4e:	bf00      	nop
 800dd50:	4b48      	ldr	r3, [pc, #288]	; (800de74 <KFilterAdjust+0x44c>)
 800dd52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd54:	2b10      	cmp	r3, #16
 800dd56:	d0fb      	beq.n	800dd50 <KFilterAdjust+0x328>
		arr_y ++;
 800dd58:	4b50      	ldr	r3, [pc, #320]	; (800de9c <KFilterAdjust+0x474>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	4a4f      	ldr	r2, [pc, #316]	; (800de9c <KFilterAdjust+0x474>)
 800dd60:	6013      	str	r3, [r2, #0]
		if(arr_y > 1)	arr_y = 0;
 800dd62:	4b4e      	ldr	r3, [pc, #312]	; (800de9c <KFilterAdjust+0x474>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	dd02      	ble.n	800dd70 <KFilterAdjust+0x348>
 800dd6a:	4b4c      	ldr	r3, [pc, #304]	; (800de9c <KFilterAdjust+0x474>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	601a      	str	r2, [r3, #0]
		sprintf(data, "y = %d\n", arr_y);
 800dd70:	4b4a      	ldr	r3, [pc, #296]	; (800de9c <KFilterAdjust+0x474>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	461a      	mov	r2, r3
 800dd76:	494d      	ldr	r1, [pc, #308]	; (800deac <KFilterAdjust+0x484>)
 800dd78:	483b      	ldr	r0, [pc, #236]	; (800de68 <KFilterAdjust+0x440>)
 800dd7a:	f011 ffc1 	bl	801fd00 <siprintf>
		UARTSend
 800dd7e:	493a      	ldr	r1, [pc, #232]	; (800de68 <KFilterAdjust+0x440>)
 800dd80:	483a      	ldr	r0, [pc, #232]	; (800de6c <KFilterAdjust+0x444>)
 800dd82:	f7f5 fe75 	bl	8003a70 <UARTPrintString>
	}
	if(ps4.button == RIGHT){
 800dd86:	4b3b      	ldr	r3, [pc, #236]	; (800de74 <KFilterAdjust+0x44c>)
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	2b20      	cmp	r3, #32
 800dd8c:	d11b      	bne.n	800ddc6 <KFilterAdjust+0x39e>
		while(ps4.button == RIGHT){}
 800dd8e:	bf00      	nop
 800dd90:	4b38      	ldr	r3, [pc, #224]	; (800de74 <KFilterAdjust+0x44c>)
 800dd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd94:	2b20      	cmp	r3, #32
 800dd96:	d0fb      	beq.n	800dd90 <KFilterAdjust+0x368>
		arr_x ++;
 800dd98:	4b41      	ldr	r3, [pc, #260]	; (800dea0 <KFilterAdjust+0x478>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	4a40      	ldr	r2, [pc, #256]	; (800dea0 <KFilterAdjust+0x478>)
 800dda0:	6013      	str	r3, [r2, #0]
		if(arr_x > 2)	arr_x = 0;
 800dda2:	4b3f      	ldr	r3, [pc, #252]	; (800dea0 <KFilterAdjust+0x478>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b02      	cmp	r3, #2
 800dda8:	dd02      	ble.n	800ddb0 <KFilterAdjust+0x388>
 800ddaa:	4b3d      	ldr	r3, [pc, #244]	; (800dea0 <KFilterAdjust+0x478>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	601a      	str	r2, [r3, #0]
		sprintf(data, "x = %d\n", arr_x);
 800ddb0:	4b3b      	ldr	r3, [pc, #236]	; (800dea0 <KFilterAdjust+0x478>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	493e      	ldr	r1, [pc, #248]	; (800deb0 <KFilterAdjust+0x488>)
 800ddb8:	482b      	ldr	r0, [pc, #172]	; (800de68 <KFilterAdjust+0x440>)
 800ddba:	f011 ffa1 	bl	801fd00 <siprintf>
		UARTSend
 800ddbe:	492a      	ldr	r1, [pc, #168]	; (800de68 <KFilterAdjust+0x440>)
 800ddc0:	482a      	ldr	r0, [pc, #168]	; (800de6c <KFilterAdjust+0x444>)
 800ddc2:	f7f5 fe55 	bl	8003a70 <UARTPrintString>
	}
	if(ps4.button == L1){
 800ddc6:	4b2b      	ldr	r3, [pc, #172]	; (800de74 <KFilterAdjust+0x44c>)
 800ddc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddce:	d122      	bne.n	800de16 <KFilterAdjust+0x3ee>
		while(ps4.button == L1){}
 800ddd0:	bf00      	nop
 800ddd2:	4b28      	ldr	r3, [pc, #160]	; (800de74 <KFilterAdjust+0x44c>)
 800ddd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddda:	d0fa      	beq.n	800ddd2 <KFilterAdjust+0x3aa>
		num --;
 800dddc:	4b31      	ldr	r3, [pc, #196]	; (800dea4 <KFilterAdjust+0x47c>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	4a30      	ldr	r2, [pc, #192]	; (800dea4 <KFilterAdjust+0x47c>)
 800dde4:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800dde6:	4b2f      	ldr	r3, [pc, #188]	; (800dea4 <KFilterAdjust+0x47c>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	ee07 3a90 	vmov	s15, r3
 800ddee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddf2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800deb4 <KFilterAdjust+0x48c>
 800ddf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ddfa:	ee16 0a90 	vmov	r0, s13
 800ddfe:	f7f2 fba3 	bl	8000548 <__aeabi_f2d>
 800de02:	4602      	mov	r2, r0
 800de04:	460b      	mov	r3, r1
 800de06:	492c      	ldr	r1, [pc, #176]	; (800deb8 <KFilterAdjust+0x490>)
 800de08:	4817      	ldr	r0, [pc, #92]	; (800de68 <KFilterAdjust+0x440>)
 800de0a:	f011 ff79 	bl	801fd00 <siprintf>
		UARTSend
 800de0e:	4916      	ldr	r1, [pc, #88]	; (800de68 <KFilterAdjust+0x440>)
 800de10:	4816      	ldr	r0, [pc, #88]	; (800de6c <KFilterAdjust+0x444>)
 800de12:	f7f5 fe2d 	bl	8003a70 <UARTPrintString>
	}
	if(ps4.button == R1){
 800de16:	4b17      	ldr	r3, [pc, #92]	; (800de74 <KFilterAdjust+0x44c>)
 800de18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de1e:	d155      	bne.n	800decc <KFilterAdjust+0x4a4>
		while(ps4.button == R1){}
 800de20:	bf00      	nop
 800de22:	4b14      	ldr	r3, [pc, #80]	; (800de74 <KFilterAdjust+0x44c>)
 800de24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de2a:	d0fa      	beq.n	800de22 <KFilterAdjust+0x3fa>
		num ++;
 800de2c:	4b1d      	ldr	r3, [pc, #116]	; (800dea4 <KFilterAdjust+0x47c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	3301      	adds	r3, #1
 800de32:	4a1c      	ldr	r2, [pc, #112]	; (800dea4 <KFilterAdjust+0x47c>)
 800de34:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800de36:	4b1b      	ldr	r3, [pc, #108]	; (800dea4 <KFilterAdjust+0x47c>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	ee07 3a90 	vmov	s15, r3
 800de3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de42:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800deb4 <KFilterAdjust+0x48c>
 800de46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de4a:	ee16 0a90 	vmov	r0, s13
 800de4e:	f7f2 fb7b 	bl	8000548 <__aeabi_f2d>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	e031      	b.n	800debc <KFilterAdjust+0x494>
 800de58:	47ae147b 	.word	0x47ae147b
 800de5c:	3f847ae1 	.word	0x3f847ae1
 800de60:	20000620 	.word	0x20000620
 800de64:	0802492c 	.word	0x0802492c
 800de68:	20006a8c 	.word	0x20006a8c
 800de6c:	20006c74 	.word	0x20006c74
 800de70:	08024934 	.word	0x08024934
 800de74:	2000a448 	.word	0x2000a448
 800de78:	2000091c 	.word	0x2000091c
 800de7c:	20000920 	.word	0x20000920
 800de80:	20000918 	.word	0x20000918
 800de84:	200071cc 	.word	0x200071cc
 800de88:	2000787c 	.word	0x2000787c
 800de8c:	20009958 	.word	0x20009958
 800de90:	20009c1c 	.word	0x20009c1c
 800de94:	20007270 	.word	0x20007270
 800de98:	2000995a 	.word	0x2000995a
 800de9c:	20000924 	.word	0x20000924
 800dea0:	20000928 	.word	0x20000928
 800dea4:	2000092c 	.word	0x2000092c
 800dea8:	08024938 	.word	0x08024938
 800deac:	08024954 	.word	0x08024954
 800deb0:	0802495c 	.word	0x0802495c
 800deb4:	42480000 	.word	0x42480000
 800deb8:	08024964 	.word	0x08024964
 800debc:	4930      	ldr	r1, [pc, #192]	; (800df80 <KFilterAdjust+0x558>)
 800debe:	4831      	ldr	r0, [pc, #196]	; (800df84 <KFilterAdjust+0x55c>)
 800dec0:	f011 ff1e 	bl	801fd00 <siprintf>
		UARTSend
 800dec4:	492f      	ldr	r1, [pc, #188]	; (800df84 <KFilterAdjust+0x55c>)
 800dec6:	4830      	ldr	r0, [pc, #192]	; (800df88 <KFilterAdjust+0x560>)
 800dec8:	f7f5 fdd2 	bl	8003a70 <UARTPrintString>
	}
	if(ps4.joyR_y > 0.5){
 800decc:	4b2f      	ldr	r3, [pc, #188]	; (800df8c <KFilterAdjust+0x564>)
 800dece:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ded2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ded6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800deda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dede:	dd1f      	ble.n	800df20 <KFilterAdjust+0x4f8>
		num ++;
 800dee0:	4b2b      	ldr	r3, [pc, #172]	; (800df90 <KFilterAdjust+0x568>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3301      	adds	r3, #1
 800dee6:	4a2a      	ldr	r2, [pc, #168]	; (800df90 <KFilterAdjust+0x568>)
 800dee8:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800deea:	4b29      	ldr	r3, [pc, #164]	; (800df90 <KFilterAdjust+0x568>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	ee07 3a90 	vmov	s15, r3
 800def2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800def6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800df94 <KFilterAdjust+0x56c>
 800defa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800defe:	ee16 0a90 	vmov	r0, s13
 800df02:	f7f2 fb21 	bl	8000548 <__aeabi_f2d>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	491d      	ldr	r1, [pc, #116]	; (800df80 <KFilterAdjust+0x558>)
 800df0c:	481d      	ldr	r0, [pc, #116]	; (800df84 <KFilterAdjust+0x55c>)
 800df0e:	f011 fef7 	bl	801fd00 <siprintf>
		UARTSend
 800df12:	491c      	ldr	r1, [pc, #112]	; (800df84 <KFilterAdjust+0x55c>)
 800df14:	481c      	ldr	r0, [pc, #112]	; (800df88 <KFilterAdjust+0x560>)
 800df16:	f7f5 fdab 	bl	8003a70 <UARTPrintString>
		Await(10);
 800df1a:	200a      	movs	r0, #10
 800df1c:	f000 fce2 	bl	800e8e4 <Await>
	}
	if(ps4.joyR_y < -0.5){
 800df20:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <KFilterAdjust+0x564>)
 800df22:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800df26:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800df2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df32:	d400      	bmi.n	800df36 <KFilterAdjust+0x50e>
		num --;
		sprintf(data, "num = %.3f\n", (float)num/50);
		UARTSend
		Await(10);
	}
}
 800df34:	e01f      	b.n	800df76 <KFilterAdjust+0x54e>
		num --;
 800df36:	4b16      	ldr	r3, [pc, #88]	; (800df90 <KFilterAdjust+0x568>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	4a14      	ldr	r2, [pc, #80]	; (800df90 <KFilterAdjust+0x568>)
 800df3e:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800df40:	4b13      	ldr	r3, [pc, #76]	; (800df90 <KFilterAdjust+0x568>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	ee07 3a90 	vmov	s15, r3
 800df48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df4c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800df94 <KFilterAdjust+0x56c>
 800df50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800df54:	ee16 0a90 	vmov	r0, s13
 800df58:	f7f2 faf6 	bl	8000548 <__aeabi_f2d>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4907      	ldr	r1, [pc, #28]	; (800df80 <KFilterAdjust+0x558>)
 800df62:	4808      	ldr	r0, [pc, #32]	; (800df84 <KFilterAdjust+0x55c>)
 800df64:	f011 fecc 	bl	801fd00 <siprintf>
		UARTSend
 800df68:	4906      	ldr	r1, [pc, #24]	; (800df84 <KFilterAdjust+0x55c>)
 800df6a:	4807      	ldr	r0, [pc, #28]	; (800df88 <KFilterAdjust+0x560>)
 800df6c:	f7f5 fd80 	bl	8003a70 <UARTPrintString>
		Await(10);
 800df70:	200a      	movs	r0, #10
 800df72:	f000 fcb7 	bl	800e8e4 <Await>
}
 800df76:	bf00      	nop
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df80:	08024964 	.word	0x08024964
 800df84:	20006a8c 	.word	0x20006a8c
 800df88:	20006c74 	.word	0x20006c74
 800df8c:	2000a448 	.word	0x2000a448
 800df90:	2000092c 	.word	0x2000092c
 800df94:	42480000 	.word	0x42480000

0800df98 <enq>:

void enq (void){
 800df98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df9c:	b088      	sub	sp, #32
 800df9e:	af06      	add	r7, sp, #24
	switch(n){
 800dfa0:	4ba9      	ldr	r3, [pc, #676]	; (800e248 <enq+0x2b0>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	2b07      	cmp	r3, #7
 800dfa8:	f200 8476 	bhi.w	800e898 <enq+0x900>
 800dfac:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <enq+0x1c>)
 800dfae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb2:	bf00      	nop
 800dfb4:	0800dfd5 	.word	0x0800dfd5
 800dfb8:	0800e22d 	.word	0x0800e22d
 800dfbc:	0800e899 	.word	0x0800e899
 800dfc0:	0800e40b 	.word	0x0800e40b
 800dfc4:	0800e899 	.word	0x0800e899
 800dfc8:	0800e7bf 	.word	0x0800e7bf
 800dfcc:	0800e899 	.word	0x0800e899
 800dfd0:	0800e86d 	.word	0x0800e86d
	case 1:
		sprintf(data, "short press SQUARE to set 12.5cm\n");
 800dfd4:	499d      	ldr	r1, [pc, #628]	; (800e24c <enq+0x2b4>)
 800dfd6:	489e      	ldr	r0, [pc, #632]	; (800e250 <enq+0x2b8>)
 800dfd8:	f011 fe92 	bl	801fd00 <siprintf>
		UARTSend
 800dfdc:	499c      	ldr	r1, [pc, #624]	; (800e250 <enq+0x2b8>)
 800dfde:	489d      	ldr	r0, [pc, #628]	; (800e254 <enq+0x2bc>)
 800dfe0:	f7f5 fd46 	bl	8003a70 <UARTPrintString>
		Await(50);
 800dfe4:	2032      	movs	r0, #50	; 0x32
 800dfe6:	f000 fc7d 	bl	800e8e4 <Await>
		sprintf(data, "or long press SQUARE (>2s) to set 15cm\n");
 800dfea:	499b      	ldr	r1, [pc, #620]	; (800e258 <enq+0x2c0>)
 800dfec:	4898      	ldr	r0, [pc, #608]	; (800e250 <enq+0x2b8>)
 800dfee:	f011 fe87 	bl	801fd00 <siprintf>
		UARTSend
 800dff2:	4997      	ldr	r1, [pc, #604]	; (800e250 <enq+0x2b8>)
 800dff4:	4897      	ldr	r0, [pc, #604]	; (800e254 <enq+0x2bc>)
 800dff6:	f7f5 fd3b 	bl	8003a70 <UARTPrintString>
		Await(50);
 800dffa:	2032      	movs	r0, #50	; 0x32
 800dffc:	f000 fc72 	bl	800e8e4 <Await>
		while(ps4.button != SQUARE);
 800e000:	bf00      	nop
 800e002:	4b96      	ldr	r3, [pc, #600]	; (800e25c <enq+0x2c4>)
 800e004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e00a:	d1fa      	bne.n	800e002 <enq+0x6a>
		uint32_t tick = HAL_GetTick();
 800e00c:	f005 fe34 	bl	8013c78 <HAL_GetTick>
 800e010:	6078      	str	r0, [r7, #4]
		while(ps4.button == SQUARE){
 800e012:	e01d      	b.n	800e050 <enq+0xb8>
			sprintf(data, "time: %.3f\n", (float)(HAL_GetTick() - tick) / 1000);
 800e014:	f005 fe30 	bl	8013c78 <HAL_GetTick>
 800e018:	4602      	mov	r2, r0
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e026:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800e260 <enq+0x2c8>
 800e02a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e02e:	ee16 0a90 	vmov	r0, s13
 800e032:	f7f2 fa89 	bl	8000548 <__aeabi_f2d>
 800e036:	4602      	mov	r2, r0
 800e038:	460b      	mov	r3, r1
 800e03a:	498a      	ldr	r1, [pc, #552]	; (800e264 <enq+0x2cc>)
 800e03c:	4884      	ldr	r0, [pc, #528]	; (800e250 <enq+0x2b8>)
 800e03e:	f011 fe5f 	bl	801fd00 <siprintf>
			UARTSend
 800e042:	4983      	ldr	r1, [pc, #524]	; (800e250 <enq+0x2b8>)
 800e044:	4883      	ldr	r0, [pc, #524]	; (800e254 <enq+0x2bc>)
 800e046:	f7f5 fd13 	bl	8003a70 <UARTPrintString>
			Await(250);
 800e04a:	20fa      	movs	r0, #250	; 0xfa
 800e04c:	f000 fc4a 	bl	800e8e4 <Await>
		while(ps4.button == SQUARE){
 800e050:	4b82      	ldr	r3, [pc, #520]	; (800e25c <enq+0x2c4>)
 800e052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e058:	d0dc      	beq.n	800e014 <enq+0x7c>
		}
		diameter = (HAL_GetTick() - tick > 2000)? 0.150: 0.125;
 800e05a:	f005 fe0d 	bl	8013c78 <HAL_GetTick>
 800e05e:	4602      	mov	r2, r0
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800e068:	d901      	bls.n	800e06e <enq+0xd6>
 800e06a:	4b7f      	ldr	r3, [pc, #508]	; (800e268 <enq+0x2d0>)
 800e06c:	e001      	b.n	800e072 <enq+0xda>
 800e06e:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800e072:	4a7e      	ldr	r2, [pc, #504]	; (800e26c <enq+0x2d4>)
 800e074:	6013      	str	r3, [r2, #0]
		sprintf(data, "diameter = %f\n", diameter);
 800e076:	4b7d      	ldr	r3, [pc, #500]	; (800e26c <enq+0x2d4>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f2 fa64 	bl	8000548 <__aeabi_f2d>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	497a      	ldr	r1, [pc, #488]	; (800e270 <enq+0x2d8>)
 800e086:	4872      	ldr	r0, [pc, #456]	; (800e250 <enq+0x2b8>)
 800e088:	f011 fe3a 	bl	801fd00 <siprintf>
		UARTSend
 800e08c:	4970      	ldr	r1, [pc, #448]	; (800e250 <enq+0x2b8>)
 800e08e:	4871      	ldr	r0, [pc, #452]	; (800e254 <enq+0x2bc>)
 800e090:	f7f5 fcee 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e094:	2014      	movs	r0, #20
 800e096:	f000 fc25 	bl	800e8e4 <Await>
		sprintf(data, "2s later start get pulse\n");
 800e09a:	4976      	ldr	r1, [pc, #472]	; (800e274 <enq+0x2dc>)
 800e09c:	486c      	ldr	r0, [pc, #432]	; (800e250 <enq+0x2b8>)
 800e09e:	f011 fe2f 	bl	801fd00 <siprintf>
		UARTSend
 800e0a2:	496b      	ldr	r1, [pc, #428]	; (800e250 <enq+0x2b8>)
 800e0a4:	486b      	ldr	r0, [pc, #428]	; (800e254 <enq+0x2bc>)
 800e0a6:	f7f5 fce3 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e0aa:	2014      	movs	r0, #20
 800e0ac:	f000 fc1a 	bl	800e8e4 <Await>
		RNSSet(&rns, RNS_F_KCD_PTD, 1.0, diameter * 3.142 / 1.0);
 800e0b0:	4b6e      	ldr	r3, [pc, #440]	; (800e26c <enq+0x2d4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7f2 fa47 	bl	8000548 <__aeabi_f2d>
 800e0ba:	a35f      	add	r3, pc, #380	; (adr r3, 800e238 <enq+0x2a0>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 fa9a 	bl	80005f8 <__aeabi_dmul>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e0cc:	f04f 0200 	mov.w	r2, #0
 800e0d0:	4b69      	ldr	r3, [pc, #420]	; (800e278 <enq+0x2e0>)
 800e0d2:	211f      	movs	r1, #31
 800e0d4:	4869      	ldr	r0, [pc, #420]	; (800e27c <enq+0x2e4>)
 800e0d6:	f7f9 f86b 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_KCD_PTD, 1.0, diameter * 3.142 / 1.0);
 800e0da:	4b64      	ldr	r3, [pc, #400]	; (800e26c <enq+0x2d4>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7f2 fa32 	bl	8000548 <__aeabi_f2d>
 800e0e4:	a354      	add	r3, pc, #336	; (adr r3, 800e238 <enq+0x2a0>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 fa85 	bl	80005f8 <__aeabi_dmul>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	e9cd 2300 	strd	r2, r3, [sp]
 800e0f6:	f04f 0200 	mov.w	r2, #0
 800e0fa:	4b5f      	ldr	r3, [pc, #380]	; (800e278 <enq+0x2e0>)
 800e0fc:	2120      	movs	r1, #32
 800e0fe:	485f      	ldr	r0, [pc, #380]	; (800e27c <enq+0x2e4>)
 800e100:	f7f9 f856 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 1.0 , 19999.0);
 800e104:	a34e      	add	r3, pc, #312	; (adr r3, 800e240 <enq+0x2a8>)
 800e106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e10e:	f04f 0200 	mov.w	r2, #0
 800e112:	4b59      	ldr	r3, [pc, #356]	; (800e278 <enq+0x2e0>)
 800e114:	e9cd 2300 	strd	r2, r3, [sp]
 800e118:	f04f 0200 	mov.w	r2, #0
 800e11c:	4b56      	ldr	r3, [pc, #344]	; (800e278 <enq+0x2e0>)
 800e11e:	212b      	movs	r1, #43	; 0x2b
 800e120:	4856      	ldr	r0, [pc, #344]	; (800e27c <enq+0x2e4>)
 800e122:	f7f9 f845 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800e126:	a346      	add	r3, pc, #280	; (adr r3, 800e240 <enq+0x2a8>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e130:	f04f 0200 	mov.w	r2, #0
 800e134:	4b50      	ldr	r3, [pc, #320]	; (800e278 <enq+0x2e0>)
 800e136:	e9cd 2300 	strd	r2, r3, [sp]
 800e13a:	f04f 0200 	mov.w	r2, #0
 800e13e:	4b4e      	ldr	r3, [pc, #312]	; (800e278 <enq+0x2e0>)
 800e140:	212c      	movs	r1, #44	; 0x2c
 800e142:	484e      	ldr	r0, [pc, #312]	; (800e27c <enq+0x2e4>)
 800e144:	f7f9 f834 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800e148:	a33d      	add	r3, pc, #244	; (adr r3, 800e240 <enq+0x2a8>)
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e152:	f04f 0200 	mov.w	r2, #0
 800e156:	4b48      	ldr	r3, [pc, #288]	; (800e278 <enq+0x2e0>)
 800e158:	e9cd 2300 	strd	r2, r3, [sp]
 800e15c:	f04f 0200 	mov.w	r2, #0
 800e160:	4b45      	ldr	r3, [pc, #276]	; (800e278 <enq+0x2e0>)
 800e162:	212d      	movs	r1, #45	; 0x2d
 800e164:	4845      	ldr	r0, [pc, #276]	; (800e27c <enq+0x2e4>)
 800e166:	f7f9 f823 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800e16a:	a335      	add	r3, pc, #212	; (adr r3, 800e240 <enq+0x2a8>)
 800e16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e174:	f04f 0200 	mov.w	r2, #0
 800e178:	4b3f      	ldr	r3, [pc, #252]	; (800e278 <enq+0x2e0>)
 800e17a:	e9cd 2300 	strd	r2, r3, [sp]
 800e17e:	f04f 0200 	mov.w	r2, #0
 800e182:	4b3d      	ldr	r3, [pc, #244]	; (800e278 <enq+0x2e0>)
 800e184:	212e      	movs	r1, #46	; 0x2e
 800e186:	483d      	ldr	r0, [pc, #244]	; (800e27c <enq+0x2e4>)
 800e188:	f7f9 f812 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_F_LEFT_VEL_PID,  1.5, 1.0, 0.0);
 800e18c:	f04f 0200 	mov.w	r2, #0
 800e190:	f04f 0300 	mov.w	r3, #0
 800e194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e198:	f04f 0200 	mov.w	r2, #0
 800e19c:	4b36      	ldr	r3, [pc, #216]	; (800e278 <enq+0x2e0>)
 800e19e:	e9cd 2300 	strd	r2, r3, [sp]
 800e1a2:	f04f 0200 	mov.w	r2, #0
 800e1a6:	4b36      	ldr	r3, [pc, #216]	; (800e280 <enq+0x2e8>)
 800e1a8:	212f      	movs	r1, #47	; 0x2f
 800e1aa:	4834      	ldr	r0, [pc, #208]	; (800e27c <enq+0x2e4>)
 800e1ac:	f7f9 f800 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.5, 1.0, 0.0);
 800e1b0:	f04f 0200 	mov.w	r2, #0
 800e1b4:	f04f 0300 	mov.w	r3, #0
 800e1b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	4b2d      	ldr	r3, [pc, #180]	; (800e278 <enq+0x2e0>)
 800e1c2:	e9cd 2300 	strd	r2, r3, [sp]
 800e1c6:	f04f 0200 	mov.w	r2, #0
 800e1ca:	4b2d      	ldr	r3, [pc, #180]	; (800e280 <enq+0x2e8>)
 800e1cc:	2130      	movs	r1, #48	; 0x30
 800e1ce:	482b      	ldr	r0, [pc, #172]	; (800e27c <enq+0x2e4>)
 800e1d0:	f7f8 ffee 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_PID,  1.5, 1.0, 0.0);
 800e1d4:	f04f 0200 	mov.w	r2, #0
 800e1d8:	f04f 0300 	mov.w	r3, #0
 800e1dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e1e0:	f04f 0200 	mov.w	r2, #0
 800e1e4:	4b24      	ldr	r3, [pc, #144]	; (800e278 <enq+0x2e0>)
 800e1e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e1ea:	f04f 0200 	mov.w	r2, #0
 800e1ee:	4b24      	ldr	r3, [pc, #144]	; (800e280 <enq+0x2e8>)
 800e1f0:	2131      	movs	r1, #49	; 0x31
 800e1f2:	4822      	ldr	r0, [pc, #136]	; (800e27c <enq+0x2e4>)
 800e1f4:	f7f8 ffdc 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_PID,  1.5, 1.0, 0.0);
 800e1f8:	f04f 0200 	mov.w	r2, #0
 800e1fc:	f04f 0300 	mov.w	r3, #0
 800e200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e204:	f04f 0200 	mov.w	r2, #0
 800e208:	4b1b      	ldr	r3, [pc, #108]	; (800e278 <enq+0x2e0>)
 800e20a:	e9cd 2300 	strd	r2, r3, [sp]
 800e20e:	f04f 0200 	mov.w	r2, #0
 800e212:	4b1b      	ldr	r3, [pc, #108]	; (800e280 <enq+0x2e8>)
 800e214:	2132      	movs	r1, #50	; 0x32
 800e216:	4819      	ldr	r0, [pc, #100]	; (800e27c <enq+0x2e4>)
 800e218:	f7f8 ffca 	bl	80071b0 <RNSSet>
		Await(2000);
 800e21c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e220:	f000 fb60 	bl	800e8e4 <Await>
		n = 2;
 800e224:	4b08      	ldr	r3, [pc, #32]	; (800e248 <enq+0x2b0>)
 800e226:	2202      	movs	r2, #2
 800e228:	601a      	str	r2, [r3, #0]
		break;
 800e22a:	e335      	b.n	800e898 <enq+0x900>

	case 2:
		RNSSet(&rns, RNS_RESET_POS);
 800e22c:	2114      	movs	r1, #20
 800e22e:	4813      	ldr	r0, [pc, #76]	; (800e27c <enq+0x2e4>)
 800e230:	f7f8 ffbe 	bl	80071b0 <RNSSet>
		while(ps4.button != SQUARE){
 800e234:	e069      	b.n	800e30a <enq+0x372>
 800e236:	bf00      	nop
 800e238:	e5604189 	.word	0xe5604189
 800e23c:	400922d0 	.word	0x400922d0
 800e240:	00000000 	.word	0x00000000
 800e244:	40d387c0 	.word	0x40d387c0
 800e248:	2000767c 	.word	0x2000767c
 800e24c:	08024970 	.word	0x08024970
 800e250:	20006a8c 	.word	0x20006a8c
 800e254:	20006c74 	.word	0x20006c74
 800e258:	08024994 	.word	0x08024994
 800e25c:	2000a448 	.word	0x2000a448
 800e260:	447a0000 	.word	0x447a0000
 800e264:	080249bc 	.word	0x080249bc
 800e268:	3e19999a 	.word	0x3e19999a
 800e26c:	20007ba8 	.word	0x20007ba8
 800e270:	080249c8 	.word	0x080249c8
 800e274:	080249d8 	.word	0x080249d8
 800e278:	3ff00000 	.word	0x3ff00000
 800e27c:	200093ec 	.word	0x200093ec
 800e280:	3ff80000 	.word	0x3ff80000
			RNSEnquire(RNS_POS_BOTH, &rns);
 800e284:	4966      	ldr	r1, [pc, #408]	; (800e420 <enq+0x488>)
 800e286:	2056      	movs	r0, #86	; 0x56
 800e288:	f7f9 f8fe 	bl	8007488 <RNSEnquire>
			pa = rns.enq.enq_buffer[0].data;
 800e28c:	4b64      	ldr	r3, [pc, #400]	; (800e420 <enq+0x488>)
 800e28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e290:	4a64      	ldr	r2, [pc, #400]	; (800e424 <enq+0x48c>)
 800e292:	6013      	str	r3, [r2, #0]
			pb = rns.enq.enq_buffer[1].data;
 800e294:	4b62      	ldr	r3, [pc, #392]	; (800e420 <enq+0x488>)
 800e296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e298:	4a63      	ldr	r2, [pc, #396]	; (800e428 <enq+0x490>)
 800e29a:	6013      	str	r3, [r2, #0]
			pc = rns.enq.enq_buffer[2].data;
 800e29c:	4b60      	ldr	r3, [pc, #384]	; (800e420 <enq+0x488>)
 800e29e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2a0:	4a62      	ldr	r2, [pc, #392]	; (800e42c <enq+0x494>)
 800e2a2:	6013      	str	r3, [r2, #0]
			pd = rns.enq.enq_buffer[3].data;
 800e2a4:	4b5e      	ldr	r3, [pc, #376]	; (800e420 <enq+0x488>)
 800e2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2a8:	4a61      	ldr	r2, [pc, #388]	; (800e430 <enq+0x498>)
 800e2aa:	6013      	str	r3, [r2, #0]
			sprintf(data, "pulse: %.3f, %.3f, %.3f, %.3f\n", pa, pb, pc, pd);
 800e2ac:	4b5d      	ldr	r3, [pc, #372]	; (800e424 <enq+0x48c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f2 f949 	bl	8000548 <__aeabi_f2d>
 800e2b6:	4682      	mov	sl, r0
 800e2b8:	468b      	mov	fp, r1
 800e2ba:	4b5b      	ldr	r3, [pc, #364]	; (800e428 <enq+0x490>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f2 f942 	bl	8000548 <__aeabi_f2d>
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	460d      	mov	r5, r1
 800e2c8:	4b58      	ldr	r3, [pc, #352]	; (800e42c <enq+0x494>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f2 f93b 	bl	8000548 <__aeabi_f2d>
 800e2d2:	4680      	mov	r8, r0
 800e2d4:	4689      	mov	r9, r1
 800e2d6:	4b56      	ldr	r3, [pc, #344]	; (800e430 <enq+0x498>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7f2 f934 	bl	8000548 <__aeabi_f2d>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e2e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e2ec:	e9cd 4500 	strd	r4, r5, [sp]
 800e2f0:	4652      	mov	r2, sl
 800e2f2:	465b      	mov	r3, fp
 800e2f4:	494f      	ldr	r1, [pc, #316]	; (800e434 <enq+0x49c>)
 800e2f6:	4850      	ldr	r0, [pc, #320]	; (800e438 <enq+0x4a0>)
 800e2f8:	f011 fd02 	bl	801fd00 <siprintf>
			UARTSend
 800e2fc:	494e      	ldr	r1, [pc, #312]	; (800e438 <enq+0x4a0>)
 800e2fe:	484f      	ldr	r0, [pc, #316]	; (800e43c <enq+0x4a4>)
 800e300:	f7f5 fbb6 	bl	8003a70 <UARTPrintString>
			Await(20);
 800e304:	2014      	movs	r0, #20
 800e306:	f000 faed 	bl	800e8e4 <Await>
		while(ps4.button != SQUARE){
 800e30a:	4b4d      	ldr	r3, [pc, #308]	; (800e440 <enq+0x4a8>)
 800e30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e312:	d1b7      	bne.n	800e284 <enq+0x2ec>
		}
		while(ps4.button == SQUARE);
 800e314:	bf00      	nop
 800e316:	4b4a      	ldr	r3, [pc, #296]	; (800e440 <enq+0x4a8>)
 800e318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e31a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e31e:	d0fa      	beq.n	800e316 <enq+0x37e>
		RNSSet(&rns, RNS_F_KCD_PTD, pa / pb, diameter * 31.4159 / pa);
 800e320:	4b40      	ldr	r3, [pc, #256]	; (800e424 <enq+0x48c>)
 800e322:	ed93 7a00 	vldr	s14, [r3]
 800e326:	4b40      	ldr	r3, [pc, #256]	; (800e428 <enq+0x490>)
 800e328:	edd3 7a00 	vldr	s15, [r3]
 800e32c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e330:	ee16 0a90 	vmov	r0, s13
 800e334:	f7f2 f908 	bl	8000548 <__aeabi_f2d>
 800e338:	4604      	mov	r4, r0
 800e33a:	460d      	mov	r5, r1
 800e33c:	4b41      	ldr	r3, [pc, #260]	; (800e444 <enq+0x4ac>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4618      	mov	r0, r3
 800e342:	f7f2 f901 	bl	8000548 <__aeabi_f2d>
 800e346:	a334      	add	r3, pc, #208	; (adr r3, 800e418 <enq+0x480>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	f7f2 f954 	bl	80005f8 <__aeabi_dmul>
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	4690      	mov	r8, r2
 800e356:	4699      	mov	r9, r3
 800e358:	4b32      	ldr	r3, [pc, #200]	; (800e424 <enq+0x48c>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7f2 f8f3 	bl	8000548 <__aeabi_f2d>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4640      	mov	r0, r8
 800e368:	4649      	mov	r1, r9
 800e36a:	f7f2 fa6f 	bl	800084c <__aeabi_ddiv>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	e9cd 2300 	strd	r2, r3, [sp]
 800e376:	4622      	mov	r2, r4
 800e378:	462b      	mov	r3, r5
 800e37a:	211f      	movs	r1, #31
 800e37c:	4828      	ldr	r0, [pc, #160]	; (800e420 <enq+0x488>)
 800e37e:	f7f8 ff17 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_KCD_PTD, pc / pd, diameter * 31.4159 / pc);
 800e382:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <enq+0x494>)
 800e384:	ed93 7a00 	vldr	s14, [r3]
 800e388:	4b29      	ldr	r3, [pc, #164]	; (800e430 <enq+0x498>)
 800e38a:	edd3 7a00 	vldr	s15, [r3]
 800e38e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e392:	ee16 0a90 	vmov	r0, s13
 800e396:	f7f2 f8d7 	bl	8000548 <__aeabi_f2d>
 800e39a:	4604      	mov	r4, r0
 800e39c:	460d      	mov	r5, r1
 800e39e:	4b29      	ldr	r3, [pc, #164]	; (800e444 <enq+0x4ac>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f2 f8d0 	bl	8000548 <__aeabi_f2d>
 800e3a8:	a31b      	add	r3, pc, #108	; (adr r3, 800e418 <enq+0x480>)
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	f7f2 f923 	bl	80005f8 <__aeabi_dmul>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	4690      	mov	r8, r2
 800e3b8:	4699      	mov	r9, r3
 800e3ba:	4b1c      	ldr	r3, [pc, #112]	; (800e42c <enq+0x494>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7f2 f8c2 	bl	8000548 <__aeabi_f2d>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4640      	mov	r0, r8
 800e3ca:	4649      	mov	r1, r9
 800e3cc:	f7f2 fa3e 	bl	800084c <__aeabi_ddiv>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	e9cd 2300 	strd	r2, r3, [sp]
 800e3d8:	4622      	mov	r2, r4
 800e3da:	462b      	mov	r3, r5
 800e3dc:	2120      	movs	r1, #32
 800e3de:	4810      	ldr	r0, [pc, #64]	; (800e420 <enq+0x488>)
 800e3e0:	f7f8 fee6 	bl	80071b0 <RNSSet>
		Await(600);
 800e3e4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e3e8:	f000 fa7c 	bl	800e8e4 <Await>
		sprintf(data, "kcd & ptd set, press SQUARE to get the max velocity\n");
 800e3ec:	4916      	ldr	r1, [pc, #88]	; (800e448 <enq+0x4b0>)
 800e3ee:	4812      	ldr	r0, [pc, #72]	; (800e438 <enq+0x4a0>)
 800e3f0:	f011 fc86 	bl	801fd00 <siprintf>
		UARTSend
 800e3f4:	4910      	ldr	r1, [pc, #64]	; (800e438 <enq+0x4a0>)
 800e3f6:	4811      	ldr	r0, [pc, #68]	; (800e43c <enq+0x4a4>)
 800e3f8:	f7f5 fb3a 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e3fc:	2014      	movs	r0, #20
 800e3fe:	f000 fa71 	bl	800e8e4 <Await>
		n = 3;
 800e402:	4b12      	ldr	r3, [pc, #72]	; (800e44c <enq+0x4b4>)
 800e404:	2203      	movs	r2, #3
 800e406:	601a      	str	r2, [r3, #0]
		break;
 800e408:	e246      	b.n	800e898 <enq+0x900>

	case 4:
		RNSSet(&rns, RNS_RESET_POS);
 800e40a:	2114      	movs	r1, #20
 800e40c:	4804      	ldr	r0, [pc, #16]	; (800e420 <enq+0x488>)
 800e40e:	f7f8 fecf 	bl	80071b0 <RNSSet>
		while(ps4.button != SQUARE){
 800e412:	e09c      	b.n	800e54e <enq+0x5b6>
 800e414:	f3af 8000 	nop.w
 800e418:	6c22680a 	.word	0x6c22680a
 800e41c:	403f6a78 	.word	0x403f6a78
 800e420:	200093ec 	.word	0x200093ec
 800e424:	2000a8dc 	.word	0x2000a8dc
 800e428:	20009464 	.word	0x20009464
 800e42c:	2000a26c 	.word	0x2000a26c
 800e430:	20009744 	.word	0x20009744
 800e434:	080249f4 	.word	0x080249f4
 800e438:	20006a8c 	.word	0x20006a8c
 800e43c:	20006c74 	.word	0x20006c74
 800e440:	2000a448 	.word	0x2000a448
 800e444:	20007ba8 	.word	0x20007ba8
 800e448:	08024a14 	.word	0x08024a14
 800e44c:	2000767c 	.word	0x2000767c
			RNSEnquire(RNS_VEL_BOTH, &rns);
 800e450:	49b1      	ldr	r1, [pc, #708]	; (800e718 <enq+0x780>)
 800e452:	2057      	movs	r0, #87	; 0x57
 800e454:	f7f9 f818 	bl	8007488 <RNSEnquire>
			a = rns.enq.enq_buffer[0].data;
 800e458:	4baf      	ldr	r3, [pc, #700]	; (800e718 <enq+0x780>)
 800e45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45c:	4aaf      	ldr	r2, [pc, #700]	; (800e71c <enq+0x784>)
 800e45e:	6013      	str	r3, [r2, #0]
			b = rns.enq.enq_buffer[1].data;
 800e460:	4bad      	ldr	r3, [pc, #692]	; (800e718 <enq+0x780>)
 800e462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e464:	4aae      	ldr	r2, [pc, #696]	; (800e720 <enq+0x788>)
 800e466:	6013      	str	r3, [r2, #0]
			c = rns.enq.enq_buffer[2].data;
 800e468:	4bab      	ldr	r3, [pc, #684]	; (800e718 <enq+0x780>)
 800e46a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e46c:	4aad      	ldr	r2, [pc, #692]	; (800e724 <enq+0x78c>)
 800e46e:	6013      	str	r3, [r2, #0]
			d = rns.enq.enq_buffer[3].data;
 800e470:	4ba9      	ldr	r3, [pc, #676]	; (800e718 <enq+0x780>)
 800e472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e474:	4aac      	ldr	r2, [pc, #688]	; (800e728 <enq+0x790>)
 800e476:	6013      	str	r3, [r2, #0]
			if(a > v1)		v1 = a;
 800e478:	4ba8      	ldr	r3, [pc, #672]	; (800e71c <enq+0x784>)
 800e47a:	ed93 7a00 	vldr	s14, [r3]
 800e47e:	4bab      	ldr	r3, [pc, #684]	; (800e72c <enq+0x794>)
 800e480:	edd3 7a00 	vldr	s15, [r3]
 800e484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48c:	dd03      	ble.n	800e496 <enq+0x4fe>
 800e48e:	4ba3      	ldr	r3, [pc, #652]	; (800e71c <enq+0x784>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4aa6      	ldr	r2, [pc, #664]	; (800e72c <enq+0x794>)
 800e494:	6013      	str	r3, [r2, #0]
			if(b > v2)		v2 = b;
 800e496:	4ba2      	ldr	r3, [pc, #648]	; (800e720 <enq+0x788>)
 800e498:	ed93 7a00 	vldr	s14, [r3]
 800e49c:	4ba4      	ldr	r3, [pc, #656]	; (800e730 <enq+0x798>)
 800e49e:	edd3 7a00 	vldr	s15, [r3]
 800e4a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4aa:	dd03      	ble.n	800e4b4 <enq+0x51c>
 800e4ac:	4b9c      	ldr	r3, [pc, #624]	; (800e720 <enq+0x788>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a9f      	ldr	r2, [pc, #636]	; (800e730 <enq+0x798>)
 800e4b2:	6013      	str	r3, [r2, #0]
			if(c > v3)		v3 = c;
 800e4b4:	4b9b      	ldr	r3, [pc, #620]	; (800e724 <enq+0x78c>)
 800e4b6:	ed93 7a00 	vldr	s14, [r3]
 800e4ba:	4b9e      	ldr	r3, [pc, #632]	; (800e734 <enq+0x79c>)
 800e4bc:	edd3 7a00 	vldr	s15, [r3]
 800e4c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	dd03      	ble.n	800e4d2 <enq+0x53a>
 800e4ca:	4b96      	ldr	r3, [pc, #600]	; (800e724 <enq+0x78c>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a99      	ldr	r2, [pc, #612]	; (800e734 <enq+0x79c>)
 800e4d0:	6013      	str	r3, [r2, #0]
			if(d > v4)		v4 = d;
 800e4d2:	4b95      	ldr	r3, [pc, #596]	; (800e728 <enq+0x790>)
 800e4d4:	ed93 7a00 	vldr	s14, [r3]
 800e4d8:	4b97      	ldr	r3, [pc, #604]	; (800e738 <enq+0x7a0>)
 800e4da:	edd3 7a00 	vldr	s15, [r3]
 800e4de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e6:	dd03      	ble.n	800e4f0 <enq+0x558>
 800e4e8:	4b8f      	ldr	r3, [pc, #572]	; (800e728 <enq+0x790>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a92      	ldr	r2, [pc, #584]	; (800e738 <enq+0x7a0>)
 800e4ee:	6013      	str	r3, [r2, #0]
			sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", v1, v2, v3, v4);
 800e4f0:	4b8e      	ldr	r3, [pc, #568]	; (800e72c <enq+0x794>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f2 f827 	bl	8000548 <__aeabi_f2d>
 800e4fa:	4682      	mov	sl, r0
 800e4fc:	468b      	mov	fp, r1
 800e4fe:	4b8c      	ldr	r3, [pc, #560]	; (800e730 <enq+0x798>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4618      	mov	r0, r3
 800e504:	f7f2 f820 	bl	8000548 <__aeabi_f2d>
 800e508:	4604      	mov	r4, r0
 800e50a:	460d      	mov	r5, r1
 800e50c:	4b89      	ldr	r3, [pc, #548]	; (800e734 <enq+0x79c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f7f2 f819 	bl	8000548 <__aeabi_f2d>
 800e516:	4680      	mov	r8, r0
 800e518:	4689      	mov	r9, r1
 800e51a:	4b87      	ldr	r3, [pc, #540]	; (800e738 <enq+0x7a0>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4618      	mov	r0, r3
 800e520:	f7f2 f812 	bl	8000548 <__aeabi_f2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e52c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e530:	e9cd 4500 	strd	r4, r5, [sp]
 800e534:	4652      	mov	r2, sl
 800e536:	465b      	mov	r3, fp
 800e538:	4980      	ldr	r1, [pc, #512]	; (800e73c <enq+0x7a4>)
 800e53a:	4881      	ldr	r0, [pc, #516]	; (800e740 <enq+0x7a8>)
 800e53c:	f011 fbe0 	bl	801fd00 <siprintf>
			UARTSend
 800e540:	497f      	ldr	r1, [pc, #508]	; (800e740 <enq+0x7a8>)
 800e542:	4880      	ldr	r0, [pc, #512]	; (800e744 <enq+0x7ac>)
 800e544:	f7f5 fa94 	bl	8003a70 <UARTPrintString>
			Await(20);
 800e548:	2014      	movs	r0, #20
 800e54a:	f000 f9cb 	bl	800e8e4 <Await>
		while(ps4.button != SQUARE){
 800e54e:	4b7e      	ldr	r3, [pc, #504]	; (800e748 <enq+0x7b0>)
 800e550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e556:	f47f af7b 	bne.w	800e450 <enq+0x4b8>
		}
		while(ps4.button == SQUARE);
 800e55a:	bf00      	nop
 800e55c:	4b7a      	ldr	r3, [pc, #488]	; (800e748 <enq+0x7b0>)
 800e55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e564:	d0fa      	beq.n	800e55c <enq+0x5c4>
		RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / v1, 19999.0);
 800e566:	4b71      	ldr	r3, [pc, #452]	; (800e72c <enq+0x794>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7f1 ffec 	bl	8000548 <__aeabi_f2d>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	f04f 0000 	mov.w	r0, #0
 800e578:	4974      	ldr	r1, [pc, #464]	; (800e74c <enq+0x7b4>)
 800e57a:	f7f2 f967 	bl	800084c <__aeabi_ddiv>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4610      	mov	r0, r2
 800e584:	4619      	mov	r1, r3
 800e586:	a362      	add	r3, pc, #392	; (adr r3, 800e710 <enq+0x778>)
 800e588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e590:	e9cd 0100 	strd	r0, r1, [sp]
 800e594:	f04f 0200 	mov.w	r2, #0
 800e598:	4b6c      	ldr	r3, [pc, #432]	; (800e74c <enq+0x7b4>)
 800e59a:	212b      	movs	r1, #43	; 0x2b
 800e59c:	485e      	ldr	r0, [pc, #376]	; (800e718 <enq+0x780>)
 800e59e:	f7f8 fe07 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / v2, 19999.0);
 800e5a2:	4b63      	ldr	r3, [pc, #396]	; (800e730 <enq+0x798>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f1 ffce 	bl	8000548 <__aeabi_f2d>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	460b      	mov	r3, r1
 800e5b0:	f04f 0000 	mov.w	r0, #0
 800e5b4:	4965      	ldr	r1, [pc, #404]	; (800e74c <enq+0x7b4>)
 800e5b6:	f7f2 f949 	bl	800084c <__aeabi_ddiv>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	4610      	mov	r0, r2
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	a353      	add	r3, pc, #332	; (adr r3, 800e710 <enq+0x778>)
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5cc:	e9cd 0100 	strd	r0, r1, [sp]
 800e5d0:	f04f 0200 	mov.w	r2, #0
 800e5d4:	4b5d      	ldr	r3, [pc, #372]	; (800e74c <enq+0x7b4>)
 800e5d6:	212c      	movs	r1, #44	; 0x2c
 800e5d8:	484f      	ldr	r0, [pc, #316]	; (800e718 <enq+0x780>)
 800e5da:	f7f8 fde9 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / v3, 19999.0);
 800e5de:	4b55      	ldr	r3, [pc, #340]	; (800e734 <enq+0x79c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f1 ffb0 	bl	8000548 <__aeabi_f2d>
 800e5e8:	4602      	mov	r2, r0
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	f04f 0000 	mov.w	r0, #0
 800e5f0:	4956      	ldr	r1, [pc, #344]	; (800e74c <enq+0x7b4>)
 800e5f2:	f7f2 f92b 	bl	800084c <__aeabi_ddiv>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	a344      	add	r3, pc, #272	; (adr r3, 800e710 <enq+0x778>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e608:	e9cd 0100 	strd	r0, r1, [sp]
 800e60c:	f04f 0200 	mov.w	r2, #0
 800e610:	4b4e      	ldr	r3, [pc, #312]	; (800e74c <enq+0x7b4>)
 800e612:	212d      	movs	r1, #45	; 0x2d
 800e614:	4840      	ldr	r0, [pc, #256]	; (800e718 <enq+0x780>)
 800e616:	f7f8 fdcb 	bl	80071b0 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / v4, 19999.0);
 800e61a:	4b47      	ldr	r3, [pc, #284]	; (800e738 <enq+0x7a0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f1 ff92 	bl	8000548 <__aeabi_f2d>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	f04f 0000 	mov.w	r0, #0
 800e62c:	4947      	ldr	r1, [pc, #284]	; (800e74c <enq+0x7b4>)
 800e62e:	f7f2 f90d 	bl	800084c <__aeabi_ddiv>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4610      	mov	r0, r2
 800e638:	4619      	mov	r1, r3
 800e63a:	a335      	add	r3, pc, #212	; (adr r3, 800e710 <enq+0x778>)
 800e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e644:	e9cd 0100 	strd	r0, r1, [sp]
 800e648:	f04f 0200 	mov.w	r2, #0
 800e64c:	4b3f      	ldr	r3, [pc, #252]	; (800e74c <enq+0x7b4>)
 800e64e:	212e      	movs	r1, #46	; 0x2e
 800e650:	4831      	ldr	r0, [pc, #196]	; (800e718 <enq+0x780>)
 800e652:	f7f8 fdad 	bl	80071b0 <RNSSet>
		Await(600);
 800e656:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e65a:	f000 f943 	bl	800e8e4 <Await>
		sprintf(data, "max velocity set complete\n");
 800e65e:	493c      	ldr	r1, [pc, #240]	; (800e750 <enq+0x7b8>)
 800e660:	4837      	ldr	r0, [pc, #220]	; (800e740 <enq+0x7a8>)
 800e662:	f011 fb4d 	bl	801fd00 <siprintf>
		UARTSend
 800e666:	4936      	ldr	r1, [pc, #216]	; (800e740 <enq+0x7a8>)
 800e668:	4836      	ldr	r0, [pc, #216]	; (800e744 <enq+0x7ac>)
 800e66a:	f7f5 fa01 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e66e:	2014      	movs	r0, #20
 800e670:	f000 f938 	bl	800e8e4 <Await>
		sprintf(data, "diameter = %f\n", diameter);
 800e674:	4b37      	ldr	r3, [pc, #220]	; (800e754 <enq+0x7bc>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f1 ff65 	bl	8000548 <__aeabi_f2d>
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	4935      	ldr	r1, [pc, #212]	; (800e758 <enq+0x7c0>)
 800e684:	482e      	ldr	r0, [pc, #184]	; (800e740 <enq+0x7a8>)
 800e686:	f011 fb3b 	bl	801fd00 <siprintf>
		UARTSend
 800e68a:	492d      	ldr	r1, [pc, #180]	; (800e740 <enq+0x7a8>)
 800e68c:	482d      	ldr	r0, [pc, #180]	; (800e744 <enq+0x7ac>)
 800e68e:	f7f5 f9ef 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e692:	2014      	movs	r0, #20
 800e694:	f000 f926 	bl	800e8e4 <Await>
		sprintf(data, "pulse: %.3f, %.3f, %.3f, %.3f\n", pa, pb, pc, pd);
 800e698:	4b30      	ldr	r3, [pc, #192]	; (800e75c <enq+0x7c4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f7f1 ff53 	bl	8000548 <__aeabi_f2d>
 800e6a2:	4682      	mov	sl, r0
 800e6a4:	468b      	mov	fp, r1
 800e6a6:	4b2e      	ldr	r3, [pc, #184]	; (800e760 <enq+0x7c8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7f1 ff4c 	bl	8000548 <__aeabi_f2d>
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	460d      	mov	r5, r1
 800e6b4:	4b2b      	ldr	r3, [pc, #172]	; (800e764 <enq+0x7cc>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f1 ff45 	bl	8000548 <__aeabi_f2d>
 800e6be:	4680      	mov	r8, r0
 800e6c0:	4689      	mov	r9, r1
 800e6c2:	4b29      	ldr	r3, [pc, #164]	; (800e768 <enq+0x7d0>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7f1 ff3e 	bl	8000548 <__aeabi_f2d>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e6d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e6d8:	e9cd 4500 	strd	r4, r5, [sp]
 800e6dc:	4652      	mov	r2, sl
 800e6de:	465b      	mov	r3, fp
 800e6e0:	4922      	ldr	r1, [pc, #136]	; (800e76c <enq+0x7d4>)
 800e6e2:	4817      	ldr	r0, [pc, #92]	; (800e740 <enq+0x7a8>)
 800e6e4:	f011 fb0c 	bl	801fd00 <siprintf>
		UARTSend
 800e6e8:	4915      	ldr	r1, [pc, #84]	; (800e740 <enq+0x7a8>)
 800e6ea:	4816      	ldr	r0, [pc, #88]	; (800e744 <enq+0x7ac>)
 800e6ec:	f7f5 f9c0 	bl	8003a70 <UARTPrintString>
		Await(20);
 800e6f0:	2014      	movs	r0, #20
 800e6f2:	f000 f8f7 	bl	800e8e4 <Await>
		sprintf(data, "max velocity: %.3f, %.3f, %.3f, %.3f\n", v1, v2, v3, v4);
 800e6f6:	4b0d      	ldr	r3, [pc, #52]	; (800e72c <enq+0x794>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7f1 ff24 	bl	8000548 <__aeabi_f2d>
 800e700:	4682      	mov	sl, r0
 800e702:	468b      	mov	fp, r1
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <enq+0x798>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	e032      	b.n	800e770 <enq+0x7d8>
 800e70a:	bf00      	nop
 800e70c:	f3af 8000 	nop.w
 800e710:	00000000 	.word	0x00000000
 800e714:	40d387c0 	.word	0x40d387c0
 800e718:	200093ec 	.word	0x200093ec
 800e71c:	2000a444 	.word	0x2000a444
 800e720:	20007484 	.word	0x20007484
 800e724:	2000998c 	.word	0x2000998c
 800e728:	20009be8 	.word	0x20009be8
 800e72c:	20007884 	.word	0x20007884
 800e730:	20009a98 	.word	0x20009a98
 800e734:	20007bb0 	.word	0x20007bb0
 800e738:	2000ab14 	.word	0x2000ab14
 800e73c:	08024a4c 	.word	0x08024a4c
 800e740:	20006a8c 	.word	0x20006a8c
 800e744:	20006c74 	.word	0x20006c74
 800e748:	2000a448 	.word	0x2000a448
 800e74c:	3ff00000 	.word	0x3ff00000
 800e750:	08024a64 	.word	0x08024a64
 800e754:	20007ba8 	.word	0x20007ba8
 800e758:	080249c8 	.word	0x080249c8
 800e75c:	2000a8dc 	.word	0x2000a8dc
 800e760:	20009464 	.word	0x20009464
 800e764:	2000a26c 	.word	0x2000a26c
 800e768:	20009744 	.word	0x20009744
 800e76c:	080249f4 	.word	0x080249f4
 800e770:	4618      	mov	r0, r3
 800e772:	f7f1 fee9 	bl	8000548 <__aeabi_f2d>
 800e776:	4604      	mov	r4, r0
 800e778:	460d      	mov	r5, r1
 800e77a:	4b4a      	ldr	r3, [pc, #296]	; (800e8a4 <enq+0x90c>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4618      	mov	r0, r3
 800e780:	f7f1 fee2 	bl	8000548 <__aeabi_f2d>
 800e784:	4680      	mov	r8, r0
 800e786:	4689      	mov	r9, r1
 800e788:	4b47      	ldr	r3, [pc, #284]	; (800e8a8 <enq+0x910>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f1 fedb 	bl	8000548 <__aeabi_f2d>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e79a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e79e:	e9cd 4500 	strd	r4, r5, [sp]
 800e7a2:	4652      	mov	r2, sl
 800e7a4:	465b      	mov	r3, fp
 800e7a6:	4941      	ldr	r1, [pc, #260]	; (800e8ac <enq+0x914>)
 800e7a8:	4841      	ldr	r0, [pc, #260]	; (800e8b0 <enq+0x918>)
 800e7aa:	f011 faa9 	bl	801fd00 <siprintf>
		UARTSend
 800e7ae:	4940      	ldr	r1, [pc, #256]	; (800e8b0 <enq+0x918>)
 800e7b0:	4840      	ldr	r0, [pc, #256]	; (800e8b4 <enq+0x91c>)
 800e7b2:	f7f5 f95d 	bl	8003a70 <UARTPrintString>
		n = 0;
 800e7b6:	4b40      	ldr	r3, [pc, #256]	; (800e8b8 <enq+0x920>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
		break;
 800e7bc:	e06c      	b.n	800e898 <enq+0x900>
//		ypos = rns.enq.enq_buffer[1].data;
//		z = rns.enq.enq_buffer[2].data;
//		break;

	case 6:
		RNSSet(&rns, RNS_RESET_POS);
 800e7be:	2114      	movs	r1, #20
 800e7c0:	483e      	ldr	r0, [pc, #248]	; (800e8bc <enq+0x924>)
 800e7c2:	f7f8 fcf5 	bl	80071b0 <RNSSet>
		while(ps4.button != SQUARE){
 800e7c6:	e042      	b.n	800e84e <enq+0x8b6>
			RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 800e7c8:	493c      	ldr	r1, [pc, #240]	; (800e8bc <enq+0x924>)
 800e7ca:	205f      	movs	r0, #95	; 0x5f
 800e7cc:	f7f8 fe5c 	bl	8007488 <RNSEnquire>
			xpos = rns.enq.enq_buffer[0].data;
 800e7d0:	4b3a      	ldr	r3, [pc, #232]	; (800e8bc <enq+0x924>)
 800e7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d4:	4a3a      	ldr	r2, [pc, #232]	; (800e8c0 <enq+0x928>)
 800e7d6:	6013      	str	r3, [r2, #0]
			ypos = rns.enq.enq_buffer[1].data;
 800e7d8:	4b38      	ldr	r3, [pc, #224]	; (800e8bc <enq+0x924>)
 800e7da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7dc:	4a39      	ldr	r2, [pc, #228]	; (800e8c4 <enq+0x92c>)
 800e7de:	6013      	str	r3, [r2, #0]
			z = rns.enq.enq_buffer[2].data;
 800e7e0:	4b36      	ldr	r3, [pc, #216]	; (800e8bc <enq+0x924>)
 800e7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e4:	4a38      	ldr	r2, [pc, #224]	; (800e8c8 <enq+0x930>)
 800e7e6:	6013      	str	r3, [r2, #0]
			zrad = rns.enq.enq_buffer[3].data;
 800e7e8:	4b34      	ldr	r3, [pc, #208]	; (800e8bc <enq+0x924>)
 800e7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ec:	4a37      	ldr	r2, [pc, #220]	; (800e8cc <enq+0x934>)
 800e7ee:	6013      	str	r3, [r2, #0]
			sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", xpos, ypos, z, zrad);
 800e7f0:	4b33      	ldr	r3, [pc, #204]	; (800e8c0 <enq+0x928>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7f1 fea7 	bl	8000548 <__aeabi_f2d>
 800e7fa:	4682      	mov	sl, r0
 800e7fc:	468b      	mov	fp, r1
 800e7fe:	4b31      	ldr	r3, [pc, #196]	; (800e8c4 <enq+0x92c>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4618      	mov	r0, r3
 800e804:	f7f1 fea0 	bl	8000548 <__aeabi_f2d>
 800e808:	4604      	mov	r4, r0
 800e80a:	460d      	mov	r5, r1
 800e80c:	4b2e      	ldr	r3, [pc, #184]	; (800e8c8 <enq+0x930>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4618      	mov	r0, r3
 800e812:	f7f1 fe99 	bl	8000548 <__aeabi_f2d>
 800e816:	4680      	mov	r8, r0
 800e818:	4689      	mov	r9, r1
 800e81a:	4b2c      	ldr	r3, [pc, #176]	; (800e8cc <enq+0x934>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f1 fe92 	bl	8000548 <__aeabi_f2d>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e82c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e830:	e9cd 4500 	strd	r4, r5, [sp]
 800e834:	4652      	mov	r2, sl
 800e836:	465b      	mov	r3, fp
 800e838:	4925      	ldr	r1, [pc, #148]	; (800e8d0 <enq+0x938>)
 800e83a:	481d      	ldr	r0, [pc, #116]	; (800e8b0 <enq+0x918>)
 800e83c:	f011 fa60 	bl	801fd00 <siprintf>
			UARTSend
 800e840:	491b      	ldr	r1, [pc, #108]	; (800e8b0 <enq+0x918>)
 800e842:	481c      	ldr	r0, [pc, #112]	; (800e8b4 <enq+0x91c>)
 800e844:	f7f5 f914 	bl	8003a70 <UARTPrintString>
			Await(20);
 800e848:	2014      	movs	r0, #20
 800e84a:	f000 f84b 	bl	800e8e4 <Await>
		while(ps4.button != SQUARE){
 800e84e:	4b21      	ldr	r3, [pc, #132]	; (800e8d4 <enq+0x93c>)
 800e850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e856:	d1b7      	bne.n	800e7c8 <enq+0x830>
		}
		while(ps4.button == SQUARE);
 800e858:	bf00      	nop
 800e85a:	4b1e      	ldr	r3, [pc, #120]	; (800e8d4 <enq+0x93c>)
 800e85c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e85e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e862:	d0fa      	beq.n	800e85a <enq+0x8c2>
		n = 0;
 800e864:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <enq+0x920>)
 800e866:	2200      	movs	r2, #0
 800e868:	601a      	str	r2, [r3, #0]
		break;
 800e86a:	e015      	b.n	800e898 <enq+0x900>

	case 8:
		sprintf(data, "%d, %d\n", enqpwLG, enqpwLlf);
 800e86c:	4b1a      	ldr	r3, [pc, #104]	; (800e8d8 <enq+0x940>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	4b1a      	ldr	r3, [pc, #104]	; (800e8dc <enq+0x944>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	491a      	ldr	r1, [pc, #104]	; (800e8e0 <enq+0x948>)
 800e876:	480e      	ldr	r0, [pc, #56]	; (800e8b0 <enq+0x918>)
 800e878:	f011 fa42 	bl	801fd00 <siprintf>
		UARTSend
 800e87c:	490c      	ldr	r1, [pc, #48]	; (800e8b0 <enq+0x918>)
 800e87e:	480d      	ldr	r0, [pc, #52]	; (800e8b4 <enq+0x91c>)
 800e880:	f7f5 f8f6 	bl	8003a70 <UARTPrintString>
		while(ps4.button == SQUARE);
 800e884:	bf00      	nop
 800e886:	4b13      	ldr	r3, [pc, #76]	; (800e8d4 <enq+0x93c>)
 800e888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e88e:	d0fa      	beq.n	800e886 <enq+0x8ee>
		n = 0;
 800e890:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <enq+0x920>)
 800e892:	2200      	movs	r2, #0
 800e894:	601a      	str	r2, [r3, #0]
		break;
 800e896:	bf00      	nop
//		sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", a, b, c, d);
//		UARTSend
//		n = 0;
//		break;
	}
}
 800e898:	bf00      	nop
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8a2:	bf00      	nop
 800e8a4:	20007bb0 	.word	0x20007bb0
 800e8a8:	2000ab14 	.word	0x2000ab14
 800e8ac:	08024a80 	.word	0x08024a80
 800e8b0:	20006a8c 	.word	0x20006a8c
 800e8b4:	20006c74 	.word	0x20006c74
 800e8b8:	2000767c 	.word	0x2000767c
 800e8bc:	200093ec 	.word	0x200093ec
 800e8c0:	20007488 	.word	0x20007488
 800e8c4:	2000a1e8 	.word	0x2000a1e8
 800e8c8:	200093e8 	.word	0x200093e8
 800e8cc:	200071c8 	.word	0x200071c8
 800e8d0:	08024a4c 	.word	0x08024a4c
 800e8d4:	2000a448 	.word	0x2000a448
 800e8d8:	20009ccc 	.word	0x20009ccc
 800e8dc:	20007d7c 	.word	0x20007d7c
 800e8e0:	080248fc 	.word	0x080248fc

0800e8e4 <Await>:

void Await(uint32_t ticks){
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
	counter = 0;
 800e8ec:	4b08      	ldr	r3, [pc, #32]	; (800e910 <Await+0x2c>)
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]
	while(counter < ticks);
 800e8f2:	bf00      	nop
 800e8f4:	4b06      	ldr	r3, [pc, #24]	; (800e910 <Await+0x2c>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d8f9      	bhi.n	800e8f4 <Await+0x10>
}
 800e900:	bf00      	nop
 800e902:	bf00      	nop
 800e904:	370c      	adds	r7, #12
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	20009ac0 	.word	0x20009ac0

0800e914 <DMA1_Stream0_IRQHandler>:
//#include "adapter.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800e918:	4802      	ldr	r0, [pc, #8]	; (800e924 <DMA1_Stream0_IRQHandler+0x10>)
 800e91a:	f006 ff25 	bl	8015768 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800e91e:	bf00      	nop
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	2000a3e4 	.word	0x2000a3e4

0800e928 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800e92c:	4802      	ldr	r0, [pc, #8]	; (800e938 <DMA1_Stream3_IRQHandler+0x10>)
 800e92e:	f006 ff1b 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e932:	bf00      	nop
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	200071f4 	.word	0x200071f4

0800e93c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800e940:	4802      	ldr	r0, [pc, #8]	; (800e94c <DMA1_Stream2_IRQHandler+0x10>)
 800e942:	f006 ff11 	bl	8015768 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800e946:	bf00      	nop
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	200065b8 	.word	0x200065b8

0800e950 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800e954:	4802      	ldr	r0, [pc, #8]	; (800e960 <DMA1_Stream1_IRQHandler+0x10>)
 800e956:	f006 ff07 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e95a:	bf00      	nop
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	200066fc 	.word	0x200066fc

0800e964 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800e968:	4802      	ldr	r0, [pc, #8]	; (800e974 <DMA1_Stream4_IRQHandler+0x10>)
 800e96a:	f006 fefd 	bl	8015768 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800e96e:	bf00      	nop
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20006dd4 	.word	0x20006dd4

0800e978 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800e97c:	4802      	ldr	r0, [pc, #8]	; (800e988 <DMA1_Stream5_IRQHandler+0x10>)
 800e97e:	f006 fef3 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e982:	bf00      	nop
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20006618 	.word	0x20006618

0800e98c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800e990:	4802      	ldr	r0, [pc, #8]	; (800e99c <DMA1_Stream6_IRQHandler+0x10>)
 800e992:	f006 fee9 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e996:	bf00      	nop
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20006904 	.word	0x20006904

0800e9a0 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800e9a4:	4802      	ldr	r0, [pc, #8]	; (800e9b0 <DMA1_Stream7_IRQHandler+0x10>)
 800e9a6:	f006 fedf 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e9aa:	bf00      	nop
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20006e34 	.word	0x20006e34

0800e9b4 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	af00      	add	r7, sp, #0

}
 800e9b8:	bf00      	nop
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr
	...

0800e9c4 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800e9c8:	4802      	ldr	r0, [pc, #8]	; (800e9d4 <DMA2_Stream1_IRQHandler+0x10>)
 800e9ca:	f006 fecd 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800e9ce:	bf00      	nop
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20006edc 	.word	0x20006edc

0800e9d8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
	KalmanFilter(&kf_adc_x);
 800e9dc:	480b      	ldr	r0, [pc, #44]	; (800ea0c <DMA2_Stream2_IRQHandler+0x34>)
 800e9de:	f7f5 fbef 	bl	80041c0 <KalmanFilter>
	KalmanFilter(&kf_adc_y);
 800e9e2:	480b      	ldr	r0, [pc, #44]	; (800ea10 <DMA2_Stream2_IRQHandler+0x38>)
 800e9e4:	f7f5 fbec 	bl	80041c0 <KalmanFilter>
	Moving_Average_Filter (&move_aveX);
 800e9e8:	480a      	ldr	r0, [pc, #40]	; (800ea14 <DMA2_Stream2_IRQHandler+0x3c>)
 800e9ea:	f7f7 fd3b 	bl	8006464 <Moving_Average_Filter>
	Moving_Average_Filter (&move_aveY);
 800e9ee:	480a      	ldr	r0, [pc, #40]	; (800ea18 <DMA2_Stream2_IRQHandler+0x40>)
 800e9f0:	f7f7 fd38 	bl	8006464 <Moving_Average_Filter>
	Laser(&X_laser);
 800e9f4:	4809      	ldr	r0, [pc, #36]	; (800ea1c <DMA2_Stream2_IRQHandler+0x44>)
 800e9f6:	f7f5 fc51 	bl	800429c <Laser>
	Laser(&Y_laser);
 800e9fa:	4809      	ldr	r0, [pc, #36]	; (800ea20 <DMA2_Stream2_IRQHandler+0x48>)
 800e9fc:	f7f5 fc4e 	bl	800429c <Laser>
	HAL_DMA_IRQHandler(&hdma_adc1);
 800ea00:	4808      	ldr	r0, [pc, #32]	; (800ea24 <DMA2_Stream2_IRQHandler+0x4c>)
 800ea02:	f006 feb1 	bl	8015768 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_spi1_rx);
}
 800ea06:	bf00      	nop
 800ea08:	bd80      	pop	{r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	200071cc 	.word	0x200071cc
 800ea10:	20009c1c 	.word	0x20009c1c
 800ea14:	200095e8 	.word	0x200095e8
 800ea18:	2000a6fc 	.word	0x2000a6fc
 800ea1c:	20009b84 	.word	0x20009b84
 800ea20:	20009c88 	.word	0x20009c88
 800ea24:	20006fcc 	.word	0x20006fcc

0800ea28 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800ea2c:	4802      	ldr	r0, [pc, #8]	; (800ea38 <DMA2_Stream3_IRQHandler+0x10>)
 800ea2e:	f006 fe9b 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800ea32:	bf00      	nop
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	2000702c 	.word	0x2000702c

0800ea3c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800ea40:	4802      	ldr	r0, [pc, #8]	; (800ea4c <DMA2_Stream5_IRQHandler+0x10>)
 800ea42:	f006 fe91 	bl	8015768 <HAL_DMA_IRQHandler>
}
 800ea46:	bf00      	nop
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	2000a7fc 	.word	0x2000a7fc

0800ea50 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0

}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	af00      	add	r7, sp, #0

}
 800ea62:	bf00      	nop
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	af00      	add	r7, sp, #0

	while(1){
 800ea70:	e7fe      	b.n	800ea70 <MemManage_Handler+0x4>

0800ea72 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800ea72:	b480      	push	{r7}
 800ea74:	af00      	add	r7, sp, #0

}
 800ea76:	bf00      	nop
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7e:	4770      	bx	lr

0800ea80 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800ea80:	b480      	push	{r7}
 800ea82:	af00      	add	r7, sp, #0

}
 800ea84:	bf00      	nop
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800ea8e:	b480      	push	{r7}
 800ea90:	af00      	add	r7, sp, #0

}
 800ea92:	bf00      	nop
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800eaa0:	4b12      	ldr	r3, [pc, #72]	; (800eaec <TIM1_UP_TIM10_IRQHandler+0x50>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b81      	cmp	r3, #129	; 0x81
 800eaa8:	d109      	bne.n	800eabe <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800eaaa:	4b11      	ldr	r3, [pc, #68]	; (800eaf0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800eaac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	3301      	adds	r3, #1
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	b21a      	sxth	r2, r3
 800eab8:	4b0d      	ldr	r3, [pc, #52]	; (800eaf0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800eaba:	805a      	strh	r2, [r3, #2]
 800eabc:	e00d      	b.n	800eada <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800eabe:	4b0b      	ldr	r3, [pc, #44]	; (800eaec <TIM1_UP_TIM10_IRQHandler+0x50>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b91      	cmp	r3, #145	; 0x91
 800eac6:	d108      	bne.n	800eada <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800eaca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eace:	b29b      	uxth	r3, r3
 800ead0:	3b01      	subs	r3, #1
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	b21a      	sxth	r2, r3
 800ead6:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800ead8:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800eada:	4b04      	ldr	r3, [pc, #16]	; (800eaec <TIM1_UP_TIM10_IRQHandler+0x50>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2200      	movs	r2, #0
 800eae0:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800eae2:	20c8      	movs	r0, #200	; 0xc8
 800eae4:	f7f3 faf2 	bl	80020cc <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
//	HAL_TIM_IRQHandler(&htim10);
	return;
 800eae8:	bf00      	nop
}
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	20006b30 	.word	0x20006b30
 800eaf0:	20007090 	.word	0x20007090

0800eaf4 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800eaf8:	4b12      	ldr	r3, [pc, #72]	; (800eb44 <TIM4_IRQHandler+0x50>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b81      	cmp	r3, #129	; 0x81
 800eb00:	d109      	bne.n	800eb16 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800eb02:	4b11      	ldr	r3, [pc, #68]	; (800eb48 <TIM4_IRQHandler+0x54>)
 800eb04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	b21a      	sxth	r2, r3
 800eb10:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <TIM4_IRQHandler+0x54>)
 800eb12:	805a      	strh	r2, [r3, #2]
 800eb14:	e00d      	b.n	800eb32 <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800eb16:	4b0b      	ldr	r3, [pc, #44]	; (800eb44 <TIM4_IRQHandler+0x50>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	2b91      	cmp	r3, #145	; 0x91
 800eb1e:	d108      	bne.n	800eb32 <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800eb20:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <TIM4_IRQHandler+0x54>)
 800eb22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	b21a      	sxth	r2, r3
 800eb2e:	4b06      	ldr	r3, [pc, #24]	; (800eb48 <TIM4_IRQHandler+0x54>)
 800eb30:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800eb32:	4b04      	ldr	r3, [pc, #16]	; (800eb44 <TIM4_IRQHandler+0x50>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2200      	movs	r2, #0
 800eb38:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800eb3a:	2064      	movs	r0, #100	; 0x64
 800eb3c:	f7f3 fac6 	bl	80020cc <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800eb40:	bf00      	nop
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	200066bc 	.word	0x200066bc
 800eb48:	200070b4 	.word	0x200070b4

0800eb4c <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800eb50:	4803      	ldr	r0, [pc, #12]	; (800eb60 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800eb52:	f00a fdf1 	bl	8019738 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800eb56:	4803      	ldr	r0, [pc, #12]	; (800eb64 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800eb58:	f00a fdee 	bl	8019738 <HAL_TIM_IRQHandler>
	return;
 800eb5c:	bf00      	nop
}
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	2000667c 	.word	0x2000667c
 800eb64:	20006964 	.word	0x20006964

0800eb68 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800eb6c:	4802      	ldr	r0, [pc, #8]	; (800eb78 <TIM2_IRQHandler+0x10>)
 800eb6e:	f00a fde3 	bl	8019738 <HAL_TIM_IRQHandler>
}
 800eb72:	bf00      	nop
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	20006c34 	.word	0x20006c34

0800eb7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb8c:	d10e      	bne.n	800ebac <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_IncTick();
 800eb8e:	f005 f85f 	bl	8013c50 <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800eb92:	4808      	ldr	r0, [pc, #32]	; (800ebb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800eb94:	f7f3 fb65 	bl	8002262 <SHIFTREGShift>
		counter ++;
 800eb98:	4b07      	ldr	r3, [pc, #28]	; (800ebb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	4a06      	ldr	r2, [pc, #24]	; (800ebb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800eba0:	6013      	str	r3, [r2, #0]
		lagoricounter ++;
 800eba2:	4b06      	ldr	r3, [pc, #24]	; (800ebbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3301      	adds	r3, #1
 800eba8:	4a04      	ldr	r2, [pc, #16]	; (800ebbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800ebaa:	6013      	str	r3, [r2, #0]
	}
}
 800ebac:	bf00      	nop
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	200098d0 	.word	0x200098d0
 800ebb8:	20009ac0 	.word	0x20009ac0
 800ebbc:	20009968 	.word	0x20009968

0800ebc0 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800ebc8:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ebca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d102      	bne.n	800ebd8 <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800ebd2:	4803      	ldr	r0, [pc, #12]	; (800ebe0 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800ebd4:	f7f7 fc98 	bl	8006508 <PSxConnectDMA>
	}
}
 800ebd8:	bf00      	nop
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	2000a448 	.word	0x2000a448

0800ebe4 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800ebe8:	4802      	ldr	r0, [pc, #8]	; (800ebf4 <I2C1_EV_IRQHandler+0x10>)
 800ebea:	f008 f879 	bl	8016ce0 <HAL_I2C_EV_IRQHandler>

}
 800ebee:	bf00      	nop
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	200077ac 	.word	0x200077ac

0800ebf8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800ebfc:	480a      	ldr	r0, [pc, #40]	; (800ec28 <I2C1_ER_IRQHandler+0x30>)
 800ebfe:	f008 f9dc 	bl	8016fba <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800ec02:	480a      	ldr	r0, [pc, #40]	; (800ec2c <I2C1_ER_IRQHandler+0x34>)
 800ec04:	f006 fcd8 	bl	80155b8 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800ec08:	4807      	ldr	r0, [pc, #28]	; (800ec28 <I2C1_ER_IRQHandler+0x30>)
 800ec0a:	f007 ff23 	bl	8016a54 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800ec0e:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <I2C1_ER_IRQHandler+0x38>)
 800ec10:	2208      	movs	r2, #8
 800ec12:	4906      	ldr	r1, [pc, #24]	; (800ec2c <I2C1_ER_IRQHandler+0x34>)
 800ec14:	4804      	ldr	r0, [pc, #16]	; (800ec28 <I2C1_ER_IRQHandler+0x30>)
 800ec16:	f7f5 f8a5 	bl	8003d64 <I2CX_DMA_RX_Init>

	PSxInitDMA(&ps4, &hi2c1);
 800ec1a:	4903      	ldr	r1, [pc, #12]	; (800ec28 <I2C1_ER_IRQHandler+0x30>)
 800ec1c:	4805      	ldr	r0, [pc, #20]	; (800ec34 <I2C1_ER_IRQHandler+0x3c>)
 800ec1e:	f7f7 fc86 	bl	800652e <PSxInitDMA>

}
 800ec22:	bf00      	nop
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	200077ac 	.word	0x200077ac
 800ec2c:	2000a3e4 	.word	0x2000a3e4
 800ec30:	00061a80 	.word	0x00061a80
 800ec34:	2000a448 	.word	0x2000a448

0800ec38 <USART1_IRQHandler>:
//
//	HAL_I2C_ER_IRQHandler(&hi2c3);
//
//}

void  USART1_IRQHandler(void){
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 800ec3c:	4802      	ldr	r0, [pc, #8]	; (800ec48 <USART1_IRQHandler+0x10>)
 800ec3e:	f00b fd91 	bl	801a764 <HAL_UART_IRQHandler>
}
 800ec42:	bf00      	nop
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	200069a4 	.word	0x200069a4

0800ec4c <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 800ec50:	4802      	ldr	r0, [pc, #8]	; (800ec5c <USART2_IRQHandler+0x10>)
 800ec52:	f00b fd87 	bl	801a764 <HAL_UART_IRQHandler>
}
 800ec56:	bf00      	nop
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20006c74 	.word	0x20006c74

0800ec60 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 800ec64:	4802      	ldr	r0, [pc, #8]	; (800ec70 <USART3_IRQHandler+0x10>)
 800ec66:	f00b fd7d 	bl	801a764 <HAL_UART_IRQHandler>
}
 800ec6a:	bf00      	nop
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	2000675c 	.word	0x2000675c

0800ec74 <UART4_IRQHandler>:

void UART4_IRQHandler(void){
 800ec74:	b580      	push	{r7, lr}
 800ec76:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 800ec78:	4804      	ldr	r0, [pc, #16]	; (800ec8c <UART4_IRQHandler+0x18>)
 800ec7a:	f00b fd73 	bl	801a764 <HAL_UART_IRQHandler>
	if(HAL_UART_Receive_IT(&huart4, UARTbuf, 9) == HAL_OK){
 800ec7e:	2209      	movs	r2, #9
 800ec80:	4903      	ldr	r1, [pc, #12]	; (800ec90 <UART4_IRQHandler+0x1c>)
 800ec82:	4802      	ldr	r0, [pc, #8]	; (800ec8c <UART4_IRQHandler+0x18>)
 800ec84:	f00b fc98 	bl	801a5b8 <HAL_UART_Receive_IT>
	}
}
 800ec88:	bf00      	nop
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	20006bf4 	.word	0x20006bf4
 800ec90:	200069e4 	.word	0x200069e4

0800ec94 <UART5_IRQHandler>:

void UART5_IRQHandler(void){
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart5);
 800ec98:	4802      	ldr	r0, [pc, #8]	; (800eca4 <UART5_IRQHandler+0x10>)
 800ec9a:	f00b fd63 	bl	801a764 <HAL_UART_IRQHandler>
}
 800ec9e:	bf00      	nop
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	200068c4 	.word	0x200068c4

0800eca8 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 800ecac:	4802      	ldr	r0, [pc, #8]	; (800ecb8 <USART6_IRQHandler+0x10>)
 800ecae:	f00b fd59 	bl	801a764 <HAL_UART_IRQHandler>
}
 800ecb2:	bf00      	nop
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	20006bb0 	.word	0x20006bb0

0800ecbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08c      	sub	sp, #48	; 0x30
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800eccc:	2200      	movs	r2, #0
 800ecce:	6879      	ldr	r1, [r7, #4]
 800ecd0:	201c      	movs	r0, #28
 800ecd2:	f006 fb7d 	bl	80153d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ecd6:	201c      	movs	r0, #28
 800ecd8:	f006 fb96 	bl	8015408 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800ecdc:	2300      	movs	r3, #0
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	4b20      	ldr	r3, [pc, #128]	; (800ed64 <HAL_InitTick+0xa8>)
 800ece2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece4:	4a1f      	ldr	r2, [pc, #124]	; (800ed64 <HAL_InitTick+0xa8>)
 800ece6:	f043 0301 	orr.w	r3, r3, #1
 800ecea:	6413      	str	r3, [r2, #64]	; 0x40
 800ecec:	4b1d      	ldr	r3, [pc, #116]	; (800ed64 <HAL_InitTick+0xa8>)
 800ecee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ecf8:	f107 0210 	add.w	r2, r7, #16
 800ecfc:	f107 0314 	add.w	r3, r7, #20
 800ed00:	4611      	mov	r1, r2
 800ed02:	4618      	mov	r0, r3
 800ed04:	f00a fa22 	bl	801914c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800ed08:	f00a f9f8 	bl	80190fc <HAL_RCC_GetPCLK1Freq>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	4a14      	ldr	r2, [pc, #80]	; (800ed68 <HAL_InitTick+0xac>)
 800ed16:	fba2 2303 	umull	r2, r3, r2, r3
 800ed1a:	0c9b      	lsrs	r3, r3, #18
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800ed20:	4b12      	ldr	r3, [pc, #72]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ed26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800ed28:	4b10      	ldr	r3, [pc, #64]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ed2e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800ed30:	4a0e      	ldr	r2, [pc, #56]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed34:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800ed36:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed38:	2200      	movs	r2, #0
 800ed3a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ed3c:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed3e:	2200      	movs	r2, #0
 800ed40:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800ed42:	480a      	ldr	r0, [pc, #40]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed44:	f00a fb52 	bl	80193ec <HAL_TIM_Base_Init>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d104      	bne.n	800ed58 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800ed4e:	4807      	ldr	r0, [pc, #28]	; (800ed6c <HAL_InitTick+0xb0>)
 800ed50:	f00a fb9b 	bl	801948a <HAL_TIM_Base_Start_IT>
 800ed54:	4603      	mov	r3, r0
 800ed56:	e000      	b.n	800ed5a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800ed58:	2301      	movs	r3, #1
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3730      	adds	r7, #48	; 0x30
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	40023800 	.word	0x40023800
 800ed68:	431bde83 	.word	0x431bde83
 800ed6c:	20006c34 	.word	0x20006c34

0800ed70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ed70:	b480      	push	{r7}
 800ed72:	af00      	add	r7, sp, #0
	return 1;
 800ed74:	2301      	movs	r3, #1
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <_kill>:

int _kill(int pid, int sig)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ed8a:	f00f ff8f 	bl	801ecac <__errno>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2216      	movs	r2, #22
 800ed92:	601a      	str	r2, [r3, #0]
	return -1;
 800ed94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3708      	adds	r7, #8
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}

0800eda0 <_exit>:

void _exit (int status)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b082      	sub	sp, #8
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800eda8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff ffe7 	bl	800ed80 <_kill>
	while (1) {}		/* Make sure we hang here */
 800edb2:	e7fe      	b.n	800edb2 <_exit+0x12>

0800edb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	e00a      	b.n	800eddc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800edc6:	f3af 8000 	nop.w
 800edca:	4601      	mov	r1, r0
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	1c5a      	adds	r2, r3, #1
 800edd0:	60ba      	str	r2, [r7, #8]
 800edd2:	b2ca      	uxtb	r2, r1
 800edd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	3301      	adds	r3, #1
 800edda:	617b      	str	r3, [r7, #20]
 800eddc:	697a      	ldr	r2, [r7, #20]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	dbf0      	blt.n	800edc6 <_read+0x12>
	}

return len;
 800ede4:	687b      	ldr	r3, [r7, #4]
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}

0800edee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b086      	sub	sp, #24
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	60f8      	str	r0, [r7, #12]
 800edf6:	60b9      	str	r1, [r7, #8]
 800edf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800edfa:	2300      	movs	r3, #0
 800edfc:	617b      	str	r3, [r7, #20]
 800edfe:	e009      	b.n	800ee14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	1c5a      	adds	r2, r3, #1
 800ee04:	60ba      	str	r2, [r7, #8]
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	3301      	adds	r3, #1
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	697a      	ldr	r2, [r7, #20]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	dbf1      	blt.n	800ee00 <_write+0x12>
	}
	return len;
 800ee1c:	687b      	ldr	r3, [r7, #4]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}

0800ee26 <_close>:

int _close(int file)
{
 800ee26:	b480      	push	{r7}
 800ee28:	b083      	sub	sp, #12
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	6078      	str	r0, [r7, #4]
	return -1;
 800ee2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b083      	sub	sp, #12
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ee4e:	605a      	str	r2, [r3, #4]
	return 0;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr

0800ee5e <_isatty>:

int _isatty(int file)
{
 800ee5e:	b480      	push	{r7}
 800ee60:	b083      	sub	sp, #12
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
	return 1;
 800ee66:	2301      	movs	r3, #1
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
	return 0;
 800ee80:	2300      	movs	r3, #0
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
	...

0800ee90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ee98:	4a14      	ldr	r2, [pc, #80]	; (800eeec <_sbrk+0x5c>)
 800ee9a:	4b15      	ldr	r3, [pc, #84]	; (800eef0 <_sbrk+0x60>)
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eea4:	4b13      	ldr	r3, [pc, #76]	; (800eef4 <_sbrk+0x64>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d102      	bne.n	800eeb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eeac:	4b11      	ldr	r3, [pc, #68]	; (800eef4 <_sbrk+0x64>)
 800eeae:	4a12      	ldr	r2, [pc, #72]	; (800eef8 <_sbrk+0x68>)
 800eeb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eeb2:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <_sbrk+0x64>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4413      	add	r3, r2
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d207      	bcs.n	800eed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eec0:	f00f fef4 	bl	801ecac <__errno>
 800eec4:	4603      	mov	r3, r0
 800eec6:	220c      	movs	r2, #12
 800eec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800eeca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eece:	e009      	b.n	800eee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800eed0:	4b08      	ldr	r3, [pc, #32]	; (800eef4 <_sbrk+0x64>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eed6:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <_sbrk+0x64>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4413      	add	r3, r2
 800eede:	4a05      	ldr	r2, [pc, #20]	; (800eef4 <_sbrk+0x64>)
 800eee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eee2:	68fb      	ldr	r3, [r7, #12]
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3718      	adds	r7, #24
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	20020000 	.word	0x20020000
 800eef0:	00000400 	.word	0x00000400
 800eef4:	20000930 	.word	0x20000930
 800eef8:	2000ac88 	.word	0x2000ac88

0800eefc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800eefc:	b480      	push	{r7}
 800eefe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ef00:	4b08      	ldr	r3, [pc, #32]	; (800ef24 <SystemInit+0x28>)
 800ef02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef06:	4a07      	ldr	r2, [pc, #28]	; (800ef24 <SystemInit+0x28>)
 800ef08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ef10:	4b04      	ldr	r3, [pc, #16]	; (800ef24 <SystemInit+0x28>)
 800ef12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ef16:	609a      	str	r2, [r3, #8]
#endif
}
 800ef18:	bf00      	nop
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	e000ed00 	.word	0xe000ed00

0800ef28 <tuneRegister>:
		SECTOR_7_FOR_PAGE_2,
		SECTOR_7_FOR_PAGE_3,
		SECTOR_7_FOR_PAGE_4
};

void tuneRegister(int numPage, UART_HandleTypeDef* huartx){
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
	tunePage = numPage;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	4b17      	ldr	r3, [pc, #92]	; (800ef94 <tuneRegister+0x6c>)
 800ef38:	701a      	strb	r2, [r3, #0]
	tuneUart = huartx;
 800ef3a:	4a17      	ldr	r2, [pc, #92]	; (800ef98 <tuneRegister+0x70>)
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	6013      	str	r3, [r2, #0]

	for(int i=0; i<tunePage; i++){
 800ef40:	2300      	movs	r3, #0
 800ef42:	60fb      	str	r3, [r7, #12]
 800ef44:	e018      	b.n	800ef78 <tuneRegister+0x50>
		tuneWriteSuccess += numInt[i];
 800ef46:	4a15      	ldr	r2, [pc, #84]	; (800ef9c <tuneRegister+0x74>)
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef4e:	b2da      	uxtb	r2, r3
 800ef50:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <tuneRegister+0x78>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	4413      	add	r3, r2
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	4b11      	ldr	r3, [pc, #68]	; (800efa0 <tuneRegister+0x78>)
 800ef5a:	701a      	strb	r2, [r3, #0]
		tuneWriteSuccess += numFloat[i];
 800ef5c:	4a11      	ldr	r2, [pc, #68]	; (800efa4 <tuneRegister+0x7c>)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef64:	b2da      	uxtb	r2, r3
 800ef66:	4b0e      	ldr	r3, [pc, #56]	; (800efa0 <tuneRegister+0x78>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	b2da      	uxtb	r2, r3
 800ef6e:	4b0c      	ldr	r3, [pc, #48]	; (800efa0 <tuneRegister+0x78>)
 800ef70:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<tunePage; i++){
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3301      	adds	r3, #1
 800ef76:	60fb      	str	r3, [r7, #12]
 800ef78:	4b06      	ldr	r3, [pc, #24]	; (800ef94 <tuneRegister+0x6c>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	4293      	cmp	r3, r2
 800ef82:	dbe0      	blt.n	800ef46 <tuneRegister+0x1e>
	}
}
 800ef84:	bf00      	nop
 800ef86:	bf00      	nop
 800ef88:	3714      	adds	r7, #20
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	2000747c 	.word	0x2000747c
 800ef98:	2000a878 	.word	0x2000a878
 800ef9c:	2000063c 	.word	0x2000063c
 800efa0:	20009748 	.word	0x20009748
 800efa4:	20000650 	.word	0x20000650

0800efa8 <tunePending>:

void tunePending(void){
 800efa8:	b580      	push	{r7, lr}
 800efaa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(tuneUart, (uint8_t *)&tuneCommand, 1);
 800efac:	4b04      	ldr	r3, [pc, #16]	; (800efc0 <tunePending+0x18>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	2201      	movs	r2, #1
 800efb2:	4904      	ldr	r1, [pc, #16]	; (800efc4 <tunePending+0x1c>)
 800efb4:	4618      	mov	r0, r3
 800efb6:	f00b fb55 	bl	801a664 <HAL_UART_Receive_DMA>
}
 800efba:	bf00      	nop
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	2000a878 	.word	0x2000a878
 800efc4:	20009749 	.word	0x20009749

0800efc8 <tuneInit>:

void tuneInit(TUNE_PAGE page){
 800efc8:	b580      	push	{r7, lr}
 800efca:	b0a0      	sub	sp, #128	; 0x80
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
	//[NUM_INT_TUNE][NUM_FLOAT_TUNE]
	//[0x52][0x01][strlen][str...][*curValue...][min ...][max ...][0x31][0x40] format of INT
	//[0x14][0x01][strlen][str...][*curValue...][minF...][maxF...][0x20][0x00] format of FLOAT


	uint8_t numVar[2] = {numInt[page], numFloat[page]};
 800efd2:	79fb      	ldrb	r3, [r7, #7]
 800efd4:	4a91      	ldr	r2, [pc, #580]	; (800f21c <tuneInit+0x254>)
 800efd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800efe0:	79fb      	ldrb	r3, [r7, #7]
 800efe2:	4a8f      	ldr	r2, [pc, #572]	; (800f220 <tuneInit+0x258>)
 800efe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	HAL_UART_Transmit(tuneUart, numVar, 2, 10);
 800efee:	4b8d      	ldr	r3, [pc, #564]	; (800f224 <tuneInit+0x25c>)
 800eff0:	6818      	ldr	r0, [r3, #0]
 800eff2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800eff6:	230a      	movs	r3, #10
 800eff8:	2202      	movs	r2, #2
 800effa:	f00b fa44 	bl	801a486 <HAL_UART_Transmit>
	uint8_t sendBuf[100];
	for(int i=0; i<numInt[page]; i++){
 800effe:	2300      	movs	r3, #0
 800f000:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f002:	e079      	b.n	800f0f8 <tuneInit+0x130>
		sendBuf[0] = 0x52;	// '4'
 800f004:	2352      	movs	r3, #82	; 0x52
 800f006:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;	//Start of Header
 800f008:	2301      	movs	r3, #1
 800f00a:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(intList[page][i].varName);
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	4a86      	ldr	r2, [pc, #536]	; (800f228 <tuneInit+0x260>)
 800f010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	4413      	add	r3, r2
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f1 f8d7 	bl	80001d0 <strlen>
 800f022:	4603      	mov	r3, r0
 800f024:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		sendBuf[2] = strLen;
 800f028:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800f02c:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 1+1+1+strLen+4+4+4+1+1;
 800f02e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800f032:	3311      	adds	r3, #17
 800f034:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;		//Unit seperator, '(';
 800f038:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f03c:	3b02      	subs	r3, #2
 800f03e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800f042:	4413      	add	r3, r2
 800f044:	2231      	movs	r2, #49	; 0x31
 800f046:	f803 2c74 	strb.w	r2, [r3, #-116]
 800f04a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f04e:	3b01      	subs	r3, #1
 800f050:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800f054:	4413      	add	r3, r2
 800f056:	2240      	movs	r2, #64	; 0x40
 800f058:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], intList[page][i].varName, strLen);
 800f05c:	79fb      	ldrb	r3, [r7, #7]
 800f05e:	4a72      	ldr	r2, [pc, #456]	; (800f228 <tuneInit+0x260>)
 800f060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f066:	011b      	lsls	r3, r3, #4
 800f068:	4413      	add	r3, r2
 800f06a:	6819      	ldr	r1, [r3, #0]
 800f06c:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800f070:	f107 030c 	add.w	r3, r7, #12
 800f074:	3303      	adds	r3, #3
 800f076:	4618      	mov	r0, r3
 800f078:	f00f fe52 	bl	801ed20 <memcpy>
		memcpy(&sendBuf[3+strLen], intList[page][i].ptr, 4);
 800f07c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800f080:	3303      	adds	r3, #3
 800f082:	f107 020c 	add.w	r2, r7, #12
 800f086:	4413      	add	r3, r2
 800f088:	79fa      	ldrb	r2, [r7, #7]
 800f08a:	4967      	ldr	r1, [pc, #412]	; (800f228 <tuneInit+0x260>)
 800f08c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f090:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f092:	0112      	lsls	r2, r2, #4
 800f094:	440a      	add	r2, r1
 800f096:	6852      	ldr	r2, [r2, #4]
 800f098:	6812      	ldr	r2, [r2, #0]
 800f09a:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &intList[page][i].min, 4);
 800f09c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f107 020c 	add.w	r2, r7, #12
 800f0a6:	4413      	add	r3, r2
 800f0a8:	79fa      	ldrb	r2, [r7, #7]
 800f0aa:	495f      	ldr	r1, [pc, #380]	; (800f228 <tuneInit+0x260>)
 800f0ac:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f0b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0b2:	0112      	lsls	r2, r2, #4
 800f0b4:	440a      	add	r2, r1
 800f0b6:	3208      	adds	r2, #8
 800f0b8:	6812      	ldr	r2, [r2, #0]
 800f0ba:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &intList[page][i].max, 4);
 800f0bc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800f0c0:	330b      	adds	r3, #11
 800f0c2:	f107 020c 	add.w	r2, r7, #12
 800f0c6:	4413      	add	r3, r2
 800f0c8:	79fa      	ldrb	r2, [r7, #7]
 800f0ca:	4957      	ldr	r1, [pc, #348]	; (800f228 <tuneInit+0x260>)
 800f0cc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f0d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f0d2:	0112      	lsls	r2, r2, #4
 800f0d4:	440a      	add	r2, r1
 800f0d6:	320c      	adds	r2, #12
 800f0d8:	6812      	ldr	r2, [r2, #0]
 800f0da:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 1000);
 800f0dc:	4b51      	ldr	r3, [pc, #324]	; (800f224 <tuneInit+0x25c>)
 800f0de:	6818      	ldr	r0, [r3, #0]
 800f0e0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	f107 010c 	add.w	r1, r7, #12
 800f0ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0ee:	f00b f9ca 	bl	801a486 <HAL_UART_Transmit>
	for(int i=0; i<numInt[page]; i++){
 800f0f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f0f4:	3301      	adds	r3, #1
 800f0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	4a48      	ldr	r2, [pc, #288]	; (800f21c <tuneInit+0x254>)
 800f0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f100:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f102:	429a      	cmp	r2, r3
 800f104:	f6ff af7e 	blt.w	800f004 <tuneInit+0x3c>
	}

	for(int i=0; i<numFloat[page]; i++){
 800f108:	2300      	movs	r3, #0
 800f10a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f10c:	e078      	b.n	800f200 <tuneInit+0x238>
		sendBuf[0] = 0x14;
 800f10e:	2314      	movs	r3, #20
 800f110:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 800f112:	2301      	movs	r3, #1
 800f114:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(floatList[page][i].varName);
 800f116:	79fb      	ldrb	r3, [r7, #7]
 800f118:	4a44      	ldr	r2, [pc, #272]	; (800f22c <tuneInit+0x264>)
 800f11a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f11e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f120:	011b      	lsls	r3, r3, #4
 800f122:	4413      	add	r3, r2
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	4618      	mov	r0, r3
 800f128:	f7f1 f852 	bl	80001d0 <strlen>
 800f12c:	4603      	mov	r3, r0
 800f12e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		sendBuf[2] = strLen;
 800f132:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f136:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 3+strLen+4+4+4+1+1;
 800f138:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f13c:	3311      	adds	r3, #17
 800f13e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800f142:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f146:	3b02      	subs	r3, #2
 800f148:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800f14c:	4413      	add	r3, r2
 800f14e:	2220      	movs	r2, #32
 800f150:	f803 2c74 	strb.w	r2, [r3, #-116]
 800f154:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f158:	3b01      	subs	r3, #1
 800f15a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800f15e:	4413      	add	r3, r2
 800f160:	2200      	movs	r2, #0
 800f162:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], floatList[page][i].varName, strLen);
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	4a30      	ldr	r2, [pc, #192]	; (800f22c <tuneInit+0x264>)
 800f16a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f16e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	4413      	add	r3, r2
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	3303      	adds	r3, #3
 800f180:	4618      	mov	r0, r3
 800f182:	f00f fdcd 	bl	801ed20 <memcpy>
		memcpy(&sendBuf[3+strLen], floatList[page][i].ptr, 4);
 800f186:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f18a:	3303      	adds	r3, #3
 800f18c:	f107 020c 	add.w	r2, r7, #12
 800f190:	4413      	add	r3, r2
 800f192:	79fa      	ldrb	r2, [r7, #7]
 800f194:	4925      	ldr	r1, [pc, #148]	; (800f22c <tuneInit+0x264>)
 800f196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f19a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f19c:	0112      	lsls	r2, r2, #4
 800f19e:	440a      	add	r2, r1
 800f1a0:	6852      	ldr	r2, [r2, #4]
 800f1a2:	6812      	ldr	r2, [r2, #0]
 800f1a4:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &floatList[page][i].min, 4);
 800f1a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f1aa:	3307      	adds	r3, #7
 800f1ac:	f107 020c 	add.w	r2, r7, #12
 800f1b0:	4413      	add	r3, r2
 800f1b2:	79fa      	ldrb	r2, [r7, #7]
 800f1b4:	491d      	ldr	r1, [pc, #116]	; (800f22c <tuneInit+0x264>)
 800f1b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f1ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f1bc:	0112      	lsls	r2, r2, #4
 800f1be:	440a      	add	r2, r1
 800f1c0:	3208      	adds	r2, #8
 800f1c2:	6812      	ldr	r2, [r2, #0]
 800f1c4:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &floatList[page][i].max, 4);
 800f1c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800f1ca:	330b      	adds	r3, #11
 800f1cc:	f107 020c 	add.w	r2, r7, #12
 800f1d0:	4413      	add	r3, r2
 800f1d2:	79fa      	ldrb	r2, [r7, #7]
 800f1d4:	4915      	ldr	r1, [pc, #84]	; (800f22c <tuneInit+0x264>)
 800f1d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f1da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f1dc:	0112      	lsls	r2, r2, #4
 800f1de:	440a      	add	r2, r1
 800f1e0:	320c      	adds	r2, #12
 800f1e2:	6812      	ldr	r2, [r2, #0]
 800f1e4:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800f1e6:	4b0f      	ldr	r3, [pc, #60]	; (800f224 <tuneInit+0x25c>)
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	f107 010c 	add.w	r1, r7, #12
 800f1f4:	2364      	movs	r3, #100	; 0x64
 800f1f6:	f00b f946 	bl	801a486 <HAL_UART_Transmit>
	for(int i=0; i<numFloat[page]; i++){
 800f1fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	67bb      	str	r3, [r7, #120]	; 0x78
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	4a07      	ldr	r2, [pc, #28]	; (800f220 <tuneInit+0x258>)
 800f204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f208:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f20a:	429a      	cmp	r2, r3
 800f20c:	f6ff af7f 	blt.w	800f10e <tuneInit+0x146>
	}
	tunePending();
 800f210:	f7ff feca 	bl	800efa8 <tunePending>
}
 800f214:	bf00      	nop
 800f216:	3780      	adds	r7, #128	; 0x80
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	2000063c 	.word	0x2000063c
 800f220:	20000650 	.word	0x20000650
 800f224:	2000a878 	.word	0x2000a878
 800f228:	20000664 	.word	0x20000664
 800f22c:	20000678 	.word	0x20000678

0800f230 <tuneUpdate>:

void tuneUpdate(TUNE_PAGE page){
 800f230:	b5b0      	push	{r4, r5, r7, lr}
 800f232:	b08a      	sub	sp, #40	; 0x28
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][*curValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][*curValue...][0x20][0x00] format of FLOAT

	for(int i=0; i<numInt[page]; i++){
 800f23a:	2300      	movs	r3, #0
 800f23c:	623b      	str	r3, [r7, #32]
 800f23e:	e053      	b.n	800f2e8 <tuneUpdate+0xb8>
 800f240:	466b      	mov	r3, sp
 800f242:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 800f244:	2309      	movs	r3, #9
 800f246:	613b      	str	r3, [r7, #16]
		uint8_t sendBuf[len];
 800f248:	693c      	ldr	r4, [r7, #16]
 800f24a:	1e63      	subs	r3, r4, #1
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	4623      	mov	r3, r4
 800f250:	4618      	mov	r0, r3
 800f252:	f04f 0100 	mov.w	r1, #0
 800f256:	f04f 0200 	mov.w	r2, #0
 800f25a:	f04f 0300 	mov.w	r3, #0
 800f25e:	00cb      	lsls	r3, r1, #3
 800f260:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f264:	00c2      	lsls	r2, r0, #3
 800f266:	4623      	mov	r3, r4
 800f268:	4618      	mov	r0, r3
 800f26a:	f04f 0100 	mov.w	r1, #0
 800f26e:	f04f 0200 	mov.w	r2, #0
 800f272:	f04f 0300 	mov.w	r3, #0
 800f276:	00cb      	lsls	r3, r1, #3
 800f278:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f27c:	00c2      	lsls	r2, r0, #3
 800f27e:	4623      	mov	r3, r4
 800f280:	3307      	adds	r3, #7
 800f282:	08db      	lsrs	r3, r3, #3
 800f284:	00db      	lsls	r3, r3, #3
 800f286:	ebad 0d03 	sub.w	sp, sp, r3
 800f28a:	466b      	mov	r3, sp
 800f28c:	3300      	adds	r3, #0
 800f28e:	60bb      	str	r3, [r7, #8]
		sendBuf[0] = 0x52; sendBuf[1] = 0x01; sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	2252      	movs	r2, #82	; 0x52
 800f294:	701a      	strb	r2, [r3, #0]
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2201      	movs	r2, #1
 800f29a:	705a      	strb	r2, [r3, #1]
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	3b02      	subs	r3, #2
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	2131      	movs	r1, #49	; 0x31
 800f2a4:	54d1      	strb	r1, [r2, r3]
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	2140      	movs	r1, #64	; 0x40
 800f2ae:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 800f2b0:	6a3b      	ldr	r3, [r7, #32]
 800f2b2:	b2da      	uxtb	r2, r3
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], intList[page][i].ptr, 4);
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	3303      	adds	r3, #3
 800f2bc:	79fa      	ldrb	r2, [r7, #7]
 800f2be:	4940      	ldr	r1, [pc, #256]	; (800f3c0 <tuneUpdate+0x190>)
 800f2c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f2c4:	6a3a      	ldr	r2, [r7, #32]
 800f2c6:	0112      	lsls	r2, r2, #4
 800f2c8:	440a      	add	r2, r1
 800f2ca:	6852      	ldr	r2, [r2, #4]
 800f2cc:	6812      	ldr	r2, [r2, #0]
 800f2ce:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800f2d0:	4b3c      	ldr	r3, [pc, #240]	; (800f3c4 <tuneUpdate+0x194>)
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	2364      	movs	r3, #100	; 0x64
 800f2dc:	f00b f8d3 	bl	801a486 <HAL_UART_Transmit>
 800f2e0:	46ad      	mov	sp, r5
	for(int i=0; i<numInt[page]; i++){
 800f2e2:	6a3b      	ldr	r3, [r7, #32]
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	623b      	str	r3, [r7, #32]
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	4a37      	ldr	r2, [pc, #220]	; (800f3c8 <tuneUpdate+0x198>)
 800f2ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2f0:	6a3a      	ldr	r2, [r7, #32]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	dba4      	blt.n	800f240 <tuneUpdate+0x10>
	}

	for(int i=0; i<numFloat[page]; i++){
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
 800f2fa:	e053      	b.n	800f3a4 <tuneUpdate+0x174>
 800f2fc:	466b      	mov	r3, sp
 800f2fe:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 800f300:	2309      	movs	r3, #9
 800f302:	61fb      	str	r3, [r7, #28]
		uint8_t sendBuf[len];
 800f304:	69fc      	ldr	r4, [r7, #28]
 800f306:	1e63      	subs	r3, r4, #1
 800f308:	61bb      	str	r3, [r7, #24]
 800f30a:	4623      	mov	r3, r4
 800f30c:	4618      	mov	r0, r3
 800f30e:	f04f 0100 	mov.w	r1, #0
 800f312:	f04f 0200 	mov.w	r2, #0
 800f316:	f04f 0300 	mov.w	r3, #0
 800f31a:	00cb      	lsls	r3, r1, #3
 800f31c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f320:	00c2      	lsls	r2, r0, #3
 800f322:	4623      	mov	r3, r4
 800f324:	4618      	mov	r0, r3
 800f326:	f04f 0100 	mov.w	r1, #0
 800f32a:	f04f 0200 	mov.w	r2, #0
 800f32e:	f04f 0300 	mov.w	r3, #0
 800f332:	00cb      	lsls	r3, r1, #3
 800f334:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800f338:	00c2      	lsls	r2, r0, #3
 800f33a:	4623      	mov	r3, r4
 800f33c:	3307      	adds	r3, #7
 800f33e:	08db      	lsrs	r3, r3, #3
 800f340:	00db      	lsls	r3, r3, #3
 800f342:	ebad 0d03 	sub.w	sp, sp, r3
 800f346:	466b      	mov	r3, sp
 800f348:	3300      	adds	r3, #0
 800f34a:	617b      	str	r3, [r7, #20]
		sendBuf[0] = 0x14; sendBuf[1] = 0x01; sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	2214      	movs	r2, #20
 800f350:	701a      	strb	r2, [r3, #0]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	2201      	movs	r2, #1
 800f356:	705a      	strb	r2, [r3, #1]
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	3b02      	subs	r3, #2
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	2120      	movs	r1, #32
 800f360:	54d1      	strb	r1, [r2, r3]
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	3b01      	subs	r3, #1
 800f366:	697a      	ldr	r2, [r7, #20]
 800f368:	2100      	movs	r1, #0
 800f36a:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 800f36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f36e:	b2da      	uxtb	r2, r3
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], floatList[page][i].ptr, 4);
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	3303      	adds	r3, #3
 800f378:	79fa      	ldrb	r2, [r7, #7]
 800f37a:	4914      	ldr	r1, [pc, #80]	; (800f3cc <tuneUpdate+0x19c>)
 800f37c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800f380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f382:	0112      	lsls	r2, r2, #4
 800f384:	440a      	add	r2, r1
 800f386:	6852      	ldr	r2, [r2, #4]
 800f388:	6812      	ldr	r2, [r2, #0]
 800f38a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800f38c:	4b0d      	ldr	r3, [pc, #52]	; (800f3c4 <tuneUpdate+0x194>)
 800f38e:	6818      	ldr	r0, [r3, #0]
 800f390:	6979      	ldr	r1, [r7, #20]
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	b29a      	uxth	r2, r3
 800f396:	2364      	movs	r3, #100	; 0x64
 800f398:	f00b f875 	bl	801a486 <HAL_UART_Transmit>
 800f39c:	46ad      	mov	sp, r5
	for(int i=0; i<numFloat[page]; i++){
 800f39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	4a0a      	ldr	r2, [pc, #40]	; (800f3d0 <tuneUpdate+0x1a0>)
 800f3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	dba4      	blt.n	800f2fc <tuneUpdate+0xcc>
	}

	tunePending();
 800f3b2:	f7ff fdf9 	bl	800efa8 <tunePending>
}
 800f3b6:	bf00      	nop
 800f3b8:	3728      	adds	r7, #40	; 0x28
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bdb0      	pop	{r4, r5, r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	20000664 	.word	0x20000664
 800f3c4:	2000a878 	.word	0x2000a878
 800f3c8:	2000063c 	.word	0x2000063c
 800f3cc:	20000678 	.word	0x20000678
 800f3d0:	20000650 	.word	0x20000650

0800f3d4 <tuneEdit>:

void tuneEdit(TUNE_PAGE page, RNS_interface_t* rns){
 800f3d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f3d8:	b086      	sub	sp, #24
 800f3da:	af04      	add	r7, sp, #16
 800f3dc:	4603      	mov	r3, r0
 800f3de:	6039      	str	r1, [r7, #0]
 800f3e0:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][editValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][editValue...][0x20][0x00] format of FLOAT
	//[0x88][0x77] terminate, back to tune pending
	static uint8_t state = 0;

	switch(state){
 800f3e2:	4b8f      	ldr	r3, [pc, #572]	; (800f620 <tuneEdit+0x24c>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b03      	cmp	r3, #3
 800f3e8:	f200 8160 	bhi.w	800f6ac <tuneEdit+0x2d8>
 800f3ec:	a201      	add	r2, pc, #4	; (adr r2, 800f3f4 <tuneEdit+0x20>)
 800f3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f2:	bf00      	nop
 800f3f4:	0800f405 	.word	0x0800f405
 800f3f8:	0800f41b 	.word	0x0800f41b
 800f3fc:	0800f45f 	.word	0x0800f45f
 800f400:	0800f639 	.word	0x0800f639
	case 0://When first received tuneCommand == 'e'
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800f404:	4b87      	ldr	r3, [pc, #540]	; (800f624 <tuneEdit+0x250>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2201      	movs	r2, #1
 800f40a:	4987      	ldr	r1, [pc, #540]	; (800f628 <tuneEdit+0x254>)
 800f40c:	4618      	mov	r0, r3
 800f40e:	f00b f929 	bl	801a664 <HAL_UART_Receive_DMA>
		state = 1;
 800f412:	4b83      	ldr	r3, [pc, #524]	; (800f620 <tuneEdit+0x24c>)
 800f414:	2201      	movs	r2, #1
 800f416:	701a      	strb	r2, [r3, #0]
		break;
 800f418:	e148      	b.n	800f6ac <tuneEdit+0x2d8>
	case 1:
		if(tuneHeader == 0x52 || tuneHeader == 0x14 || tuneHeader == 0x88){
 800f41a:	4b83      	ldr	r3, [pc, #524]	; (800f628 <tuneEdit+0x254>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b52      	cmp	r3, #82	; 0x52
 800f420:	d007      	beq.n	800f432 <tuneEdit+0x5e>
 800f422:	4b81      	ldr	r3, [pc, #516]	; (800f628 <tuneEdit+0x254>)
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b14      	cmp	r3, #20
 800f428:	d003      	beq.n	800f432 <tuneEdit+0x5e>
 800f42a:	4b7f      	ldr	r3, [pc, #508]	; (800f628 <tuneEdit+0x254>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	2b88      	cmp	r3, #136	; 0x88
 800f430:	d10a      	bne.n	800f448 <tuneEdit+0x74>
			state = 2;
 800f432:	4b7b      	ldr	r3, [pc, #492]	; (800f620 <tuneEdit+0x24c>)
 800f434:	2202      	movs	r2, #2
 800f436:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader1, 1);
 800f438:	4b7a      	ldr	r3, [pc, #488]	; (800f624 <tuneEdit+0x250>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2201      	movs	r2, #1
 800f43e:	497b      	ldr	r1, [pc, #492]	; (800f62c <tuneEdit+0x258>)
 800f440:	4618      	mov	r0, r3
 800f442:	f00b f90f 	bl	801a664 <HAL_UART_Receive_DMA>
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 800f446:	e131      	b.n	800f6ac <tuneEdit+0x2d8>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800f448:	4b76      	ldr	r3, [pc, #472]	; (800f624 <tuneEdit+0x250>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2201      	movs	r2, #1
 800f44e:	4976      	ldr	r1, [pc, #472]	; (800f628 <tuneEdit+0x254>)
 800f450:	4618      	mov	r0, r3
 800f452:	f00b f907 	bl	801a664 <HAL_UART_Receive_DMA>
			state = 1;
 800f456:	4b72      	ldr	r3, [pc, #456]	; (800f620 <tuneEdit+0x24c>)
 800f458:	2201      	movs	r2, #1
 800f45a:	701a      	strb	r2, [r3, #0]
		break;
 800f45c:	e126      	b.n	800f6ac <tuneEdit+0x2d8>
	case 2:
		if(tuneHeader1 == 0x01){
 800f45e:	4b73      	ldr	r3, [pc, #460]	; (800f62c <tuneEdit+0x258>)
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	2b01      	cmp	r3, #1
 800f464:	d10a      	bne.n	800f47c <tuneEdit+0xa8>
			HAL_UART_Receive_DMA(tuneUart, tuneBuffer, 7);
 800f466:	4b6f      	ldr	r3, [pc, #444]	; (800f624 <tuneEdit+0x250>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2207      	movs	r2, #7
 800f46c:	4970      	ldr	r1, [pc, #448]	; (800f630 <tuneEdit+0x25c>)
 800f46e:	4618      	mov	r0, r3
 800f470:	f00b f8f8 	bl	801a664 <HAL_UART_Receive_DMA>
			state = 3;
 800f474:	4b6a      	ldr	r3, [pc, #424]	; (800f620 <tuneEdit+0x24c>)
 800f476:	2203      	movs	r2, #3
 800f478:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 800f47a:	e117      	b.n	800f6ac <tuneEdit+0x2d8>
		else if(tuneHeader1 == 0x77){
 800f47c:	4b6b      	ldr	r3, [pc, #428]	; (800f62c <tuneEdit+0x258>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b77      	cmp	r3, #119	; 0x77
 800f482:	f040 80c1 	bne.w	800f608 <tuneEdit+0x234>
			if(page == 0){
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f040 80b7 	bne.w	800f5fc <tuneEdit+0x228>
				RNSSet(rns, RNS_F_LEFT_VEL_PID,  *(floatList[page][0].ptr), *(floatList[page][1].ptr), *(floatList[page][2].ptr));
 800f48e:	79fb      	ldrb	r3, [r7, #7]
 800f490:	4a68      	ldr	r2, [pc, #416]	; (800f634 <tuneEdit+0x260>)
 800f492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7f1 f854 	bl	8000548 <__aeabi_f2d>
 800f4a0:	4680      	mov	r8, r0
 800f4a2:	4689      	mov	r9, r1
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	4a63      	ldr	r2, [pc, #396]	; (800f634 <tuneEdit+0x260>)
 800f4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ac:	3310      	adds	r3, #16
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7f1 f848 	bl	8000548 <__aeabi_f2d>
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	4a5d      	ldr	r2, [pc, #372]	; (800f634 <tuneEdit+0x260>)
 800f4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4c4:	3320      	adds	r3, #32
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f1 f83c 	bl	8000548 <__aeabi_f2d>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4d8:	e9cd 4500 	strd	r4, r5, [sp]
 800f4dc:	4642      	mov	r2, r8
 800f4de:	464b      	mov	r3, r9
 800f4e0:	212f      	movs	r1, #47	; 0x2f
 800f4e2:	6838      	ldr	r0, [r7, #0]
 800f4e4:	f7f7 fe64 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_F_RIGHT_VEL_PID, *(floatList[page][3].ptr), *(floatList[page][4].ptr), *(floatList[page][5].ptr));
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	4a52      	ldr	r2, [pc, #328]	; (800f634 <tuneEdit+0x260>)
 800f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f0:	3330      	adds	r3, #48	; 0x30
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7f1 f826 	bl	8000548 <__aeabi_f2d>
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	4a4c      	ldr	r2, [pc, #304]	; (800f634 <tuneEdit+0x260>)
 800f504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f508:	3340      	adds	r3, #64	; 0x40
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f1 f81a 	bl	8000548 <__aeabi_f2d>
 800f514:	4604      	mov	r4, r0
 800f516:	460d      	mov	r5, r1
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	4a46      	ldr	r2, [pc, #280]	; (800f634 <tuneEdit+0x260>)
 800f51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f520:	3350      	adds	r3, #80	; 0x50
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	4618      	mov	r0, r3
 800f528:	f7f1 f80e 	bl	8000548 <__aeabi_f2d>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f534:	e9cd 4500 	strd	r4, r5, [sp]
 800f538:	4642      	mov	r2, r8
 800f53a:	464b      	mov	r3, r9
 800f53c:	2130      	movs	r1, #48	; 0x30
 800f53e:	6838      	ldr	r0, [r7, #0]
 800f540:	f7f7 fe36 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_B_LEFT_VEL_PID,  *(floatList[page][6].ptr), *(floatList[page][7].ptr), *(floatList[page][8].ptr));
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	4a3b      	ldr	r2, [pc, #236]	; (800f634 <tuneEdit+0x260>)
 800f548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f54c:	3360      	adds	r3, #96	; 0x60
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4618      	mov	r0, r3
 800f554:	f7f0 fff8 	bl	8000548 <__aeabi_f2d>
 800f558:	4680      	mov	r8, r0
 800f55a:	4689      	mov	r9, r1
 800f55c:	79fb      	ldrb	r3, [r7, #7]
 800f55e:	4a35      	ldr	r2, [pc, #212]	; (800f634 <tuneEdit+0x260>)
 800f560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f564:	3370      	adds	r3, #112	; 0x70
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7f0 ffec 	bl	8000548 <__aeabi_f2d>
 800f570:	4604      	mov	r4, r0
 800f572:	460d      	mov	r5, r1
 800f574:	79fb      	ldrb	r3, [r7, #7]
 800f576:	4a2f      	ldr	r2, [pc, #188]	; (800f634 <tuneEdit+0x260>)
 800f578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f57c:	3380      	adds	r3, #128	; 0x80
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4618      	mov	r0, r3
 800f584:	f7f0 ffe0 	bl	8000548 <__aeabi_f2d>
 800f588:	4602      	mov	r2, r0
 800f58a:	460b      	mov	r3, r1
 800f58c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f590:	e9cd 4500 	strd	r4, r5, [sp]
 800f594:	4642      	mov	r2, r8
 800f596:	464b      	mov	r3, r9
 800f598:	2131      	movs	r1, #49	; 0x31
 800f59a:	6838      	ldr	r0, [r7, #0]
 800f59c:	f7f7 fe08 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_B_RIGHT_VEL_PID, *(floatList[page][9].ptr), *(floatList[page][10].ptr), *(floatList[page][11].ptr));
 800f5a0:	79fb      	ldrb	r3, [r7, #7]
 800f5a2:	4a24      	ldr	r2, [pc, #144]	; (800f634 <tuneEdit+0x260>)
 800f5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a8:	3390      	adds	r3, #144	; 0x90
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f0 ffca 	bl	8000548 <__aeabi_f2d>
 800f5b4:	4680      	mov	r8, r0
 800f5b6:	4689      	mov	r9, r1
 800f5b8:	79fb      	ldrb	r3, [r7, #7]
 800f5ba:	4a1e      	ldr	r2, [pc, #120]	; (800f634 <tuneEdit+0x260>)
 800f5bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5c0:	33a0      	adds	r3, #160	; 0xa0
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f0 ffbe 	bl	8000548 <__aeabi_f2d>
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	460d      	mov	r5, r1
 800f5d0:	79fb      	ldrb	r3, [r7, #7]
 800f5d2:	4a18      	ldr	r2, [pc, #96]	; (800f634 <tuneEdit+0x260>)
 800f5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d8:	33b0      	adds	r3, #176	; 0xb0
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7f0 ffb2 	bl	8000548 <__aeabi_f2d>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f5ec:	e9cd 4500 	strd	r4, r5, [sp]
 800f5f0:	4642      	mov	r2, r8
 800f5f2:	464b      	mov	r3, r9
 800f5f4:	2132      	movs	r1, #50	; 0x32
 800f5f6:	6838      	ldr	r0, [r7, #0]
 800f5f8:	f7f7 fdda 	bl	80071b0 <RNSSet>
			tunePending();
 800f5fc:	f7ff fcd4 	bl	800efa8 <tunePending>
			state = 0;
 800f600:	4b07      	ldr	r3, [pc, #28]	; (800f620 <tuneEdit+0x24c>)
 800f602:	2200      	movs	r2, #0
 800f604:	701a      	strb	r2, [r3, #0]
		break;
 800f606:	e051      	b.n	800f6ac <tuneEdit+0x2d8>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800f608:	4b06      	ldr	r3, [pc, #24]	; (800f624 <tuneEdit+0x250>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2201      	movs	r2, #1
 800f60e:	4906      	ldr	r1, [pc, #24]	; (800f628 <tuneEdit+0x254>)
 800f610:	4618      	mov	r0, r3
 800f612:	f00b f827 	bl	801a664 <HAL_UART_Receive_DMA>
			state = 1;
 800f616:	4b02      	ldr	r3, [pc, #8]	; (800f620 <tuneEdit+0x24c>)
 800f618:	2201      	movs	r2, #1
 800f61a:	701a      	strb	r2, [r3, #0]
		break;
 800f61c:	e046      	b.n	800f6ac <tuneEdit+0x2d8>
 800f61e:	bf00      	nop
 800f620:	20000934 	.word	0x20000934
 800f624:	2000a878 	.word	0x2000a878
 800f628:	2000996c 	.word	0x2000996c
 800f62c:	20009c84 	.word	0x20009c84
 800f630:	2000753c 	.word	0x2000753c
 800f634:	20000678 	.word	0x20000678
	case 3:
		if(tuneBuffer[5] == 0x31 && tuneBuffer[6] == 0x40){
 800f638:	4b1f      	ldr	r3, [pc, #124]	; (800f6b8 <tuneEdit+0x2e4>)
 800f63a:	795b      	ldrb	r3, [r3, #5]
 800f63c:	2b31      	cmp	r3, #49	; 0x31
 800f63e:	d10f      	bne.n	800f660 <tuneEdit+0x28c>
 800f640:	4b1d      	ldr	r3, [pc, #116]	; (800f6b8 <tuneEdit+0x2e4>)
 800f642:	799b      	ldrb	r3, [r3, #6]
 800f644:	2b40      	cmp	r3, #64	; 0x40
 800f646:	d10b      	bne.n	800f660 <tuneEdit+0x28c>
			*((int *)(intList[page][tuneBuffer[0]].ptr)) = *((int *)&tuneBuffer[1]);
 800f648:	491c      	ldr	r1, [pc, #112]	; (800f6bc <tuneEdit+0x2e8>)
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	4a1c      	ldr	r2, [pc, #112]	; (800f6c0 <tuneEdit+0x2ec>)
 800f64e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f652:	4b19      	ldr	r3, [pc, #100]	; (800f6b8 <tuneEdit+0x2e4>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	011b      	lsls	r3, r3, #4
 800f658:	4413      	add	r3, r2
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	680a      	ldr	r2, [r1, #0]
 800f65e:	601a      	str	r2, [r3, #0]
		}

		if(tuneBuffer[5] == 0x20 && tuneBuffer[6] == 0x00){
 800f660:	4b15      	ldr	r3, [pc, #84]	; (800f6b8 <tuneEdit+0x2e4>)
 800f662:	795b      	ldrb	r3, [r3, #5]
 800f664:	2b20      	cmp	r3, #32
 800f666:	d10f      	bne.n	800f688 <tuneEdit+0x2b4>
 800f668:	4b13      	ldr	r3, [pc, #76]	; (800f6b8 <tuneEdit+0x2e4>)
 800f66a:	799b      	ldrb	r3, [r3, #6]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10b      	bne.n	800f688 <tuneEdit+0x2b4>
			*(floatList[page][tuneBuffer[0]].ptr) = *((float *)&tuneBuffer[1]);
 800f670:	4912      	ldr	r1, [pc, #72]	; (800f6bc <tuneEdit+0x2e8>)
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	4a13      	ldr	r2, [pc, #76]	; (800f6c4 <tuneEdit+0x2f0>)
 800f676:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f67a:	4b0f      	ldr	r3, [pc, #60]	; (800f6b8 <tuneEdit+0x2e4>)
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	011b      	lsls	r3, r3, #4
 800f680:	4413      	add	r3, r2
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	680a      	ldr	r2, [r1, #0]
 800f686:	601a      	str	r2, [r3, #0]
		}
		tuneBuffer[5] = tuneBuffer[6] = 0;
 800f688:	4b0b      	ldr	r3, [pc, #44]	; (800f6b8 <tuneEdit+0x2e4>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	719a      	strb	r2, [r3, #6]
 800f68e:	4b0a      	ldr	r3, [pc, #40]	; (800f6b8 <tuneEdit+0x2e4>)
 800f690:	799a      	ldrb	r2, [r3, #6]
 800f692:	4b09      	ldr	r3, [pc, #36]	; (800f6b8 <tuneEdit+0x2e4>)
 800f694:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800f696:	4b0c      	ldr	r3, [pc, #48]	; (800f6c8 <tuneEdit+0x2f4>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2201      	movs	r2, #1
 800f69c:	490b      	ldr	r1, [pc, #44]	; (800f6cc <tuneEdit+0x2f8>)
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f00a ffe0 	bl	801a664 <HAL_UART_Receive_DMA>
		state = 1;
 800f6a4:	4b0a      	ldr	r3, [pc, #40]	; (800f6d0 <tuneEdit+0x2fc>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
		break;
 800f6aa:	bf00      	nop
	}
}
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f6b6:	bf00      	nop
 800f6b8:	2000753c 	.word	0x2000753c
 800f6bc:	2000753d 	.word	0x2000753d
 800f6c0:	20000664 	.word	0x20000664
 800f6c4:	20000678 	.word	0x20000678
 800f6c8:	2000a878 	.word	0x2000a878
 800f6cc:	2000996c 	.word	0x2000996c
 800f6d0:	20000934 	.word	0x20000934

0800f6d4 <tuneWriteInt>:

uint32_t tuneWriteInt(void){
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
	uint32_t success=0;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800f6de:	f006 fb1b 	bl	8015d18 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800f6e2:	4b2b      	ldr	r3, [pc, #172]	; (800f790 <tuneWriteInt+0xbc>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800f6e8:	4b29      	ldr	r3, [pc, #164]	; (800f790 <tuneWriteInt+0xbc>)
 800f6ea:	2202      	movs	r2, #2
 800f6ec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_6;
 800f6ee:	4b28      	ldr	r3, [pc, #160]	; (800f790 <tuneWriteInt+0xbc>)
 800f6f0:	2206      	movs	r2, #6
 800f6f2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 800f6f4:	4b26      	ldr	r3, [pc, #152]	; (800f790 <tuneWriteInt+0xbc>)
 800f6f6:	2201      	movs	r2, #1
 800f6f8:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800f6fa:	1d3b      	adds	r3, r7, #4
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	4824      	ldr	r0, [pc, #144]	; (800f790 <tuneWriteInt+0xbc>)
 800f700:	f006 fc78 	bl	8015ff4 <HAL_FLASHEx_Erase>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d003      	beq.n	800f712 <tuneWriteInt+0x3e>
	{
		return HAL_FLASH_GetError ();
 800f70a:	f006 fb37 	bl	8015d7c <HAL_FLASH_GetError>
 800f70e:	4603      	mov	r3, r0
 800f710:	e039      	b.n	800f786 <tuneWriteInt+0xb2>
	}
	for(int i=0; i<tunePage; i++){
 800f712:	2300      	movs	r3, #0
 800f714:	613b      	str	r3, [r7, #16]
 800f716:	e02d      	b.n	800f774 <tuneWriteInt+0xa0>
		uint32_t Address = intAddress[i];
 800f718:	4a1e      	ldr	r2, [pc, #120]	; (800f794 <tuneWriteInt+0xc0>)
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f720:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 800f722:	2300      	movs	r3, #0
 800f724:	60bb      	str	r3, [r7, #8]
 800f726:	e01b      	b.n	800f760 <tuneWriteInt+0x8c>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *((int *)(intList[i][j].ptr)))==HAL_OK){
 800f728:	4a1b      	ldr	r2, [pc, #108]	; (800f798 <tuneWriteInt+0xc4>)
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	011b      	lsls	r3, r3, #4
 800f734:	4413      	add	r3, r2
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f740:	68f9      	ldr	r1, [r7, #12]
 800f742:	2002      	movs	r0, #2
 800f744:	f006 fa94 	bl	8015c70 <HAL_FLASH_Program>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d102      	bne.n	800f754 <tuneWriteInt+0x80>
				success ++;
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	3301      	adds	r3, #1
 800f752:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3304      	adds	r3, #4
 800f758:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	3301      	adds	r3, #1
 800f75e:	60bb      	str	r3, [r7, #8]
 800f760:	4a0e      	ldr	r2, [pc, #56]	; (800f79c <tuneWriteInt+0xc8>)
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f768:	68ba      	ldr	r2, [r7, #8]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	dbdc      	blt.n	800f728 <tuneWriteInt+0x54>
	for(int i=0; i<tunePage; i++){
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	3301      	adds	r3, #1
 800f772:	613b      	str	r3, [r7, #16]
 800f774:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <tuneWriteInt+0xcc>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	461a      	mov	r2, r3
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	4293      	cmp	r3, r2
 800f77e:	dbcb      	blt.n	800f718 <tuneWriteInt+0x44>
		}
	}

	HAL_FLASH_Lock();
 800f780:	f006 faec 	bl	8015d5c <HAL_FLASH_Lock>
	return success;
 800f784:	697b      	ldr	r3, [r7, #20]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	20000938 	.word	0x20000938
 800f794:	2000068c 	.word	0x2000068c
 800f798:	20000664 	.word	0x20000664
 800f79c:	2000063c 	.word	0x2000063c
 800f7a0:	2000747c 	.word	0x2000747c

0800f7a4 <tuneWriteFloat>:

uint32_t tuneWriteFloat(void){
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0

	uint32_t success=0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800f7ae:	f006 fab3 	bl	8015d18 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800f7b2:	4b2c      	ldr	r3, [pc, #176]	; (800f864 <tuneWriteFloat+0xc0>)
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800f7b8:	4b2a      	ldr	r3, [pc, #168]	; (800f864 <tuneWriteFloat+0xc0>)
 800f7ba:	2202      	movs	r2, #2
 800f7bc:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_7;
 800f7be:	4b29      	ldr	r3, [pc, #164]	; (800f864 <tuneWriteFloat+0xc0>)
 800f7c0:	2207      	movs	r2, #7
 800f7c2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 800f7c4:	4b27      	ldr	r3, [pc, #156]	; (800f864 <tuneWriteFloat+0xc0>)
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800f7ca:	1d3b      	adds	r3, r7, #4
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	4825      	ldr	r0, [pc, #148]	; (800f864 <tuneWriteFloat+0xc0>)
 800f7d0:	f006 fc10 	bl	8015ff4 <HAL_FLASHEx_Erase>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <tuneWriteFloat+0x3e>
	{
		return HAL_FLASH_GetError ();
 800f7da:	f006 facf 	bl	8015d7c <HAL_FLASH_GetError>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	e03b      	b.n	800f85a <tuneWriteFloat+0xb6>
	}
	for(int i=0; i<tunePage; i++){
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	613b      	str	r3, [r7, #16]
 800f7e6:	e02f      	b.n	800f848 <tuneWriteFloat+0xa4>
		uint32_t Address = floatAddress[i];
 800f7e8:	4a1f      	ldr	r2, [pc, #124]	; (800f868 <tuneWriteFloat+0xc4>)
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f0:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	60bb      	str	r3, [r7, #8]
 800f7f6:	e01d      	b.n	800f834 <tuneWriteFloat+0x90>
			uint32_t temp;
			memcpy(&temp, floatList[i][j].ptr, 4);
 800f7f8:	4a1c      	ldr	r2, [pc, #112]	; (800f86c <tuneWriteFloat+0xc8>)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	011b      	lsls	r3, r3, #4
 800f804:	4413      	add	r3, r2
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	603b      	str	r3, [r7, #0]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp)==HAL_OK){
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	f04f 0300 	mov.w	r3, #0
 800f814:	68f9      	ldr	r1, [r7, #12]
 800f816:	2002      	movs	r0, #2
 800f818:	f006 fa2a 	bl	8015c70 <HAL_FLASH_Program>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <tuneWriteFloat+0x84>
				success ++;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	3301      	adds	r3, #1
 800f826:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3304      	adds	r3, #4
 800f82c:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	3301      	adds	r3, #1
 800f832:	60bb      	str	r3, [r7, #8]
 800f834:	4a0e      	ldr	r2, [pc, #56]	; (800f870 <tuneWriteFloat+0xcc>)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	429a      	cmp	r2, r3
 800f840:	dbda      	blt.n	800f7f8 <tuneWriteFloat+0x54>
	for(int i=0; i<tunePage; i++){
 800f842:	693b      	ldr	r3, [r7, #16]
 800f844:	3301      	adds	r3, #1
 800f846:	613b      	str	r3, [r7, #16]
 800f848:	4b0a      	ldr	r3, [pc, #40]	; (800f874 <tuneWriteFloat+0xd0>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	4293      	cmp	r3, r2
 800f852:	dbc9      	blt.n	800f7e8 <tuneWriteFloat+0x44>
		}
	}
	HAL_FLASH_Lock();
 800f854:	f006 fa82 	bl	8015d5c <HAL_FLASH_Lock>
	return success;
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	2000094c 	.word	0x2000094c
 800f868:	200006a0 	.word	0x200006a0
 800f86c:	20000678 	.word	0x20000678
 800f870:	20000650 	.word	0x20000650
 800f874:	2000747c 	.word	0x2000747c

0800f878 <tuneRead>:

void tuneRead(void){
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
	for(int page=0; page<tunePage; page++){
 800f87e:	2300      	movs	r3, #0
 800f880:	60fb      	str	r3, [r7, #12]
 800f882:	e042      	b.n	800f90a <tuneRead+0x92>
		uint32_t Address = intAddress[page];
 800f884:	4a27      	ldr	r2, [pc, #156]	; (800f924 <tuneRead+0xac>)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f88c:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numInt[page]; i++){
 800f88e:	2300      	movs	r3, #0
 800f890:	607b      	str	r3, [r7, #4]
 800f892:	e010      	b.n	800f8b6 <tuneRead+0x3e>
			memcpy(intList[page][i].ptr, (__IO uint32_t *)Address, 4);
 800f894:	4a24      	ldr	r2, [pc, #144]	; (800f928 <tuneRead+0xb0>)
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	011b      	lsls	r3, r3, #4
 800f8a0:	4413      	add	r3, r2
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	6812      	ldr	r2, [r2, #0]
 800f8a8:	601a      	str	r2, [r3, #0]
			Address += 4;
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numInt[page]; i++){
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	607b      	str	r3, [r7, #4]
 800f8b6:	4a1d      	ldr	r2, [pc, #116]	; (800f92c <tuneRead+0xb4>)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	dbe7      	blt.n	800f894 <tuneRead+0x1c>
		}
		Address = floatAddress[page];
 800f8c4:	4a1a      	ldr	r2, [pc, #104]	; (800f930 <tuneRead+0xb8>)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8cc:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numFloat[page]; i++){
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	603b      	str	r3, [r7, #0]
 800f8d2:	e010      	b.n	800f8f6 <tuneRead+0x7e>
			memcpy(floatList[page][i].ptr, (__IO uint32_t *)Address, 4);
 800f8d4:	4a17      	ldr	r2, [pc, #92]	; (800f934 <tuneRead+0xbc>)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	011b      	lsls	r3, r3, #4
 800f8e0:	4413      	add	r3, r2
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	68ba      	ldr	r2, [r7, #8]
 800f8e6:	6812      	ldr	r2, [r2, #0]
 800f8e8:	601a      	str	r2, [r3, #0]
			Address += 4;
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	60bb      	str	r3, [r7, #8]
		for(int i=0; i<numFloat[page]; i++){
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	603b      	str	r3, [r7, #0]
 800f8f6:	4a10      	ldr	r2, [pc, #64]	; (800f938 <tuneRead+0xc0>)
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8fe:	683a      	ldr	r2, [r7, #0]
 800f900:	429a      	cmp	r2, r3
 800f902:	dbe7      	blt.n	800f8d4 <tuneRead+0x5c>
	for(int page=0; page<tunePage; page++){
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	3301      	adds	r3, #1
 800f908:	60fb      	str	r3, [r7, #12]
 800f90a:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <tuneRead+0xc4>)
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	461a      	mov	r2, r3
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4293      	cmp	r3, r2
 800f914:	dbb6      	blt.n	800f884 <tuneRead+0xc>
		}
	}
}
 800f916:	bf00      	nop
 800f918:	bf00      	nop
 800f91a:	3714      	adds	r7, #20
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr
 800f924:	2000068c 	.word	0x2000068c
 800f928:	20000664 	.word	0x20000664
 800f92c:	2000063c 	.word	0x2000063c
 800f930:	200006a0 	.word	0x200006a0
 800f934:	20000678 	.word	0x20000678
 800f938:	20000650 	.word	0x20000650
 800f93c:	2000747c 	.word	0x2000747c

0800f940 <tunePID>:

void tunePID(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns, float base_type){
 800f940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f944:	b0d0      	sub	sp, #320	; 0x140
 800f946:	af16      	add	r7, sp, #88	; 0x58
 800f948:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f94a:	64b9      	str	r1, [r7, #72]	; 0x48
 800f94c:	647a      	str	r2, [r7, #68]	; 0x44
 800f94e:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float target_speed = 3.0, base = base_type;
 800f952:	4bac      	ldr	r3, [pc, #688]	; (800fc04 <tunePID+0x2c4>)
 800f954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f95a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int arr_x = 0, arr_y = 0, buf = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f964:	2300      	movs	r3, #0
 800f966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f96a:	2300      	movs	r3, #0
 800f96c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float PID[4][3]={{AP, AI, AD},
 800f970:	4ba5      	ldr	r3, [pc, #660]	; (800fc08 <tunePID+0x2c8>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	657b      	str	r3, [r7, #84]	; 0x54
 800f976:	4ba5      	ldr	r3, [pc, #660]	; (800fc0c <tunePID+0x2cc>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f97c:	4ba4      	ldr	r3, [pc, #656]	; (800fc10 <tunePID+0x2d0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f982:	4ba4      	ldr	r3, [pc, #656]	; (800fc14 <tunePID+0x2d4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	663b      	str	r3, [r7, #96]	; 0x60
 800f988:	4ba3      	ldr	r3, [pc, #652]	; (800fc18 <tunePID+0x2d8>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	667b      	str	r3, [r7, #100]	; 0x64
 800f98e:	4ba3      	ldr	r3, [pc, #652]	; (800fc1c <tunePID+0x2dc>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	66bb      	str	r3, [r7, #104]	; 0x68
 800f994:	4ba2      	ldr	r3, [pc, #648]	; (800fc20 <tunePID+0x2e0>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f99a:	4ba2      	ldr	r3, [pc, #648]	; (800fc24 <tunePID+0x2e4>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	673b      	str	r3, [r7, #112]	; 0x70
 800f9a0:	4ba1      	ldr	r3, [pc, #644]	; (800fc28 <tunePID+0x2e8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	677b      	str	r3, [r7, #116]	; 0x74
 800f9a6:	4ba1      	ldr	r3, [pc, #644]	; (800fc2c <tunePID+0x2ec>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800f9ac:	4ba0      	ldr	r3, [pc, #640]	; (800fc30 <tunePID+0x2f0>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f9b2:	4ba0      	ldr	r3, [pc, #640]	; (800fc34 <tunePID+0x2f4>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			{BP, BI, BD},
			{CP, CI, CD},
			{DP, DI, DD}};

	while(tune.PID){
 800f9ba:	f000 bf97 	b.w	80108ec <tunePID+0xfac>
		if(ps4->button == R1){		//adjust speed
 800f9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9c6:	d11a      	bne.n	800f9fe <tunePID+0xbe>
			while(ps4->button == R1);
 800f9c8:	bf00      	nop
 800f9ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f9d2:	d0fa      	beq.n	800f9ca <tunePID+0x8a>
			target_speed += 1.0;
 800f9d4:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800f9d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f9e0:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
			if(target_speed > 6.0)
 800f9e4:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800f9e8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800f9ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f4:	dd23      	ble.n	800fa3e <tunePID+0xfe>
				target_speed = 6.0;
 800f9f6:	4b90      	ldr	r3, [pc, #576]	; (800fc38 <tunePID+0x2f8>)
 800f9f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f9fc:	e01f      	b.n	800fa3e <tunePID+0xfe>
		}else if(ps4->button == L1){
 800f9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa06:	d11a      	bne.n	800fa3e <tunePID+0xfe>
			while(ps4->button == L1);
 800fa08:	bf00      	nop
 800fa0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa12:	d0fa      	beq.n	800fa0a <tunePID+0xca>
			target_speed -= 1.0;
 800fa14:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fa18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa20:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
			if(target_speed < 1.0)
 800fa24:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fa28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fa30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa34:	d503      	bpl.n	800fa3e <tunePID+0xfe>
				target_speed = 1.0;
 800fa36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		}

		LegacyMODN(ps4, rns);
 800fa3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fa42:	f7f5 ff41 	bl	80058c8 <LegacyMODN>

		if(ps4->button == UP){		//direction
 800fa46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa4a:	2b10      	cmp	r3, #16
 800fa4c:	f040 80d0 	bne.w	800fbf0 <tunePID+0x2b0>
			uint32_t tick = HAL_GetTick();
 800fa50:	f004 f912 	bl	8013c78 <HAL_GetTick>
 800fa54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			float a, b, c, d;
			while(ps4->button == UP){
 800fa58:	e0bc      	b.n	800fbd4 <tunePID+0x294>
				if(base == fwd_omni){
 800fa5a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800fa5e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fa62:	eef4 7a47 	vcmp.f32	s15, s14
 800fa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6a:	d15b      	bne.n	800fb24 <tunePID+0x1e4>
					RNSVelocity(target_speed, target_speed, target_speed, target_speed, rns);
 800fa6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa6e:	edd7 1a39 	vldr	s3, [r7, #228]	; 0xe4
 800fa72:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 800fa76:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 800fa7a:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 800fa7e:	f7f7 f9b9 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800fa82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa84:	2057      	movs	r0, #87	; 0x57
 800fa86:	f7f7 fcff 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800fa8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					b = rns->enq.enq_buffer[1].data;
 800fa92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					c = rns->enq.enq_buffer[2].data;
 800fa9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					d = rns->enq.enq_buffer[3].data;
 800faa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800faa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800faaa:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800faae:	f7f0 fd4b 	bl	8000548 <__aeabi_f2d>
 800fab2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800fab6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800faba:	f7f0 fd45 	bl	8000548 <__aeabi_f2d>
 800fabe:	4604      	mov	r4, r0
 800fac0:	460d      	mov	r5, r1
 800fac2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fac6:	f7f0 fd3f 	bl	8000548 <__aeabi_f2d>
 800faca:	4680      	mov	r8, r0
 800facc:	4689      	mov	r9, r1
 800face:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800fad2:	f7f0 fd39 	bl	8000548 <__aeabi_f2d>
 800fad6:	4682      	mov	sl, r0
 800fad8:	468b      	mov	fp, r1
 800fada:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800fade:	f7f0 fd33 	bl	8000548 <__aeabi_f2d>
 800fae2:	4602      	mov	r2, r0
 800fae4:	460b      	mov	r3, r1
 800fae6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800faea:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800faee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800faf2:	e9cd 4500 	strd	r4, r5, [sp]
 800faf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fafa:	4950      	ldr	r1, [pc, #320]	; (800fc3c <tunePID+0x2fc>)
 800fafc:	4850      	ldr	r0, [pc, #320]	; (800fc40 <tunePID+0x300>)
 800fafe:	f010 f8ff 	bl	801fd00 <siprintf>
							target_speed, a, b, c, d);
					if(HAL_GetTick()-tick >= 20){
 800fb02:	f004 f8b9 	bl	8013c78 <HAL_GetTick>
 800fb06:	4602      	mov	r2, r0
 800fb08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	2b13      	cmp	r3, #19
 800fb10:	d960      	bls.n	800fbd4 <tunePID+0x294>
						tick = HAL_GetTick();
 800fb12:	f004 f8b1 	bl	8013c78 <HAL_GetTick>
 800fb16:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						UARTPrintString(huartx, data);
 800fb1a:	4949      	ldr	r1, [pc, #292]	; (800fc40 <tunePID+0x300>)
 800fb1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fb1e:	f7f3 ffa7 	bl	8003a70 <UARTPrintString>
 800fb22:	e057      	b.n	800fbd4 <tunePID+0x294>
					}
				}
				else if(base == tri_omni){
 800fb24:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800fb28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb2c:	eef4 7a47 	vcmp.f32	s15, s14
 800fb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb34:	d14e      	bne.n	800fbd4 <tunePID+0x294>
					RNSVelocity(target_speed, target_speed, 0.0, 0.0, rns);
 800fb36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fb38:	eddf 1a42 	vldr	s3, [pc, #264]	; 800fc44 <tunePID+0x304>
 800fb3c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 800fc44 <tunePID+0x304>
 800fb40:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 800fb44:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 800fb48:	f7f7 f954 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800fb4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb4e:	2057      	movs	r0, #87	; 0x57
 800fb50:	f7f7 fc9a 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800fb54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					b = rns->enq.enq_buffer[1].data;
 800fb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					c = rns->enq.enq_buffer[2].data;
 800fb64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800fb6c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800fb70:	f7f0 fcea 	bl	8000548 <__aeabi_f2d>
 800fb74:	4682      	mov	sl, r0
 800fb76:	468b      	mov	fp, r1
 800fb78:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800fb7c:	f7f0 fce4 	bl	8000548 <__aeabi_f2d>
 800fb80:	4604      	mov	r4, r0
 800fb82:	460d      	mov	r5, r1
 800fb84:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800fb88:	f7f0 fcde 	bl	8000548 <__aeabi_f2d>
 800fb8c:	4680      	mov	r8, r0
 800fb8e:	4689      	mov	r9, r1
 800fb90:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800fb94:	f7f0 fcd8 	bl	8000548 <__aeabi_f2d>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fba0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fba4:	e9cd 4500 	strd	r4, r5, [sp]
 800fba8:	4652      	mov	r2, sl
 800fbaa:	465b      	mov	r3, fp
 800fbac:	4926      	ldr	r1, [pc, #152]	; (800fc48 <tunePID+0x308>)
 800fbae:	4824      	ldr	r0, [pc, #144]	; (800fc40 <tunePID+0x300>)
 800fbb0:	f010 f8a6 	bl	801fd00 <siprintf>
							target_speed, a, b, c);
					if(HAL_GetTick()-tick >= 20){
 800fbb4:	f004 f860 	bl	8013c78 <HAL_GetTick>
 800fbb8:	4602      	mov	r2, r0
 800fbba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	2b13      	cmp	r3, #19
 800fbc2:	d907      	bls.n	800fbd4 <tunePID+0x294>
						tick = HAL_GetTick();
 800fbc4:	f004 f858 	bl	8013c78 <HAL_GetTick>
 800fbc8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						UARTPrintString(huartx, data);
 800fbcc:	491c      	ldr	r1, [pc, #112]	; (800fc40 <tunePID+0x300>)
 800fbce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fbd0:	f7f3 ff4e 	bl	8003a70 <UARTPrintString>
			while(ps4->button == UP){
 800fbd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbd8:	2b10      	cmp	r3, #16
 800fbda:	f43f af3e 	beq.w	800fa5a <tunePID+0x11a>
					}
				}
			}
			RNSStop(rns);
 800fbde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fbe0:	f7f7 f8b8 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 800fbe4:	2264      	movs	r2, #100	; 0x64
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	4815      	ldr	r0, [pc, #84]	; (800fc40 <tunePID+0x300>)
 800fbea:	f00f f8a7 	bl	801ed3c <memset>
 800fbee:	e339      	b.n	8010264 <tunePID+0x924>
		}else if(ps4->button == LEFT){
 800fbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf4:	2b80      	cmp	r3, #128	; 0x80
 800fbf6:	f040 8125 	bne.w	800fe44 <tunePID+0x504>
			uint32_t tick = HAL_GetTick();
 800fbfa:	f004 f83d 	bl	8013c78 <HAL_GetTick>
 800fbfe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			float a, b, c, d;
			while(ps4->button == LEFT){
 800fc02:	e111      	b.n	800fe28 <tunePID+0x4e8>
 800fc04:	40400000 	.word	0x40400000
 800fc08:	2000a6f4 	.word	0x2000a6f4
 800fc0c:	200078e8 	.word	0x200078e8
 800fc10:	2000a6ec 	.word	0x2000a6ec
 800fc14:	20007bac 	.word	0x20007bac
 800fc18:	20009730 	.word	0x20009730
 800fc1c:	200078dc 	.word	0x200078dc
 800fc20:	20009a08 	.word	0x20009a08
 800fc24:	20009b7c 	.word	0x20009b7c
 800fc28:	200071a4 	.word	0x200071a4
 800fc2c:	2000a278 	.word	0x2000a278
 800fc30:	200076b0 	.word	0x200076b0
 800fc34:	20009df4 	.word	0x20009df4
 800fc38:	40c00000 	.word	0x40c00000
 800fc3c:	08024ab4 	.word	0x08024ab4
 800fc40:	20006a8c 	.word	0x20006a8c
 800fc44:	00000000 	.word	0x00000000
 800fc48:	08024ad4 	.word	0x08024ad4
				if(base == fwd_omni){
 800fc4c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800fc50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fc54:	eef4 7a47 	vcmp.f32	s15, s14
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	d16d      	bne.n	800fd3a <tunePID+0x3fa>
					RNSVelocity(-target_speed, target_speed, target_speed, -target_speed, rns);
 800fc5e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fc62:	eeb1 7a67 	vneg.f32	s14, s15
 800fc66:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fc6a:	eef1 7a67 	vneg.f32	s15, s15
 800fc6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fc70:	eef0 1a67 	vmov.f32	s3, s15
 800fc74:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 800fc78:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 800fc7c:	eeb0 0a47 	vmov.f32	s0, s14
 800fc80:	f7f7 f8b8 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800fc84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc86:	2057      	movs	r0, #87	; 0x57
 800fc88:	f7f7 fbfe 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800fc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					b = rns->enq.enq_buffer[1].data;
 800fc94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					c = rns->enq.enq_buffer[2].data;
 800fc9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					d = rns->enq.enq_buffer[3].data;
 800fca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fca8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800fcac:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800fcb0:	f7f0 fc4a 	bl	8000548 <__aeabi_f2d>
 800fcb4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							target_speed, -a, b, c, -d);
 800fcb8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800fcbc:	eef1 7a67 	vneg.f32	s15, s15
 800fcc0:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7f0 fc3f 	bl	8000548 <__aeabi_f2d>
 800fcca:	4604      	mov	r4, r0
 800fccc:	460d      	mov	r5, r1
 800fcce:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800fcd2:	f7f0 fc39 	bl	8000548 <__aeabi_f2d>
 800fcd6:	4680      	mov	r8, r0
 800fcd8:	4689      	mov	r9, r1
 800fcda:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800fcde:	f7f0 fc33 	bl	8000548 <__aeabi_f2d>
 800fce2:	4682      	mov	sl, r0
 800fce4:	468b      	mov	fp, r1
							target_speed, -a, b, c, -d);
 800fce6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800fcea:	eef1 7a67 	vneg.f32	s15, s15
 800fcee:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7f0 fc28 	bl	8000548 <__aeabi_f2d>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd00:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800fd04:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fd08:	e9cd 4500 	strd	r4, r5, [sp]
 800fd0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd10:	4996      	ldr	r1, [pc, #600]	; (800ff6c <tunePID+0x62c>)
 800fd12:	4897      	ldr	r0, [pc, #604]	; (800ff70 <tunePID+0x630>)
 800fd14:	f00f fff4 	bl	801fd00 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 800fd18:	f003 ffae 	bl	8013c78 <HAL_GetTick>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd22:	1ad3      	subs	r3, r2, r3
 800fd24:	2b13      	cmp	r3, #19
 800fd26:	d97f      	bls.n	800fe28 <tunePID+0x4e8>
						tick = HAL_GetTick();
 800fd28:	f003 ffa6 	bl	8013c78 <HAL_GetTick>
 800fd2c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						UARTPrintString(huartx, data);
 800fd30:	498f      	ldr	r1, [pc, #572]	; (800ff70 <tunePID+0x630>)
 800fd32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fd34:	f7f3 fe9c 	bl	8003a70 <UARTPrintString>
 800fd38:	e076      	b.n	800fe28 <tunePID+0x4e8>
					}
				}
				else if(base == tri_omni){
 800fd3a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800fd3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd42:	eef4 7a47 	vcmp.f32	s15, s14
 800fd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4a:	d16d      	bne.n	800fe28 <tunePID+0x4e8>
					RNSVelocity((0.5 * target_speed), (-0.5 * target_speed), -target_speed, 0.0, rns);
 800fd4c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fd50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fd54:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd58:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fd5c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800fd60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800fd64:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fd68:	eef1 7a67 	vneg.f32	s15, s15
 800fd6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fd6e:	eddf 1a82 	vldr	s3, [pc, #520]	; 800ff78 <tunePID+0x638>
 800fd72:	eeb0 1a67 	vmov.f32	s2, s15
 800fd76:	eef0 0a66 	vmov.f32	s1, s13
 800fd7a:	eeb0 0a47 	vmov.f32	s0, s14
 800fd7e:	f7f7 f839 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800fd82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd84:	2057      	movs	r0, #87	; 0x57
 800fd86:	f7f7 fb7f 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800fd8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					b = rns->enq.enq_buffer[1].data;
 800fd92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					c = rns->enq.enq_buffer[2].data;
 800fd9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800fda2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800fda6:	f7f0 fbcf 	bl	8000548 <__aeabi_f2d>
 800fdaa:	4682      	mov	sl, r0
 800fdac:	468b      	mov	fp, r1
							target_speed, 2 * a, -2 * b, -c);
 800fdae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800fdb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800fdb6:	ee17 0a90 	vmov	r0, s15
 800fdba:	f7f0 fbc5 	bl	8000548 <__aeabi_f2d>
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	460d      	mov	r5, r1
							target_speed, 2 * a, -2 * b, -c);
 800fdc2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800fdc6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800fdca:	ee67 7a87 	vmul.f32	s15, s15, s14
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800fdce:	ee17 0a90 	vmov	r0, s15
 800fdd2:	f7f0 fbb9 	bl	8000548 <__aeabi_f2d>
 800fdd6:	4680      	mov	r8, r0
 800fdd8:	4689      	mov	r9, r1
							target_speed, 2 * a, -2 * b, -c);
 800fdda:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800fdde:	eef1 7a67 	vneg.f32	s15, s15
 800fde2:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7f0 fbae 	bl	8000548 <__aeabi_f2d>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdf4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800fdf8:	e9cd 4500 	strd	r4, r5, [sp]
 800fdfc:	4652      	mov	r2, sl
 800fdfe:	465b      	mov	r3, fp
 800fe00:	495c      	ldr	r1, [pc, #368]	; (800ff74 <tunePID+0x634>)
 800fe02:	485b      	ldr	r0, [pc, #364]	; (800ff70 <tunePID+0x630>)
 800fe04:	f00f ff7c 	bl	801fd00 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 800fe08:	f003 ff36 	bl	8013c78 <HAL_GetTick>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	2b13      	cmp	r3, #19
 800fe16:	d907      	bls.n	800fe28 <tunePID+0x4e8>
						tick = HAL_GetTick();
 800fe18:	f003 ff2e 	bl	8013c78 <HAL_GetTick>
 800fe1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						UARTPrintString(huartx, data);
 800fe20:	4953      	ldr	r1, [pc, #332]	; (800ff70 <tunePID+0x630>)
 800fe22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe24:	f7f3 fe24 	bl	8003a70 <UARTPrintString>
			while(ps4->button == LEFT){
 800fe28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe2c:	2b80      	cmp	r3, #128	; 0x80
 800fe2e:	f43f af0d 	beq.w	800fc4c <tunePID+0x30c>
					}
				}
			}
			RNSStop(rns);
 800fe32:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fe34:	f7f6 ff8e 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 800fe38:	2264      	movs	r2, #100	; 0x64
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	484c      	ldr	r0, [pc, #304]	; (800ff70 <tunePID+0x630>)
 800fe3e:	f00e ff7d 	bl	801ed3c <memset>
 800fe42:	e20f      	b.n	8010264 <tunePID+0x924>
		}else if(ps4->button == DOWN){
 800fe44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe48:	2b40      	cmp	r3, #64	; 0x40
 800fe4a:	f040 810f 	bne.w	801006c <tunePID+0x72c>
			uint32_t tick = HAL_GetTick();
 800fe4e:	f003 ff13 	bl	8013c78 <HAL_GetTick>
 800fe52:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
			float a, b, c, d;
			while(ps4->button == DOWN){
 800fe56:	e0fb      	b.n	8010050 <tunePID+0x710>
				if(base == fwd_omni){
 800fe58:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800fe5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fe60:	eef4 7a47 	vcmp.f32	s15, s14
 800fe64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe68:	f040 8088 	bne.w	800ff7c <tunePID+0x63c>
					RNSVelocity(-target_speed, -target_speed, -target_speed, -target_speed, rns);
 800fe6c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fe70:	eeb1 7a67 	vneg.f32	s14, s15
 800fe74:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fe78:	eef1 6a67 	vneg.f32	s13, s15
 800fe7c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fe80:	eeb1 6a67 	vneg.f32	s12, s15
 800fe84:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800fe88:	eef1 7a67 	vneg.f32	s15, s15
 800fe8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fe8e:	eef0 1a67 	vmov.f32	s3, s15
 800fe92:	eeb0 1a46 	vmov.f32	s2, s12
 800fe96:	eef0 0a66 	vmov.f32	s1, s13
 800fe9a:	eeb0 0a47 	vmov.f32	s0, s14
 800fe9e:	f7f6 ffa9 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800fea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fea4:	2057      	movs	r0, #87	; 0x57
 800fea6:	f7f7 faef 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800feaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					b = rns->enq.enq_buffer[1].data;
 800feb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800feb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					c = rns->enq.enq_buffer[2].data;
 800feba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800febc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800febe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					d = rns->enq.enq_buffer[3].data;
 800fec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800feca:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800fece:	f7f0 fb3b 	bl	8000548 <__aeabi_f2d>
 800fed2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							target_speed, -a, -b, -c, -d);
 800fed6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800feda:	eef1 7a67 	vneg.f32	s15, s15
 800fede:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800fee2:	4618      	mov	r0, r3
 800fee4:	f7f0 fb30 	bl	8000548 <__aeabi_f2d>
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
							target_speed, -a, -b, -c, -d);
 800feec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800fef0:	eef1 7a67 	vneg.f32	s15, s15
 800fef4:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7f0 fb25 	bl	8000548 <__aeabi_f2d>
 800fefe:	4680      	mov	r8, r0
 800ff00:	4689      	mov	r9, r1
							target_speed, -a, -b, -c, -d);
 800ff02:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ff06:	eef1 7a67 	vneg.f32	s15, s15
 800ff0a:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7f0 fb1a 	bl	8000548 <__aeabi_f2d>
 800ff14:	4682      	mov	sl, r0
 800ff16:	468b      	mov	fp, r1
							target_speed, -a, -b, -c, -d);
 800ff18:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ff1c:	eef1 7a67 	vneg.f32	s15, s15
 800ff20:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f0 fb0f 	bl	8000548 <__aeabi_f2d>
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ff32:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800ff36:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ff3a:	e9cd 4500 	strd	r4, r5, [sp]
 800ff3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ff42:	490a      	ldr	r1, [pc, #40]	; (800ff6c <tunePID+0x62c>)
 800ff44:	480a      	ldr	r0, [pc, #40]	; (800ff70 <tunePID+0x630>)
 800ff46:	f00f fedb 	bl	801fd00 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 800ff4a:	f003 fe95 	bl	8013c78 <HAL_GetTick>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b13      	cmp	r3, #19
 800ff58:	d97a      	bls.n	8010050 <tunePID+0x710>
						tick = HAL_GetTick();
 800ff5a:	f003 fe8d 	bl	8013c78 <HAL_GetTick>
 800ff5e:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						UARTPrintString(huartx, data);
 800ff62:	4903      	ldr	r1, [pc, #12]	; (800ff70 <tunePID+0x630>)
 800ff64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ff66:	f7f3 fd83 	bl	8003a70 <UARTPrintString>
 800ff6a:	e071      	b.n	8010050 <tunePID+0x710>
 800ff6c:	08024ab4 	.word	0x08024ab4
 800ff70:	20006a8c 	.word	0x20006a8c
 800ff74:	08024ad4 	.word	0x08024ad4
 800ff78:	00000000 	.word	0x00000000
					}
				}
				else if(base == tri_omni){
 800ff7c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800ff80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff84:	eef4 7a47 	vcmp.f32	s15, s14
 800ff88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff8c:	d160      	bne.n	8010050 <tunePID+0x710>
					RNSVelocity(-target_speed, -target_speed, 0.0, 0.0, rns);
 800ff8e:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ff92:	eeb1 7a67 	vneg.f32	s14, s15
 800ff96:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ff9a:	eef1 7a67 	vneg.f32	s15, s15
 800ff9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ffa0:	ed5f 1a0b 	vldr	s3, [pc, #-44]	; 800ff78 <tunePID+0x638>
 800ffa4:	ed1f 1a0c 	vldr	s2, [pc, #-48]	; 800ff78 <tunePID+0x638>
 800ffa8:	eef0 0a67 	vmov.f32	s1, s15
 800ffac:	eeb0 0a47 	vmov.f32	s0, s14
 800ffb0:	f7f6 ff20 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800ffb4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffb6:	2057      	movs	r0, #87	; 0x57
 800ffb8:	f7f7 fa66 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800ffbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					b = rns->enq.enq_buffer[1].data;
 800ffc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					c = rns->enq.enq_buffer[2].data;
 800ffcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ffd4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800ffd8:	f7f0 fab6 	bl	8000548 <__aeabi_f2d>
 800ffdc:	4682      	mov	sl, r0
 800ffde:	468b      	mov	fp, r1
							target_speed, -a, -b, c);
 800ffe0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ffe4:	eef1 7a67 	vneg.f32	s15, s15
 800ffe8:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f0 faab 	bl	8000548 <__aeabi_f2d>
 800fff2:	4604      	mov	r4, r0
 800fff4:	460d      	mov	r5, r1
							target_speed, -a, -b, c);
 800fff6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800fffa:	eef1 7a67 	vneg.f32	s15, s15
 800fffe:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010002:	4618      	mov	r0, r3
 8010004:	f7f0 faa0 	bl	8000548 <__aeabi_f2d>
 8010008:	4680      	mov	r8, r0
 801000a:	4689      	mov	r9, r1
 801000c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010010:	f7f0 fa9a 	bl	8000548 <__aeabi_f2d>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801001c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010020:	e9cd 4500 	strd	r4, r5, [sp]
 8010024:	4652      	mov	r2, sl
 8010026:	465b      	mov	r3, fp
 8010028:	49af      	ldr	r1, [pc, #700]	; (80102e8 <tunePID+0x9a8>)
 801002a:	48b0      	ldr	r0, [pc, #704]	; (80102ec <tunePID+0x9ac>)
 801002c:	f00f fe68 	bl	801fd00 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 8010030:	f003 fe22 	bl	8013c78 <HAL_GetTick>
 8010034:	4602      	mov	r2, r0
 8010036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	2b13      	cmp	r3, #19
 801003e:	d907      	bls.n	8010050 <tunePID+0x710>
						tick = HAL_GetTick();
 8010040:	f003 fe1a 	bl	8013c78 <HAL_GetTick>
 8010044:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						UARTPrintString(huartx, data);
 8010048:	49a8      	ldr	r1, [pc, #672]	; (80102ec <tunePID+0x9ac>)
 801004a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801004c:	f7f3 fd10 	bl	8003a70 <UARTPrintString>
			while(ps4->button == DOWN){
 8010050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010054:	2b40      	cmp	r3, #64	; 0x40
 8010056:	f43f aeff 	beq.w	800fe58 <tunePID+0x518>
					}
				}
			}
			RNSStop(rns);
 801005a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801005c:	f7f6 fe7a 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 8010060:	2264      	movs	r2, #100	; 0x64
 8010062:	2100      	movs	r1, #0
 8010064:	48a1      	ldr	r0, [pc, #644]	; (80102ec <tunePID+0x9ac>)
 8010066:	f00e fe69 	bl	801ed3c <memset>
 801006a:	e0fb      	b.n	8010264 <tunePID+0x924>
		}else if(ps4->button == RIGHT){
 801006c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801006e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010070:	2b20      	cmp	r3, #32
 8010072:	f040 80f7 	bne.w	8010264 <tunePID+0x924>
			uint32_t tick = HAL_GetTick();
 8010076:	f003 fdff 	bl	8013c78 <HAL_GetTick>
 801007a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
			float a, b, c, d;
			while(ps4->button == RIGHT){
 801007e:	e0e4      	b.n	801024a <tunePID+0x90a>
				if(base == fwd_omni){
 8010080:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8010084:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010088:	eef4 7a47 	vcmp.f32	s15, s14
 801008c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010090:	d16d      	bne.n	801016e <tunePID+0x82e>
					RNSVelocity(target_speed, -target_speed, -target_speed, target_speed, rns);
 8010092:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8010096:	eeb1 7a67 	vneg.f32	s14, s15
 801009a:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 801009e:	eef1 7a67 	vneg.f32	s15, s15
 80100a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80100a4:	edd7 1a39 	vldr	s3, [r7, #228]	; 0xe4
 80100a8:	eeb0 1a67 	vmov.f32	s2, s15
 80100ac:	eef0 0a47 	vmov.f32	s1, s14
 80100b0:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 80100b4:	f7f6 fe9e 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 80100b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100ba:	2057      	movs	r0, #87	; 0x57
 80100bc:	f7f7 f9e4 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 80100c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					b = rns->enq.enq_buffer[1].data;
 80100c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					c = rns->enq.enq_buffer[2].data;
 80100d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80100d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					d = rns->enq.enq_buffer[3].data;
 80100d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 80100e0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80100e4:	f7f0 fa30 	bl	8000548 <__aeabi_f2d>
 80100e8:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80100ec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80100f0:	f7f0 fa2a 	bl	8000548 <__aeabi_f2d>
 80100f4:	4604      	mov	r4, r0
 80100f6:	460d      	mov	r5, r1
							target_speed, a, -b, -c, d);
 80100f8:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80100fc:	eef1 7a67 	vneg.f32	s15, s15
 8010100:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010104:	4618      	mov	r0, r3
 8010106:	f7f0 fa1f 	bl	8000548 <__aeabi_f2d>
 801010a:	4680      	mov	r8, r0
 801010c:	4689      	mov	r9, r1
							target_speed, a, -b, -c, d);
 801010e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8010112:	eef1 7a67 	vneg.f32	s15, s15
 8010116:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 801011a:	4618      	mov	r0, r3
 801011c:	f7f0 fa14 	bl	8000548 <__aeabi_f2d>
 8010120:	4682      	mov	sl, r0
 8010122:	468b      	mov	fp, r1
 8010124:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010128:	f7f0 fa0e 	bl	8000548 <__aeabi_f2d>
 801012c:	4602      	mov	r2, r0
 801012e:	460b      	mov	r3, r1
 8010130:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010134:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010138:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801013c:	e9cd 4500 	strd	r4, r5, [sp]
 8010140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010144:	496a      	ldr	r1, [pc, #424]	; (80102f0 <tunePID+0x9b0>)
 8010146:	4869      	ldr	r0, [pc, #420]	; (80102ec <tunePID+0x9ac>)
 8010148:	f00f fdda 	bl	801fd00 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 801014c:	f003 fd94 	bl	8013c78 <HAL_GetTick>
 8010150:	4602      	mov	r2, r0
 8010152:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	2b13      	cmp	r3, #19
 801015a:	d976      	bls.n	801024a <tunePID+0x90a>
						tick = HAL_GetTick();
 801015c:	f003 fd8c 	bl	8013c78 <HAL_GetTick>
 8010160:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
						UARTPrintString(huartx, data);
 8010164:	4961      	ldr	r1, [pc, #388]	; (80102ec <tunePID+0x9ac>)
 8010166:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010168:	f7f3 fc82 	bl	8003a70 <UARTPrintString>
 801016c:	e06d      	b.n	801024a <tunePID+0x90a>
					}
				}
				else if(base == tri_omni){
 801016e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8010172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010176:	eef4 7a47 	vcmp.f32	s15, s14
 801017a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801017e:	d164      	bne.n	801024a <tunePID+0x90a>
					RNSVelocity((-0.5 * target_speed), (0.5 * target_speed), target_speed, 0.0, rns);
 8010180:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8010184:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8010188:	ee27 7a87 	vmul.f32	s14, s15, s14
 801018c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8010190:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010194:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010198:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801019a:	eddf 1a56 	vldr	s3, [pc, #344]	; 80102f4 <tunePID+0x9b4>
 801019e:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 80101a2:	eef0 0a67 	vmov.f32	s1, s15
 80101a6:	eeb0 0a47 	vmov.f32	s0, s14
 80101aa:	f7f6 fe23 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 80101ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80101b0:	2057      	movs	r0, #87	; 0x57
 80101b2:	f7f7 f969 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 80101b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					b = rns->enq.enq_buffer[1].data;
 80101be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					c = rns->enq.enq_buffer[2].data;
 80101c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 80101ce:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80101d2:	f7f0 f9b9 	bl	8000548 <__aeabi_f2d>
 80101d6:	4682      	mov	sl, r0
 80101d8:	468b      	mov	fp, r1
							target_speed, -2 * a, 2 * b, c);
 80101da:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80101de:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80101e2:	ee67 7a87 	vmul.f32	s15, s15, s14
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 80101e6:	ee17 0a90 	vmov	r0, s15
 80101ea:	f7f0 f9ad 	bl	8000548 <__aeabi_f2d>
 80101ee:	4604      	mov	r4, r0
 80101f0:	460d      	mov	r5, r1
							target_speed, -2 * a, 2 * b, c);
 80101f2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80101f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 80101fa:	ee17 0a90 	vmov	r0, s15
 80101fe:	f7f0 f9a3 	bl	8000548 <__aeabi_f2d>
 8010202:	4680      	mov	r8, r0
 8010204:	4689      	mov	r9, r1
 8010206:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801020a:	f7f0 f99d 	bl	8000548 <__aeabi_f2d>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010216:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801021a:	e9cd 4500 	strd	r4, r5, [sp]
 801021e:	4652      	mov	r2, sl
 8010220:	465b      	mov	r3, fp
 8010222:	4931      	ldr	r1, [pc, #196]	; (80102e8 <tunePID+0x9a8>)
 8010224:	4831      	ldr	r0, [pc, #196]	; (80102ec <tunePID+0x9ac>)
 8010226:	f00f fd6b 	bl	801fd00 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 801022a:	f003 fd25 	bl	8013c78 <HAL_GetTick>
 801022e:	4602      	mov	r2, r0
 8010230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	2b13      	cmp	r3, #19
 8010238:	d907      	bls.n	801024a <tunePID+0x90a>
						tick = HAL_GetTick();
 801023a:	f003 fd1d 	bl	8013c78 <HAL_GetTick>
 801023e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
						UARTPrintString(huartx, data);
 8010242:	492a      	ldr	r1, [pc, #168]	; (80102ec <tunePID+0x9ac>)
 8010244:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010246:	f7f3 fc13 	bl	8003a70 <UARTPrintString>
			while(ps4->button == RIGHT){
 801024a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801024c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801024e:	2b20      	cmp	r3, #32
 8010250:	f43f af16 	beq.w	8010080 <tunePID+0x740>
					}
				}
			}
			RNSStop(rns);
 8010254:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010256:	f7f6 fd7d 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 801025a:	2264      	movs	r2, #100	; 0x64
 801025c:	2100      	movs	r1, #0
 801025e:	4823      	ldr	r0, [pc, #140]	; (80102ec <tunePID+0x9ac>)
 8010260:	f00e fd6c 	bl	801ed3c <memset>
		}

		if(ps4->button == CROSS){	//stop NAVI + plot graph
 8010264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801026c:	d112      	bne.n	8010294 <tunePID+0x954>
			while(ps4->button == CROSS);
 801026e:	bf00      	nop
 8010270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010278:	d0fa      	beq.n	8010270 <tunePID+0x930>
			RNSStop(rns);
 801027a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801027c:	f7f6 fd6a 	bl	8006d54 <RNSStop>
			uint8_t terminatePlot = 0x15;
 8010280:	2315      	movs	r3, #21
 8010282:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			HAL_UART_Transmit(huartx, &terminatePlot, 1, 1);
 8010286:	f107 0153 	add.w	r1, r7, #83	; 0x53
 801028a:	2301      	movs	r3, #1
 801028c:	2201      	movs	r2, #1
 801028e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010290:	f00a f8f9 	bl	801a486 <HAL_UART_Transmit>
		}

		if(ps4->button == TRIANGLE){	//TRI omni wheel
 8010294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801029c:	d109      	bne.n	80102b2 <tunePID+0x972>
			while(ps4->button == TRIANGLE);
 801029e:	bf00      	nop
 80102a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102a8:	d0fa      	beq.n	80102a0 <tunePID+0x960>
			base = tri_omni;
 80102aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80102ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}
		if(ps4->button == SQUARE){	//FOUR omni wheel
 80102b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102ba:	d109      	bne.n	80102d0 <tunePID+0x990>
			while(ps4->button == SQUARE);
 80102bc:	bf00      	nop
 80102be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80102c6:	d0fa      	beq.n	80102be <tunePID+0x97e>
			base = fwd_omni;
 80102c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}
		if(ps4->button == SHARE){	//update PID
 80102d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	f040 8309 	bne.w	80108ec <tunePID+0xfac>
			while(ps4->button == SHARE);
 80102da:	bf00      	nop
 80102dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d0fb      	beq.n	80102dc <tunePID+0x99c>
			while(ps4->button != SHARE){
 80102e4:	e2fd      	b.n	80108e2 <tunePID+0xfa2>
 80102e6:	bf00      	nop
 80102e8:	08024ad4 	.word	0x08024ad4
 80102ec:	20006a8c 	.word	0x20006a8c
 80102f0:	08024ab4 	.word	0x08024ab4
 80102f4:	00000000 	.word	0x00000000
				if(ps4->button == SQUARE){	//print
 80102f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010300:	f040 8091 	bne.w	8010426 <tunePID+0xae6>
					while(ps4->button == SQUARE);
 8010304:	bf00      	nop
 8010306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801030a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801030e:	d0fa      	beq.n	8010306 <tunePID+0x9c6>
					sprintf(data, "%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n"
 8010310:	4bbb      	ldr	r3, [pc, #748]	; (8010600 <tunePID+0xcc0>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4618      	mov	r0, r3
 8010316:	f7f0 f917 	bl	8000548 <__aeabi_f2d>
 801031a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 801031e:	4bb9      	ldr	r3, [pc, #740]	; (8010604 <tunePID+0xcc4>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4618      	mov	r0, r3
 8010324:	f7f0 f910 	bl	8000548 <__aeabi_f2d>
 8010328:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 801032c:	4bb6      	ldr	r3, [pc, #728]	; (8010608 <tunePID+0xcc8>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4618      	mov	r0, r3
 8010332:	f7f0 f909 	bl	8000548 <__aeabi_f2d>
 8010336:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 801033a:	4bb4      	ldr	r3, [pc, #720]	; (801060c <tunePID+0xccc>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4618      	mov	r0, r3
 8010340:	f7f0 f902 	bl	8000548 <__aeabi_f2d>
 8010344:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8010348:	4bb1      	ldr	r3, [pc, #708]	; (8010610 <tunePID+0xcd0>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	4618      	mov	r0, r3
 801034e:	f7f0 f8fb 	bl	8000548 <__aeabi_f2d>
 8010352:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8010356:	4baf      	ldr	r3, [pc, #700]	; (8010614 <tunePID+0xcd4>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4618      	mov	r0, r3
 801035c:	f7f0 f8f4 	bl	8000548 <__aeabi_f2d>
 8010360:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8010364:	4bac      	ldr	r3, [pc, #688]	; (8010618 <tunePID+0xcd8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4618      	mov	r0, r3
 801036a:	f7f0 f8ed 	bl	8000548 <__aeabi_f2d>
 801036e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8010372:	4baa      	ldr	r3, [pc, #680]	; (801061c <tunePID+0xcdc>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4618      	mov	r0, r3
 8010378:	f7f0 f8e6 	bl	8000548 <__aeabi_f2d>
 801037c:	e9c7 0100 	strd	r0, r1, [r7]
 8010380:	4ba7      	ldr	r3, [pc, #668]	; (8010620 <tunePID+0xce0>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4618      	mov	r0, r3
 8010386:	f7f0 f8df 	bl	8000548 <__aeabi_f2d>
 801038a:	4682      	mov	sl, r0
 801038c:	468b      	mov	fp, r1
 801038e:	4ba5      	ldr	r3, [pc, #660]	; (8010624 <tunePID+0xce4>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4618      	mov	r0, r3
 8010394:	f7f0 f8d8 	bl	8000548 <__aeabi_f2d>
 8010398:	4680      	mov	r8, r0
 801039a:	4689      	mov	r9, r1
 801039c:	4ba2      	ldr	r3, [pc, #648]	; (8010628 <tunePID+0xce8>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7f0 f8d1 	bl	8000548 <__aeabi_f2d>
 80103a6:	4604      	mov	r4, r0
 80103a8:	460d      	mov	r5, r1
 80103aa:	4ba0      	ldr	r3, [pc, #640]	; (801062c <tunePID+0xcec>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7f0 f8ca 	bl	8000548 <__aeabi_f2d>
 80103b4:	4602      	mov	r2, r0
 80103b6:	460b      	mov	r3, r1
 80103b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80103bc:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80103c0:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80103c4:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80103c8:	ed97 7b00 	vldr	d7, [r7]
 80103cc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80103d0:	ed97 7b02 	vldr	d7, [r7, #8]
 80103d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80103d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80103dc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80103e0:	ed97 7b06 	vldr	d7, [r7, #24]
 80103e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80103e8:	ed97 7b08 	vldr	d7, [r7, #32]
 80103ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103f0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80103f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80103f8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80103fc:	ed8d 7b00 	vstr	d7, [sp]
 8010400:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010404:	498a      	ldr	r1, [pc, #552]	; (8010630 <tunePID+0xcf0>)
 8010406:	488b      	ldr	r0, [pc, #556]	; (8010634 <tunePID+0xcf4>)
 8010408:	f00f fc7a 	bl	801fd00 <siprintf>
							, AP, AI, AD, BP, BI, BD, CP, CI, CD, DP, DI, DD);
					HAL_Delay(50);
 801040c:	2032      	movs	r0, #50	; 0x32
 801040e:	f003 fc3f 	bl	8013c90 <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 8010412:	4888      	ldr	r0, [pc, #544]	; (8010634 <tunePID+0xcf4>)
 8010414:	f7ef fedc 	bl	80001d0 <strlen>
 8010418:	4603      	mov	r3, r0
 801041a:	b29a      	uxth	r2, r3
 801041c:	2332      	movs	r3, #50	; 0x32
 801041e:	4985      	ldr	r1, [pc, #532]	; (8010634 <tunePID+0xcf4>)
 8010420:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010422:	f00a f830 	bl	801a486 <HAL_UART_Transmit>
				}
				if(ps4->button == UP){
 8010426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801042a:	2b10      	cmp	r3, #16
 801042c:	d11c      	bne.n	8010468 <tunePID+0xb28>
					while(ps4->button == UP);
 801042e:	bf00      	nop
 8010430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010434:	2b10      	cmp	r3, #16
 8010436:	d0fb      	beq.n	8010430 <tunePID+0xaf0>
					arr_y ++;
 8010438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801043c:	3301      	adds	r3, #1
 801043e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					if(arr_y > 3)	arr_y = 3;
 8010442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010446:	2b03      	cmp	r3, #3
 8010448:	dd02      	ble.n	8010450 <tunePID+0xb10>
 801044a:	2303      	movs	r3, #3
 801044c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					sprintf(data, "arr y = %d\n", arr_y + 1);
 8010450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010454:	3301      	adds	r3, #1
 8010456:	461a      	mov	r2, r3
 8010458:	4977      	ldr	r1, [pc, #476]	; (8010638 <tunePID+0xcf8>)
 801045a:	4876      	ldr	r0, [pc, #472]	; (8010634 <tunePID+0xcf4>)
 801045c:	f00f fc50 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 8010460:	4974      	ldr	r1, [pc, #464]	; (8010634 <tunePID+0xcf4>)
 8010462:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010464:	f7f3 fb04 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == DOWN){
 8010468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801046a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801046c:	2b40      	cmp	r3, #64	; 0x40
 801046e:	d11c      	bne.n	80104aa <tunePID+0xb6a>
					while(ps4->button == DOWN);
 8010470:	bf00      	nop
 8010472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010476:	2b40      	cmp	r3, #64	; 0x40
 8010478:	d0fb      	beq.n	8010472 <tunePID+0xb32>
					arr_y --;
 801047a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801047e:	3b01      	subs	r3, #1
 8010480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					if(arr_y < 0)	arr_y = 0;
 8010484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010488:	2b00      	cmp	r3, #0
 801048a:	da02      	bge.n	8010492 <tunePID+0xb52>
 801048c:	2300      	movs	r3, #0
 801048e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					sprintf(data, "arr y = %d\n", arr_y + 1);
 8010492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010496:	3301      	adds	r3, #1
 8010498:	461a      	mov	r2, r3
 801049a:	4967      	ldr	r1, [pc, #412]	; (8010638 <tunePID+0xcf8>)
 801049c:	4865      	ldr	r0, [pc, #404]	; (8010634 <tunePID+0xcf4>)
 801049e:	f00f fc2f 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 80104a2:	4964      	ldr	r1, [pc, #400]	; (8010634 <tunePID+0xcf4>)
 80104a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80104a6:	f7f3 fae3 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == RIGHT){
 80104aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ae:	2b20      	cmp	r3, #32
 80104b0:	d11c      	bne.n	80104ec <tunePID+0xbac>
					while(ps4->button == RIGHT);
 80104b2:	bf00      	nop
 80104b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b8:	2b20      	cmp	r3, #32
 80104ba:	d0fb      	beq.n	80104b4 <tunePID+0xb74>
					arr_x ++;
 80104bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104c0:	3301      	adds	r3, #1
 80104c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					if(arr_x > 2)	arr_x = 2;
 80104c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	dd02      	ble.n	80104d4 <tunePID+0xb94>
 80104ce:	2302      	movs	r3, #2
 80104d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					sprintf(data, "arr x = %d\n", arr_x + 1);
 80104d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104d8:	3301      	adds	r3, #1
 80104da:	461a      	mov	r2, r3
 80104dc:	4957      	ldr	r1, [pc, #348]	; (801063c <tunePID+0xcfc>)
 80104de:	4855      	ldr	r0, [pc, #340]	; (8010634 <tunePID+0xcf4>)
 80104e0:	f00f fc0e 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 80104e4:	4953      	ldr	r1, [pc, #332]	; (8010634 <tunePID+0xcf4>)
 80104e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80104e8:	f7f3 fac2 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == LEFT){
 80104ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f0:	2b80      	cmp	r3, #128	; 0x80
 80104f2:	d11c      	bne.n	801052e <tunePID+0xbee>
					while(ps4->button == LEFT);
 80104f4:	bf00      	nop
 80104f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104fa:	2b80      	cmp	r3, #128	; 0x80
 80104fc:	d0fb      	beq.n	80104f6 <tunePID+0xbb6>
					arr_x --;
 80104fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010502:	3b01      	subs	r3, #1
 8010504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					if(arr_x < 0)	arr_x = 0;
 8010508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801050c:	2b00      	cmp	r3, #0
 801050e:	da02      	bge.n	8010516 <tunePID+0xbd6>
 8010510:	2300      	movs	r3, #0
 8010512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					sprintf(data, "arr x = %d\n", arr_x + 1);
 8010516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801051a:	3301      	adds	r3, #1
 801051c:	461a      	mov	r2, r3
 801051e:	4947      	ldr	r1, [pc, #284]	; (801063c <tunePID+0xcfc>)
 8010520:	4844      	ldr	r0, [pc, #272]	; (8010634 <tunePID+0xcf4>)
 8010522:	f00f fbed 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 8010526:	4943      	ldr	r1, [pc, #268]	; (8010634 <tunePID+0xcf4>)
 8010528:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801052a:	f7f3 faa1 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == L1){
 801052e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010536:	d10a      	bne.n	801054e <tunePID+0xc0e>
					while(ps4->button == L1);
 8010538:	bf00      	nop
 801053a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801053c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010542:	d0fa      	beq.n	801053a <tunePID+0xbfa>
					buf --;
 8010544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010548:	3b01      	subs	r3, #1
 801054a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}
				if(ps4->button == R1){
 801054e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010556:	d10a      	bne.n	801056e <tunePID+0xc2e>
					while(ps4->button == R1);
 8010558:	bf00      	nop
 801055a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801055c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010562:	d0fa      	beq.n	801055a <tunePID+0xc1a>
					buf ++;
 8010564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010568:	3301      	adds	r3, #1
 801056a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}
				if(ps4->button == CIRCLE){
 801056e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010576:	f040 8137 	bne.w	80107e8 <tunePID+0xea8>
					while(ps4->button == CIRCLE);
 801057a:	bf00      	nop
 801057c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801057e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010584:	d0fa      	beq.n	801057c <tunePID+0xc3c>
					if(arr_x == 0)
 8010586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801058a:	2b00      	cmp	r3, #0
 801058c:	d15f      	bne.n	801064e <tunePID+0xd0e>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.2;
 801058e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010592:	4613      	mov	r3, r2
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	4413      	add	r3, r2
 8010598:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801059c:	4413      	add	r3, r2
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80105a4:	4413      	add	r3, r2
 80105a6:	3b94      	subs	r3, #148	; 0x94
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ef ffcc 	bl	8000548 <__aeabi_f2d>
 80105b0:	4604      	mov	r4, r0
 80105b2:	460d      	mov	r5, r1
 80105b4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80105b8:	f7ef ffb4 	bl	8000524 <__aeabi_i2d>
 80105bc:	a30e      	add	r3, pc, #56	; (adr r3, 80105f8 <tunePID+0xcb8>)
 80105be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c2:	f7f0 f819 	bl	80005f8 <__aeabi_dmul>
 80105c6:	4602      	mov	r2, r0
 80105c8:	460b      	mov	r3, r1
 80105ca:	4620      	mov	r0, r4
 80105cc:	4629      	mov	r1, r5
 80105ce:	f7ef fe5d 	bl	800028c <__adddf3>
 80105d2:	4602      	mov	r2, r0
 80105d4:	460b      	mov	r3, r1
 80105d6:	4610      	mov	r0, r2
 80105d8:	4619      	mov	r1, r3
 80105da:	f7f0 fb05 	bl	8000be8 <__aeabi_d2f>
 80105de:	4601      	mov	r1, r0
 80105e0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80105e4:	4613      	mov	r3, r2
 80105e6:	005b      	lsls	r3, r3, #1
 80105e8:	4413      	add	r3, r2
 80105ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80105ee:	4413      	add	r3, r2
 80105f0:	e026      	b.n	8010640 <tunePID+0xd00>
 80105f2:	bf00      	nop
 80105f4:	f3af 8000 	nop.w
 80105f8:	9999999a 	.word	0x9999999a
 80105fc:	3fc99999 	.word	0x3fc99999
 8010600:	2000a6f4 	.word	0x2000a6f4
 8010604:	200078e8 	.word	0x200078e8
 8010608:	2000a6ec 	.word	0x2000a6ec
 801060c:	20007bac 	.word	0x20007bac
 8010610:	20009730 	.word	0x20009730
 8010614:	200078dc 	.word	0x200078dc
 8010618:	20009a08 	.word	0x20009a08
 801061c:	20009b7c 	.word	0x20009b7c
 8010620:	200071a4 	.word	0x200071a4
 8010624:	2000a278 	.word	0x2000a278
 8010628:	200076b0 	.word	0x200076b0
 801062c:	20009df4 	.word	0x20009df4
 8010630:	08024af4 	.word	0x08024af4
 8010634:	20006a8c 	.word	0x20006a8c
 8010638:	08024b3c 	.word	0x08024b3c
 801063c:	08024b48 	.word	0x08024b48
 8010640:	009b      	lsls	r3, r3, #2
 8010642:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8010646:	4413      	add	r3, r2
 8010648:	3b94      	subs	r3, #148	; 0x94
 801064a:	6019      	str	r1, [r3, #0]
 801064c:	e076      	b.n	801073c <tunePID+0xdfc>
					else if(arr_x == 1)
 801064e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010652:	2b01      	cmp	r3, #1
 8010654:	d137      	bne.n	80106c6 <tunePID+0xd86>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.2;
 8010656:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801065a:	4613      	mov	r3, r2
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	4413      	add	r3, r2
 8010660:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010664:	4413      	add	r3, r2
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801066c:	4413      	add	r3, r2
 801066e:	3b94      	subs	r3, #148	; 0x94
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	4618      	mov	r0, r3
 8010674:	f7ef ff68 	bl	8000548 <__aeabi_f2d>
 8010678:	4604      	mov	r4, r0
 801067a:	460d      	mov	r5, r1
 801067c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8010680:	f7ef ff50 	bl	8000524 <__aeabi_i2d>
 8010684:	a3af      	add	r3, pc, #700	; (adr r3, 8010944 <tunePID+0x1004>)
 8010686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068a:	f7ef ffb5 	bl	80005f8 <__aeabi_dmul>
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	4620      	mov	r0, r4
 8010694:	4629      	mov	r1, r5
 8010696:	f7ef fdf9 	bl	800028c <__adddf3>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4610      	mov	r0, r2
 80106a0:	4619      	mov	r1, r3
 80106a2:	f7f0 faa1 	bl	8000be8 <__aeabi_d2f>
 80106a6:	4601      	mov	r1, r0
 80106a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80106ac:	4613      	mov	r3, r2
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106b6:	4413      	add	r3, r2
 80106b8:	009b      	lsls	r3, r3, #2
 80106ba:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80106be:	4413      	add	r3, r2
 80106c0:	3b94      	subs	r3, #148	; 0x94
 80106c2:	6019      	str	r1, [r3, #0]
 80106c4:	e03a      	b.n	801073c <tunePID+0xdfc>
					else if(arr_x == 2)
 80106c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	d136      	bne.n	801073c <tunePID+0xdfc>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.005;
 80106ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80106d2:	4613      	mov	r3, r2
 80106d4:	005b      	lsls	r3, r3, #1
 80106d6:	4413      	add	r3, r2
 80106d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80106dc:	4413      	add	r3, r2
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80106e4:	4413      	add	r3, r2
 80106e6:	3b94      	subs	r3, #148	; 0x94
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ef ff2c 	bl	8000548 <__aeabi_f2d>
 80106f0:	4604      	mov	r4, r0
 80106f2:	460d      	mov	r5, r1
 80106f4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80106f8:	f7ef ff14 	bl	8000524 <__aeabi_i2d>
 80106fc:	a393      	add	r3, pc, #588	; (adr r3, 801094c <tunePID+0x100c>)
 80106fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010702:	f7ef ff79 	bl	80005f8 <__aeabi_dmul>
 8010706:	4602      	mov	r2, r0
 8010708:	460b      	mov	r3, r1
 801070a:	4620      	mov	r0, r4
 801070c:	4629      	mov	r1, r5
 801070e:	f7ef fdbd 	bl	800028c <__adddf3>
 8010712:	4602      	mov	r2, r0
 8010714:	460b      	mov	r3, r1
 8010716:	4610      	mov	r0, r2
 8010718:	4619      	mov	r1, r3
 801071a:	f7f0 fa65 	bl	8000be8 <__aeabi_d2f>
 801071e:	4601      	mov	r1, r0
 8010720:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010724:	4613      	mov	r3, r2
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	4413      	add	r3, r2
 801072a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801072e:	4413      	add	r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8010736:	4413      	add	r3, r2
 8010738:	3b94      	subs	r3, #148	; 0x94
 801073a:	6019      	str	r1, [r3, #0]
					sprintf(data, "pid[%d][%d] = %.3f, buf = %d\n", arr_y + 1, arr_x + 1, PID[arr_y][arr_x], buf);
 801073c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010740:	1c5c      	adds	r4, r3, #1
 8010742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010746:	1c5d      	adds	r5, r3, #1
 8010748:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801074c:	4613      	mov	r3, r2
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	4413      	add	r3, r2
 8010752:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010756:	4413      	add	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801075e:	4413      	add	r3, r2
 8010760:	3b94      	subs	r3, #148	; 0x94
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	4618      	mov	r0, r3
 8010766:	f7ef feef 	bl	8000548 <__aeabi_f2d>
 801076a:	4602      	mov	r2, r0
 801076c:	460b      	mov	r3, r1
 801076e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8010772:	9102      	str	r1, [sp, #8]
 8010774:	e9cd 2300 	strd	r2, r3, [sp]
 8010778:	462b      	mov	r3, r5
 801077a:	4622      	mov	r2, r4
 801077c:	4962      	ldr	r1, [pc, #392]	; (8010908 <tunePID+0xfc8>)
 801077e:	4863      	ldr	r0, [pc, #396]	; (801090c <tunePID+0xfcc>)
 8010780:	f00f fabe 	bl	801fd00 <siprintf>
					HAL_Delay(50);
 8010784:	2032      	movs	r0, #50	; 0x32
 8010786:	f003 fa83 	bl	8013c90 <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 801078a:	4860      	ldr	r0, [pc, #384]	; (801090c <tunePID+0xfcc>)
 801078c:	f7ef fd20 	bl	80001d0 <strlen>
 8010790:	4603      	mov	r3, r0
 8010792:	b29a      	uxth	r2, r3
 8010794:	2332      	movs	r3, #50	; 0x32
 8010796:	495d      	ldr	r1, [pc, #372]	; (801090c <tunePID+0xfcc>)
 8010798:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801079a:	f009 fe74 	bl	801a486 <HAL_UART_Transmit>
					AP = PID[0][0]; AI = PID[0][1]; AD = PID[0][3];
 801079e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107a0:	4a5b      	ldr	r2, [pc, #364]	; (8010910 <tunePID+0xfd0>)
 80107a2:	6013      	str	r3, [r2, #0]
 80107a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107a6:	4a5b      	ldr	r2, [pc, #364]	; (8010914 <tunePID+0xfd4>)
 80107a8:	6013      	str	r3, [r2, #0]
 80107aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107ac:	4a5a      	ldr	r2, [pc, #360]	; (8010918 <tunePID+0xfd8>)
 80107ae:	6013      	str	r3, [r2, #0]
					BP = PID[1][0]; BI = PID[1][1]; BD = PID[1][3];
 80107b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107b2:	4a5a      	ldr	r2, [pc, #360]	; (801091c <tunePID+0xfdc>)
 80107b4:	6013      	str	r3, [r2, #0]
 80107b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80107b8:	4a59      	ldr	r2, [pc, #356]	; (8010920 <tunePID+0xfe0>)
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107be:	4a59      	ldr	r2, [pc, #356]	; (8010924 <tunePID+0xfe4>)
 80107c0:	6013      	str	r3, [r2, #0]
					CP = PID[2][0]; CI = PID[2][1]; CD = PID[2][3];
 80107c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107c4:	4a58      	ldr	r2, [pc, #352]	; (8010928 <tunePID+0xfe8>)
 80107c6:	6013      	str	r3, [r2, #0]
 80107c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107ca:	4a58      	ldr	r2, [pc, #352]	; (801092c <tunePID+0xfec>)
 80107cc:	6013      	str	r3, [r2, #0]
 80107ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107d0:	4a57      	ldr	r2, [pc, #348]	; (8010930 <tunePID+0xff0>)
 80107d2:	6013      	str	r3, [r2, #0]
					DP = PID[3][0]; DI = PID[3][1]; DD = PID[3][3];
 80107d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107d6:	4a57      	ldr	r2, [pc, #348]	; (8010934 <tunePID+0xff4>)
 80107d8:	6013      	str	r3, [r2, #0]
 80107da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80107dc:	4a56      	ldr	r2, [pc, #344]	; (8010938 <tunePID+0xff8>)
 80107de:	6013      	str	r3, [r2, #0]
 80107e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107e4:	4a55      	ldr	r2, [pc, #340]	; (801093c <tunePID+0xffc>)
 80107e6:	6013      	str	r3, [r2, #0]
				}
				if(ps4->button == TRIANGLE){
 80107e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107f0:	d177      	bne.n	80108e2 <tunePID+0xfa2>
					while(ps4->button == TRIANGLE);
 80107f2:	bf00      	nop
 80107f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107fc:	d0fa      	beq.n	80107f4 <tunePID+0xeb4>
					RNSSet(rns, RNS_F_LEFT_VEL_PID,  PID[0][0],  PID[0][1],  PID[0][2]);
 80107fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010800:	4618      	mov	r0, r3
 8010802:	f7ef fea1 	bl	8000548 <__aeabi_f2d>
 8010806:	4680      	mov	r8, r0
 8010808:	4689      	mov	r9, r1
 801080a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801080c:	4618      	mov	r0, r3
 801080e:	f7ef fe9b 	bl	8000548 <__aeabi_f2d>
 8010812:	4604      	mov	r4, r0
 8010814:	460d      	mov	r5, r1
 8010816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010818:	4618      	mov	r0, r3
 801081a:	f7ef fe95 	bl	8000548 <__aeabi_f2d>
 801081e:	4602      	mov	r2, r0
 8010820:	460b      	mov	r3, r1
 8010822:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010826:	e9cd 4500 	strd	r4, r5, [sp]
 801082a:	4642      	mov	r2, r8
 801082c:	464b      	mov	r3, r9
 801082e:	212f      	movs	r1, #47	; 0x2f
 8010830:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010832:	f7f6 fcbd 	bl	80071b0 <RNSSet>
					RNSSet(rns, RNS_F_RIGHT_VEL_PID,  PID[1][0],  PID[1][1],  PID[1][2]);
 8010836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010838:	4618      	mov	r0, r3
 801083a:	f7ef fe85 	bl	8000548 <__aeabi_f2d>
 801083e:	4680      	mov	r8, r0
 8010840:	4689      	mov	r9, r1
 8010842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010844:	4618      	mov	r0, r3
 8010846:	f7ef fe7f 	bl	8000548 <__aeabi_f2d>
 801084a:	4604      	mov	r4, r0
 801084c:	460d      	mov	r5, r1
 801084e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010850:	4618      	mov	r0, r3
 8010852:	f7ef fe79 	bl	8000548 <__aeabi_f2d>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801085e:	e9cd 4500 	strd	r4, r5, [sp]
 8010862:	4642      	mov	r2, r8
 8010864:	464b      	mov	r3, r9
 8010866:	2130      	movs	r1, #48	; 0x30
 8010868:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801086a:	f7f6 fca1 	bl	80071b0 <RNSSet>
					RNSSet(rns, RNS_B_LEFT_VEL_PID,  PID[2][0],  PID[2][1],  PID[2][2]);
 801086e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010870:	4618      	mov	r0, r3
 8010872:	f7ef fe69 	bl	8000548 <__aeabi_f2d>
 8010876:	4680      	mov	r8, r0
 8010878:	4689      	mov	r9, r1
 801087a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801087c:	4618      	mov	r0, r3
 801087e:	f7ef fe63 	bl	8000548 <__aeabi_f2d>
 8010882:	4604      	mov	r4, r0
 8010884:	460d      	mov	r5, r1
 8010886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010888:	4618      	mov	r0, r3
 801088a:	f7ef fe5d 	bl	8000548 <__aeabi_f2d>
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010896:	e9cd 4500 	strd	r4, r5, [sp]
 801089a:	4642      	mov	r2, r8
 801089c:	464b      	mov	r3, r9
 801089e:	2131      	movs	r1, #49	; 0x31
 80108a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108a2:	f7f6 fc85 	bl	80071b0 <RNSSet>
					RNSSet(rns, RNS_B_RIGHT_VEL_PID,  PID[3][0],  PID[3][1],  PID[3][2]);
 80108a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ef fe4d 	bl	8000548 <__aeabi_f2d>
 80108ae:	4680      	mov	r8, r0
 80108b0:	4689      	mov	r9, r1
 80108b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7ef fe47 	bl	8000548 <__aeabi_f2d>
 80108ba:	4604      	mov	r4, r0
 80108bc:	460d      	mov	r5, r1
 80108be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ef fe40 	bl	8000548 <__aeabi_f2d>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80108d0:	e9cd 4500 	strd	r4, r5, [sp]
 80108d4:	4642      	mov	r2, r8
 80108d6:	464b      	mov	r3, r9
 80108d8:	2132      	movs	r1, #50	; 0x32
 80108da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108dc:	f7f6 fc68 	bl	80071b0 <RNSSet>
					break;
 80108e0:	e004      	b.n	80108ec <tunePID+0xfac>
			while(ps4->button != SHARE){
 80108e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	f47f ad06 	bne.w	80102f8 <tunePID+0x9b8>
	while(tune.PID){
 80108ec:	4b14      	ldr	r3, [pc, #80]	; (8010940 <tunePID+0x1000>)
 80108ee:	791b      	ldrb	r3, [r3, #4]
 80108f0:	f003 0301 	and.w	r3, r3, #1
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	f47f a861 	bne.w	800f9be <tunePID+0x7e>
				}
			}
		}
	}
}
 80108fc:	bf00      	nop
 80108fe:	bf00      	nop
 8010900:	37e8      	adds	r7, #232	; 0xe8
 8010902:	46bd      	mov	sp, r7
 8010904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010908:	08024b54 	.word	0x08024b54
 801090c:	20006a8c 	.word	0x20006a8c
 8010910:	2000a6f4 	.word	0x2000a6f4
 8010914:	200078e8 	.word	0x200078e8
 8010918:	2000a6ec 	.word	0x2000a6ec
 801091c:	20007bac 	.word	0x20007bac
 8010920:	20009730 	.word	0x20009730
 8010924:	200078dc 	.word	0x200078dc
 8010928:	20009a08 	.word	0x20009a08
 801092c:	20009b7c 	.word	0x20009b7c
 8010930:	200071a4 	.word	0x200071a4
 8010934:	2000a278 	.word	0x2000a278
 8010938:	200076b0 	.word	0x200076b0
 801093c:	20009df4 	.word	0x20009df4
 8010940:	20007928 	.word	0x20007928
 8010944:	9999999a 	.word	0x9999999a
 8010948:	3fc99999 	.word	0x3fc99999
 801094c:	47ae147b 	.word	0x47ae147b
 8010950:	3f747ae1 	.word	0x3f747ae1
 8010954:	00000000 	.word	0x00000000

08010958 <tunePIDex>:

void tunePIDex(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns, float base_type){
 8010958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801095c:	b0c9      	sub	sp, #292	; 0x124
 801095e:	af16      	add	r7, sp, #88	; 0x58
 8010960:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010962:	64b9      	str	r1, [r7, #72]	; 0x48
 8010964:	647a      	str	r2, [r7, #68]	; 0x44
 8010966:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	//USED TO TUNE PID OTHER THAN NAVI
	AP = 0.05; AI = 1.0; AD = 0.03;		//imu
 801096a:	4bbc      	ldr	r3, [pc, #752]	; (8010c5c <tunePIDex+0x304>)
 801096c:	4abc      	ldr	r2, [pc, #752]	; (8010c60 <tunePIDex+0x308>)
 801096e:	601a      	str	r2, [r3, #0]
 8010970:	4bbc      	ldr	r3, [pc, #752]	; (8010c64 <tunePIDex+0x30c>)
 8010972:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010976:	601a      	str	r2, [r3, #0]
 8010978:	4bbb      	ldr	r3, [pc, #748]	; (8010c68 <tunePIDex+0x310>)
 801097a:	4abc      	ldr	r2, [pc, #752]	; (8010c6c <tunePIDex+0x314>)
 801097c:	601a      	str	r2, [r3, #0]
	float target_speed = 3.0, target_angle = 0.0, buf = 0.0, base = base_type;
 801097e:	4bbc      	ldr	r3, [pc, #752]	; (8010c70 <tunePIDex+0x318>)
 8010980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010984:	f04f 0300 	mov.w	r3, #0
 8010988:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801098c:	f04f 0300 	mov.w	r3, #0
 8010990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int arr_x = 0, arr_y = 0;
 801099a:	2300      	movs	r3, #0
 801099c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80109a0:	2300      	movs	r3, #0
 80109a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float PID[4][3]={{AP, AI, AD},
 80109a6:	4bad      	ldr	r3, [pc, #692]	; (8010c5c <tunePIDex+0x304>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80109ac:	4bad      	ldr	r3, [pc, #692]	; (8010c64 <tunePIDex+0x30c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80109b2:	4bad      	ldr	r3, [pc, #692]	; (8010c68 <tunePIDex+0x310>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	663b      	str	r3, [r7, #96]	; 0x60
 80109b8:	4bae      	ldr	r3, [pc, #696]	; (8010c74 <tunePIDex+0x31c>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	667b      	str	r3, [r7, #100]	; 0x64
 80109be:	4bae      	ldr	r3, [pc, #696]	; (8010c78 <tunePIDex+0x320>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80109c4:	4bad      	ldr	r3, [pc, #692]	; (8010c7c <tunePIDex+0x324>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80109ca:	4bad      	ldr	r3, [pc, #692]	; (8010c80 <tunePIDex+0x328>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	673b      	str	r3, [r7, #112]	; 0x70
 80109d0:	4bac      	ldr	r3, [pc, #688]	; (8010c84 <tunePIDex+0x32c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	677b      	str	r3, [r7, #116]	; 0x74
 80109d6:	4bac      	ldr	r3, [pc, #688]	; (8010c88 <tunePIDex+0x330>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	67bb      	str	r3, [r7, #120]	; 0x78
 80109dc:	4bab      	ldr	r3, [pc, #684]	; (8010c8c <tunePIDex+0x334>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80109e2:	4bab      	ldr	r3, [pc, #684]	; (8010c90 <tunePIDex+0x338>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80109ea:	4baa      	ldr	r3, [pc, #680]	; (8010c94 <tunePIDex+0x33c>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			{BP, BI, BD},
			{CP, CI, CD},
			{DP, DI, DD}};
	while(tune.PID){
 80109f2:	f000 bdc3 	b.w	801157c <tunePIDex+0xc24>
		if(ps4->button == R1){		//adjust speed
 80109f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80109fe:	d123      	bne.n	8010a48 <tunePIDex+0xf0>
			while(ps4->button == R1);
 8010a00:	bf00      	nop
 8010a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a0a:	d0fa      	beq.n	8010a02 <tunePIDex+0xaa>
			target_angle += buf;
 8010a0c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8010a10:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8010a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a18:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
			if(target_angle >= 180)
 8010a1c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8010a20:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8010c98 <tunePIDex+0x340>
 8010a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2c:	db02      	blt.n	8010a34 <tunePIDex+0xdc>
				target_angle = 180;
 8010a2e:	4b9b      	ldr	r3, [pc, #620]	; (8010c9c <tunePIDex+0x344>)
 8010a30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			RNSIMURotate(target_angle, rns);
 8010a34:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8010a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a3e:	ee17 0a90 	vmov	r0, s15
 8010a42:	f7f6 f9f9 	bl	8006e38 <RNSIMURotate>
 8010a46:	e027      	b.n	8010a98 <tunePIDex+0x140>
		}else if(ps4->button == L1){
 8010a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a50:	d122      	bne.n	8010a98 <tunePIDex+0x140>
			while(ps4->button == L1);
 8010a52:	bf00      	nop
 8010a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a5c:	d0fa      	beq.n	8010a54 <tunePIDex+0xfc>
			target_angle -= buf;
 8010a5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8010a62:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8010a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a6a:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
			if(target_angle <= -180)
 8010a6e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8010a72:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8010ca0 <tunePIDex+0x348>
 8010a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7e:	d802      	bhi.n	8010a86 <tunePIDex+0x12e>
				target_angle = -180;
 8010a80:	4b88      	ldr	r3, [pc, #544]	; (8010ca4 <tunePIDex+0x34c>)
 8010a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			RNSIMURotate(target_angle, rns);
 8010a86:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8010a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a90:	ee17 0a90 	vmov	r0, s15
 8010a94:	f7f6 f9d0 	bl	8006e38 <RNSIMURotate>
		}

		LegacyMODN(ps4, rns);
 8010a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a9a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8010a9c:	f7f4 ff14 	bl	80058c8 <LegacyMODN>

		if(ps4->button == OPTION){
 8010aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010aa8:	d108      	bne.n	8010abc <tunePIDex+0x164>
			while(ps4->button == OPTION);
 8010aaa:	bf00      	nop
 8010aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ab4:	d0fa      	beq.n	8010aac <tunePIDex+0x154>
			buf = 90.0;
 8010ab6:	4b7c      	ldr	r3, [pc, #496]	; (8010ca8 <tunePIDex+0x350>)
 8010ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		}
		if(ps4->button == UP){
 8010abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac0:	2b10      	cmp	r3, #16
 8010ac2:	d121      	bne.n	8010b08 <tunePIDex+0x1b0>
			while(ps4->button == UP);
 8010ac4:	bf00      	nop
 8010ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aca:	2b10      	cmp	r3, #16
 8010acc:	d0fb      	beq.n	8010ac6 <tunePIDex+0x16e>
			buf += 2.0;
 8010ace:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8010ad2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010ad6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ada:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
			sprintf(data, "d_arg = %.1f", buf);
 8010ade:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8010ae2:	f7ef fd31 	bl	8000548 <__aeabi_f2d>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4970      	ldr	r1, [pc, #448]	; (8010cac <tunePIDex+0x354>)
 8010aec:	4870      	ldr	r0, [pc, #448]	; (8010cb0 <tunePIDex+0x358>)
 8010aee:	f00f f907 	bl	801fd00 <siprintf>
			HAL_UART_Transmit(huartx, (uint8_t *)&data, strlen(data), 10);
 8010af2:	486f      	ldr	r0, [pc, #444]	; (8010cb0 <tunePIDex+0x358>)
 8010af4:	f7ef fb6c 	bl	80001d0 <strlen>
 8010af8:	4603      	mov	r3, r0
 8010afa:	b29a      	uxth	r2, r3
 8010afc:	230a      	movs	r3, #10
 8010afe:	496c      	ldr	r1, [pc, #432]	; (8010cb0 <tunePIDex+0x358>)
 8010b00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010b02:	f009 fcc0 	bl	801a486 <HAL_UART_Transmit>
 8010b06:	e240      	b.n	8010f8a <tunePIDex+0x632>

		}else if(ps4->button == DOWN){
 8010b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b0c:	2b40      	cmp	r3, #64	; 0x40
 8010b0e:	d121      	bne.n	8010b54 <tunePIDex+0x1fc>
			while(ps4->button == DOWN);
 8010b10:	bf00      	nop
 8010b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b16:	2b40      	cmp	r3, #64	; 0x40
 8010b18:	d0fb      	beq.n	8010b12 <tunePIDex+0x1ba>
			buf -= 2.0;
 8010b1a:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8010b1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b26:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
			sprintf(data, "d_arg = %.1f", buf);
 8010b2a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8010b2e:	f7ef fd0b 	bl	8000548 <__aeabi_f2d>
 8010b32:	4602      	mov	r2, r0
 8010b34:	460b      	mov	r3, r1
 8010b36:	495d      	ldr	r1, [pc, #372]	; (8010cac <tunePIDex+0x354>)
 8010b38:	485d      	ldr	r0, [pc, #372]	; (8010cb0 <tunePIDex+0x358>)
 8010b3a:	f00f f8e1 	bl	801fd00 <siprintf>
			HAL_UART_Transmit(huartx, (uint8_t *)&data, strlen(data), 10);
 8010b3e:	485c      	ldr	r0, [pc, #368]	; (8010cb0 <tunePIDex+0x358>)
 8010b40:	f7ef fb46 	bl	80001d0 <strlen>
 8010b44:	4603      	mov	r3, r0
 8010b46:	b29a      	uxth	r2, r3
 8010b48:	230a      	movs	r3, #10
 8010b4a:	4959      	ldr	r1, [pc, #356]	; (8010cb0 <tunePIDex+0x358>)
 8010b4c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010b4e:	f009 fc9a 	bl	801a486 <HAL_UART_Transmit>
 8010b52:	e21a      	b.n	8010f8a <tunePIDex+0x632>
		}else if(ps4->button == LEFT){
 8010b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b58:	2b80      	cmp	r3, #128	; 0x80
 8010b5a:	f040 8127 	bne.w	8010dac <tunePIDex+0x454>
			uint32_t tick = HAL_GetTick();
 8010b5e:	f003 f88b 	bl	8013c78 <HAL_GetTick>
 8010b62:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			float a, b, c, d;
			while(ps4->button == LEFT){
 8010b66:	e113      	b.n	8010d90 <tunePIDex+0x438>
				if(base == fwd_omni){
 8010b68:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8010b6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010b70:	eef4 7a47 	vcmp.f32	s15, s14
 8010b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b78:	f040 80a0 	bne.w	8010cbc <tunePIDex+0x364>
					RNSVelocity(-target_speed, target_speed, -target_speed, target_speed, rns);
 8010b7c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010b80:	eeb1 7a67 	vneg.f32	s14, s15
 8010b84:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010b88:	eef1 7a67 	vneg.f32	s15, s15
 8010b8c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b8e:	edd7 1a2a 	vldr	s3, [r7, #168]	; 0xa8
 8010b92:	eeb0 1a67 	vmov.f32	s2, s15
 8010b96:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8010b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8010b9e:	f7f6 f929 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 8010ba2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ba4:	2057      	movs	r0, #87	; 0x57
 8010ba6:	f7f6 fc6f 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 8010baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					b = rns->enq.enq_buffer[1].data;
 8010bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					c = rns->enq.enq_buffer[2].data;
 8010bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					d = rns->enq.enq_buffer[3].data;
 8010bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010bca:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010bce:	f7ef fcbb 	bl	8000548 <__aeabi_f2d>
 8010bd2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							target_speed, -a, b, -c, d);
 8010bd6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8010bda:	eef1 7a67 	vneg.f32	s15, s15
 8010bde:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ef fcb0 	bl	8000548 <__aeabi_f2d>
 8010be8:	4604      	mov	r4, r0
 8010bea:	460d      	mov	r5, r1
 8010bec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010bf0:	f7ef fcaa 	bl	8000548 <__aeabi_f2d>
 8010bf4:	4680      	mov	r8, r0
 8010bf6:	4689      	mov	r9, r1
							target_speed, -a, b, -c, d);
 8010bf8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010bfc:	eef1 7a67 	vneg.f32	s15, s15
 8010c00:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7ef fc9f 	bl	8000548 <__aeabi_f2d>
 8010c0a:	4682      	mov	sl, r0
 8010c0c:	468b      	mov	fp, r1
 8010c0e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8010c12:	f7ef fc99 	bl	8000548 <__aeabi_f2d>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010c1e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010c22:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010c26:	e9cd 4500 	strd	r4, r5, [sp]
 8010c2a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010c2e:	4921      	ldr	r1, [pc, #132]	; (8010cb4 <tunePIDex+0x35c>)
 8010c30:	481f      	ldr	r0, [pc, #124]	; (8010cb0 <tunePIDex+0x358>)
 8010c32:	f00f f865 	bl	801fd00 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 8010c36:	f003 f81f 	bl	8013c78 <HAL_GetTick>
 8010c3a:	4602      	mov	r2, r0
 8010c3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010c40:	1ad3      	subs	r3, r2, r3
 8010c42:	2b13      	cmp	r3, #19
 8010c44:	f240 80a4 	bls.w	8010d90 <tunePIDex+0x438>
						tick = HAL_GetTick();
 8010c48:	f003 f816 	bl	8013c78 <HAL_GetTick>
 8010c4c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
						UARTPrintString(huartx, data);
 8010c50:	4917      	ldr	r1, [pc, #92]	; (8010cb0 <tunePIDex+0x358>)
 8010c52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010c54:	f7f2 ff0c 	bl	8003a70 <UARTPrintString>
 8010c58:	e09a      	b.n	8010d90 <tunePIDex+0x438>
 8010c5a:	bf00      	nop
 8010c5c:	2000a6f4 	.word	0x2000a6f4
 8010c60:	3d4ccccd 	.word	0x3d4ccccd
 8010c64:	200078e8 	.word	0x200078e8
 8010c68:	2000a6ec 	.word	0x2000a6ec
 8010c6c:	3cf5c28f 	.word	0x3cf5c28f
 8010c70:	40400000 	.word	0x40400000
 8010c74:	20007bac 	.word	0x20007bac
 8010c78:	20009730 	.word	0x20009730
 8010c7c:	200078dc 	.word	0x200078dc
 8010c80:	20009a08 	.word	0x20009a08
 8010c84:	20009b7c 	.word	0x20009b7c
 8010c88:	200071a4 	.word	0x200071a4
 8010c8c:	2000a278 	.word	0x2000a278
 8010c90:	200076b0 	.word	0x200076b0
 8010c94:	20009df4 	.word	0x20009df4
 8010c98:	43340000 	.word	0x43340000
 8010c9c:	43340000 	.word	0x43340000
 8010ca0:	c3340000 	.word	0xc3340000
 8010ca4:	c3340000 	.word	0xc3340000
 8010ca8:	42b40000 	.word	0x42b40000
 8010cac:	08024b74 	.word	0x08024b74
 8010cb0:	20006a8c 	.word	0x20006a8c
 8010cb4:	08024ab4 	.word	0x08024ab4
 8010cb8:	00000000 	.word	0x00000000
					}
				}
				else if(base == tri_omni){
 8010cbc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8010cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cc4:	eef4 7a47 	vcmp.f32	s15, s14
 8010cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ccc:	d160      	bne.n	8010d90 <tunePIDex+0x438>
					RNSVelocity(-target_speed, target_speed, -target_speed, 0.0, rns);
 8010cce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010cd2:	eeb1 7a67 	vneg.f32	s14, s15
 8010cd6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010cda:	eef1 7a67 	vneg.f32	s15, s15
 8010cde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010ce0:	ed5f 1a0b 	vldr	s3, [pc, #-44]	; 8010cb8 <tunePIDex+0x360>
 8010ce4:	eeb0 1a67 	vmov.f32	s2, s15
 8010ce8:	edd7 0a2a 	vldr	s1, [r7, #168]	; 0xa8
 8010cec:	eeb0 0a47 	vmov.f32	s0, s14
 8010cf0:	f7f6 f880 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 8010cf4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010cf6:	2057      	movs	r0, #87	; 0x57
 8010cf8:	f7f6 fbc6 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 8010cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					b = rns->enq.enq_buffer[1].data;
 8010d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					c = rns->enq.enq_buffer[2].data;
 8010d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010d14:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010d18:	f7ef fc16 	bl	8000548 <__aeabi_f2d>
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	468b      	mov	fp, r1
							target_speed, -a, b, -c);
 8010d20:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8010d24:	eef1 7a67 	vneg.f32	s15, s15
 8010d28:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7ef fc0b 	bl	8000548 <__aeabi_f2d>
 8010d32:	4604      	mov	r4, r0
 8010d34:	460d      	mov	r5, r1
 8010d36:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010d3a:	f7ef fc05 	bl	8000548 <__aeabi_f2d>
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4689      	mov	r9, r1
							target_speed, -a, b, -c);
 8010d42:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8010d46:	eef1 7a67 	vneg.f32	s15, s15
 8010d4a:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ef fbfa 	bl	8000548 <__aeabi_f2d>
 8010d54:	4602      	mov	r2, r0
 8010d56:	460b      	mov	r3, r1
 8010d58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d5c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010d60:	e9cd 4500 	strd	r4, r5, [sp]
 8010d64:	4652      	mov	r2, sl
 8010d66:	465b      	mov	r3, fp
 8010d68:	49a8      	ldr	r1, [pc, #672]	; (801100c <tunePIDex+0x6b4>)
 8010d6a:	48a9      	ldr	r0, [pc, #676]	; (8011010 <tunePIDex+0x6b8>)
 8010d6c:	f00e ffc8 	bl	801fd00 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 8010d70:	f002 ff82 	bl	8013c78 <HAL_GetTick>
 8010d74:	4602      	mov	r2, r0
 8010d76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	2b13      	cmp	r3, #19
 8010d7e:	d907      	bls.n	8010d90 <tunePIDex+0x438>
						tick = HAL_GetTick();
 8010d80:	f002 ff7a 	bl	8013c78 <HAL_GetTick>
 8010d84:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
						UARTPrintString(huartx, data);
 8010d88:	49a1      	ldr	r1, [pc, #644]	; (8011010 <tunePIDex+0x6b8>)
 8010d8a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010d8c:	f7f2 fe70 	bl	8003a70 <UARTPrintString>
			while(ps4->button == LEFT){
 8010d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d94:	2b80      	cmp	r3, #128	; 0x80
 8010d96:	f43f aee7 	beq.w	8010b68 <tunePIDex+0x210>
					}
				}
			}
			RNSStop(rns);
 8010d9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010d9c:	f7f5 ffda 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 8010da0:	2264      	movs	r2, #100	; 0x64
 8010da2:	2100      	movs	r1, #0
 8010da4:	489a      	ldr	r0, [pc, #616]	; (8011010 <tunePIDex+0x6b8>)
 8010da6:	f00d ffc9 	bl	801ed3c <memset>
 8010daa:	e0ee      	b.n	8010f8a <tunePIDex+0x632>
		}else if(ps4->button == RIGHT){
 8010dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010db0:	2b20      	cmp	r3, #32
 8010db2:	f040 80ea 	bne.w	8010f8a <tunePIDex+0x632>
			uint32_t tick = HAL_GetTick();
 8010db6:	f002 ff5f 	bl	8013c78 <HAL_GetTick>
 8010dba:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
			float a, b, c, d;
			while(ps4->button == RIGHT){
 8010dbe:	e0d7      	b.n	8010f70 <tunePIDex+0x618>
				if(base == fwd_omni){
 8010dc0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8010dc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010dc8:	eef4 7a47 	vcmp.f32	s15, s14
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd0:	d16d      	bne.n	8010eae <tunePIDex+0x556>
					RNSVelocity(target_speed, -target_speed, target_speed, -target_speed, rns);
 8010dd2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010dd6:	eeb1 7a67 	vneg.f32	s14, s15
 8010dda:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010dde:	eef1 7a67 	vneg.f32	s15, s15
 8010de2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010de4:	eef0 1a67 	vmov.f32	s3, s15
 8010de8:	ed97 1a2a 	vldr	s2, [r7, #168]	; 0xa8
 8010dec:	eef0 0a47 	vmov.f32	s1, s14
 8010df0:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8010df4:	f7f5 fffe 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 8010df8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dfa:	2057      	movs	r0, #87	; 0x57
 8010dfc:	f7f6 fb44 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 8010e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					b = rns->enq.enq_buffer[1].data;
 8010e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					c = rns->enq.enq_buffer[2].data;
 8010e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					d = rns->enq.enq_buffer[3].data;
 8010e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010e20:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010e24:	f7ef fb90 	bl	8000548 <__aeabi_f2d>
 8010e28:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8010e2c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010e30:	f7ef fb8a 	bl	8000548 <__aeabi_f2d>
 8010e34:	4604      	mov	r4, r0
 8010e36:	460d      	mov	r5, r1
							target_speed, a, -b, c, -d);
 8010e38:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010e3c:	eef1 7a67 	vneg.f32	s15, s15
 8010e40:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ef fb7f 	bl	8000548 <__aeabi_f2d>
 8010e4a:	4680      	mov	r8, r0
 8010e4c:	4689      	mov	r9, r1
 8010e4e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8010e52:	f7ef fb79 	bl	8000548 <__aeabi_f2d>
 8010e56:	4682      	mov	sl, r0
 8010e58:	468b      	mov	fp, r1
							target_speed, a, -b, c, -d);
 8010e5a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8010e5e:	eef1 7a67 	vneg.f32	s15, s15
 8010e62:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ef fb6e 	bl	8000548 <__aeabi_f2d>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e74:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8010e78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010e7c:	e9cd 4500 	strd	r4, r5, [sp]
 8010e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010e84:	4963      	ldr	r1, [pc, #396]	; (8011014 <tunePIDex+0x6bc>)
 8010e86:	4862      	ldr	r0, [pc, #392]	; (8011010 <tunePIDex+0x6b8>)
 8010e88:	f00e ff3a 	bl	801fd00 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 8010e8c:	f002 fef4 	bl	8013c78 <HAL_GetTick>
 8010e90:	4602      	mov	r2, r0
 8010e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	2b13      	cmp	r3, #19
 8010e9a:	d969      	bls.n	8010f70 <tunePIDex+0x618>
						tick = HAL_GetTick();
 8010e9c:	f002 feec 	bl	8013c78 <HAL_GetTick>
 8010ea0:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						UARTPrintString(huartx, data);
 8010ea4:	495a      	ldr	r1, [pc, #360]	; (8011010 <tunePIDex+0x6b8>)
 8010ea6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010ea8:	f7f2 fde2 	bl	8003a70 <UARTPrintString>
 8010eac:	e060      	b.n	8010f70 <tunePIDex+0x618>
					}
				}
				else if(base == tri_omni){
 8010eae:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8010eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010eb6:	eef4 7a47 	vcmp.f32	s15, s14
 8010eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebe:	d157      	bne.n	8010f70 <tunePIDex+0x618>
					RNSVelocity(target_speed, -target_speed, target_speed, 0.0, rns);
 8010ec0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8010ec4:	eef1 7a67 	vneg.f32	s15, s15
 8010ec8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010eca:	eddf 1a53 	vldr	s3, [pc, #332]	; 8011018 <tunePIDex+0x6c0>
 8010ece:	ed97 1a2a 	vldr	s2, [r7, #168]	; 0xa8
 8010ed2:	eef0 0a67 	vmov.f32	s1, s15
 8010ed6:	ed97 0a2a 	vldr	s0, [r7, #168]	; 0xa8
 8010eda:	f7f5 ff8b 	bl	8006df4 <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 8010ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ee0:	2057      	movs	r0, #87	; 0x57
 8010ee2:	f7f6 fad1 	bl	8007488 <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 8010ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					b = rns->enq.enq_buffer[1].data;
 8010eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					c = rns->enq.enq_buffer[2].data;
 8010ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010efe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010f02:	f7ef fb21 	bl	8000548 <__aeabi_f2d>
 8010f06:	4682      	mov	sl, r0
 8010f08:	468b      	mov	fp, r1
 8010f0a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8010f0e:	f7ef fb1b 	bl	8000548 <__aeabi_f2d>
 8010f12:	4604      	mov	r4, r0
 8010f14:	460d      	mov	r5, r1
							target_speed, a, -b, c);
 8010f16:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8010f1a:	eef1 7a67 	vneg.f32	s15, s15
 8010f1e:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7ef fb10 	bl	8000548 <__aeabi_f2d>
 8010f28:	4680      	mov	r8, r0
 8010f2a:	4689      	mov	r9, r1
 8010f2c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8010f30:	f7ef fb0a 	bl	8000548 <__aeabi_f2d>
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f3c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010f40:	e9cd 4500 	strd	r4, r5, [sp]
 8010f44:	4652      	mov	r2, sl
 8010f46:	465b      	mov	r3, fp
 8010f48:	4930      	ldr	r1, [pc, #192]	; (801100c <tunePIDex+0x6b4>)
 8010f4a:	4831      	ldr	r0, [pc, #196]	; (8011010 <tunePIDex+0x6b8>)
 8010f4c:	f00e fed8 	bl	801fd00 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 8010f50:	f002 fe92 	bl	8013c78 <HAL_GetTick>
 8010f54:	4602      	mov	r2, r0
 8010f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	2b13      	cmp	r3, #19
 8010f5e:	d907      	bls.n	8010f70 <tunePIDex+0x618>
						tick = HAL_GetTick();
 8010f60:	f002 fe8a 	bl	8013c78 <HAL_GetTick>
 8010f64:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
						UARTPrintString(huartx, data);
 8010f68:	4929      	ldr	r1, [pc, #164]	; (8011010 <tunePIDex+0x6b8>)
 8010f6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010f6c:	f7f2 fd80 	bl	8003a70 <UARTPrintString>
			while(ps4->button == RIGHT){
 8010f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f74:	2b20      	cmp	r3, #32
 8010f76:	f43f af23 	beq.w	8010dc0 <tunePIDex+0x468>
					}
				}
			}
			RNSStop(rns);
 8010f7a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f7c:	f7f5 feea 	bl	8006d54 <RNSStop>
			memset(data, 0, 100);
 8010f80:	2264      	movs	r2, #100	; 0x64
 8010f82:	2100      	movs	r1, #0
 8010f84:	4822      	ldr	r0, [pc, #136]	; (8011010 <tunePIDex+0x6b8>)
 8010f86:	f00d fed9 	bl	801ed3c <memset>
		}

		if(ps4->button == CROSS){	//stop NAVI + plot graph
 8010f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f92:	d112      	bne.n	8010fba <tunePIDex+0x662>
			while(ps4->button == CROSS);
 8010f94:	bf00      	nop
 8010f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f9e:	d0fa      	beq.n	8010f96 <tunePIDex+0x63e>
			RNSStop(rns);
 8010fa0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010fa2:	f7f5 fed7 	bl	8006d54 <RNSStop>
			uint8_t terminatePlot = 0x15;
 8010fa6:	2315      	movs	r3, #21
 8010fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			HAL_UART_Transmit(huartx, &terminatePlot, 1, 1);
 8010fac:	f107 0157 	add.w	r1, r7, #87	; 0x57
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010fb6:	f009 fa66 	bl	801a486 <HAL_UART_Transmit>
		}

		if(ps4->button == TRIANGLE){	//TRI omni wheel
 8010fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fc2:	d109      	bne.n	8010fd8 <tunePIDex+0x680>
			while(ps4->button == TRIANGLE);
 8010fc4:	bf00      	nop
 8010fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fce:	d0fa      	beq.n	8010fc6 <tunePIDex+0x66e>
			base = tri_omni;
 8010fd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		}
		if(ps4->button == SQUARE){	//FOUR omni wheel
 8010fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fe0:	d109      	bne.n	8010ff6 <tunePIDex+0x69e>
			while(ps4->button == SQUARE);
 8010fe2:	bf00      	nop
 8010fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010fec:	d0fa      	beq.n	8010fe4 <tunePIDex+0x68c>
			base = fwd_omni;
 8010fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		}
		if(ps4->button == SHARE){	//update PID
 8010ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffa:	2b01      	cmp	r3, #1
 8010ffc:	f040 82be 	bne.w	801157c <tunePIDex+0xc24>
			while(ps4->button == SHARE);
 8011000:	bf00      	nop
 8011002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011006:	2b01      	cmp	r3, #1
 8011008:	d0fb      	beq.n	8011002 <tunePIDex+0x6aa>
			while(ps4->button != SHARE){
 801100a:	e2b2      	b.n	8011572 <tunePIDex+0xc1a>
 801100c:	08024ad4 	.word	0x08024ad4
 8011010:	20006a8c 	.word	0x20006a8c
 8011014:	08024ab4 	.word	0x08024ab4
 8011018:	00000000 	.word	0x00000000
				if(ps4->button == SQUARE){	//print
 801101c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801101e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011024:	f040 8091 	bne.w	801114a <tunePIDex+0x7f2>
					while(ps4->button == SQUARE);
 8011028:	bf00      	nop
 801102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011032:	d0fa      	beq.n	801102a <tunePIDex+0x6d2>
					sprintf(data, "%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n"
 8011034:	4bba      	ldr	r3, [pc, #744]	; (8011320 <tunePIDex+0x9c8>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4618      	mov	r0, r3
 801103a:	f7ef fa85 	bl	8000548 <__aeabi_f2d>
 801103e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8011042:	4bb8      	ldr	r3, [pc, #736]	; (8011324 <tunePIDex+0x9cc>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4618      	mov	r0, r3
 8011048:	f7ef fa7e 	bl	8000548 <__aeabi_f2d>
 801104c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8011050:	4bb5      	ldr	r3, [pc, #724]	; (8011328 <tunePIDex+0x9d0>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	4618      	mov	r0, r3
 8011056:	f7ef fa77 	bl	8000548 <__aeabi_f2d>
 801105a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 801105e:	4bb3      	ldr	r3, [pc, #716]	; (801132c <tunePIDex+0x9d4>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	4618      	mov	r0, r3
 8011064:	f7ef fa70 	bl	8000548 <__aeabi_f2d>
 8011068:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801106c:	4bb0      	ldr	r3, [pc, #704]	; (8011330 <tunePIDex+0x9d8>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4618      	mov	r0, r3
 8011072:	f7ef fa69 	bl	8000548 <__aeabi_f2d>
 8011076:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801107a:	4bae      	ldr	r3, [pc, #696]	; (8011334 <tunePIDex+0x9dc>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4618      	mov	r0, r3
 8011080:	f7ef fa62 	bl	8000548 <__aeabi_f2d>
 8011084:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8011088:	4bab      	ldr	r3, [pc, #684]	; (8011338 <tunePIDex+0x9e0>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4618      	mov	r0, r3
 801108e:	f7ef fa5b 	bl	8000548 <__aeabi_f2d>
 8011092:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8011096:	4ba9      	ldr	r3, [pc, #676]	; (801133c <tunePIDex+0x9e4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	4618      	mov	r0, r3
 801109c:	f7ef fa54 	bl	8000548 <__aeabi_f2d>
 80110a0:	e9c7 0100 	strd	r0, r1, [r7]
 80110a4:	4ba6      	ldr	r3, [pc, #664]	; (8011340 <tunePIDex+0x9e8>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ef fa4d 	bl	8000548 <__aeabi_f2d>
 80110ae:	4682      	mov	sl, r0
 80110b0:	468b      	mov	fp, r1
 80110b2:	4ba4      	ldr	r3, [pc, #656]	; (8011344 <tunePIDex+0x9ec>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7ef fa46 	bl	8000548 <__aeabi_f2d>
 80110bc:	4680      	mov	r8, r0
 80110be:	4689      	mov	r9, r1
 80110c0:	4ba1      	ldr	r3, [pc, #644]	; (8011348 <tunePIDex+0x9f0>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7ef fa3f 	bl	8000548 <__aeabi_f2d>
 80110ca:	4604      	mov	r4, r0
 80110cc:	460d      	mov	r5, r1
 80110ce:	4b9f      	ldr	r3, [pc, #636]	; (801134c <tunePIDex+0x9f4>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7ef fa38 	bl	8000548 <__aeabi_f2d>
 80110d8:	4602      	mov	r2, r0
 80110da:	460b      	mov	r3, r1
 80110dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80110e0:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80110e4:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80110e8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80110ec:	ed97 7b00 	vldr	d7, [r7]
 80110f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80110f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80110f8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80110fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8011100:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011104:	ed97 7b06 	vldr	d7, [r7, #24]
 8011108:	ed8d 7b06 	vstr	d7, [sp, #24]
 801110c:	ed97 7b08 	vldr	d7, [r7, #32]
 8011110:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011114:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8011118:	ed8d 7b02 	vstr	d7, [sp, #8]
 801111c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8011120:	ed8d 7b00 	vstr	d7, [sp]
 8011124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8011128:	4989      	ldr	r1, [pc, #548]	; (8011350 <tunePIDex+0x9f8>)
 801112a:	488a      	ldr	r0, [pc, #552]	; (8011354 <tunePIDex+0x9fc>)
 801112c:	f00e fde8 	bl	801fd00 <siprintf>
							, AP, AI, AD, BP, BI, BD, CP, CI, CD, DP, DI, DD);
					HAL_Delay(50);
 8011130:	2032      	movs	r0, #50	; 0x32
 8011132:	f002 fdad 	bl	8013c90 <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 8011136:	4887      	ldr	r0, [pc, #540]	; (8011354 <tunePIDex+0x9fc>)
 8011138:	f7ef f84a 	bl	80001d0 <strlen>
 801113c:	4603      	mov	r3, r0
 801113e:	b29a      	uxth	r2, r3
 8011140:	2332      	movs	r3, #50	; 0x32
 8011142:	4984      	ldr	r1, [pc, #528]	; (8011354 <tunePIDex+0x9fc>)
 8011144:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011146:	f009 f99e 	bl	801a486 <HAL_UART_Transmit>
				}
				if(ps4->button == UP){
 801114a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801114c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114e:	2b10      	cmp	r3, #16
 8011150:	d11c      	bne.n	801118c <tunePIDex+0x834>
					while(ps4->button == UP);
 8011152:	bf00      	nop
 8011154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011158:	2b10      	cmp	r3, #16
 801115a:	d0fb      	beq.n	8011154 <tunePIDex+0x7fc>
					arr_y ++;
 801115c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011160:	3301      	adds	r3, #1
 8011162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					if(arr_y > 3)	arr_y = 3;
 8011166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801116a:	2b03      	cmp	r3, #3
 801116c:	dd02      	ble.n	8011174 <tunePIDex+0x81c>
 801116e:	2303      	movs	r3, #3
 8011170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					sprintf(data, "arr y = %d\n", arr_y + 1);
 8011174:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011178:	3301      	adds	r3, #1
 801117a:	461a      	mov	r2, r3
 801117c:	4976      	ldr	r1, [pc, #472]	; (8011358 <tunePIDex+0xa00>)
 801117e:	4875      	ldr	r0, [pc, #468]	; (8011354 <tunePIDex+0x9fc>)
 8011180:	f00e fdbe 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 8011184:	4973      	ldr	r1, [pc, #460]	; (8011354 <tunePIDex+0x9fc>)
 8011186:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011188:	f7f2 fc72 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == DOWN){
 801118c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801118e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011190:	2b40      	cmp	r3, #64	; 0x40
 8011192:	d11c      	bne.n	80111ce <tunePIDex+0x876>
					while(ps4->button == DOWN);
 8011194:	bf00      	nop
 8011196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801119a:	2b40      	cmp	r3, #64	; 0x40
 801119c:	d0fb      	beq.n	8011196 <tunePIDex+0x83e>
					arr_y --;
 801119e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111a2:	3b01      	subs	r3, #1
 80111a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					if(arr_y < 0)	arr_y = 0;
 80111a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	da02      	bge.n	80111b6 <tunePIDex+0x85e>
 80111b0:	2300      	movs	r3, #0
 80111b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					sprintf(data, "arr y = %d\n", arr_y + 1);
 80111b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111ba:	3301      	adds	r3, #1
 80111bc:	461a      	mov	r2, r3
 80111be:	4966      	ldr	r1, [pc, #408]	; (8011358 <tunePIDex+0xa00>)
 80111c0:	4864      	ldr	r0, [pc, #400]	; (8011354 <tunePIDex+0x9fc>)
 80111c2:	f00e fd9d 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 80111c6:	4963      	ldr	r1, [pc, #396]	; (8011354 <tunePIDex+0x9fc>)
 80111c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80111ca:	f7f2 fc51 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == RIGHT){
 80111ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d2:	2b20      	cmp	r3, #32
 80111d4:	d11c      	bne.n	8011210 <tunePIDex+0x8b8>
					while(ps4->button == RIGHT);
 80111d6:	bf00      	nop
 80111d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111dc:	2b20      	cmp	r3, #32
 80111de:	d0fb      	beq.n	80111d8 <tunePIDex+0x880>
					arr_x ++;
 80111e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111e4:	3301      	adds	r3, #1
 80111e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					if(arr_x > 2)	arr_x = 2;
 80111ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	dd02      	ble.n	80111f8 <tunePIDex+0x8a0>
 80111f2:	2302      	movs	r3, #2
 80111f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					sprintf(data, "arr x = %d\n", arr_x + 1);
 80111f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111fc:	3301      	adds	r3, #1
 80111fe:	461a      	mov	r2, r3
 8011200:	4956      	ldr	r1, [pc, #344]	; (801135c <tunePIDex+0xa04>)
 8011202:	4854      	ldr	r0, [pc, #336]	; (8011354 <tunePIDex+0x9fc>)
 8011204:	f00e fd7c 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 8011208:	4952      	ldr	r1, [pc, #328]	; (8011354 <tunePIDex+0x9fc>)
 801120a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801120c:	f7f2 fc30 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == LEFT){
 8011210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011214:	2b80      	cmp	r3, #128	; 0x80
 8011216:	d11c      	bne.n	8011252 <tunePIDex+0x8fa>
					while(ps4->button == LEFT);
 8011218:	bf00      	nop
 801121a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801121c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801121e:	2b80      	cmp	r3, #128	; 0x80
 8011220:	d0fb      	beq.n	801121a <tunePIDex+0x8c2>
					arr_x --;
 8011222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011226:	3b01      	subs	r3, #1
 8011228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					if(arr_x < 0)	arr_x = 0;
 801122c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011230:	2b00      	cmp	r3, #0
 8011232:	da02      	bge.n	801123a <tunePIDex+0x8e2>
 8011234:	2300      	movs	r3, #0
 8011236:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					sprintf(data, "arr x = %d\n", arr_x + 1);
 801123a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801123e:	3301      	adds	r3, #1
 8011240:	461a      	mov	r2, r3
 8011242:	4946      	ldr	r1, [pc, #280]	; (801135c <tunePIDex+0xa04>)
 8011244:	4843      	ldr	r0, [pc, #268]	; (8011354 <tunePIDex+0x9fc>)
 8011246:	f00e fd5b 	bl	801fd00 <siprintf>
					UARTPrintString(huartx, data);
 801124a:	4942      	ldr	r1, [pc, #264]	; (8011354 <tunePIDex+0x9fc>)
 801124c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801124e:	f7f2 fc0f 	bl	8003a70 <UARTPrintString>
				}
				if(ps4->button == L1){
 8011252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801125a:	d10d      	bne.n	8011278 <tunePIDex+0x920>
					while(ps4->button == L1);
 801125c:	bf00      	nop
 801125e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011266:	d0fa      	beq.n	801125e <tunePIDex+0x906>
					buf --;
 8011268:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 801126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011274:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				}
				if(ps4->button == R1){
 8011278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801127a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801127c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011280:	d10d      	bne.n	801129e <tunePIDex+0x946>
					while(ps4->button == R1);
 8011282:	bf00      	nop
 8011284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801128c:	d0fa      	beq.n	8011284 <tunePIDex+0x92c>
					buf ++;
 801128e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8011292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801129a:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
				}
				if(ps4->button == CIRCLE){
 801129e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112a6:	f040 813c 	bne.w	8011522 <tunePIDex+0xbca>
					while(ps4->button == CIRCLE);
 80112aa:	bf00      	nop
 80112ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112b4:	d0fa      	beq.n	80112ac <tunePIDex+0x954>
					if(arr_x == 0)
 80112b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d15d      	bne.n	801137a <tunePIDex+0xa22>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.1;
 80112be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80112c2:	4613      	mov	r3, r2
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	4413      	add	r3, r2
 80112c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80112cc:	4413      	add	r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80112d4:	4413      	add	r3, r2
 80112d6:	3b70      	subs	r3, #112	; 0x70
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ef f934 	bl	8000548 <__aeabi_f2d>
 80112e0:	4604      	mov	r4, r0
 80112e2:	460d      	mov	r5, r1
 80112e4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80112e8:	f7ef f92e 	bl	8000548 <__aeabi_f2d>
 80112ec:	a30a      	add	r3, pc, #40	; (adr r3, 8011318 <tunePIDex+0x9c0>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	f7ef f981 	bl	80005f8 <__aeabi_dmul>
 80112f6:	4602      	mov	r2, r0
 80112f8:	460b      	mov	r3, r1
 80112fa:	4620      	mov	r0, r4
 80112fc:	4629      	mov	r1, r5
 80112fe:	f7ee ffc5 	bl	800028c <__adddf3>
 8011302:	4602      	mov	r2, r0
 8011304:	460b      	mov	r3, r1
 8011306:	4610      	mov	r0, r2
 8011308:	4619      	mov	r1, r3
 801130a:	f7ef fc6d 	bl	8000be8 <__aeabi_d2f>
 801130e:	4601      	mov	r1, r0
 8011310:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011314:	e024      	b.n	8011360 <tunePIDex+0xa08>
 8011316:	bf00      	nop
 8011318:	9999999a 	.word	0x9999999a
 801131c:	3fb99999 	.word	0x3fb99999
 8011320:	2000a6f4 	.word	0x2000a6f4
 8011324:	200078e8 	.word	0x200078e8
 8011328:	2000a6ec 	.word	0x2000a6ec
 801132c:	20007bac 	.word	0x20007bac
 8011330:	20009730 	.word	0x20009730
 8011334:	200078dc 	.word	0x200078dc
 8011338:	20009a08 	.word	0x20009a08
 801133c:	20009b7c 	.word	0x20009b7c
 8011340:	200071a4 	.word	0x200071a4
 8011344:	2000a278 	.word	0x2000a278
 8011348:	200076b0 	.word	0x200076b0
 801134c:	20009df4 	.word	0x20009df4
 8011350:	08024af4 	.word	0x08024af4
 8011354:	20006a8c 	.word	0x20006a8c
 8011358:	08024b3c 	.word	0x08024b3c
 801135c:	08024b48 	.word	0x08024b48
 8011360:	4613      	mov	r3, r2
 8011362:	005b      	lsls	r3, r3, #1
 8011364:	4413      	add	r3, r2
 8011366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801136a:	4413      	add	r3, r2
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011372:	4413      	add	r3, r2
 8011374:	3b70      	subs	r3, #112	; 0x70
 8011376:	6019      	str	r1, [r3, #0]
 8011378:	e076      	b.n	8011468 <tunePIDex+0xb10>
					else if(arr_x == 1)
 801137a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801137e:	2b01      	cmp	r3, #1
 8011380:	d137      	bne.n	80113f2 <tunePIDex+0xa9a>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.2;
 8011382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011386:	4613      	mov	r3, r2
 8011388:	005b      	lsls	r3, r3, #1
 801138a:	4413      	add	r3, r2
 801138c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011390:	4413      	add	r3, r2
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011398:	4413      	add	r3, r2
 801139a:	3b70      	subs	r3, #112	; 0x70
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4618      	mov	r0, r3
 80113a0:	f7ef f8d2 	bl	8000548 <__aeabi_f2d>
 80113a4:	4604      	mov	r4, r0
 80113a6:	460d      	mov	r5, r1
 80113a8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80113ac:	f7ef f8cc 	bl	8000548 <__aeabi_f2d>
 80113b0:	a388      	add	r3, pc, #544	; (adr r3, 80115d4 <tunePIDex+0xc7c>)
 80113b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b6:	f7ef f91f 	bl	80005f8 <__aeabi_dmul>
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4620      	mov	r0, r4
 80113c0:	4629      	mov	r1, r5
 80113c2:	f7ee ff63 	bl	800028c <__adddf3>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4610      	mov	r0, r2
 80113cc:	4619      	mov	r1, r3
 80113ce:	f7ef fc0b 	bl	8000be8 <__aeabi_d2f>
 80113d2:	4601      	mov	r1, r0
 80113d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80113d8:	4613      	mov	r3, r2
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	4413      	add	r3, r2
 80113de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80113e2:	4413      	add	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80113ea:	4413      	add	r3, r2
 80113ec:	3b70      	subs	r3, #112	; 0x70
 80113ee:	6019      	str	r1, [r3, #0]
 80113f0:	e03a      	b.n	8011468 <tunePIDex+0xb10>
					else if(arr_x == 2)
 80113f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d136      	bne.n	8011468 <tunePIDex+0xb10>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.005;
 80113fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80113fe:	4613      	mov	r3, r2
 8011400:	005b      	lsls	r3, r3, #1
 8011402:	4413      	add	r3, r2
 8011404:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011408:	4413      	add	r3, r2
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011410:	4413      	add	r3, r2
 8011412:	3b70      	subs	r3, #112	; 0x70
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4618      	mov	r0, r3
 8011418:	f7ef f896 	bl	8000548 <__aeabi_f2d>
 801141c:	4604      	mov	r4, r0
 801141e:	460d      	mov	r5, r1
 8011420:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8011424:	f7ef f890 	bl	8000548 <__aeabi_f2d>
 8011428:	a36c      	add	r3, pc, #432	; (adr r3, 80115dc <tunePIDex+0xc84>)
 801142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142e:	f7ef f8e3 	bl	80005f8 <__aeabi_dmul>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4620      	mov	r0, r4
 8011438:	4629      	mov	r1, r5
 801143a:	f7ee ff27 	bl	800028c <__adddf3>
 801143e:	4602      	mov	r2, r0
 8011440:	460b      	mov	r3, r1
 8011442:	4610      	mov	r0, r2
 8011444:	4619      	mov	r1, r3
 8011446:	f7ef fbcf 	bl	8000be8 <__aeabi_d2f>
 801144a:	4601      	mov	r1, r0
 801144c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011450:	4613      	mov	r3, r2
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	4413      	add	r3, r2
 8011456:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8011462:	4413      	add	r3, r2
 8011464:	3b70      	subs	r3, #112	; 0x70
 8011466:	6019      	str	r1, [r3, #0]
					sprintf(data, "pid[%d][%d] = %.3f, buf = %.0f\n", arr_y + 1, arr_x + 1, PID[arr_y][arr_x], buf);
 8011468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801146c:	1c5e      	adds	r6, r3, #1
 801146e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011472:	f103 0801 	add.w	r8, r3, #1
 8011476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801147a:	4613      	mov	r3, r2
 801147c:	005b      	lsls	r3, r3, #1
 801147e:	4413      	add	r3, r2
 8011480:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011484:	4413      	add	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801148c:	4413      	add	r3, r2
 801148e:	3b70      	subs	r3, #112	; 0x70
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4618      	mov	r0, r3
 8011494:	f7ef f858 	bl	8000548 <__aeabi_f2d>
 8011498:	4604      	mov	r4, r0
 801149a:	460d      	mov	r5, r1
 801149c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80114a0:	f7ef f852 	bl	8000548 <__aeabi_f2d>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114ac:	e9cd 4500 	strd	r4, r5, [sp]
 80114b0:	4643      	mov	r3, r8
 80114b2:	4632      	mov	r2, r6
 80114b4:	4938      	ldr	r1, [pc, #224]	; (8011598 <tunePIDex+0xc40>)
 80114b6:	4839      	ldr	r0, [pc, #228]	; (801159c <tunePIDex+0xc44>)
 80114b8:	f00e fc22 	bl	801fd00 <siprintf>
					HAL_Delay(50);
 80114bc:	2032      	movs	r0, #50	; 0x32
 80114be:	f002 fbe7 	bl	8013c90 <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 80114c2:	4836      	ldr	r0, [pc, #216]	; (801159c <tunePIDex+0xc44>)
 80114c4:	f7ee fe84 	bl	80001d0 <strlen>
 80114c8:	4603      	mov	r3, r0
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	2332      	movs	r3, #50	; 0x32
 80114ce:	4933      	ldr	r1, [pc, #204]	; (801159c <tunePIDex+0xc44>)
 80114d0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80114d2:	f008 ffd8 	bl	801a486 <HAL_UART_Transmit>
					AP = PID[0][0]; AI = PID[0][1]; AD = PID[0][3];
 80114d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114d8:	4a31      	ldr	r2, [pc, #196]	; (80115a0 <tunePIDex+0xc48>)
 80114da:	6013      	str	r3, [r2, #0]
 80114dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114de:	4a31      	ldr	r2, [pc, #196]	; (80115a4 <tunePIDex+0xc4c>)
 80114e0:	6013      	str	r3, [r2, #0]
 80114e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114e4:	4a30      	ldr	r2, [pc, #192]	; (80115a8 <tunePIDex+0xc50>)
 80114e6:	6013      	str	r3, [r2, #0]
					BP = PID[1][0]; BI = PID[1][1]; BD = PID[1][3];
 80114e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114ea:	4a30      	ldr	r2, [pc, #192]	; (80115ac <tunePIDex+0xc54>)
 80114ec:	6013      	str	r3, [r2, #0]
 80114ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114f0:	4a2f      	ldr	r2, [pc, #188]	; (80115b0 <tunePIDex+0xc58>)
 80114f2:	6013      	str	r3, [r2, #0]
 80114f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114f6:	4a2f      	ldr	r2, [pc, #188]	; (80115b4 <tunePIDex+0xc5c>)
 80114f8:	6013      	str	r3, [r2, #0]
					CP = PID[2][0]; CI = PID[2][1]; CD = PID[2][3];
 80114fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114fc:	4a2e      	ldr	r2, [pc, #184]	; (80115b8 <tunePIDex+0xc60>)
 80114fe:	6013      	str	r3, [r2, #0]
 8011500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011502:	4a2e      	ldr	r2, [pc, #184]	; (80115bc <tunePIDex+0xc64>)
 8011504:	6013      	str	r3, [r2, #0]
 8011506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011508:	4a2d      	ldr	r2, [pc, #180]	; (80115c0 <tunePIDex+0xc68>)
 801150a:	6013      	str	r3, [r2, #0]
					DP = PID[3][0]; DI = PID[3][1]; DD = PID[3][3];
 801150c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801150e:	4a2d      	ldr	r2, [pc, #180]	; (80115c4 <tunePIDex+0xc6c>)
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011516:	4a2c      	ldr	r2, [pc, #176]	; (80115c8 <tunePIDex+0xc70>)
 8011518:	6013      	str	r3, [r2, #0]
 801151a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801151e:	4a2b      	ldr	r2, [pc, #172]	; (80115cc <tunePIDex+0xc74>)
 8011520:	6013      	str	r3, [r2, #0]
				}
				if(ps4->button == TRIANGLE){
 8011522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801152a:	d122      	bne.n	8011572 <tunePIDex+0xc1a>
					while(ps4->button == TRIANGLE);
 801152c:	bf00      	nop
 801152e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011536:	d0fa      	beq.n	801152e <tunePIDex+0xbd6>
					RNSSet(rns, RNS_ROTATE_PID,  PID[0][0],  PID[0][1],  PID[0][2]);
 8011538:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801153a:	4618      	mov	r0, r3
 801153c:	f7ef f804 	bl	8000548 <__aeabi_f2d>
 8011540:	4680      	mov	r8, r0
 8011542:	4689      	mov	r9, r1
 8011544:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011546:	4618      	mov	r0, r3
 8011548:	f7ee fffe 	bl	8000548 <__aeabi_f2d>
 801154c:	4604      	mov	r4, r0
 801154e:	460d      	mov	r5, r1
 8011550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011552:	4618      	mov	r0, r3
 8011554:	f7ee fff8 	bl	8000548 <__aeabi_f2d>
 8011558:	4602      	mov	r2, r0
 801155a:	460b      	mov	r3, r1
 801155c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011560:	e9cd 4500 	strd	r4, r5, [sp]
 8011564:	4642      	mov	r2, r8
 8011566:	464b      	mov	r3, r9
 8011568:	2134      	movs	r1, #52	; 0x34
 801156a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801156c:	f7f5 fe20 	bl	80071b0 <RNSSet>
//					RNSSet(rns, RNS_F_RIGHT_VEL_PID,  PID[1][0],  PID[1][1],  PID[1][2]);
//					RNSSet(rns, RNS_B_LEFT_VEL_PID,  PID[2][0],  PID[2][1],  PID[2][2]);
//					RNSSet(rns, RNS_B_RIGHT_VEL_PID,  PID[3][0],  PID[3][1],  PID[3][2]);
					break;
 8011570:	e004      	b.n	801157c <tunePIDex+0xc24>
			while(ps4->button != SHARE){
 8011572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011576:	2b01      	cmp	r3, #1
 8011578:	f47f ad50 	bne.w	801101c <tunePIDex+0x6c4>
	while(tune.PID){
 801157c:	4b14      	ldr	r3, [pc, #80]	; (80115d0 <tunePIDex+0xc78>)
 801157e:	791b      	ldrb	r3, [r3, #4]
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	b2db      	uxtb	r3, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	f47f aa35 	bne.w	80109f6 <tunePIDex+0x9e>
				}
			}
		}
	}
}
 801158c:	bf00      	nop
 801158e:	bf00      	nop
 8011590:	37cc      	adds	r7, #204	; 0xcc
 8011592:	46bd      	mov	sp, r7
 8011594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011598:	08024b84 	.word	0x08024b84
 801159c:	20006a8c 	.word	0x20006a8c
 80115a0:	2000a6f4 	.word	0x2000a6f4
 80115a4:	200078e8 	.word	0x200078e8
 80115a8:	2000a6ec 	.word	0x2000a6ec
 80115ac:	20007bac 	.word	0x20007bac
 80115b0:	20009730 	.word	0x20009730
 80115b4:	200078dc 	.word	0x200078dc
 80115b8:	20009a08 	.word	0x20009a08
 80115bc:	20009b7c 	.word	0x20009b7c
 80115c0:	200071a4 	.word	0x200071a4
 80115c4:	2000a278 	.word	0x2000a278
 80115c8:	200076b0 	.word	0x200076b0
 80115cc:	20009df4 	.word	0x20009df4
 80115d0:	20007928 	.word	0x20007928
 80115d4:	9999999a 	.word	0x9999999a
 80115d8:	3fc99999 	.word	0x3fc99999
 80115dc:	47ae147b 	.word	0x47ae147b
 80115e0:	3f747ae1 	.word	0x3f747ae1
 80115e4:	00000000 	.word	0x00000000

080115e8 <tunePPlan>:

void tunePPlan(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns){
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08a      	sub	sp, #40	; 0x28
 80115ec:	af06      	add	r7, sp, #24
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
	static int pppath = 0, MODNflag = 0;
	while(tune.PP){
 80115f4:	e38b      	b.n	8011d0e <tunePPlan+0x726>
		if(ps4->button == R1){		//choose path
 80115f6:	68bb      	ldr	r3, [r7, #8]
 80115f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80115fe:	d112      	bne.n	8011626 <tunePPlan+0x3e>
			while(ps4->button == R1){}
 8011600:	bf00      	nop
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801160a:	d0fa      	beq.n	8011602 <tunePPlan+0x1a>
			pppath ++;
 801160c:	4ba0      	ldr	r3, [pc, #640]	; (8011890 <tunePPlan+0x2a8>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	3301      	adds	r3, #1
 8011612:	4a9f      	ldr	r2, [pc, #636]	; (8011890 <tunePPlan+0x2a8>)
 8011614:	6013      	str	r3, [r2, #0]
			if(pppath > 8)
 8011616:	4b9e      	ldr	r3, [pc, #632]	; (8011890 <tunePPlan+0x2a8>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b08      	cmp	r3, #8
 801161c:	dd1a      	ble.n	8011654 <tunePPlan+0x6c>
				pppath = 8;
 801161e:	4b9c      	ldr	r3, [pc, #624]	; (8011890 <tunePPlan+0x2a8>)
 8011620:	2208      	movs	r2, #8
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	e016      	b.n	8011654 <tunePPlan+0x6c>
		}else if(ps4->button == L1){
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801162e:	d111      	bne.n	8011654 <tunePPlan+0x6c>
			while(ps4->button == L1){}
 8011630:	bf00      	nop
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801163a:	d0fa      	beq.n	8011632 <tunePPlan+0x4a>
			pppath --;
 801163c:	4b94      	ldr	r3, [pc, #592]	; (8011890 <tunePPlan+0x2a8>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	3b01      	subs	r3, #1
 8011642:	4a93      	ldr	r2, [pc, #588]	; (8011890 <tunePPlan+0x2a8>)
 8011644:	6013      	str	r3, [r2, #0]
			if(pppath < 0)
 8011646:	4b92      	ldr	r3, [pc, #584]	; (8011890 <tunePPlan+0x2a8>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da02      	bge.n	8011654 <tunePPlan+0x6c>
				pppath = 0;
 801164e:	4b90      	ldr	r3, [pc, #576]	; (8011890 <tunePPlan+0x2a8>)
 8011650:	2200      	movs	r2, #0
 8011652:	601a      	str	r2, [r3, #0]
		}

		if(ps4->button == OPTION)
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801165c:	d107      	bne.n	801166e <tunePPlan+0x86>
		{
			ROS_Read_Flash();
 801165e:	f7f6 fb97 	bl	8007d90 <ROS_Read_Flash>
			while(ps4->button == OPTION);
 8011662:	bf00      	nop
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801166c:	d0fa      	beq.n	8011664 <tunePPlan+0x7c>
//			while(ps4->button == SQUARE);
//			if(test_point_num)
//				RNSPPstart_PS(test_points, test_point_num, rns);
//		}

		if(ros.ros_path_start){
 801166e:	4b89      	ldr	r3, [pc, #548]	; (8011894 <tunePPlan+0x2ac>)
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	f003 0302 	and.w	r3, r3, #2
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d030      	beq.n	80116de <tunePPlan+0xf6>
			MODNflag = 0;
 801167c:	4b86      	ldr	r3, [pc, #536]	; (8011898 <tunePPlan+0x2b0>)
 801167e:	2200      	movs	r2, #0
 8011680:	601a      	str	r2, [r3, #0]
			ros.ros_path_start = 0;
 8011682:	4a84      	ldr	r2, [pc, #528]	; (8011894 <tunePPlan+0x2ac>)
 8011684:	7813      	ldrb	r3, [r2, #0]
 8011686:	f36f 0341 	bfc	r3, #1, #1
 801168a:	7013      	strb	r3, [r2, #0]
			if(pppath == 1 || pppath == 3){
 801168c:	4b80      	ldr	r3, [pc, #512]	; (8011890 <tunePPlan+0x2a8>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b01      	cmp	r3, #1
 8011692:	d003      	beq.n	801169c <tunePPlan+0xb4>
 8011694:	4b7e      	ldr	r3, [pc, #504]	; (8011890 <tunePPlan+0x2a8>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b03      	cmp	r3, #3
 801169a:	d107      	bne.n	80116ac <tunePPlan+0xc4>
				RNSSet(rns, RNS_RESET_POS);
 801169c:	2114      	movs	r1, #20
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f7f5 fd86 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 80116a4:	2117      	movs	r1, #23
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7f5 fd82 	bl	80071b0 <RNSSet>
			}
			RNSPPstart_PS(PP_Points[path_index - 1], point_num[path_index - 1], rns);
 80116ac:	4b7b      	ldr	r3, [pc, #492]	; (801189c <tunePPlan+0x2b4>)
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	4b7b      	ldr	r3, [pc, #492]	; (80118a0 <tunePPlan+0x2b8>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80116b8:	3b01      	subs	r3, #1
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	4413      	add	r3, r2
 80116be:	6818      	ldr	r0, [r3, #0]
 80116c0:	4b78      	ldr	r3, [pc, #480]	; (80118a4 <tunePPlan+0x2bc>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	4b76      	ldr	r3, [pc, #472]	; (80118a0 <tunePPlan+0x2b8>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80116cc:	3b01      	subs	r3, #1
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	4413      	add	r3, r2
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	4619      	mov	r1, r3
 80116d8:	f7f5 fc84 	bl	8006fe4 <RNSPPstart_PS>
 80116dc:	e029      	b.n	8011732 <tunePPlan+0x14a>
		}
		else if(ros.ros_stop){
 80116de:	4b6d      	ldr	r3, [pc, #436]	; (8011894 <tunePPlan+0x2ac>)
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	b2db      	uxtb	r3, r3
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d00b      	beq.n	8011704 <tunePPlan+0x11c>
			MODNflag = 1;
 80116ec:	4b6a      	ldr	r3, [pc, #424]	; (8011898 <tunePPlan+0x2b0>)
 80116ee:	2201      	movs	r2, #1
 80116f0:	601a      	str	r2, [r3, #0]
			ros.ros_stop = 0;
 80116f2:	4a68      	ldr	r2, [pc, #416]	; (8011894 <tunePPlan+0x2ac>)
 80116f4:	7813      	ldrb	r3, [r2, #0]
 80116f6:	f36f 0300 	bfc	r3, #0, #1
 80116fa:	7013      	strb	r3, [r2, #0]
			RNSStop(rns);
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f7f5 fb29 	bl	8006d54 <RNSStop>
 8011702:	e016      	b.n	8011732 <tunePPlan+0x14a>
		}
		else if(ros.ros_test_start){
 8011704:	4b63      	ldr	r3, [pc, #396]	; (8011894 <tunePPlan+0x2ac>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	f003 0304 	and.w	r3, r3, #4
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d00f      	beq.n	8011732 <tunePPlan+0x14a>
			MODNflag = 0;
 8011712:	4b61      	ldr	r3, [pc, #388]	; (8011898 <tunePPlan+0x2b0>)
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]
			ros.ros_test_start = 0;
 8011718:	4a5e      	ldr	r2, [pc, #376]	; (8011894 <tunePPlan+0x2ac>)
 801171a:	7813      	ldrb	r3, [r2, #0]
 801171c:	f36f 0382 	bfc	r3, #2, #1
 8011720:	7013      	strb	r3, [r2, #0]
			RNSPPstart_PS(test_points, test_point_num, rns);
 8011722:	4b61      	ldr	r3, [pc, #388]	; (80118a8 <tunePPlan+0x2c0>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4a61      	ldr	r2, [pc, #388]	; (80118ac <tunePPlan+0x2c4>)
 8011728:	6811      	ldr	r1, [r2, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	4618      	mov	r0, r3
 801172e:	f7f5 fc59 	bl	8006fe4 <RNSPPstart_PS>
		}

		if(ps4->button == CIRCLE){		//run path plan
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801173a:	f040 80fc 	bne.w	8011936 <tunePPlan+0x34e>
			MODNflag = 0;
 801173e:	4b56      	ldr	r3, [pc, #344]	; (8011898 <tunePPlan+0x2b0>)
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]
			while(ps4->button == CIRCLE);
 8011744:	bf00      	nop
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801174a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801174e:	d0fa      	beq.n	8011746 <tunePPlan+0x15e>
			switch (pppath){
 8011750:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <tunePPlan+0x2a8>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	2b04      	cmp	r3, #4
 8011756:	f200 80ea 	bhi.w	801192e <tunePPlan+0x346>
 801175a:	a201      	add	r2, pc, #4	; (adr r2, 8011760 <tunePPlan+0x178>)
 801175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011760:	08011775 	.word	0x08011775
 8011764:	0801177d 	.word	0x0801177d
 8011768:	080117d7 	.word	0x080117d7
 801176c:	08011821 	.word	0x08011821
 8011770:	080118e5 	.word	0x080118e5
			case 0:
				RNSStop(rns);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f7f5 faed 	bl	8006d54 <RNSStop>
				break;
 801177a:	e0dd      	b.n	8011938 <tunePPlan+0x350>
			case 1:
				RNSSet(rns, RNS_RESET_POS);
 801177c:	2114      	movs	r1, #20
 801177e:	6878      	ldr	r0, [r7, #4]
 8011780:	f7f5 fd16 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 8011784:	2117      	movs	r1, #23
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7f5 fd12 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 801178c:	f04f 0200 	mov.w	r2, #0
 8011790:	4b47      	ldr	r3, [pc, #284]	; (80118b0 <tunePPlan+0x2c8>)
 8011792:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011796:	a33a      	add	r3, pc, #232	; (adr r3, 8011880 <tunePPlan+0x298>)
 8011798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117a0:	f04f 0200 	mov.w	r2, #0
 80117a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117a8:	e9cd 2300 	strd	r2, r3, [sp]
 80117ac:	a336      	add	r3, pc, #216	; (adr r3, 8011888 <tunePPlan+0x2a0>)
 80117ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b2:	2145      	movs	r1, #69	; 0x45
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7f5 fcfb 	bl	80071b0 <RNSSet>
				registerPath(pathA, npA, point1, point2, point3);
 80117ba:	4b3e      	ldr	r3, [pc, #248]	; (80118b4 <tunePPlan+0x2cc>)
 80117bc:	9300      	str	r3, [sp, #0]
 80117be:	4b3e      	ldr	r3, [pc, #248]	; (80118b8 <tunePPlan+0x2d0>)
 80117c0:	4a3e      	ldr	r2, [pc, #248]	; (80118bc <tunePPlan+0x2d4>)
 80117c2:	2103      	movs	r1, #3
 80117c4:	483e      	ldr	r0, [pc, #248]	; (80118c0 <tunePPlan+0x2d8>)
 80117c6:	f7f7 fbab 	bl	8008f20 <registerPath>
				RNSPPstart(pathA, npA, rns);
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	2103      	movs	r1, #3
 80117ce:	483c      	ldr	r0, [pc, #240]	; (80118c0 <tunePPlan+0x2d8>)
 80117d0:	f7f5 fb55 	bl	8006e7e <RNSPPstart>
				break;
 80117d4:	e0b0      	b.n	8011938 <tunePPlan+0x350>
			case 2:
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 80117d6:	f04f 0200 	mov.w	r2, #0
 80117da:	4b35      	ldr	r3, [pc, #212]	; (80118b0 <tunePPlan+0x2c8>)
 80117dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80117e0:	a327      	add	r3, pc, #156	; (adr r3, 8011880 <tunePPlan+0x298>)
 80117e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80117ea:	f04f 0200 	mov.w	r2, #0
 80117ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117f2:	e9cd 2300 	strd	r2, r3, [sp]
 80117f6:	a324      	add	r3, pc, #144	; (adr r3, 8011888 <tunePPlan+0x2a0>)
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	2145      	movs	r1, #69	; 0x45
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7f5 fcd6 	bl	80071b0 <RNSSet>
				registerPath(pathB, npB, point5, point6, point7);
 8011804:	4b2f      	ldr	r3, [pc, #188]	; (80118c4 <tunePPlan+0x2dc>)
 8011806:	9300      	str	r3, [sp, #0]
 8011808:	4b2f      	ldr	r3, [pc, #188]	; (80118c8 <tunePPlan+0x2e0>)
 801180a:	4a30      	ldr	r2, [pc, #192]	; (80118cc <tunePPlan+0x2e4>)
 801180c:	2103      	movs	r1, #3
 801180e:	4830      	ldr	r0, [pc, #192]	; (80118d0 <tunePPlan+0x2e8>)
 8011810:	f7f7 fb86 	bl	8008f20 <registerPath>
				RNSPPstart(pathB, npB, rns);
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	2103      	movs	r1, #3
 8011818:	482d      	ldr	r0, [pc, #180]	; (80118d0 <tunePPlan+0x2e8>)
 801181a:	f7f5 fb30 	bl	8006e7e <RNSPPstart>
				break;
 801181e:	e08b      	b.n	8011938 <tunePPlan+0x350>
			case 3:
				RNSSet(rns, RNS_RESET_POS);
 8011820:	2114      	movs	r1, #20
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7f5 fcc4 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 8011828:	2117      	movs	r1, #23
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7f5 fcc0 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 8011830:	f04f 0200 	mov.w	r2, #0
 8011834:	4b1e      	ldr	r3, [pc, #120]	; (80118b0 <tunePPlan+0x2c8>)
 8011836:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801183a:	a311      	add	r3, pc, #68	; (adr r3, 8011880 <tunePPlan+0x298>)
 801183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011840:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011844:	f04f 0200 	mov.w	r2, #0
 8011848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801184c:	e9cd 2300 	strd	r2, r3, [sp]
 8011850:	a30d      	add	r3, pc, #52	; (adr r3, 8011888 <tunePPlan+0x2a0>)
 8011852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011856:	2145      	movs	r1, #69	; 0x45
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7f5 fca9 	bl	80071b0 <RNSSet>
				registerPath(pathC, npC, point9, point10, point11);
 801185e:	4b1d      	ldr	r3, [pc, #116]	; (80118d4 <tunePPlan+0x2ec>)
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	4b1d      	ldr	r3, [pc, #116]	; (80118d8 <tunePPlan+0x2f0>)
 8011864:	4a1d      	ldr	r2, [pc, #116]	; (80118dc <tunePPlan+0x2f4>)
 8011866:	2103      	movs	r1, #3
 8011868:	481d      	ldr	r0, [pc, #116]	; (80118e0 <tunePPlan+0x2f8>)
 801186a:	f7f7 fb59 	bl	8008f20 <registerPath>
				RNSPPstart(pathC, npC, rns);
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	2103      	movs	r1, #3
 8011872:	481b      	ldr	r0, [pc, #108]	; (80118e0 <tunePPlan+0x2f8>)
 8011874:	f7f5 fb03 	bl	8006e7e <RNSPPstart>
				break;
 8011878:	e05e      	b.n	8011938 <tunePPlan+0x350>
 801187a:	bf00      	nop
 801187c:	f3af 8000 	nop.w
 8011880:	9999999a 	.word	0x9999999a
 8011884:	3fa99999 	.word	0x3fa99999
 8011888:	9999999a 	.word	0x9999999a
 801188c:	3fb99999 	.word	0x3fb99999
 8011890:	20000960 	.word	0x20000960
 8011894:	2000a6f8 	.word	0x2000a6f8
 8011898:	20000964 	.word	0x20000964
 801189c:	2000972c 	.word	0x2000972c
 80118a0:	200076b4 	.word	0x200076b4
 80118a4:	20009754 	.word	0x20009754
 80118a8:	2000a270 	.word	0x2000a270
 80118ac:	2000974c 	.word	0x2000974c
 80118b0:	3ff00000 	.word	0x3ff00000
 80118b4:	2000a00c 	.word	0x2000a00c
 80118b8:	20007690 	.word	0x20007690
 80118bc:	20009dd8 	.word	0x20009dd8
 80118c0:	20009e28 	.word	0x20009e28
 80118c4:	200071a8 	.word	0x200071a8
 80118c8:	20007bb8 	.word	0x20007bb8
 80118cc:	2000aa08 	.word	0x2000aa08
 80118d0:	2000aab8 	.word	0x2000aab8
 80118d4:	20007544 	.word	0x20007544
 80118d8:	20009a7c 	.word	0x20009a7c
 80118dc:	20007254 	.word	0x20007254
 80118e0:	20009760 	.word	0x20009760
			case 4:
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 80118e4:	f04f 0200 	mov.w	r2, #0
 80118e8:	4bc3      	ldr	r3, [pc, #780]	; (8011bf8 <tunePPlan+0x610>)
 80118ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80118ee:	a3be      	add	r3, pc, #760	; (adr r3, 8011be8 <tunePPlan+0x600>)
 80118f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80118f8:	f04f 0200 	mov.w	r2, #0
 80118fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011900:	e9cd 2300 	strd	r2, r3, [sp]
 8011904:	a3ba      	add	r3, pc, #744	; (adr r3, 8011bf0 <tunePPlan+0x608>)
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	2145      	movs	r1, #69	; 0x45
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7f5 fc4f 	bl	80071b0 <RNSSet>
				registerPath(pathD, npD, point12, point13, point14);
 8011912:	4bba      	ldr	r3, [pc, #744]	; (8011bfc <tunePPlan+0x614>)
 8011914:	9300      	str	r3, [sp, #0]
 8011916:	4bba      	ldr	r3, [pc, #744]	; (8011c00 <tunePPlan+0x618>)
 8011918:	4aba      	ldr	r2, [pc, #744]	; (8011c04 <tunePPlan+0x61c>)
 801191a:	2103      	movs	r1, #3
 801191c:	48ba      	ldr	r0, [pc, #744]	; (8011c08 <tunePPlan+0x620>)
 801191e:	f7f7 faff 	bl	8008f20 <registerPath>
				RNSPPstart(pathD, npD, rns);
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	2103      	movs	r1, #3
 8011926:	48b8      	ldr	r0, [pc, #736]	; (8011c08 <tunePPlan+0x620>)
 8011928:	f7f5 faa9 	bl	8006e7e <RNSPPstart>
				break;
 801192c:	e004      	b.n	8011938 <tunePPlan+0x350>
			default:
				pppath = 0;
 801192e:	4bb7      	ldr	r3, [pc, #732]	; (8011c0c <tunePPlan+0x624>)
 8011930:	2200      	movs	r2, #0
 8011932:	601a      	str	r2, [r3, #0]
				break;
 8011934:	e000      	b.n	8011938 <tunePPlan+0x350>
			}
		}
 8011936:	bf00      	nop

		//LED indicator
		switch (pppath){
 8011938:	4bb4      	ldr	r3, [pc, #720]	; (8011c0c <tunePPlan+0x624>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b08      	cmp	r3, #8
 801193e:	f200 8096 	bhi.w	8011a6e <tunePPlan+0x486>
 8011942:	a201      	add	r2, pc, #4	; (adr r2, 8011948 <tunePPlan+0x360>)
 8011944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011948:	0801196d 	.word	0x0801196d
 801194c:	080119ab 	.word	0x080119ab
 8011950:	080119c1 	.word	0x080119c1
 8011954:	080119d7 	.word	0x080119d7
 8011958:	080119ed 	.word	0x080119ed
 801195c:	08011a03 	.word	0x08011a03
 8011960:	08011a19 	.word	0x08011a19
 8011964:	08011a2f 	.word	0x08011a2f
 8011968:	08011a45 	.word	0x08011a45
		case 0:
			GPIOD_OUT->bit8 = 0;
 801196c:	4aa8      	ldr	r2, [pc, #672]	; (8011c10 <tunePPlan+0x628>)
 801196e:	7853      	ldrb	r3, [r2, #1]
 8011970:	f36f 0300 	bfc	r3, #0, #1
 8011974:	7053      	strb	r3, [r2, #1]
			GPIOD_OUT->bit9 = 0;
 8011976:	4aa6      	ldr	r2, [pc, #664]	; (8011c10 <tunePPlan+0x628>)
 8011978:	7853      	ldrb	r3, [r2, #1]
 801197a:	f36f 0341 	bfc	r3, #1, #1
 801197e:	7053      	strb	r3, [r2, #1]
			GPIOA_OUT->bit7 = 0;
 8011980:	4aa4      	ldr	r2, [pc, #656]	; (8011c14 <tunePPlan+0x62c>)
 8011982:	7813      	ldrb	r3, [r2, #0]
 8011984:	f36f 13c7 	bfc	r3, #7, #1
 8011988:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit6 = 0;
 801198a:	4aa2      	ldr	r2, [pc, #648]	; (8011c14 <tunePPlan+0x62c>)
 801198c:	7813      	ldrb	r3, [r2, #0]
 801198e:	f36f 1386 	bfc	r3, #6, #1
 8011992:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit5 = 0;
 8011994:	4a9f      	ldr	r2, [pc, #636]	; (8011c14 <tunePPlan+0x62c>)
 8011996:	7813      	ldrb	r3, [r2, #0]
 8011998:	f36f 1345 	bfc	r3, #5, #1
 801199c:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 0;
 801199e:	4a9d      	ldr	r2, [pc, #628]	; (8011c14 <tunePPlan+0x62c>)
 80119a0:	7813      	ldrb	r3, [r2, #0]
 80119a2:	f36f 1304 	bfc	r3, #4, #1
 80119a6:	7013      	strb	r3, [r2, #0]
			break;
 80119a8:	e061      	b.n	8011a6e <tunePPlan+0x486>
		case 1:
			GPIOD_OUT->bit9 = 1;
 80119aa:	4a99      	ldr	r2, [pc, #612]	; (8011c10 <tunePPlan+0x628>)
 80119ac:	7853      	ldrb	r3, [r2, #1]
 80119ae:	f043 0302 	orr.w	r3, r3, #2
 80119b2:	7053      	strb	r3, [r2, #1]
			GPIOA_OUT->bit8 = 0;
 80119b4:	4a97      	ldr	r2, [pc, #604]	; (8011c14 <tunePPlan+0x62c>)
 80119b6:	7853      	ldrb	r3, [r2, #1]
 80119b8:	f36f 0300 	bfc	r3, #0, #1
 80119bc:	7053      	strb	r3, [r2, #1]
			break;
 80119be:	e056      	b.n	8011a6e <tunePPlan+0x486>
		case 2:
			GPIOA_OUT->bit8 = 1;
 80119c0:	4a94      	ldr	r2, [pc, #592]	; (8011c14 <tunePPlan+0x62c>)
 80119c2:	7853      	ldrb	r3, [r2, #1]
 80119c4:	f043 0301 	orr.w	r3, r3, #1
 80119c8:	7053      	strb	r3, [r2, #1]
			GPIOA_OUT->bit7 = 0;
 80119ca:	4a92      	ldr	r2, [pc, #584]	; (8011c14 <tunePPlan+0x62c>)
 80119cc:	7813      	ldrb	r3, [r2, #0]
 80119ce:	f36f 13c7 	bfc	r3, #7, #1
 80119d2:	7013      	strb	r3, [r2, #0]
			break;
 80119d4:	e04b      	b.n	8011a6e <tunePPlan+0x486>
		case 3:
			GPIOA_OUT->bit7 = 1;
 80119d6:	4a8f      	ldr	r2, [pc, #572]	; (8011c14 <tunePPlan+0x62c>)
 80119d8:	7813      	ldrb	r3, [r2, #0]
 80119da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119de:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit6 = 0;
 80119e0:	4a8c      	ldr	r2, [pc, #560]	; (8011c14 <tunePPlan+0x62c>)
 80119e2:	7813      	ldrb	r3, [r2, #0]
 80119e4:	f36f 1386 	bfc	r3, #6, #1
 80119e8:	7013      	strb	r3, [r2, #0]
			break;
 80119ea:	e040      	b.n	8011a6e <tunePPlan+0x486>
		case 4:
			GPIOA_OUT->bit6 = 1;
 80119ec:	4a89      	ldr	r2, [pc, #548]	; (8011c14 <tunePPlan+0x62c>)
 80119ee:	7813      	ldrb	r3, [r2, #0]
 80119f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119f4:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit5 = 0;
 80119f6:	4a87      	ldr	r2, [pc, #540]	; (8011c14 <tunePPlan+0x62c>)
 80119f8:	7813      	ldrb	r3, [r2, #0]
 80119fa:	f36f 1345 	bfc	r3, #5, #1
 80119fe:	7013      	strb	r3, [r2, #0]
			break;
 8011a00:	e035      	b.n	8011a6e <tunePPlan+0x486>
		case 5:
			GPIOA_OUT->bit5 = 1;
 8011a02:	4a84      	ldr	r2, [pc, #528]	; (8011c14 <tunePPlan+0x62c>)
 8011a04:	7813      	ldrb	r3, [r2, #0]
 8011a06:	f043 0320 	orr.w	r3, r3, #32
 8011a0a:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 0;
 8011a0c:	4a81      	ldr	r2, [pc, #516]	; (8011c14 <tunePPlan+0x62c>)
 8011a0e:	7813      	ldrb	r3, [r2, #0]
 8011a10:	f36f 1304 	bfc	r3, #4, #1
 8011a14:	7013      	strb	r3, [r2, #0]
			break;
 8011a16:	e02a      	b.n	8011a6e <tunePPlan+0x486>
		case 6:
			GPIOA_OUT->bit5 = 0;
 8011a18:	4a7e      	ldr	r2, [pc, #504]	; (8011c14 <tunePPlan+0x62c>)
 8011a1a:	7813      	ldrb	r3, [r2, #0]
 8011a1c:	f36f 1345 	bfc	r3, #5, #1
 8011a20:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 1;
 8011a22:	4a7c      	ldr	r2, [pc, #496]	; (8011c14 <tunePPlan+0x62c>)
 8011a24:	7813      	ldrb	r3, [r2, #0]
 8011a26:	f043 0310 	orr.w	r3, r3, #16
 8011a2a:	7013      	strb	r3, [r2, #0]
			break;
 8011a2c:	e01f      	b.n	8011a6e <tunePPlan+0x486>
		case 7:
			GPIOA_OUT->bit5 = 1;
 8011a2e:	4a79      	ldr	r2, [pc, #484]	; (8011c14 <tunePPlan+0x62c>)
 8011a30:	7813      	ldrb	r3, [r2, #0]
 8011a32:	f043 0320 	orr.w	r3, r3, #32
 8011a36:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 1;
 8011a38:	4a76      	ldr	r2, [pc, #472]	; (8011c14 <tunePPlan+0x62c>)
 8011a3a:	7813      	ldrb	r3, [r2, #0]
 8011a3c:	f043 0310 	orr.w	r3, r3, #16
 8011a40:	7013      	strb	r3, [r2, #0]
			break;
 8011a42:	e014      	b.n	8011a6e <tunePPlan+0x486>
		case 8:
			GPIOA_OUT->bit5 = 0;
 8011a44:	4a73      	ldr	r2, [pc, #460]	; (8011c14 <tunePPlan+0x62c>)
 8011a46:	7813      	ldrb	r3, [r2, #0]
 8011a48:	f36f 1345 	bfc	r3, #5, #1
 8011a4c:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 0;
 8011a4e:	4a71      	ldr	r2, [pc, #452]	; (8011c14 <tunePPlan+0x62c>)
 8011a50:	7813      	ldrb	r3, [r2, #0]
 8011a52:	f36f 1304 	bfc	r3, #4, #1
 8011a56:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit7 = 1;
 8011a58:	4a6e      	ldr	r2, [pc, #440]	; (8011c14 <tunePPlan+0x62c>)
 8011a5a:	7813      	ldrb	r3, [r2, #0]
 8011a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a60:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit6 = 1;
 8011a62:	4a6c      	ldr	r2, [pc, #432]	; (8011c14 <tunePPlan+0x62c>)
 8011a64:	7813      	ldrb	r3, [r2, #0]
 8011a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a6a:	7013      	strb	r3, [r2, #0]
			break;
 8011a6c:	bf00      	nop
		}

		if(ps4->button == TRIANGLE && rns->RNS_data.common_instruction != RNS_BUSY){	//stickfance
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a76:	f040 8124 	bne.w	8011cc2 <tunePPlan+0x6da>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	f000 811e 	beq.w	8011cc2 <tunePPlan+0x6da>
			while(ps4->button == TRIANGLE);
 8011a86:	bf00      	nop
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a90:	d0fa      	beq.n	8011a88 <tunePPlan+0x4a0>
			if(pppath == 1){
 8011a92:	4b5e      	ldr	r3, [pc, #376]	; (8011c0c <tunePPlan+0x624>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d171      	bne.n	8011b7e <tunePPlan+0x596>
				while (lim_sw1 == 1|| lim_sw2 == 1 || lim_sw3 == 1){
 8011a9a:	e05a      	b.n	8011b52 <tunePPlan+0x56a>
					if(lim_sw1 == 1 && lim_sw2 == 1)
 8011a9c:	2110      	movs	r1, #16
 8011a9e:	485e      	ldr	r0, [pc, #376]	; (8011c18 <tunePPlan+0x630>)
 8011aa0:	f004 fe62 	bl	8016768 <HAL_GPIO_ReadPin>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d112      	bne.n	8011ad0 <tunePPlan+0x4e8>
 8011aaa:	2180      	movs	r1, #128	; 0x80
 8011aac:	485a      	ldr	r0, [pc, #360]	; (8011c18 <tunePPlan+0x630>)
 8011aae:	f004 fe5b 	bl	8016768 <HAL_GPIO_ReadPin>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d10b      	bne.n	8011ad0 <tunePPlan+0x4e8>
						RNSVelocity(1.75, 1.75, 0.0, 0.0, rns);
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	eddf 1a58 	vldr	s3, [pc, #352]	; 8011c1c <tunePPlan+0x634>
 8011abe:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8011c1c <tunePPlan+0x634>
 8011ac2:	eef7 0a0c 	vmov.f32	s1, #124	; 0x3fe00000  1.750
 8011ac6:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 8011aca:	f7f5 f993 	bl	8006df4 <RNSVelocity>
 8011ace:	e037      	b.n	8011b40 <tunePPlan+0x558>
					else if(lim_sw2 == 1)
 8011ad0:	2180      	movs	r1, #128	; 0x80
 8011ad2:	4851      	ldr	r0, [pc, #324]	; (8011c18 <tunePPlan+0x630>)
 8011ad4:	f004 fe48 	bl	8016768 <HAL_GPIO_ReadPin>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d10b      	bne.n	8011af6 <tunePPlan+0x50e>
						RNSVelocity(1.50, 2.0, 0.0, 0.0, rns);
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8011c1c <tunePPlan+0x634>
 8011ae4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8011c1c <tunePPlan+0x634>
 8011ae8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8011aec:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8011af0:	f7f5 f980 	bl	8006df4 <RNSVelocity>
 8011af4:	e024      	b.n	8011b40 <tunePPlan+0x558>
					else if(lim_sw1 == 1)
 8011af6:	2110      	movs	r1, #16
 8011af8:	4847      	ldr	r0, [pc, #284]	; (8011c18 <tunePPlan+0x630>)
 8011afa:	f004 fe35 	bl	8016768 <HAL_GPIO_ReadPin>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b01      	cmp	r3, #1
 8011b02:	d10b      	bne.n	8011b1c <tunePPlan+0x534>
						RNSVelocity(2.0, 1.5, 0.0, 0.0, rns);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	eddf 1a45 	vldr	s3, [pc, #276]	; 8011c1c <tunePPlan+0x634>
 8011b0a:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8011c1c <tunePPlan+0x634>
 8011b0e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8011b12:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011b16:	f7f5 f96d 	bl	8006df4 <RNSVelocity>
 8011b1a:	e011      	b.n	8011b40 <tunePPlan+0x558>
					else if(lim_sw3 == 1)
 8011b1c:	2120      	movs	r1, #32
 8011b1e:	4840      	ldr	r0, [pc, #256]	; (8011c20 <tunePPlan+0x638>)
 8011b20:	f004 fe22 	bl	8016768 <HAL_GPIO_ReadPin>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d10a      	bne.n	8011b40 <tunePPlan+0x558>
						RNSVelocity(2.0, 1.5, -1.50, 0.0, rns);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8011c1c <tunePPlan+0x634>
 8011b30:	eebf 1a08 	vmov.f32	s2, #248	; 0xbfc00000 -1.5
 8011b34:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8011b38:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011b3c:	f7f5 f95a 	bl	8006df4 <RNSVelocity>
					if(ps4->button == CROSS){
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011b48:	d103      	bne.n	8011b52 <tunePPlan+0x56a>
						RNSStop(rns);
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7f5 f902 	bl	8006d54 <RNSStop>
						break;
 8011b50:	e0ae      	b.n	8011cb0 <tunePPlan+0x6c8>
				while (lim_sw1 == 1|| lim_sw2 == 1 || lim_sw3 == 1){
 8011b52:	2110      	movs	r1, #16
 8011b54:	4830      	ldr	r0, [pc, #192]	; (8011c18 <tunePPlan+0x630>)
 8011b56:	f004 fe07 	bl	8016768 <HAL_GPIO_ReadPin>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b01      	cmp	r3, #1
 8011b5e:	d09d      	beq.n	8011a9c <tunePPlan+0x4b4>
 8011b60:	2180      	movs	r1, #128	; 0x80
 8011b62:	482d      	ldr	r0, [pc, #180]	; (8011c18 <tunePPlan+0x630>)
 8011b64:	f004 fe00 	bl	8016768 <HAL_GPIO_ReadPin>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	d096      	beq.n	8011a9c <tunePPlan+0x4b4>
 8011b6e:	2120      	movs	r1, #32
 8011b70:	482b      	ldr	r0, [pc, #172]	; (8011c20 <tunePPlan+0x638>)
 8011b72:	f004 fdf9 	bl	8016768 <HAL_GPIO_ReadPin>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d08f      	beq.n	8011a9c <tunePPlan+0x4b4>
 8011b7c:	e098      	b.n	8011cb0 <tunePPlan+0x6c8>
					}
				}
			}
			else if(pppath == 3){
 8011b7e:	4b23      	ldr	r3, [pc, #140]	; (8011c0c <tunePPlan+0x624>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2b03      	cmp	r3, #3
 8011b84:	f040 8094 	bne.w	8011cb0 <tunePPlan+0x6c8>
				while (lim_sw2 == 1|| lim_sw3 == 1 || lim_sw4 == 1){
 8011b88:	e07a      	b.n	8011c80 <tunePPlan+0x698>
					if(lim_sw3 == 1 && lim_sw4 == 1)
 8011b8a:	2120      	movs	r1, #32
 8011b8c:	4824      	ldr	r0, [pc, #144]	; (8011c20 <tunePPlan+0x638>)
 8011b8e:	f004 fdeb 	bl	8016768 <HAL_GPIO_ReadPin>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d112      	bne.n	8011bbe <tunePPlan+0x5d6>
 8011b98:	2140      	movs	r1, #64	; 0x40
 8011b9a:	4821      	ldr	r0, [pc, #132]	; (8011c20 <tunePPlan+0x638>)
 8011b9c:	f004 fde4 	bl	8016768 <HAL_GPIO_ReadPin>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d10b      	bne.n	8011bbe <tunePPlan+0x5d6>
						RNSVelocity(0.0, -1.75, 1.75, 0.0, rns);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8011c1c <tunePPlan+0x634>
 8011bac:	eeb7 1a0c 	vmov.f32	s2, #124	; 0x3fe00000  1.750
 8011bb0:	eeff 0a0c 	vmov.f32	s1, #252	; 0xbfe00000 -1.750
 8011bb4:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8011c1c <tunePPlan+0x634>
 8011bb8:	f7f5 f91c 	bl	8006df4 <RNSVelocity>
 8011bbc:	e057      	b.n	8011c6e <tunePPlan+0x686>
					else if(lim_sw3 == 1)
 8011bbe:	2120      	movs	r1, #32
 8011bc0:	4817      	ldr	r0, [pc, #92]	; (8011c20 <tunePPlan+0x638>)
 8011bc2:	f004 fdd1 	bl	8016768 <HAL_GPIO_ReadPin>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d12b      	bne.n	8011c24 <tunePPlan+0x63c>
						RNSVelocity(0.0, -2.0, 1.50, 0.0, rns);
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	eddf 1a13 	vldr	s3, [pc, #76]	; 8011c1c <tunePPlan+0x634>
 8011bd2:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8011bd6:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 8011bda:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8011c1c <tunePPlan+0x634>
 8011bde:	f7f5 f909 	bl	8006df4 <RNSVelocity>
 8011be2:	e044      	b.n	8011c6e <tunePPlan+0x686>
 8011be4:	f3af 8000 	nop.w
 8011be8:	9999999a 	.word	0x9999999a
 8011bec:	3fa99999 	.word	0x3fa99999
 8011bf0:	9999999a 	.word	0x9999999a
 8011bf4:	3fb99999 	.word	0x3fb99999
 8011bf8:	3ff00000 	.word	0x3ff00000
 8011bfc:	2000a85c 	.word	0x2000a85c
 8011c00:	20009c68 	.word	0x20009c68
 8011c04:	20007930 	.word	0x20007930
 8011c08:	20007888 	.word	0x20007888
 8011c0c:	20000960 	.word	0x20000960
 8011c10:	40020c14 	.word	0x40020c14
 8011c14:	40020014 	.word	0x40020014
 8011c18:	40020c00 	.word	0x40020c00
 8011c1c:	00000000 	.word	0x00000000
 8011c20:	40020400 	.word	0x40020400
					else if(lim_sw4 == 1)
 8011c24:	2140      	movs	r1, #64	; 0x40
 8011c26:	4840      	ldr	r0, [pc, #256]	; (8011d28 <tunePPlan+0x740>)
 8011c28:	f004 fd9e 	bl	8016768 <HAL_GPIO_ReadPin>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d10b      	bne.n	8011c4a <tunePPlan+0x662>
						RNSVelocity(0.0, -1.5, 2.0, 0.0, rns);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8011d2c <tunePPlan+0x744>
 8011c38:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8011c3c:	eeff 0a08 	vmov.f32	s1, #248	; 0xbfc00000 -1.5
 8011c40:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8011d2c <tunePPlan+0x744>
 8011c44:	f7f5 f8d6 	bl	8006df4 <RNSVelocity>
 8011c48:	e011      	b.n	8011c6e <tunePPlan+0x686>
					else if(lim_sw2 == 1)
 8011c4a:	2180      	movs	r1, #128	; 0x80
 8011c4c:	4838      	ldr	r0, [pc, #224]	; (8011d30 <tunePPlan+0x748>)
 8011c4e:	f004 fd8b 	bl	8016768 <HAL_GPIO_ReadPin>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d10a      	bne.n	8011c6e <tunePPlan+0x686>
						RNSVelocity(1.75, -1.25, 1.75, 0.0, rns);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	eddf 1a34 	vldr	s3, [pc, #208]	; 8011d2c <tunePPlan+0x744>
 8011c5e:	eeb7 1a0c 	vmov.f32	s2, #124	; 0x3fe00000  1.750
 8011c62:	eeff 0a04 	vmov.f32	s1, #244	; 0xbfa00000 -1.250
 8011c66:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 8011c6a:	f7f5 f8c3 	bl	8006df4 <RNSVelocity>
					if(ps4->button == CROSS){
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c76:	d103      	bne.n	8011c80 <tunePPlan+0x698>
						RNSStop(rns);
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	f7f5 f86b 	bl	8006d54 <RNSStop>
						break;
 8011c7e:	e017      	b.n	8011cb0 <tunePPlan+0x6c8>
				while (lim_sw2 == 1|| lim_sw3 == 1 || lim_sw4 == 1){
 8011c80:	2180      	movs	r1, #128	; 0x80
 8011c82:	482b      	ldr	r0, [pc, #172]	; (8011d30 <tunePPlan+0x748>)
 8011c84:	f004 fd70 	bl	8016768 <HAL_GPIO_ReadPin>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	f43f af7d 	beq.w	8011b8a <tunePPlan+0x5a2>
 8011c90:	2120      	movs	r1, #32
 8011c92:	4825      	ldr	r0, [pc, #148]	; (8011d28 <tunePPlan+0x740>)
 8011c94:	f004 fd68 	bl	8016768 <HAL_GPIO_ReadPin>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	f43f af75 	beq.w	8011b8a <tunePPlan+0x5a2>
 8011ca0:	2140      	movs	r1, #64	; 0x40
 8011ca2:	4821      	ldr	r0, [pc, #132]	; (8011d28 <tunePPlan+0x740>)
 8011ca4:	f004 fd60 	bl	8016768 <HAL_GPIO_ReadPin>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	2b01      	cmp	r3, #1
 8011cac:	f43f af6d 	beq.w	8011b8a <tunePPlan+0x5a2>
					}
				}
			}
			RNSStop(rns);
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7f5 f84f 	bl	8006d54 <RNSStop>
			while(ps4->button == CROSS);
 8011cb6:	bf00      	nop
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cc0:	d0fa      	beq.n	8011cb8 <tunePPlan+0x6d0>
		}

		if(ps4->button == CROSS){	//stop + manual NAVI mode
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011cca:	d118      	bne.n	8011cfe <tunePPlan+0x716>
			MODNflag = 1;
 8011ccc:	4b19      	ldr	r3, [pc, #100]	; (8011d34 <tunePPlan+0x74c>)
 8011cce:	2201      	movs	r2, #1
 8011cd0:	601a      	str	r2, [r3, #0]
			RNSStop(rns);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7f5 f83e 	bl	8006d54 <RNSStop>
			while(ps4->button == CROSS);
 8011cd8:	bf00      	nop
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ce2:	d0fa      	beq.n	8011cda <tunePPlan+0x6f2>
			if(ps4->button == L1_CROSS){
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ce8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011cec:	d107      	bne.n	8011cfe <tunePPlan+0x716>
				RNSSet(rns, RNS_RESET_POS);
 8011cee:	2114      	movs	r1, #20
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7f5 fa5d 	bl	80071b0 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 8011cf6:	2117      	movs	r1, #23
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7f5 fa59 	bl	80071b0 <RNSSet>
			}
		}

		if(MODNflag)
 8011cfe:	4b0d      	ldr	r3, [pc, #52]	; (8011d34 <tunePPlan+0x74c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d003      	beq.n	8011d0e <tunePPlan+0x726>
			realMODN(ps4, rns);
 8011d06:	6879      	ldr	r1, [r7, #4]
 8011d08:	68b8      	ldr	r0, [r7, #8]
 8011d0a:	f7f4 f8bd 	bl	8005e88 <realMODN>
	while(tune.PP){
 8011d0e:	4b0a      	ldr	r3, [pc, #40]	; (8011d38 <tunePPlan+0x750>)
 8011d10:	791b      	ldrb	r3, [r3, #4]
 8011d12:	f003 0301 	and.w	r3, r3, #1
 8011d16:	b2db      	uxtb	r3, r3
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f47f ac6c 	bne.w	80115f6 <tunePPlan+0xe>
	}
}
 8011d1e:	bf00      	nop
 8011d20:	bf00      	nop
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	40020400 	.word	0x40020400
 8011d2c:	00000000 	.word	0x00000000
 8011d30:	40020c00 	.word	0x40020c00
 8011d34:	20000964 	.word	0x20000964
 8011d38:	20007928 	.word	0x20007928

08011d3c <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	6039      	str	r1, [r7, #0]
	if (!len) {
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f001 8437 	beq.w	80135bc <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 8011d4e:	4bcd      	ldr	r3, [pc, #820]	; (8012084 <bldc_interface_process_packet+0x348>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d006      	beq.n	8011d64 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 8011d56:	4bcb      	ldr	r3, [pc, #812]	; (8012084 <bldc_interface_process_packet+0x348>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	6839      	ldr	r1, [r7, #0]
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	4798      	blx	r3
		return;
 8011d60:	f001 bc43 	b.w	80135ea <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	61fb      	str	r3, [r7, #28]
	int i = 0;
 8011d70:	2300      	movs	r3, #0
 8011d72:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	74fb      	strb	r3, [r7, #19]
	data++;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	607b      	str	r3, [r7, #4]
	len--;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	3b01      	subs	r3, #1
 8011d84:	603b      	str	r3, [r7, #0]

	switch (id) {
 8011d86:	7cfb      	ldrb	r3, [r7, #19]
 8011d88:	2b32      	cmp	r3, #50	; 0x32
 8011d8a:	f201 8419 	bhi.w	80135c0 <bldc_interface_process_packet+0x1884>
 8011d8e:	a201      	add	r2, pc, #4	; (adr r2, 8011d94 <bldc_interface_process_packet+0x58>)
 8011d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d94:	08011e61 	.word	0x08011e61
 8011d98:	080135c1 	.word	0x080135c1
 8011d9c:	080135c1 	.word	0x080135c1
 8011da0:	080135c1 	.word	0x080135c1
 8011da4:	08011eab 	.word	0x08011eab
 8011da8:	080135c1 	.word	0x080135c1
 8011dac:	080135c1 	.word	0x080135c1
 8011db0:	080135c1 	.word	0x080135c1
 8011db4:	080135c1 	.word	0x080135c1
 8011db8:	080135c1 	.word	0x080135c1
 8011dbc:	080135c1 	.word	0x080135c1
 8011dc0:	080135c1 	.word	0x080135c1
 8011dc4:	080135c1 	.word	0x080135c1
 8011dc8:	0801359d 	.word	0x0801359d
 8011dcc:	08012525 	.word	0x08012525
 8011dd0:	08012525 	.word	0x08012525
 8011dd4:	080135ad 	.word	0x080135ad
 8011dd8:	08012de1 	.word	0x08012de1
 8011ddc:	08012de1 	.word	0x08012de1
 8011de0:	080135c1 	.word	0x080135c1
 8011de4:	080135c1 	.word	0x080135c1
 8011de8:	080124a5 	.word	0x080124a5
 8011dec:	080124c5 	.word	0x080124c5
 8011df0:	080135c1 	.word	0x080135c1
 8011df4:	08013405 	.word	0x08013405
 8011df8:	080135c1 	.word	0x080135c1
 8011dfc:	080135c1 	.word	0x080135c1
 8011e00:	080135c1 	.word	0x080135c1
 8011e04:	080135c1 	.word	0x080135c1
 8011e08:	080135c1 	.word	0x080135c1
 8011e0c:	080135c1 	.word	0x080135c1
 8011e10:	080134ad 	.word	0x080134ad
 8011e14:	08013509 	.word	0x08013509
 8011e18:	08013565 	.word	0x08013565
 8011e1c:	080135c1 	.word	0x080135c1
 8011e20:	080135c1 	.word	0x080135c1
 8011e24:	080135c1 	.word	0x080135c1
 8011e28:	080135c1 	.word	0x080135c1
 8011e2c:	080135c1 	.word	0x080135c1
 8011e30:	080135c1 	.word	0x080135c1
 8011e34:	080135c1 	.word	0x080135c1
 8011e38:	080135c1 	.word	0x080135c1
 8011e3c:	080135c1 	.word	0x080135c1
 8011e40:	080135c1 	.word	0x080135c1
 8011e44:	080135c1 	.word	0x080135c1
 8011e48:	080135c1 	.word	0x080135c1
 8011e4c:	080135c1 	.word	0x080135c1
 8011e50:	080135c1 	.word	0x080135c1
 8011e54:	080135c1 	.word	0x080135c1
 8011e58:	080135c1 	.word	0x080135c1
 8011e5c:	080120e9 	.word	0x080120e9
	case COMM_FW_VERSION:
		if (len == 2) {
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d117      	bne.n	8011e96 <bldc_interface_process_packet+0x15a>
			ind = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	1c5a      	adds	r2, r3, #1
 8011e6e:	60fa      	str	r2, [r7, #12]
 8011e70:	461a      	mov	r2, r3
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	4413      	add	r3, r2
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	461a      	mov	r2, r3
 8011e7a:	4b83      	ldr	r3, [pc, #524]	; (8012088 <bldc_interface_process_packet+0x34c>)
 8011e7c:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	1c5a      	adds	r2, r3, #1
 8011e82:	60fa      	str	r2, [r7, #12]
 8011e84:	461a      	mov	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	4413      	add	r3, r2
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	461a      	mov	r2, r3
 8011e8e:	4b7f      	ldr	r3, [pc, #508]	; (801208c <bldc_interface_process_packet+0x350>)
 8011e90:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 8011e92:	f001 bbaa 	b.w	80135ea <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 8011e96:	4b7c      	ldr	r3, [pc, #496]	; (8012088 <bldc_interface_process_packet+0x34c>)
 8011e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e9c:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 8011e9e:	4b7b      	ldr	r3, [pc, #492]	; (801208c <bldc_interface_process_packet+0x350>)
 8011ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ea4:	601a      	str	r2, [r3, #0]
		break;
 8011ea6:	f001 bba0 	b.w	80135ea <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8011eae:	f107 030c 	add.w	r3, r7, #12
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f001 fc65 	bl	8013788 <buffer_get_float16>
 8011ebe:	eef0 7a40 	vmov.f32	s15, s0
 8011ec2:	4b73      	ldr	r3, [pc, #460]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011ec4:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8011ec8:	f107 030c 	add.w	r3, r7, #12
 8011ecc:	4619      	mov	r1, r3
 8011ece:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f001 fc58 	bl	8013788 <buffer_get_float16>
 8011ed8:	eef0 7a40 	vmov.f32	s15, s0
 8011edc:	4b6c      	ldr	r3, [pc, #432]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011ede:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8011ee2:	f107 030c 	add.w	r3, r7, #12
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8012094 <bldc_interface_process_packet+0x358>
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f001 fc66 	bl	80137be <buffer_get_float32>
 8011ef2:	eef0 7a40 	vmov.f32	s15, s0
 8011ef6:	4b66      	ldr	r3, [pc, #408]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011ef8:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8011efc:	f107 030c 	add.w	r3, r7, #12
 8011f00:	4619      	mov	r1, r3
 8011f02:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8012094 <bldc_interface_process_packet+0x358>
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f001 fc59 	bl	80137be <buffer_get_float32>
 8011f0c:	eef0 7a40 	vmov.f32	s15, s0
 8011f10:	4b5f      	ldr	r3, [pc, #380]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f12:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8011f16:	f107 030c 	add.w	r3, r7, #12
 8011f1a:	4619      	mov	r1, r3
 8011f1c:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8012094 <bldc_interface_process_packet+0x358>
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f001 fc4c 	bl	80137be <buffer_get_float32>
 8011f26:	eef0 7a40 	vmov.f32	s15, s0
 8011f2a:	4b59      	ldr	r3, [pc, #356]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f2c:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8011f30:	f107 030c 	add.w	r3, r7, #12
 8011f34:	4619      	mov	r1, r3
 8011f36:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8012094 <bldc_interface_process_packet+0x358>
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f001 fc3f 	bl	80137be <buffer_get_float32>
 8011f40:	eef0 7a40 	vmov.f32	s15, s0
 8011f44:	4b52      	ldr	r3, [pc, #328]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f46:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8011f4a:	f107 030c 	add.w	r3, r7, #12
 8011f4e:	4619      	mov	r1, r3
 8011f50:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8012098 <bldc_interface_process_packet+0x35c>
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f001 fc17 	bl	8013788 <buffer_get_float16>
 8011f5a:	eef0 7a40 	vmov.f32	s15, s0
 8011f5e:	4b4c      	ldr	r3, [pc, #304]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f60:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8011f64:	f107 030c 	add.w	r3, r7, #12
 8011f68:	4619      	mov	r1, r3
 8011f6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f001 fc25 	bl	80137be <buffer_get_float32>
 8011f74:	eef0 7a40 	vmov.f32	s15, s0
 8011f78:	4b45      	ldr	r3, [pc, #276]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f7a:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8011f7e:	f107 030c 	add.w	r3, r7, #12
 8011f82:	4619      	mov	r1, r3
 8011f84:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f001 fbfd 	bl	8013788 <buffer_get_float16>
 8011f8e:	eef0 7a40 	vmov.f32	s15, s0
 8011f92:	4b3f      	ldr	r3, [pc, #252]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011f94:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8011f98:	f107 030c 	add.w	r3, r7, #12
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801209c <bldc_interface_process_packet+0x360>
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f001 fc0b 	bl	80137be <buffer_get_float32>
 8011fa8:	eef0 7a40 	vmov.f32	s15, s0
 8011fac:	4b38      	ldr	r3, [pc, #224]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011fae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8011fb2:	f107 030c 	add.w	r3, r7, #12
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801209c <bldc_interface_process_packet+0x360>
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f001 fbfe 	bl	80137be <buffer_get_float32>
 8011fc2:	eef0 7a40 	vmov.f32	s15, s0
 8011fc6:	4b32      	ldr	r3, [pc, #200]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011fc8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8011fcc:	f107 030c 	add.w	r3, r7, #12
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	ed9f 0a32 	vldr	s0, [pc, #200]	; 801209c <bldc_interface_process_packet+0x360>
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f001 fbf1 	bl	80137be <buffer_get_float32>
 8011fdc:	eef0 7a40 	vmov.f32	s15, s0
 8011fe0:	4b2b      	ldr	r3, [pc, #172]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011fe2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8011fe6:	f107 030c 	add.w	r3, r7, #12
 8011fea:	4619      	mov	r1, r3
 8011fec:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801209c <bldc_interface_process_packet+0x360>
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f001 fbe4 	bl	80137be <buffer_get_float32>
 8011ff6:	eef0 7a40 	vmov.f32	s15, s0
 8011ffa:	4b25      	ldr	r3, [pc, #148]	; (8012090 <bldc_interface_process_packet+0x354>)
 8011ffc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8012000:	f107 030c 	add.w	r3, r7, #12
 8012004:	4619      	mov	r1, r3
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f001 fb5e 	bl	80136c8 <buffer_get_int32>
 801200c:	4603      	mov	r3, r0
 801200e:	4a20      	ldr	r2, [pc, #128]	; (8012090 <bldc_interface_process_packet+0x354>)
 8012010:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8012012:	f107 030c 	add.w	r3, r7, #12
 8012016:	4619      	mov	r1, r3
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f001 fb55 	bl	80136c8 <buffer_get_int32>
 801201e:	4603      	mov	r3, r0
 8012020:	4a1b      	ldr	r2, [pc, #108]	; (8012090 <bldc_interface_process_packet+0x354>)
 8012022:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	60fa      	str	r2, [r7, #12]
 801202a:	461a      	mov	r2, r3
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	4413      	add	r3, r2
 8012030:	781a      	ldrb	r2, [r3, #0]
 8012032:	4b17      	ldr	r3, [pc, #92]	; (8012090 <bldc_interface_process_packet+0x354>)
 8012034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 8012038:	68fa      	ldr	r2, [r7, #12]
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	429a      	cmp	r2, r3
 801203e:	da0d      	bge.n	801205c <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8012040:	f107 030c 	add.w	r3, r7, #12
 8012044:	4619      	mov	r1, r3
 8012046:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80120a0 <bldc_interface_process_packet+0x364>
 801204a:	6878      	ldr	r0, [r7, #4]
 801204c:	f001 fbb7 	bl	80137be <buffer_get_float32>
 8012050:	eef0 7a40 	vmov.f32	s15, s0
 8012054:	4b0e      	ldr	r3, [pc, #56]	; (8012090 <bldc_interface_process_packet+0x354>)
 8012056:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 801205a:	e003      	b.n	8012064 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 801205c:	4b0c      	ldr	r3, [pc, #48]	; (8012090 <bldc_interface_process_packet+0x354>)
 801205e:	f04f 0200 	mov.w	r2, #0
 8012062:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	429a      	cmp	r2, r3
 801206a:	da1b      	bge.n	80120a4 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	60fa      	str	r2, [r7, #12]
 8012072:	461a      	mov	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4413      	add	r3, r2
 8012078:	781a      	ldrb	r2, [r3, #0]
 801207a:	4b05      	ldr	r3, [pc, #20]	; (8012090 <bldc_interface_process_packet+0x354>)
 801207c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8012080:	e014      	b.n	80120ac <bldc_interface_process_packet+0x370>
 8012082:	bf00      	nop
 8012084:	20000c50 	.word	0x20000c50
 8012088:	200009c8 	.word	0x200009c8
 801208c:	200009cc 	.word	0x200009cc
 8012090:	20000968 	.word	0x20000968
 8012094:	42c80000 	.word	0x42c80000
 8012098:	447a0000 	.word	0x447a0000
 801209c:	461c4000 	.word	0x461c4000
 80120a0:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 80120a4:	4b0c      	ldr	r3, [pc, #48]	; (80120d8 <bldc_interface_process_packet+0x39c>)
 80120a6:	22ff      	movs	r2, #255	; 0xff
 80120a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 80120ac:	4a0b      	ldr	r2, [pc, #44]	; (80120dc <bldc_interface_process_packet+0x3a0>)
 80120ae:	4b0a      	ldr	r3, [pc, #40]	; (80120d8 <bldc_interface_process_packet+0x39c>)
 80120b0:	4610      	mov	r0, r2
 80120b2:	4619      	mov	r1, r3
 80120b4:	2360      	movs	r3, #96	; 0x60
 80120b6:	461a      	mov	r2, r3
 80120b8:	f00c fe32 	bl	801ed20 <memcpy>

		if (rx_value_func) {
 80120bc:	4b08      	ldr	r3, [pc, #32]	; (80120e0 <bldc_interface_process_packet+0x3a4>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d003      	beq.n	80120cc <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 80120c4:	4b06      	ldr	r3, [pc, #24]	; (80120e0 <bldc_interface_process_packet+0x3a4>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	4803      	ldr	r0, [pc, #12]	; (80120d8 <bldc_interface_process_packet+0x39c>)
 80120ca:	4798      	blx	r3
		}

		rx_value_complete = true;
 80120cc:	4b05      	ldr	r3, [pc, #20]	; (80120e4 <bldc_interface_process_packet+0x3a8>)
 80120ce:	2201      	movs	r2, #1
 80120d0:	701a      	strb	r2, [r3, #0]

		break;
 80120d2:	f001 ba8a 	b.w	80135ea <bldc_interface_process_packet+0x18ae>
 80120d6:	bf00      	nop
 80120d8:	20000968 	.word	0x20000968
 80120dc:	200079f8 	.word	0x200079f8
 80120e0:	20000c54 	.word	0x20000c54
 80120e4:	2000a6e4 	.word	0x2000a6e4

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 80120e8:	2300      	movs	r3, #0
 80120ea:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 80120ec:	f107 030c 	add.w	r3, r7, #12
 80120f0:	4619      	mov	r1, r3
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f001 fb18 	bl	8013728 <buffer_get_uint32>
 80120f8:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00e      	beq.n	8012122 <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8012104:	f107 030c 	add.w	r3, r7, #12
 8012108:	4619      	mov	r1, r3
 801210a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f001 fb3a 	bl	8013788 <buffer_get_float16>
 8012114:	eef0 7a40 	vmov.f32	s15, s0
 8012118:	4bc6      	ldr	r3, [pc, #792]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801211a:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 801211e:	2300      	movs	r3, #0
 8012120:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	f003 0302 	and.w	r3, r3, #2
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00e      	beq.n	801214a <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 801212c:	f107 030c 	add.w	r3, r7, #12
 8012130:	4619      	mov	r1, r3
 8012132:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8012136:	6878      	ldr	r0, [r7, #4]
 8012138:	f001 fb26 	bl	8013788 <buffer_get_float16>
 801213c:	eef0 7a40 	vmov.f32	s15, s0
 8012140:	4bbc      	ldr	r3, [pc, #752]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012142:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 8012146:	2301      	movs	r3, #1
 8012148:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	f003 0304 	and.w	r3, r3, #4
 8012150:	2b00      	cmp	r3, #0
 8012152:	d00e      	beq.n	8012172 <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8012154:	f107 030c 	add.w	r3, r7, #12
 8012158:	4619      	mov	r1, r3
 801215a:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8012438 <bldc_interface_process_packet+0x6fc>
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f001 fb2d 	bl	80137be <buffer_get_float32>
 8012164:	eef0 7a40 	vmov.f32	s15, s0
 8012168:	4bb2      	ldr	r3, [pc, #712]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801216a:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 801216e:	2302      	movs	r3, #2
 8012170:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	f003 0308 	and.w	r3, r3, #8
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00e      	beq.n	801219a <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 801217c:	f107 030c 	add.w	r3, r7, #12
 8012180:	4619      	mov	r1, r3
 8012182:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8012438 <bldc_interface_process_packet+0x6fc>
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f001 fb19 	bl	80137be <buffer_get_float32>
 801218c:	eef0 7a40 	vmov.f32	s15, s0
 8012190:	4ba8      	ldr	r3, [pc, #672]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012192:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 8012196:	2303      	movs	r3, #3
 8012198:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f003 0310 	and.w	r3, r3, #16
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d00e      	beq.n	80121c2 <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 80121a4:	f107 030c 	add.w	r3, r7, #12
 80121a8:	4619      	mov	r1, r3
 80121aa:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8012438 <bldc_interface_process_packet+0x6fc>
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f001 fb05 	bl	80137be <buffer_get_float32>
 80121b4:	eef0 7a40 	vmov.f32	s15, s0
 80121b8:	4b9e      	ldr	r3, [pc, #632]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80121ba:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 80121be:	2304      	movs	r3, #4
 80121c0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	f003 0320 	and.w	r3, r3, #32
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00e      	beq.n	80121ea <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 80121cc:	f107 030c 	add.w	r3, r7, #12
 80121d0:	4619      	mov	r1, r3
 80121d2:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8012438 <bldc_interface_process_packet+0x6fc>
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f001 faf1 	bl	80137be <buffer_get_float32>
 80121dc:	eef0 7a40 	vmov.f32	s15, s0
 80121e0:	4b94      	ldr	r3, [pc, #592]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80121e2:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 80121e6:	2305      	movs	r3, #5
 80121e8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00e      	beq.n	8012212 <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 80121f4:	f107 030c 	add.w	r3, r7, #12
 80121f8:	4619      	mov	r1, r3
 80121fa:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8012444 <bldc_interface_process_packet+0x708>
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f001 fac2 	bl	8013788 <buffer_get_float16>
 8012204:	eef0 7a40 	vmov.f32	s15, s0
 8012208:	4b8a      	ldr	r3, [pc, #552]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801220a:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 801220e:	2306      	movs	r3, #6
 8012210:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00e      	beq.n	801223a <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 801221c:	f107 030c 	add.w	r3, r7, #12
 8012220:	4619      	mov	r1, r3
 8012222:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f001 fac9 	bl	80137be <buffer_get_float32>
 801222c:	eef0 7a40 	vmov.f32	s15, s0
 8012230:	4b80      	ldr	r3, [pc, #512]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012232:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 8012236:	2307      	movs	r3, #7
 8012238:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012240:	2b00      	cmp	r3, #0
 8012242:	d00e      	beq.n	8012262 <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 8012244:	f107 030c 	add.w	r3, r7, #12
 8012248:	4619      	mov	r1, r3
 801224a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f001 fa9a 	bl	8013788 <buffer_get_float16>
 8012254:	eef0 7a40 	vmov.f32	s15, s0
 8012258:	4b76      	ldr	r3, [pc, #472]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801225a:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 801225e:	2308      	movs	r3, #8
 8012260:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012268:	2b00      	cmp	r3, #0
 801226a:	d00e      	beq.n	801228a <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 801226c:	f107 030c 	add.w	r3, r7, #12
 8012270:	4619      	mov	r1, r3
 8012272:	ed9f 0a72 	vldr	s0, [pc, #456]	; 801243c <bldc_interface_process_packet+0x700>
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f001 faa1 	bl	80137be <buffer_get_float32>
 801227c:	eef0 7a40 	vmov.f32	s15, s0
 8012280:	4b6c      	ldr	r3, [pc, #432]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012282:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 8012286:	2309      	movs	r3, #9
 8012288:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012290:	2b00      	cmp	r3, #0
 8012292:	d00e      	beq.n	80122b2 <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8012294:	f107 030c 	add.w	r3, r7, #12
 8012298:	4619      	mov	r1, r3
 801229a:	ed9f 0a68 	vldr	s0, [pc, #416]	; 801243c <bldc_interface_process_packet+0x700>
 801229e:	6878      	ldr	r0, [r7, #4]
 80122a0:	f001 fa8d 	bl	80137be <buffer_get_float32>
 80122a4:	eef0 7a40 	vmov.f32	s15, s0
 80122a8:	4b62      	ldr	r3, [pc, #392]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80122aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 80122ae:	230a      	movs	r3, #10
 80122b0:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d00e      	beq.n	80122da <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 80122bc:	f107 030c 	add.w	r3, r7, #12
 80122c0:	4619      	mov	r1, r3
 80122c2:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 801243c <bldc_interface_process_packet+0x700>
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f001 fa79 	bl	80137be <buffer_get_float32>
 80122cc:	eef0 7a40 	vmov.f32	s15, s0
 80122d0:	4b58      	ldr	r3, [pc, #352]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80122d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 80122d6:	230b      	movs	r3, #11
 80122d8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00e      	beq.n	8012302 <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 80122e4:	f107 030c 	add.w	r3, r7, #12
 80122e8:	4619      	mov	r1, r3
 80122ea:	ed9f 0a54 	vldr	s0, [pc, #336]	; 801243c <bldc_interface_process_packet+0x700>
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f001 fa65 	bl	80137be <buffer_get_float32>
 80122f4:	eef0 7a40 	vmov.f32	s15, s0
 80122f8:	4b4e      	ldr	r3, [pc, #312]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80122fa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 80122fe:	230c      	movs	r3, #12
 8012300:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00a      	beq.n	8012322 <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 801230c:	f107 030c 	add.w	r3, r7, #12
 8012310:	4619      	mov	r1, r3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f001 f9d8 	bl	80136c8 <buffer_get_int32>
 8012318:	4603      	mov	r3, r0
 801231a:	4a46      	ldr	r2, [pc, #280]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801231c:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 801231e:	230d      	movs	r3, #13
 8012320:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012328:	2b00      	cmp	r3, #0
 801232a:	d00a      	beq.n	8012342 <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 801232c:	f107 030c 	add.w	r3, r7, #12
 8012330:	4619      	mov	r1, r3
 8012332:	6878      	ldr	r0, [r7, #4]
 8012334:	f001 f9c8 	bl	80136c8 <buffer_get_int32>
 8012338:	4603      	mov	r3, r0
 801233a:	4a3e      	ldr	r2, [pc, #248]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801233c:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 801233e:	230e      	movs	r3, #14
 8012340:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00b      	beq.n	8012364 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	1c5a      	adds	r2, r3, #1
 8012350:	60fa      	str	r2, [r7, #12]
 8012352:	461a      	mov	r2, r3
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	4413      	add	r3, r2
 8012358:	781a      	ldrb	r2, [r3, #0]
 801235a:	4b36      	ldr	r3, [pc, #216]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 8012360:	230f      	movs	r3, #15
 8012362:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00e      	beq.n	801238c <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 801236e:	f107 030c 	add.w	r3, r7, #12
 8012372:	4619      	mov	r1, r3
 8012374:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8012440 <bldc_interface_process_packet+0x704>
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f001 fa20 	bl	80137be <buffer_get_float32>
 801237e:	eef0 7a40 	vmov.f32	s15, s0
 8012382:	4b2c      	ldr	r3, [pc, #176]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012384:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 8012388:	2310      	movs	r3, #16
 801238a:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012392:	2b00      	cmp	r3, #0
 8012394:	d00b      	beq.n	80123ae <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	1c5a      	adds	r2, r3, #1
 801239a:	60fa      	str	r2, [r7, #12]
 801239c:	461a      	mov	r2, r3
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4413      	add	r3, r2
 80123a2:	781a      	ldrb	r2, [r3, #0]
 80123a4:	4b23      	ldr	r3, [pc, #140]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80123a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 80123aa:	2311      	movs	r3, #17
 80123ac:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d028      	beq.n	801240a <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 80123b8:	f107 030c 	add.w	r3, r7, #12
 80123bc:	4619      	mov	r1, r3
 80123be:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f001 f9e0 	bl	8013788 <buffer_get_float16>
 80123c8:	eef0 7a40 	vmov.f32	s15, s0
 80123cc:	4b19      	ldr	r3, [pc, #100]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80123ce:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 80123d2:	f107 030c 	add.w	r3, r7, #12
 80123d6:	4619      	mov	r1, r3
 80123d8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f001 f9d3 	bl	8013788 <buffer_get_float16>
 80123e2:	eef0 7a40 	vmov.f32	s15, s0
 80123e6:	4b13      	ldr	r3, [pc, #76]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 80123e8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 80123ec:	f107 030c 	add.w	r3, r7, #12
 80123f0:	4619      	mov	r1, r3
 80123f2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f001 f9c6 	bl	8013788 <buffer_get_float16>
 80123fc:	eef0 7a40 	vmov.f32	s15, s0
 8012400:	4b0c      	ldr	r3, [pc, #48]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 8012402:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 8012406:	2312      	movs	r3, #18
 8012408:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012410:	2b00      	cmp	r3, #0
 8012412:	d019      	beq.n	8012448 <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8012414:	f107 030c 	add.w	r3, r7, #12
 8012418:	4619      	mov	r1, r3
 801241a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012444 <bldc_interface_process_packet+0x708>
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f001 f9cd 	bl	80137be <buffer_get_float32>
 8012424:	eef0 7a40 	vmov.f32	s15, s0
 8012428:	4b02      	ldr	r3, [pc, #8]	; (8012434 <bldc_interface_process_packet+0x6f8>)
 801242a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 801242e:	2313      	movs	r3, #19
 8012430:	61fb      	str	r3, [r7, #28]
 8012432:	e009      	b.n	8012448 <bldc_interface_process_packet+0x70c>
 8012434:	20000968 	.word	0x20000968
 8012438:	42c80000 	.word	0x42c80000
 801243c:	461c4000 	.word	0x461c4000
 8012440:	49742400 	.word	0x49742400
 8012444:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00e      	beq.n	8012470 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 8012452:	f107 030c 	add.w	r3, r7, #12
 8012456:	4619      	mov	r1, r3
 8012458:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8012444 <bldc_interface_process_packet+0x708>
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f001 f9ae 	bl	80137be <buffer_get_float32>
 8012462:	eef0 7a40 	vmov.f32	s15, s0
 8012466:	4b26      	ldr	r3, [pc, #152]	; (8012500 <bldc_interface_process_packet+0x7c4>)
 8012468:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 801246c:	2314      	movs	r3, #20
 801246e:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 8012470:	4a24      	ldr	r2, [pc, #144]	; (8012504 <bldc_interface_process_packet+0x7c8>)
 8012472:	4b23      	ldr	r3, [pc, #140]	; (8012500 <bldc_interface_process_packet+0x7c4>)
 8012474:	4610      	mov	r0, r2
 8012476:	4619      	mov	r1, r3
 8012478:	2360      	movs	r3, #96	; 0x60
 801247a:	461a      	mov	r2, r3
 801247c:	f00c fc50 	bl	801ed20 <memcpy>

		if(rx_value_selective_print){
 8012480:	4b21      	ldr	r3, [pc, #132]	; (8012508 <bldc_interface_process_packet+0x7cc>)
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d008      	beq.n	801249a <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 8012488:	4b20      	ldr	r3, [pc, #128]	; (801250c <bldc_interface_process_packet+0x7d0>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d004      	beq.n	801249a <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 8012490:	4b1e      	ldr	r3, [pc, #120]	; (801250c <bldc_interface_process_packet+0x7d0>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	491a      	ldr	r1, [pc, #104]	; (8012500 <bldc_interface_process_packet+0x7c4>)
 8012496:	69f8      	ldr	r0, [r7, #28]
 8012498:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 801249a:	4b1d      	ldr	r3, [pc, #116]	; (8012510 <bldc_interface_process_packet+0x7d4>)
 801249c:	2201      	movs	r2, #1
 801249e:	701a      	strb	r2, [r3, #0]
		break;
 80124a0:	f001 b8a3 	b.w	80135ea <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 80124a4:	4b1b      	ldr	r3, [pc, #108]	; (8012514 <bldc_interface_process_packet+0x7d8>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	f001 808b 	beq.w	80135c4 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	4413      	add	r3, r2
 80124b4:	2200      	movs	r2, #0
 80124b6:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 80124b8:	4b16      	ldr	r3, [pc, #88]	; (8012514 <bldc_interface_process_packet+0x7d8>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	4798      	blx	r3
		}
		break;
 80124c0:	f001 b880 	b.w	80135c4 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 80124c4:	2300      	movs	r3, #0
 80124c6:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 80124c8:	f107 030c 	add.w	r3, r7, #12
 80124cc:	4619      	mov	r1, r3
 80124ce:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8012518 <bldc_interface_process_packet+0x7dc>
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f001 f973 	bl	80137be <buffer_get_float32>
 80124d8:	eef0 7a40 	vmov.f32	s15, s0
 80124dc:	4b0f      	ldr	r3, [pc, #60]	; (801251c <bldc_interface_process_packet+0x7e0>)
 80124de:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 80124e2:	4b0f      	ldr	r3, [pc, #60]	; (8012520 <bldc_interface_process_packet+0x7e4>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	f001 806e 	beq.w	80135c8 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 80124ec:	4b0c      	ldr	r3, [pc, #48]	; (8012520 <bldc_interface_process_packet+0x7e4>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	4a0a      	ldr	r2, [pc, #40]	; (801251c <bldc_interface_process_packet+0x7e0>)
 80124f2:	edd2 7a00 	vldr	s15, [r2]
 80124f6:	eeb0 0a67 	vmov.f32	s0, s15
 80124fa:	4798      	blx	r3
		}
		break;
 80124fc:	f001 b864 	b.w	80135c8 <bldc_interface_process_packet+0x188c>
 8012500:	20000968 	.word	0x20000968
 8012504:	200079f8 	.word	0x200079f8
 8012508:	2000ab18 	.word	0x2000ab18
 801250c:	20000c58 	.word	0x20000c58
 8012510:	2000a6e4 	.word	0x2000a6e4
 8012514:	20000c5c 	.word	0x20000c5c
 8012518:	47c35000 	.word	0x47c35000
 801251c:	200009d0 	.word	0x200009d0
 8012520:	20000c60 	.word	0x20000c60
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8012524:	2300      	movs	r3, #0
 8012526:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 8012528:	f107 030c 	add.w	r3, r7, #12
 801252c:	4619      	mov	r1, r3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f001 f8fa 	bl	8013728 <buffer_get_uint32>
 8012534:	4603      	mov	r3, r0
 8012536:	4ac5      	ldr	r2, [pc, #788]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012538:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	60fa      	str	r2, [r7, #12]
 8012540:	461a      	mov	r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	4413      	add	r3, r2
 8012546:	781a      	ldrb	r2, [r3, #0]
 8012548:	4bc0      	ldr	r3, [pc, #768]	; (801284c <bldc_interface_process_packet+0xb10>)
 801254a:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	1c5a      	adds	r2, r3, #1
 8012550:	60fa      	str	r2, [r7, #12]
 8012552:	461a      	mov	r2, r3
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	4413      	add	r3, r2
 8012558:	781a      	ldrb	r2, [r3, #0]
 801255a:	4bbc      	ldr	r3, [pc, #752]	; (801284c <bldc_interface_process_packet+0xb10>)
 801255c:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	1c5a      	adds	r2, r3, #1
 8012562:	60fa      	str	r2, [r7, #12]
 8012564:	461a      	mov	r2, r3
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	4413      	add	r3, r2
 801256a:	781a      	ldrb	r2, [r3, #0]
 801256c:	4bb7      	ldr	r3, [pc, #732]	; (801284c <bldc_interface_process_packet+0xb10>)
 801256e:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	1c5a      	adds	r2, r3, #1
 8012574:	60fa      	str	r2, [r7, #12]
 8012576:	461a      	mov	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	4413      	add	r3, r2
 801257c:	781a      	ldrb	r2, [r3, #0]
 801257e:	4bb3      	ldr	r3, [pc, #716]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012580:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8012582:	f107 030c 	add.w	r3, r7, #12
 8012586:	4619      	mov	r1, r3
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f001 f933 	bl	80137f4 <buffer_get_float32_auto>
 801258e:	eef0 7a40 	vmov.f32	s15, s0
 8012592:	4bae      	ldr	r3, [pc, #696]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012594:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8012598:	f107 030c 	add.w	r3, r7, #12
 801259c:	4619      	mov	r1, r3
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	f001 f928 	bl	80137f4 <buffer_get_float32_auto>
 80125a4:	eef0 7a40 	vmov.f32	s15, s0
 80125a8:	4ba8      	ldr	r3, [pc, #672]	; (801284c <bldc_interface_process_packet+0xb10>)
 80125aa:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 80125ae:	f107 030c 	add.w	r3, r7, #12
 80125b2:	4619      	mov	r1, r3
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f001 f91d 	bl	80137f4 <buffer_get_float32_auto>
 80125ba:	eef0 7a40 	vmov.f32	s15, s0
 80125be:	4ba3      	ldr	r3, [pc, #652]	; (801284c <bldc_interface_process_packet+0xb10>)
 80125c0:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 80125c4:	f107 030c 	add.w	r3, r7, #12
 80125c8:	4619      	mov	r1, r3
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f001 f912 	bl	80137f4 <buffer_get_float32_auto>
 80125d0:	eef0 7a40 	vmov.f32	s15, s0
 80125d4:	4b9d      	ldr	r3, [pc, #628]	; (801284c <bldc_interface_process_packet+0xb10>)
 80125d6:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 80125da:	f107 030c 	add.w	r3, r7, #12
 80125de:	4619      	mov	r1, r3
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f001 f907 	bl	80137f4 <buffer_get_float32_auto>
 80125e6:	eef0 7a40 	vmov.f32	s15, s0
 80125ea:	4b98      	ldr	r3, [pc, #608]	; (801284c <bldc_interface_process_packet+0xb10>)
 80125ec:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 80125f0:	f107 030c 	add.w	r3, r7, #12
 80125f4:	4619      	mov	r1, r3
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f001 f8fc 	bl	80137f4 <buffer_get_float32_auto>
 80125fc:	eef0 7a40 	vmov.f32	s15, s0
 8012600:	4b92      	ldr	r3, [pc, #584]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012602:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8012606:	f107 030c 	add.w	r3, r7, #12
 801260a:	4619      	mov	r1, r3
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f001 f8f1 	bl	80137f4 <buffer_get_float32_auto>
 8012612:	eef0 7a40 	vmov.f32	s15, s0
 8012616:	4b8d      	ldr	r3, [pc, #564]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012618:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 801261c:	f107 030c 	add.w	r3, r7, #12
 8012620:	4619      	mov	r1, r3
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f001 f8e6 	bl	80137f4 <buffer_get_float32_auto>
 8012628:	eef0 7a40 	vmov.f32	s15, s0
 801262c:	4b87      	ldr	r3, [pc, #540]	; (801284c <bldc_interface_process_packet+0xb10>)
 801262e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8012632:	f107 030c 	add.w	r3, r7, #12
 8012636:	4619      	mov	r1, r3
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f001 f8db 	bl	80137f4 <buffer_get_float32_auto>
 801263e:	eef0 7a40 	vmov.f32	s15, s0
 8012642:	4b82      	ldr	r3, [pc, #520]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012644:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8012648:	f107 030c 	add.w	r3, r7, #12
 801264c:	4619      	mov	r1, r3
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f001 f8d0 	bl	80137f4 <buffer_get_float32_auto>
 8012654:	eef0 7a40 	vmov.f32	s15, s0
 8012658:	4b7c      	ldr	r3, [pc, #496]	; (801284c <bldc_interface_process_packet+0xb10>)
 801265a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 801265e:	f107 030c 	add.w	r3, r7, #12
 8012662:	4619      	mov	r1, r3
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f001 f8c5 	bl	80137f4 <buffer_get_float32_auto>
 801266a:	eef0 7a40 	vmov.f32	s15, s0
 801266e:	4b77      	ldr	r3, [pc, #476]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012670:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8012674:	f107 030c 	add.w	r3, r7, #12
 8012678:	4619      	mov	r1, r3
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f001 f8ba 	bl	80137f4 <buffer_get_float32_auto>
 8012680:	eef0 7a40 	vmov.f32	s15, s0
 8012684:	4b71      	ldr	r3, [pc, #452]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012686:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 801268a:	f107 030c 	add.w	r3, r7, #12
 801268e:	4619      	mov	r1, r3
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f001 f8af 	bl	80137f4 <buffer_get_float32_auto>
 8012696:	eef0 7a40 	vmov.f32	s15, s0
 801269a:	4b6c      	ldr	r3, [pc, #432]	; (801284c <bldc_interface_process_packet+0xb10>)
 801269c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 80126a0:	f107 030c 	add.w	r3, r7, #12
 80126a4:	4619      	mov	r1, r3
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f001 f8a4 	bl	80137f4 <buffer_get_float32_auto>
 80126ac:	eef0 7a40 	vmov.f32	s15, s0
 80126b0:	4b66      	ldr	r3, [pc, #408]	; (801284c <bldc_interface_process_packet+0xb10>)
 80126b2:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	1c5a      	adds	r2, r3, #1
 80126ba:	60fa      	str	r2, [r7, #12]
 80126bc:	461a      	mov	r2, r3
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	4413      	add	r3, r2
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	bf14      	ite	ne
 80126c8:	2301      	movne	r3, #1
 80126ca:	2300      	moveq	r3, #0
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	4b5f      	ldr	r3, [pc, #380]	; (801284c <bldc_interface_process_packet+0xb10>)
 80126d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 80126d4:	f107 030c 	add.w	r3, r7, #12
 80126d8:	4619      	mov	r1, r3
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f001 f88a 	bl	80137f4 <buffer_get_float32_auto>
 80126e0:	eef0 7a40 	vmov.f32	s15, s0
 80126e4:	4b59      	ldr	r3, [pc, #356]	; (801284c <bldc_interface_process_packet+0xb10>)
 80126e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 80126ea:	f107 030c 	add.w	r3, r7, #12
 80126ee:	4619      	mov	r1, r3
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f001 f87f 	bl	80137f4 <buffer_get_float32_auto>
 80126f6:	eef0 7a40 	vmov.f32	s15, s0
 80126fa:	4b54      	ldr	r3, [pc, #336]	; (801284c <bldc_interface_process_packet+0xb10>)
 80126fc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8012700:	f107 030c 	add.w	r3, r7, #12
 8012704:	4619      	mov	r1, r3
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f001 f874 	bl	80137f4 <buffer_get_float32_auto>
 801270c:	eef0 7a40 	vmov.f32	s15, s0
 8012710:	4b4e      	ldr	r3, [pc, #312]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012712:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8012716:	f107 030c 	add.w	r3, r7, #12
 801271a:	4619      	mov	r1, r3
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f001 f869 	bl	80137f4 <buffer_get_float32_auto>
 8012722:	eef0 7a40 	vmov.f32	s15, s0
 8012726:	4b49      	ldr	r3, [pc, #292]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012728:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 801272c:	f107 030c 	add.w	r3, r7, #12
 8012730:	4619      	mov	r1, r3
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f001 f85e 	bl	80137f4 <buffer_get_float32_auto>
 8012738:	eef0 7a40 	vmov.f32	s15, s0
 801273c:	4b43      	ldr	r3, [pc, #268]	; (801284c <bldc_interface_process_packet+0xb10>)
 801273e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8012742:	f107 030c 	add.w	r3, r7, #12
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f001 f853 	bl	80137f4 <buffer_get_float32_auto>
 801274e:	eef0 7a40 	vmov.f32	s15, s0
 8012752:	4b3e      	ldr	r3, [pc, #248]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012754:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8012758:	f107 030c 	add.w	r3, r7, #12
 801275c:	4619      	mov	r1, r3
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f001 f848 	bl	80137f4 <buffer_get_float32_auto>
 8012764:	eef0 7a40 	vmov.f32	s15, s0
 8012768:	4b38      	ldr	r3, [pc, #224]	; (801284c <bldc_interface_process_packet+0xb10>)
 801276a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 801276e:	f107 030c 	add.w	r3, r7, #12
 8012772:	4619      	mov	r1, r3
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f001 f83d 	bl	80137f4 <buffer_get_float32_auto>
 801277a:	eef0 7a40 	vmov.f32	s15, s0
 801277e:	4b33      	ldr	r3, [pc, #204]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012780:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8012784:	f107 030c 	add.w	r3, r7, #12
 8012788:	4619      	mov	r1, r3
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f001 f832 	bl	80137f4 <buffer_get_float32_auto>
 8012790:	eef0 7a40 	vmov.f32	s15, s0
 8012794:	4b2d      	ldr	r3, [pc, #180]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012796:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 801279a:	4b2c      	ldr	r3, [pc, #176]	; (801284c <bldc_interface_process_packet+0xb10>)
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	4a2b      	ldr	r2, [pc, #172]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127a0:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 80127a2:	4b2a      	ldr	r3, [pc, #168]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127a4:	68db      	ldr	r3, [r3, #12]
 80127a6:	4a29      	ldr	r2, [pc, #164]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127a8:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 80127aa:	4b28      	ldr	r3, [pc, #160]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127ac:	691b      	ldr	r3, [r3, #16]
 80127ae:	4a27      	ldr	r2, [pc, #156]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127b0:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 80127b2:	4b26      	ldr	r3, [pc, #152]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127b4:	695b      	ldr	r3, [r3, #20]
 80127b6:	4a25      	ldr	r2, [pc, #148]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127b8:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 80127ba:	4b24      	ldr	r3, [pc, #144]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127bc:	689b      	ldr	r3, [r3, #8]
 80127be:	4a23      	ldr	r2, [pc, #140]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127c0:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 80127c2:	4b22      	ldr	r3, [pc, #136]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	4a21      	ldr	r2, [pc, #132]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127c8:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 80127ca:	f107 030c 	add.w	r3, r7, #12
 80127ce:	4619      	mov	r1, r3
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f001 f80f 	bl	80137f4 <buffer_get_float32_auto>
 80127d6:	eef0 7a40 	vmov.f32	s15, s0
 80127da:	4b1c      	ldr	r3, [pc, #112]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127dc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80127e0:	f107 030c 	add.w	r3, r7, #12
 80127e4:	4619      	mov	r1, r3
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f001 f804 	bl	80137f4 <buffer_get_float32_auto>
 80127ec:	eef0 7a40 	vmov.f32	s15, s0
 80127f0:	4b16      	ldr	r3, [pc, #88]	; (801284c <bldc_interface_process_packet+0xb10>)
 80127f2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 80127f6:	f107 030c 	add.w	r3, r7, #12
 80127fa:	4619      	mov	r1, r3
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fff9 	bl	80137f4 <buffer_get_float32_auto>
 8012802:	eef0 7a40 	vmov.f32	s15, s0
 8012806:	4b11      	ldr	r3, [pc, #68]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012808:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 801280c:	f107 030c 	add.w	r3, r7, #12
 8012810:	4619      	mov	r1, r3
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f000 ffee 	bl	80137f4 <buffer_get_float32_auto>
 8012818:	eef0 7a40 	vmov.f32	s15, s0
 801281c:	4b0b      	ldr	r3, [pc, #44]	; (801284c <bldc_interface_process_packet+0xb10>)
 801281e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8012822:	f107 030c 	add.w	r3, r7, #12
 8012826:	4619      	mov	r1, r3
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	f000 ffe3 	bl	80137f4 <buffer_get_float32_auto>
 801282e:	eef0 7a40 	vmov.f32	s15, s0
 8012832:	4b06      	ldr	r3, [pc, #24]	; (801284c <bldc_interface_process_packet+0xb10>)
 8012834:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8012838:	f107 030c 	add.w	r3, r7, #12
 801283c:	4619      	mov	r1, r3
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 ffd8 	bl	80137f4 <buffer_get_float32_auto>
 8012844:	eef0 7a40 	vmov.f32	s15, s0
 8012848:	e002      	b.n	8012850 <bldc_interface_process_packet+0xb14>
 801284a:	bf00      	nop
 801284c:	200009d4 	.word	0x200009d4
 8012850:	4bc7      	ldr	r3, [pc, #796]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012852:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8012856:	f107 030c 	add.w	r3, r7, #12
 801285a:	4619      	mov	r1, r3
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 ffc9 	bl	80137f4 <buffer_get_float32_auto>
 8012862:	eef0 7a40 	vmov.f32	s15, s0
 8012866:	4bc2      	ldr	r3, [pc, #776]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012868:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	461a      	mov	r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	441a      	add	r2, r3
 8012874:	4bbe      	ldr	r3, [pc, #760]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012876:	339c      	adds	r3, #156	; 0x9c
 8012878:	6810      	ldr	r0, [r2, #0]
 801287a:	6851      	ldr	r1, [r2, #4]
 801287c:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3308      	adds	r3, #8
 8012882:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8012884:	f107 030c 	add.w	r3, r7, #12
 8012888:	4619      	mov	r1, r3
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 ffb2 	bl	80137f4 <buffer_get_float32_auto>
 8012890:	eef0 7a40 	vmov.f32	s15, s0
 8012894:	4bb6      	ldr	r3, [pc, #728]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012896:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 801289a:	f107 030c 	add.w	r3, r7, #12
 801289e:	4619      	mov	r1, r3
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f000 ffa7 	bl	80137f4 <buffer_get_float32_auto>
 80128a6:	eef0 7a40 	vmov.f32	s15, s0
 80128aa:	4bb1      	ldr	r3, [pc, #708]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80128ac:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 80128b0:	f107 030c 	add.w	r3, r7, #12
 80128b4:	4619      	mov	r1, r3
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f000 ff9c 	bl	80137f4 <buffer_get_float32_auto>
 80128bc:	eef0 7a40 	vmov.f32	s15, s0
 80128c0:	4bab      	ldr	r3, [pc, #684]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80128c2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 80128c6:	f107 030c 	add.w	r3, r7, #12
 80128ca:	4619      	mov	r1, r3
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 ff91 	bl	80137f4 <buffer_get_float32_auto>
 80128d2:	eef0 7a40 	vmov.f32	s15, s0
 80128d6:	4ba6      	ldr	r3, [pc, #664]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80128d8:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 80128dc:	f107 030c 	add.w	r3, r7, #12
 80128e0:	4619      	mov	r1, r3
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 ff86 	bl	80137f4 <buffer_get_float32_auto>
 80128e8:	eef0 7a40 	vmov.f32	s15, s0
 80128ec:	4ba0      	ldr	r3, [pc, #640]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80128ee:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	1c5a      	adds	r2, r3, #1
 80128f6:	60fa      	str	r2, [r7, #12]
 80128f8:	461a      	mov	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4413      	add	r3, r2
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	bf14      	ite	ne
 8012904:	2301      	movne	r3, #1
 8012906:	2300      	moveq	r3, #0
 8012908:	b2da      	uxtb	r2, r3
 801290a:	4b99      	ldr	r3, [pc, #612]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 801290c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8012910:	f107 030c 	add.w	r3, r7, #12
 8012914:	4619      	mov	r1, r3
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f000 ff6c 	bl	80137f4 <buffer_get_float32_auto>
 801291c:	eef0 7a40 	vmov.f32	s15, s0
 8012920:	4b93      	ldr	r3, [pc, #588]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012922:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 8012926:	f107 030c 	add.w	r3, r7, #12
 801292a:	4619      	mov	r1, r3
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 ff61 	bl	80137f4 <buffer_get_float32_auto>
 8012932:	eef0 7a40 	vmov.f32	s15, s0
 8012936:	4b8e      	ldr	r3, [pc, #568]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012938:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	1c5a      	adds	r2, r3, #1
 8012940:	60fa      	str	r2, [r7, #12]
 8012942:	461a      	mov	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	4413      	add	r3, r2
 8012948:	781a      	ldrb	r2, [r3, #0]
 801294a:	4b89      	ldr	r3, [pc, #548]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 801294c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8012950:	f107 030c 	add.w	r3, r7, #12
 8012954:	4619      	mov	r1, r3
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 ff4c 	bl	80137f4 <buffer_get_float32_auto>
 801295c:	eef0 7a40 	vmov.f32	s15, s0
 8012960:	4b83      	ldr	r3, [pc, #524]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012962:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 8012966:	f107 030c 	add.w	r3, r7, #12
 801296a:	4619      	mov	r1, r3
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f000 ff41 	bl	80137f4 <buffer_get_float32_auto>
 8012972:	eef0 7a40 	vmov.f32	s15, s0
 8012976:	4b7e      	ldr	r3, [pc, #504]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012978:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 801297c:	f107 030c 	add.w	r3, r7, #12
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f000 ff36 	bl	80137f4 <buffer_get_float32_auto>
 8012988:	eef0 7a40 	vmov.f32	s15, s0
 801298c:	4b78      	ldr	r3, [pc, #480]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 801298e:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 8012992:	f107 030c 	add.w	r3, r7, #12
 8012996:	4619      	mov	r1, r3
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f000 ff2b 	bl	80137f4 <buffer_get_float32_auto>
 801299e:	eef0 7a40 	vmov.f32	s15, s0
 80129a2:	4b73      	ldr	r3, [pc, #460]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80129a4:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 80129a8:	f107 030c 	add.w	r3, r7, #12
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 ff20 	bl	80137f4 <buffer_get_float32_auto>
 80129b4:	eef0 7a40 	vmov.f32	s15, s0
 80129b8:	4b6d      	ldr	r3, [pc, #436]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80129ba:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 80129be:	f107 030c 	add.w	r3, r7, #12
 80129c2:	4619      	mov	r1, r3
 80129c4:	6878      	ldr	r0, [r7, #4]
 80129c6:	f000 ff15 	bl	80137f4 <buffer_get_float32_auto>
 80129ca:	eef0 7a40 	vmov.f32	s15, s0
 80129ce:	4b68      	ldr	r3, [pc, #416]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80129d0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 80129d4:	f107 030c 	add.w	r3, r7, #12
 80129d8:	4619      	mov	r1, r3
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 ff0a 	bl	80137f4 <buffer_get_float32_auto>
 80129e0:	eef0 7a40 	vmov.f32	s15, s0
 80129e4:	4b62      	ldr	r3, [pc, #392]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80129e6:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 80129ea:	f107 030c 	add.w	r3, r7, #12
 80129ee:	4619      	mov	r1, r3
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 feff 	bl	80137f4 <buffer_get_float32_auto>
 80129f6:	eef0 7a40 	vmov.f32	s15, s0
 80129fa:	4b5d      	ldr	r3, [pc, #372]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 80129fc:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8012a00:	f107 030c 	add.w	r3, r7, #12
 8012a04:	4619      	mov	r1, r3
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f000 fef4 	bl	80137f4 <buffer_get_float32_auto>
 8012a0c:	eef0 7a40 	vmov.f32	s15, s0
 8012a10:	4b57      	ldr	r3, [pc, #348]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a12:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 8012a16:	f107 030c 	add.w	r3, r7, #12
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f000 fee9 	bl	80137f4 <buffer_get_float32_auto>
 8012a22:	eef0 7a40 	vmov.f32	s15, s0
 8012a26:	4b52      	ldr	r3, [pc, #328]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a28:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8012a2c:	f107 030c 	add.w	r3, r7, #12
 8012a30:	4619      	mov	r1, r3
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fede 	bl	80137f4 <buffer_get_float32_auto>
 8012a38:	eef0 7a40 	vmov.f32	s15, s0
 8012a3c:	4b4c      	ldr	r3, [pc, #304]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a3e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 8012a42:	f107 030c 	add.w	r3, r7, #12
 8012a46:	4619      	mov	r1, r3
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fed3 	bl	80137f4 <buffer_get_float32_auto>
 8012a4e:	eef0 7a40 	vmov.f32	s15, s0
 8012a52:	4b47      	ldr	r3, [pc, #284]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a54:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8012a58:	f107 030c 	add.w	r3, r7, #12
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 fec8 	bl	80137f4 <buffer_get_float32_auto>
 8012a64:	eef0 7a40 	vmov.f32	s15, s0
 8012a68:	4b41      	ldr	r3, [pc, #260]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a6a:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8012a6e:	f107 030c 	add.w	r3, r7, #12
 8012a72:	4619      	mov	r1, r3
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 febd 	bl	80137f4 <buffer_get_float32_auto>
 8012a7a:	eef0 7a40 	vmov.f32	s15, s0
 8012a7e:	4b3c      	ldr	r3, [pc, #240]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a80:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	441a      	add	r2, r3
 8012a8c:	4b38      	ldr	r3, [pc, #224]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012a8e:	33fd      	adds	r3, #253	; 0xfd
 8012a90:	6811      	ldr	r1, [r2, #0]
 8012a92:	6852      	ldr	r2, [r2, #4]
 8012a94:	6019      	str	r1, [r3, #0]
 8012a96:	605a      	str	r2, [r3, #4]
		ind += 8;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	3308      	adds	r3, #8
 8012a9c:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8012a9e:	f107 030c 	add.w	r3, r7, #12
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 fea5 	bl	80137f4 <buffer_get_float32_auto>
 8012aaa:	eef0 7a40 	vmov.f32	s15, s0
 8012aae:	4b30      	ldr	r3, [pc, #192]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012ab0:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	1c5a      	adds	r2, r3, #1
 8012ab8:	60fa      	str	r2, [r7, #12]
 8012aba:	461a      	mov	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	4413      	add	r3, r2
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	bf14      	ite	ne
 8012ac6:	2301      	movne	r3, #1
 8012ac8:	2300      	moveq	r3, #0
 8012aca:	b2da      	uxtb	r2, r3
 8012acc:	4b28      	ldr	r3, [pc, #160]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012ace:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	60fa      	str	r2, [r7, #12]
 8012ad8:	461a      	mov	r2, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	4413      	add	r3, r2
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	bf14      	ite	ne
 8012ae4:	2301      	movne	r3, #1
 8012ae6:	2300      	moveq	r3, #0
 8012ae8:	b2da      	uxtb	r2, r3
 8012aea:	4b21      	ldr	r3, [pc, #132]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012aec:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8012af0:	f107 030c 	add.w	r3, r7, #12
 8012af4:	4619      	mov	r1, r3
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f000 fe7c 	bl	80137f4 <buffer_get_float32_auto>
 8012afc:	eef0 7a40 	vmov.f32	s15, s0
 8012b00:	4b1b      	ldr	r3, [pc, #108]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012b02:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	1c5a      	adds	r2, r3, #1
 8012b0a:	60fa      	str	r2, [r7, #12]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	4413      	add	r3, r2
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	bf14      	ite	ne
 8012b18:	2301      	movne	r3, #1
 8012b1a:	2300      	moveq	r3, #0
 8012b1c:	b2da      	uxtb	r2, r3
 8012b1e:	4b14      	ldr	r3, [pc, #80]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012b20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 8012b24:	f107 030c 	add.w	r3, r7, #12
 8012b28:	4619      	mov	r1, r3
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 fe62 	bl	80137f4 <buffer_get_float32_auto>
 8012b30:	eef0 7a40 	vmov.f32	s15, s0
 8012b34:	4b0e      	ldr	r3, [pc, #56]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012b36:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8012b3a:	f107 030c 	add.w	r3, r7, #12
 8012b3e:	4619      	mov	r1, r3
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 fe57 	bl	80137f4 <buffer_get_float32_auto>
 8012b46:	eef0 7a40 	vmov.f32	s15, s0
 8012b4a:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012b4c:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 8012b50:	f107 030c 	add.w	r3, r7, #12
 8012b54:	4619      	mov	r1, r3
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 fe4c 	bl	80137f4 <buffer_get_float32_auto>
 8012b5c:	eef0 7a40 	vmov.f32	s15, s0
 8012b60:	4b03      	ldr	r3, [pc, #12]	; (8012b70 <bldc_interface_process_packet+0xe34>)
 8012b62:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 8012b66:	f107 030c 	add.w	r3, r7, #12
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	e001      	b.n	8012b74 <bldc_interface_process_packet+0xe38>
 8012b70:	200009d4 	.word	0x200009d4
 8012b74:	f000 fe3e 	bl	80137f4 <buffer_get_float32_auto>
 8012b78:	eef0 7a40 	vmov.f32	s15, s0
 8012b7c:	4b96      	ldr	r3, [pc, #600]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012b7e:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 8012b82:	f107 030c 	add.w	r3, r7, #12
 8012b86:	4619      	mov	r1, r3
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 fe33 	bl	80137f4 <buffer_get_float32_auto>
 8012b8e:	eef0 7a40 	vmov.f32	s15, s0
 8012b92:	4b91      	ldr	r3, [pc, #580]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012b94:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8012b98:	f107 030c 	add.w	r3, r7, #12
 8012b9c:	4619      	mov	r1, r3
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 fe28 	bl	80137f4 <buffer_get_float32_auto>
 8012ba4:	eef0 7a40 	vmov.f32	s15, s0
 8012ba8:	4b8b      	ldr	r3, [pc, #556]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012baa:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8012bae:	f107 030c 	add.w	r3, r7, #12
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f000 fe1d 	bl	80137f4 <buffer_get_float32_auto>
 8012bba:	eef0 7a40 	vmov.f32	s15, s0
 8012bbe:	4b86      	ldr	r3, [pc, #536]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012bc0:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	60fa      	str	r2, [r7, #12]
 8012bca:	461a      	mov	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	bf14      	ite	ne
 8012bd6:	2301      	movne	r3, #1
 8012bd8:	2300      	moveq	r3, #0
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	4b7e      	ldr	r3, [pc, #504]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012bde:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 8012be2:	f107 030c 	add.w	r3, r7, #12
 8012be6:	4619      	mov	r1, r3
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 fe03 	bl	80137f4 <buffer_get_float32_auto>
 8012bee:	eef0 7a40 	vmov.f32	s15, s0
 8012bf2:	4b79      	ldr	r3, [pc, #484]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012bf4:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8012bf8:	f107 030c 	add.w	r3, r7, #12
 8012bfc:	4619      	mov	r1, r3
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 fdf8 	bl	80137f4 <buffer_get_float32_auto>
 8012c04:	eef0 7a40 	vmov.f32	s15, s0
 8012c08:	4b73      	ldr	r3, [pc, #460]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c0a:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8012c0e:	f107 030c 	add.w	r3, r7, #12
 8012c12:	4619      	mov	r1, r3
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 fded 	bl	80137f4 <buffer_get_float32_auto>
 8012c1a:	eef0 7a40 	vmov.f32	s15, s0
 8012c1e:	4b6e      	ldr	r3, [pc, #440]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c20:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8012c24:	f107 030c 	add.w	r3, r7, #12
 8012c28:	4619      	mov	r1, r3
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 fde2 	bl	80137f4 <buffer_get_float32_auto>
 8012c30:	eef0 7a40 	vmov.f32	s15, s0
 8012c34:	4b68      	ldr	r3, [pc, #416]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c36:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8012c3a:	f107 030c 	add.w	r3, r7, #12
 8012c3e:	4619      	mov	r1, r3
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f000 fdd7 	bl	80137f4 <buffer_get_float32_auto>
 8012c46:	eef0 7a40 	vmov.f32	s15, s0
 8012c4a:	4b63      	ldr	r3, [pc, #396]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c4c:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8012c50:	f107 030c 	add.w	r3, r7, #12
 8012c54:	4619      	mov	r1, r3
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fdcc 	bl	80137f4 <buffer_get_float32_auto>
 8012c5c:	eef0 7a40 	vmov.f32	s15, s0
 8012c60:	4b5d      	ldr	r3, [pc, #372]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c62:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 8012c66:	f107 030c 	add.w	r3, r7, #12
 8012c6a:	4619      	mov	r1, r3
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 fdc1 	bl	80137f4 <buffer_get_float32_auto>
 8012c72:	eef0 7a40 	vmov.f32	s15, s0
 8012c76:	4b58      	ldr	r3, [pc, #352]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c78:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8012c7c:	f107 030c 	add.w	r3, r7, #12
 8012c80:	4619      	mov	r1, r3
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f000 fdb6 	bl	80137f4 <buffer_get_float32_auto>
 8012c88:	eef0 7a40 	vmov.f32	s15, s0
 8012c8c:	4b52      	ldr	r3, [pc, #328]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012c8e:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8012c92:	f107 030c 	add.w	r3, r7, #12
 8012c96:	4619      	mov	r1, r3
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 fdab 	bl	80137f4 <buffer_get_float32_auto>
 8012c9e:	eef0 7a40 	vmov.f32	s15, s0
 8012ca2:	4b4d      	ldr	r3, [pc, #308]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012ca4:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8012ca8:	f107 030c 	add.w	r3, r7, #12
 8012cac:	4619      	mov	r1, r3
 8012cae:	6878      	ldr	r0, [r7, #4]
 8012cb0:	f000 fd0a 	bl	80136c8 <buffer_get_int32>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	4a48      	ldr	r2, [pc, #288]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012cb8:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8012cbc:	f107 030c 	add.w	r3, r7, #12
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	6878      	ldr	r0, [r7, #4]
 8012cc4:	f000 fd96 	bl	80137f4 <buffer_get_float32_auto>
 8012cc8:	eef0 7a40 	vmov.f32	s15, s0
 8012ccc:	4b42      	ldr	r3, [pc, #264]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012cce:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8012cd2:	f107 030c 	add.w	r3, r7, #12
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 fd8b 	bl	80137f4 <buffer_get_float32_auto>
 8012cde:	eef0 7a40 	vmov.f32	s15, s0
 8012ce2:	4b3d      	ldr	r3, [pc, #244]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012ce4:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8012ce8:	f107 030c 	add.w	r3, r7, #12
 8012cec:	4619      	mov	r1, r3
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f000 fd1a 	bl	8013728 <buffer_get_uint32>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	4a38      	ldr	r2, [pc, #224]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012cf8:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	1c5a      	adds	r2, r3, #1
 8012d00:	60fa      	str	r2, [r7, #12]
 8012d02:	461a      	mov	r2, r3
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	4413      	add	r3, r2
 8012d08:	781a      	ldrb	r2, [r3, #0]
 8012d0a:	4b33      	ldr	r3, [pc, #204]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d0c:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	1c5a      	adds	r2, r3, #1
 8012d14:	60fa      	str	r2, [r7, #12]
 8012d16:	461a      	mov	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	4413      	add	r3, r2
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	bf14      	ite	ne
 8012d22:	2301      	movne	r3, #1
 8012d24:	2300      	moveq	r3, #0
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	4b2b      	ldr	r3, [pc, #172]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d2a:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	1c5a      	adds	r2, r3, #1
 8012d32:	60fa      	str	r2, [r7, #12]
 8012d34:	461a      	mov	r2, r3
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4413      	add	r3, r2
 8012d3a:	781a      	ldrb	r2, [r3, #0]
 8012d3c:	4b26      	ldr	r3, [pc, #152]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d3e:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	1c5a      	adds	r2, r3, #1
 8012d46:	60fa      	str	r2, [r7, #12]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b21      	ldr	r3, [pc, #132]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d54:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8012d58:	f107 030c 	add.w	r3, r7, #12
 8012d5c:	4619      	mov	r1, r3
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 fd48 	bl	80137f4 <buffer_get_float32_auto>
 8012d64:	eef0 7a40 	vmov.f32	s15, s0
 8012d68:	4b1b      	ldr	r3, [pc, #108]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d6a:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8012d6e:	f107 030c 	add.w	r3, r7, #12
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 fd3d 	bl	80137f4 <buffer_get_float32_auto>
 8012d7a:	eef0 7a40 	vmov.f32	s15, s0
 8012d7e:	4b16      	ldr	r3, [pc, #88]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d80:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8012d84:	f107 030c 	add.w	r3, r7, #12
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fd32 	bl	80137f4 <buffer_get_float32_auto>
 8012d90:	eef0 7a40 	vmov.f32	s15, s0
 8012d94:	4b10      	ldr	r3, [pc, #64]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012d96:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 8012d9a:	f107 030c 	add.w	r3, r7, #12
 8012d9e:	4619      	mov	r1, r3
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 fd27 	bl	80137f4 <buffer_get_float32_auto>
 8012da6:	eef0 7a40 	vmov.f32	s15, s0
 8012daa:	4b0b      	ldr	r3, [pc, #44]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012dac:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	1c5a      	adds	r2, r3, #1
 8012db4:	60fa      	str	r2, [r7, #12]
 8012db6:	461a      	mov	r2, r3
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	4413      	add	r3, r2
 8012dbc:	781a      	ldrb	r2, [r3, #0]
 8012dbe:	4b06      	ldr	r3, [pc, #24]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012dc0:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 8012dc4:	4b05      	ldr	r3, [pc, #20]	; (8012ddc <bldc_interface_process_packet+0x10a0>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f000 83ff 	beq.w	80135cc <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 8012dce:	4b03      	ldr	r3, [pc, #12]	; (8012ddc <bldc_interface_process_packet+0x10a0>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4801      	ldr	r0, [pc, #4]	; (8012dd8 <bldc_interface_process_packet+0x109c>)
 8012dd4:	4798      	blx	r3
		}
		break;
 8012dd6:	e3f9      	b.n	80135cc <bldc_interface_process_packet+0x1890>
 8012dd8:	200009d4 	.word	0x200009d4
 8012ddc:	20000c64 	.word	0x20000c64

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 8012de4:	f107 030c 	add.w	r3, r7, #12
 8012de8:	4619      	mov	r1, r3
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f000 fc9c 	bl	8013728 <buffer_get_uint32>
 8012df0:	4603      	mov	r3, r0
 8012df2:	4aba      	ldr	r2, [pc, #744]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012df4:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	60fa      	str	r2, [r7, #12]
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	4413      	add	r3, r2
 8012e02:	781a      	ldrb	r2, [r3, #0]
 8012e04:	4bb5      	ldr	r3, [pc, #724]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e06:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8012e08:	f107 030c 	add.w	r3, r7, #12
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 fc8a 	bl	8013728 <buffer_get_uint32>
 8012e14:	4603      	mov	r3, r0
 8012e16:	4ab1      	ldr	r2, [pc, #708]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e18:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8012e1a:	f107 030c 	add.w	r3, r7, #12
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f000 fce7 	bl	80137f4 <buffer_get_float32_auto>
 8012e26:	eef0 7a40 	vmov.f32	s15, s0
 8012e2a:	4bac      	ldr	r3, [pc, #688]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e2c:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	1c5a      	adds	r2, r3, #1
 8012e34:	60fa      	str	r2, [r7, #12]
 8012e36:	461a      	mov	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	bf14      	ite	ne
 8012e42:	2301      	movne	r3, #1
 8012e44:	2300      	moveq	r3, #0
 8012e46:	b2da      	uxtb	r2, r3
 8012e48:	4ba4      	ldr	r3, [pc, #656]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e4a:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8012e4c:	f107 030c 	add.w	r3, r7, #12
 8012e50:	4619      	mov	r1, r3
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fc15 	bl	8013682 <buffer_get_uint16>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	4b9f      	ldr	r3, [pc, #636]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e5e:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	1c5a      	adds	r2, r3, #1
 8012e64:	60fa      	str	r2, [r7, #12]
 8012e66:	461a      	mov	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	4413      	add	r3, r2
 8012e6c:	781a      	ldrb	r2, [r3, #0]
 8012e6e:	4b9b      	ldr	r3, [pc, #620]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e70:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	1c5a      	adds	r2, r3, #1
 8012e76:	60fa      	str	r2, [r7, #12]
 8012e78:	461a      	mov	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	781a      	ldrb	r2, [r3, #0]
 8012e80:	4b96      	ldr	r3, [pc, #600]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e82:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	60fa      	str	r2, [r7, #12]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	4413      	add	r3, r2
 8012e90:	781a      	ldrb	r2, [r3, #0]
 8012e92:	4b92      	ldr	r3, [pc, #584]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012e94:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8012e96:	f107 030c 	add.w	r3, r7, #12
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f000 fca9 	bl	80137f4 <buffer_get_float32_auto>
 8012ea2:	eef0 7a40 	vmov.f32	s15, s0
 8012ea6:	4b8d      	ldr	r3, [pc, #564]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012ea8:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8012eac:	f107 030c 	add.w	r3, r7, #12
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	6878      	ldr	r0, [r7, #4]
 8012eb4:	f000 fc9e 	bl	80137f4 <buffer_get_float32_auto>
 8012eb8:	eef0 7a40 	vmov.f32	s15, s0
 8012ebc:	4b87      	ldr	r3, [pc, #540]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012ebe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8012ec2:	f107 030c 	add.w	r3, r7, #12
 8012ec6:	4619      	mov	r1, r3
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f000 fc93 	bl	80137f4 <buffer_get_float32_auto>
 8012ece:	eef0 7a40 	vmov.f32	s15, s0
 8012ed2:	4b82      	ldr	r3, [pc, #520]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012ed4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8012ed8:	f107 030c 	add.w	r3, r7, #12
 8012edc:	4619      	mov	r1, r3
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 fc88 	bl	80137f4 <buffer_get_float32_auto>
 8012ee4:	eef0 7a40 	vmov.f32	s15, s0
 8012ee8:	4b7c      	ldr	r3, [pc, #496]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012eea:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8012eee:	f107 030c 	add.w	r3, r7, #12
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 fc7d 	bl	80137f4 <buffer_get_float32_auto>
 8012efa:	eef0 7a40 	vmov.f32	s15, s0
 8012efe:	4b77      	ldr	r3, [pc, #476]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f00:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	1c5a      	adds	r2, r3, #1
 8012f08:	60fa      	str	r2, [r7, #12]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	4413      	add	r3, r2
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	bf14      	ite	ne
 8012f16:	2301      	movne	r3, #1
 8012f18:	2300      	moveq	r3, #0
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	4b6f      	ldr	r3, [pc, #444]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	1c5a      	adds	r2, r3, #1
 8012f26:	60fa      	str	r2, [r7, #12]
 8012f28:	461a      	mov	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	bf14      	ite	ne
 8012f34:	2301      	movne	r3, #1
 8012f36:	2300      	moveq	r3, #0
 8012f38:	b2da      	uxtb	r2, r3
 8012f3a:	4b68      	ldr	r3, [pc, #416]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8012f40:	f107 030c 	add.w	r3, r7, #12
 8012f44:	4619      	mov	r1, r3
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f000 fc54 	bl	80137f4 <buffer_get_float32_auto>
 8012f4c:	eef0 7a40 	vmov.f32	s15, s0
 8012f50:	4b62      	ldr	r3, [pc, #392]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f52:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8012f56:	f107 030c 	add.w	r3, r7, #12
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fc49 	bl	80137f4 <buffer_get_float32_auto>
 8012f62:	eef0 7a40 	vmov.f32	s15, s0
 8012f66:	4b5d      	ldr	r3, [pc, #372]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f68:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	1c5a      	adds	r2, r3, #1
 8012f70:	60fa      	str	r2, [r7, #12]
 8012f72:	461a      	mov	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	4413      	add	r3, r2
 8012f78:	781a      	ldrb	r2, [r3, #0]
 8012f7a:	4b58      	ldr	r3, [pc, #352]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8012f80:	f107 030c 	add.w	r3, r7, #12
 8012f84:	4619      	mov	r1, r3
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 fc34 	bl	80137f4 <buffer_get_float32_auto>
 8012f8c:	eef0 7a40 	vmov.f32	s15, s0
 8012f90:	4b52      	ldr	r3, [pc, #328]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012f92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8012f96:	f107 030c 	add.w	r3, r7, #12
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f000 fc29 	bl	80137f4 <buffer_get_float32_auto>
 8012fa2:	eef0 7a40 	vmov.f32	s15, s0
 8012fa6:	4b4d      	ldr	r3, [pc, #308]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012fa8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	1c5a      	adds	r2, r3, #1
 8012fb0:	60fa      	str	r2, [r7, #12]
 8012fb2:	461a      	mov	r2, r3
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	bf14      	ite	ne
 8012fbe:	2301      	movne	r3, #1
 8012fc0:	2300      	moveq	r3, #0
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	4b45      	ldr	r3, [pc, #276]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012fc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	1c5a      	adds	r2, r3, #1
 8012fce:	60fa      	str	r2, [r7, #12]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	bf14      	ite	ne
 8012fdc:	2301      	movne	r3, #1
 8012fde:	2300      	moveq	r3, #0
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	4b3e      	ldr	r3, [pc, #248]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012fe4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8012fe8:	f107 030c 	add.w	r3, r7, #12
 8012fec:	4619      	mov	r1, r3
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 fc00 	bl	80137f4 <buffer_get_float32_auto>
 8012ff4:	eef0 7a40 	vmov.f32	s15, s0
 8012ff8:	4b38      	ldr	r3, [pc, #224]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8012ffa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	1c5a      	adds	r2, r3, #1
 8013002:	60fa      	str	r2, [r7, #12]
 8013004:	461a      	mov	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4413      	add	r3, r2
 801300a:	781a      	ldrb	r2, [r3, #0]
 801300c:	4b33      	ldr	r3, [pc, #204]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 801300e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8013012:	f107 030c 	add.w	r3, r7, #12
 8013016:	4619      	mov	r1, r3
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f000 fbeb 	bl	80137f4 <buffer_get_float32_auto>
 801301e:	eef0 7a40 	vmov.f32	s15, s0
 8013022:	4b2e      	ldr	r3, [pc, #184]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8013024:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8013028:	f107 030c 	add.w	r3, r7, #12
 801302c:	4619      	mov	r1, r3
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f000 fbe0 	bl	80137f4 <buffer_get_float32_auto>
 8013034:	eef0 7a40 	vmov.f32	s15, s0
 8013038:	4b28      	ldr	r3, [pc, #160]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 801303a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 801303e:	f107 030c 	add.w	r3, r7, #12
 8013042:	4619      	mov	r1, r3
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 fbd5 	bl	80137f4 <buffer_get_float32_auto>
 801304a:	eef0 7a40 	vmov.f32	s15, s0
 801304e:	4b23      	ldr	r3, [pc, #140]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8013050:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8013054:	f107 030c 	add.w	r3, r7, #12
 8013058:	4619      	mov	r1, r3
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f000 fbca 	bl	80137f4 <buffer_get_float32_auto>
 8013060:	eef0 7a40 	vmov.f32	s15, s0
 8013064:	4b1d      	ldr	r3, [pc, #116]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8013066:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 801306a:	f107 030c 	add.w	r3, r7, #12
 801306e:	4619      	mov	r1, r3
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 fbbf 	bl	80137f4 <buffer_get_float32_auto>
 8013076:	eef0 7a40 	vmov.f32	s15, s0
 801307a:	4b18      	ldr	r3, [pc, #96]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 801307c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8013080:	f107 030c 	add.w	r3, r7, #12
 8013084:	4619      	mov	r1, r3
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 fbb4 	bl	80137f4 <buffer_get_float32_auto>
 801308c:	eef0 7a40 	vmov.f32	s15, s0
 8013090:	4b12      	ldr	r3, [pc, #72]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 8013092:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	1c5a      	adds	r2, r3, #1
 801309a:	60fa      	str	r2, [r7, #12]
 801309c:	461a      	mov	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	4413      	add	r3, r2
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	bf14      	ite	ne
 80130a8:	2301      	movne	r3, #1
 80130aa:	2300      	moveq	r3, #0
 80130ac:	b2da      	uxtb	r2, r3
 80130ae:	4b0b      	ldr	r3, [pc, #44]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 80130b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	60fa      	str	r2, [r7, #12]
 80130ba:	461a      	mov	r2, r3
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	4413      	add	r3, r2
 80130c0:	781b      	ldrb	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	bf14      	ite	ne
 80130c6:	2301      	movne	r3, #1
 80130c8:	2300      	moveq	r3, #0
 80130ca:	b2da      	uxtb	r2, r3
 80130cc:	4b03      	ldr	r3, [pc, #12]	; (80130dc <bldc_interface_process_packet+0x13a0>)
 80130ce:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	1c5a      	adds	r2, r3, #1
 80130d6:	60fa      	str	r2, [r7, #12]
 80130d8:	e002      	b.n	80130e0 <bldc_interface_process_packet+0x13a4>
 80130da:	bf00      	nop
 80130dc:	20000b5c 	.word	0x20000b5c
 80130e0:	461a      	mov	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4413      	add	r3, r2
 80130e6:	781b      	ldrb	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	bf14      	ite	ne
 80130ec:	2301      	movne	r3, #1
 80130ee:	2300      	moveq	r3, #0
 80130f0:	b2da      	uxtb	r2, r3
 80130f2:	4bb7      	ldr	r3, [pc, #732]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80130f4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	1c5a      	adds	r2, r3, #1
 80130fc:	60fa      	str	r2, [r7, #12]
 80130fe:	461a      	mov	r2, r3
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	4413      	add	r3, r2
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	bf14      	ite	ne
 801310a:	2301      	movne	r3, #1
 801310c:	2300      	moveq	r3, #0
 801310e:	b2da      	uxtb	r2, r3
 8013110:	4baf      	ldr	r3, [pc, #700]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013112:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	1c5a      	adds	r2, r3, #1
 801311a:	60fa      	str	r2, [r7, #12]
 801311c:	461a      	mov	r2, r3
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	4413      	add	r3, r2
 8013122:	781b      	ldrb	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	bf14      	ite	ne
 8013128:	2301      	movne	r3, #1
 801312a:	2300      	moveq	r3, #0
 801312c:	b2da      	uxtb	r2, r3
 801312e:	4ba8      	ldr	r3, [pc, #672]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013130:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	1c5a      	adds	r2, r3, #1
 8013138:	60fa      	str	r2, [r7, #12]
 801313a:	461a      	mov	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	4413      	add	r3, r2
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	bf14      	ite	ne
 8013146:	2301      	movne	r3, #1
 8013148:	2300      	moveq	r3, #0
 801314a:	b2da      	uxtb	r2, r3
 801314c:	4ba0      	ldr	r3, [pc, #640]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801314e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8013152:	f107 030c 	add.w	r3, r7, #12
 8013156:	4619      	mov	r1, r3
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 fb4b 	bl	80137f4 <buffer_get_float32_auto>
 801315e:	eef0 7a40 	vmov.f32	s15, s0
 8013162:	4b9b      	ldr	r3, [pc, #620]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013164:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8013168:	f107 030c 	add.w	r3, r7, #12
 801316c:	4619      	mov	r1, r3
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 fb40 	bl	80137f4 <buffer_get_float32_auto>
 8013174:	eef0 7a40 	vmov.f32	s15, s0
 8013178:	4b95      	ldr	r3, [pc, #596]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801317a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	1c5a      	adds	r2, r3, #1
 8013182:	60fa      	str	r2, [r7, #12]
 8013184:	461a      	mov	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	4413      	add	r3, r2
 801318a:	781a      	ldrb	r2, [r3, #0]
 801318c:	4b90      	ldr	r3, [pc, #576]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801318e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8013192:	f107 030c 	add.w	r3, r7, #12
 8013196:	4619      	mov	r1, r3
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f000 fb2b 	bl	80137f4 <buffer_get_float32_auto>
 801319e:	eef0 7a40 	vmov.f32	s15, s0
 80131a2:	4b8b      	ldr	r3, [pc, #556]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80131a4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80131a8:	f107 030c 	add.w	r3, r7, #12
 80131ac:	4619      	mov	r1, r3
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 fb20 	bl	80137f4 <buffer_get_float32_auto>
 80131b4:	eef0 7a40 	vmov.f32	s15, s0
 80131b8:	4b85      	ldr	r3, [pc, #532]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80131ba:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	1c5a      	adds	r2, r3, #1
 80131c2:	60fa      	str	r2, [r7, #12]
 80131c4:	461a      	mov	r2, r3
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	4413      	add	r3, r2
 80131ca:	781b      	ldrb	r3, [r3, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	bf14      	ite	ne
 80131d0:	2301      	movne	r3, #1
 80131d2:	2300      	moveq	r3, #0
 80131d4:	b2da      	uxtb	r2, r3
 80131d6:	4b7e      	ldr	r3, [pc, #504]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80131d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	1c5a      	adds	r2, r3, #1
 80131e0:	60fa      	str	r2, [r7, #12]
 80131e2:	461a      	mov	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	4413      	add	r3, r2
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	bf14      	ite	ne
 80131ee:	2301      	movne	r3, #1
 80131f0:	2300      	moveq	r3, #0
 80131f2:	b2da      	uxtb	r2, r3
 80131f4:	4b76      	ldr	r3, [pc, #472]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80131f6:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 80131fa:	f107 030c 	add.w	r3, r7, #12
 80131fe:	4619      	mov	r1, r3
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f000 faf7 	bl	80137f4 <buffer_get_float32_auto>
 8013206:	eef0 7a40 	vmov.f32	s15, s0
 801320a:	4b71      	ldr	r3, [pc, #452]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801320c:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 8013210:	f107 030c 	add.w	r3, r7, #12
 8013214:	4619      	mov	r1, r3
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 fa33 	bl	8013682 <buffer_get_uint16>
 801321c:	4603      	mov	r3, r0
 801321e:	461a      	mov	r2, r3
 8013220:	4b6b      	ldr	r3, [pc, #428]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013222:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8013226:	f107 030c 	add.w	r3, r7, #12
 801322a:	4619      	mov	r1, r3
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 fa7b 	bl	8013728 <buffer_get_uint32>
 8013232:	4603      	mov	r3, r0
 8013234:	4a66      	ldr	r2, [pc, #408]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	1c5a      	adds	r2, r3, #1
 801323e:	60fa      	str	r2, [r7, #12]
 8013240:	461a      	mov	r2, r3
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	4413      	add	r3, r2
 8013246:	781a      	ldrb	r2, [r3, #0]
 8013248:	4b61      	ldr	r3, [pc, #388]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801324a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 801324e:	f107 030c 	add.w	r3, r7, #12
 8013252:	4619      	mov	r1, r3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f000 facd 	bl	80137f4 <buffer_get_float32_auto>
 801325a:	eef0 7a40 	vmov.f32	s15, s0
 801325e:	4b5c      	ldr	r3, [pc, #368]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013260:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8013264:	f107 030c 	add.w	r3, r7, #12
 8013268:	4619      	mov	r1, r3
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 fac2 	bl	80137f4 <buffer_get_float32_auto>
 8013270:	eef0 7a40 	vmov.f32	s15, s0
 8013274:	4b56      	ldr	r3, [pc, #344]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013276:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 801327a:	f107 030c 	add.w	r3, r7, #12
 801327e:	4619      	mov	r1, r3
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f000 fab7 	bl	80137f4 <buffer_get_float32_auto>
 8013286:	eef0 7a40 	vmov.f32	s15, s0
 801328a:	4b51      	ldr	r3, [pc, #324]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801328c:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8013290:	f107 030c 	add.w	r3, r7, #12
 8013294:	4619      	mov	r1, r3
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f000 faac 	bl	80137f4 <buffer_get_float32_auto>
 801329c:	eef0 7a40 	vmov.f32	s15, s0
 80132a0:	4b4b      	ldr	r3, [pc, #300]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80132a2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80132a6:	f107 030c 	add.w	r3, r7, #12
 80132aa:	4619      	mov	r1, r3
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 faa1 	bl	80137f4 <buffer_get_float32_auto>
 80132b2:	eef0 7a40 	vmov.f32	s15, s0
 80132b6:	4b46      	ldr	r3, [pc, #280]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80132b8:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80132bc:	f107 030c 	add.w	r3, r7, #12
 80132c0:	4619      	mov	r1, r3
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 fa96 	bl	80137f4 <buffer_get_float32_auto>
 80132c8:	eef0 7a40 	vmov.f32	s15, s0
 80132cc:	4b40      	ldr	r3, [pc, #256]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80132ce:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	1c5a      	adds	r2, r3, #1
 80132d6:	60fa      	str	r2, [r7, #12]
 80132d8:	461a      	mov	r2, r3
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	4413      	add	r3, r2
 80132de:	781a      	ldrb	r2, [r3, #0]
 80132e0:	4b3b      	ldr	r3, [pc, #236]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80132e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	1c5a      	adds	r2, r3, #1
 80132ea:	60fa      	str	r2, [r7, #12]
 80132ec:	461a      	mov	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	4413      	add	r3, r2
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	bf14      	ite	ne
 80132f8:	2301      	movne	r3, #1
 80132fa:	2300      	moveq	r3, #0
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	4b34      	ldr	r3, [pc, #208]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013300:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	60fa      	str	r2, [r7, #12]
 801330a:	461a      	mov	r2, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	4413      	add	r3, r2
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	bf14      	ite	ne
 8013316:	2301      	movne	r3, #1
 8013318:	2300      	moveq	r3, #0
 801331a:	b2da      	uxtb	r2, r3
 801331c:	4b2c      	ldr	r3, [pc, #176]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801331e:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8013322:	f107 030c 	add.w	r3, r7, #12
 8013326:	4619      	mov	r1, r3
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f000 fa63 	bl	80137f4 <buffer_get_float32_auto>
 801332e:	eef0 7a40 	vmov.f32	s15, s0
 8013332:	4b27      	ldr	r3, [pc, #156]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013334:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	1c5a      	adds	r2, r3, #1
 801333c:	60fa      	str	r2, [r7, #12]
 801333e:	461a      	mov	r2, r3
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	4413      	add	r3, r2
 8013344:	781a      	ldrb	r2, [r3, #0]
 8013346:	4b22      	ldr	r3, [pc, #136]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013348:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	60fa      	str	r2, [r7, #12]
 8013352:	461a      	mov	r2, r3
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4413      	add	r3, r2
 8013358:	781a      	ldrb	r2, [r3, #0]
 801335a:	4b1d      	ldr	r3, [pc, #116]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 801335c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	1c5a      	adds	r2, r3, #1
 8013364:	60fa      	str	r2, [r7, #12]
 8013366:	461a      	mov	r2, r3
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	4413      	add	r3, r2
 801336c:	781a      	ldrb	r2, [r3, #0]
 801336e:	4b18      	ldr	r3, [pc, #96]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013370:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	1c5a      	adds	r2, r3, #1
 8013378:	60fa      	str	r2, [r7, #12]
 801337a:	461a      	mov	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	4413      	add	r3, r2
 8013380:	781a      	ldrb	r2, [r3, #0]
 8013382:	4b13      	ldr	r3, [pc, #76]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013384:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	1c5a      	adds	r2, r3, #1
 801338c:	60fa      	str	r2, [r7, #12]
 801338e:	461a      	mov	r2, r3
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	4413      	add	r3, r2
 8013394:	781a      	ldrb	r2, [r3, #0]
 8013396:	4b0e      	ldr	r3, [pc, #56]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 8013398:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	1c5a      	adds	r2, r3, #1
 80133a0:	60fa      	str	r2, [r7, #12]
 80133a2:	461a      	mov	r2, r3
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	4413      	add	r3, r2
 80133a8:	781a      	ldrb	r2, [r3, #0]
 80133aa:	4b09      	ldr	r3, [pc, #36]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80133ac:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	461a      	mov	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	441a      	add	r2, r3
 80133b8:	4b05      	ldr	r3, [pc, #20]	; (80133d0 <bldc_interface_process_packet+0x1694>)
 80133ba:	33c6      	adds	r3, #198	; 0xc6
 80133bc:	8811      	ldrh	r1, [r2, #0]
 80133be:	7892      	ldrb	r2, [r2, #2]
 80133c0:	8019      	strh	r1, [r3, #0]
 80133c2:	709a      	strb	r2, [r3, #2]
		ind += 3;
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	3303      	adds	r3, #3
 80133c8:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	e002      	b.n	80133d4 <bldc_interface_process_packet+0x1698>
 80133ce:	bf00      	nop
 80133d0:	20000b5c 	.word	0x20000b5c
 80133d4:	1c5a      	adds	r2, r3, #1
 80133d6:	60fa      	str	r2, [r7, #12]
 80133d8:	461a      	mov	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	4413      	add	r3, r2
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bf14      	ite	ne
 80133e4:	2301      	movne	r3, #1
 80133e6:	2300      	moveq	r3, #0
 80133e8:	b2da      	uxtb	r2, r3
 80133ea:	4b81      	ldr	r3, [pc, #516]	; (80135f0 <bldc_interface_process_packet+0x18b4>)
 80133ec:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 80133f0:	4b80      	ldr	r3, [pc, #512]	; (80135f4 <bldc_interface_process_packet+0x18b8>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f000 80eb 	beq.w	80135d0 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 80133fa:	4b7e      	ldr	r3, [pc, #504]	; (80135f4 <bldc_interface_process_packet+0x18b8>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	487c      	ldr	r0, [pc, #496]	; (80135f0 <bldc_interface_process_packet+0x18b4>)
 8013400:	4798      	blx	r3
		}
		break;
 8013402:	e0e5      	b.n	80135d0 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8013404:	2300      	movs	r3, #0
 8013406:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8013408:	f107 030c 	add.w	r3, r7, #12
 801340c:	4619      	mov	r1, r3
 801340e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80135f8 <bldc_interface_process_packet+0x18bc>
 8013412:	6878      	ldr	r0, [r7, #4]
 8013414:	f000 f9d3 	bl	80137be <buffer_get_float32>
 8013418:	eef0 7a40 	vmov.f32	s15, s0
 801341c:	4b77      	ldr	r3, [pc, #476]	; (80135fc <bldc_interface_process_packet+0x18c0>)
 801341e:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8013422:	f107 030c 	add.w	r3, r7, #12
 8013426:	4619      	mov	r1, r3
 8013428:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80135f8 <bldc_interface_process_packet+0x18bc>
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 f9c6 	bl	80137be <buffer_get_float32>
 8013432:	eef0 7a40 	vmov.f32	s15, s0
 8013436:	4b72      	ldr	r3, [pc, #456]	; (8013600 <bldc_interface_process_packet+0x18c4>)
 8013438:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 801343c:	2300      	movs	r3, #0
 801343e:	61bb      	str	r3, [r7, #24]
 8013440:	e00f      	b.n	8013462 <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	1c5a      	adds	r2, r3, #1
 8013446:	60fa      	str	r2, [r7, #12]
 8013448:	461a      	mov	r2, r3
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	4413      	add	r3, r2
 801344e:	781b      	ldrb	r3, [r3, #0]
 8013450:	b259      	sxtb	r1, r3
 8013452:	4a6c      	ldr	r2, [pc, #432]	; (8013604 <bldc_interface_process_packet+0x18c8>)
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	4413      	add	r3, r2
 8013458:	460a      	mov	r2, r1
 801345a:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	3301      	adds	r3, #1
 8013460:	61bb      	str	r3, [r7, #24]
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	2b07      	cmp	r3, #7
 8013466:	ddec      	ble.n	8013442 <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	60fa      	str	r2, [r7, #12]
 801346e:	461a      	mov	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4413      	add	r3, r2
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	b25a      	sxtb	r2, r3
 8013478:	4b63      	ldr	r3, [pc, #396]	; (8013608 <bldc_interface_process_packet+0x18cc>)
 801347a:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 801347c:	4b63      	ldr	r3, [pc, #396]	; (801360c <bldc_interface_process_packet+0x18d0>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	f000 80a7 	beq.w	80135d4 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8013486:	4b61      	ldr	r3, [pc, #388]	; (801360c <bldc_interface_process_packet+0x18d0>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	4a5c      	ldr	r2, [pc, #368]	; (80135fc <bldc_interface_process_packet+0x18c0>)
 801348c:	edd2 7a00 	vldr	s15, [r2]
 8013490:	4a5b      	ldr	r2, [pc, #364]	; (8013600 <bldc_interface_process_packet+0x18c4>)
 8013492:	ed92 7a00 	vldr	s14, [r2]
 8013496:	4a5c      	ldr	r2, [pc, #368]	; (8013608 <bldc_interface_process_packet+0x18cc>)
 8013498:	f992 2000 	ldrsb.w	r2, [r2]
 801349c:	4611      	mov	r1, r2
 801349e:	4859      	ldr	r0, [pc, #356]	; (8013604 <bldc_interface_process_packet+0x18c8>)
 80134a0:	eef0 0a47 	vmov.f32	s1, s14
 80134a4:	eeb0 0a67 	vmov.f32	s0, s15
 80134a8:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 80134aa:	e093      	b.n	80135d4 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 80134b0:	f107 030c 	add.w	r3, r7, #12
 80134b4:	4619      	mov	r1, r3
 80134b6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8013610 <bldc_interface_process_packet+0x18d4>
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 f97f 	bl	80137be <buffer_get_float32>
 80134c0:	eef0 7a40 	vmov.f32	s15, s0
 80134c4:	4b53      	ldr	r3, [pc, #332]	; (8013614 <bldc_interface_process_packet+0x18d8>)
 80134c6:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 80134ca:	f107 030c 	add.w	r3, r7, #12
 80134ce:	4619      	mov	r1, r3
 80134d0:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8013610 <bldc_interface_process_packet+0x18d4>
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f000 f972 	bl	80137be <buffer_get_float32>
 80134da:	eef0 7a40 	vmov.f32	s15, s0
 80134de:	4b4e      	ldr	r3, [pc, #312]	; (8013618 <bldc_interface_process_packet+0x18dc>)
 80134e0:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 80134e4:	4b4d      	ldr	r3, [pc, #308]	; (801361c <bldc_interface_process_packet+0x18e0>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d075      	beq.n	80135d8 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 80134ec:	4b4b      	ldr	r3, [pc, #300]	; (801361c <bldc_interface_process_packet+0x18e0>)
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	4a48      	ldr	r2, [pc, #288]	; (8013614 <bldc_interface_process_packet+0x18d8>)
 80134f2:	edd2 7a00 	vldr	s15, [r2]
 80134f6:	4a48      	ldr	r2, [pc, #288]	; (8013618 <bldc_interface_process_packet+0x18dc>)
 80134f8:	ed92 7a00 	vldr	s14, [r2]
 80134fc:	eef0 0a47 	vmov.f32	s1, s14
 8013500:	eeb0 0a67 	vmov.f32	s0, s15
 8013504:	4798      	blx	r3
		}
		break;
 8013506:	e067      	b.n	80135d8 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8013508:	2300      	movs	r3, #0
 801350a:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 801350c:	f107 030c 	add.w	r3, r7, #12
 8013510:	4619      	mov	r1, r3
 8013512:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8013610 <bldc_interface_process_packet+0x18d4>
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 f951 	bl	80137be <buffer_get_float32>
 801351c:	eef0 7a40 	vmov.f32	s15, s0
 8013520:	4b3f      	ldr	r3, [pc, #252]	; (8013620 <bldc_interface_process_packet+0x18e4>)
 8013522:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8013526:	f107 030c 	add.w	r3, r7, #12
 801352a:	4619      	mov	r1, r3
 801352c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8013610 <bldc_interface_process_packet+0x18d4>
 8013530:	6878      	ldr	r0, [r7, #4]
 8013532:	f000 f944 	bl	80137be <buffer_get_float32>
 8013536:	eef0 7a40 	vmov.f32	s15, s0
 801353a:	4b3a      	ldr	r3, [pc, #232]	; (8013624 <bldc_interface_process_packet+0x18e8>)
 801353c:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8013540:	4b39      	ldr	r3, [pc, #228]	; (8013628 <bldc_interface_process_packet+0x18ec>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d049      	beq.n	80135dc <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8013548:	4b37      	ldr	r3, [pc, #220]	; (8013628 <bldc_interface_process_packet+0x18ec>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a34      	ldr	r2, [pc, #208]	; (8013620 <bldc_interface_process_packet+0x18e4>)
 801354e:	edd2 7a00 	vldr	s15, [r2]
 8013552:	4a34      	ldr	r2, [pc, #208]	; (8013624 <bldc_interface_process_packet+0x18e8>)
 8013554:	ed92 7a00 	vldr	s14, [r2]
 8013558:	eef0 0a47 	vmov.f32	s1, s14
 801355c:	eeb0 0a67 	vmov.f32	s0, s15
 8013560:	4798      	blx	r3
		}
		break;
 8013562:	e03b      	b.n	80135dc <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8013564:	2300      	movs	r3, #0
 8013566:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8013568:	f107 030c 	add.w	r3, r7, #12
 801356c:	4619      	mov	r1, r3
 801356e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8013610 <bldc_interface_process_packet+0x18d4>
 8013572:	6878      	ldr	r0, [r7, #4]
 8013574:	f000 f923 	bl	80137be <buffer_get_float32>
 8013578:	eef0 7a40 	vmov.f32	s15, s0
 801357c:	4b2b      	ldr	r3, [pc, #172]	; (801362c <bldc_interface_process_packet+0x18f0>)
 801357e:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8013582:	4b2b      	ldr	r3, [pc, #172]	; (8013630 <bldc_interface_process_packet+0x18f4>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d02a      	beq.n	80135e0 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 801358a:	4b29      	ldr	r3, [pc, #164]	; (8013630 <bldc_interface_process_packet+0x18f4>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	4a27      	ldr	r2, [pc, #156]	; (801362c <bldc_interface_process_packet+0x18f0>)
 8013590:	edd2 7a00 	vldr	s15, [r2]
 8013594:	eeb0 0a67 	vmov.f32	s0, s15
 8013598:	4798      	blx	r3
		}
		break;
 801359a:	e021      	b.n	80135e0 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 801359c:	4b25      	ldr	r3, [pc, #148]	; (8013634 <bldc_interface_process_packet+0x18f8>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d01f      	beq.n	80135e4 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 80135a4:	4b23      	ldr	r3, [pc, #140]	; (8013634 <bldc_interface_process_packet+0x18f8>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4798      	blx	r3
		}
		break;
 80135aa:	e01b      	b.n	80135e4 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 80135ac:	4b22      	ldr	r3, [pc, #136]	; (8013638 <bldc_interface_process_packet+0x18fc>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d019      	beq.n	80135e8 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 80135b4:	4b20      	ldr	r3, [pc, #128]	; (8013638 <bldc_interface_process_packet+0x18fc>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4798      	blx	r3
		}
		break;
 80135ba:	e015      	b.n	80135e8 <bldc_interface_process_packet+0x18ac>
		return;
 80135bc:	bf00      	nop
 80135be:	e014      	b.n	80135ea <bldc_interface_process_packet+0x18ae>

	default:
		break;
 80135c0:	bf00      	nop
 80135c2:	e012      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135c4:	bf00      	nop
 80135c6:	e010      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135c8:	bf00      	nop
 80135ca:	e00e      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135cc:	bf00      	nop
 80135ce:	e00c      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135d0:	bf00      	nop
 80135d2:	e00a      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135d4:	bf00      	nop
 80135d6:	e008      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135d8:	bf00      	nop
 80135da:	e006      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135dc:	bf00      	nop
 80135de:	e004      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135e0:	bf00      	nop
 80135e2:	e002      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135e4:	bf00      	nop
 80135e6:	e000      	b.n	80135ea <bldc_interface_process_packet+0x18ae>
		break;
 80135e8:	bf00      	nop
	}
}
 80135ea:	3720      	adds	r7, #32
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	20000b5c 	.word	0x20000b5c
 80135f4:	20000c68 	.word	0x20000c68
 80135f8:	447a0000 	.word	0x447a0000
 80135fc:	20000c28 	.word	0x20000c28
 8013600:	20000c2c 	.word	0x20000c2c
 8013604:	20000c30 	.word	0x20000c30
 8013608:	20000c38 	.word	0x20000c38
 801360c:	20000c6c 	.word	0x20000c6c
 8013610:	49742400 	.word	0x49742400
 8013614:	20000c3c 	.word	0x20000c3c
 8013618:	20000c40 	.word	0x20000c40
 801361c:	20000c70 	.word	0x20000c70
 8013620:	20000c44 	.word	0x20000c44
 8013624:	20000c48 	.word	0x20000c48
 8013628:	20000c74 	.word	0x20000c74
 801362c:	20000c4c 	.word	0x20000c4c
 8013630:	20000c78 	.word	0x20000c78
 8013634:	20000c7c 	.word	0x20000c7c
 8013638:	20000c80 	.word	0x20000c80

0801363c <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 801363c:	b480      	push	{r7}
 801363e:	b085      	sub	sp, #20
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	461a      	mov	r2, r3
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4413      	add	r3, r2
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	021b      	lsls	r3, r3, #8
 8013654:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	3301      	adds	r3, #1
 801365c:	6879      	ldr	r1, [r7, #4]
 801365e:	440b      	add	r3, r1
 8013660:	781b      	ldrb	r3, [r3, #0]
 8013662:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8013664:	4313      	orrs	r3, r2
 8013666:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	1c9a      	adds	r2, r3, #2
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	601a      	str	r2, [r3, #0]
	return res;
 8013672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr

08013682 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8013682:	b480      	push	{r7}
 8013684:	b085      	sub	sp, #20
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
 801368a:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	461a      	mov	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4413      	add	r3, r2
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	021b      	lsls	r3, r3, #8
 801369a:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	3301      	adds	r3, #1
 80136a2:	6879      	ldr	r1, [r7, #4]
 80136a4:	440b      	add	r3, r1
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80136aa:	4313      	orrs	r3, r2
 80136ac:	b21b      	sxth	r3, r3
 80136ae:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	1c9a      	adds	r2, r3, #2
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	601a      	str	r2, [r3, #0]
	return res;
 80136ba:	89fb      	ldrh	r3, [r7, #14]
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr

080136c8 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80136c8:	b480      	push	{r7}
 80136ca:	b085      	sub	sp, #20
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	461a      	mov	r2, r3
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	4413      	add	r3, r2
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	3301      	adds	r3, #1
 80136e6:	6879      	ldr	r1, [r7, #4]
 80136e8:	440b      	add	r3, r1
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80136ee:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3302      	adds	r3, #2
 80136f6:	6879      	ldr	r1, [r7, #4]
 80136f8:	440b      	add	r3, r1
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 80136fe:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	6812      	ldr	r2, [r2, #0]
 8013704:	3203      	adds	r2, #3
 8013706:	6879      	ldr	r1, [r7, #4]
 8013708:	440a      	add	r2, r1
 801370a:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 801370c:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 801370e:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	1d1a      	adds	r2, r3, #4
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	601a      	str	r2, [r3, #0]
	return res;
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	4618      	mov	r0, r3
 801371e:	3714      	adds	r7, #20
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	461a      	mov	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	4413      	add	r3, r2
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	3301      	adds	r3, #1
 8013746:	6879      	ldr	r1, [r7, #4]
 8013748:	440b      	add	r3, r1
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 801374e:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	3302      	adds	r3, #2
 8013756:	6879      	ldr	r1, [r7, #4]
 8013758:	440b      	add	r3, r1
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 801375e:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8013760:	683a      	ldr	r2, [r7, #0]
 8013762:	6812      	ldr	r2, [r2, #0]
 8013764:	3203      	adds	r2, #3
 8013766:	6879      	ldr	r1, [r7, #4]
 8013768:	440a      	add	r2, r1
 801376a:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 801376c:	4313      	orrs	r3, r2
 801376e:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	1d1a      	adds	r2, r3, #4
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	601a      	str	r2, [r3, #0]
	return res;
 801377a:	68fb      	ldr	r3, [r7, #12]
}
 801377c:	4618      	mov	r0, r3
 801377e:	3714      	adds	r7, #20
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	ed87 0a02 	vstr	s0, [r7, #8]
 8013794:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8013796:	6879      	ldr	r1, [r7, #4]
 8013798:	68f8      	ldr	r0, [r7, #12]
 801379a:	f7ff ff4f 	bl	801363c <buffer_get_int16>
 801379e:	4603      	mov	r3, r0
 80137a0:	ee07 3a90 	vmov	s15, r3
 80137a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80137a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80137ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80137b0:	eef0 7a66 	vmov.f32	s15, s13
}
 80137b4:	eeb0 0a67 	vmov.f32	s0, s15
 80137b8:	3710      	adds	r7, #16
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}

080137be <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80137be:	b580      	push	{r7, lr}
 80137c0:	b084      	sub	sp, #16
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	60f8      	str	r0, [r7, #12]
 80137c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80137ca:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80137cc:	6879      	ldr	r1, [r7, #4]
 80137ce:	68f8      	ldr	r0, [r7, #12]
 80137d0:	f7ff ff7a 	bl	80136c8 <buffer_get_int32>
 80137d4:	ee07 0a90 	vmov	s15, r0
 80137d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80137dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80137e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80137e4:	eef0 7a66 	vmov.f32	s15, s13
}
 80137e8:	eeb0 0a67 	vmov.f32	s0, s15
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}
	...

080137f4 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b088      	sub	sp, #32
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80137fe:	6839      	ldr	r1, [r7, #0]
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7ff ff91 	bl	8013728 <buffer_get_uint32>
 8013806:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8013808:	697b      	ldr	r3, [r7, #20]
 801380a:	0ddb      	lsrs	r3, r3, #23
 801380c:	b2db      	uxtb	r3, r3
 801380e:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013816:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801381e:	2b00      	cmp	r3, #0
 8013820:	bf14      	ite	ne
 8013822:	2301      	movne	r3, #1
 8013824:	2300      	moveq	r3, #0
 8013826:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8013828:	f04f 0300 	mov.w	r3, #0
 801382c:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 801382e:	69fb      	ldr	r3, [r7, #28]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <buffer_get_float32_auto+0x46>
 8013834:	693b      	ldr	r3, [r7, #16]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d021      	beq.n	801387e <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	ee07 3a90 	vmov	s15, r3
 8013840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013844:	ee17 0a90 	vmov	r0, s15
 8013848:	f7ec fe7e 	bl	8000548 <__aeabi_f2d>
 801384c:	f04f 0200 	mov.w	r2, #0
 8013850:	4b15      	ldr	r3, [pc, #84]	; (80138a8 <buffer_get_float32_auto+0xb4>)
 8013852:	f7ec fffb 	bl	800084c <__aeabi_ddiv>
 8013856:	4602      	mov	r2, r0
 8013858:	460b      	mov	r3, r1
 801385a:	4610      	mov	r0, r2
 801385c:	4619      	mov	r1, r3
 801385e:	f04f 0200 	mov.w	r2, #0
 8013862:	4b12      	ldr	r3, [pc, #72]	; (80138ac <buffer_get_float32_auto+0xb8>)
 8013864:	f7ec fd12 	bl	800028c <__adddf3>
 8013868:	4602      	mov	r2, r0
 801386a:	460b      	mov	r3, r1
 801386c:	4610      	mov	r0, r2
 801386e:	4619      	mov	r1, r3
 8013870:	f7ed f9ba 	bl	8000be8 <__aeabi_d2f>
 8013874:	4603      	mov	r3, r0
 8013876:	61bb      	str	r3, [r7, #24]
		e -= 126;
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	3b7e      	subs	r3, #126	; 0x7e
 801387c:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 801387e:	7bfb      	ldrb	r3, [r7, #15]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d005      	beq.n	8013890 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 8013884:	edd7 7a06 	vldr	s15, [r7, #24]
 8013888:	eef1 7a67 	vneg.f32	s15, s15
 801388c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8013890:	69f8      	ldr	r0, [r7, #28]
 8013892:	ed97 0a06 	vldr	s0, [r7, #24]
 8013896:	f00c f995 	bl	801fbc4 <ldexpf>
 801389a:	eef0 7a40 	vmov.f32	s15, s0
}
 801389e:	eeb0 0a67 	vmov.f32	s0, s15
 80138a2:	3720      	adds	r7, #32
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd80      	pop	{r7, pc}
 80138a8:	41700000 	.word	0x41700000
 80138ac:	3fe00000 	.word	0x3fe00000

080138b0 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80138b0:	b480      	push	{r7}
 80138b2:	b085      	sub	sp, #20
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
 80138b8:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80138ba:	2300      	movs	r3, #0
 80138bc:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80138be:	2300      	movs	r3, #0
 80138c0:	60fb      	str	r3, [r7, #12]
 80138c2:	e016      	b.n	80138f2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80138c4:	897b      	ldrh	r3, [r7, #10]
 80138c6:	0a1b      	lsrs	r3, r3, #8
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4619      	mov	r1, r3
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	1c5a      	adds	r2, r3, #1
 80138d0:	607a      	str	r2, [r7, #4]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	404b      	eors	r3, r1
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	4a0b      	ldr	r2, [pc, #44]	; (8013908 <crc16+0x58>)
 80138da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138de:	b21a      	sxth	r2, r3
 80138e0:	897b      	ldrh	r3, [r7, #10]
 80138e2:	021b      	lsls	r3, r3, #8
 80138e4:	b21b      	sxth	r3, r3
 80138e6:	4053      	eors	r3, r2
 80138e8:	b21b      	sxth	r3, r3
 80138ea:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	3301      	adds	r3, #1
 80138f0:	60fb      	str	r3, [r7, #12]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d3e4      	bcc.n	80138c4 <crc16+0x14>
	}
	return cksum;
 80138fa:	897b      	ldrh	r3, [r7, #10]
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3714      	adds	r7, #20
 8013900:	46bd      	mov	sp, r7
 8013902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013906:	4770      	bx	lr
 8013908:	08024bd4 	.word	0x08024bd4

0801390c <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 801390c:	b5b0      	push	{r4, r5, r7, lr}
 801390e:	b090      	sub	sp, #64	; 0x40
 8013910:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 8013912:	2300      	movs	r3, #0
 8013914:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;

	Vescmsg *rxmsg_tmp;
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 8013916:	e0dd      	b.n	8013ad4 <decode_VESC+0x1c8>
		Vescmsg rxmsg = *rxmsg_tmp;
 8013918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801391a:	1d3c      	adds	r4, r7, #4
 801391c:	461d      	mov	r5, r3
 801391e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013926:	682b      	ldr	r3, [r5, #0]
 8013928:	6023      	str	r3, [r4, #0]

		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	2b04      	cmp	r3, #4
 801392e:	f040 80c6 	bne.w	8013abe <decode_VESC+0x1b2>
			uint8_t id = rxmsg.Rxmsg.ExtId & 0xFF;
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	0a1b      	lsrs	r3, r3, #8
 801393c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			if (id == 255 || id == RNS_TO_VESC) {
 8013940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013944:	2bff      	cmp	r3, #255	; 0xff
 8013946:	d004      	beq.n	8013952 <decode_VESC+0x46>
 8013948:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801394c:	2b1e      	cmp	r3, #30
 801394e:	f040 80b6 	bne.w	8013abe <decode_VESC+0x1b2>
				switch (cmd) {
 8013952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8013956:	3b05      	subs	r3, #5
 8013958:	2b03      	cmp	r3, #3
 801395a:	f200 80b2 	bhi.w	8013ac2 <decode_VESC+0x1b6>
 801395e:	a201      	add	r2, pc, #4	; (adr r2, 8013964 <decode_VESC+0x58>)
 8013960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013964:	08013975 	.word	0x08013975
 8013968:	08013991 	.word	0x08013991
 801396c:	080139c7 	.word	0x080139c7
 8013970:	08013a7f 	.word	0x08013a7f
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.Rxmsg.DLC - 1);
 8013974:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013978:	461a      	mov	r2, r3
 801397a:	4b5c      	ldr	r3, [pc, #368]	; (8013aec <decode_VESC+0x1e0>)
 801397c:	18d0      	adds	r0, r2, r3
 801397e:	1d3b      	adds	r3, r7, #4
 8013980:	331c      	adds	r3, #28
 8013982:	3301      	adds	r3, #1
 8013984:	697a      	ldr	r2, [r7, #20]
 8013986:	3a01      	subs	r2, #1
 8013988:	4619      	mov	r1, r3
 801398a:	f00b f9c9 	bl	801ed20 <memcpy>
					break;
 801398e:	e0a1      	b.n	8013ad4 <decode_VESC+0x1c8>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 8013990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013994:	021b      	lsls	r3, r3, #8
 8013996:	62bb      	str	r3, [r7, #40]	; 0x28
					rxbuf_ind |= rxmsg.Data[1];
 8013998:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801399c:	461a      	mov	r2, r3
 801399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a0:	4313      	orrs	r3, r2
 80139a2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 80139a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139aa:	f080 808c 	bcs.w	8013ac6 <decode_VESC+0x1ba>
						memcpy(rx_buffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.Rxmsg.DLC - 2);
 80139ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b0:	4a4e      	ldr	r2, [pc, #312]	; (8013aec <decode_VESC+0x1e0>)
 80139b2:	1898      	adds	r0, r3, r2
 80139b4:	1d3b      	adds	r3, r7, #4
 80139b6:	331c      	adds	r3, #28
 80139b8:	3302      	adds	r3, #2
 80139ba:	697a      	ldr	r2, [r7, #20]
 80139bc:	3a02      	subs	r2, #2
 80139be:	4619      	mov	r1, r3
 80139c0:	f00b f9ae 	bl	801ed20 <memcpy>
					}
					break;
 80139c4:	e07f      	b.n	8013ac6 <decode_VESC+0x1ba>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 80139c6:	2300      	movs	r3, #0
 80139c8:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 80139ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139cc:	1c5a      	adds	r2, r3, #1
 80139ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80139d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80139d4:	4413      	add	r3, r2
 80139d6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80139da:	461a      	mov	r2, r3
 80139dc:	4b44      	ldr	r3, [pc, #272]	; (8013af0 <decode_VESC+0x1e4>)
 80139de:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 80139e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e2:	1c5a      	adds	r2, r3, #1
 80139e4:	63ba      	str	r2, [r7, #56]	; 0x38
 80139e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80139ea:	4413      	add	r3, r2
 80139ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80139f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 80139f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f6:	1c5a      	adds	r2, r3, #1
 80139f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80139fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80139fe:	4413      	add	r3, r2
 8013a00:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013a04:	021b      	lsls	r3, r3, #8
 8013a06:	63fb      	str	r3, [r7, #60]	; 0x3c
					rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8013a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0a:	1c5a      	adds	r2, r3, #1
 8013a0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8013a0e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013a12:	4413      	add	r3, r2
 8013a14:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013a18:	461a      	mov	r2, r3
 8013a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a1c:	4313      	orrs	r3, r2
 8013a1e:	63fb      	str	r3, [r7, #60]	; 0x3c

					if (rxbuf_len > RX_BUFFER_SIZE) {
 8013a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a26:	d850      	bhi.n	8013aca <decode_VESC+0x1be>
						break;
					}

					crc_high = rxmsg.Data[ind++];
 8013a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a2a:	1c5a      	adds	r2, r3, #1
 8013a2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8013a2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013a32:	4413      	add	r3, r2
 8013a34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013a38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					crc_low = rxmsg.Data[ind++];
 8013a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a3e:	1c5a      	adds	r2, r3, #1
 8013a40:	63ba      	str	r2, [r7, #56]	; 0x38
 8013a42:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013a46:	4413      	add	r3, r2
 8013a48:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (crc16(rx_buffer, rxbuf_len)
 8013a50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a52:	4826      	ldr	r0, [pc, #152]	; (8013aec <decode_VESC+0x1e0>)
 8013a54:	f7ff ff2c 	bl	80138b0 <crc16>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 8013a5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8013a60:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 8013a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a66:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 8013a68:	4299      	cmp	r1, r3
 8013a6a:	d130      	bne.n	8013ace <decode_VESC+0x1c2>
						if(commands_send==1)
 8013a6c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d12c      	bne.n	8013ace <decode_VESC+0x1c2>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 8013a74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013a76:	481d      	ldr	r0, [pc, #116]	; (8013aec <decode_VESC+0x1e0>)
 8013a78:	f7fe f960 	bl	8011d3c <bldc_interface_process_packet>
					}
					break;
 8013a7c:	e027      	b.n	8013ace <decode_VESC+0x1c2>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 8013a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a84:	1c5a      	adds	r2, r3, #1
 8013a86:	63ba      	str	r2, [r7, #56]	; 0x38
 8013a88:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013a8c:	4413      	add	r3, r2
 8013a8e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013a92:	461a      	mov	r2, r3
 8013a94:	4b16      	ldr	r3, [pc, #88]	; (8013af0 <decode_VESC+0x1e4>)
 8013a96:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 8013a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9a:	1c5a      	adds	r2, r3, #1
 8013a9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8013a9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8013aa8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					if(commands_send==1)
 8013aac:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d10e      	bne.n	8013ad2 <decode_VESC+0x1c6>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 8013ab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ab6:	480d      	ldr	r0, [pc, #52]	; (8013aec <decode_VESC+0x1e0>)
 8013ab8:	f7fe f940 	bl	8011d3c <bldc_interface_process_packet>
					break;
 8013abc:	e009      	b.n	8013ad2 <decode_VESC+0x1c6>
				default:
					break;
				}
			}
 8013abe:	bf00      	nop
 8013ac0:	e008      	b.n	8013ad4 <decode_VESC+0x1c8>
					break;
 8013ac2:	bf00      	nop
 8013ac4:	e006      	b.n	8013ad4 <decode_VESC+0x1c8>
					break;
 8013ac6:	bf00      	nop
 8013ac8:	e004      	b.n	8013ad4 <decode_VESC+0x1c8>
						break;
 8013aca:	bf00      	nop
 8013acc:	e002      	b.n	8013ad4 <decode_VESC+0x1c8>
					break;
 8013ace:	bf00      	nop
 8013ad0:	e000      	b.n	8013ad4 <decode_VESC+0x1c8>
					break;
 8013ad2:	bf00      	nop
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 8013ad4:	f000 f80e 	bl	8013af4 <get_rx_frame>
 8013ad8:	6378      	str	r0, [r7, #52]	; 0x34
 8013ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f47f af1b 	bne.w	8013918 <decode_VESC+0xc>
		}
	}
}
 8013ae2:	bf00      	nop
 8013ae4:	bf00      	nop
 8013ae6:	3740      	adds	r7, #64	; 0x40
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bdb0      	pop	{r4, r5, r7, pc}
 8013aec:	20000c84 	.word	0x20000c84
 8013af0:	20000e84 	.word	0x20000e84

08013af4 <get_rx_frame>:

Vescmsg *get_rx_frame(void) {
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
	if (rx_frame_read != rx_frame_write){
 8013afa:	4b11      	ldr	r3, [pc, #68]	; (8013b40 <get_rx_frame+0x4c>)
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	4b11      	ldr	r3, [pc, #68]	; (8013b44 <get_rx_frame+0x50>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	429a      	cmp	r2, r3
 8013b04:	d014      	beq.n	8013b30 <get_rx_frame+0x3c>
		Vescmsg *res = &rx_frames[rx_frame_read++];
 8013b06:	4b0e      	ldr	r3, [pc, #56]	; (8013b40 <get_rx_frame+0x4c>)
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	1c53      	adds	r3, r2, #1
 8013b0c:	490c      	ldr	r1, [pc, #48]	; (8013b40 <get_rx_frame+0x4c>)
 8013b0e:	600b      	str	r3, [r1, #0]
 8013b10:	4613      	mov	r3, r2
 8013b12:	00db      	lsls	r3, r3, #3
 8013b14:	4413      	add	r3, r2
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	4a0b      	ldr	r2, [pc, #44]	; (8013b48 <get_rx_frame+0x54>)
 8013b1a:	4413      	add	r3, r2
 8013b1c:	607b      	str	r3, [r7, #4]

		if (rx_frame_read == RX_FRAMES_SIZE){
 8013b1e:	4b08      	ldr	r3, [pc, #32]	; (8013b40 <get_rx_frame+0x4c>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b64      	cmp	r3, #100	; 0x64
 8013b24:	d102      	bne.n	8013b2c <get_rx_frame+0x38>
			rx_frame_read = 0;
 8013b26:	4b06      	ldr	r3, [pc, #24]	; (8013b40 <get_rx_frame+0x4c>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	601a      	str	r2, [r3, #0]
		}

		return res;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	e000      	b.n	8013b32 <get_rx_frame+0x3e>
	} else
		return 0;
 8013b30:	2300      	movs	r3, #0
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	370c      	adds	r7, #12
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr
 8013b3e:	bf00      	nop
 8013b40:	20001c98 	.word	0x20001c98
 8013b44:	20001c9c 	.word	0x20001c9c
 8013b48:	20000e88 	.word	0x20000e88

08013b4c <set_rx_frames>:

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 8013b4c:	b4b0      	push	{r4, r5, r7}
 8013b4e:	b085      	sub	sp, #20
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 8013b54:	4b16      	ldr	r3, [pc, #88]	; (8013bb0 <set_rx_frames+0x64>)
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	1c53      	adds	r3, r2, #1
 8013b5a:	4915      	ldr	r1, [pc, #84]	; (8013bb0 <set_rx_frames+0x64>)
 8013b5c:	600b      	str	r3, [r1, #0]
 8013b5e:	4915      	ldr	r1, [pc, #84]	; (8013bb4 <set_rx_frames+0x68>)
 8013b60:	4613      	mov	r3, r2
 8013b62:	00db      	lsls	r3, r3, #3
 8013b64:	4413      	add	r3, r2
 8013b66:	009b      	lsls	r3, r3, #2
 8013b68:	18ca      	adds	r2, r1, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	4614      	mov	r4, r2
 8013b6e:	461d      	mov	r5, r3
 8013b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013b78:	682b      	ldr	r3, [r5, #0]
 8013b7a:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 8013b7c:	4b0c      	ldr	r3, [pc, #48]	; (8013bb0 <set_rx_frames+0x64>)
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b64      	cmp	r3, #100	; 0x64
 8013b82:	d102      	bne.n	8013b8a <set_rx_frames+0x3e>
		rx_frame_write = 0;
 8013b84:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <set_rx_frames+0x64>)
 8013b86:	2200      	movs	r2, #0
 8013b88:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	0a1b      	lsrs	r3, r3, #8
 8013b90:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	2b07      	cmp	r3, #7
 8013b96:	d002      	beq.n	8013b9e <set_rx_frames+0x52>
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b08      	cmp	r3, #8
 8013b9c:	d101      	bne.n	8013ba2 <set_rx_frames+0x56>
		return 112;
 8013b9e:	2370      	movs	r3, #112	; 0x70
 8013ba0:	e000      	b.n	8013ba4 <set_rx_frames+0x58>
	else
		return 0;
 8013ba2:	2300      	movs	r3, #0
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3714      	adds	r7, #20
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bcb0      	pop	{r4, r5, r7}
 8013bac:	4770      	bx	lr
 8013bae:	bf00      	nop
 8013bb0:	20001c9c 	.word	0x20001c9c
 8013bb4:	20000e88 	.word	0x20000e88

08013bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8013bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8013bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8013bbc:	480d      	ldr	r0, [pc, #52]	; (8013bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8013bbe:	490e      	ldr	r1, [pc, #56]	; (8013bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8013bc0:	4a0e      	ldr	r2, [pc, #56]	; (8013bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8013bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013bc4:	e002      	b.n	8013bcc <LoopCopyDataInit>

08013bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013bca:	3304      	adds	r3, #4

08013bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013bd0:	d3f9      	bcc.n	8013bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013bd2:	4a0b      	ldr	r2, [pc, #44]	; (8013c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8013bd4:	4c0b      	ldr	r4, [pc, #44]	; (8013c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8013bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013bd8:	e001      	b.n	8013bde <LoopFillZerobss>

08013bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013bdc:	3204      	adds	r2, #4

08013bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013be0:	d3fb      	bcc.n	8013bda <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8013be2:	f7fb f98b 	bl	800eefc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013be6:	f00b f867 	bl	801ecb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013bea:	f7f0 fba1 	bl	8004330 <main>
  bx  lr    
 8013bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8013bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8013bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013bf8:	20000894 	.word	0x20000894
  ldr r2, =_sidata
 8013bfc:	08025674 	.word	0x08025674
  ldr r2, =_sbss
 8013c00:	20000898 	.word	0x20000898
  ldr r4, =_ebss
 8013c04:	2000ac88 	.word	0x2000ac88

08013c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013c08:	e7fe      	b.n	8013c08 <ADC_IRQHandler>
	...

08013c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013c10:	4b0e      	ldr	r3, [pc, #56]	; (8013c4c <HAL_Init+0x40>)
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	4a0d      	ldr	r2, [pc, #52]	; (8013c4c <HAL_Init+0x40>)
 8013c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8013c1c:	4b0b      	ldr	r3, [pc, #44]	; (8013c4c <HAL_Init+0x40>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	4a0a      	ldr	r2, [pc, #40]	; (8013c4c <HAL_Init+0x40>)
 8013c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013c28:	4b08      	ldr	r3, [pc, #32]	; (8013c4c <HAL_Init+0x40>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	4a07      	ldr	r2, [pc, #28]	; (8013c4c <HAL_Init+0x40>)
 8013c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8013c34:	2003      	movs	r0, #3
 8013c36:	f001 fbc0 	bl	80153ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	f7fb f83e 	bl	800ecbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8013c40:	f7ee fb76 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8013c44:	2300      	movs	r3, #0
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	40023c00 	.word	0x40023c00

08013c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013c50:	b480      	push	{r7}
 8013c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013c54:	4b06      	ldr	r3, [pc, #24]	; (8013c70 <HAL_IncTick+0x20>)
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	461a      	mov	r2, r3
 8013c5a:	4b06      	ldr	r3, [pc, #24]	; (8013c74 <HAL_IncTick+0x24>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	4413      	add	r3, r2
 8013c60:	4a04      	ldr	r2, [pc, #16]	; (8013c74 <HAL_IncTick+0x24>)
 8013c62:	6013      	str	r3, [r2, #0]
}
 8013c64:	bf00      	nop
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	200006b8 	.word	0x200006b8
 8013c74:	2000ac14 	.word	0x2000ac14

08013c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8013c7c:	4b03      	ldr	r3, [pc, #12]	; (8013c8c <HAL_GetTick+0x14>)
 8013c7e:	681b      	ldr	r3, [r3, #0]
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	2000ac14 	.word	0x2000ac14

08013c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013c98:	f7ff ffee 	bl	8013c78 <HAL_GetTick>
 8013c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ca8:	d005      	beq.n	8013cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013caa:	4b0a      	ldr	r3, [pc, #40]	; (8013cd4 <HAL_Delay+0x44>)
 8013cac:	781b      	ldrb	r3, [r3, #0]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	4413      	add	r3, r2
 8013cb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013cb6:	bf00      	nop
 8013cb8:	f7ff ffde 	bl	8013c78 <HAL_GetTick>
 8013cbc:	4602      	mov	r2, r0
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	68fa      	ldr	r2, [r7, #12]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d8f7      	bhi.n	8013cb8 <HAL_Delay+0x28>
  {
  }
}
 8013cc8:	bf00      	nop
 8013cca:	bf00      	nop
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	200006b8 	.word	0x200006b8

08013cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d101      	bne.n	8013cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8013cea:	2301      	movs	r3, #1
 8013cec:	e033      	b.n	8013d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d109      	bne.n	8013d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013cf6:	6878      	ldr	r0, [r7, #4]
 8013cf8:	f7ee fb46 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2200      	movs	r2, #0
 8013d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d0e:	f003 0310 	and.w	r3, r3, #16
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d118      	bne.n	8013d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8013d1e:	f023 0302 	bic.w	r3, r3, #2
 8013d22:	f043 0202 	orr.w	r2, r3, #2
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f000 fa4a 	bl	80141c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d3a:	f023 0303 	bic.w	r3, r3, #3
 8013d3e:	f043 0201 	orr.w	r2, r3, #1
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	641a      	str	r2, [r3, #64]	; 0x40
 8013d46:	e001      	b.n	8013d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2200      	movs	r2, #0
 8013d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8013d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d56:	4618      	mov	r0, r3
 8013d58:	3710      	adds	r7, #16
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}
	...

08013d60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b086      	sub	sp, #24
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	d101      	bne.n	8013d7e <HAL_ADC_Start_DMA+0x1e>
 8013d7a:	2302      	movs	r3, #2
 8013d7c:	e0cc      	b.n	8013f18 <HAL_ADC_Start_DMA+0x1b8>
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	2201      	movs	r2, #1
 8013d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	689b      	ldr	r3, [r3, #8]
 8013d8c:	f003 0301 	and.w	r3, r3, #1
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d018      	beq.n	8013dc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689a      	ldr	r2, [r3, #8]
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f042 0201 	orr.w	r2, r2, #1
 8013da2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8013da4:	4b5e      	ldr	r3, [pc, #376]	; (8013f20 <HAL_ADC_Start_DMA+0x1c0>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	4a5e      	ldr	r2, [pc, #376]	; (8013f24 <HAL_ADC_Start_DMA+0x1c4>)
 8013daa:	fba2 2303 	umull	r2, r3, r2, r3
 8013dae:	0c9a      	lsrs	r2, r3, #18
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013db8:	e002      	b.n	8013dc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	3b01      	subs	r3, #1
 8013dbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d1f9      	bne.n	8013dba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	f040 80a0 	bne.w	8013f16 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8013dde:	f023 0301 	bic.w	r3, r3, #1
 8013de2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	685b      	ldr	r3, [r3, #4]
 8013df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d007      	beq.n	8013e08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e14:	d106      	bne.n	8013e24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e1a:	f023 0206 	bic.w	r2, r3, #6
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	645a      	str	r2, [r3, #68]	; 0x44
 8013e22:	e002      	b.n	8013e2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2200      	movs	r2, #0
 8013e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8013e32:	4b3d      	ldr	r3, [pc, #244]	; (8013f28 <HAL_ADC_Start_DMA+0x1c8>)
 8013e34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e3a:	4a3c      	ldr	r2, [pc, #240]	; (8013f2c <HAL_ADC_Start_DMA+0x1cc>)
 8013e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e42:	4a3b      	ldr	r2, [pc, #236]	; (8013f30 <HAL_ADC_Start_DMA+0x1d0>)
 8013e44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e4a:	4a3a      	ldr	r2, [pc, #232]	; (8013f34 <HAL_ADC_Start_DMA+0x1d4>)
 8013e4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8013e56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	685a      	ldr	r2, [r3, #4]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013e66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	689a      	ldr	r2, [r3, #8]
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013e76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	334c      	adds	r3, #76	; 0x4c
 8013e82:	4619      	mov	r1, r3
 8013e84:	68ba      	ldr	r2, [r7, #8]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	f001 fbf4 	bl	8015674 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	f003 031f 	and.w	r3, r3, #31
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d12a      	bne.n	8013eee <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8013e98:	68fb      	ldr	r3, [r7, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4a26      	ldr	r2, [pc, #152]	; (8013f38 <HAL_ADC_Start_DMA+0x1d8>)
 8013e9e:	4293      	cmp	r3, r2
 8013ea0:	d015      	beq.n	8013ece <HAL_ADC_Start_DMA+0x16e>
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	4a25      	ldr	r2, [pc, #148]	; (8013f3c <HAL_ADC_Start_DMA+0x1dc>)
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d105      	bne.n	8013eb8 <HAL_ADC_Start_DMA+0x158>
 8013eac:	4b1e      	ldr	r3, [pc, #120]	; (8013f28 <HAL_ADC_Start_DMA+0x1c8>)
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	f003 031f 	and.w	r3, r3, #31
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d00a      	beq.n	8013ece <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4a20      	ldr	r2, [pc, #128]	; (8013f40 <HAL_ADC_Start_DMA+0x1e0>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d129      	bne.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
 8013ec2:	4b19      	ldr	r3, [pc, #100]	; (8013f28 <HAL_ADC_Start_DMA+0x1c8>)
 8013ec4:	685b      	ldr	r3, [r3, #4]
 8013ec6:	f003 0310 	and.w	r3, r3, #16
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d123      	bne.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d11c      	bne.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	689a      	ldr	r2, [r3, #8]
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013eea:	609a      	str	r2, [r3, #8]
 8013eec:	e013      	b.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4a11      	ldr	r2, [pc, #68]	; (8013f38 <HAL_ADC_Start_DMA+0x1d8>)
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d10e      	bne.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	689b      	ldr	r3, [r3, #8]
 8013efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d107      	bne.n	8013f16 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	689a      	ldr	r2, [r3, #8]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013f14:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8013f16:	2300      	movs	r3, #0
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3718      	adds	r7, #24
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	20000638 	.word	0x20000638
 8013f24:	431bde83 	.word	0x431bde83
 8013f28:	40012300 	.word	0x40012300
 8013f2c:	080143bd 	.word	0x080143bd
 8013f30:	08014477 	.word	0x08014477
 8013f34:	08014493 	.word	0x08014493
 8013f38:	40012000 	.word	0x40012000
 8013f3c:	40012100 	.word	0x40012100
 8013f40:	40012200 	.word	0x40012200

08013f44 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013f44:	b480      	push	{r7}
 8013f46:	b083      	sub	sp, #12
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8013f60:	bf00      	nop
 8013f62:	370c      	adds	r7, #12
 8013f64:	46bd      	mov	sp, r7
 8013f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6a:	4770      	bx	lr

08013f6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b083      	sub	sp, #12
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8013f74:	bf00      	nop
 8013f76:	370c      	adds	r7, #12
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7e:	4770      	bx	lr

08013f80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8013f80:	b480      	push	{r7}
 8013f82:	b085      	sub	sp, #20
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d101      	bne.n	8013f9c <HAL_ADC_ConfigChannel+0x1c>
 8013f98:	2302      	movs	r3, #2
 8013f9a:	e105      	b.n	80141a8 <HAL_ADC_ConfigChannel+0x228>
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b09      	cmp	r3, #9
 8013faa:	d925      	bls.n	8013ff8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	68d9      	ldr	r1, [r3, #12]
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4613      	mov	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	3b1e      	subs	r3, #30
 8013fc2:	2207      	movs	r2, #7
 8013fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8013fc8:	43da      	mvns	r2, r3
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	400a      	ands	r2, r1
 8013fd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	68d9      	ldr	r1, [r3, #12]
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	689a      	ldr	r2, [r3, #8]
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4403      	add	r3, r0
 8013fea:	3b1e      	subs	r3, #30
 8013fec:	409a      	lsls	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	430a      	orrs	r2, r1
 8013ff4:	60da      	str	r2, [r3, #12]
 8013ff6:	e022      	b.n	801403e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6919      	ldr	r1, [r3, #16]
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	b29b      	uxth	r3, r3
 8014004:	461a      	mov	r2, r3
 8014006:	4613      	mov	r3, r2
 8014008:	005b      	lsls	r3, r3, #1
 801400a:	4413      	add	r3, r2
 801400c:	2207      	movs	r2, #7
 801400e:	fa02 f303 	lsl.w	r3, r2, r3
 8014012:	43da      	mvns	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	400a      	ands	r2, r1
 801401a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	6919      	ldr	r1, [r3, #16]
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	689a      	ldr	r2, [r3, #8]
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	b29b      	uxth	r3, r3
 801402c:	4618      	mov	r0, r3
 801402e:	4603      	mov	r3, r0
 8014030:	005b      	lsls	r3, r3, #1
 8014032:	4403      	add	r3, r0
 8014034:	409a      	lsls	r2, r3
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	430a      	orrs	r2, r1
 801403c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	685b      	ldr	r3, [r3, #4]
 8014042:	2b06      	cmp	r3, #6
 8014044:	d824      	bhi.n	8014090 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	685a      	ldr	r2, [r3, #4]
 8014050:	4613      	mov	r3, r2
 8014052:	009b      	lsls	r3, r3, #2
 8014054:	4413      	add	r3, r2
 8014056:	3b05      	subs	r3, #5
 8014058:	221f      	movs	r2, #31
 801405a:	fa02 f303 	lsl.w	r3, r2, r3
 801405e:	43da      	mvns	r2, r3
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	400a      	ands	r2, r1
 8014066:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	b29b      	uxth	r3, r3
 8014074:	4618      	mov	r0, r3
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	685a      	ldr	r2, [r3, #4]
 801407a:	4613      	mov	r3, r2
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	4413      	add	r3, r2
 8014080:	3b05      	subs	r3, #5
 8014082:	fa00 f203 	lsl.w	r2, r0, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	430a      	orrs	r2, r1
 801408c:	635a      	str	r2, [r3, #52]	; 0x34
 801408e:	e04c      	b.n	801412a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	2b0c      	cmp	r3, #12
 8014096:	d824      	bhi.n	80140e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	685a      	ldr	r2, [r3, #4]
 80140a2:	4613      	mov	r3, r2
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	4413      	add	r3, r2
 80140a8:	3b23      	subs	r3, #35	; 0x23
 80140aa:	221f      	movs	r2, #31
 80140ac:	fa02 f303 	lsl.w	r3, r2, r3
 80140b0:	43da      	mvns	r2, r3
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	400a      	ands	r2, r1
 80140b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	4618      	mov	r0, r3
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	685a      	ldr	r2, [r3, #4]
 80140cc:	4613      	mov	r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	3b23      	subs	r3, #35	; 0x23
 80140d4:	fa00 f203 	lsl.w	r2, r0, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	430a      	orrs	r2, r1
 80140de:	631a      	str	r2, [r3, #48]	; 0x30
 80140e0:	e023      	b.n	801412a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	685a      	ldr	r2, [r3, #4]
 80140ec:	4613      	mov	r3, r2
 80140ee:	009b      	lsls	r3, r3, #2
 80140f0:	4413      	add	r3, r2
 80140f2:	3b41      	subs	r3, #65	; 0x41
 80140f4:	221f      	movs	r2, #31
 80140f6:	fa02 f303 	lsl.w	r3, r2, r3
 80140fa:	43da      	mvns	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	400a      	ands	r2, r1
 8014102:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	b29b      	uxth	r3, r3
 8014110:	4618      	mov	r0, r3
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	685a      	ldr	r2, [r3, #4]
 8014116:	4613      	mov	r3, r2
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	4413      	add	r3, r2
 801411c:	3b41      	subs	r3, #65	; 0x41
 801411e:	fa00 f203 	lsl.w	r2, r0, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	430a      	orrs	r2, r1
 8014128:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801412a:	4b22      	ldr	r3, [pc, #136]	; (80141b4 <HAL_ADC_ConfigChannel+0x234>)
 801412c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	4a21      	ldr	r2, [pc, #132]	; (80141b8 <HAL_ADC_ConfigChannel+0x238>)
 8014134:	4293      	cmp	r3, r2
 8014136:	d109      	bne.n	801414c <HAL_ADC_ConfigChannel+0x1cc>
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2b12      	cmp	r3, #18
 801413e:	d105      	bne.n	801414c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	4a19      	ldr	r2, [pc, #100]	; (80141b8 <HAL_ADC_ConfigChannel+0x238>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d123      	bne.n	801419e <HAL_ADC_ConfigChannel+0x21e>
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2b10      	cmp	r3, #16
 801415c:	d003      	beq.n	8014166 <HAL_ADC_ConfigChannel+0x1e6>
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b11      	cmp	r3, #17
 8014164:	d11b      	bne.n	801419e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b10      	cmp	r3, #16
 8014178:	d111      	bne.n	801419e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 801417a:	4b10      	ldr	r3, [pc, #64]	; (80141bc <HAL_ADC_ConfigChannel+0x23c>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	4a10      	ldr	r2, [pc, #64]	; (80141c0 <HAL_ADC_ConfigChannel+0x240>)
 8014180:	fba2 2303 	umull	r2, r3, r2, r3
 8014184:	0c9a      	lsrs	r2, r3, #18
 8014186:	4613      	mov	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	005b      	lsls	r3, r3, #1
 801418e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8014190:	e002      	b.n	8014198 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	3b01      	subs	r3, #1
 8014196:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d1f9      	bne.n	8014192 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2200      	movs	r2, #0
 80141a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80141a6:	2300      	movs	r3, #0
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3714      	adds	r7, #20
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr
 80141b4:	40012300 	.word	0x40012300
 80141b8:	40012000 	.word	0x40012000
 80141bc:	20000638 	.word	0x20000638
 80141c0:	431bde83 	.word	0x431bde83

080141c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b085      	sub	sp, #20
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80141cc:	4b79      	ldr	r3, [pc, #484]	; (80143b4 <ADC_Init+0x1f0>)
 80141ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	685a      	ldr	r2, [r3, #4]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	431a      	orrs	r2, r3
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	685a      	ldr	r2, [r3, #4]
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80141f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	6859      	ldr	r1, [r3, #4]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	021a      	lsls	r2, r3, #8
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	430a      	orrs	r2, r1
 801420c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	685a      	ldr	r2, [r3, #4]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801421c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	6859      	ldr	r1, [r3, #4]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	689a      	ldr	r2, [r3, #8]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	430a      	orrs	r2, r1
 801422e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	689a      	ldr	r2, [r3, #8]
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801423e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	6899      	ldr	r1, [r3, #8]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	68da      	ldr	r2, [r3, #12]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	430a      	orrs	r2, r1
 8014250:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014256:	4a58      	ldr	r2, [pc, #352]	; (80143b8 <ADC_Init+0x1f4>)
 8014258:	4293      	cmp	r3, r2
 801425a:	d022      	beq.n	80142a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	689a      	ldr	r2, [r3, #8]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801426a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	6899      	ldr	r1, [r3, #8]
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	430a      	orrs	r2, r1
 801427c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	689a      	ldr	r2, [r3, #8]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 801428c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	6899      	ldr	r1, [r3, #8]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	430a      	orrs	r2, r1
 801429e:	609a      	str	r2, [r3, #8]
 80142a0:	e00f      	b.n	80142c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	689a      	ldr	r2, [r3, #8]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80142b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	689a      	ldr	r2, [r3, #8]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80142c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	689a      	ldr	r2, [r3, #8]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f022 0202 	bic.w	r2, r2, #2
 80142d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	6899      	ldr	r1, [r3, #8]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	7e1b      	ldrb	r3, [r3, #24]
 80142dc:	005a      	lsls	r2, r3, #1
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	430a      	orrs	r2, r1
 80142e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d01b      	beq.n	8014328 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	685a      	ldr	r2, [r3, #4]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80142fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	685a      	ldr	r2, [r3, #4]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 801430e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	6859      	ldr	r1, [r3, #4]
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801431a:	3b01      	subs	r3, #1
 801431c:	035a      	lsls	r2, r3, #13
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	430a      	orrs	r2, r1
 8014324:	605a      	str	r2, [r3, #4]
 8014326:	e007      	b.n	8014338 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	685a      	ldr	r2, [r3, #4]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014336:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8014346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	69db      	ldr	r3, [r3, #28]
 8014352:	3b01      	subs	r3, #1
 8014354:	051a      	lsls	r2, r3, #20
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	430a      	orrs	r2, r1
 801435c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	689a      	ldr	r2, [r3, #8]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801436c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	6899      	ldr	r1, [r3, #8]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801437a:	025a      	lsls	r2, r3, #9
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	430a      	orrs	r2, r1
 8014382:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	689a      	ldr	r2, [r3, #8]
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014392:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	6899      	ldr	r1, [r3, #8]
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	695b      	ldr	r3, [r3, #20]
 801439e:	029a      	lsls	r2, r3, #10
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	430a      	orrs	r2, r1
 80143a6:	609a      	str	r2, [r3, #8]
}
 80143a8:	bf00      	nop
 80143aa:	3714      	adds	r7, #20
 80143ac:	46bd      	mov	sp, r7
 80143ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b2:	4770      	bx	lr
 80143b4:	40012300 	.word	0x40012300
 80143b8:	0f000001 	.word	0x0f000001

080143bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d13c      	bne.n	8014450 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	689b      	ldr	r3, [r3, #8]
 80143e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d12b      	bne.n	8014448 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d127      	bne.n	8014448 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8014402:	2b00      	cmp	r3, #0
 8014404:	d006      	beq.n	8014414 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8014410:	2b00      	cmp	r3, #0
 8014412:	d119      	bne.n	8014448 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f022 0220 	bic.w	r2, r2, #32
 8014422:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014428:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014434:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014438:	2b00      	cmp	r3, #0
 801443a:	d105      	bne.n	8014448 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014440:	f043 0201 	orr.w	r2, r3, #1
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f7ff fd7b 	bl	8013f44 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801444e:	e00e      	b.n	801446e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014454:	f003 0310 	and.w	r3, r3, #16
 8014458:	2b00      	cmp	r3, #0
 801445a:	d003      	beq.n	8014464 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 801445c:	68f8      	ldr	r0, [r7, #12]
 801445e:	f7ff fd85 	bl	8013f6c <HAL_ADC_ErrorCallback>
}
 8014462:	e004      	b.n	801446e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	4798      	blx	r3
}
 801446e:	bf00      	nop
 8014470:	3710      	adds	r7, #16
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8014476:	b580      	push	{r7, lr}
 8014478:	b084      	sub	sp, #16
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014482:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f7ff fd67 	bl	8013f58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801448a:	bf00      	nop
 801448c:	3710      	adds	r7, #16
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}

08014492 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8014492:	b580      	push	{r7, lr}
 8014494:	b084      	sub	sp, #16
 8014496:	af00      	add	r7, sp, #0
 8014498:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801449e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	2240      	movs	r2, #64	; 0x40
 80144a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144aa:	f043 0204 	orr.w	r2, r3, #4
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80144b2:	68f8      	ldr	r0, [r7, #12]
 80144b4:	f7ff fd5a 	bl	8013f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80144b8:	bf00      	nop
 80144ba:	3710      	adds	r7, #16
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d101      	bne.n	80144d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80144ce:	2301      	movs	r3, #1
 80144d0:	e0ed      	b.n	80146ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80144d8:	b2db      	uxtb	r3, r3
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d102      	bne.n	80144e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f7ed ffa0 	bl	8002424 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	f022 0202 	bic.w	r2, r2, #2
 80144f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80144f4:	f7ff fbc0 	bl	8013c78 <HAL_GetTick>
 80144f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80144fa:	e012      	b.n	8014522 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80144fc:	f7ff fbbc 	bl	8013c78 <HAL_GetTick>
 8014500:	4602      	mov	r2, r0
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	2b0a      	cmp	r3, #10
 8014508:	d90b      	bls.n	8014522 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801450e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2205      	movs	r2, #5
 801451a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801451e:	2301      	movs	r3, #1
 8014520:	e0c5      	b.n	80146ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	f003 0302 	and.w	r3, r3, #2
 801452c:	2b00      	cmp	r3, #0
 801452e:	d1e5      	bne.n	80144fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	681a      	ldr	r2, [r3, #0]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	f042 0201 	orr.w	r2, r2, #1
 801453e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014540:	f7ff fb9a 	bl	8013c78 <HAL_GetTick>
 8014544:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8014546:	e012      	b.n	801456e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8014548:	f7ff fb96 	bl	8013c78 <HAL_GetTick>
 801454c:	4602      	mov	r2, r0
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	1ad3      	subs	r3, r2, r3
 8014552:	2b0a      	cmp	r3, #10
 8014554:	d90b      	bls.n	801456e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801455a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2205      	movs	r2, #5
 8014566:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801456a:	2301      	movs	r3, #1
 801456c:	e09f      	b.n	80146ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	f003 0301 	and.w	r3, r3, #1
 8014578:	2b00      	cmp	r3, #0
 801457a:	d0e5      	beq.n	8014548 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	7e1b      	ldrb	r3, [r3, #24]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d108      	bne.n	8014596 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	681a      	ldr	r2, [r3, #0]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	e007      	b.n	80145a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80145a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	7e5b      	ldrb	r3, [r3, #25]
 80145aa:	2b01      	cmp	r3, #1
 80145ac:	d108      	bne.n	80145c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145bc:	601a      	str	r2, [r3, #0]
 80145be:	e007      	b.n	80145d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80145ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	7e9b      	ldrb	r3, [r3, #26]
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d108      	bne.n	80145ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	681a      	ldr	r2, [r3, #0]
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	f042 0220 	orr.w	r2, r2, #32
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	e007      	b.n	80145fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	681a      	ldr	r2, [r3, #0]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	f022 0220 	bic.w	r2, r2, #32
 80145f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	7edb      	ldrb	r3, [r3, #27]
 80145fe:	2b01      	cmp	r3, #1
 8014600:	d108      	bne.n	8014614 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	f022 0210 	bic.w	r2, r2, #16
 8014610:	601a      	str	r2, [r3, #0]
 8014612:	e007      	b.n	8014624 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	681a      	ldr	r2, [r3, #0]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	f042 0210 	orr.w	r2, r2, #16
 8014622:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	7f1b      	ldrb	r3, [r3, #28]
 8014628:	2b01      	cmp	r3, #1
 801462a:	d108      	bne.n	801463e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	f042 0208 	orr.w	r2, r2, #8
 801463a:	601a      	str	r2, [r3, #0]
 801463c:	e007      	b.n	801464e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	681a      	ldr	r2, [r3, #0]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	f022 0208 	bic.w	r2, r2, #8
 801464c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	7f5b      	ldrb	r3, [r3, #29]
 8014652:	2b01      	cmp	r3, #1
 8014654:	d108      	bne.n	8014668 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	f042 0204 	orr.w	r2, r2, #4
 8014664:	601a      	str	r2, [r3, #0]
 8014666:	e007      	b.n	8014678 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	681a      	ldr	r2, [r3, #0]
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f022 0204 	bic.w	r2, r2, #4
 8014676:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	689a      	ldr	r2, [r3, #8]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	431a      	orrs	r2, r3
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	691b      	ldr	r3, [r3, #16]
 8014686:	431a      	orrs	r2, r3
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	695b      	ldr	r3, [r3, #20]
 801468c:	ea42 0103 	orr.w	r1, r2, r3
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	1e5a      	subs	r2, r3, #1
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	430a      	orrs	r2, r1
 801469c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2200      	movs	r2, #0
 80146a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2201      	movs	r2, #1
 80146a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80146ac:	2300      	movs	r3, #0
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	3710      	adds	r7, #16
 80146b2:	46bd      	mov	sp, r7
 80146b4:	bd80      	pop	{r7, pc}
	...

080146b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80146b8:	b480      	push	{r7}
 80146ba:	b087      	sub	sp, #28
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80146ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80146d0:	7cfb      	ldrb	r3, [r7, #19]
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d003      	beq.n	80146de <HAL_CAN_ConfigFilter+0x26>
 80146d6:	7cfb      	ldrb	r3, [r7, #19]
 80146d8:	2b02      	cmp	r3, #2
 80146da:	f040 80be 	bne.w	801485a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80146de:	4b65      	ldr	r3, [pc, #404]	; (8014874 <HAL_CAN_ConfigFilter+0x1bc>)
 80146e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80146e2:	697b      	ldr	r3, [r7, #20]
 80146e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80146e8:	f043 0201 	orr.w	r2, r3, #1
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80146f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801470c:	021b      	lsls	r3, r3, #8
 801470e:	431a      	orrs	r2, r3
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8014716:	683b      	ldr	r3, [r7, #0]
 8014718:	695b      	ldr	r3, [r3, #20]
 801471a:	f003 031f 	and.w	r3, r3, #31
 801471e:	2201      	movs	r2, #1
 8014720:	fa02 f303 	lsl.w	r3, r2, r3
 8014724:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	43db      	mvns	r3, r3
 8014730:	401a      	ands	r2, r3
 8014732:	697b      	ldr	r3, [r7, #20]
 8014734:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8014738:	683b      	ldr	r3, [r7, #0]
 801473a:	69db      	ldr	r3, [r3, #28]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d123      	bne.n	8014788 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	43db      	mvns	r3, r3
 801474a:	401a      	ands	r2, r3
 801474c:	697b      	ldr	r3, [r7, #20]
 801474e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801475e:	683a      	ldr	r2, [r7, #0]
 8014760:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8014762:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	3248      	adds	r2, #72	; 0x48
 8014768:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	689b      	ldr	r3, [r3, #8]
 8014770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8014778:	683b      	ldr	r3, [r7, #0]
 801477a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801477c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801477e:	6979      	ldr	r1, [r7, #20]
 8014780:	3348      	adds	r3, #72	; 0x48
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	440b      	add	r3, r1
 8014786:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	69db      	ldr	r3, [r3, #28]
 801478c:	2b01      	cmp	r3, #1
 801478e:	d122      	bne.n	80147d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	431a      	orrs	r2, r3
 801479a:	697b      	ldr	r3, [r7, #20]
 801479c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80147ac:	683a      	ldr	r2, [r7, #0]
 80147ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80147b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	3248      	adds	r2, #72	; 0x48
 80147b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	689b      	ldr	r3, [r3, #8]
 80147be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	68db      	ldr	r3, [r3, #12]
 80147c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80147ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80147cc:	6979      	ldr	r1, [r7, #20]
 80147ce:	3348      	adds	r3, #72	; 0x48
 80147d0:	00db      	lsls	r3, r3, #3
 80147d2:	440b      	add	r3, r1
 80147d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	699b      	ldr	r3, [r3, #24]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d109      	bne.n	80147f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	43db      	mvns	r3, r3
 80147e8:	401a      	ands	r2, r3
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80147f0:	e007      	b.n	8014802 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80147f2:	697b      	ldr	r3, [r7, #20]
 80147f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	431a      	orrs	r2, r3
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	691b      	ldr	r3, [r3, #16]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d109      	bne.n	801481e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	43db      	mvns	r3, r3
 8014814:	401a      	ands	r2, r3
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801481c:	e007      	b.n	801482e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801481e:	697b      	ldr	r3, [r7, #20]
 8014820:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	431a      	orrs	r2, r3
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	6a1b      	ldr	r3, [r3, #32]
 8014832:	2b01      	cmp	r3, #1
 8014834:	d107      	bne.n	8014846 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	431a      	orrs	r2, r3
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801484c:	f023 0201 	bic.w	r2, r3, #1
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8014856:	2300      	movs	r3, #0
 8014858:	e006      	b.n	8014868 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801485e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014866:	2301      	movs	r3, #1
  }
}
 8014868:	4618      	mov	r0, r3
 801486a:	371c      	adds	r7, #28
 801486c:	46bd      	mov	sp, r7
 801486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014872:	4770      	bx	lr
 8014874:	40006400 	.word	0x40006400

08014878 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014886:	b2db      	uxtb	r3, r3
 8014888:	2b01      	cmp	r3, #1
 801488a:	d12e      	bne.n	80148ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	2202      	movs	r2, #2
 8014890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	681a      	ldr	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	f022 0201 	bic.w	r2, r2, #1
 80148a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80148a4:	f7ff f9e8 	bl	8013c78 <HAL_GetTick>
 80148a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80148aa:	e012      	b.n	80148d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80148ac:	f7ff f9e4 	bl	8013c78 <HAL_GetTick>
 80148b0:	4602      	mov	r2, r0
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	1ad3      	subs	r3, r2, r3
 80148b6:	2b0a      	cmp	r3, #10
 80148b8:	d90b      	bls.n	80148d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2205      	movs	r2, #5
 80148ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80148ce:	2301      	movs	r3, #1
 80148d0:	e012      	b.n	80148f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	f003 0301 	and.w	r3, r3, #1
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d1e5      	bne.n	80148ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2200      	movs	r2, #0
 80148e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80148e6:	2300      	movs	r3, #0
 80148e8:	e006      	b.n	80148f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80148f6:	2301      	movs	r3, #1
  }
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3710      	adds	r7, #16
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8014900:	b480      	push	{r7}
 8014902:	b089      	sub	sp, #36	; 0x24
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	607a      	str	r2, [r7, #4]
 801490c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014914:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 801491e:	7ffb      	ldrb	r3, [r7, #31]
 8014920:	2b01      	cmp	r3, #1
 8014922:	d003      	beq.n	801492c <HAL_CAN_AddTxMessage+0x2c>
 8014924:	7ffb      	ldrb	r3, [r7, #31]
 8014926:	2b02      	cmp	r3, #2
 8014928:	f040 80b8 	bne.w	8014a9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014932:	2b00      	cmp	r3, #0
 8014934:	d10a      	bne.n	801494c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 801493c:	2b00      	cmp	r3, #0
 801493e:	d105      	bne.n	801494c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8014946:	2b00      	cmp	r3, #0
 8014948:	f000 80a0 	beq.w	8014a8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	0e1b      	lsrs	r3, r3, #24
 8014950:	f003 0303 	and.w	r3, r3, #3
 8014954:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	2b02      	cmp	r3, #2
 801495a:	d907      	bls.n	801496c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014960:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014968:	2301      	movs	r3, #1
 801496a:	e09e      	b.n	8014aaa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801496c:	2201      	movs	r2, #1
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	409a      	lsls	r2, r3
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	689b      	ldr	r3, [r3, #8]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d10d      	bne.n	801499a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8014984:	68bb      	ldr	r3, [r7, #8]
 8014986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8014988:	68f9      	ldr	r1, [r7, #12]
 801498a:	6809      	ldr	r1, [r1, #0]
 801498c:	431a      	orrs	r2, r3
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	3318      	adds	r3, #24
 8014992:	011b      	lsls	r3, r3, #4
 8014994:	440b      	add	r3, r1
 8014996:	601a      	str	r2, [r3, #0]
 8014998:	e00f      	b.n	80149ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80149a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80149aa:	68f9      	ldr	r1, [r7, #12]
 80149ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80149ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	3318      	adds	r3, #24
 80149b4:	011b      	lsls	r3, r3, #4
 80149b6:	440b      	add	r3, r1
 80149b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	6819      	ldr	r1, [r3, #0]
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	691a      	ldr	r2, [r3, #16]
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	3318      	adds	r3, #24
 80149c6:	011b      	lsls	r3, r3, #4
 80149c8:	440b      	add	r3, r1
 80149ca:	3304      	adds	r3, #4
 80149cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	7d1b      	ldrb	r3, [r3, #20]
 80149d2:	2b01      	cmp	r3, #1
 80149d4:	d111      	bne.n	80149fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	3318      	adds	r3, #24
 80149de:	011b      	lsls	r3, r3, #4
 80149e0:	4413      	add	r3, r2
 80149e2:	3304      	adds	r3, #4
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	6811      	ldr	r1, [r2, #0]
 80149ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	3318      	adds	r3, #24
 80149f2:	011b      	lsls	r3, r3, #4
 80149f4:	440b      	add	r3, r1
 80149f6:	3304      	adds	r3, #4
 80149f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	3307      	adds	r3, #7
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	061a      	lsls	r2, r3, #24
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	3306      	adds	r3, #6
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	041b      	lsls	r3, r3, #16
 8014a0a:	431a      	orrs	r2, r3
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	3305      	adds	r3, #5
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	021b      	lsls	r3, r3, #8
 8014a14:	4313      	orrs	r3, r2
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	3204      	adds	r2, #4
 8014a1a:	7812      	ldrb	r2, [r2, #0]
 8014a1c:	4610      	mov	r0, r2
 8014a1e:	68fa      	ldr	r2, [r7, #12]
 8014a20:	6811      	ldr	r1, [r2, #0]
 8014a22:	ea43 0200 	orr.w	r2, r3, r0
 8014a26:	697b      	ldr	r3, [r7, #20]
 8014a28:	011b      	lsls	r3, r3, #4
 8014a2a:	440b      	add	r3, r1
 8014a2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014a30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	3303      	adds	r3, #3
 8014a36:	781b      	ldrb	r3, [r3, #0]
 8014a38:	061a      	lsls	r2, r3, #24
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3302      	adds	r3, #2
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	041b      	lsls	r3, r3, #16
 8014a42:	431a      	orrs	r2, r3
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	3301      	adds	r3, #1
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	021b      	lsls	r3, r3, #8
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	7812      	ldrb	r2, [r2, #0]
 8014a52:	4610      	mov	r0, r2
 8014a54:	68fa      	ldr	r2, [r7, #12]
 8014a56:	6811      	ldr	r1, [r2, #0]
 8014a58:	ea43 0200 	orr.w	r2, r3, r0
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	011b      	lsls	r3, r3, #4
 8014a60:	440b      	add	r3, r1
 8014a62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8014a66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	697b      	ldr	r3, [r7, #20]
 8014a6e:	3318      	adds	r3, #24
 8014a70:	011b      	lsls	r3, r3, #4
 8014a72:	4413      	add	r3, r2
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	6811      	ldr	r1, [r2, #0]
 8014a7a:	f043 0201 	orr.w	r2, r3, #1
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	3318      	adds	r3, #24
 8014a82:	011b      	lsls	r3, r3, #4
 8014a84:	440b      	add	r3, r1
 8014a86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	e00e      	b.n	8014aaa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	e006      	b.n	8014aaa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014aa8:	2301      	movs	r3, #1
  }
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3724      	adds	r7, #36	; 0x24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab4:	4770      	bx	lr

08014ab6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8014ab6:	b480      	push	{r7}
 8014ab8:	b085      	sub	sp, #20
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ac8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8014aca:	7afb      	ldrb	r3, [r7, #11]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d002      	beq.n	8014ad6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8014ad0:	7afb      	ldrb	r3, [r7, #11]
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	d11d      	bne.n	8014b12 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	689b      	ldr	r3, [r3, #8]
 8014adc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d002      	beq.n	8014aea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	689b      	ldr	r3, [r3, #8]
 8014af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	3301      	adds	r3, #1
 8014afc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d002      	beq.n	8014b12 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	3301      	adds	r3, #1
 8014b10:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8014b12:	68fb      	ldr	r3, [r7, #12]
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3714      	adds	r7, #20
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr

08014b20 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8014b20:	b480      	push	{r7}
 8014b22:	b087      	sub	sp, #28
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	60f8      	str	r0, [r7, #12]
 8014b28:	60b9      	str	r1, [r7, #8]
 8014b2a:	607a      	str	r2, [r7, #4]
 8014b2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8014b36:	7dfb      	ldrb	r3, [r7, #23]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d003      	beq.n	8014b44 <HAL_CAN_GetRxMessage+0x24>
 8014b3c:	7dfb      	ldrb	r3, [r7, #23]
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	f040 80f3 	bne.w	8014d2a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10e      	bne.n	8014b68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	f003 0303 	and.w	r3, r3, #3
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d116      	bne.n	8014b86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014b64:	2301      	movs	r3, #1
 8014b66:	e0e7      	b.n	8014d38 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	f003 0303 	and.w	r3, r3, #3
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d107      	bne.n	8014b86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8014b82:	2301      	movs	r3, #1
 8014b84:	e0d8      	b.n	8014d38 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	681a      	ldr	r2, [r3, #0]
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	331b      	adds	r3, #27
 8014b8e:	011b      	lsls	r3, r3, #4
 8014b90:	4413      	add	r3, r2
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	f003 0204 	and.w	r2, r3, #4
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d10c      	bne.n	8014bbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	331b      	adds	r3, #27
 8014bac:	011b      	lsls	r3, r3, #4
 8014bae:	4413      	add	r3, r2
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	0d5b      	lsrs	r3, r3, #21
 8014bb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	601a      	str	r2, [r3, #0]
 8014bbc:	e00b      	b.n	8014bd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681a      	ldr	r2, [r3, #0]
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	331b      	adds	r3, #27
 8014bc6:	011b      	lsls	r3, r3, #4
 8014bc8:	4413      	add	r3, r2
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	08db      	lsrs	r3, r3, #3
 8014bce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	331b      	adds	r3, #27
 8014bde:	011b      	lsls	r3, r3, #4
 8014be0:	4413      	add	r3, r2
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	f003 0202 	and.w	r2, r3, #2
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	331b      	adds	r3, #27
 8014bf4:	011b      	lsls	r3, r3, #4
 8014bf6:	4413      	add	r3, r2
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f003 020f 	and.w	r2, r3, #15
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	331b      	adds	r3, #27
 8014c0c:	011b      	lsls	r3, r3, #4
 8014c0e:	4413      	add	r3, r2
 8014c10:	3304      	adds	r3, #4
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	0a1b      	lsrs	r3, r3, #8
 8014c16:	b2da      	uxtb	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	331b      	adds	r3, #27
 8014c24:	011b      	lsls	r3, r3, #4
 8014c26:	4413      	add	r3, r2
 8014c28:	3304      	adds	r3, #4
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	0c1b      	lsrs	r3, r3, #16
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	011b      	lsls	r3, r3, #4
 8014c3c:	4413      	add	r3, r2
 8014c3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	b2da      	uxtb	r2, r3
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	011b      	lsls	r3, r3, #4
 8014c52:	4413      	add	r3, r2
 8014c54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	0a1a      	lsrs	r2, r3, #8
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	b2d2      	uxtb	r2, r2
 8014c62:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	011b      	lsls	r3, r3, #4
 8014c6c:	4413      	add	r3, r2
 8014c6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	0c1a      	lsrs	r2, r3, #16
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	3302      	adds	r3, #2
 8014c7a:	b2d2      	uxtb	r2, r2
 8014c7c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681a      	ldr	r2, [r3, #0]
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	011b      	lsls	r3, r3, #4
 8014c86:	4413      	add	r3, r2
 8014c88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	0e1a      	lsrs	r2, r3, #24
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	3303      	adds	r3, #3
 8014c94:	b2d2      	uxtb	r2, r2
 8014c96:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	011b      	lsls	r3, r3, #4
 8014ca0:	4413      	add	r3, r2
 8014ca2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014ca6:	681a      	ldr	r2, [r3, #0]
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	3304      	adds	r3, #4
 8014cac:	b2d2      	uxtb	r2, r2
 8014cae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	011b      	lsls	r3, r3, #4
 8014cb8:	4413      	add	r3, r2
 8014cba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	0a1a      	lsrs	r2, r3, #8
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	3305      	adds	r3, #5
 8014cc6:	b2d2      	uxtb	r2, r2
 8014cc8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	011b      	lsls	r3, r3, #4
 8014cd2:	4413      	add	r3, r2
 8014cd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	0c1a      	lsrs	r2, r3, #16
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	3306      	adds	r3, #6
 8014ce0:	b2d2      	uxtb	r2, r2
 8014ce2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	681a      	ldr	r2, [r3, #0]
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	011b      	lsls	r3, r3, #4
 8014cec:	4413      	add	r3, r2
 8014cee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	0e1a      	lsrs	r2, r3, #24
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	3307      	adds	r3, #7
 8014cfa:	b2d2      	uxtb	r2, r2
 8014cfc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d108      	bne.n	8014d16 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	68da      	ldr	r2, [r3, #12]
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	f042 0220 	orr.w	r2, r2, #32
 8014d12:	60da      	str	r2, [r3, #12]
 8014d14:	e007      	b.n	8014d26 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	691a      	ldr	r2, [r3, #16]
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	f042 0220 	orr.w	r2, r2, #32
 8014d24:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8014d26:	2300      	movs	r3, #0
 8014d28:	e006      	b.n	8014d38 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014d36:	2301      	movs	r3, #1
  }
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	371c      	adds	r7, #28
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr

08014d44 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b085      	sub	sp, #20
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d54:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8014d56:	7bfb      	ldrb	r3, [r7, #15]
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d002      	beq.n	8014d62 <HAL_CAN_ActivateNotification+0x1e>
 8014d5c:	7bfb      	ldrb	r3, [r7, #15]
 8014d5e:	2b02      	cmp	r3, #2
 8014d60:	d109      	bne.n	8014d76 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	6959      	ldr	r1, [r3, #20]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	683a      	ldr	r2, [r7, #0]
 8014d6e:	430a      	orrs	r2, r1
 8014d70:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8014d72:	2300      	movs	r3, #0
 8014d74:	e006      	b.n	8014d84 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8014d82:	2301      	movs	r3, #1
  }
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3714      	adds	r7, #20
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8e:	4770      	bx	lr

08014d90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b08a      	sub	sp, #40	; 0x28
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	695b      	ldr	r3, [r3, #20]
 8014da2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	691b      	ldr	r3, [r3, #16]
 8014dc2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8014dcc:	6a3b      	ldr	r3, [r7, #32]
 8014dce:	f003 0301 	and.w	r3, r3, #1
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d07c      	beq.n	8014ed0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8014dd6:	69bb      	ldr	r3, [r7, #24]
 8014dd8:	f003 0301 	and.w	r3, r3, #1
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d023      	beq.n	8014e28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	2201      	movs	r2, #1
 8014de6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	f003 0302 	and.w	r3, r3, #2
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d003      	beq.n	8014dfa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f000 f983 	bl	80150fe <HAL_CAN_TxMailbox0CompleteCallback>
 8014df8:	e016      	b.n	8014e28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	f003 0304 	and.w	r3, r3, #4
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d004      	beq.n	8014e0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8014e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8014e0c:	e00c      	b.n	8014e28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8014e0e:	69bb      	ldr	r3, [r7, #24]
 8014e10:	f003 0308 	and.w	r3, r3, #8
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d004      	beq.n	8014e22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8014e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8014e20:	e002      	b.n	8014e28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f989 	bl	801513a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d024      	beq.n	8014e7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014e3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d003      	beq.n	8014e4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f000 f963 	bl	8015112 <HAL_CAN_TxMailbox1CompleteCallback>
 8014e4c:	e016      	b.n	8014e7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8014e4e:	69bb      	ldr	r3, [r7, #24]
 8014e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d004      	beq.n	8014e62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8014e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8014e60:	e00c      	b.n	8014e7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d004      	beq.n	8014e76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8014e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014e72:	627b      	str	r3, [r7, #36]	; 0x24
 8014e74:	e002      	b.n	8014e7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f000 f969 	bl	801514e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d024      	beq.n	8014ed0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8014e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8014e90:	69bb      	ldr	r3, [r7, #24]
 8014e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d003      	beq.n	8014ea2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f000 f943 	bl	8015126 <HAL_CAN_TxMailbox2CompleteCallback>
 8014ea0:	e016      	b.n	8014ed0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8014ea2:	69bb      	ldr	r3, [r7, #24]
 8014ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d004      	beq.n	8014eb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8014eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8014eb4:	e00c      	b.n	8014ed0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8014eb6:	69bb      	ldr	r3, [r7, #24]
 8014eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d004      	beq.n	8014eca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8014ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8014ec8:	e002      	b.n	8014ed0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f000 f949 	bl	8015162 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8014ed0:	6a3b      	ldr	r3, [r7, #32]
 8014ed2:	f003 0308 	and.w	r3, r3, #8
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d00c      	beq.n	8014ef4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f003 0310 	and.w	r3, r3, #16
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d007      	beq.n	8014ef4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8014ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014eea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2210      	movs	r2, #16
 8014ef2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8014ef4:	6a3b      	ldr	r3, [r7, #32]
 8014ef6:	f003 0304 	and.w	r3, r3, #4
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d00b      	beq.n	8014f16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f003 0308 	and.w	r3, r3, #8
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d006      	beq.n	8014f16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2208      	movs	r2, #8
 8014f0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 f930 	bl	8015176 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8014f16:	6a3b      	ldr	r3, [r7, #32]
 8014f18:	f003 0302 	and.w	r3, r3, #2
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d009      	beq.n	8014f34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	68db      	ldr	r3, [r3, #12]
 8014f26:	f003 0303 	and.w	r3, r3, #3
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d002      	beq.n	8014f34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7f4 fba2 	bl	8009678 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8014f34:	6a3b      	ldr	r3, [r7, #32]
 8014f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d00c      	beq.n	8014f58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	f003 0310 	and.w	r3, r3, #16
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d007      	beq.n	8014f58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8014f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014f4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	2210      	movs	r2, #16
 8014f56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8014f58:	6a3b      	ldr	r3, [r7, #32]
 8014f5a:	f003 0320 	and.w	r3, r3, #32
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00b      	beq.n	8014f7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	f003 0308 	and.w	r3, r3, #8
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d006      	beq.n	8014f7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2208      	movs	r2, #8
 8014f72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 f908 	bl	801518a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8014f7a:	6a3b      	ldr	r3, [r7, #32]
 8014f7c:	f003 0310 	and.w	r3, r3, #16
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d009      	beq.n	8014f98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	691b      	ldr	r3, [r3, #16]
 8014f8a:	f003 0303 	and.w	r3, r3, #3
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d002      	beq.n	8014f98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f7f4 fdc6 	bl	8009b24 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8014f98:	6a3b      	ldr	r3, [r7, #32]
 8014f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00b      	beq.n	8014fba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	f003 0310 	and.w	r3, r3, #16
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d006      	beq.n	8014fba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2210      	movs	r2, #16
 8014fb2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f000 f8f2 	bl	801519e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8014fba:	6a3b      	ldr	r3, [r7, #32]
 8014fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d00b      	beq.n	8014fdc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	f003 0308 	and.w	r3, r3, #8
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d006      	beq.n	8014fdc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	2208      	movs	r2, #8
 8014fd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f000 f8eb 	bl	80151b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
 8014fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d07b      	beq.n	80150de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	f003 0304 	and.w	r3, r3, #4
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d072      	beq.n	80150d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8014ff0:	6a3b      	ldr	r3, [r7, #32]
 8014ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d008      	beq.n	801500c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015000:	2b00      	cmp	r3, #0
 8015002:	d003      	beq.n	801500c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015012:	2b00      	cmp	r3, #0
 8015014:	d008      	beq.n	8015028 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801501c:	2b00      	cmp	r3, #0
 801501e:	d003      	beq.n	8015028 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8015020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015022:	f043 0302 	orr.w	r3, r3, #2
 8015026:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015028:	6a3b      	ldr	r3, [r7, #32]
 801502a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801502e:	2b00      	cmp	r3, #0
 8015030:	d008      	beq.n	8015044 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015038:	2b00      	cmp	r3, #0
 801503a:	d003      	beq.n	8015044 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503e:	f043 0304 	orr.w	r3, r3, #4
 8015042:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801504a:	2b00      	cmp	r3, #0
 801504c:	d043      	beq.n	80150d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015054:	2b00      	cmp	r3, #0
 8015056:	d03e      	beq.n	80150d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801505e:	2b60      	cmp	r3, #96	; 0x60
 8015060:	d02b      	beq.n	80150ba <HAL_CAN_IRQHandler+0x32a>
 8015062:	2b60      	cmp	r3, #96	; 0x60
 8015064:	d82e      	bhi.n	80150c4 <HAL_CAN_IRQHandler+0x334>
 8015066:	2b50      	cmp	r3, #80	; 0x50
 8015068:	d022      	beq.n	80150b0 <HAL_CAN_IRQHandler+0x320>
 801506a:	2b50      	cmp	r3, #80	; 0x50
 801506c:	d82a      	bhi.n	80150c4 <HAL_CAN_IRQHandler+0x334>
 801506e:	2b40      	cmp	r3, #64	; 0x40
 8015070:	d019      	beq.n	80150a6 <HAL_CAN_IRQHandler+0x316>
 8015072:	2b40      	cmp	r3, #64	; 0x40
 8015074:	d826      	bhi.n	80150c4 <HAL_CAN_IRQHandler+0x334>
 8015076:	2b30      	cmp	r3, #48	; 0x30
 8015078:	d010      	beq.n	801509c <HAL_CAN_IRQHandler+0x30c>
 801507a:	2b30      	cmp	r3, #48	; 0x30
 801507c:	d822      	bhi.n	80150c4 <HAL_CAN_IRQHandler+0x334>
 801507e:	2b10      	cmp	r3, #16
 8015080:	d002      	beq.n	8015088 <HAL_CAN_IRQHandler+0x2f8>
 8015082:	2b20      	cmp	r3, #32
 8015084:	d005      	beq.n	8015092 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8015086:	e01d      	b.n	80150c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8015088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508a:	f043 0308 	orr.w	r3, r3, #8
 801508e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015090:	e019      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8015092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015094:	f043 0310 	orr.w	r3, r3, #16
 8015098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801509a:	e014      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	f043 0320 	orr.w	r3, r3, #32
 80150a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80150a4:	e00f      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80150ae:	e00a      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80150b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80150b8:	e005      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80150c2:	e000      	b.n	80150c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80150c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	699a      	ldr	r2, [r3, #24]
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80150d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2204      	movs	r2, #4
 80150dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80150de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d008      	beq.n	80150f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ea:	431a      	orrs	r2, r3
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 f868 	bl	80151c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80150f6:	bf00      	nop
 80150f8:	3728      	adds	r7, #40	; 0x28
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}

080150fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80150fe:	b480      	push	{r7}
 8015100:	b083      	sub	sp, #12
 8015102:	af00      	add	r7, sp, #0
 8015104:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8015106:	bf00      	nop
 8015108:	370c      	adds	r7, #12
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr

08015112 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015112:	b480      	push	{r7}
 8015114:	b083      	sub	sp, #12
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801511a:	bf00      	nop
 801511c:	370c      	adds	r7, #12
 801511e:	46bd      	mov	sp, r7
 8015120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015124:	4770      	bx	lr

08015126 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015126:	b480      	push	{r7}
 8015128:	b083      	sub	sp, #12
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 801512e:	bf00      	nop
 8015130:	370c      	adds	r7, #12
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr

0801513a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801513a:	b480      	push	{r7}
 801513c:	b083      	sub	sp, #12
 801513e:	af00      	add	r7, sp, #0
 8015140:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8015142:	bf00      	nop
 8015144:	370c      	adds	r7, #12
 8015146:	46bd      	mov	sp, r7
 8015148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514c:	4770      	bx	lr

0801514e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801514e:	b480      	push	{r7}
 8015150:	b083      	sub	sp, #12
 8015152:	af00      	add	r7, sp, #0
 8015154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8015156:	bf00      	nop
 8015158:	370c      	adds	r7, #12
 801515a:	46bd      	mov	sp, r7
 801515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015160:	4770      	bx	lr

08015162 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8015162:	b480      	push	{r7}
 8015164:	b083      	sub	sp, #12
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801516a:	bf00      	nop
 801516c:	370c      	adds	r7, #12
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr

08015176 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8015176:	b480      	push	{r7}
 8015178:	b083      	sub	sp, #12
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801517e:	bf00      	nop
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015188:	4770      	bx	lr

0801518a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801518a:	b480      	push	{r7}
 801518c:	b083      	sub	sp, #12
 801518e:	af00      	add	r7, sp, #0
 8015190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8015192:	bf00      	nop
 8015194:	370c      	adds	r7, #12
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr

0801519e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801519e:	b480      	push	{r7}
 80151a0:	b083      	sub	sp, #12
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80151a6:	bf00      	nop
 80151a8:	370c      	adds	r7, #12
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr

080151b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80151b2:	b480      	push	{r7}
 80151b4:	b083      	sub	sp, #12
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80151ba:	bf00      	nop
 80151bc:	370c      	adds	r7, #12
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr

080151c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80151c6:	b480      	push	{r7}
 80151c8:	b083      	sub	sp, #12
 80151ca:	af00      	add	r7, sp, #0
 80151cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80151ce:	bf00      	nop
 80151d0:	370c      	adds	r7, #12
 80151d2:	46bd      	mov	sp, r7
 80151d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d8:	4770      	bx	lr
	...

080151dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80151dc:	b480      	push	{r7}
 80151de:	b085      	sub	sp, #20
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f003 0307 	and.w	r3, r3, #7
 80151ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80151ec:	4b0c      	ldr	r3, [pc, #48]	; (8015220 <__NVIC_SetPriorityGrouping+0x44>)
 80151ee:	68db      	ldr	r3, [r3, #12]
 80151f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80151f8:	4013      	ands	r3, r2
 80151fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801520c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801520e:	4a04      	ldr	r2, [pc, #16]	; (8015220 <__NVIC_SetPriorityGrouping+0x44>)
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	60d3      	str	r3, [r2, #12]
}
 8015214:	bf00      	nop
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr
 8015220:	e000ed00 	.word	0xe000ed00

08015224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015224:	b480      	push	{r7}
 8015226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015228:	4b04      	ldr	r3, [pc, #16]	; (801523c <__NVIC_GetPriorityGrouping+0x18>)
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	0a1b      	lsrs	r3, r3, #8
 801522e:	f003 0307 	and.w	r3, r3, #7
}
 8015232:	4618      	mov	r0, r3
 8015234:	46bd      	mov	sp, r7
 8015236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523a:	4770      	bx	lr
 801523c:	e000ed00 	.word	0xe000ed00

08015240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015240:	b480      	push	{r7}
 8015242:	b083      	sub	sp, #12
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801524a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801524e:	2b00      	cmp	r3, #0
 8015250:	db0b      	blt.n	801526a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015252:	79fb      	ldrb	r3, [r7, #7]
 8015254:	f003 021f 	and.w	r2, r3, #31
 8015258:	4907      	ldr	r1, [pc, #28]	; (8015278 <__NVIC_EnableIRQ+0x38>)
 801525a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801525e:	095b      	lsrs	r3, r3, #5
 8015260:	2001      	movs	r0, #1
 8015262:	fa00 f202 	lsl.w	r2, r0, r2
 8015266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801526a:	bf00      	nop
 801526c:	370c      	adds	r7, #12
 801526e:	46bd      	mov	sp, r7
 8015270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015274:	4770      	bx	lr
 8015276:	bf00      	nop
 8015278:	e000e100 	.word	0xe000e100

0801527c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801527c:	b480      	push	{r7}
 801527e:	b083      	sub	sp, #12
 8015280:	af00      	add	r7, sp, #0
 8015282:	4603      	mov	r3, r0
 8015284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801528a:	2b00      	cmp	r3, #0
 801528c:	db12      	blt.n	80152b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801528e:	79fb      	ldrb	r3, [r7, #7]
 8015290:	f003 021f 	and.w	r2, r3, #31
 8015294:	490a      	ldr	r1, [pc, #40]	; (80152c0 <__NVIC_DisableIRQ+0x44>)
 8015296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801529a:	095b      	lsrs	r3, r3, #5
 801529c:	2001      	movs	r0, #1
 801529e:	fa00 f202 	lsl.w	r2, r0, r2
 80152a2:	3320      	adds	r3, #32
 80152a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80152a8:	f3bf 8f4f 	dsb	sy
}
 80152ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80152ae:	f3bf 8f6f 	isb	sy
}
 80152b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80152b4:	bf00      	nop
 80152b6:	370c      	adds	r7, #12
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr
 80152c0:	e000e100 	.word	0xe000e100

080152c4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80152c4:	b480      	push	{r7}
 80152c6:	b083      	sub	sp, #12
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	4603      	mov	r3, r0
 80152cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80152ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	db0c      	blt.n	80152f0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80152d6:	79fb      	ldrb	r3, [r7, #7]
 80152d8:	f003 021f 	and.w	r2, r3, #31
 80152dc:	4907      	ldr	r1, [pc, #28]	; (80152fc <__NVIC_ClearPendingIRQ+0x38>)
 80152de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152e2:	095b      	lsrs	r3, r3, #5
 80152e4:	2001      	movs	r0, #1
 80152e6:	fa00 f202 	lsl.w	r2, r0, r2
 80152ea:	3360      	adds	r3, #96	; 0x60
 80152ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80152f0:	bf00      	nop
 80152f2:	370c      	adds	r7, #12
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr
 80152fc:	e000e100 	.word	0xe000e100

08015300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015300:	b480      	push	{r7}
 8015302:	b083      	sub	sp, #12
 8015304:	af00      	add	r7, sp, #0
 8015306:	4603      	mov	r3, r0
 8015308:	6039      	str	r1, [r7, #0]
 801530a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801530c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015310:	2b00      	cmp	r3, #0
 8015312:	db0a      	blt.n	801532a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	b2da      	uxtb	r2, r3
 8015318:	490c      	ldr	r1, [pc, #48]	; (801534c <__NVIC_SetPriority+0x4c>)
 801531a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801531e:	0112      	lsls	r2, r2, #4
 8015320:	b2d2      	uxtb	r2, r2
 8015322:	440b      	add	r3, r1
 8015324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8015328:	e00a      	b.n	8015340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801532a:	683b      	ldr	r3, [r7, #0]
 801532c:	b2da      	uxtb	r2, r3
 801532e:	4908      	ldr	r1, [pc, #32]	; (8015350 <__NVIC_SetPriority+0x50>)
 8015330:	79fb      	ldrb	r3, [r7, #7]
 8015332:	f003 030f 	and.w	r3, r3, #15
 8015336:	3b04      	subs	r3, #4
 8015338:	0112      	lsls	r2, r2, #4
 801533a:	b2d2      	uxtb	r2, r2
 801533c:	440b      	add	r3, r1
 801533e:	761a      	strb	r2, [r3, #24]
}
 8015340:	bf00      	nop
 8015342:	370c      	adds	r7, #12
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr
 801534c:	e000e100 	.word	0xe000e100
 8015350:	e000ed00 	.word	0xe000ed00

08015354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015354:	b480      	push	{r7}
 8015356:	b089      	sub	sp, #36	; 0x24
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	f003 0307 	and.w	r3, r3, #7
 8015366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	f1c3 0307 	rsb	r3, r3, #7
 801536e:	2b04      	cmp	r3, #4
 8015370:	bf28      	it	cs
 8015372:	2304      	movcs	r3, #4
 8015374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	3304      	adds	r3, #4
 801537a:	2b06      	cmp	r3, #6
 801537c:	d902      	bls.n	8015384 <NVIC_EncodePriority+0x30>
 801537e:	69fb      	ldr	r3, [r7, #28]
 8015380:	3b03      	subs	r3, #3
 8015382:	e000      	b.n	8015386 <NVIC_EncodePriority+0x32>
 8015384:	2300      	movs	r3, #0
 8015386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015388:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	fa02 f303 	lsl.w	r3, r2, r3
 8015392:	43da      	mvns	r2, r3
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	401a      	ands	r2, r3
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801539c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	fa01 f303 	lsl.w	r3, r1, r3
 80153a6:	43d9      	mvns	r1, r3
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80153ac:	4313      	orrs	r3, r2
         );
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3724      	adds	r7, #36	; 0x24
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr

080153ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b082      	sub	sp, #8
 80153be:	af00      	add	r7, sp, #0
 80153c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7ff ff0a 	bl	80151dc <__NVIC_SetPriorityGrouping>
}
 80153c8:	bf00      	nop
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b086      	sub	sp, #24
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	4603      	mov	r3, r0
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
 80153dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80153de:	2300      	movs	r3, #0
 80153e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80153e2:	f7ff ff1f 	bl	8015224 <__NVIC_GetPriorityGrouping>
 80153e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	68b9      	ldr	r1, [r7, #8]
 80153ec:	6978      	ldr	r0, [r7, #20]
 80153ee:	f7ff ffb1 	bl	8015354 <NVIC_EncodePriority>
 80153f2:	4602      	mov	r2, r0
 80153f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153f8:	4611      	mov	r1, r2
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff ff80 	bl	8015300 <__NVIC_SetPriority>
}
 8015400:	bf00      	nop
 8015402:	3718      	adds	r7, #24
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}

08015408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	4603      	mov	r3, r0
 8015410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015416:	4618      	mov	r0, r3
 8015418:	f7ff ff12 	bl	8015240 <__NVIC_EnableIRQ>
}
 801541c:	bf00      	nop
 801541e:	3708      	adds	r7, #8
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015432:	4618      	mov	r0, r3
 8015434:	f7ff ff22 	bl	801527c <__NVIC_DisableIRQ>
}
 8015438:	bf00      	nop
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}

08015440 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	4603      	mov	r3, r0
 8015448:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 801544a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801544e:	4618      	mov	r0, r3
 8015450:	f7ff ff38 	bl	80152c4 <__NVIC_ClearPendingIRQ>
}
 8015454:	bf00      	nop
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b086      	sub	sp, #24
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8015464:	2300      	movs	r3, #0
 8015466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8015468:	f7fe fc06 	bl	8013c78 <HAL_GetTick>
 801546c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d101      	bne.n	8015478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8015474:	2301      	movs	r3, #1
 8015476:	e099      	b.n	80155ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	2200      	movs	r2, #0
 801547c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	2202      	movs	r2, #2
 8015484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	f022 0201 	bic.w	r2, r2, #1
 8015496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015498:	e00f      	b.n	80154ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801549a:	f7fe fbed 	bl	8013c78 <HAL_GetTick>
 801549e:	4602      	mov	r2, r0
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	1ad3      	subs	r3, r2, r3
 80154a4:	2b05      	cmp	r3, #5
 80154a6:	d908      	bls.n	80154ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	2220      	movs	r2, #32
 80154ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2203      	movs	r2, #3
 80154b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80154b6:	2303      	movs	r3, #3
 80154b8:	e078      	b.n	80155ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	f003 0301 	and.w	r3, r3, #1
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d1e8      	bne.n	801549a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80154d0:	697a      	ldr	r2, [r7, #20]
 80154d2:	4b38      	ldr	r3, [pc, #224]	; (80155b4 <HAL_DMA_Init+0x158>)
 80154d4:	4013      	ands	r3, r2
 80154d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	685a      	ldr	r2, [r3, #4]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80154e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	691b      	ldr	r3, [r3, #16]
 80154ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80154f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	699b      	ldr	r3, [r3, #24]
 80154f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80154fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	6a1b      	ldr	r3, [r3, #32]
 8015504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8015506:	697a      	ldr	r2, [r7, #20]
 8015508:	4313      	orrs	r3, r2
 801550a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015510:	2b04      	cmp	r3, #4
 8015512:	d107      	bne.n	8015524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801551c:	4313      	orrs	r3, r2
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	4313      	orrs	r3, r2
 8015522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	697a      	ldr	r2, [r7, #20]
 801552a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	695b      	ldr	r3, [r3, #20]
 8015532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	f023 0307 	bic.w	r3, r3, #7
 801553a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015540:	697a      	ldr	r2, [r7, #20]
 8015542:	4313      	orrs	r3, r2
 8015544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801554a:	2b04      	cmp	r3, #4
 801554c:	d117      	bne.n	801557e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015552:	697a      	ldr	r2, [r7, #20]
 8015554:	4313      	orrs	r3, r2
 8015556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00e      	beq.n	801557e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	f000 fb09 	bl	8015b78 <DMA_CheckFifoParam>
 8015566:	4603      	mov	r3, r0
 8015568:	2b00      	cmp	r3, #0
 801556a:	d008      	beq.n	801557e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	2240      	movs	r2, #64	; 0x40
 8015570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2201      	movs	r2, #1
 8015576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801557a:	2301      	movs	r3, #1
 801557c:	e016      	b.n	80155ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	697a      	ldr	r2, [r7, #20]
 8015584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f000 fac0 	bl	8015b0c <DMA_CalcBaseAndBitshift>
 801558c:	4603      	mov	r3, r0
 801558e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015594:	223f      	movs	r2, #63	; 0x3f
 8015596:	409a      	lsls	r2, r3
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2200      	movs	r2, #0
 80155a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2201      	movs	r2, #1
 80155a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80155aa:	2300      	movs	r3, #0
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3718      	adds	r7, #24
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	f010803f 	.word	0xf010803f

080155b8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b084      	sub	sp, #16
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80155c6:	2301      	movs	r3, #1
 80155c8:	e050      	b.n	801566c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	2b02      	cmp	r3, #2
 80155d4:	d101      	bne.n	80155da <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80155d6:	2302      	movs	r3, #2
 80155d8:	e048      	b.n	801566c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	f022 0201 	bic.w	r2, r2, #1
 80155e8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	2200      	movs	r2, #0
 80155f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	2200      	movs	r2, #0
 80155f8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2200      	movs	r2, #0
 8015600:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	2200      	movs	r2, #0
 8015608:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	2200      	movs	r2, #0
 8015610:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2221      	movs	r2, #33	; 0x21
 8015618:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 fa76 	bl	8015b0c <DMA_CalcBaseAndBitshift>
 8015620:	4603      	mov	r3, r0
 8015622:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	2200      	movs	r2, #0
 8015628:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	2200      	movs	r2, #0
 801562e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2200      	movs	r2, #0
 8015640:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2200      	movs	r2, #0
 8015646:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801564c:	223f      	movs	r2, #63	; 0x3f
 801564e:	409a      	lsls	r2, r3
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	2200      	movs	r2, #0
 8015658:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2200      	movs	r2, #0
 8015666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801566a:	2300      	movs	r3, #0
}
 801566c:	4618      	mov	r0, r3
 801566e:	3710      	adds	r7, #16
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}

08015674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b086      	sub	sp, #24
 8015678:	af00      	add	r7, sp, #0
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	607a      	str	r2, [r7, #4]
 8015680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801568a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015692:	2b01      	cmp	r3, #1
 8015694:	d101      	bne.n	801569a <HAL_DMA_Start_IT+0x26>
 8015696:	2302      	movs	r3, #2
 8015698:	e040      	b.n	801571c <HAL_DMA_Start_IT+0xa8>
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2201      	movs	r2, #1
 801569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	2b01      	cmp	r3, #1
 80156ac:	d12f      	bne.n	801570e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	2202      	movs	r2, #2
 80156b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	2200      	movs	r2, #0
 80156ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	687a      	ldr	r2, [r7, #4]
 80156c0:	68b9      	ldr	r1, [r7, #8]
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f000 f9f4 	bl	8015ab0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80156cc:	223f      	movs	r2, #63	; 0x3f
 80156ce:	409a      	lsls	r2, r3
 80156d0:	693b      	ldr	r3, [r7, #16]
 80156d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	f042 0216 	orr.w	r2, r2, #22
 80156e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d007      	beq.n	80156fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	681a      	ldr	r2, [r3, #0]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	f042 0208 	orr.w	r2, r2, #8
 80156fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f042 0201 	orr.w	r2, r2, #1
 801570a:	601a      	str	r2, [r3, #0]
 801570c:	e005      	b.n	801571a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2200      	movs	r2, #0
 8015712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8015716:	2302      	movs	r3, #2
 8015718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801571a:	7dfb      	ldrb	r3, [r7, #23]
}
 801571c:	4618      	mov	r0, r3
 801571e:	3718      	adds	r7, #24
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015724:	b480      	push	{r7}
 8015726:	b083      	sub	sp, #12
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015732:	b2db      	uxtb	r3, r3
 8015734:	2b02      	cmp	r3, #2
 8015736:	d004      	beq.n	8015742 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2280      	movs	r2, #128	; 0x80
 801573c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801573e:	2301      	movs	r3, #1
 8015740:	e00c      	b.n	801575c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2205      	movs	r2, #5
 8015746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f022 0201 	bic.w	r2, r2, #1
 8015758:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801575a:	2300      	movs	r3, #0
}
 801575c:	4618      	mov	r0, r3
 801575e:	370c      	adds	r7, #12
 8015760:	46bd      	mov	sp, r7
 8015762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015766:	4770      	bx	lr

08015768 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b086      	sub	sp, #24
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8015770:	2300      	movs	r3, #0
 8015772:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8015774:	4b92      	ldr	r3, [pc, #584]	; (80159c0 <HAL_DMA_IRQHandler+0x258>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	4a92      	ldr	r2, [pc, #584]	; (80159c4 <HAL_DMA_IRQHandler+0x25c>)
 801577a:	fba2 2303 	umull	r2, r3, r2, r3
 801577e:	0a9b      	lsrs	r3, r3, #10
 8015780:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015786:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015792:	2208      	movs	r2, #8
 8015794:	409a      	lsls	r2, r3
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	4013      	ands	r3, r2
 801579a:	2b00      	cmp	r3, #0
 801579c:	d01a      	beq.n	80157d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f003 0304 	and.w	r3, r3, #4
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d013      	beq.n	80157d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	f022 0204 	bic.w	r2, r2, #4
 80157ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157c0:	2208      	movs	r2, #8
 80157c2:	409a      	lsls	r2, r3
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80157cc:	f043 0201 	orr.w	r2, r3, #1
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157d8:	2201      	movs	r2, #1
 80157da:	409a      	lsls	r2, r3
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	4013      	ands	r3, r2
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d012      	beq.n	801580a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	695b      	ldr	r3, [r3, #20]
 80157ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d00b      	beq.n	801580a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157f6:	2201      	movs	r2, #1
 80157f8:	409a      	lsls	r2, r3
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015802:	f043 0202 	orr.w	r2, r3, #2
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801580e:	2204      	movs	r2, #4
 8015810:	409a      	lsls	r2, r3
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	4013      	ands	r3, r2
 8015816:	2b00      	cmp	r3, #0
 8015818:	d012      	beq.n	8015840 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f003 0302 	and.w	r3, r3, #2
 8015824:	2b00      	cmp	r3, #0
 8015826:	d00b      	beq.n	8015840 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801582c:	2204      	movs	r2, #4
 801582e:	409a      	lsls	r2, r3
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015838:	f043 0204 	orr.w	r2, r3, #4
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015844:	2210      	movs	r2, #16
 8015846:	409a      	lsls	r2, r3
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	4013      	ands	r3, r2
 801584c:	2b00      	cmp	r3, #0
 801584e:	d043      	beq.n	80158d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f003 0308 	and.w	r3, r3, #8
 801585a:	2b00      	cmp	r3, #0
 801585c:	d03c      	beq.n	80158d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015862:	2210      	movs	r2, #16
 8015864:	409a      	lsls	r2, r3
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015874:	2b00      	cmp	r3, #0
 8015876:	d018      	beq.n	80158aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015882:	2b00      	cmp	r3, #0
 8015884:	d108      	bne.n	8015898 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801588a:	2b00      	cmp	r3, #0
 801588c:	d024      	beq.n	80158d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	4798      	blx	r3
 8015896:	e01f      	b.n	80158d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801589c:	2b00      	cmp	r3, #0
 801589e:	d01b      	beq.n	80158d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	4798      	blx	r3
 80158a8:	e016      	b.n	80158d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d107      	bne.n	80158c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	f022 0208 	bic.w	r2, r2, #8
 80158c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d003      	beq.n	80158d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158dc:	2220      	movs	r2, #32
 80158de:	409a      	lsls	r2, r3
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	4013      	ands	r3, r2
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	f000 808e 	beq.w	8015a06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	f003 0310 	and.w	r3, r3, #16
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	f000 8086 	beq.w	8015a06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158fe:	2220      	movs	r2, #32
 8015900:	409a      	lsls	r2, r3
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801590c:	b2db      	uxtb	r3, r3
 801590e:	2b05      	cmp	r3, #5
 8015910:	d136      	bne.n	8015980 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	681a      	ldr	r2, [r3, #0]
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	f022 0216 	bic.w	r2, r2, #22
 8015920:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	695a      	ldr	r2, [r3, #20]
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015930:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015936:	2b00      	cmp	r3, #0
 8015938:	d103      	bne.n	8015942 <HAL_DMA_IRQHandler+0x1da>
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801593e:	2b00      	cmp	r3, #0
 8015940:	d007      	beq.n	8015952 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	f022 0208 	bic.w	r2, r2, #8
 8015950:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015956:	223f      	movs	r2, #63	; 0x3f
 8015958:	409a      	lsls	r2, r3
 801595a:	693b      	ldr	r3, [r7, #16]
 801595c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2200      	movs	r2, #0
 8015962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	2201      	movs	r2, #1
 801596a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015972:	2b00      	cmp	r3, #0
 8015974:	d07d      	beq.n	8015a72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	4798      	blx	r3
        }
        return;
 801597e:	e078      	b.n	8015a72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801598a:	2b00      	cmp	r3, #0
 801598c:	d01c      	beq.n	80159c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015998:	2b00      	cmp	r3, #0
 801599a:	d108      	bne.n	80159ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d030      	beq.n	8015a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	4798      	blx	r3
 80159ac:	e02b      	b.n	8015a06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d027      	beq.n	8015a06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	4798      	blx	r3
 80159be:	e022      	b.n	8015a06 <HAL_DMA_IRQHandler+0x29e>
 80159c0:	20000638 	.word	0x20000638
 80159c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d10f      	bne.n	80159f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	681a      	ldr	r2, [r3, #0]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	f022 0210 	bic.w	r2, r2, #16
 80159e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2201      	movs	r2, #1
 80159f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d003      	beq.n	8015a06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a02:	6878      	ldr	r0, [r7, #4]
 8015a04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d032      	beq.n	8015a74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015a12:	f003 0301 	and.w	r3, r3, #1
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d022      	beq.n	8015a60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2205      	movs	r2, #5
 8015a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	681a      	ldr	r2, [r3, #0]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f022 0201 	bic.w	r2, r2, #1
 8015a30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	3301      	adds	r3, #1
 8015a36:	60bb      	str	r3, [r7, #8]
 8015a38:	697a      	ldr	r2, [r7, #20]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d307      	bcc.n	8015a4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	f003 0301 	and.w	r3, r3, #1
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d1f2      	bne.n	8015a32 <HAL_DMA_IRQHandler+0x2ca>
 8015a4c:	e000      	b.n	8015a50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8015a4e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2200      	movs	r2, #0
 8015a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2201      	movs	r2, #1
 8015a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d005      	beq.n	8015a74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a6c:	6878      	ldr	r0, [r7, #4]
 8015a6e:	4798      	blx	r3
 8015a70:	e000      	b.n	8015a74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8015a72:	bf00      	nop
    }
  }
}
 8015a74:	3718      	adds	r7, #24
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop

08015a7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015a8a:	b2db      	uxtb	r3, r3
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	370c      	adds	r7, #12
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr

08015a98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b083      	sub	sp, #12
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8015abe:	68fb      	ldr	r3, [r7, #12]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015acc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	683a      	ldr	r2, [r7, #0]
 8015ad4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	2b40      	cmp	r3, #64	; 0x40
 8015adc:	d108      	bne.n	8015af0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	68ba      	ldr	r2, [r7, #8]
 8015aec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8015aee:	e007      	b.n	8015b00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	68ba      	ldr	r2, [r7, #8]
 8015af6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	687a      	ldr	r2, [r7, #4]
 8015afe:	60da      	str	r2, [r3, #12]
}
 8015b00:	bf00      	nop
 8015b02:	3714      	adds	r7, #20
 8015b04:	46bd      	mov	sp, r7
 8015b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b0a:	4770      	bx	lr

08015b0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	3b10      	subs	r3, #16
 8015b1c:	4a14      	ldr	r2, [pc, #80]	; (8015b70 <DMA_CalcBaseAndBitshift+0x64>)
 8015b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8015b22:	091b      	lsrs	r3, r3, #4
 8015b24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8015b26:	4a13      	ldr	r2, [pc, #76]	; (8015b74 <DMA_CalcBaseAndBitshift+0x68>)
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	2b03      	cmp	r3, #3
 8015b38:	d909      	bls.n	8015b4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015b42:	f023 0303 	bic.w	r3, r3, #3
 8015b46:	1d1a      	adds	r2, r3, #4
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	659a      	str	r2, [r3, #88]	; 0x58
 8015b4c:	e007      	b.n	8015b5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8015b56:	f023 0303 	bic.w	r3, r3, #3
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3714      	adds	r7, #20
 8015b66:	46bd      	mov	sp, r7
 8015b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	aaaaaaab 	.word	0xaaaaaaab
 8015b74:	08024dd4 	.word	0x08024dd4

08015b78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8015b78:	b480      	push	{r7}
 8015b7a:	b085      	sub	sp, #20
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015b80:	2300      	movs	r3, #0
 8015b82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	699b      	ldr	r3, [r3, #24]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d11f      	bne.n	8015bd2 <DMA_CheckFifoParam+0x5a>
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	2b03      	cmp	r3, #3
 8015b96:	d856      	bhi.n	8015c46 <DMA_CheckFifoParam+0xce>
 8015b98:	a201      	add	r2, pc, #4	; (adr r2, 8015ba0 <DMA_CheckFifoParam+0x28>)
 8015b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b9e:	bf00      	nop
 8015ba0:	08015bb1 	.word	0x08015bb1
 8015ba4:	08015bc3 	.word	0x08015bc3
 8015ba8:	08015bb1 	.word	0x08015bb1
 8015bac:	08015c47 	.word	0x08015c47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d046      	beq.n	8015c4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015bc0:	e043      	b.n	8015c4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015bca:	d140      	bne.n	8015c4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015bd0:	e03d      	b.n	8015c4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	699b      	ldr	r3, [r3, #24]
 8015bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015bda:	d121      	bne.n	8015c20 <DMA_CheckFifoParam+0xa8>
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	2b03      	cmp	r3, #3
 8015be0:	d837      	bhi.n	8015c52 <DMA_CheckFifoParam+0xda>
 8015be2:	a201      	add	r2, pc, #4	; (adr r2, 8015be8 <DMA_CheckFifoParam+0x70>)
 8015be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015be8:	08015bf9 	.word	0x08015bf9
 8015bec:	08015bff 	.word	0x08015bff
 8015bf0:	08015bf9 	.word	0x08015bf9
 8015bf4:	08015c11 	.word	0x08015c11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8015bfc:	e030      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d025      	beq.n	8015c56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8015c0e:	e022      	b.n	8015c56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8015c18:	d11f      	bne.n	8015c5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8015c1e:	e01c      	b.n	8015c5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	2b02      	cmp	r3, #2
 8015c24:	d903      	bls.n	8015c2e <DMA_CheckFifoParam+0xb6>
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	2b03      	cmp	r3, #3
 8015c2a:	d003      	beq.n	8015c34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8015c2c:	e018      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8015c2e:	2301      	movs	r3, #1
 8015c30:	73fb      	strb	r3, [r7, #15]
      break;
 8015c32:	e015      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d00e      	beq.n	8015c5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8015c40:	2301      	movs	r3, #1
 8015c42:	73fb      	strb	r3, [r7, #15]
      break;
 8015c44:	e00b      	b.n	8015c5e <DMA_CheckFifoParam+0xe6>
      break;
 8015c46:	bf00      	nop
 8015c48:	e00a      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;
 8015c4a:	bf00      	nop
 8015c4c:	e008      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;
 8015c4e:	bf00      	nop
 8015c50:	e006      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;
 8015c52:	bf00      	nop
 8015c54:	e004      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;
 8015c56:	bf00      	nop
 8015c58:	e002      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;   
 8015c5a:	bf00      	nop
 8015c5c:	e000      	b.n	8015c60 <DMA_CheckFifoParam+0xe8>
      break;
 8015c5e:	bf00      	nop
    }
  } 
  
  return status; 
 8015c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3714      	adds	r7, #20
 8015c66:	46bd      	mov	sp, r7
 8015c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop

08015c70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b086      	sub	sp, #24
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015c82:	4b23      	ldr	r3, [pc, #140]	; (8015d10 <HAL_FLASH_Program+0xa0>)
 8015c84:	7e1b      	ldrb	r3, [r3, #24]
 8015c86:	2b01      	cmp	r3, #1
 8015c88:	d101      	bne.n	8015c8e <HAL_FLASH_Program+0x1e>
 8015c8a:	2302      	movs	r3, #2
 8015c8c:	e03b      	b.n	8015d06 <HAL_FLASH_Program+0x96>
 8015c8e:	4b20      	ldr	r3, [pc, #128]	; (8015d10 <HAL_FLASH_Program+0xa0>)
 8015c90:	2201      	movs	r2, #1
 8015c92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8015c98:	f000 f87c 	bl	8015d94 <FLASH_WaitForLastOperation>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8015ca0:	7dfb      	ldrb	r3, [r7, #23]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d12b      	bne.n	8015cfe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d105      	bne.n	8015cb8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8015cac:	783b      	ldrb	r3, [r7, #0]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	68b8      	ldr	r0, [r7, #8]
 8015cb2:	f000 f927 	bl	8015f04 <FLASH_Program_Byte>
 8015cb6:	e016      	b.n	8015ce6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d105      	bne.n	8015cca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8015cbe:	883b      	ldrh	r3, [r7, #0]
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	68b8      	ldr	r0, [r7, #8]
 8015cc4:	f000 f8fa 	bl	8015ebc <FLASH_Program_HalfWord>
 8015cc8:	e00d      	b.n	8015ce6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	2b02      	cmp	r3, #2
 8015cce:	d105      	bne.n	8015cdc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	68b8      	ldr	r0, [r7, #8]
 8015cd6:	f000 f8cf 	bl	8015e78 <FLASH_Program_Word>
 8015cda:	e004      	b.n	8015ce6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8015cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015ce0:	68b8      	ldr	r0, [r7, #8]
 8015ce2:	f000 f897 	bl	8015e14 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015ce6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8015cea:	f000 f853 	bl	8015d94 <FLASH_WaitForLastOperation>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8015cf2:	4b08      	ldr	r3, [pc, #32]	; (8015d14 <HAL_FLASH_Program+0xa4>)
 8015cf4:	691b      	ldr	r3, [r3, #16]
 8015cf6:	4a07      	ldr	r2, [pc, #28]	; (8015d14 <HAL_FLASH_Program+0xa4>)
 8015cf8:	f023 0301 	bic.w	r3, r3, #1
 8015cfc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015cfe:	4b04      	ldr	r3, [pc, #16]	; (8015d10 <HAL_FLASH_Program+0xa0>)
 8015d00:	2200      	movs	r2, #0
 8015d02:	761a      	strb	r2, [r3, #24]
  
  return status;
 8015d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3718      	adds	r7, #24
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	2000ac18 	.word	0x2000ac18
 8015d14:	40023c00 	.word	0x40023c00

08015d18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8015d18:	b480      	push	{r7}
 8015d1a:	b083      	sub	sp, #12
 8015d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8015d22:	4b0b      	ldr	r3, [pc, #44]	; (8015d50 <HAL_FLASH_Unlock+0x38>)
 8015d24:	691b      	ldr	r3, [r3, #16]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	da0b      	bge.n	8015d42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8015d2a:	4b09      	ldr	r3, [pc, #36]	; (8015d50 <HAL_FLASH_Unlock+0x38>)
 8015d2c:	4a09      	ldr	r2, [pc, #36]	; (8015d54 <HAL_FLASH_Unlock+0x3c>)
 8015d2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8015d30:	4b07      	ldr	r3, [pc, #28]	; (8015d50 <HAL_FLASH_Unlock+0x38>)
 8015d32:	4a09      	ldr	r2, [pc, #36]	; (8015d58 <HAL_FLASH_Unlock+0x40>)
 8015d34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8015d36:	4b06      	ldr	r3, [pc, #24]	; (8015d50 <HAL_FLASH_Unlock+0x38>)
 8015d38:	691b      	ldr	r3, [r3, #16]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	da01      	bge.n	8015d42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8015d42:	79fb      	ldrb	r3, [r7, #7]
}
 8015d44:	4618      	mov	r0, r3
 8015d46:	370c      	adds	r7, #12
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4e:	4770      	bx	lr
 8015d50:	40023c00 	.word	0x40023c00
 8015d54:	45670123 	.word	0x45670123
 8015d58:	cdef89ab 	.word	0xcdef89ab

08015d5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8015d5c:	b480      	push	{r7}
 8015d5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8015d60:	4b05      	ldr	r3, [pc, #20]	; (8015d78 <HAL_FLASH_Lock+0x1c>)
 8015d62:	691b      	ldr	r3, [r3, #16]
 8015d64:	4a04      	ldr	r2, [pc, #16]	; (8015d78 <HAL_FLASH_Lock+0x1c>)
 8015d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015d6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8015d6c:	2300      	movs	r3, #0
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr
 8015d78:	40023c00 	.word	0x40023c00

08015d7c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8015d7c:	b480      	push	{r7}
 8015d7e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8015d80:	4b03      	ldr	r3, [pc, #12]	; (8015d90 <HAL_FLASH_GetError+0x14>)
 8015d82:	69db      	ldr	r3, [r3, #28]
}  
 8015d84:	4618      	mov	r0, r3
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	2000ac18 	.word	0x2000ac18

08015d94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015da0:	4b1a      	ldr	r3, [pc, #104]	; (8015e0c <FLASH_WaitForLastOperation+0x78>)
 8015da2:	2200      	movs	r2, #0
 8015da4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8015da6:	f7fd ff67 	bl	8013c78 <HAL_GetTick>
 8015daa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8015dac:	e010      	b.n	8015dd0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015db4:	d00c      	beq.n	8015dd0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d007      	beq.n	8015dcc <FLASH_WaitForLastOperation+0x38>
 8015dbc:	f7fd ff5c 	bl	8013c78 <HAL_GetTick>
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	1ad3      	subs	r3, r2, r3
 8015dc6:	687a      	ldr	r2, [r7, #4]
 8015dc8:	429a      	cmp	r2, r3
 8015dca:	d201      	bcs.n	8015dd0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8015dcc:	2303      	movs	r3, #3
 8015dce:	e019      	b.n	8015e04 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8015dd0:	4b0f      	ldr	r3, [pc, #60]	; (8015e10 <FLASH_WaitForLastOperation+0x7c>)
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d1e8      	bne.n	8015dae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8015ddc:	4b0c      	ldr	r3, [pc, #48]	; (8015e10 <FLASH_WaitForLastOperation+0x7c>)
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	f003 0301 	and.w	r3, r3, #1
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d002      	beq.n	8015dee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8015de8:	4b09      	ldr	r3, [pc, #36]	; (8015e10 <FLASH_WaitForLastOperation+0x7c>)
 8015dea:	2201      	movs	r2, #1
 8015dec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8015dee:	4b08      	ldr	r3, [pc, #32]	; (8015e10 <FLASH_WaitForLastOperation+0x7c>)
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d003      	beq.n	8015e02 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8015dfa:	f000 f8a5 	bl	8015f48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015dfe:	2301      	movs	r3, #1
 8015e00:	e000      	b.n	8015e04 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8015e02:	2300      	movs	r3, #0
  
}  
 8015e04:	4618      	mov	r0, r3
 8015e06:	3710      	adds	r7, #16
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	2000ac18 	.word	0x2000ac18
 8015e10:	40023c00 	.word	0x40023c00

08015e14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8015e14:	b480      	push	{r7}
 8015e16:	b085      	sub	sp, #20
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	60f8      	str	r0, [r7, #12]
 8015e1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8015e20:	4b14      	ldr	r3, [pc, #80]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e22:	691b      	ldr	r3, [r3, #16]
 8015e24:	4a13      	ldr	r2, [pc, #76]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8015e2c:	4b11      	ldr	r3, [pc, #68]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e2e:	691b      	ldr	r3, [r3, #16]
 8015e30:	4a10      	ldr	r2, [pc, #64]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e32:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8015e36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8015e38:	4b0e      	ldr	r3, [pc, #56]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e3a:	691b      	ldr	r3, [r3, #16]
 8015e3c:	4a0d      	ldr	r2, [pc, #52]	; (8015e74 <FLASH_Program_DoubleWord+0x60>)
 8015e3e:	f043 0301 	orr.w	r3, r3, #1
 8015e42:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	683a      	ldr	r2, [r7, #0]
 8015e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8015e4a:	f3bf 8f6f 	isb	sy
}
 8015e4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8015e50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015e54:	f04f 0200 	mov.w	r2, #0
 8015e58:	f04f 0300 	mov.w	r3, #0
 8015e5c:	000a      	movs	r2, r1
 8015e5e:	2300      	movs	r3, #0
 8015e60:	68f9      	ldr	r1, [r7, #12]
 8015e62:	3104      	adds	r1, #4
 8015e64:	4613      	mov	r3, r2
 8015e66:	600b      	str	r3, [r1, #0]
}
 8015e68:	bf00      	nop
 8015e6a:	3714      	adds	r7, #20
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr
 8015e74:	40023c00 	.word	0x40023c00

08015e78 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b083      	sub	sp, #12
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8015e82:	4b0d      	ldr	r3, [pc, #52]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015e84:	691b      	ldr	r3, [r3, #16]
 8015e86:	4a0c      	ldr	r2, [pc, #48]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015e8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8015e8e:	4b0a      	ldr	r3, [pc, #40]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015e90:	691b      	ldr	r3, [r3, #16]
 8015e92:	4a09      	ldr	r2, [pc, #36]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015e98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8015e9a:	4b07      	ldr	r3, [pc, #28]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015e9c:	691b      	ldr	r3, [r3, #16]
 8015e9e:	4a06      	ldr	r2, [pc, #24]	; (8015eb8 <FLASH_Program_Word+0x40>)
 8015ea0:	f043 0301 	orr.w	r3, r3, #1
 8015ea4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	683a      	ldr	r2, [r7, #0]
 8015eaa:	601a      	str	r2, [r3, #0]
}
 8015eac:	bf00      	nop
 8015eae:	370c      	adds	r7, #12
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb6:	4770      	bx	lr
 8015eb8:	40023c00 	.word	0x40023c00

08015ebc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8015ebc:	b480      	push	{r7}
 8015ebe:	b083      	sub	sp, #12
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8015ec8:	4b0d      	ldr	r3, [pc, #52]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015eca:	691b      	ldr	r3, [r3, #16]
 8015ecc:	4a0c      	ldr	r2, [pc, #48]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015ed2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8015ed4:	4b0a      	ldr	r3, [pc, #40]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015ed6:	691b      	ldr	r3, [r3, #16]
 8015ed8:	4a09      	ldr	r2, [pc, #36]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8015ee0:	4b07      	ldr	r3, [pc, #28]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015ee2:	691b      	ldr	r3, [r3, #16]
 8015ee4:	4a06      	ldr	r2, [pc, #24]	; (8015f00 <FLASH_Program_HalfWord+0x44>)
 8015ee6:	f043 0301 	orr.w	r3, r3, #1
 8015eea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	887a      	ldrh	r2, [r7, #2]
 8015ef0:	801a      	strh	r2, [r3, #0]
}
 8015ef2:	bf00      	nop
 8015ef4:	370c      	adds	r7, #12
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efc:	4770      	bx	lr
 8015efe:	bf00      	nop
 8015f00:	40023c00 	.word	0x40023c00

08015f04 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8015f04:	b480      	push	{r7}
 8015f06:	b083      	sub	sp, #12
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	460b      	mov	r3, r1
 8015f0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8015f10:	4b0c      	ldr	r3, [pc, #48]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f12:	691b      	ldr	r3, [r3, #16]
 8015f14:	4a0b      	ldr	r2, [pc, #44]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015f1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8015f1c:	4b09      	ldr	r3, [pc, #36]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f1e:	4a09      	ldr	r2, [pc, #36]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f20:	691b      	ldr	r3, [r3, #16]
 8015f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8015f24:	4b07      	ldr	r3, [pc, #28]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f26:	691b      	ldr	r3, [r3, #16]
 8015f28:	4a06      	ldr	r2, [pc, #24]	; (8015f44 <FLASH_Program_Byte+0x40>)
 8015f2a:	f043 0301 	orr.w	r3, r3, #1
 8015f2e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	78fa      	ldrb	r2, [r7, #3]
 8015f34:	701a      	strb	r2, [r3, #0]
}
 8015f36:	bf00      	nop
 8015f38:	370c      	adds	r7, #12
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr
 8015f42:	bf00      	nop
 8015f44:	40023c00 	.word	0x40023c00

08015f48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8015f48:	b480      	push	{r7}
 8015f4a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8015f4c:	4b27      	ldr	r3, [pc, #156]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	f003 0310 	and.w	r3, r3, #16
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d008      	beq.n	8015f6a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015f58:	4b25      	ldr	r3, [pc, #148]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f5a:	69db      	ldr	r3, [r3, #28]
 8015f5c:	f043 0310 	orr.w	r3, r3, #16
 8015f60:	4a23      	ldr	r2, [pc, #140]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f62:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8015f64:	4b21      	ldr	r3, [pc, #132]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015f66:	2210      	movs	r2, #16
 8015f68:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8015f6a:	4b20      	ldr	r3, [pc, #128]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015f6c:	68db      	ldr	r3, [r3, #12]
 8015f6e:	f003 0320 	and.w	r3, r3, #32
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d008      	beq.n	8015f88 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8015f76:	4b1e      	ldr	r3, [pc, #120]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f78:	69db      	ldr	r3, [r3, #28]
 8015f7a:	f043 0308 	orr.w	r3, r3, #8
 8015f7e:	4a1c      	ldr	r2, [pc, #112]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f80:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8015f82:	4b1a      	ldr	r3, [pc, #104]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015f84:	2220      	movs	r2, #32
 8015f86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8015f88:	4b18      	ldr	r3, [pc, #96]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d008      	beq.n	8015fa6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8015f94:	4b16      	ldr	r3, [pc, #88]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f96:	69db      	ldr	r3, [r3, #28]
 8015f98:	f043 0304 	orr.w	r3, r3, #4
 8015f9c:	4a14      	ldr	r2, [pc, #80]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015f9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8015fa0:	4b12      	ldr	r3, [pc, #72]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015fa2:	2240      	movs	r2, #64	; 0x40
 8015fa4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8015fa6:	4b11      	ldr	r3, [pc, #68]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d008      	beq.n	8015fc4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8015fb2:	4b0f      	ldr	r3, [pc, #60]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015fb4:	69db      	ldr	r3, [r3, #28]
 8015fb6:	f043 0302 	orr.w	r3, r3, #2
 8015fba:	4a0d      	ldr	r2, [pc, #52]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015fbc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8015fbe:	4b0b      	ldr	r3, [pc, #44]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015fc0:	2280      	movs	r2, #128	; 0x80
 8015fc2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8015fc4:	4b09      	ldr	r3, [pc, #36]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015fc6:	68db      	ldr	r3, [r3, #12]
 8015fc8:	f003 0302 	and.w	r3, r3, #2
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d008      	beq.n	8015fe2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8015fd0:	4b07      	ldr	r3, [pc, #28]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015fd2:	69db      	ldr	r3, [r3, #28]
 8015fd4:	f043 0320 	orr.w	r3, r3, #32
 8015fd8:	4a05      	ldr	r2, [pc, #20]	; (8015ff0 <FLASH_SetErrorCode+0xa8>)
 8015fda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8015fdc:	4b03      	ldr	r3, [pc, #12]	; (8015fec <FLASH_SetErrorCode+0xa4>)
 8015fde:	2202      	movs	r2, #2
 8015fe0:	60da      	str	r2, [r3, #12]
  }
}
 8015fe2:	bf00      	nop
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fea:	4770      	bx	lr
 8015fec:	40023c00 	.word	0x40023c00
 8015ff0:	2000ac18 	.word	0x2000ac18

08015ff4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015ffe:	2301      	movs	r3, #1
 8016000:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8016002:	2300      	movs	r3, #0
 8016004:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8016006:	4b31      	ldr	r3, [pc, #196]	; (80160cc <HAL_FLASHEx_Erase+0xd8>)
 8016008:	7e1b      	ldrb	r3, [r3, #24]
 801600a:	2b01      	cmp	r3, #1
 801600c:	d101      	bne.n	8016012 <HAL_FLASHEx_Erase+0x1e>
 801600e:	2302      	movs	r3, #2
 8016010:	e058      	b.n	80160c4 <HAL_FLASHEx_Erase+0xd0>
 8016012:	4b2e      	ldr	r3, [pc, #184]	; (80160cc <HAL_FLASHEx_Erase+0xd8>)
 8016014:	2201      	movs	r2, #1
 8016016:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8016018:	f24c 3050 	movw	r0, #50000	; 0xc350
 801601c:	f7ff feba 	bl	8015d94 <FLASH_WaitForLastOperation>
 8016020:	4603      	mov	r3, r0
 8016022:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8016024:	7bfb      	ldrb	r3, [r7, #15]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d148      	bne.n	80160bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016030:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	2b01      	cmp	r3, #1
 8016038:	d115      	bne.n	8016066 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	691b      	ldr	r3, [r3, #16]
 801603e:	b2da      	uxtb	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	4619      	mov	r1, r3
 8016046:	4610      	mov	r0, r2
 8016048:	f000 f844 	bl	80160d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801604c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8016050:	f7ff fea0 	bl	8015d94 <FLASH_WaitForLastOperation>
 8016054:	4603      	mov	r3, r0
 8016056:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8016058:	4b1d      	ldr	r3, [pc, #116]	; (80160d0 <HAL_FLASHEx_Erase+0xdc>)
 801605a:	691b      	ldr	r3, [r3, #16]
 801605c:	4a1c      	ldr	r2, [pc, #112]	; (80160d0 <HAL_FLASHEx_Erase+0xdc>)
 801605e:	f023 0304 	bic.w	r3, r3, #4
 8016062:	6113      	str	r3, [r2, #16]
 8016064:	e028      	b.n	80160b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	689b      	ldr	r3, [r3, #8]
 801606a:	60bb      	str	r3, [r7, #8]
 801606c:	e01c      	b.n	80160a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	691b      	ldr	r3, [r3, #16]
 8016072:	b2db      	uxtb	r3, r3
 8016074:	4619      	mov	r1, r3
 8016076:	68b8      	ldr	r0, [r7, #8]
 8016078:	f000 f850 	bl	801611c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801607c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8016080:	f7ff fe88 	bl	8015d94 <FLASH_WaitForLastOperation>
 8016084:	4603      	mov	r3, r0
 8016086:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8016088:	4b11      	ldr	r3, [pc, #68]	; (80160d0 <HAL_FLASHEx_Erase+0xdc>)
 801608a:	691b      	ldr	r3, [r3, #16]
 801608c:	4a10      	ldr	r2, [pc, #64]	; (80160d0 <HAL_FLASHEx_Erase+0xdc>)
 801608e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8016092:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8016094:	7bfb      	ldrb	r3, [r7, #15]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d003      	beq.n	80160a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	601a      	str	r2, [r3, #0]
          break;
 80160a0:	e00a      	b.n	80160b8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	3301      	adds	r3, #1
 80160a6:	60bb      	str	r3, [r7, #8]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	68da      	ldr	r2, [r3, #12]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	689b      	ldr	r3, [r3, #8]
 80160b0:	4413      	add	r3, r2
 80160b2:	68ba      	ldr	r2, [r7, #8]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d3da      	bcc.n	801606e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80160b8:	f000 f878 	bl	80161ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80160bc:	4b03      	ldr	r3, [pc, #12]	; (80160cc <HAL_FLASHEx_Erase+0xd8>)
 80160be:	2200      	movs	r2, #0
 80160c0:	761a      	strb	r2, [r3, #24]

  return status;
 80160c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3710      	adds	r7, #16
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	2000ac18 	.word	0x2000ac18
 80160d0:	40023c00 	.word	0x40023c00

080160d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	4603      	mov	r3, r0
 80160dc:	6039      	str	r1, [r7, #0]
 80160de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80160e0:	4b0d      	ldr	r3, [pc, #52]	; (8016118 <FLASH_MassErase+0x44>)
 80160e2:	691b      	ldr	r3, [r3, #16]
 80160e4:	4a0c      	ldr	r2, [pc, #48]	; (8016118 <FLASH_MassErase+0x44>)
 80160e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80160ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80160ec:	4b0a      	ldr	r3, [pc, #40]	; (8016118 <FLASH_MassErase+0x44>)
 80160ee:	691b      	ldr	r3, [r3, #16]
 80160f0:	4a09      	ldr	r2, [pc, #36]	; (8016118 <FLASH_MassErase+0x44>)
 80160f2:	f043 0304 	orr.w	r3, r3, #4
 80160f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80160f8:	4b07      	ldr	r3, [pc, #28]	; (8016118 <FLASH_MassErase+0x44>)
 80160fa:	691a      	ldr	r2, [r3, #16]
 80160fc:	79fb      	ldrb	r3, [r7, #7]
 80160fe:	021b      	lsls	r3, r3, #8
 8016100:	4313      	orrs	r3, r2
 8016102:	4a05      	ldr	r2, [pc, #20]	; (8016118 <FLASH_MassErase+0x44>)
 8016104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016108:	6113      	str	r3, [r2, #16]
}
 801610a:	bf00      	nop
 801610c:	370c      	adds	r7, #12
 801610e:	46bd      	mov	sp, r7
 8016110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016114:	4770      	bx	lr
 8016116:	bf00      	nop
 8016118:	40023c00 	.word	0x40023c00

0801611c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801611c:	b480      	push	{r7}
 801611e:	b085      	sub	sp, #20
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	460b      	mov	r3, r1
 8016126:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8016128:	2300      	movs	r3, #0
 801612a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801612c:	78fb      	ldrb	r3, [r7, #3]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d102      	bne.n	8016138 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8016132:	2300      	movs	r3, #0
 8016134:	60fb      	str	r3, [r7, #12]
 8016136:	e010      	b.n	801615a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8016138:	78fb      	ldrb	r3, [r7, #3]
 801613a:	2b01      	cmp	r3, #1
 801613c:	d103      	bne.n	8016146 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801613e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016142:	60fb      	str	r3, [r7, #12]
 8016144:	e009      	b.n	801615a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8016146:	78fb      	ldrb	r3, [r7, #3]
 8016148:	2b02      	cmp	r3, #2
 801614a:	d103      	bne.n	8016154 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016150:	60fb      	str	r3, [r7, #12]
 8016152:	e002      	b.n	801615a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8016154:	f44f 7340 	mov.w	r3, #768	; 0x300
 8016158:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801615a:	4b13      	ldr	r3, [pc, #76]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	4a12      	ldr	r2, [pc, #72]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016164:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8016166:	4b10      	ldr	r3, [pc, #64]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016168:	691a      	ldr	r2, [r3, #16]
 801616a:	490f      	ldr	r1, [pc, #60]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	4313      	orrs	r3, r2
 8016170:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8016172:	4b0d      	ldr	r3, [pc, #52]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016174:	691b      	ldr	r3, [r3, #16]
 8016176:	4a0c      	ldr	r2, [pc, #48]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016178:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801617c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801617e:	4b0a      	ldr	r3, [pc, #40]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016180:	691a      	ldr	r2, [r3, #16]
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	00db      	lsls	r3, r3, #3
 8016186:	4313      	orrs	r3, r2
 8016188:	4a07      	ldr	r2, [pc, #28]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 801618a:	f043 0302 	orr.w	r3, r3, #2
 801618e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8016190:	4b05      	ldr	r3, [pc, #20]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016192:	691b      	ldr	r3, [r3, #16]
 8016194:	4a04      	ldr	r2, [pc, #16]	; (80161a8 <FLASH_Erase_Sector+0x8c>)
 8016196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801619a:	6113      	str	r3, [r2, #16]
}
 801619c:	bf00      	nop
 801619e:	3714      	adds	r7, #20
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr
 80161a8:	40023c00 	.word	0x40023c00

080161ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80161ac:	b480      	push	{r7}
 80161ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80161b0:	4b20      	ldr	r3, [pc, #128]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d017      	beq.n	80161ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80161bc:	4b1d      	ldr	r3, [pc, #116]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4a1c      	ldr	r2, [pc, #112]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80161c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80161c8:	4b1a      	ldr	r3, [pc, #104]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	4a19      	ldr	r2, [pc, #100]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80161d2:	6013      	str	r3, [r2, #0]
 80161d4:	4b17      	ldr	r3, [pc, #92]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	4a16      	ldr	r2, [pc, #88]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80161de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80161e0:	4b14      	ldr	r3, [pc, #80]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	4a13      	ldr	r2, [pc, #76]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80161ea:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80161ec:	4b11      	ldr	r3, [pc, #68]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d017      	beq.n	8016228 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80161f8:	4b0e      	ldr	r3, [pc, #56]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	4a0d      	ldr	r2, [pc, #52]	; (8016234 <FLASH_FlushCaches+0x88>)
 80161fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8016202:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8016204:	4b0b      	ldr	r3, [pc, #44]	; (8016234 <FLASH_FlushCaches+0x88>)
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	4a0a      	ldr	r2, [pc, #40]	; (8016234 <FLASH_FlushCaches+0x88>)
 801620a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801620e:	6013      	str	r3, [r2, #0]
 8016210:	4b08      	ldr	r3, [pc, #32]	; (8016234 <FLASH_FlushCaches+0x88>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	4a07      	ldr	r2, [pc, #28]	; (8016234 <FLASH_FlushCaches+0x88>)
 8016216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801621a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801621c:	4b05      	ldr	r3, [pc, #20]	; (8016234 <FLASH_FlushCaches+0x88>)
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	4a04      	ldr	r2, [pc, #16]	; (8016234 <FLASH_FlushCaches+0x88>)
 8016222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016226:	6013      	str	r3, [r2, #0]
  }
}
 8016228:	bf00      	nop
 801622a:	46bd      	mov	sp, r7
 801622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016230:	4770      	bx	lr
 8016232:	bf00      	nop
 8016234:	40023c00 	.word	0x40023c00

08016238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8016238:	b480      	push	{r7}
 801623a:	b089      	sub	sp, #36	; 0x24
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
 8016240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8016242:	2300      	movs	r3, #0
 8016244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8016246:	2300      	movs	r3, #0
 8016248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801624a:	2300      	movs	r3, #0
 801624c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801624e:	2300      	movs	r3, #0
 8016250:	61fb      	str	r3, [r7, #28]
 8016252:	e16b      	b.n	801652c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8016254:	2201      	movs	r2, #1
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	fa02 f303 	lsl.w	r3, r2, r3
 801625c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	697a      	ldr	r2, [r7, #20]
 8016264:	4013      	ands	r3, r2
 8016266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8016268:	693a      	ldr	r2, [r7, #16]
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	429a      	cmp	r2, r3
 801626e:	f040 815a 	bne.w	8016526 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	2b01      	cmp	r3, #1
 8016278:	d00b      	beq.n	8016292 <HAL_GPIO_Init+0x5a>
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	685b      	ldr	r3, [r3, #4]
 801627e:	2b02      	cmp	r3, #2
 8016280:	d007      	beq.n	8016292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8016286:	2b11      	cmp	r3, #17
 8016288:	d003      	beq.n	8016292 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	685b      	ldr	r3, [r3, #4]
 801628e:	2b12      	cmp	r3, #18
 8016290:	d130      	bne.n	80162f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	689b      	ldr	r3, [r3, #8]
 8016296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8016298:	69fb      	ldr	r3, [r7, #28]
 801629a:	005b      	lsls	r3, r3, #1
 801629c:	2203      	movs	r2, #3
 801629e:	fa02 f303 	lsl.w	r3, r2, r3
 80162a2:	43db      	mvns	r3, r3
 80162a4:	69ba      	ldr	r2, [r7, #24]
 80162a6:	4013      	ands	r3, r2
 80162a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	68da      	ldr	r2, [r3, #12]
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	fa02 f303 	lsl.w	r3, r2, r3
 80162b6:	69ba      	ldr	r2, [r7, #24]
 80162b8:	4313      	orrs	r3, r2
 80162ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	69ba      	ldr	r2, [r7, #24]
 80162c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	685b      	ldr	r3, [r3, #4]
 80162c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80162c8:	2201      	movs	r2, #1
 80162ca:	69fb      	ldr	r3, [r7, #28]
 80162cc:	fa02 f303 	lsl.w	r3, r2, r3
 80162d0:	43db      	mvns	r3, r3
 80162d2:	69ba      	ldr	r2, [r7, #24]
 80162d4:	4013      	ands	r3, r2
 80162d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	685b      	ldr	r3, [r3, #4]
 80162dc:	091b      	lsrs	r3, r3, #4
 80162de:	f003 0201 	and.w	r2, r3, #1
 80162e2:	69fb      	ldr	r3, [r7, #28]
 80162e4:	fa02 f303 	lsl.w	r3, r2, r3
 80162e8:	69ba      	ldr	r2, [r7, #24]
 80162ea:	4313      	orrs	r3, r2
 80162ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	69ba      	ldr	r2, [r7, #24]
 80162f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	68db      	ldr	r3, [r3, #12]
 80162f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	005b      	lsls	r3, r3, #1
 80162fe:	2203      	movs	r2, #3
 8016300:	fa02 f303 	lsl.w	r3, r2, r3
 8016304:	43db      	mvns	r3, r3
 8016306:	69ba      	ldr	r2, [r7, #24]
 8016308:	4013      	ands	r3, r2
 801630a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801630c:	683b      	ldr	r3, [r7, #0]
 801630e:	689a      	ldr	r2, [r3, #8]
 8016310:	69fb      	ldr	r3, [r7, #28]
 8016312:	005b      	lsls	r3, r3, #1
 8016314:	fa02 f303 	lsl.w	r3, r2, r3
 8016318:	69ba      	ldr	r2, [r7, #24]
 801631a:	4313      	orrs	r3, r2
 801631c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	69ba      	ldr	r2, [r7, #24]
 8016322:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	685b      	ldr	r3, [r3, #4]
 8016328:	2b02      	cmp	r3, #2
 801632a:	d003      	beq.n	8016334 <HAL_GPIO_Init+0xfc>
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	685b      	ldr	r3, [r3, #4]
 8016330:	2b12      	cmp	r3, #18
 8016332:	d123      	bne.n	801637c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016334:	69fb      	ldr	r3, [r7, #28]
 8016336:	08da      	lsrs	r2, r3, #3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	3208      	adds	r2, #8
 801633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	f003 0307 	and.w	r3, r3, #7
 8016348:	009b      	lsls	r3, r3, #2
 801634a:	220f      	movs	r2, #15
 801634c:	fa02 f303 	lsl.w	r3, r2, r3
 8016350:	43db      	mvns	r3, r3
 8016352:	69ba      	ldr	r2, [r7, #24]
 8016354:	4013      	ands	r3, r2
 8016356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	691a      	ldr	r2, [r3, #16]
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	f003 0307 	and.w	r3, r3, #7
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	fa02 f303 	lsl.w	r3, r2, r3
 8016368:	69ba      	ldr	r2, [r7, #24]
 801636a:	4313      	orrs	r3, r2
 801636c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	08da      	lsrs	r2, r3, #3
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	3208      	adds	r2, #8
 8016376:	69b9      	ldr	r1, [r7, #24]
 8016378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8016382:	69fb      	ldr	r3, [r7, #28]
 8016384:	005b      	lsls	r3, r3, #1
 8016386:	2203      	movs	r2, #3
 8016388:	fa02 f303 	lsl.w	r3, r2, r3
 801638c:	43db      	mvns	r3, r3
 801638e:	69ba      	ldr	r2, [r7, #24]
 8016390:	4013      	ands	r3, r2
 8016392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8016394:	683b      	ldr	r3, [r7, #0]
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	f003 0203 	and.w	r2, r3, #3
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	fa02 f303 	lsl.w	r3, r2, r3
 80163a4:	69ba      	ldr	r2, [r7, #24]
 80163a6:	4313      	orrs	r3, r2
 80163a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	69ba      	ldr	r2, [r7, #24]
 80163ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	685b      	ldr	r3, [r3, #4]
 80163b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	f000 80b4 	beq.w	8016526 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80163be:	2300      	movs	r3, #0
 80163c0:	60fb      	str	r3, [r7, #12]
 80163c2:	4b60      	ldr	r3, [pc, #384]	; (8016544 <HAL_GPIO_Init+0x30c>)
 80163c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163c6:	4a5f      	ldr	r2, [pc, #380]	; (8016544 <HAL_GPIO_Init+0x30c>)
 80163c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80163cc:	6453      	str	r3, [r2, #68]	; 0x44
 80163ce:	4b5d      	ldr	r3, [pc, #372]	; (8016544 <HAL_GPIO_Init+0x30c>)
 80163d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80163d6:	60fb      	str	r3, [r7, #12]
 80163d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80163da:	4a5b      	ldr	r2, [pc, #364]	; (8016548 <HAL_GPIO_Init+0x310>)
 80163dc:	69fb      	ldr	r3, [r7, #28]
 80163de:	089b      	lsrs	r3, r3, #2
 80163e0:	3302      	adds	r3, #2
 80163e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	f003 0303 	and.w	r3, r3, #3
 80163ee:	009b      	lsls	r3, r3, #2
 80163f0:	220f      	movs	r2, #15
 80163f2:	fa02 f303 	lsl.w	r3, r2, r3
 80163f6:	43db      	mvns	r3, r3
 80163f8:	69ba      	ldr	r2, [r7, #24]
 80163fa:	4013      	ands	r3, r2
 80163fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	4a52      	ldr	r2, [pc, #328]	; (801654c <HAL_GPIO_Init+0x314>)
 8016402:	4293      	cmp	r3, r2
 8016404:	d02b      	beq.n	801645e <HAL_GPIO_Init+0x226>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	4a51      	ldr	r2, [pc, #324]	; (8016550 <HAL_GPIO_Init+0x318>)
 801640a:	4293      	cmp	r3, r2
 801640c:	d025      	beq.n	801645a <HAL_GPIO_Init+0x222>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	4a50      	ldr	r2, [pc, #320]	; (8016554 <HAL_GPIO_Init+0x31c>)
 8016412:	4293      	cmp	r3, r2
 8016414:	d01f      	beq.n	8016456 <HAL_GPIO_Init+0x21e>
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	4a4f      	ldr	r2, [pc, #316]	; (8016558 <HAL_GPIO_Init+0x320>)
 801641a:	4293      	cmp	r3, r2
 801641c:	d019      	beq.n	8016452 <HAL_GPIO_Init+0x21a>
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	4a4e      	ldr	r2, [pc, #312]	; (801655c <HAL_GPIO_Init+0x324>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d013      	beq.n	801644e <HAL_GPIO_Init+0x216>
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	4a4d      	ldr	r2, [pc, #308]	; (8016560 <HAL_GPIO_Init+0x328>)
 801642a:	4293      	cmp	r3, r2
 801642c:	d00d      	beq.n	801644a <HAL_GPIO_Init+0x212>
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	4a4c      	ldr	r2, [pc, #304]	; (8016564 <HAL_GPIO_Init+0x32c>)
 8016432:	4293      	cmp	r3, r2
 8016434:	d007      	beq.n	8016446 <HAL_GPIO_Init+0x20e>
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	4a4b      	ldr	r2, [pc, #300]	; (8016568 <HAL_GPIO_Init+0x330>)
 801643a:	4293      	cmp	r3, r2
 801643c:	d101      	bne.n	8016442 <HAL_GPIO_Init+0x20a>
 801643e:	2307      	movs	r3, #7
 8016440:	e00e      	b.n	8016460 <HAL_GPIO_Init+0x228>
 8016442:	2308      	movs	r3, #8
 8016444:	e00c      	b.n	8016460 <HAL_GPIO_Init+0x228>
 8016446:	2306      	movs	r3, #6
 8016448:	e00a      	b.n	8016460 <HAL_GPIO_Init+0x228>
 801644a:	2305      	movs	r3, #5
 801644c:	e008      	b.n	8016460 <HAL_GPIO_Init+0x228>
 801644e:	2304      	movs	r3, #4
 8016450:	e006      	b.n	8016460 <HAL_GPIO_Init+0x228>
 8016452:	2303      	movs	r3, #3
 8016454:	e004      	b.n	8016460 <HAL_GPIO_Init+0x228>
 8016456:	2302      	movs	r3, #2
 8016458:	e002      	b.n	8016460 <HAL_GPIO_Init+0x228>
 801645a:	2301      	movs	r3, #1
 801645c:	e000      	b.n	8016460 <HAL_GPIO_Init+0x228>
 801645e:	2300      	movs	r3, #0
 8016460:	69fa      	ldr	r2, [r7, #28]
 8016462:	f002 0203 	and.w	r2, r2, #3
 8016466:	0092      	lsls	r2, r2, #2
 8016468:	4093      	lsls	r3, r2
 801646a:	69ba      	ldr	r2, [r7, #24]
 801646c:	4313      	orrs	r3, r2
 801646e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016470:	4935      	ldr	r1, [pc, #212]	; (8016548 <HAL_GPIO_Init+0x310>)
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	089b      	lsrs	r3, r3, #2
 8016476:	3302      	adds	r3, #2
 8016478:	69ba      	ldr	r2, [r7, #24]
 801647a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801647e:	4b3b      	ldr	r3, [pc, #236]	; (801656c <HAL_GPIO_Init+0x334>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	43db      	mvns	r3, r3
 8016488:	69ba      	ldr	r2, [r7, #24]
 801648a:	4013      	ands	r3, r2
 801648c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016496:	2b00      	cmp	r3, #0
 8016498:	d003      	beq.n	80164a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801649a:	69ba      	ldr	r2, [r7, #24]
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	4313      	orrs	r3, r2
 80164a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80164a2:	4a32      	ldr	r2, [pc, #200]	; (801656c <HAL_GPIO_Init+0x334>)
 80164a4:	69bb      	ldr	r3, [r7, #24]
 80164a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80164a8:	4b30      	ldr	r3, [pc, #192]	; (801656c <HAL_GPIO_Init+0x334>)
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	43db      	mvns	r3, r3
 80164b2:	69ba      	ldr	r2, [r7, #24]
 80164b4:	4013      	ands	r3, r2
 80164b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	685b      	ldr	r3, [r3, #4]
 80164bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d003      	beq.n	80164cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80164c4:	69ba      	ldr	r2, [r7, #24]
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	4313      	orrs	r3, r2
 80164ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80164cc:	4a27      	ldr	r2, [pc, #156]	; (801656c <HAL_GPIO_Init+0x334>)
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80164d2:	4b26      	ldr	r3, [pc, #152]	; (801656c <HAL_GPIO_Init+0x334>)
 80164d4:	689b      	ldr	r3, [r3, #8]
 80164d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	43db      	mvns	r3, r3
 80164dc:	69ba      	ldr	r2, [r7, #24]
 80164de:	4013      	ands	r3, r2
 80164e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d003      	beq.n	80164f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80164ee:	69ba      	ldr	r2, [r7, #24]
 80164f0:	693b      	ldr	r3, [r7, #16]
 80164f2:	4313      	orrs	r3, r2
 80164f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80164f6:	4a1d      	ldr	r2, [pc, #116]	; (801656c <HAL_GPIO_Init+0x334>)
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80164fc:	4b1b      	ldr	r3, [pc, #108]	; (801656c <HAL_GPIO_Init+0x334>)
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8016502:	693b      	ldr	r3, [r7, #16]
 8016504:	43db      	mvns	r3, r3
 8016506:	69ba      	ldr	r2, [r7, #24]
 8016508:	4013      	ands	r3, r2
 801650a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016514:	2b00      	cmp	r3, #0
 8016516:	d003      	beq.n	8016520 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8016518:	69ba      	ldr	r2, [r7, #24]
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	4313      	orrs	r3, r2
 801651e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8016520:	4a12      	ldr	r2, [pc, #72]	; (801656c <HAL_GPIO_Init+0x334>)
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016526:	69fb      	ldr	r3, [r7, #28]
 8016528:	3301      	adds	r3, #1
 801652a:	61fb      	str	r3, [r7, #28]
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	2b0f      	cmp	r3, #15
 8016530:	f67f ae90 	bls.w	8016254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop
 8016538:	3724      	adds	r7, #36	; 0x24
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr
 8016542:	bf00      	nop
 8016544:	40023800 	.word	0x40023800
 8016548:	40013800 	.word	0x40013800
 801654c:	40020000 	.word	0x40020000
 8016550:	40020400 	.word	0x40020400
 8016554:	40020800 	.word	0x40020800
 8016558:	40020c00 	.word	0x40020c00
 801655c:	40021000 	.word	0x40021000
 8016560:	40021400 	.word	0x40021400
 8016564:	40021800 	.word	0x40021800
 8016568:	40021c00 	.word	0x40021c00
 801656c:	40013c00 	.word	0x40013c00

08016570 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8016570:	b480      	push	{r7}
 8016572:	b087      	sub	sp, #28
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801657a:	2300      	movs	r3, #0
 801657c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801657e:	2300      	movs	r3, #0
 8016580:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8016582:	2300      	movs	r3, #0
 8016584:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016586:	2300      	movs	r3, #0
 8016588:	617b      	str	r3, [r7, #20]
 801658a:	e0cd      	b.n	8016728 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801658c:	2201      	movs	r2, #1
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	fa02 f303 	lsl.w	r3, r2, r3
 8016594:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8016596:	683a      	ldr	r2, [r7, #0]
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	4013      	ands	r3, r2
 801659c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801659e:	68fa      	ldr	r2, [r7, #12]
 80165a0:	693b      	ldr	r3, [r7, #16]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	f040 80bd 	bne.w	8016722 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80165a8:	4a65      	ldr	r2, [pc, #404]	; (8016740 <HAL_GPIO_DeInit+0x1d0>)
 80165aa:	697b      	ldr	r3, [r7, #20]
 80165ac:	089b      	lsrs	r3, r3, #2
 80165ae:	3302      	adds	r3, #2
 80165b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80165b4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	f003 0303 	and.w	r3, r3, #3
 80165bc:	009b      	lsls	r3, r3, #2
 80165be:	220f      	movs	r2, #15
 80165c0:	fa02 f303 	lsl.w	r3, r2, r3
 80165c4:	68ba      	ldr	r2, [r7, #8]
 80165c6:	4013      	ands	r3, r2
 80165c8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	4a5d      	ldr	r2, [pc, #372]	; (8016744 <HAL_GPIO_DeInit+0x1d4>)
 80165ce:	4293      	cmp	r3, r2
 80165d0:	d02b      	beq.n	801662a <HAL_GPIO_DeInit+0xba>
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	4a5c      	ldr	r2, [pc, #368]	; (8016748 <HAL_GPIO_DeInit+0x1d8>)
 80165d6:	4293      	cmp	r3, r2
 80165d8:	d025      	beq.n	8016626 <HAL_GPIO_DeInit+0xb6>
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	4a5b      	ldr	r2, [pc, #364]	; (801674c <HAL_GPIO_DeInit+0x1dc>)
 80165de:	4293      	cmp	r3, r2
 80165e0:	d01f      	beq.n	8016622 <HAL_GPIO_DeInit+0xb2>
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	4a5a      	ldr	r2, [pc, #360]	; (8016750 <HAL_GPIO_DeInit+0x1e0>)
 80165e6:	4293      	cmp	r3, r2
 80165e8:	d019      	beq.n	801661e <HAL_GPIO_DeInit+0xae>
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	4a59      	ldr	r2, [pc, #356]	; (8016754 <HAL_GPIO_DeInit+0x1e4>)
 80165ee:	4293      	cmp	r3, r2
 80165f0:	d013      	beq.n	801661a <HAL_GPIO_DeInit+0xaa>
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	4a58      	ldr	r2, [pc, #352]	; (8016758 <HAL_GPIO_DeInit+0x1e8>)
 80165f6:	4293      	cmp	r3, r2
 80165f8:	d00d      	beq.n	8016616 <HAL_GPIO_DeInit+0xa6>
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	4a57      	ldr	r2, [pc, #348]	; (801675c <HAL_GPIO_DeInit+0x1ec>)
 80165fe:	4293      	cmp	r3, r2
 8016600:	d007      	beq.n	8016612 <HAL_GPIO_DeInit+0xa2>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	4a56      	ldr	r2, [pc, #344]	; (8016760 <HAL_GPIO_DeInit+0x1f0>)
 8016606:	4293      	cmp	r3, r2
 8016608:	d101      	bne.n	801660e <HAL_GPIO_DeInit+0x9e>
 801660a:	2307      	movs	r3, #7
 801660c:	e00e      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 801660e:	2308      	movs	r3, #8
 8016610:	e00c      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 8016612:	2306      	movs	r3, #6
 8016614:	e00a      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 8016616:	2305      	movs	r3, #5
 8016618:	e008      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 801661a:	2304      	movs	r3, #4
 801661c:	e006      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 801661e:	2303      	movs	r3, #3
 8016620:	e004      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 8016622:	2302      	movs	r3, #2
 8016624:	e002      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 8016626:	2301      	movs	r3, #1
 8016628:	e000      	b.n	801662c <HAL_GPIO_DeInit+0xbc>
 801662a:	2300      	movs	r3, #0
 801662c:	697a      	ldr	r2, [r7, #20]
 801662e:	f002 0203 	and.w	r2, r2, #3
 8016632:	0092      	lsls	r2, r2, #2
 8016634:	4093      	lsls	r3, r2
 8016636:	68ba      	ldr	r2, [r7, #8]
 8016638:	429a      	cmp	r2, r3
 801663a:	d132      	bne.n	80166a2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801663c:	4b49      	ldr	r3, [pc, #292]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 801663e:	681a      	ldr	r2, [r3, #0]
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	43db      	mvns	r3, r3
 8016644:	4947      	ldr	r1, [pc, #284]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 8016646:	4013      	ands	r3, r2
 8016648:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801664a:	4b46      	ldr	r3, [pc, #280]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 801664c:	685a      	ldr	r2, [r3, #4]
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	43db      	mvns	r3, r3
 8016652:	4944      	ldr	r1, [pc, #272]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 8016654:	4013      	ands	r3, r2
 8016656:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8016658:	4b42      	ldr	r3, [pc, #264]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 801665a:	689a      	ldr	r2, [r3, #8]
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	43db      	mvns	r3, r3
 8016660:	4940      	ldr	r1, [pc, #256]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 8016662:	4013      	ands	r3, r2
 8016664:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8016666:	4b3f      	ldr	r3, [pc, #252]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 8016668:	68da      	ldr	r2, [r3, #12]
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	43db      	mvns	r3, r3
 801666e:	493d      	ldr	r1, [pc, #244]	; (8016764 <HAL_GPIO_DeInit+0x1f4>)
 8016670:	4013      	ands	r3, r2
 8016672:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	f003 0303 	and.w	r3, r3, #3
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	220f      	movs	r2, #15
 801667e:	fa02 f303 	lsl.w	r3, r2, r3
 8016682:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8016684:	4a2e      	ldr	r2, [pc, #184]	; (8016740 <HAL_GPIO_DeInit+0x1d0>)
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	089b      	lsrs	r3, r3, #2
 801668a:	3302      	adds	r3, #2
 801668c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	43da      	mvns	r2, r3
 8016694:	482a      	ldr	r0, [pc, #168]	; (8016740 <HAL_GPIO_DeInit+0x1d0>)
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	089b      	lsrs	r3, r3, #2
 801669a:	400a      	ands	r2, r1
 801669c:	3302      	adds	r3, #2
 801669e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681a      	ldr	r2, [r3, #0]
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	005b      	lsls	r3, r3, #1
 80166aa:	2103      	movs	r1, #3
 80166ac:	fa01 f303 	lsl.w	r3, r1, r3
 80166b0:	43db      	mvns	r3, r3
 80166b2:	401a      	ands	r2, r3
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80166b8:	697b      	ldr	r3, [r7, #20]
 80166ba:	08da      	lsrs	r2, r3, #3
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	3208      	adds	r2, #8
 80166c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	f003 0307 	and.w	r3, r3, #7
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	220f      	movs	r2, #15
 80166ce:	fa02 f303 	lsl.w	r3, r2, r3
 80166d2:	43db      	mvns	r3, r3
 80166d4:	697a      	ldr	r2, [r7, #20]
 80166d6:	08d2      	lsrs	r2, r2, #3
 80166d8:	4019      	ands	r1, r3
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	3208      	adds	r2, #8
 80166de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	68da      	ldr	r2, [r3, #12]
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	005b      	lsls	r3, r3, #1
 80166ea:	2103      	movs	r1, #3
 80166ec:	fa01 f303 	lsl.w	r3, r1, r3
 80166f0:	43db      	mvns	r3, r3
 80166f2:	401a      	ands	r2, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	685a      	ldr	r2, [r3, #4]
 80166fc:	2101      	movs	r1, #1
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	fa01 f303 	lsl.w	r3, r1, r3
 8016704:	43db      	mvns	r3, r3
 8016706:	401a      	ands	r2, r3
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	689a      	ldr	r2, [r3, #8]
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	2103      	movs	r1, #3
 8016716:	fa01 f303 	lsl.w	r3, r1, r3
 801671a:	43db      	mvns	r3, r3
 801671c:	401a      	ands	r2, r3
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	3301      	adds	r3, #1
 8016726:	617b      	str	r3, [r7, #20]
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	2b0f      	cmp	r3, #15
 801672c:	f67f af2e 	bls.w	801658c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8016730:	bf00      	nop
 8016732:	bf00      	nop
 8016734:	371c      	adds	r7, #28
 8016736:	46bd      	mov	sp, r7
 8016738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673c:	4770      	bx	lr
 801673e:	bf00      	nop
 8016740:	40013800 	.word	0x40013800
 8016744:	40020000 	.word	0x40020000
 8016748:	40020400 	.word	0x40020400
 801674c:	40020800 	.word	0x40020800
 8016750:	40020c00 	.word	0x40020c00
 8016754:	40021000 	.word	0x40021000
 8016758:	40021400 	.word	0x40021400
 801675c:	40021800 	.word	0x40021800
 8016760:	40021c00 	.word	0x40021c00
 8016764:	40013c00 	.word	0x40013c00

08016768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8016768:	b480      	push	{r7}
 801676a:	b085      	sub	sp, #20
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
 8016770:	460b      	mov	r3, r1
 8016772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	691a      	ldr	r2, [r3, #16]
 8016778:	887b      	ldrh	r3, [r7, #2]
 801677a:	4013      	ands	r3, r2
 801677c:	2b00      	cmp	r3, #0
 801677e:	d002      	beq.n	8016786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8016780:	2301      	movs	r3, #1
 8016782:	73fb      	strb	r3, [r7, #15]
 8016784:	e001      	b.n	801678a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016786:	2300      	movs	r3, #0
 8016788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801678a:	7bfb      	ldrb	r3, [r7, #15]
}
 801678c:	4618      	mov	r0, r3
 801678e:	3714      	adds	r7, #20
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr

08016798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016798:	b480      	push	{r7}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	460b      	mov	r3, r1
 80167a2:	807b      	strh	r3, [r7, #2]
 80167a4:	4613      	mov	r3, r2
 80167a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80167a8:	787b      	ldrb	r3, [r7, #1]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d003      	beq.n	80167b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80167ae:	887a      	ldrh	r2, [r7, #2]
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80167b4:	e003      	b.n	80167be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80167b6:	887b      	ldrh	r3, [r7, #2]
 80167b8:	041a      	lsls	r2, r3, #16
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	619a      	str	r2, [r3, #24]
}
 80167be:	bf00      	nop
 80167c0:	370c      	adds	r7, #12
 80167c2:	46bd      	mov	sp, r7
 80167c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c8:	4770      	bx	lr
	...

080167cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d101      	bne.n	80167de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80167da:	2301      	movs	r3, #1
 80167dc:	e12b      	b.n	8016a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d106      	bne.n	80167f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2200      	movs	r2, #0
 80167ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f7eb feb6 	bl	8002564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2224      	movs	r2, #36	; 0x24
 80167fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	681a      	ldr	r2, [r3, #0]
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f022 0201 	bic.w	r2, r2, #1
 801680e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	681a      	ldr	r2, [r3, #0]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801681e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801682e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8016830:	f002 fc64 	bl	80190fc <HAL_RCC_GetPCLK1Freq>
 8016834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	4a81      	ldr	r2, [pc, #516]	; (8016a40 <HAL_I2C_Init+0x274>)
 801683c:	4293      	cmp	r3, r2
 801683e:	d807      	bhi.n	8016850 <HAL_I2C_Init+0x84>
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	4a80      	ldr	r2, [pc, #512]	; (8016a44 <HAL_I2C_Init+0x278>)
 8016844:	4293      	cmp	r3, r2
 8016846:	bf94      	ite	ls
 8016848:	2301      	movls	r3, #1
 801684a:	2300      	movhi	r3, #0
 801684c:	b2db      	uxtb	r3, r3
 801684e:	e006      	b.n	801685e <HAL_I2C_Init+0x92>
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	4a7d      	ldr	r2, [pc, #500]	; (8016a48 <HAL_I2C_Init+0x27c>)
 8016854:	4293      	cmp	r3, r2
 8016856:	bf94      	ite	ls
 8016858:	2301      	movls	r3, #1
 801685a:	2300      	movhi	r3, #0
 801685c:	b2db      	uxtb	r3, r3
 801685e:	2b00      	cmp	r3, #0
 8016860:	d001      	beq.n	8016866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8016862:	2301      	movs	r3, #1
 8016864:	e0e7      	b.n	8016a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	4a78      	ldr	r2, [pc, #480]	; (8016a4c <HAL_I2C_Init+0x280>)
 801686a:	fba2 2303 	umull	r2, r3, r2, r3
 801686e:	0c9b      	lsrs	r3, r3, #18
 8016870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	685b      	ldr	r3, [r3, #4]
 8016878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	68ba      	ldr	r2, [r7, #8]
 8016882:	430a      	orrs	r2, r1
 8016884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	6a1b      	ldr	r3, [r3, #32]
 801688c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	685b      	ldr	r3, [r3, #4]
 8016894:	4a6a      	ldr	r2, [pc, #424]	; (8016a40 <HAL_I2C_Init+0x274>)
 8016896:	4293      	cmp	r3, r2
 8016898:	d802      	bhi.n	80168a0 <HAL_I2C_Init+0xd4>
 801689a:	68bb      	ldr	r3, [r7, #8]
 801689c:	3301      	adds	r3, #1
 801689e:	e009      	b.n	80168b4 <HAL_I2C_Init+0xe8>
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80168a6:	fb02 f303 	mul.w	r3, r2, r3
 80168aa:	4a69      	ldr	r2, [pc, #420]	; (8016a50 <HAL_I2C_Init+0x284>)
 80168ac:	fba2 2303 	umull	r2, r3, r2, r3
 80168b0:	099b      	lsrs	r3, r3, #6
 80168b2:	3301      	adds	r3, #1
 80168b4:	687a      	ldr	r2, [r7, #4]
 80168b6:	6812      	ldr	r2, [r2, #0]
 80168b8:	430b      	orrs	r3, r1
 80168ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	69db      	ldr	r3, [r3, #28]
 80168c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80168c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	495c      	ldr	r1, [pc, #368]	; (8016a40 <HAL_I2C_Init+0x274>)
 80168d0:	428b      	cmp	r3, r1
 80168d2:	d819      	bhi.n	8016908 <HAL_I2C_Init+0x13c>
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	1e59      	subs	r1, r3, #1
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	005b      	lsls	r3, r3, #1
 80168de:	fbb1 f3f3 	udiv	r3, r1, r3
 80168e2:	1c59      	adds	r1, r3, #1
 80168e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80168e8:	400b      	ands	r3, r1
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00a      	beq.n	8016904 <HAL_I2C_Init+0x138>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	1e59      	subs	r1, r3, #1
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	005b      	lsls	r3, r3, #1
 80168f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80168fc:	3301      	adds	r3, #1
 80168fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016902:	e051      	b.n	80169a8 <HAL_I2C_Init+0x1dc>
 8016904:	2304      	movs	r3, #4
 8016906:	e04f      	b.n	80169a8 <HAL_I2C_Init+0x1dc>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	689b      	ldr	r3, [r3, #8]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d111      	bne.n	8016934 <HAL_I2C_Init+0x168>
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	1e58      	subs	r0, r3, #1
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	6859      	ldr	r1, [r3, #4]
 8016918:	460b      	mov	r3, r1
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	440b      	add	r3, r1
 801691e:	fbb0 f3f3 	udiv	r3, r0, r3
 8016922:	3301      	adds	r3, #1
 8016924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016928:	2b00      	cmp	r3, #0
 801692a:	bf0c      	ite	eq
 801692c:	2301      	moveq	r3, #1
 801692e:	2300      	movne	r3, #0
 8016930:	b2db      	uxtb	r3, r3
 8016932:	e012      	b.n	801695a <HAL_I2C_Init+0x18e>
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	1e58      	subs	r0, r3, #1
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6859      	ldr	r1, [r3, #4]
 801693c:	460b      	mov	r3, r1
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	440b      	add	r3, r1
 8016942:	0099      	lsls	r1, r3, #2
 8016944:	440b      	add	r3, r1
 8016946:	fbb0 f3f3 	udiv	r3, r0, r3
 801694a:	3301      	adds	r3, #1
 801694c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016950:	2b00      	cmp	r3, #0
 8016952:	bf0c      	ite	eq
 8016954:	2301      	moveq	r3, #1
 8016956:	2300      	movne	r3, #0
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <HAL_I2C_Init+0x196>
 801695e:	2301      	movs	r3, #1
 8016960:	e022      	b.n	80169a8 <HAL_I2C_Init+0x1dc>
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	689b      	ldr	r3, [r3, #8]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d10e      	bne.n	8016988 <HAL_I2C_Init+0x1bc>
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	1e58      	subs	r0, r3, #1
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6859      	ldr	r1, [r3, #4]
 8016972:	460b      	mov	r3, r1
 8016974:	005b      	lsls	r3, r3, #1
 8016976:	440b      	add	r3, r1
 8016978:	fbb0 f3f3 	udiv	r3, r0, r3
 801697c:	3301      	adds	r3, #1
 801697e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016986:	e00f      	b.n	80169a8 <HAL_I2C_Init+0x1dc>
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	1e58      	subs	r0, r3, #1
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	6859      	ldr	r1, [r3, #4]
 8016990:	460b      	mov	r3, r1
 8016992:	009b      	lsls	r3, r3, #2
 8016994:	440b      	add	r3, r1
 8016996:	0099      	lsls	r1, r3, #2
 8016998:	440b      	add	r3, r1
 801699a:	fbb0 f3f3 	udiv	r3, r0, r3
 801699e:	3301      	adds	r3, #1
 80169a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80169a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80169a8:	6879      	ldr	r1, [r7, #4]
 80169aa:	6809      	ldr	r1, [r1, #0]
 80169ac:	4313      	orrs	r3, r2
 80169ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	69da      	ldr	r2, [r3, #28]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6a1b      	ldr	r3, [r3, #32]
 80169c2:	431a      	orrs	r2, r3
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	430a      	orrs	r2, r1
 80169ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	689b      	ldr	r3, [r3, #8]
 80169d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80169d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	6911      	ldr	r1, [r2, #16]
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	68d2      	ldr	r2, [r2, #12]
 80169e2:	4311      	orrs	r1, r2
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	6812      	ldr	r2, [r2, #0]
 80169e8:	430b      	orrs	r3, r1
 80169ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	695a      	ldr	r2, [r3, #20]
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	699b      	ldr	r3, [r3, #24]
 80169fe:	431a      	orrs	r2, r3
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	430a      	orrs	r2, r1
 8016a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f042 0201 	orr.w	r2, r2, #1
 8016a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2220      	movs	r2, #32
 8016a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2200      	movs	r2, #0
 8016a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8016a34:	2300      	movs	r3, #0
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3710      	adds	r7, #16
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop
 8016a40:	000186a0 	.word	0x000186a0
 8016a44:	001e847f 	.word	0x001e847f
 8016a48:	003d08ff 	.word	0x003d08ff
 8016a4c:	431bde83 	.word	0x431bde83
 8016a50:	10624dd3 	.word	0x10624dd3

08016a54 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d101      	bne.n	8016a66 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8016a62:	2301      	movs	r3, #1
 8016a64:	e021      	b.n	8016aaa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2224      	movs	r2, #36	; 0x24
 8016a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	681a      	ldr	r2, [r3, #0]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f022 0201 	bic.w	r2, r2, #1
 8016a7c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f7eb fe46 	bl	8002710 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2200      	movs	r2, #0
 8016a88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016aa8:	2300      	movs	r3, #0
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3708      	adds	r7, #8
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
	...

08016ab4 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b086      	sub	sp, #24
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	60f8      	str	r0, [r7, #12]
 8016abc:	607a      	str	r2, [r7, #4]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	817b      	strh	r3, [r7, #10]
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8016ac8:	2300      	movs	r3, #0
 8016aca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016ad2:	b2db      	uxtb	r3, r3
 8016ad4:	2b20      	cmp	r3, #32
 8016ad6:	f040 80f4 	bne.w	8016cc2 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8016ada:	4b7c      	ldr	r3, [pc, #496]	; (8016ccc <HAL_I2C_Master_Receive_DMA+0x218>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	08db      	lsrs	r3, r3, #3
 8016ae0:	4a7b      	ldr	r2, [pc, #492]	; (8016cd0 <HAL_I2C_Master_Receive_DMA+0x21c>)
 8016ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ae6:	0a1a      	lsrs	r2, r3, #8
 8016ae8:	4613      	mov	r3, r2
 8016aea:	009b      	lsls	r3, r3, #2
 8016aec:	4413      	add	r3, r2
 8016aee:	009a      	lsls	r2, r3, #2
 8016af0:	4413      	add	r3, r2
 8016af2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	3b01      	subs	r3, #1
 8016af8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d116      	bne.n	8016b2e <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2200      	movs	r2, #0
 8016b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2220      	movs	r2, #32
 8016b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	2200      	movs	r2, #0
 8016b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b1a:	f043 0220 	orr.w	r2, r3, #32
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	2200      	movs	r2, #0
 8016b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	e0ca      	b.n	8016cc4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	699b      	ldr	r3, [r3, #24]
 8016b34:	f003 0302 	and.w	r3, r3, #2
 8016b38:	2b02      	cmp	r3, #2
 8016b3a:	d0db      	beq.n	8016af4 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d101      	bne.n	8016b4a <HAL_I2C_Master_Receive_DMA+0x96>
 8016b46:	2302      	movs	r3, #2
 8016b48:	e0bc      	b.n	8016cc4 <HAL_I2C_Master_Receive_DMA+0x210>
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	f003 0301 	and.w	r3, r3, #1
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d007      	beq.n	8016b70 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	681a      	ldr	r2, [r3, #0]
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	f042 0201 	orr.w	r2, r2, #1
 8016b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2222      	movs	r2, #34	; 0x22
 8016b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2210      	movs	r2, #16
 8016b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	2200      	movs	r2, #0
 8016b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	687a      	ldr	r2, [r7, #4]
 8016b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	893a      	ldrh	r2, [r7, #8]
 8016ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	4a49      	ldr	r2, [pc, #292]	; (8016cd4 <HAL_I2C_Master_Receive_DMA+0x220>)
 8016bb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8016bb2:	897a      	ldrh	r2, [r7, #10]
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d062      	beq.n	8016c86 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bc4:	4a44      	ldr	r2, [pc, #272]	; (8016cd8 <HAL_I2C_Master_Receive_DMA+0x224>)
 8016bc6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bcc:	4a43      	ldr	r2, [pc, #268]	; (8016cdc <HAL_I2C_Master_Receive_DMA+0x228>)
 8016bce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bdc:	2200      	movs	r2, #0
 8016bde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016be4:	2200      	movs	r2, #0
 8016be6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bec:	2200      	movs	r2, #0
 8016bee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	3310      	adds	r3, #16
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c00:	461a      	mov	r2, r3
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016c06:	f7fe fd35 	bl	8015674 <HAL_DMA_Start_IT>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8016c0e:	7dfb      	ldrb	r3, [r7, #23]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d124      	bne.n	8016c5e <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016c22:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016c32:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2200      	movs	r2, #0
 8016c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	685a      	ldr	r2, [r3, #4]
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8016c4a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	685a      	ldr	r2, [r3, #4]
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8016c5a:	605a      	str	r2, [r3, #4]
 8016c5c:	e02f      	b.n	8016cbe <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	2220      	movs	r2, #32
 8016c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c72:	f043 0210 	orr.w	r2, r3, #16
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8016c82:	2301      	movs	r3, #1
 8016c84:	e01e      	b.n	8016cc4 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016c94:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	681a      	ldr	r2, [r3, #0]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016ca4:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2200      	movs	r2, #0
 8016caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	685a      	ldr	r2, [r3, #4]
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8016cbc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	e000      	b.n	8016cc4 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8016cc2:	2302      	movs	r3, #2
  }
}
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	3718      	adds	r7, #24
 8016cc8:	46bd      	mov	sp, r7
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	20000638 	.word	0x20000638
 8016cd0:	14f8b589 	.word	0x14f8b589
 8016cd4:	ffff0000 	.word	0xffff0000
 8016cd8:	0801844d 	.word	0x0801844d
 8016cdc:	080185f7 	.word	0x080185f7

08016ce0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b088      	sub	sp, #32
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	685b      	ldr	r3, [r3, #4]
 8016cf2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016d00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8016d0a:	7bfb      	ldrb	r3, [r7, #15]
 8016d0c:	2b10      	cmp	r3, #16
 8016d0e:	d003      	beq.n	8016d18 <HAL_I2C_EV_IRQHandler+0x38>
 8016d10:	7bfb      	ldrb	r3, [r7, #15]
 8016d12:	2b40      	cmp	r3, #64	; 0x40
 8016d14:	f040 80bd 	bne.w	8016e92 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	699b      	ldr	r3, [r3, #24]
 8016d1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	695b      	ldr	r3, [r3, #20]
 8016d26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8016d28:	69fb      	ldr	r3, [r7, #28]
 8016d2a:	f003 0301 	and.w	r3, r3, #1
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d10d      	bne.n	8016d4e <HAL_I2C_EV_IRQHandler+0x6e>
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8016d38:	d003      	beq.n	8016d42 <HAL_I2C_EV_IRQHandler+0x62>
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8016d40:	d101      	bne.n	8016d46 <HAL_I2C_EV_IRQHandler+0x66>
 8016d42:	2301      	movs	r3, #1
 8016d44:	e000      	b.n	8016d48 <HAL_I2C_EV_IRQHandler+0x68>
 8016d46:	2300      	movs	r3, #0
 8016d48:	2b01      	cmp	r3, #1
 8016d4a:	f000 812e 	beq.w	8016faa <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016d4e:	69fb      	ldr	r3, [r7, #28]
 8016d50:	f003 0301 	and.w	r3, r3, #1
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00c      	beq.n	8016d72 <HAL_I2C_EV_IRQHandler+0x92>
 8016d58:	697b      	ldr	r3, [r7, #20]
 8016d5a:	0a5b      	lsrs	r3, r3, #9
 8016d5c:	f003 0301 	and.w	r3, r3, #1
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d006      	beq.n	8016d72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f001 fd5d 	bl	8018824 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8016d6a:	6878      	ldr	r0, [r7, #4]
 8016d6c:	f000 fd58 	bl	8017820 <I2C_Master_SB>
 8016d70:	e08e      	b.n	8016e90 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016d72:	69fb      	ldr	r3, [r7, #28]
 8016d74:	08db      	lsrs	r3, r3, #3
 8016d76:	f003 0301 	and.w	r3, r3, #1
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d009      	beq.n	8016d92 <HAL_I2C_EV_IRQHandler+0xb2>
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	0a5b      	lsrs	r3, r3, #9
 8016d82:	f003 0301 	and.w	r3, r3, #1
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d003      	beq.n	8016d92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8016d8a:	6878      	ldr	r0, [r7, #4]
 8016d8c:	f000 fdce 	bl	801792c <I2C_Master_ADD10>
 8016d90:	e07e      	b.n	8016e90 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016d92:	69fb      	ldr	r3, [r7, #28]
 8016d94:	085b      	lsrs	r3, r3, #1
 8016d96:	f003 0301 	and.w	r3, r3, #1
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d009      	beq.n	8016db2 <HAL_I2C_EV_IRQHandler+0xd2>
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	0a5b      	lsrs	r3, r3, #9
 8016da2:	f003 0301 	and.w	r3, r3, #1
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d003      	beq.n	8016db2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f000 fde8 	bl	8017980 <I2C_Master_ADDR>
 8016db0:	e06e      	b.n	8016e90 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8016db2:	69bb      	ldr	r3, [r7, #24]
 8016db4:	089b      	lsrs	r3, r3, #2
 8016db6:	f003 0301 	and.w	r3, r3, #1
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d037      	beq.n	8016e2e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	685b      	ldr	r3, [r3, #4]
 8016dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016dcc:	f000 80ef 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016dd0:	69fb      	ldr	r3, [r7, #28]
 8016dd2:	09db      	lsrs	r3, r3, #7
 8016dd4:	f003 0301 	and.w	r3, r3, #1
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d00f      	beq.n	8016dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	0a9b      	lsrs	r3, r3, #10
 8016de0:	f003 0301 	and.w	r3, r3, #1
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d009      	beq.n	8016dfc <HAL_I2C_EV_IRQHandler+0x11c>
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	089b      	lsrs	r3, r3, #2
 8016dec:	f003 0301 	and.w	r3, r3, #1
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d103      	bne.n	8016dfc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f000 f9e5 	bl	80171c4 <I2C_MasterTransmit_TXE>
 8016dfa:	e049      	b.n	8016e90 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016dfc:	69fb      	ldr	r3, [r7, #28]
 8016dfe:	089b      	lsrs	r3, r3, #2
 8016e00:	f003 0301 	and.w	r3, r3, #1
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f000 80d2 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	0a5b      	lsrs	r3, r3, #9
 8016e0e:	f003 0301 	and.w	r3, r3, #1
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	f000 80cb 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8016e18:	7bfb      	ldrb	r3, [r7, #15]
 8016e1a:	2b10      	cmp	r3, #16
 8016e1c:	d103      	bne.n	8016e26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 fa6c 	bl	80172fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016e24:	e0c3      	b.n	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8016e26:	6878      	ldr	r0, [r7, #4]
 8016e28:	f000 fad0 	bl	80173cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016e2c:	e0bf      	b.n	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016e3c:	f000 80b7 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016e40:	69fb      	ldr	r3, [r7, #28]
 8016e42:	099b      	lsrs	r3, r3, #6
 8016e44:	f003 0301 	and.w	r3, r3, #1
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00f      	beq.n	8016e6c <HAL_I2C_EV_IRQHandler+0x18c>
 8016e4c:	697b      	ldr	r3, [r7, #20]
 8016e4e:	0a9b      	lsrs	r3, r3, #10
 8016e50:	f003 0301 	and.w	r3, r3, #1
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d009      	beq.n	8016e6c <HAL_I2C_EV_IRQHandler+0x18c>
 8016e58:	69fb      	ldr	r3, [r7, #28]
 8016e5a:	089b      	lsrs	r3, r3, #2
 8016e5c:	f003 0301 	and.w	r3, r3, #1
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d103      	bne.n	8016e6c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f000 fb40 	bl	80174ea <I2C_MasterReceive_RXNE>
 8016e6a:	e011      	b.n	8016e90 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	089b      	lsrs	r3, r3, #2
 8016e70:	f003 0301 	and.w	r3, r3, #1
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	f000 809a 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
 8016e7a:	697b      	ldr	r3, [r7, #20]
 8016e7c:	0a5b      	lsrs	r3, r3, #9
 8016e7e:	f003 0301 	and.w	r3, r3, #1
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	f000 8093 	beq.w	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f000 fbdf 	bl	801764c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016e8e:	e08e      	b.n	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
 8016e90:	e08d      	b.n	8016fae <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d004      	beq.n	8016ea4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	695b      	ldr	r3, [r3, #20]
 8016ea0:	61fb      	str	r3, [r7, #28]
 8016ea2:	e007      	b.n	8016eb4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	699b      	ldr	r3, [r3, #24]
 8016eaa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	695b      	ldr	r3, [r3, #20]
 8016eb2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016eb4:	69fb      	ldr	r3, [r7, #28]
 8016eb6:	085b      	lsrs	r3, r3, #1
 8016eb8:	f003 0301 	and.w	r3, r3, #1
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d012      	beq.n	8016ee6 <HAL_I2C_EV_IRQHandler+0x206>
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	0a5b      	lsrs	r3, r3, #9
 8016ec4:	f003 0301 	and.w	r3, r3, #1
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d00c      	beq.n	8016ee6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d003      	beq.n	8016edc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	699b      	ldr	r3, [r3, #24]
 8016eda:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8016edc:	69b9      	ldr	r1, [r7, #24]
 8016ede:	6878      	ldr	r0, [r7, #4]
 8016ee0:	f000 ff9d 	bl	8017e1e <I2C_Slave_ADDR>
 8016ee4:	e066      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016ee6:	69fb      	ldr	r3, [r7, #28]
 8016ee8:	091b      	lsrs	r3, r3, #4
 8016eea:	f003 0301 	and.w	r3, r3, #1
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d009      	beq.n	8016f06 <HAL_I2C_EV_IRQHandler+0x226>
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	0a5b      	lsrs	r3, r3, #9
 8016ef6:	f003 0301 	and.w	r3, r3, #1
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d003      	beq.n	8016f06 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 ffd2 	bl	8017ea8 <I2C_Slave_STOPF>
 8016f04:	e056      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016f06:	7bbb      	ldrb	r3, [r7, #14]
 8016f08:	2b21      	cmp	r3, #33	; 0x21
 8016f0a:	d002      	beq.n	8016f12 <HAL_I2C_EV_IRQHandler+0x232>
 8016f0c:	7bbb      	ldrb	r3, [r7, #14]
 8016f0e:	2b29      	cmp	r3, #41	; 0x29
 8016f10:	d125      	bne.n	8016f5e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016f12:	69fb      	ldr	r3, [r7, #28]
 8016f14:	09db      	lsrs	r3, r3, #7
 8016f16:	f003 0301 	and.w	r3, r3, #1
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d00f      	beq.n	8016f3e <HAL_I2C_EV_IRQHandler+0x25e>
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	0a9b      	lsrs	r3, r3, #10
 8016f22:	f003 0301 	and.w	r3, r3, #1
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d009      	beq.n	8016f3e <HAL_I2C_EV_IRQHandler+0x25e>
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	089b      	lsrs	r3, r3, #2
 8016f2e:	f003 0301 	and.w	r3, r3, #1
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d103      	bne.n	8016f3e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f000 feb3 	bl	8017ca2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016f3c:	e039      	b.n	8016fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016f3e:	69fb      	ldr	r3, [r7, #28]
 8016f40:	089b      	lsrs	r3, r3, #2
 8016f42:	f003 0301 	and.w	r3, r3, #1
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d033      	beq.n	8016fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	0a5b      	lsrs	r3, r3, #9
 8016f4e:	f003 0301 	and.w	r3, r3, #1
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d02d      	beq.n	8016fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f000 fee0 	bl	8017d1c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016f5c:	e029      	b.n	8016fb2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	099b      	lsrs	r3, r3, #6
 8016f62:	f003 0301 	and.w	r3, r3, #1
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00f      	beq.n	8016f8a <HAL_I2C_EV_IRQHandler+0x2aa>
 8016f6a:	697b      	ldr	r3, [r7, #20]
 8016f6c:	0a9b      	lsrs	r3, r3, #10
 8016f6e:	f003 0301 	and.w	r3, r3, #1
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d009      	beq.n	8016f8a <HAL_I2C_EV_IRQHandler+0x2aa>
 8016f76:	69fb      	ldr	r3, [r7, #28]
 8016f78:	089b      	lsrs	r3, r3, #2
 8016f7a:	f003 0301 	and.w	r3, r3, #1
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d103      	bne.n	8016f8a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 feeb 	bl	8017d5e <I2C_SlaveReceive_RXNE>
 8016f88:	e014      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	089b      	lsrs	r3, r3, #2
 8016f8e:	f003 0301 	and.w	r3, r3, #1
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00e      	beq.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8016f96:	697b      	ldr	r3, [r7, #20]
 8016f98:	0a5b      	lsrs	r3, r3, #9
 8016f9a:	f003 0301 	and.w	r3, r3, #1
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d008      	beq.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8016fa2:	6878      	ldr	r0, [r7, #4]
 8016fa4:	f000 ff19 	bl	8017dda <I2C_SlaveReceive_BTF>
 8016fa8:	e004      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8016faa:	bf00      	nop
 8016fac:	e002      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8016fae:	bf00      	nop
 8016fb0:	e000      	b.n	8016fb4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8016fb2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8016fb4:	3720      	adds	r7, #32
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}

08016fba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016fba:	b580      	push	{r7, lr}
 8016fbc:	b08a      	sub	sp, #40	; 0x28
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	695b      	ldr	r3, [r3, #20]
 8016fc8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016fdc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8016fde:	6a3b      	ldr	r3, [r7, #32]
 8016fe0:	0a1b      	lsrs	r3, r3, #8
 8016fe2:	f003 0301 	and.w	r3, r3, #1
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d00e      	beq.n	8017008 <HAL_I2C_ER_IRQHandler+0x4e>
 8016fea:	69fb      	ldr	r3, [r7, #28]
 8016fec:	0a1b      	lsrs	r3, r3, #8
 8016fee:	f003 0301 	and.w	r3, r3, #1
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d008      	beq.n	8017008 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8016ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ff8:	f043 0301 	orr.w	r3, r3, #1
 8016ffc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017006:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017008:	6a3b      	ldr	r3, [r7, #32]
 801700a:	0a5b      	lsrs	r3, r3, #9
 801700c:	f003 0301 	and.w	r3, r3, #1
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00e      	beq.n	8017032 <HAL_I2C_ER_IRQHandler+0x78>
 8017014:	69fb      	ldr	r3, [r7, #28]
 8017016:	0a1b      	lsrs	r3, r3, #8
 8017018:	f003 0301 	and.w	r3, r3, #1
 801701c:	2b00      	cmp	r3, #0
 801701e:	d008      	beq.n	8017032 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8017020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017022:	f043 0302 	orr.w	r3, r3, #2
 8017026:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8017030:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8017032:	6a3b      	ldr	r3, [r7, #32]
 8017034:	0a9b      	lsrs	r3, r3, #10
 8017036:	f003 0301 	and.w	r3, r3, #1
 801703a:	2b00      	cmp	r3, #0
 801703c:	d03f      	beq.n	80170be <HAL_I2C_ER_IRQHandler+0x104>
 801703e:	69fb      	ldr	r3, [r7, #28]
 8017040:	0a1b      	lsrs	r3, r3, #8
 8017042:	f003 0301 	and.w	r3, r3, #1
 8017046:	2b00      	cmp	r3, #0
 8017048:	d039      	beq.n	80170be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 801704a:	7efb      	ldrb	r3, [r7, #27]
 801704c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017052:	b29b      	uxth	r3, r3
 8017054:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801705c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017062:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8017064:	7ebb      	ldrb	r3, [r7, #26]
 8017066:	2b20      	cmp	r3, #32
 8017068:	d112      	bne.n	8017090 <HAL_I2C_ER_IRQHandler+0xd6>
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d10f      	bne.n	8017090 <HAL_I2C_ER_IRQHandler+0xd6>
 8017070:	7cfb      	ldrb	r3, [r7, #19]
 8017072:	2b21      	cmp	r3, #33	; 0x21
 8017074:	d008      	beq.n	8017088 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8017076:	7cfb      	ldrb	r3, [r7, #19]
 8017078:	2b29      	cmp	r3, #41	; 0x29
 801707a:	d005      	beq.n	8017088 <HAL_I2C_ER_IRQHandler+0xce>
 801707c:	7cfb      	ldrb	r3, [r7, #19]
 801707e:	2b28      	cmp	r3, #40	; 0x28
 8017080:	d106      	bne.n	8017090 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	2b21      	cmp	r3, #33	; 0x21
 8017086:	d103      	bne.n	8017090 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f001 f83d 	bl	8018108 <I2C_Slave_AF>
 801708e:	e016      	b.n	80170be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8017098:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 801709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709c:	f043 0304 	orr.w	r3, r3, #4
 80170a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80170a2:	7efb      	ldrb	r3, [r7, #27]
 80170a4:	2b10      	cmp	r3, #16
 80170a6:	d002      	beq.n	80170ae <HAL_I2C_ER_IRQHandler+0xf4>
 80170a8:	7efb      	ldrb	r3, [r7, #27]
 80170aa:	2b40      	cmp	r3, #64	; 0x40
 80170ac:	d107      	bne.n	80170be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	681a      	ldr	r2, [r3, #0]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80170bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80170be:	6a3b      	ldr	r3, [r7, #32]
 80170c0:	0adb      	lsrs	r3, r3, #11
 80170c2:	f003 0301 	and.w	r3, r3, #1
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00e      	beq.n	80170e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80170ca:	69fb      	ldr	r3, [r7, #28]
 80170cc:	0a1b      	lsrs	r3, r3, #8
 80170ce:	f003 0301 	and.w	r3, r3, #1
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d008      	beq.n	80170e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80170d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170d8:	f043 0308 	orr.w	r3, r3, #8
 80170dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80170e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80170e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d008      	beq.n	8017100 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80170f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170f4:	431a      	orrs	r2, r3
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f001 f874 	bl	80181e8 <I2C_ITError>
  }
}
 8017100:	bf00      	nop
 8017102:	3728      	adds	r7, #40	; 0x28
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}

08017108 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017108:	b480      	push	{r7}
 801710a:	b083      	sub	sp, #12
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8017110:	bf00      	nop
 8017112:	370c      	adds	r7, #12
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr

0801711c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801711c:	b480      	push	{r7}
 801711e:	b083      	sub	sp, #12
 8017120:	af00      	add	r7, sp, #0
 8017122:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8017124:	bf00      	nop
 8017126:	370c      	adds	r7, #12
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr

08017130 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017130:	b480      	push	{r7}
 8017132:	b083      	sub	sp, #12
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8017138:	bf00      	nop
 801713a:	370c      	adds	r7, #12
 801713c:	46bd      	mov	sp, r7
 801713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017142:	4770      	bx	lr

08017144 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8017144:	b480      	push	{r7}
 8017146:	b083      	sub	sp, #12
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	460b      	mov	r3, r1
 801714e:	70fb      	strb	r3, [r7, #3]
 8017150:	4613      	mov	r3, r2
 8017152:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8017154:	bf00      	nop
 8017156:	370c      	adds	r7, #12
 8017158:	46bd      	mov	sp, r7
 801715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715e:	4770      	bx	lr

08017160 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8017168:	bf00      	nop
 801716a:	370c      	adds	r7, #12
 801716c:	46bd      	mov	sp, r7
 801716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017172:	4770      	bx	lr

08017174 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801717c:	bf00      	nop
 801717e:	370c      	adds	r7, #12
 8017180:	46bd      	mov	sp, r7
 8017182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017186:	4770      	bx	lr

08017188 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017188:	b480      	push	{r7}
 801718a:	b083      	sub	sp, #12
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8017190:	bf00      	nop
 8017192:	370c      	adds	r7, #12
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801719c:	b480      	push	{r7}
 801719e:	b083      	sub	sp, #12
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80171a4:	bf00      	nop
 80171a6:	370c      	adds	r7, #12
 80171a8:	46bd      	mov	sp, r7
 80171aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ae:	4770      	bx	lr

080171b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80171b0:	b480      	push	{r7}
 80171b2:	b083      	sub	sp, #12
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80171b8:	bf00      	nop
 80171ba:	370c      	adds	r7, #12
 80171bc:	46bd      	mov	sp, r7
 80171be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c2:	4770      	bx	lr

080171c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b084      	sub	sp, #16
 80171c8:	af00      	add	r7, sp, #0
 80171ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80171da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d150      	bne.n	801728c <I2C_MasterTransmit_TXE+0xc8>
 80171ea:	7bfb      	ldrb	r3, [r7, #15]
 80171ec:	2b21      	cmp	r3, #33	; 0x21
 80171ee:	d14d      	bne.n	801728c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	2b08      	cmp	r3, #8
 80171f4:	d01d      	beq.n	8017232 <I2C_MasterTransmit_TXE+0x6e>
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	2b20      	cmp	r3, #32
 80171fa:	d01a      	beq.n	8017232 <I2C_MasterTransmit_TXE+0x6e>
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017202:	d016      	beq.n	8017232 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	685a      	ldr	r2, [r3, #4]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017212:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2211      	movs	r2, #17
 8017218:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	2200      	movs	r2, #0
 801721e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2220      	movs	r2, #32
 8017226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7ff ff6c 	bl	8017108 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017230:	e060      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	685a      	ldr	r2, [r3, #4]
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017240:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017250:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	2200      	movs	r2, #0
 8017256:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2220      	movs	r2, #32
 801725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017266:	b2db      	uxtb	r3, r3
 8017268:	2b40      	cmp	r3, #64	; 0x40
 801726a:	d107      	bne.n	801727c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2200      	movs	r2, #0
 8017270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f7ff ff7d 	bl	8017174 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801727a:	e03b      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2200      	movs	r2, #0
 8017280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f7ff ff3f 	bl	8017108 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 801728a:	e033      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 801728c:	7bfb      	ldrb	r3, [r7, #15]
 801728e:	2b21      	cmp	r3, #33	; 0x21
 8017290:	d005      	beq.n	801729e <I2C_MasterTransmit_TXE+0xda>
 8017292:	7bbb      	ldrb	r3, [r7, #14]
 8017294:	2b40      	cmp	r3, #64	; 0x40
 8017296:	d12d      	bne.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8017298:	7bfb      	ldrb	r3, [r7, #15]
 801729a:	2b22      	cmp	r3, #34	; 0x22
 801729c:	d12a      	bne.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d108      	bne.n	80172ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	685a      	ldr	r2, [r3, #4]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80172b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80172b8:	e01c      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80172c0:	b2db      	uxtb	r3, r3
 80172c2:	2b40      	cmp	r3, #64	; 0x40
 80172c4:	d103      	bne.n	80172ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 f880 	bl	80173cc <I2C_MemoryTransmit_TXE_BTF>
}
 80172cc:	e012      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d2:	781a      	ldrb	r2, [r3, #0]
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172de:	1c5a      	adds	r2, r3, #1
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80172e8:	b29b      	uxth	r3, r3
 80172ea:	3b01      	subs	r3, #1
 80172ec:	b29a      	uxth	r2, r3
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80172f2:	e7ff      	b.n	80172f4 <I2C_MasterTransmit_TXE+0x130>
 80172f4:	bf00      	nop
 80172f6:	3710      	adds	r7, #16
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}

080172fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b084      	sub	sp, #16
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017308:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017310:	b2db      	uxtb	r3, r3
 8017312:	2b21      	cmp	r3, #33	; 0x21
 8017314:	d156      	bne.n	80173c4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801731a:	b29b      	uxth	r3, r3
 801731c:	2b00      	cmp	r3, #0
 801731e:	d012      	beq.n	8017346 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017324:	781a      	ldrb	r2, [r3, #0]
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017330:	1c5a      	adds	r2, r3, #1
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801733a:	b29b      	uxth	r3, r3
 801733c:	3b01      	subs	r3, #1
 801733e:	b29a      	uxth	r2, r3
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8017344:	e03e      	b.n	80173c4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	2b08      	cmp	r3, #8
 801734a:	d01d      	beq.n	8017388 <I2C_MasterTransmit_BTF+0x8c>
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2b20      	cmp	r3, #32
 8017350:	d01a      	beq.n	8017388 <I2C_MasterTransmit_BTF+0x8c>
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017358:	d016      	beq.n	8017388 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	685a      	ldr	r2, [r3, #4]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017368:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2211      	movs	r2, #17
 801736e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2200      	movs	r2, #0
 8017374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2220      	movs	r2, #32
 801737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8017380:	6878      	ldr	r0, [r7, #4]
 8017382:	f7ff fec1 	bl	8017108 <HAL_I2C_MasterTxCpltCallback>
}
 8017386:	e01d      	b.n	80173c4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	685a      	ldr	r2, [r3, #4]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017396:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	681a      	ldr	r2, [r3, #0]
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80173a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2200      	movs	r2, #0
 80173ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	2220      	movs	r2, #32
 80173b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	2200      	movs	r2, #0
 80173ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f7ff fea2 	bl	8017108 <HAL_I2C_MasterTxCpltCallback>
}
 80173c4:	bf00      	nop
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b084      	sub	sp, #16
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80173da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d11d      	bne.n	8017420 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80173e8:	2b01      	cmp	r3, #1
 80173ea:	d10b      	bne.n	8017404 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80173f0:	b2da      	uxtb	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173fc:	1c9a      	adds	r2, r3, #2
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8017402:	e06e      	b.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017408:	b29b      	uxth	r3, r3
 801740a:	121b      	asrs	r3, r3, #8
 801740c:	b2da      	uxtb	r2, r3
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017418:	1c5a      	adds	r2, r3, #1
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801741e:	e060      	b.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017424:	2b01      	cmp	r3, #1
 8017426:	d10b      	bne.n	8017440 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801742c:	b2da      	uxtb	r2, r3
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017438:	1c5a      	adds	r2, r3, #1
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801743e:	e050      	b.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017444:	2b02      	cmp	r3, #2
 8017446:	d14c      	bne.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8017448:	7bfb      	ldrb	r3, [r7, #15]
 801744a:	2b22      	cmp	r3, #34	; 0x22
 801744c:	d108      	bne.n	8017460 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	681a      	ldr	r2, [r3, #0]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801745c:	601a      	str	r2, [r3, #0]
}
 801745e:	e040      	b.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017464:	b29b      	uxth	r3, r3
 8017466:	2b00      	cmp	r3, #0
 8017468:	d015      	beq.n	8017496 <I2C_MemoryTransmit_TXE_BTF+0xca>
 801746a:	7bfb      	ldrb	r3, [r7, #15]
 801746c:	2b21      	cmp	r3, #33	; 0x21
 801746e:	d112      	bne.n	8017496 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017474:	781a      	ldrb	r2, [r3, #0]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017480:	1c5a      	adds	r2, r3, #1
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801748a:	b29b      	uxth	r3, r3
 801748c:	3b01      	subs	r3, #1
 801748e:	b29a      	uxth	r2, r3
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017494:	e025      	b.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801749a:	b29b      	uxth	r3, r3
 801749c:	2b00      	cmp	r3, #0
 801749e:	d120      	bne.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80174a0:	7bfb      	ldrb	r3, [r7, #15]
 80174a2:	2b21      	cmp	r3, #33	; 0x21
 80174a4:	d11d      	bne.n	80174e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	685a      	ldr	r2, [r3, #4]
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80174b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2200      	movs	r2, #0
 80174ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2220      	movs	r2, #32
 80174d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2200      	movs	r2, #0
 80174d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f7ff fe49 	bl	8017174 <HAL_I2C_MemTxCpltCallback>
}
 80174e2:	bf00      	nop
 80174e4:	3710      	adds	r7, #16
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b084      	sub	sp, #16
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174f8:	b2db      	uxtb	r3, r3
 80174fa:	2b22      	cmp	r3, #34	; 0x22
 80174fc:	f040 80a2 	bne.w	8017644 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017504:	b29b      	uxth	r3, r3
 8017506:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b03      	cmp	r3, #3
 801750c:	d921      	bls.n	8017552 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	691a      	ldr	r2, [r3, #16]
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017518:	b2d2      	uxtb	r2, r2
 801751a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017520:	1c5a      	adds	r2, r3, #1
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801752a:	b29b      	uxth	r3, r3
 801752c:	3b01      	subs	r3, #1
 801752e:	b29a      	uxth	r2, r3
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017538:	b29b      	uxth	r3, r3
 801753a:	2b03      	cmp	r3, #3
 801753c:	f040 8082 	bne.w	8017644 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	685a      	ldr	r2, [r3, #4]
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801754e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8017550:	e078      	b.n	8017644 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017556:	2b02      	cmp	r3, #2
 8017558:	d074      	beq.n	8017644 <I2C_MasterReceive_RXNE+0x15a>
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2b01      	cmp	r3, #1
 801755e:	d002      	beq.n	8017566 <I2C_MasterReceive_RXNE+0x7c>
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d16e      	bne.n	8017644 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8017566:	6878      	ldr	r0, [r7, #4]
 8017568:	f001 f92a 	bl	80187c0 <I2C_WaitOnSTOPRequestThroughIT>
 801756c:	4603      	mov	r3, r0
 801756e:	2b00      	cmp	r3, #0
 8017570:	d142      	bne.n	80175f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	681a      	ldr	r2, [r3, #0]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017580:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	685a      	ldr	r2, [r3, #4]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017590:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	691a      	ldr	r2, [r3, #16]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801759c:	b2d2      	uxtb	r2, r2
 801759e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175a4:	1c5a      	adds	r2, r3, #1
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	3b01      	subs	r3, #1
 80175b2:	b29a      	uxth	r2, r3
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2220      	movs	r2, #32
 80175bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80175c6:	b2db      	uxtb	r3, r3
 80175c8:	2b40      	cmp	r3, #64	; 0x40
 80175ca:	d10a      	bne.n	80175e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2200      	movs	r2, #0
 80175d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	2200      	movs	r2, #0
 80175d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80175da:	6878      	ldr	r0, [r7, #4]
 80175dc:	f7ff fdd4 	bl	8017188 <HAL_I2C_MemRxCpltCallback>
}
 80175e0:	e030      	b.n	8017644 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	2200      	movs	r2, #0
 80175e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2212      	movs	r2, #18
 80175ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7f7 fae5 	bl	800ebc0 <HAL_I2C_MasterRxCpltCallback>
}
 80175f6:	e025      	b.n	8017644 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	685a      	ldr	r2, [r3, #4]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017606:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	691a      	ldr	r2, [r3, #16]
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017612:	b2d2      	uxtb	r2, r2
 8017614:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801761a:	1c5a      	adds	r2, r3, #1
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017624:	b29b      	uxth	r3, r3
 8017626:	3b01      	subs	r3, #1
 8017628:	b29a      	uxth	r2, r3
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2220      	movs	r2, #32
 8017632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2200      	movs	r2, #0
 801763a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f7ff fdac 	bl	801719c <HAL_I2C_ErrorCallback>
}
 8017644:	bf00      	nop
 8017646:	3710      	adds	r7, #16
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b084      	sub	sp, #16
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017658:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801765e:	b29b      	uxth	r3, r3
 8017660:	2b04      	cmp	r3, #4
 8017662:	d11b      	bne.n	801769c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	685a      	ldr	r2, [r3, #4]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017672:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	691a      	ldr	r2, [r3, #16]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801767e:	b2d2      	uxtb	r2, r2
 8017680:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017686:	1c5a      	adds	r2, r3, #1
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017690:	b29b      	uxth	r3, r3
 8017692:	3b01      	subs	r3, #1
 8017694:	b29a      	uxth	r2, r3
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 801769a:	e0bd      	b.n	8017818 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	2b03      	cmp	r3, #3
 80176a4:	d129      	bne.n	80176fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	685a      	ldr	r2, [r3, #4]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80176b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	2b04      	cmp	r3, #4
 80176ba:	d00a      	beq.n	80176d2 <I2C_MasterReceive_BTF+0x86>
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	2b02      	cmp	r3, #2
 80176c0:	d007      	beq.n	80176d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	681a      	ldr	r2, [r3, #0]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80176d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	691a      	ldr	r2, [r3, #16]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176dc:	b2d2      	uxtb	r2, r2
 80176de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176e4:	1c5a      	adds	r2, r3, #1
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	3b01      	subs	r3, #1
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80176f8:	e08e      	b.n	8017818 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80176fe:	b29b      	uxth	r3, r3
 8017700:	2b02      	cmp	r3, #2
 8017702:	d176      	bne.n	80177f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	2b01      	cmp	r3, #1
 8017708:	d002      	beq.n	8017710 <I2C_MasterReceive_BTF+0xc4>
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	2b10      	cmp	r3, #16
 801770e:	d108      	bne.n	8017722 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801771e:	601a      	str	r2, [r3, #0]
 8017720:	e019      	b.n	8017756 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2b04      	cmp	r3, #4
 8017726:	d002      	beq.n	801772e <I2C_MasterReceive_BTF+0xe2>
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	2b02      	cmp	r3, #2
 801772c:	d108      	bne.n	8017740 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	681a      	ldr	r2, [r3, #0]
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801773c:	601a      	str	r2, [r3, #0]
 801773e:	e00a      	b.n	8017756 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	2b10      	cmp	r3, #16
 8017744:	d007      	beq.n	8017756 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	681a      	ldr	r2, [r3, #0]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017754:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	691a      	ldr	r2, [r3, #16]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017760:	b2d2      	uxtb	r2, r2
 8017762:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017768:	1c5a      	adds	r2, r3, #1
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017772:	b29b      	uxth	r3, r3
 8017774:	3b01      	subs	r3, #1
 8017776:	b29a      	uxth	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	691a      	ldr	r2, [r3, #16]
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017786:	b2d2      	uxtb	r2, r2
 8017788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778e:	1c5a      	adds	r2, r3, #1
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017798:	b29b      	uxth	r3, r3
 801779a:	3b01      	subs	r3, #1
 801779c:	b29a      	uxth	r2, r3
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	685a      	ldr	r2, [r3, #4]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80177b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	2220      	movs	r2, #32
 80177b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	2b40      	cmp	r3, #64	; 0x40
 80177c4:	d10a      	bne.n	80177dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2200      	movs	r2, #0
 80177ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2200      	movs	r2, #0
 80177d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7ff fcd7 	bl	8017188 <HAL_I2C_MemRxCpltCallback>
}
 80177da:	e01d      	b.n	8017818 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	2200      	movs	r2, #0
 80177e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2212      	movs	r2, #18
 80177e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f7f7 f9e8 	bl	800ebc0 <HAL_I2C_MasterRxCpltCallback>
}
 80177f0:	e012      	b.n	8017818 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	691a      	ldr	r2, [r3, #16]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177fc:	b2d2      	uxtb	r2, r2
 80177fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017804:	1c5a      	adds	r2, r3, #1
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801780e:	b29b      	uxth	r3, r3
 8017810:	3b01      	subs	r3, #1
 8017812:	b29a      	uxth	r2, r3
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017818:	bf00      	nop
 801781a:	3710      	adds	r7, #16
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8017820:	b480      	push	{r7}
 8017822:	b083      	sub	sp, #12
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801782e:	b2db      	uxtb	r3, r3
 8017830:	2b40      	cmp	r3, #64	; 0x40
 8017832:	d117      	bne.n	8017864 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017838:	2b00      	cmp	r3, #0
 801783a:	d109      	bne.n	8017850 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017840:	b2db      	uxtb	r3, r3
 8017842:	461a      	mov	r2, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801784c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801784e:	e067      	b.n	8017920 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017854:	b2db      	uxtb	r3, r3
 8017856:	f043 0301 	orr.w	r3, r3, #1
 801785a:	b2da      	uxtb	r2, r3
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	611a      	str	r2, [r3, #16]
}
 8017862:	e05d      	b.n	8017920 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	691b      	ldr	r3, [r3, #16]
 8017868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801786c:	d133      	bne.n	80178d6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017874:	b2db      	uxtb	r3, r3
 8017876:	2b21      	cmp	r3, #33	; 0x21
 8017878:	d109      	bne.n	801788e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801787e:	b2db      	uxtb	r3, r3
 8017880:	461a      	mov	r2, r3
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801788a:	611a      	str	r2, [r3, #16]
 801788c:	e008      	b.n	80178a0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017892:	b2db      	uxtb	r3, r3
 8017894:	f043 0301 	orr.w	r3, r3, #1
 8017898:	b2da      	uxtb	r2, r3
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d004      	beq.n	80178b2 <I2C_Master_SB+0x92>
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d108      	bne.n	80178c4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d032      	beq.n	8017920 <I2C_Master_SB+0x100>
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d02d      	beq.n	8017920 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	685a      	ldr	r2, [r3, #4]
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80178d2:	605a      	str	r2, [r3, #4]
}
 80178d4:	e024      	b.n	8017920 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d10e      	bne.n	80178fc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	11db      	asrs	r3, r3, #7
 80178e6:	b2db      	uxtb	r3, r3
 80178e8:	f003 0306 	and.w	r3, r3, #6
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	f063 030f 	orn	r3, r3, #15
 80178f2:	b2da      	uxtb	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	611a      	str	r2, [r3, #16]
}
 80178fa:	e011      	b.n	8017920 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017900:	2b01      	cmp	r3, #1
 8017902:	d10d      	bne.n	8017920 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017908:	b29b      	uxth	r3, r3
 801790a:	11db      	asrs	r3, r3, #7
 801790c:	b2db      	uxtb	r3, r3
 801790e:	f003 0306 	and.w	r3, r3, #6
 8017912:	b2db      	uxtb	r3, r3
 8017914:	f063 030e 	orn	r3, r3, #14
 8017918:	b2da      	uxtb	r2, r3
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	611a      	str	r2, [r3, #16]
}
 8017920:	bf00      	nop
 8017922:	370c      	adds	r7, #12
 8017924:	46bd      	mov	sp, r7
 8017926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792a:	4770      	bx	lr

0801792c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 801792c:	b480      	push	{r7}
 801792e:	b083      	sub	sp, #12
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017938:	b2da      	uxtb	r2, r3
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	681b      	ldr	r3, [r3, #0]
 801793e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017944:	2b00      	cmp	r3, #0
 8017946:	d103      	bne.n	8017950 <I2C_Master_ADD10+0x24>
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801794c:	2b00      	cmp	r3, #0
 801794e:	d011      	beq.n	8017974 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017956:	2b00      	cmp	r3, #0
 8017958:	d104      	bne.n	8017964 <I2C_Master_ADD10+0x38>
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017960:	2b00      	cmp	r3, #0
 8017962:	d007      	beq.n	8017974 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	685a      	ldr	r2, [r3, #4]
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017972:	605a      	str	r2, [r3, #4]
    }
  }
}
 8017974:	bf00      	nop
 8017976:	370c      	adds	r7, #12
 8017978:	46bd      	mov	sp, r7
 801797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797e:	4770      	bx	lr

08017980 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8017980:	b480      	push	{r7}
 8017982:	b091      	sub	sp, #68	; 0x44
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801798e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017996:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801799c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	2b22      	cmp	r3, #34	; 0x22
 80179a8:	f040 8169 	bne.w	8017c7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d10f      	bne.n	80179d4 <I2C_Master_ADDR+0x54>
 80179b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80179b8:	2b40      	cmp	r3, #64	; 0x40
 80179ba:	d10b      	bne.n	80179d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80179bc:	2300      	movs	r3, #0
 80179be:	633b      	str	r3, [r7, #48]	; 0x30
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	695b      	ldr	r3, [r3, #20]
 80179c6:	633b      	str	r3, [r7, #48]	; 0x30
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	699b      	ldr	r3, [r3, #24]
 80179ce:	633b      	str	r3, [r7, #48]	; 0x30
 80179d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d2:	e160      	b.n	8017c96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d11d      	bne.n	8017a18 <I2C_Master_ADDR+0x98>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	691b      	ldr	r3, [r3, #16]
 80179e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80179e4:	d118      	bne.n	8017a18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80179e6:	2300      	movs	r3, #0
 80179e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	695b      	ldr	r3, [r3, #20]
 80179f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	699b      	ldr	r3, [r3, #24]
 80179f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	681a      	ldr	r2, [r3, #0]
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a10:	1c5a      	adds	r2, r3, #1
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	651a      	str	r2, [r3, #80]	; 0x50
 8017a16:	e13e      	b.n	8017c96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d113      	bne.n	8017a4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017a22:	2300      	movs	r3, #0
 8017a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	695b      	ldr	r3, [r3, #20]
 8017a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	699b      	ldr	r3, [r3, #24]
 8017a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	681a      	ldr	r2, [r3, #0]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a46:	601a      	str	r2, [r3, #0]
 8017a48:	e115      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	f040 808a 	bne.w	8017b6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8017a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017a5c:	d137      	bne.n	8017ace <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017a6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	685b      	ldr	r3, [r3, #4]
 8017a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017a7c:	d113      	bne.n	8017aa6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	681a      	ldr	r2, [r3, #0]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017a8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017a8e:	2300      	movs	r3, #0
 8017a90:	627b      	str	r3, [r7, #36]	; 0x24
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	695b      	ldr	r3, [r3, #20]
 8017a98:	627b      	str	r3, [r7, #36]	; 0x24
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	699b      	ldr	r3, [r3, #24]
 8017aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8017aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa4:	e0e7      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	623b      	str	r3, [r7, #32]
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	695b      	ldr	r3, [r3, #20]
 8017ab0:	623b      	str	r3, [r7, #32]
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	699b      	ldr	r3, [r3, #24]
 8017ab8:	623b      	str	r3, [r7, #32]
 8017aba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	681a      	ldr	r2, [r3, #0]
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017aca:	601a      	str	r2, [r3, #0]
 8017acc:	e0d3      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8017ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad0:	2b08      	cmp	r3, #8
 8017ad2:	d02e      	beq.n	8017b32 <I2C_Master_ADDR+0x1b2>
 8017ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad6:	2b20      	cmp	r3, #32
 8017ad8:	d02b      	beq.n	8017b32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8017ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017adc:	2b12      	cmp	r3, #18
 8017ade:	d102      	bne.n	8017ae6 <I2C_Master_ADDR+0x166>
 8017ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	d125      	bne.n	8017b32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8017ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae8:	2b04      	cmp	r3, #4
 8017aea:	d00e      	beq.n	8017b0a <I2C_Master_ADDR+0x18a>
 8017aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aee:	2b02      	cmp	r3, #2
 8017af0:	d00b      	beq.n	8017b0a <I2C_Master_ADDR+0x18a>
 8017af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af4:	2b10      	cmp	r3, #16
 8017af6:	d008      	beq.n	8017b0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	681a      	ldr	r2, [r3, #0]
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b06:	601a      	str	r2, [r3, #0]
 8017b08:	e007      	b.n	8017b1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	681a      	ldr	r2, [r3, #0]
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017b18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	61fb      	str	r3, [r7, #28]
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	695b      	ldr	r3, [r3, #20]
 8017b24:	61fb      	str	r3, [r7, #28]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	699b      	ldr	r3, [r3, #24]
 8017b2c:	61fb      	str	r3, [r7, #28]
 8017b2e:	69fb      	ldr	r3, [r7, #28]
 8017b30:	e0a1      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	681a      	ldr	r2, [r3, #0]
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017b42:	2300      	movs	r3, #0
 8017b44:	61bb      	str	r3, [r7, #24]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	695b      	ldr	r3, [r3, #20]
 8017b4c:	61bb      	str	r3, [r7, #24]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	699b      	ldr	r3, [r3, #24]
 8017b54:	61bb      	str	r3, [r7, #24]
 8017b56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017b66:	601a      	str	r2, [r3, #0]
 8017b68:	e085      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b6e:	b29b      	uxth	r3, r3
 8017b70:	2b02      	cmp	r3, #2
 8017b72:	d14d      	bne.n	8017c10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8017b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b76:	2b04      	cmp	r3, #4
 8017b78:	d016      	beq.n	8017ba8 <I2C_Master_ADDR+0x228>
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	2b02      	cmp	r3, #2
 8017b7e:	d013      	beq.n	8017ba8 <I2C_Master_ADDR+0x228>
 8017b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b82:	2b10      	cmp	r3, #16
 8017b84:	d010      	beq.n	8017ba8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	681a      	ldr	r2, [r3, #0]
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017b94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	681a      	ldr	r2, [r3, #0]
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017ba4:	601a      	str	r2, [r3, #0]
 8017ba6:	e007      	b.n	8017bb8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017bb6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	685b      	ldr	r3, [r3, #4]
 8017bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017bc6:	d117      	bne.n	8017bf8 <I2C_Master_ADDR+0x278>
 8017bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017bce:	d00b      	beq.n	8017be8 <I2C_Master_ADDR+0x268>
 8017bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd2:	2b01      	cmp	r3, #1
 8017bd4:	d008      	beq.n	8017be8 <I2C_Master_ADDR+0x268>
 8017bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd8:	2b08      	cmp	r3, #8
 8017bda:	d005      	beq.n	8017be8 <I2C_Master_ADDR+0x268>
 8017bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bde:	2b10      	cmp	r3, #16
 8017be0:	d002      	beq.n	8017be8 <I2C_Master_ADDR+0x268>
 8017be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be4:	2b20      	cmp	r3, #32
 8017be6:	d107      	bne.n	8017bf8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	685a      	ldr	r2, [r3, #4]
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017bf6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	617b      	str	r3, [r7, #20]
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	695b      	ldr	r3, [r3, #20]
 8017c02:	617b      	str	r3, [r7, #20]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	681b      	ldr	r3, [r3, #0]
 8017c08:	699b      	ldr	r3, [r3, #24]
 8017c0a:	617b      	str	r3, [r7, #20]
 8017c0c:	697b      	ldr	r3, [r7, #20]
 8017c0e:	e032      	b.n	8017c76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	681a      	ldr	r2, [r3, #0]
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8017c1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017c2e:	d117      	bne.n	8017c60 <I2C_Master_ADDR+0x2e0>
 8017c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8017c36:	d00b      	beq.n	8017c50 <I2C_Master_ADDR+0x2d0>
 8017c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c3a:	2b01      	cmp	r3, #1
 8017c3c:	d008      	beq.n	8017c50 <I2C_Master_ADDR+0x2d0>
 8017c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c40:	2b08      	cmp	r3, #8
 8017c42:	d005      	beq.n	8017c50 <I2C_Master_ADDR+0x2d0>
 8017c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c46:	2b10      	cmp	r3, #16
 8017c48:	d002      	beq.n	8017c50 <I2C_Master_ADDR+0x2d0>
 8017c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c4c:	2b20      	cmp	r3, #32
 8017c4e:	d107      	bne.n	8017c60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	685a      	ldr	r2, [r3, #4]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8017c5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017c60:	2300      	movs	r3, #0
 8017c62:	613b      	str	r3, [r7, #16]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	695b      	ldr	r3, [r3, #20]
 8017c6a:	613b      	str	r3, [r7, #16]
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	699b      	ldr	r3, [r3, #24]
 8017c72:	613b      	str	r3, [r7, #16]
 8017c74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	2200      	movs	r2, #0
 8017c7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8017c7c:	e00b      	b.n	8017c96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8017c7e:	2300      	movs	r3, #0
 8017c80:	60fb      	str	r3, [r7, #12]
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	695b      	ldr	r3, [r3, #20]
 8017c88:	60fb      	str	r3, [r7, #12]
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	699b      	ldr	r3, [r3, #24]
 8017c90:	60fb      	str	r3, [r7, #12]
 8017c92:	68fb      	ldr	r3, [r7, #12]
}
 8017c94:	e7ff      	b.n	8017c96 <I2C_Master_ADDR+0x316>
 8017c96:	bf00      	nop
 8017c98:	3744      	adds	r7, #68	; 0x44
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca0:	4770      	bx	lr

08017ca2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8017ca2:	b580      	push	{r7, lr}
 8017ca4:	b084      	sub	sp, #16
 8017ca6:	af00      	add	r7, sp, #0
 8017ca8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017cb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d02b      	beq.n	8017d14 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cc0:	781a      	ldrb	r2, [r3, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ccc:	1c5a      	adds	r2, r3, #1
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017cd6:	b29b      	uxth	r3, r3
 8017cd8:	3b01      	subs	r3, #1
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ce4:	b29b      	uxth	r3, r3
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d114      	bne.n	8017d14 <I2C_SlaveTransmit_TXE+0x72>
 8017cea:	7bfb      	ldrb	r3, [r7, #15]
 8017cec:	2b29      	cmp	r3, #41	; 0x29
 8017cee:	d111      	bne.n	8017d14 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	685a      	ldr	r2, [r3, #4]
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017cfe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	2221      	movs	r2, #33	; 0x21
 8017d04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2228      	movs	r2, #40	; 0x28
 8017d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7ff fa04 	bl	801711c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8017d14:	bf00      	nop
 8017d16:	3710      	adds	r7, #16
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8017d1c:	b480      	push	{r7}
 8017d1e:	b083      	sub	sp, #12
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d28:	b29b      	uxth	r3, r3
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d011      	beq.n	8017d52 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d32:	781a      	ldrb	r2, [r3, #0]
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	3b01      	subs	r3, #1
 8017d4c:	b29a      	uxth	r2, r3
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8017d52:	bf00      	nop
 8017d54:	370c      	adds	r7, #12
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr

08017d5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8017d5e:	b580      	push	{r7, lr}
 8017d60:	b084      	sub	sp, #16
 8017d62:	af00      	add	r7, sp, #0
 8017d64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017d6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d02c      	beq.n	8017dd2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	691a      	ldr	r2, [r3, #16]
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d82:	b2d2      	uxtb	r2, r2
 8017d84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d8a:	1c5a      	adds	r2, r3, #1
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017d94:	b29b      	uxth	r3, r3
 8017d96:	3b01      	subs	r3, #1
 8017d98:	b29a      	uxth	r2, r3
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017da2:	b29b      	uxth	r3, r3
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d114      	bne.n	8017dd2 <I2C_SlaveReceive_RXNE+0x74>
 8017da8:	7bfb      	ldrb	r3, [r7, #15]
 8017daa:	2b2a      	cmp	r3, #42	; 0x2a
 8017dac:	d111      	bne.n	8017dd2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	685a      	ldr	r2, [r3, #4]
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017dbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	2222      	movs	r2, #34	; 0x22
 8017dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	2228      	movs	r2, #40	; 0x28
 8017dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017dcc:	6878      	ldr	r0, [r7, #4]
 8017dce:	f7ff f9af 	bl	8017130 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8017dd2:	bf00      	nop
 8017dd4:	3710      	adds	r7, #16
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bd80      	pop	{r7, pc}

08017dda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8017dda:	b480      	push	{r7}
 8017ddc:	b083      	sub	sp, #12
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d012      	beq.n	8017e12 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	691a      	ldr	r2, [r3, #16]
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017df6:	b2d2      	uxtb	r2, r2
 8017df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfe:	1c5a      	adds	r2, r3, #1
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017e08:	b29b      	uxth	r3, r3
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	b29a      	uxth	r2, r3
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8017e12:	bf00      	nop
 8017e14:	370c      	adds	r7, #12
 8017e16:	46bd      	mov	sp, r7
 8017e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1c:	4770      	bx	lr

08017e1e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8017e1e:	b580      	push	{r7, lr}
 8017e20:	b084      	sub	sp, #16
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
 8017e26:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8017e38:	2b28      	cmp	r3, #40	; 0x28
 8017e3a:	d127      	bne.n	8017e8c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	685a      	ldr	r2, [r3, #4]
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017e4a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	089b      	lsrs	r3, r3, #2
 8017e50:	f003 0301 	and.w	r3, r3, #1
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d101      	bne.n	8017e5c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8017e58:	2301      	movs	r3, #1
 8017e5a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	09db      	lsrs	r3, r3, #7
 8017e60:	f003 0301 	and.w	r3, r3, #1
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d103      	bne.n	8017e70 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	68db      	ldr	r3, [r3, #12]
 8017e6c:	81bb      	strh	r3, [r7, #12]
 8017e6e:	e002      	b.n	8017e76 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	699b      	ldr	r3, [r3, #24]
 8017e74:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	2200      	movs	r2, #0
 8017e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8017e7e:	89ba      	ldrh	r2, [r7, #12]
 8017e80:	7bfb      	ldrb	r3, [r7, #15]
 8017e82:	4619      	mov	r1, r3
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f7ff f95d 	bl	8017144 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017e8a:	e008      	b.n	8017e9e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	f06f 0202 	mvn.w	r2, #2
 8017e94:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	2200      	movs	r2, #0
 8017e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8017e9e:	bf00      	nop
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
	...

08017ea8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b084      	sub	sp, #16
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017eb6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	685a      	ldr	r2, [r3, #4]
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8017ec6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8017ec8:	2300      	movs	r3, #0
 8017eca:	60bb      	str	r3, [r7, #8]
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	695b      	ldr	r3, [r3, #20]
 8017ed2:	60bb      	str	r3, [r7, #8]
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	681a      	ldr	r2, [r3, #0]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	f042 0201 	orr.w	r2, r2, #1
 8017ee2:	601a      	str	r2, [r3, #0]
 8017ee4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017ef4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	685b      	ldr	r3, [r3, #4]
 8017efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017f04:	d172      	bne.n	8017fec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017f06:	7bfb      	ldrb	r3, [r7, #15]
 8017f08:	2b22      	cmp	r3, #34	; 0x22
 8017f0a:	d002      	beq.n	8017f12 <I2C_Slave_STOPF+0x6a>
 8017f0c:	7bfb      	ldrb	r3, [r7, #15]
 8017f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8017f10:	d135      	bne.n	8017f7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	685b      	ldr	r3, [r3, #4]
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d005      	beq.n	8017f36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f2e:	f043 0204 	orr.w	r2, r3, #4
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	681b      	ldr	r3, [r3, #0]
 8017f3a:	685a      	ldr	r2, [r3, #4]
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017f44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7fd fd96 	bl	8015a7c <HAL_DMA_GetState>
 8017f50:	4603      	mov	r3, r0
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d049      	beq.n	8017fea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f5a:	4a69      	ldr	r2, [pc, #420]	; (8018100 <I2C_Slave_STOPF+0x258>)
 8017f5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7fd fbde 	bl	8015724 <HAL_DMA_Abort_IT>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d03d      	beq.n	8017fea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017f74:	687a      	ldr	r2, [r7, #4]
 8017f76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017f78:	4610      	mov	r0, r2
 8017f7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017f7c:	e035      	b.n	8017fea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	b29a      	uxth	r2, r3
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f90:	b29b      	uxth	r3, r3
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d005      	beq.n	8017fa2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f9a:	f043 0204 	orr.w	r2, r3, #4
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	685a      	ldr	r2, [r3, #4]
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f7fd fd60 	bl	8015a7c <HAL_DMA_GetState>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	2b01      	cmp	r3, #1
 8017fc0:	d014      	beq.n	8017fec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fc6:	4a4e      	ldr	r2, [pc, #312]	; (8018100 <I2C_Slave_STOPF+0x258>)
 8017fc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fd fba8 	bl	8015724 <HAL_DMA_Abort_IT>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d008      	beq.n	8017fec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017fe0:	687a      	ldr	r2, [r7, #4]
 8017fe2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017fe4:	4610      	mov	r0, r2
 8017fe6:	4798      	blx	r3
 8017fe8:	e000      	b.n	8017fec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017fea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ff0:	b29b      	uxth	r3, r3
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d03e      	beq.n	8018074 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	695b      	ldr	r3, [r3, #20]
 8017ffc:	f003 0304 	and.w	r3, r3, #4
 8018000:	2b04      	cmp	r3, #4
 8018002:	d112      	bne.n	801802a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	691a      	ldr	r2, [r3, #16]
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801800e:	b2d2      	uxtb	r2, r2
 8018010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018016:	1c5a      	adds	r2, r3, #1
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018020:	b29b      	uxth	r3, r3
 8018022:	3b01      	subs	r3, #1
 8018024:	b29a      	uxth	r2, r3
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	695b      	ldr	r3, [r3, #20]
 8018030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018034:	2b40      	cmp	r3, #64	; 0x40
 8018036:	d112      	bne.n	801805e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	691a      	ldr	r2, [r3, #16]
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018042:	b2d2      	uxtb	r2, r2
 8018044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801804a:	1c5a      	adds	r2, r3, #1
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018054:	b29b      	uxth	r3, r3
 8018056:	3b01      	subs	r3, #1
 8018058:	b29a      	uxth	r2, r3
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018062:	b29b      	uxth	r3, r3
 8018064:	2b00      	cmp	r3, #0
 8018066:	d005      	beq.n	8018074 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801806c:	f043 0204 	orr.w	r2, r3, #4
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018078:	2b00      	cmp	r3, #0
 801807a:	d003      	beq.n	8018084 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f000 f8b3 	bl	80181e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8018082:	e039      	b.n	80180f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8018084:	7bfb      	ldrb	r3, [r7, #15]
 8018086:	2b2a      	cmp	r3, #42	; 0x2a
 8018088:	d109      	bne.n	801809e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2200      	movs	r2, #0
 801808e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2228      	movs	r2, #40	; 0x28
 8018094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018098:	6878      	ldr	r0, [r7, #4]
 801809a:	f7ff f849 	bl	8017130 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80180a4:	b2db      	uxtb	r3, r3
 80180a6:	2b28      	cmp	r3, #40	; 0x28
 80180a8:	d111      	bne.n	80180ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	4a15      	ldr	r2, [pc, #84]	; (8018104 <I2C_Slave_STOPF+0x25c>)
 80180ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	2220      	movs	r2, #32
 80180ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2200      	movs	r2, #0
 80180c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f7ff f84a 	bl	8017160 <HAL_I2C_ListenCpltCallback>
}
 80180cc:	e014      	b.n	80180f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d2:	2b22      	cmp	r3, #34	; 0x22
 80180d4:	d002      	beq.n	80180dc <I2C_Slave_STOPF+0x234>
 80180d6:	7bfb      	ldrb	r3, [r7, #15]
 80180d8:	2b22      	cmp	r3, #34	; 0x22
 80180da:	d10d      	bne.n	80180f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2200      	movs	r2, #0
 80180e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2220      	movs	r2, #32
 80180e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	2200      	movs	r2, #0
 80180ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7ff f81c 	bl	8017130 <HAL_I2C_SlaveRxCpltCallback>
}
 80180f8:	bf00      	nop
 80180fa:	3710      	adds	r7, #16
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	08018671 	.word	0x08018671
 8018104:	ffff0000 	.word	0xffff0000

08018108 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b084      	sub	sp, #16
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018116:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801811c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 801811e:	68bb      	ldr	r3, [r7, #8]
 8018120:	2b08      	cmp	r3, #8
 8018122:	d002      	beq.n	801812a <I2C_Slave_AF+0x22>
 8018124:	68bb      	ldr	r3, [r7, #8]
 8018126:	2b20      	cmp	r3, #32
 8018128:	d129      	bne.n	801817e <I2C_Slave_AF+0x76>
 801812a:	7bfb      	ldrb	r3, [r7, #15]
 801812c:	2b28      	cmp	r3, #40	; 0x28
 801812e:	d126      	bne.n	801817e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	4a2c      	ldr	r2, [pc, #176]	; (80181e4 <I2C_Slave_AF+0xdc>)
 8018134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	685a      	ldr	r2, [r3, #4]
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8018144:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801814e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801815e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2200      	movs	r2, #0
 8018164:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	2220      	movs	r2, #32
 801816a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	2200      	movs	r2, #0
 8018172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f7fe fff2 	bl	8017160 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 801817c:	e02e      	b.n	80181dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 801817e:	7bfb      	ldrb	r3, [r7, #15]
 8018180:	2b21      	cmp	r3, #33	; 0x21
 8018182:	d126      	bne.n	80181d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	4a17      	ldr	r2, [pc, #92]	; (80181e4 <I2C_Slave_AF+0xdc>)
 8018188:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	2221      	movs	r2, #33	; 0x21
 801818e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2220      	movs	r2, #32
 8018194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2200      	movs	r2, #0
 801819c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	685a      	ldr	r2, [r3, #4]
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80181ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80181b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	681a      	ldr	r2, [r3, #0]
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80181c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f7fe ffa6 	bl	801711c <HAL_I2C_SlaveTxCpltCallback>
}
 80181d0:	e004      	b.n	80181dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80181da:	615a      	str	r2, [r3, #20]
}
 80181dc:	bf00      	nop
 80181de:	3710      	adds	r7, #16
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	ffff0000 	.word	0xffff0000

080181e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b084      	sub	sp, #16
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80181f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80181fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8018200:	7bbb      	ldrb	r3, [r7, #14]
 8018202:	2b10      	cmp	r3, #16
 8018204:	d002      	beq.n	801820c <I2C_ITError+0x24>
 8018206:	7bbb      	ldrb	r3, [r7, #14]
 8018208:	2b40      	cmp	r3, #64	; 0x40
 801820a:	d10a      	bne.n	8018222 <I2C_ITError+0x3a>
 801820c:	7bfb      	ldrb	r3, [r7, #15]
 801820e:	2b22      	cmp	r3, #34	; 0x22
 8018210:	d107      	bne.n	8018222 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	681a      	ldr	r2, [r3, #0]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018220:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8018222:	7bfb      	ldrb	r3, [r7, #15]
 8018224:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018228:	2b28      	cmp	r3, #40	; 0x28
 801822a:	d107      	bne.n	801823c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2200      	movs	r2, #0
 8018230:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	2228      	movs	r2, #40	; 0x28
 8018236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801823a:	e015      	b.n	8018268 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801824a:	d00a      	beq.n	8018262 <I2C_ITError+0x7a>
 801824c:	7bfb      	ldrb	r3, [r7, #15]
 801824e:	2b60      	cmp	r3, #96	; 0x60
 8018250:	d007      	beq.n	8018262 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	2220      	movs	r2, #32
 8018256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2200      	movs	r2, #0
 801825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2200      	movs	r2, #0
 8018266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018276:	d162      	bne.n	801833e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	685a      	ldr	r2, [r3, #4]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018286:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801828c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018290:	b2db      	uxtb	r3, r3
 8018292:	2b01      	cmp	r3, #1
 8018294:	d020      	beq.n	80182d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801829a:	4a6a      	ldr	r2, [pc, #424]	; (8018444 <I2C_ITError+0x25c>)
 801829c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fd fa3e 	bl	8015724 <HAL_DMA_Abort_IT>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	f000 8089 	beq.w	80183c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	681a      	ldr	r2, [r3, #0]
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	f022 0201 	bic.w	r2, r2, #1
 80182be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2220      	movs	r2, #32
 80182c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80182d2:	4610      	mov	r0, r2
 80182d4:	4798      	blx	r3
 80182d6:	e074      	b.n	80183c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182dc:	4a59      	ldr	r2, [pc, #356]	; (8018444 <I2C_ITError+0x25c>)
 80182de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7fd fa1d 	bl	8015724 <HAL_DMA_Abort_IT>
 80182ea:	4603      	mov	r3, r0
 80182ec:	2b00      	cmp	r3, #0
 80182ee:	d068      	beq.n	80183c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	695b      	ldr	r3, [r3, #20]
 80182f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80182fa:	2b40      	cmp	r3, #64	; 0x40
 80182fc:	d10b      	bne.n	8018316 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	691a      	ldr	r2, [r3, #16]
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018308:	b2d2      	uxtb	r2, r2
 801830a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018310:	1c5a      	adds	r2, r3, #1
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	681a      	ldr	r2, [r3, #0]
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	f022 0201 	bic.w	r2, r2, #1
 8018324:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	2220      	movs	r2, #32
 801832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018334:	687a      	ldr	r2, [r7, #4]
 8018336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8018338:	4610      	mov	r0, r2
 801833a:	4798      	blx	r3
 801833c:	e041      	b.n	80183c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018344:	b2db      	uxtb	r3, r3
 8018346:	2b60      	cmp	r3, #96	; 0x60
 8018348:	d125      	bne.n	8018396 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	2220      	movs	r2, #32
 801834e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	2200      	movs	r2, #0
 8018356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	695b      	ldr	r3, [r3, #20]
 801835e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018362:	2b40      	cmp	r3, #64	; 0x40
 8018364:	d10b      	bne.n	801837e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	691a      	ldr	r2, [r3, #16]
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018370:	b2d2      	uxtb	r2, r2
 8018372:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018378:	1c5a      	adds	r2, r3, #1
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	681a      	ldr	r2, [r3, #0]
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	f022 0201 	bic.w	r2, r2, #1
 801838c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801838e:	6878      	ldr	r0, [r7, #4]
 8018390:	f7fe ff0e 	bl	80171b0 <HAL_I2C_AbortCpltCallback>
 8018394:	e015      	b.n	80183c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	695b      	ldr	r3, [r3, #20]
 801839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80183a0:	2b40      	cmp	r3, #64	; 0x40
 80183a2:	d10b      	bne.n	80183bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	691a      	ldr	r2, [r3, #16]
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183ae:	b2d2      	uxtb	r2, r2
 80183b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183b6:	1c5a      	adds	r2, r3, #1
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80183bc:	6878      	ldr	r0, [r7, #4]
 80183be:	f7fe feed 	bl	801719c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80183c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	f003 0301 	and.w	r3, r3, #1
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d10e      	bne.n	80183f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d109      	bne.n	80183f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d104      	bne.n	80183f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80183e6:	68bb      	ldr	r3, [r7, #8]
 80183e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d007      	beq.n	8018400 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	685a      	ldr	r2, [r3, #4]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80183fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018406:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801840c:	f003 0304 	and.w	r3, r3, #4
 8018410:	2b04      	cmp	r3, #4
 8018412:	d113      	bne.n	801843c <I2C_ITError+0x254>
 8018414:	7bfb      	ldrb	r3, [r7, #15]
 8018416:	2b28      	cmp	r3, #40	; 0x28
 8018418:	d110      	bne.n	801843c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	4a0a      	ldr	r2, [pc, #40]	; (8018448 <I2C_ITError+0x260>)
 801841e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	2200      	movs	r2, #0
 8018424:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	2220      	movs	r2, #32
 801842a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	2200      	movs	r2, #0
 8018432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f7fe fe92 	bl	8017160 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801843c:	bf00      	nop
 801843e:	3710      	adds	r7, #16
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}
 8018444:	08018671 	.word	0x08018671
 8018448:	ffff0000 	.word	0xffff0000

0801844c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b086      	sub	sp, #24
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018458:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018460:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8018468:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801846e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	685a      	ldr	r2, [r3, #4]
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	681b      	ldr	r3, [r3, #0]
 801847a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801847e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018480:	697b      	ldr	r3, [r7, #20]
 8018482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018484:	2b00      	cmp	r3, #0
 8018486:	d003      	beq.n	8018490 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801848c:	2200      	movs	r2, #0
 801848e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018494:	2b00      	cmp	r3, #0
 8018496:	d003      	beq.n	80184a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801849c:	2200      	movs	r2, #0
 801849e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80184a0:	7cfb      	ldrb	r3, [r7, #19]
 80184a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80184a6:	2b21      	cmp	r3, #33	; 0x21
 80184a8:	d007      	beq.n	80184ba <I2C_DMAXferCplt+0x6e>
 80184aa:	7cfb      	ldrb	r3, [r7, #19]
 80184ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80184b0:	2b22      	cmp	r3, #34	; 0x22
 80184b2:	d131      	bne.n	8018518 <I2C_DMAXferCplt+0xcc>
 80184b4:	7cbb      	ldrb	r3, [r7, #18]
 80184b6:	2b20      	cmp	r3, #32
 80184b8:	d12e      	bne.n	8018518 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	685a      	ldr	r2, [r3, #4]
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80184c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	2200      	movs	r2, #0
 80184ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80184d0:	7cfb      	ldrb	r3, [r7, #19]
 80184d2:	2b29      	cmp	r3, #41	; 0x29
 80184d4:	d10a      	bne.n	80184ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80184d6:	697b      	ldr	r3, [r7, #20]
 80184d8:	2221      	movs	r2, #33	; 0x21
 80184da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	2228      	movs	r2, #40	; 0x28
 80184e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80184e4:	6978      	ldr	r0, [r7, #20]
 80184e6:	f7fe fe19 	bl	801711c <HAL_I2C_SlaveTxCpltCallback>
 80184ea:	e00c      	b.n	8018506 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80184ec:	7cfb      	ldrb	r3, [r7, #19]
 80184ee:	2b2a      	cmp	r3, #42	; 0x2a
 80184f0:	d109      	bne.n	8018506 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80184f2:	697b      	ldr	r3, [r7, #20]
 80184f4:	2222      	movs	r2, #34	; 0x22
 80184f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	2228      	movs	r2, #40	; 0x28
 80184fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8018500:	6978      	ldr	r0, [r7, #20]
 8018502:	f7fe fe15 	bl	8017130 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	685a      	ldr	r2, [r3, #4]
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8018514:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8018516:	e06a      	b.n	80185ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801851e:	b2db      	uxtb	r3, r3
 8018520:	2b00      	cmp	r3, #0
 8018522:	d064      	beq.n	80185ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8018524:	697b      	ldr	r3, [r7, #20]
 8018526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018528:	b29b      	uxth	r3, r3
 801852a:	2b01      	cmp	r3, #1
 801852c:	d107      	bne.n	801853e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	681a      	ldr	r2, [r3, #0]
 8018534:	697b      	ldr	r3, [r7, #20]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801853c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	685a      	ldr	r2, [r3, #4]
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801854c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8018554:	d009      	beq.n	801856a <I2C_DMAXferCplt+0x11e>
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	2b08      	cmp	r3, #8
 801855a:	d006      	beq.n	801856a <I2C_DMAXferCplt+0x11e>
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018562:	d002      	beq.n	801856a <I2C_DMAXferCplt+0x11e>
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	2b20      	cmp	r3, #32
 8018568:	d107      	bne.n	801857a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801856a:	697b      	ldr	r3, [r7, #20]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	681a      	ldr	r2, [r3, #0]
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018578:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801857a:	697b      	ldr	r3, [r7, #20]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	685a      	ldr	r2, [r3, #4]
 8018580:	697b      	ldr	r3, [r7, #20]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018588:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	685a      	ldr	r2, [r3, #4]
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8018598:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	2200      	movs	r2, #0
 801859e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80185a0:	697b      	ldr	r3, [r7, #20]
 80185a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d003      	beq.n	80185b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80185a8:	6978      	ldr	r0, [r7, #20]
 80185aa:	f7fe fdf7 	bl	801719c <HAL_I2C_ErrorCallback>
}
 80185ae:	e01e      	b.n	80185ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80185b0:	697b      	ldr	r3, [r7, #20]
 80185b2:	2220      	movs	r2, #32
 80185b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	2b40      	cmp	r3, #64	; 0x40
 80185c2:	d10a      	bne.n	80185da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	2200      	movs	r2, #0
 80185c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	2200      	movs	r2, #0
 80185d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80185d2:	6978      	ldr	r0, [r7, #20]
 80185d4:	f7fe fdd8 	bl	8017188 <HAL_I2C_MemRxCpltCallback>
}
 80185d8:	e009      	b.n	80185ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80185da:	697b      	ldr	r3, [r7, #20]
 80185dc:	2200      	movs	r2, #0
 80185de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80185e2:	697b      	ldr	r3, [r7, #20]
 80185e4:	2212      	movs	r2, #18
 80185e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80185e8:	6978      	ldr	r0, [r7, #20]
 80185ea:	f7f6 fae9 	bl	800ebc0 <HAL_I2C_MasterRxCpltCallback>
}
 80185ee:	bf00      	nop
 80185f0:	3718      	adds	r7, #24
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}

080185f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80185f6:	b580      	push	{r7, lr}
 80185f8:	b084      	sub	sp, #16
 80185fa:	af00      	add	r7, sp, #0
 80185fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018602:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018608:	2b00      	cmp	r3, #0
 801860a:	d003      	beq.n	8018614 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018610:	2200      	movs	r2, #0
 8018612:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018618:	2b00      	cmp	r3, #0
 801861a:	d003      	beq.n	8018624 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018620:	2200      	movs	r2, #0
 8018622:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8018624:	6878      	ldr	r0, [r7, #4]
 8018626:	f7fd fa37 	bl	8015a98 <HAL_DMA_GetError>
 801862a:	4603      	mov	r3, r0
 801862c:	2b02      	cmp	r3, #2
 801862e:	d01b      	beq.n	8018668 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	681a      	ldr	r2, [r3, #0]
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801863e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	2200      	movs	r2, #0
 8018644:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	2220      	movs	r2, #32
 801864a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	2200      	movs	r2, #0
 8018652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801865a:	f043 0210 	orr.w	r2, r3, #16
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8018662:	68f8      	ldr	r0, [r7, #12]
 8018664:	f7fe fd9a 	bl	801719c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018668:	bf00      	nop
 801866a:	3710      	adds	r7, #16
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b086      	sub	sp, #24
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018678:	2300      	movs	r3, #0
 801867a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018680:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018688:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801868a:	4b4b      	ldr	r3, [pc, #300]	; (80187b8 <I2C_DMAAbort+0x148>)
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	08db      	lsrs	r3, r3, #3
 8018690:	4a4a      	ldr	r2, [pc, #296]	; (80187bc <I2C_DMAAbort+0x14c>)
 8018692:	fba2 2303 	umull	r2, r3, r2, r3
 8018696:	0a1a      	lsrs	r2, r3, #8
 8018698:	4613      	mov	r3, r2
 801869a:	009b      	lsls	r3, r3, #2
 801869c:	4413      	add	r3, r2
 801869e:	00da      	lsls	r2, r3, #3
 80186a0:	1ad3      	subs	r3, r2, r3
 80186a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d106      	bne.n	80186b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80186ae:	f043 0220 	orr.w	r2, r3, #32
 80186b2:	697b      	ldr	r3, [r7, #20]
 80186b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80186b6:	e00a      	b.n	80186ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	3b01      	subs	r3, #1
 80186bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80186be:	697b      	ldr	r3, [r7, #20]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80186c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186cc:	d0ea      	beq.n	80186a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80186ce:	697b      	ldr	r3, [r7, #20]
 80186d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d003      	beq.n	80186de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186da:	2200      	movs	r2, #0
 80186dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80186de:	697b      	ldr	r3, [r7, #20]
 80186e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d003      	beq.n	80186ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186ea:	2200      	movs	r2, #0
 80186ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80186ee:	697b      	ldr	r3, [r7, #20]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	681a      	ldr	r2, [r3, #0]
 80186f4:	697b      	ldr	r3, [r7, #20]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80186fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80186fe:	697b      	ldr	r3, [r7, #20]
 8018700:	2200      	movs	r2, #0
 8018702:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018708:	2b00      	cmp	r3, #0
 801870a:	d003      	beq.n	8018714 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018710:	2200      	movs	r2, #0
 8018712:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018718:	2b00      	cmp	r3, #0
 801871a:	d003      	beq.n	8018724 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018720:	2200      	movs	r2, #0
 8018722:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8018724:	697b      	ldr	r3, [r7, #20]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	f022 0201 	bic.w	r2, r2, #1
 8018732:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018734:	697b      	ldr	r3, [r7, #20]
 8018736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801873a:	b2db      	uxtb	r3, r3
 801873c:	2b60      	cmp	r3, #96	; 0x60
 801873e:	d10e      	bne.n	801875e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8018740:	697b      	ldr	r3, [r7, #20]
 8018742:	2220      	movs	r2, #32
 8018744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018748:	697b      	ldr	r3, [r7, #20]
 801874a:	2200      	movs	r2, #0
 801874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8018750:	697b      	ldr	r3, [r7, #20]
 8018752:	2200      	movs	r2, #0
 8018754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8018756:	6978      	ldr	r0, [r7, #20]
 8018758:	f7fe fd2a 	bl	80171b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801875c:	e027      	b.n	80187ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801875e:	7cfb      	ldrb	r3, [r7, #19]
 8018760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8018764:	2b28      	cmp	r3, #40	; 0x28
 8018766:	d117      	bne.n	8018798 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	681a      	ldr	r2, [r3, #0]
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	f042 0201 	orr.w	r2, r2, #1
 8018776:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8018778:	697b      	ldr	r3, [r7, #20]
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	681a      	ldr	r2, [r3, #0]
 801877e:	697b      	ldr	r3, [r7, #20]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8018786:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	2200      	movs	r2, #0
 801878c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801878e:	697b      	ldr	r3, [r7, #20]
 8018790:	2228      	movs	r2, #40	; 0x28
 8018792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8018796:	e007      	b.n	80187a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	2220      	movs	r2, #32
 801879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	2200      	movs	r2, #0
 80187a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80187a8:	6978      	ldr	r0, [r7, #20]
 80187aa:	f7fe fcf7 	bl	801719c <HAL_I2C_ErrorCallback>
}
 80187ae:	bf00      	nop
 80187b0:	3718      	adds	r7, #24
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}
 80187b6:	bf00      	nop
 80187b8:	20000638 	.word	0x20000638
 80187bc:	14f8b589 	.word	0x14f8b589

080187c0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80187c0:	b480      	push	{r7}
 80187c2:	b085      	sub	sp, #20
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80187c8:	2300      	movs	r3, #0
 80187ca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80187cc:	4b13      	ldr	r3, [pc, #76]	; (801881c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	08db      	lsrs	r3, r3, #3
 80187d2:	4a13      	ldr	r2, [pc, #76]	; (8018820 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80187d4:	fba2 2303 	umull	r2, r3, r2, r3
 80187d8:	0a1a      	lsrs	r2, r3, #8
 80187da:	4613      	mov	r3, r2
 80187dc:	009b      	lsls	r3, r3, #2
 80187de:	4413      	add	r3, r2
 80187e0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	3b01      	subs	r3, #1
 80187e6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d107      	bne.n	80187fe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187f2:	f043 0220 	orr.w	r2, r3, #32
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80187fa:	2301      	movs	r3, #1
 80187fc:	e008      	b.n	8018810 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801880c:	d0e9      	beq.n	80187e2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801880e:	2300      	movs	r3, #0
}
 8018810:	4618      	mov	r0, r3
 8018812:	3714      	adds	r7, #20
 8018814:	46bd      	mov	sp, r7
 8018816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801881a:	4770      	bx	lr
 801881c:	20000638 	.word	0x20000638
 8018820:	14f8b589 	.word	0x14f8b589

08018824 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8018824:	b480      	push	{r7}
 8018826:	b083      	sub	sp, #12
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018830:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8018834:	d103      	bne.n	801883e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2201      	movs	r2, #1
 801883a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 801883c:	e007      	b.n	801884e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018842:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8018846:	d102      	bne.n	801884e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2208      	movs	r2, #8
 801884c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801884e:	bf00      	nop
 8018850:	370c      	adds	r7, #12
 8018852:	46bd      	mov	sp, r7
 8018854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018858:	4770      	bx	lr
	...

0801885c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b086      	sub	sp, #24
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d101      	bne.n	801886e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801886a:	2301      	movs	r3, #1
 801886c:	e25b      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	f003 0301 	and.w	r3, r3, #1
 8018876:	2b00      	cmp	r3, #0
 8018878:	d075      	beq.n	8018966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801887a:	4ba3      	ldr	r3, [pc, #652]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 801887c:	689b      	ldr	r3, [r3, #8]
 801887e:	f003 030c 	and.w	r3, r3, #12
 8018882:	2b04      	cmp	r3, #4
 8018884:	d00c      	beq.n	80188a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018886:	4ba0      	ldr	r3, [pc, #640]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018888:	689b      	ldr	r3, [r3, #8]
 801888a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801888e:	2b08      	cmp	r3, #8
 8018890:	d112      	bne.n	80188b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018892:	4b9d      	ldr	r3, [pc, #628]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018894:	685b      	ldr	r3, [r3, #4]
 8018896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801889a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801889e:	d10b      	bne.n	80188b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80188a0:	4b99      	ldr	r3, [pc, #612]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d05b      	beq.n	8018964 <HAL_RCC_OscConfig+0x108>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	685b      	ldr	r3, [r3, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d157      	bne.n	8018964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80188b4:	2301      	movs	r3, #1
 80188b6:	e236      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	685b      	ldr	r3, [r3, #4]
 80188bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80188c0:	d106      	bne.n	80188d0 <HAL_RCC_OscConfig+0x74>
 80188c2:	4b91      	ldr	r3, [pc, #580]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	4a90      	ldr	r2, [pc, #576]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188cc:	6013      	str	r3, [r2, #0]
 80188ce:	e01d      	b.n	801890c <HAL_RCC_OscConfig+0xb0>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80188d8:	d10c      	bne.n	80188f4 <HAL_RCC_OscConfig+0x98>
 80188da:	4b8b      	ldr	r3, [pc, #556]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	4a8a      	ldr	r2, [pc, #552]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80188e4:	6013      	str	r3, [r2, #0]
 80188e6:	4b88      	ldr	r3, [pc, #544]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	4a87      	ldr	r2, [pc, #540]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188f0:	6013      	str	r3, [r2, #0]
 80188f2:	e00b      	b.n	801890c <HAL_RCC_OscConfig+0xb0>
 80188f4:	4b84      	ldr	r3, [pc, #528]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	4a83      	ldr	r2, [pc, #524]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80188fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80188fe:	6013      	str	r3, [r2, #0]
 8018900:	4b81      	ldr	r3, [pc, #516]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	4a80      	ldr	r2, [pc, #512]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801890a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	685b      	ldr	r3, [r3, #4]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d013      	beq.n	801893c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018914:	f7fb f9b0 	bl	8013c78 <HAL_GetTick>
 8018918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801891a:	e008      	b.n	801892e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801891c:	f7fb f9ac 	bl	8013c78 <HAL_GetTick>
 8018920:	4602      	mov	r2, r0
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	2b64      	cmp	r3, #100	; 0x64
 8018928:	d901      	bls.n	801892e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801892a:	2303      	movs	r3, #3
 801892c:	e1fb      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801892e:	4b76      	ldr	r3, [pc, #472]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018936:	2b00      	cmp	r3, #0
 8018938:	d0f0      	beq.n	801891c <HAL_RCC_OscConfig+0xc0>
 801893a:	e014      	b.n	8018966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801893c:	f7fb f99c 	bl	8013c78 <HAL_GetTick>
 8018940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018942:	e008      	b.n	8018956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8018944:	f7fb f998 	bl	8013c78 <HAL_GetTick>
 8018948:	4602      	mov	r2, r0
 801894a:	693b      	ldr	r3, [r7, #16]
 801894c:	1ad3      	subs	r3, r2, r3
 801894e:	2b64      	cmp	r3, #100	; 0x64
 8018950:	d901      	bls.n	8018956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018952:	2303      	movs	r3, #3
 8018954:	e1e7      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018956:	4b6c      	ldr	r3, [pc, #432]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801895e:	2b00      	cmp	r3, #0
 8018960:	d1f0      	bne.n	8018944 <HAL_RCC_OscConfig+0xe8>
 8018962:	e000      	b.n	8018966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	f003 0302 	and.w	r3, r3, #2
 801896e:	2b00      	cmp	r3, #0
 8018970:	d063      	beq.n	8018a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8018972:	4b65      	ldr	r3, [pc, #404]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018974:	689b      	ldr	r3, [r3, #8]
 8018976:	f003 030c 	and.w	r3, r3, #12
 801897a:	2b00      	cmp	r3, #0
 801897c:	d00b      	beq.n	8018996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801897e:	4b62      	ldr	r3, [pc, #392]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018980:	689b      	ldr	r3, [r3, #8]
 8018982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8018986:	2b08      	cmp	r3, #8
 8018988:	d11c      	bne.n	80189c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801898a:	4b5f      	ldr	r3, [pc, #380]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 801898c:	685b      	ldr	r3, [r3, #4]
 801898e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018992:	2b00      	cmp	r3, #0
 8018994:	d116      	bne.n	80189c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018996:	4b5c      	ldr	r3, [pc, #368]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	f003 0302 	and.w	r3, r3, #2
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d005      	beq.n	80189ae <HAL_RCC_OscConfig+0x152>
 80189a2:	687b      	ldr	r3, [r7, #4]
 80189a4:	68db      	ldr	r3, [r3, #12]
 80189a6:	2b01      	cmp	r3, #1
 80189a8:	d001      	beq.n	80189ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80189aa:	2301      	movs	r3, #1
 80189ac:	e1bb      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80189ae:	4b56      	ldr	r3, [pc, #344]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	691b      	ldr	r3, [r3, #16]
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	4952      	ldr	r1, [pc, #328]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80189be:	4313      	orrs	r3, r2
 80189c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80189c2:	e03a      	b.n	8018a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	68db      	ldr	r3, [r3, #12]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d020      	beq.n	8018a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80189cc:	4b4f      	ldr	r3, [pc, #316]	; (8018b0c <HAL_RCC_OscConfig+0x2b0>)
 80189ce:	2201      	movs	r2, #1
 80189d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80189d2:	f7fb f951 	bl	8013c78 <HAL_GetTick>
 80189d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80189d8:	e008      	b.n	80189ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80189da:	f7fb f94d 	bl	8013c78 <HAL_GetTick>
 80189de:	4602      	mov	r2, r0
 80189e0:	693b      	ldr	r3, [r7, #16]
 80189e2:	1ad3      	subs	r3, r2, r3
 80189e4:	2b02      	cmp	r3, #2
 80189e6:	d901      	bls.n	80189ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80189e8:	2303      	movs	r3, #3
 80189ea:	e19c      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80189ec:	4b46      	ldr	r3, [pc, #280]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	f003 0302 	and.w	r3, r3, #2
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d0f0      	beq.n	80189da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80189f8:	4b43      	ldr	r3, [pc, #268]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	691b      	ldr	r3, [r3, #16]
 8018a04:	00db      	lsls	r3, r3, #3
 8018a06:	4940      	ldr	r1, [pc, #256]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018a08:	4313      	orrs	r3, r2
 8018a0a:	600b      	str	r3, [r1, #0]
 8018a0c:	e015      	b.n	8018a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018a0e:	4b3f      	ldr	r3, [pc, #252]	; (8018b0c <HAL_RCC_OscConfig+0x2b0>)
 8018a10:	2200      	movs	r2, #0
 8018a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a14:	f7fb f930 	bl	8013c78 <HAL_GetTick>
 8018a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018a1a:	e008      	b.n	8018a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8018a1c:	f7fb f92c 	bl	8013c78 <HAL_GetTick>
 8018a20:	4602      	mov	r2, r0
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	1ad3      	subs	r3, r2, r3
 8018a26:	2b02      	cmp	r3, #2
 8018a28:	d901      	bls.n	8018a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8018a2a:	2303      	movs	r3, #3
 8018a2c:	e17b      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018a2e:	4b36      	ldr	r3, [pc, #216]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	f003 0302 	and.w	r3, r3, #2
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d1f0      	bne.n	8018a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	f003 0308 	and.w	r3, r3, #8
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d030      	beq.n	8018aa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	695b      	ldr	r3, [r3, #20]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d016      	beq.n	8018a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018a4e:	4b30      	ldr	r3, [pc, #192]	; (8018b10 <HAL_RCC_OscConfig+0x2b4>)
 8018a50:	2201      	movs	r2, #1
 8018a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018a54:	f7fb f910 	bl	8013c78 <HAL_GetTick>
 8018a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018a5a:	e008      	b.n	8018a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018a5c:	f7fb f90c 	bl	8013c78 <HAL_GetTick>
 8018a60:	4602      	mov	r2, r0
 8018a62:	693b      	ldr	r3, [r7, #16]
 8018a64:	1ad3      	subs	r3, r2, r3
 8018a66:	2b02      	cmp	r3, #2
 8018a68:	d901      	bls.n	8018a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8018a6a:	2303      	movs	r3, #3
 8018a6c:	e15b      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018a6e:	4b26      	ldr	r3, [pc, #152]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a72:	f003 0302 	and.w	r3, r3, #2
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d0f0      	beq.n	8018a5c <HAL_RCC_OscConfig+0x200>
 8018a7a:	e015      	b.n	8018aa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018a7c:	4b24      	ldr	r3, [pc, #144]	; (8018b10 <HAL_RCC_OscConfig+0x2b4>)
 8018a7e:	2200      	movs	r2, #0
 8018a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018a82:	f7fb f8f9 	bl	8013c78 <HAL_GetTick>
 8018a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a88:	e008      	b.n	8018a9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8018a8a:	f7fb f8f5 	bl	8013c78 <HAL_GetTick>
 8018a8e:	4602      	mov	r2, r0
 8018a90:	693b      	ldr	r3, [r7, #16]
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	2b02      	cmp	r3, #2
 8018a96:	d901      	bls.n	8018a9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8018a98:	2303      	movs	r3, #3
 8018a9a:	e144      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018a9c:	4b1a      	ldr	r3, [pc, #104]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018aa0:	f003 0302 	and.w	r3, r3, #2
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d1f0      	bne.n	8018a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	f003 0304 	and.w	r3, r3, #4
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	f000 80a0 	beq.w	8018bf6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018aba:	4b13      	ldr	r3, [pc, #76]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d10f      	bne.n	8018ae6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	60bb      	str	r3, [r7, #8]
 8018aca:	4b0f      	ldr	r3, [pc, #60]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ace:	4a0e      	ldr	r2, [pc, #56]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8018ad6:	4b0c      	ldr	r3, [pc, #48]	; (8018b08 <HAL_RCC_OscConfig+0x2ac>)
 8018ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018ade:	60bb      	str	r3, [r7, #8]
 8018ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018ae6:	4b0b      	ldr	r3, [pc, #44]	; (8018b14 <HAL_RCC_OscConfig+0x2b8>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d121      	bne.n	8018b36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8018af2:	4b08      	ldr	r3, [pc, #32]	; (8018b14 <HAL_RCC_OscConfig+0x2b8>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	4a07      	ldr	r2, [pc, #28]	; (8018b14 <HAL_RCC_OscConfig+0x2b8>)
 8018af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018afc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018afe:	f7fb f8bb 	bl	8013c78 <HAL_GetTick>
 8018b02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018b04:	e011      	b.n	8018b2a <HAL_RCC_OscConfig+0x2ce>
 8018b06:	bf00      	nop
 8018b08:	40023800 	.word	0x40023800
 8018b0c:	42470000 	.word	0x42470000
 8018b10:	42470e80 	.word	0x42470e80
 8018b14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018b18:	f7fb f8ae 	bl	8013c78 <HAL_GetTick>
 8018b1c:	4602      	mov	r2, r0
 8018b1e:	693b      	ldr	r3, [r7, #16]
 8018b20:	1ad3      	subs	r3, r2, r3
 8018b22:	2b02      	cmp	r3, #2
 8018b24:	d901      	bls.n	8018b2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8018b26:	2303      	movs	r3, #3
 8018b28:	e0fd      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8018b2a:	4b81      	ldr	r3, [pc, #516]	; (8018d30 <HAL_RCC_OscConfig+0x4d4>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d0f0      	beq.n	8018b18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	689b      	ldr	r3, [r3, #8]
 8018b3a:	2b01      	cmp	r3, #1
 8018b3c:	d106      	bne.n	8018b4c <HAL_RCC_OscConfig+0x2f0>
 8018b3e:	4b7d      	ldr	r3, [pc, #500]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b42:	4a7c      	ldr	r2, [pc, #496]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b44:	f043 0301 	orr.w	r3, r3, #1
 8018b48:	6713      	str	r3, [r2, #112]	; 0x70
 8018b4a:	e01c      	b.n	8018b86 <HAL_RCC_OscConfig+0x32a>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	689b      	ldr	r3, [r3, #8]
 8018b50:	2b05      	cmp	r3, #5
 8018b52:	d10c      	bne.n	8018b6e <HAL_RCC_OscConfig+0x312>
 8018b54:	4b77      	ldr	r3, [pc, #476]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b58:	4a76      	ldr	r2, [pc, #472]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b5a:	f043 0304 	orr.w	r3, r3, #4
 8018b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8018b60:	4b74      	ldr	r3, [pc, #464]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b64:	4a73      	ldr	r2, [pc, #460]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b66:	f043 0301 	orr.w	r3, r3, #1
 8018b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8018b6c:	e00b      	b.n	8018b86 <HAL_RCC_OscConfig+0x32a>
 8018b6e:	4b71      	ldr	r3, [pc, #452]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b72:	4a70      	ldr	r2, [pc, #448]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b74:	f023 0301 	bic.w	r3, r3, #1
 8018b78:	6713      	str	r3, [r2, #112]	; 0x70
 8018b7a:	4b6e      	ldr	r3, [pc, #440]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b7e:	4a6d      	ldr	r2, [pc, #436]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018b80:	f023 0304 	bic.w	r3, r3, #4
 8018b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	689b      	ldr	r3, [r3, #8]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d015      	beq.n	8018bba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018b8e:	f7fb f873 	bl	8013c78 <HAL_GetTick>
 8018b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018b94:	e00a      	b.n	8018bac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018b96:	f7fb f86f 	bl	8013c78 <HAL_GetTick>
 8018b9a:	4602      	mov	r2, r0
 8018b9c:	693b      	ldr	r3, [r7, #16]
 8018b9e:	1ad3      	subs	r3, r2, r3
 8018ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8018ba4:	4293      	cmp	r3, r2
 8018ba6:	d901      	bls.n	8018bac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8018ba8:	2303      	movs	r3, #3
 8018baa:	e0bc      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018bac:	4b61      	ldr	r3, [pc, #388]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bb0:	f003 0302 	and.w	r3, r3, #2
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d0ee      	beq.n	8018b96 <HAL_RCC_OscConfig+0x33a>
 8018bb8:	e014      	b.n	8018be4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8018bba:	f7fb f85d 	bl	8013c78 <HAL_GetTick>
 8018bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018bc0:	e00a      	b.n	8018bd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8018bc2:	f7fb f859 	bl	8013c78 <HAL_GetTick>
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	693b      	ldr	r3, [r7, #16]
 8018bca:	1ad3      	subs	r3, r2, r3
 8018bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8018bd0:	4293      	cmp	r3, r2
 8018bd2:	d901      	bls.n	8018bd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8018bd4:	2303      	movs	r3, #3
 8018bd6:	e0a6      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018bd8:	4b56      	ldr	r3, [pc, #344]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018bdc:	f003 0302 	and.w	r3, r3, #2
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d1ee      	bne.n	8018bc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8018be4:	7dfb      	ldrb	r3, [r7, #23]
 8018be6:	2b01      	cmp	r3, #1
 8018be8:	d105      	bne.n	8018bf6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018bea:	4b52      	ldr	r3, [pc, #328]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bee:	4a51      	ldr	r2, [pc, #324]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018bf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	699b      	ldr	r3, [r3, #24]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	f000 8092 	beq.w	8018d24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8018c00:	4b4c      	ldr	r3, [pc, #304]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018c02:	689b      	ldr	r3, [r3, #8]
 8018c04:	f003 030c 	and.w	r3, r3, #12
 8018c08:	2b08      	cmp	r3, #8
 8018c0a:	d05c      	beq.n	8018cc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	699b      	ldr	r3, [r3, #24]
 8018c10:	2b02      	cmp	r3, #2
 8018c12:	d141      	bne.n	8018c98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018c14:	4b48      	ldr	r3, [pc, #288]	; (8018d38 <HAL_RCC_OscConfig+0x4dc>)
 8018c16:	2200      	movs	r2, #0
 8018c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c1a:	f7fb f82d 	bl	8013c78 <HAL_GetTick>
 8018c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c20:	e008      	b.n	8018c34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018c22:	f7fb f829 	bl	8013c78 <HAL_GetTick>
 8018c26:	4602      	mov	r2, r0
 8018c28:	693b      	ldr	r3, [r7, #16]
 8018c2a:	1ad3      	subs	r3, r2, r3
 8018c2c:	2b02      	cmp	r3, #2
 8018c2e:	d901      	bls.n	8018c34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8018c30:	2303      	movs	r3, #3
 8018c32:	e078      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018c34:	4b3f      	ldr	r3, [pc, #252]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d1f0      	bne.n	8018c22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	69da      	ldr	r2, [r3, #28]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6a1b      	ldr	r3, [r3, #32]
 8018c48:	431a      	orrs	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c4e:	019b      	lsls	r3, r3, #6
 8018c50:	431a      	orrs	r2, r3
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c56:	085b      	lsrs	r3, r3, #1
 8018c58:	3b01      	subs	r3, #1
 8018c5a:	041b      	lsls	r3, r3, #16
 8018c5c:	431a      	orrs	r2, r3
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c62:	061b      	lsls	r3, r3, #24
 8018c64:	4933      	ldr	r1, [pc, #204]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018c66:	4313      	orrs	r3, r2
 8018c68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018c6a:	4b33      	ldr	r3, [pc, #204]	; (8018d38 <HAL_RCC_OscConfig+0x4dc>)
 8018c6c:	2201      	movs	r2, #1
 8018c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c70:	f7fb f802 	bl	8013c78 <HAL_GetTick>
 8018c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018c76:	e008      	b.n	8018c8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018c78:	f7fa fffe 	bl	8013c78 <HAL_GetTick>
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	1ad3      	subs	r3, r2, r3
 8018c82:	2b02      	cmp	r3, #2
 8018c84:	d901      	bls.n	8018c8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8018c86:	2303      	movs	r3, #3
 8018c88:	e04d      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018c8a:	4b2a      	ldr	r3, [pc, #168]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d0f0      	beq.n	8018c78 <HAL_RCC_OscConfig+0x41c>
 8018c96:	e045      	b.n	8018d24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018c98:	4b27      	ldr	r3, [pc, #156]	; (8018d38 <HAL_RCC_OscConfig+0x4dc>)
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8018c9e:	f7fa ffeb 	bl	8013c78 <HAL_GetTick>
 8018ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018ca4:	e008      	b.n	8018cb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8018ca6:	f7fa ffe7 	bl	8013c78 <HAL_GetTick>
 8018caa:	4602      	mov	r2, r0
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	2b02      	cmp	r3, #2
 8018cb2:	d901      	bls.n	8018cb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8018cb4:	2303      	movs	r3, #3
 8018cb6:	e036      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018cb8:	4b1e      	ldr	r3, [pc, #120]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018cba:	681b      	ldr	r3, [r3, #0]
 8018cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d1f0      	bne.n	8018ca6 <HAL_RCC_OscConfig+0x44a>
 8018cc4:	e02e      	b.n	8018d24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	699b      	ldr	r3, [r3, #24]
 8018cca:	2b01      	cmp	r3, #1
 8018ccc:	d101      	bne.n	8018cd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8018cce:	2301      	movs	r3, #1
 8018cd0:	e029      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8018cd2:	4b18      	ldr	r3, [pc, #96]	; (8018d34 <HAL_RCC_OscConfig+0x4d8>)
 8018cd4:	685b      	ldr	r3, [r3, #4]
 8018cd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	69db      	ldr	r3, [r3, #28]
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d11c      	bne.n	8018d20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d115      	bne.n	8018d20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8018cf4:	68fa      	ldr	r2, [r7, #12]
 8018cf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018cfa:	4013      	ands	r3, r2
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018d00:	4293      	cmp	r3, r2
 8018d02:	d10d      	bne.n	8018d20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8018d0e:	429a      	cmp	r2, r3
 8018d10:	d106      	bne.n	8018d20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8018d1c:	429a      	cmp	r2, r3
 8018d1e:	d001      	beq.n	8018d24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8018d20:	2301      	movs	r3, #1
 8018d22:	e000      	b.n	8018d26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8018d24:	2300      	movs	r3, #0
}
 8018d26:	4618      	mov	r0, r3
 8018d28:	3718      	adds	r7, #24
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	40007000 	.word	0x40007000
 8018d34:	40023800 	.word	0x40023800
 8018d38:	42470060 	.word	0x42470060

08018d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
 8018d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d101      	bne.n	8018d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	e0cc      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018d50:	4b68      	ldr	r3, [pc, #416]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f003 030f 	and.w	r3, r3, #15
 8018d58:	683a      	ldr	r2, [r7, #0]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d90c      	bls.n	8018d78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018d5e:	4b65      	ldr	r3, [pc, #404]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018d60:	683a      	ldr	r2, [r7, #0]
 8018d62:	b2d2      	uxtb	r2, r2
 8018d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018d66:	4b63      	ldr	r3, [pc, #396]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	f003 030f 	and.w	r3, r3, #15
 8018d6e:	683a      	ldr	r2, [r7, #0]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d001      	beq.n	8018d78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018d74:	2301      	movs	r3, #1
 8018d76:	e0b8      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f003 0302 	and.w	r3, r3, #2
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d020      	beq.n	8018dc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	f003 0304 	and.w	r3, r3, #4
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d005      	beq.n	8018d9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018d90:	4b59      	ldr	r3, [pc, #356]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018d92:	689b      	ldr	r3, [r3, #8]
 8018d94:	4a58      	ldr	r2, [pc, #352]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018d9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	f003 0308 	and.w	r3, r3, #8
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d005      	beq.n	8018db4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018da8:	4b53      	ldr	r3, [pc, #332]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018daa:	689b      	ldr	r3, [r3, #8]
 8018dac:	4a52      	ldr	r2, [pc, #328]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018db2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018db4:	4b50      	ldr	r3, [pc, #320]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018db6:	689b      	ldr	r3, [r3, #8]
 8018db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	689b      	ldr	r3, [r3, #8]
 8018dc0:	494d      	ldr	r1, [pc, #308]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018dc2:	4313      	orrs	r3, r2
 8018dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	f003 0301 	and.w	r3, r3, #1
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d044      	beq.n	8018e5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	685b      	ldr	r3, [r3, #4]
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	d107      	bne.n	8018dea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018dda:	4b47      	ldr	r3, [pc, #284]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d119      	bne.n	8018e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018de6:	2301      	movs	r3, #1
 8018de8:	e07f      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	685b      	ldr	r3, [r3, #4]
 8018dee:	2b02      	cmp	r3, #2
 8018df0:	d003      	beq.n	8018dfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018df6:	2b03      	cmp	r3, #3
 8018df8:	d107      	bne.n	8018e0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018dfa:	4b3f      	ldr	r3, [pc, #252]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d109      	bne.n	8018e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018e06:	2301      	movs	r3, #1
 8018e08:	e06f      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018e0a:	4b3b      	ldr	r3, [pc, #236]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	f003 0302 	and.w	r3, r3, #2
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d101      	bne.n	8018e1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018e16:	2301      	movs	r3, #1
 8018e18:	e067      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018e1a:	4b37      	ldr	r3, [pc, #220]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e1c:	689b      	ldr	r3, [r3, #8]
 8018e1e:	f023 0203 	bic.w	r2, r3, #3
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	685b      	ldr	r3, [r3, #4]
 8018e26:	4934      	ldr	r1, [pc, #208]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e28:	4313      	orrs	r3, r2
 8018e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018e2c:	f7fa ff24 	bl	8013c78 <HAL_GetTick>
 8018e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e32:	e00a      	b.n	8018e4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018e34:	f7fa ff20 	bl	8013c78 <HAL_GetTick>
 8018e38:	4602      	mov	r2, r0
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	1ad3      	subs	r3, r2, r3
 8018e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d901      	bls.n	8018e4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8018e46:	2303      	movs	r3, #3
 8018e48:	e04f      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e4a:	4b2b      	ldr	r3, [pc, #172]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e4c:	689b      	ldr	r3, [r3, #8]
 8018e4e:	f003 020c 	and.w	r2, r3, #12
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	685b      	ldr	r3, [r3, #4]
 8018e56:	009b      	lsls	r3, r3, #2
 8018e58:	429a      	cmp	r2, r3
 8018e5a:	d1eb      	bne.n	8018e34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8018e5c:	4b25      	ldr	r3, [pc, #148]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f003 030f 	and.w	r3, r3, #15
 8018e64:	683a      	ldr	r2, [r7, #0]
 8018e66:	429a      	cmp	r2, r3
 8018e68:	d20c      	bcs.n	8018e84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018e6a:	4b22      	ldr	r3, [pc, #136]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018e6c:	683a      	ldr	r2, [r7, #0]
 8018e6e:	b2d2      	uxtb	r2, r2
 8018e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018e72:	4b20      	ldr	r3, [pc, #128]	; (8018ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f003 030f 	and.w	r3, r3, #15
 8018e7a:	683a      	ldr	r2, [r7, #0]
 8018e7c:	429a      	cmp	r2, r3
 8018e7e:	d001      	beq.n	8018e84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018e80:	2301      	movs	r3, #1
 8018e82:	e032      	b.n	8018eea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	f003 0304 	and.w	r3, r3, #4
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d008      	beq.n	8018ea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018e90:	4b19      	ldr	r3, [pc, #100]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e92:	689b      	ldr	r3, [r3, #8]
 8018e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	68db      	ldr	r3, [r3, #12]
 8018e9c:	4916      	ldr	r1, [pc, #88]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018e9e:	4313      	orrs	r3, r2
 8018ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	f003 0308 	and.w	r3, r3, #8
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d009      	beq.n	8018ec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018eae:	4b12      	ldr	r3, [pc, #72]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018eb0:	689b      	ldr	r3, [r3, #8]
 8018eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	691b      	ldr	r3, [r3, #16]
 8018eba:	00db      	lsls	r3, r3, #3
 8018ebc:	490e      	ldr	r1, [pc, #56]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018ebe:	4313      	orrs	r3, r2
 8018ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018ec2:	f000 f82d 	bl	8018f20 <HAL_RCC_GetSysClockFreq>
 8018ec6:	4602      	mov	r2, r0
 8018ec8:	4b0b      	ldr	r3, [pc, #44]	; (8018ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8018eca:	689b      	ldr	r3, [r3, #8]
 8018ecc:	091b      	lsrs	r3, r3, #4
 8018ece:	f003 030f 	and.w	r3, r3, #15
 8018ed2:	490a      	ldr	r1, [pc, #40]	; (8018efc <HAL_RCC_ClockConfig+0x1c0>)
 8018ed4:	5ccb      	ldrb	r3, [r1, r3]
 8018ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8018eda:	4a09      	ldr	r2, [pc, #36]	; (8018f00 <HAL_RCC_ClockConfig+0x1c4>)
 8018edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8018ede:	4b09      	ldr	r3, [pc, #36]	; (8018f04 <HAL_RCC_ClockConfig+0x1c8>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	f7f5 feea 	bl	800ecbc <HAL_InitTick>

  return HAL_OK;
 8018ee8:	2300      	movs	r3, #0
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	3710      	adds	r7, #16
 8018eee:	46bd      	mov	sp, r7
 8018ef0:	bd80      	pop	{r7, pc}
 8018ef2:	bf00      	nop
 8018ef4:	40023c00 	.word	0x40023c00
 8018ef8:	40023800 	.word	0x40023800
 8018efc:	08024bbc 	.word	0x08024bbc
 8018f00:	20000638 	.word	0x20000638
 8018f04:	200006b4 	.word	0x200006b4

08018f08 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8018f08:	b480      	push	{r7}
 8018f0a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8018f0c:	4b03      	ldr	r3, [pc, #12]	; (8018f1c <HAL_RCC_EnableCSS+0x14>)
 8018f0e:	2201      	movs	r2, #1
 8018f10:	601a      	str	r2, [r3, #0]
}
 8018f12:	bf00      	nop
 8018f14:	46bd      	mov	sp, r7
 8018f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1a:	4770      	bx	lr
 8018f1c:	4247004c 	.word	0x4247004c

08018f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018f20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018f24:	b084      	sub	sp, #16
 8018f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	607b      	str	r3, [r7, #4]
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	60fb      	str	r3, [r7, #12]
 8018f30:	2300      	movs	r3, #0
 8018f32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8018f34:	2300      	movs	r3, #0
 8018f36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018f38:	4b67      	ldr	r3, [pc, #412]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018f3a:	689b      	ldr	r3, [r3, #8]
 8018f3c:	f003 030c 	and.w	r3, r3, #12
 8018f40:	2b08      	cmp	r3, #8
 8018f42:	d00d      	beq.n	8018f60 <HAL_RCC_GetSysClockFreq+0x40>
 8018f44:	2b08      	cmp	r3, #8
 8018f46:	f200 80bd 	bhi.w	80190c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d002      	beq.n	8018f54 <HAL_RCC_GetSysClockFreq+0x34>
 8018f4e:	2b04      	cmp	r3, #4
 8018f50:	d003      	beq.n	8018f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8018f52:	e0b7      	b.n	80190c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8018f54:	4b61      	ldr	r3, [pc, #388]	; (80190dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8018f56:	60bb      	str	r3, [r7, #8]
       break;
 8018f58:	e0b7      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8018f5a:	4b61      	ldr	r3, [pc, #388]	; (80190e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8018f5c:	60bb      	str	r3, [r7, #8]
      break;
 8018f5e:	e0b4      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8018f60:	4b5d      	ldr	r3, [pc, #372]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018f62:	685b      	ldr	r3, [r3, #4]
 8018f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8018f6a:	4b5b      	ldr	r3, [pc, #364]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018f6c:	685b      	ldr	r3, [r3, #4]
 8018f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d04d      	beq.n	8019012 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8018f76:	4b58      	ldr	r3, [pc, #352]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	099b      	lsrs	r3, r3, #6
 8018f7c:	461a      	mov	r2, r3
 8018f7e:	f04f 0300 	mov.w	r3, #0
 8018f82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018f86:	f04f 0100 	mov.w	r1, #0
 8018f8a:	ea02 0800 	and.w	r8, r2, r0
 8018f8e:	ea03 0901 	and.w	r9, r3, r1
 8018f92:	4640      	mov	r0, r8
 8018f94:	4649      	mov	r1, r9
 8018f96:	f04f 0200 	mov.w	r2, #0
 8018f9a:	f04f 0300 	mov.w	r3, #0
 8018f9e:	014b      	lsls	r3, r1, #5
 8018fa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8018fa4:	0142      	lsls	r2, r0, #5
 8018fa6:	4610      	mov	r0, r2
 8018fa8:	4619      	mov	r1, r3
 8018faa:	ebb0 0008 	subs.w	r0, r0, r8
 8018fae:	eb61 0109 	sbc.w	r1, r1, r9
 8018fb2:	f04f 0200 	mov.w	r2, #0
 8018fb6:	f04f 0300 	mov.w	r3, #0
 8018fba:	018b      	lsls	r3, r1, #6
 8018fbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8018fc0:	0182      	lsls	r2, r0, #6
 8018fc2:	1a12      	subs	r2, r2, r0
 8018fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8018fc8:	f04f 0000 	mov.w	r0, #0
 8018fcc:	f04f 0100 	mov.w	r1, #0
 8018fd0:	00d9      	lsls	r1, r3, #3
 8018fd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018fd6:	00d0      	lsls	r0, r2, #3
 8018fd8:	4602      	mov	r2, r0
 8018fda:	460b      	mov	r3, r1
 8018fdc:	eb12 0208 	adds.w	r2, r2, r8
 8018fe0:	eb43 0309 	adc.w	r3, r3, r9
 8018fe4:	f04f 0000 	mov.w	r0, #0
 8018fe8:	f04f 0100 	mov.w	r1, #0
 8018fec:	0259      	lsls	r1, r3, #9
 8018fee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8018ff2:	0250      	lsls	r0, r2, #9
 8018ff4:	4602      	mov	r2, r0
 8018ff6:	460b      	mov	r3, r1
 8018ff8:	4610      	mov	r0, r2
 8018ffa:	4619      	mov	r1, r3
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	461a      	mov	r2, r3
 8019000:	f04f 0300 	mov.w	r3, #0
 8019004:	f7e7 fe40 	bl	8000c88 <__aeabi_uldivmod>
 8019008:	4602      	mov	r2, r0
 801900a:	460b      	mov	r3, r1
 801900c:	4613      	mov	r3, r2
 801900e:	60fb      	str	r3, [r7, #12]
 8019010:	e04a      	b.n	80190a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019012:	4b31      	ldr	r3, [pc, #196]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8019014:	685b      	ldr	r3, [r3, #4]
 8019016:	099b      	lsrs	r3, r3, #6
 8019018:	461a      	mov	r2, r3
 801901a:	f04f 0300 	mov.w	r3, #0
 801901e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019022:	f04f 0100 	mov.w	r1, #0
 8019026:	ea02 0400 	and.w	r4, r2, r0
 801902a:	ea03 0501 	and.w	r5, r3, r1
 801902e:	4620      	mov	r0, r4
 8019030:	4629      	mov	r1, r5
 8019032:	f04f 0200 	mov.w	r2, #0
 8019036:	f04f 0300 	mov.w	r3, #0
 801903a:	014b      	lsls	r3, r1, #5
 801903c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8019040:	0142      	lsls	r2, r0, #5
 8019042:	4610      	mov	r0, r2
 8019044:	4619      	mov	r1, r3
 8019046:	1b00      	subs	r0, r0, r4
 8019048:	eb61 0105 	sbc.w	r1, r1, r5
 801904c:	f04f 0200 	mov.w	r2, #0
 8019050:	f04f 0300 	mov.w	r3, #0
 8019054:	018b      	lsls	r3, r1, #6
 8019056:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 801905a:	0182      	lsls	r2, r0, #6
 801905c:	1a12      	subs	r2, r2, r0
 801905e:	eb63 0301 	sbc.w	r3, r3, r1
 8019062:	f04f 0000 	mov.w	r0, #0
 8019066:	f04f 0100 	mov.w	r1, #0
 801906a:	00d9      	lsls	r1, r3, #3
 801906c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8019070:	00d0      	lsls	r0, r2, #3
 8019072:	4602      	mov	r2, r0
 8019074:	460b      	mov	r3, r1
 8019076:	1912      	adds	r2, r2, r4
 8019078:	eb45 0303 	adc.w	r3, r5, r3
 801907c:	f04f 0000 	mov.w	r0, #0
 8019080:	f04f 0100 	mov.w	r1, #0
 8019084:	0299      	lsls	r1, r3, #10
 8019086:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 801908a:	0290      	lsls	r0, r2, #10
 801908c:	4602      	mov	r2, r0
 801908e:	460b      	mov	r3, r1
 8019090:	4610      	mov	r0, r2
 8019092:	4619      	mov	r1, r3
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	461a      	mov	r2, r3
 8019098:	f04f 0300 	mov.w	r3, #0
 801909c:	f7e7 fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80190a0:	4602      	mov	r2, r0
 80190a2:	460b      	mov	r3, r1
 80190a4:	4613      	mov	r3, r2
 80190a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80190a8:	4b0b      	ldr	r3, [pc, #44]	; (80190d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80190aa:	685b      	ldr	r3, [r3, #4]
 80190ac:	0c1b      	lsrs	r3, r3, #16
 80190ae:	f003 0303 	and.w	r3, r3, #3
 80190b2:	3301      	adds	r3, #1
 80190b4:	005b      	lsls	r3, r3, #1
 80190b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80190b8:	68fa      	ldr	r2, [r7, #12]
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80190c0:	60bb      	str	r3, [r7, #8]
      break;
 80190c2:	e002      	b.n	80190ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80190c4:	4b05      	ldr	r3, [pc, #20]	; (80190dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80190c6:	60bb      	str	r3, [r7, #8]
      break;
 80190c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80190ca:	68bb      	ldr	r3, [r7, #8]
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80190d6:	bf00      	nop
 80190d8:	40023800 	.word	0x40023800
 80190dc:	00f42400 	.word	0x00f42400
 80190e0:	007a1200 	.word	0x007a1200

080190e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80190e4:	b480      	push	{r7}
 80190e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80190e8:	4b03      	ldr	r3, [pc, #12]	; (80190f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80190ea:	681b      	ldr	r3, [r3, #0]
}
 80190ec:	4618      	mov	r0, r3
 80190ee:	46bd      	mov	sp, r7
 80190f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f4:	4770      	bx	lr
 80190f6:	bf00      	nop
 80190f8:	20000638 	.word	0x20000638

080190fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8019100:	f7ff fff0 	bl	80190e4 <HAL_RCC_GetHCLKFreq>
 8019104:	4602      	mov	r2, r0
 8019106:	4b05      	ldr	r3, [pc, #20]	; (801911c <HAL_RCC_GetPCLK1Freq+0x20>)
 8019108:	689b      	ldr	r3, [r3, #8]
 801910a:	0a9b      	lsrs	r3, r3, #10
 801910c:	f003 0307 	and.w	r3, r3, #7
 8019110:	4903      	ldr	r1, [pc, #12]	; (8019120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019112:	5ccb      	ldrb	r3, [r1, r3]
 8019114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019118:	4618      	mov	r0, r3
 801911a:	bd80      	pop	{r7, pc}
 801911c:	40023800 	.word	0x40023800
 8019120:	08024bcc 	.word	0x08024bcc

08019124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8019128:	f7ff ffdc 	bl	80190e4 <HAL_RCC_GetHCLKFreq>
 801912c:	4602      	mov	r2, r0
 801912e:	4b05      	ldr	r3, [pc, #20]	; (8019144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019130:	689b      	ldr	r3, [r3, #8]
 8019132:	0b5b      	lsrs	r3, r3, #13
 8019134:	f003 0307 	and.w	r3, r3, #7
 8019138:	4903      	ldr	r1, [pc, #12]	; (8019148 <HAL_RCC_GetPCLK2Freq+0x24>)
 801913a:	5ccb      	ldrb	r3, [r1, r3]
 801913c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019140:	4618      	mov	r0, r3
 8019142:	bd80      	pop	{r7, pc}
 8019144:	40023800 	.word	0x40023800
 8019148:	08024bcc 	.word	0x08024bcc

0801914c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801914c:	b480      	push	{r7}
 801914e:	b083      	sub	sp, #12
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
 8019154:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	220f      	movs	r2, #15
 801915a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801915c:	4b12      	ldr	r3, [pc, #72]	; (80191a8 <HAL_RCC_GetClockConfig+0x5c>)
 801915e:	689b      	ldr	r3, [r3, #8]
 8019160:	f003 0203 	and.w	r2, r3, #3
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8019168:	4b0f      	ldr	r3, [pc, #60]	; (80191a8 <HAL_RCC_GetClockConfig+0x5c>)
 801916a:	689b      	ldr	r3, [r3, #8]
 801916c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8019174:	4b0c      	ldr	r3, [pc, #48]	; (80191a8 <HAL_RCC_GetClockConfig+0x5c>)
 8019176:	689b      	ldr	r3, [r3, #8]
 8019178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8019180:	4b09      	ldr	r3, [pc, #36]	; (80191a8 <HAL_RCC_GetClockConfig+0x5c>)
 8019182:	689b      	ldr	r3, [r3, #8]
 8019184:	08db      	lsrs	r3, r3, #3
 8019186:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801918e:	4b07      	ldr	r3, [pc, #28]	; (80191ac <HAL_RCC_GetClockConfig+0x60>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	f003 020f 	and.w	r2, r3, #15
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	601a      	str	r2, [r3, #0]
}
 801919a:	bf00      	nop
 801919c:	370c      	adds	r7, #12
 801919e:	46bd      	mov	sp, r7
 80191a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop
 80191a8:	40023800 	.word	0x40023800
 80191ac:	40023c00 	.word	0x40023c00

080191b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b088      	sub	sp, #32
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	689b      	ldr	r3, [r3, #8]
 80191c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80191c8:	69bb      	ldr	r3, [r7, #24]
 80191ca:	099b      	lsrs	r3, r3, #6
 80191cc:	f003 0301 	and.w	r3, r3, #1
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d10f      	bne.n	80191f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80191d4:	69bb      	ldr	r3, [r7, #24]
 80191d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d00a      	beq.n	80191f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80191de:	69fb      	ldr	r3, [r7, #28]
 80191e0:	099b      	lsrs	r3, r3, #6
 80191e2:	f003 0301 	and.w	r3, r3, #1
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d004      	beq.n	80191f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	4798      	blx	r3
    return;
 80191f2:	e0d7      	b.n	80193a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80191f4:	69bb      	ldr	r3, [r7, #24]
 80191f6:	085b      	lsrs	r3, r3, #1
 80191f8:	f003 0301 	and.w	r3, r3, #1
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d00a      	beq.n	8019216 <HAL_SPI_IRQHandler+0x66>
 8019200:	69fb      	ldr	r3, [r7, #28]
 8019202:	09db      	lsrs	r3, r3, #7
 8019204:	f003 0301 	and.w	r3, r3, #1
 8019208:	2b00      	cmp	r3, #0
 801920a:	d004      	beq.n	8019216 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019210:	6878      	ldr	r0, [r7, #4]
 8019212:	4798      	blx	r3
    return;
 8019214:	e0c6      	b.n	80193a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8019216:	69bb      	ldr	r3, [r7, #24]
 8019218:	095b      	lsrs	r3, r3, #5
 801921a:	f003 0301 	and.w	r3, r3, #1
 801921e:	2b00      	cmp	r3, #0
 8019220:	d10c      	bne.n	801923c <HAL_SPI_IRQHandler+0x8c>
 8019222:	69bb      	ldr	r3, [r7, #24]
 8019224:	099b      	lsrs	r3, r3, #6
 8019226:	f003 0301 	and.w	r3, r3, #1
 801922a:	2b00      	cmp	r3, #0
 801922c:	d106      	bne.n	801923c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801922e:	69bb      	ldr	r3, [r7, #24]
 8019230:	0a1b      	lsrs	r3, r3, #8
 8019232:	f003 0301 	and.w	r3, r3, #1
 8019236:	2b00      	cmp	r3, #0
 8019238:	f000 80b4 	beq.w	80193a4 <HAL_SPI_IRQHandler+0x1f4>
 801923c:	69fb      	ldr	r3, [r7, #28]
 801923e:	095b      	lsrs	r3, r3, #5
 8019240:	f003 0301 	and.w	r3, r3, #1
 8019244:	2b00      	cmp	r3, #0
 8019246:	f000 80ad 	beq.w	80193a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801924a:	69bb      	ldr	r3, [r7, #24]
 801924c:	099b      	lsrs	r3, r3, #6
 801924e:	f003 0301 	and.w	r3, r3, #1
 8019252:	2b00      	cmp	r3, #0
 8019254:	d023      	beq.n	801929e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801925c:	b2db      	uxtb	r3, r3
 801925e:	2b03      	cmp	r3, #3
 8019260:	d011      	beq.n	8019286 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019266:	f043 0204 	orr.w	r2, r3, #4
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801926e:	2300      	movs	r3, #0
 8019270:	617b      	str	r3, [r7, #20]
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	68db      	ldr	r3, [r3, #12]
 8019278:	617b      	str	r3, [r7, #20]
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	689b      	ldr	r3, [r3, #8]
 8019280:	617b      	str	r3, [r7, #20]
 8019282:	697b      	ldr	r3, [r7, #20]
 8019284:	e00b      	b.n	801929e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8019286:	2300      	movs	r3, #0
 8019288:	613b      	str	r3, [r7, #16]
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	68db      	ldr	r3, [r3, #12]
 8019290:	613b      	str	r3, [r7, #16]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	689b      	ldr	r3, [r3, #8]
 8019298:	613b      	str	r3, [r7, #16]
 801929a:	693b      	ldr	r3, [r7, #16]
        return;
 801929c:	e082      	b.n	80193a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801929e:	69bb      	ldr	r3, [r7, #24]
 80192a0:	095b      	lsrs	r3, r3, #5
 80192a2:	f003 0301 	and.w	r3, r3, #1
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d014      	beq.n	80192d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192ae:	f043 0201 	orr.w	r2, r3, #1
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80192b6:	2300      	movs	r3, #0
 80192b8:	60fb      	str	r3, [r7, #12]
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	689b      	ldr	r3, [r3, #8]
 80192c0:	60fb      	str	r3, [r7, #12]
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80192d0:	601a      	str	r2, [r3, #0]
 80192d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80192d4:	69bb      	ldr	r3, [r7, #24]
 80192d6:	0a1b      	lsrs	r3, r3, #8
 80192d8:	f003 0301 	and.w	r3, r3, #1
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d00c      	beq.n	80192fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192e4:	f043 0208 	orr.w	r2, r3, #8
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80192ec:	2300      	movs	r3, #0
 80192ee:	60bb      	str	r3, [r7, #8]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	689b      	ldr	r3, [r3, #8]
 80192f6:	60bb      	str	r3, [r7, #8]
 80192f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d04f      	beq.n	80193a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	685a      	ldr	r2, [r3, #4]
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8019310:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	2201      	movs	r2, #1
 8019316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801931a:	69fb      	ldr	r3, [r7, #28]
 801931c:	f003 0302 	and.w	r3, r3, #2
 8019320:	2b00      	cmp	r3, #0
 8019322:	d104      	bne.n	801932e <HAL_SPI_IRQHandler+0x17e>
 8019324:	69fb      	ldr	r3, [r7, #28]
 8019326:	f003 0301 	and.w	r3, r3, #1
 801932a:	2b00      	cmp	r3, #0
 801932c:	d034      	beq.n	8019398 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	685a      	ldr	r2, [r3, #4]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	f022 0203 	bic.w	r2, r2, #3
 801933c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019342:	2b00      	cmp	r3, #0
 8019344:	d011      	beq.n	801936a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801934a:	4a18      	ldr	r2, [pc, #96]	; (80193ac <HAL_SPI_IRQHandler+0x1fc>)
 801934c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019352:	4618      	mov	r0, r3
 8019354:	f7fc f9e6 	bl	8015724 <HAL_DMA_Abort_IT>
 8019358:	4603      	mov	r3, r0
 801935a:	2b00      	cmp	r3, #0
 801935c:	d005      	beq.n	801936a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019362:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801936e:	2b00      	cmp	r3, #0
 8019370:	d016      	beq.n	80193a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019376:	4a0d      	ldr	r2, [pc, #52]	; (80193ac <HAL_SPI_IRQHandler+0x1fc>)
 8019378:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801937e:	4618      	mov	r0, r3
 8019380:	f7fc f9d0 	bl	8015724 <HAL_DMA_Abort_IT>
 8019384:	4603      	mov	r3, r0
 8019386:	2b00      	cmp	r3, #0
 8019388:	d00a      	beq.n	80193a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801938e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8019396:	e003      	b.n	80193a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f000 f809 	bl	80193b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801939e:	e000      	b.n	80193a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80193a0:	bf00      	nop
    return;
 80193a2:	bf00      	nop
  }
}
 80193a4:	3720      	adds	r7, #32
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	080193c5 	.word	0x080193c5

080193b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80193b8:	bf00      	nop
 80193ba:	370c      	adds	r7, #12
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr

080193c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b084      	sub	sp, #16
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80193d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	2200      	movs	r2, #0
 80193d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	2200      	movs	r2, #0
 80193dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80193de:	68f8      	ldr	r0, [r7, #12]
 80193e0:	f7ff ffe6 	bl	80193b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80193e4:	bf00      	nop
 80193e6:	3710      	adds	r7, #16
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd80      	pop	{r7, pc}

080193ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d101      	bne.n	80193fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80193fa:	2301      	movs	r3, #1
 80193fc:	e01d      	b.n	801943a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b00      	cmp	r3, #0
 8019408:	d106      	bne.n	8019418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	2200      	movs	r2, #0
 801940e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f7e9 fb24 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	2202      	movs	r2, #2
 801941c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681a      	ldr	r2, [r3, #0]
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	3304      	adds	r3, #4
 8019428:	4619      	mov	r1, r3
 801942a:	4610      	mov	r0, r2
 801942c:	f000 fc3e 	bl	8019cac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2201      	movs	r2, #1
 8019434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8019438:	2300      	movs	r3, #0
}
 801943a:	4618      	mov	r0, r3
 801943c:	3708      	adds	r7, #8
 801943e:	46bd      	mov	sp, r7
 8019440:	bd80      	pop	{r7, pc}

08019442 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8019442:	b480      	push	{r7}
 8019444:	b085      	sub	sp, #20
 8019446:	af00      	add	r7, sp, #0
 8019448:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2202      	movs	r2, #2
 801944e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	689b      	ldr	r3, [r3, #8]
 8019458:	f003 0307 	and.w	r3, r3, #7
 801945c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	2b06      	cmp	r3, #6
 8019462:	d007      	beq.n	8019474 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	f042 0201 	orr.w	r2, r2, #1
 8019472:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2201      	movs	r2, #1
 8019478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801947c:	2300      	movs	r3, #0
}
 801947e:	4618      	mov	r0, r3
 8019480:	3714      	adds	r7, #20
 8019482:	46bd      	mov	sp, r7
 8019484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019488:	4770      	bx	lr

0801948a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801948a:	b480      	push	{r7}
 801948c:	b085      	sub	sp, #20
 801948e:	af00      	add	r7, sp, #0
 8019490:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	68da      	ldr	r2, [r3, #12]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	f042 0201 	orr.w	r2, r2, #1
 80194a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	689b      	ldr	r3, [r3, #8]
 80194a8:	f003 0307 	and.w	r3, r3, #7
 80194ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	2b06      	cmp	r3, #6
 80194b2:	d007      	beq.n	80194c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	681a      	ldr	r2, [r3, #0]
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	f042 0201 	orr.w	r2, r2, #1
 80194c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80194c4:	2300      	movs	r3, #0
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3714      	adds	r7, #20
 80194ca:	46bd      	mov	sp, r7
 80194cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d0:	4770      	bx	lr

080194d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80194d2:	b580      	push	{r7, lr}
 80194d4:	b082      	sub	sp, #8
 80194d6:	af00      	add	r7, sp, #0
 80194d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d101      	bne.n	80194e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80194e0:	2301      	movs	r3, #1
 80194e2:	e01d      	b.n	8019520 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80194ea:	b2db      	uxtb	r3, r3
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d106      	bne.n	80194fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	2200      	movs	r2, #0
 80194f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80194f8:	6878      	ldr	r0, [r7, #4]
 80194fa:	f7e9 f973 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2202      	movs	r2, #2
 8019502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	3304      	adds	r3, #4
 801950e:	4619      	mov	r1, r3
 8019510:	4610      	mov	r0, r2
 8019512:	f000 fbcb 	bl	8019cac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	2201      	movs	r2, #1
 801951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801951e:	2300      	movs	r3, #0
}
 8019520:	4618      	mov	r0, r3
 8019522:	3708      	adds	r7, #8
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}

08019528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b084      	sub	sp, #16
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
 8019530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	2201      	movs	r2, #1
 8019538:	6839      	ldr	r1, [r7, #0]
 801953a:	4618      	mov	r0, r3
 801953c:	f000 fea0 	bl	801a280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	4a15      	ldr	r2, [pc, #84]	; (801959c <HAL_TIM_PWM_Start+0x74>)
 8019546:	4293      	cmp	r3, r2
 8019548:	d004      	beq.n	8019554 <HAL_TIM_PWM_Start+0x2c>
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	4a14      	ldr	r2, [pc, #80]	; (80195a0 <HAL_TIM_PWM_Start+0x78>)
 8019550:	4293      	cmp	r3, r2
 8019552:	d101      	bne.n	8019558 <HAL_TIM_PWM_Start+0x30>
 8019554:	2301      	movs	r3, #1
 8019556:	e000      	b.n	801955a <HAL_TIM_PWM_Start+0x32>
 8019558:	2300      	movs	r3, #0
 801955a:	2b00      	cmp	r3, #0
 801955c:	d007      	beq.n	801956e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801956c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	689b      	ldr	r3, [r3, #8]
 8019574:	f003 0307 	and.w	r3, r3, #7
 8019578:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	2b06      	cmp	r3, #6
 801957e:	d007      	beq.n	8019590 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	681a      	ldr	r2, [r3, #0]
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	f042 0201 	orr.w	r2, r2, #1
 801958e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8019590:	2300      	movs	r3, #0
}
 8019592:	4618      	mov	r0, r3
 8019594:	3710      	adds	r7, #16
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
 801959a:	bf00      	nop
 801959c:	40010000 	.word	0x40010000
 80195a0:	40010400 	.word	0x40010400

080195a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b086      	sub	sp, #24
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d101      	bne.n	80195b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80195b4:	2301      	movs	r3, #1
 80195b6:	e083      	b.n	80196c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80195be:	b2db      	uxtb	r3, r3
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d106      	bne.n	80195d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	2200      	movs	r2, #0
 80195c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80195cc:	6878      	ldr	r0, [r7, #4]
 80195ce:	f7e9 fcfb 	bl	8002fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2202      	movs	r2, #2
 80195d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	689b      	ldr	r3, [r3, #8]
 80195e0:	687a      	ldr	r2, [r7, #4]
 80195e2:	6812      	ldr	r2, [r2, #0]
 80195e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80195e8:	f023 0307 	bic.w	r3, r3, #7
 80195ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	3304      	adds	r3, #4
 80195f6:	4619      	mov	r1, r3
 80195f8:	4610      	mov	r0, r2
 80195fa:	f000 fb57 	bl	8019cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	689b      	ldr	r3, [r3, #8]
 8019604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	699b      	ldr	r3, [r3, #24]
 801960c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	6a1b      	ldr	r3, [r3, #32]
 8019614:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8019616:	683b      	ldr	r3, [r7, #0]
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	697a      	ldr	r2, [r7, #20]
 801961c:	4313      	orrs	r3, r2
 801961e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8019620:	693b      	ldr	r3, [r7, #16]
 8019622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019626:	f023 0303 	bic.w	r3, r3, #3
 801962a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801962c:	683b      	ldr	r3, [r7, #0]
 801962e:	689a      	ldr	r2, [r3, #8]
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	699b      	ldr	r3, [r3, #24]
 8019634:	021b      	lsls	r3, r3, #8
 8019636:	4313      	orrs	r3, r2
 8019638:	693a      	ldr	r2, [r7, #16]
 801963a:	4313      	orrs	r3, r2
 801963c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801963e:	693b      	ldr	r3, [r7, #16]
 8019640:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8019644:	f023 030c 	bic.w	r3, r3, #12
 8019648:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8019650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8019654:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8019656:	683b      	ldr	r3, [r7, #0]
 8019658:	68da      	ldr	r2, [r3, #12]
 801965a:	683b      	ldr	r3, [r7, #0]
 801965c:	69db      	ldr	r3, [r3, #28]
 801965e:	021b      	lsls	r3, r3, #8
 8019660:	4313      	orrs	r3, r2
 8019662:	693a      	ldr	r2, [r7, #16]
 8019664:	4313      	orrs	r3, r2
 8019666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8019668:	683b      	ldr	r3, [r7, #0]
 801966a:	691b      	ldr	r3, [r3, #16]
 801966c:	011a      	lsls	r2, r3, #4
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	6a1b      	ldr	r3, [r3, #32]
 8019672:	031b      	lsls	r3, r3, #12
 8019674:	4313      	orrs	r3, r2
 8019676:	693a      	ldr	r2, [r7, #16]
 8019678:	4313      	orrs	r3, r2
 801967a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8019682:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801968a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	685a      	ldr	r2, [r3, #4]
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	695b      	ldr	r3, [r3, #20]
 8019694:	011b      	lsls	r3, r3, #4
 8019696:	4313      	orrs	r3, r2
 8019698:	68fa      	ldr	r2, [r7, #12]
 801969a:	4313      	orrs	r3, r2
 801969c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	697a      	ldr	r2, [r7, #20]
 80196a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	693a      	ldr	r2, [r7, #16]
 80196ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	68fa      	ldr	r2, [r7, #12]
 80196b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	2201      	movs	r2, #1
 80196ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80196be:	2300      	movs	r3, #0
}
 80196c0:	4618      	mov	r0, r3
 80196c2:	3718      	adds	r7, #24
 80196c4:	46bd      	mov	sp, r7
 80196c6:	bd80      	pop	{r7, pc}

080196c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
 80196d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80196d2:	683b      	ldr	r3, [r7, #0]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d003      	beq.n	80196e0 <HAL_TIM_Encoder_Start+0x18>
 80196d8:	683b      	ldr	r3, [r7, #0]
 80196da:	2b04      	cmp	r3, #4
 80196dc:	d008      	beq.n	80196f0 <HAL_TIM_Encoder_Start+0x28>
 80196de:	e00f      	b.n	8019700 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	2201      	movs	r2, #1
 80196e6:	2100      	movs	r1, #0
 80196e8:	4618      	mov	r0, r3
 80196ea:	f000 fdc9 	bl	801a280 <TIM_CCxChannelCmd>
      break;
 80196ee:	e016      	b.n	801971e <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	2201      	movs	r2, #1
 80196f6:	2104      	movs	r1, #4
 80196f8:	4618      	mov	r0, r3
 80196fa:	f000 fdc1 	bl	801a280 <TIM_CCxChannelCmd>
      break;
 80196fe:	e00e      	b.n	801971e <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	2201      	movs	r2, #1
 8019706:	2100      	movs	r1, #0
 8019708:	4618      	mov	r0, r3
 801970a:	f000 fdb9 	bl	801a280 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	2201      	movs	r2, #1
 8019714:	2104      	movs	r1, #4
 8019716:	4618      	mov	r0, r3
 8019718:	f000 fdb2 	bl	801a280 <TIM_CCxChannelCmd>
      break;
 801971c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	681a      	ldr	r2, [r3, #0]
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	f042 0201 	orr.w	r2, r2, #1
 801972c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801972e:	2300      	movs	r3, #0
}
 8019730:	4618      	mov	r0, r3
 8019732:	3708      	adds	r7, #8
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	691b      	ldr	r3, [r3, #16]
 8019746:	f003 0302 	and.w	r3, r3, #2
 801974a:	2b02      	cmp	r3, #2
 801974c:	d122      	bne.n	8019794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	68db      	ldr	r3, [r3, #12]
 8019754:	f003 0302 	and.w	r3, r3, #2
 8019758:	2b02      	cmp	r3, #2
 801975a:	d11b      	bne.n	8019794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f06f 0202 	mvn.w	r2, #2
 8019764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	2201      	movs	r2, #1
 801976a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	699b      	ldr	r3, [r3, #24]
 8019772:	f003 0303 	and.w	r3, r3, #3
 8019776:	2b00      	cmp	r3, #0
 8019778:	d003      	beq.n	8019782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801977a:	6878      	ldr	r0, [r7, #4]
 801977c:	f000 fa78 	bl	8019c70 <HAL_TIM_IC_CaptureCallback>
 8019780:	e005      	b.n	801978e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f000 fa6a 	bl	8019c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019788:	6878      	ldr	r0, [r7, #4]
 801978a:	f000 fa7b 	bl	8019c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	2200      	movs	r2, #0
 8019792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	691b      	ldr	r3, [r3, #16]
 801979a:	f003 0304 	and.w	r3, r3, #4
 801979e:	2b04      	cmp	r3, #4
 80197a0:	d122      	bne.n	80197e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	681b      	ldr	r3, [r3, #0]
 80197a6:	68db      	ldr	r3, [r3, #12]
 80197a8:	f003 0304 	and.w	r3, r3, #4
 80197ac:	2b04      	cmp	r3, #4
 80197ae:	d11b      	bne.n	80197e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	f06f 0204 	mvn.w	r2, #4
 80197b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	2202      	movs	r2, #2
 80197be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	699b      	ldr	r3, [r3, #24]
 80197c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d003      	beq.n	80197d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f000 fa4e 	bl	8019c70 <HAL_TIM_IC_CaptureCallback>
 80197d4:	e005      	b.n	80197e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80197d6:	6878      	ldr	r0, [r7, #4]
 80197d8:	f000 fa40 	bl	8019c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f000 fa51 	bl	8019c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	2200      	movs	r2, #0
 80197e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	691b      	ldr	r3, [r3, #16]
 80197ee:	f003 0308 	and.w	r3, r3, #8
 80197f2:	2b08      	cmp	r3, #8
 80197f4:	d122      	bne.n	801983c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	68db      	ldr	r3, [r3, #12]
 80197fc:	f003 0308 	and.w	r3, r3, #8
 8019800:	2b08      	cmp	r3, #8
 8019802:	d11b      	bne.n	801983c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	f06f 0208 	mvn.w	r2, #8
 801980c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	2204      	movs	r2, #4
 8019812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	69db      	ldr	r3, [r3, #28]
 801981a:	f003 0303 	and.w	r3, r3, #3
 801981e:	2b00      	cmp	r3, #0
 8019820:	d003      	beq.n	801982a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f000 fa24 	bl	8019c70 <HAL_TIM_IC_CaptureCallback>
 8019828:	e005      	b.n	8019836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801982a:	6878      	ldr	r0, [r7, #4]
 801982c:	f000 fa16 	bl	8019c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f000 fa27 	bl	8019c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	2200      	movs	r2, #0
 801983a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	691b      	ldr	r3, [r3, #16]
 8019842:	f003 0310 	and.w	r3, r3, #16
 8019846:	2b10      	cmp	r3, #16
 8019848:	d122      	bne.n	8019890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	68db      	ldr	r3, [r3, #12]
 8019850:	f003 0310 	and.w	r3, r3, #16
 8019854:	2b10      	cmp	r3, #16
 8019856:	d11b      	bne.n	8019890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	f06f 0210 	mvn.w	r2, #16
 8019860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	2208      	movs	r2, #8
 8019866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	69db      	ldr	r3, [r3, #28]
 801986e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019872:	2b00      	cmp	r3, #0
 8019874:	d003      	beq.n	801987e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8019876:	6878      	ldr	r0, [r7, #4]
 8019878:	f000 f9fa 	bl	8019c70 <HAL_TIM_IC_CaptureCallback>
 801987c:	e005      	b.n	801988a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f000 f9ec 	bl	8019c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8019884:	6878      	ldr	r0, [r7, #4]
 8019886:	f000 f9fd 	bl	8019c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2200      	movs	r2, #0
 801988e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	691b      	ldr	r3, [r3, #16]
 8019896:	f003 0301 	and.w	r3, r3, #1
 801989a:	2b01      	cmp	r3, #1
 801989c:	d10e      	bne.n	80198bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	f003 0301 	and.w	r3, r3, #1
 80198a8:	2b01      	cmp	r3, #1
 80198aa:	d107      	bne.n	80198bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	f06f 0201 	mvn.w	r2, #1
 80198b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80198b6:	6878      	ldr	r0, [r7, #4]
 80198b8:	f7f5 f960 	bl	800eb7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	681b      	ldr	r3, [r3, #0]
 80198c0:	691b      	ldr	r3, [r3, #16]
 80198c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198c6:	2b80      	cmp	r3, #128	; 0x80
 80198c8:	d10e      	bne.n	80198e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	68db      	ldr	r3, [r3, #12]
 80198d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80198d4:	2b80      	cmp	r3, #128	; 0x80
 80198d6:	d107      	bne.n	80198e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80198e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80198e2:	6878      	ldr	r0, [r7, #4]
 80198e4:	f000 fd78 	bl	801a3d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	691b      	ldr	r3, [r3, #16]
 80198ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80198f2:	2b40      	cmp	r3, #64	; 0x40
 80198f4:	d10e      	bne.n	8019914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	68db      	ldr	r3, [r3, #12]
 80198fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019900:	2b40      	cmp	r3, #64	; 0x40
 8019902:	d107      	bne.n	8019914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801990c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	f000 f9c2 	bl	8019c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	691b      	ldr	r3, [r3, #16]
 801991a:	f003 0320 	and.w	r3, r3, #32
 801991e:	2b20      	cmp	r3, #32
 8019920:	d10e      	bne.n	8019940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	68db      	ldr	r3, [r3, #12]
 8019928:	f003 0320 	and.w	r3, r3, #32
 801992c:	2b20      	cmp	r3, #32
 801992e:	d107      	bne.n	8019940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	f06f 0220 	mvn.w	r2, #32
 8019938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801993a:	6878      	ldr	r0, [r7, #4]
 801993c:	f000 fd42 	bl	801a3c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8019940:	bf00      	nop
 8019942:	3708      	adds	r7, #8
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b084      	sub	sp, #16
 801994c:	af00      	add	r7, sp, #0
 801994e:	60f8      	str	r0, [r7, #12]
 8019950:	60b9      	str	r1, [r7, #8]
 8019952:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801995a:	2b01      	cmp	r3, #1
 801995c:	d101      	bne.n	8019962 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801995e:	2302      	movs	r3, #2
 8019960:	e0b4      	b.n	8019acc <HAL_TIM_PWM_ConfigChannel+0x184>
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	2201      	movs	r2, #1
 8019966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	2202      	movs	r2, #2
 801996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	2b0c      	cmp	r3, #12
 8019976:	f200 809f 	bhi.w	8019ab8 <HAL_TIM_PWM_ConfigChannel+0x170>
 801997a:	a201      	add	r2, pc, #4	; (adr r2, 8019980 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019980:	080199b5 	.word	0x080199b5
 8019984:	08019ab9 	.word	0x08019ab9
 8019988:	08019ab9 	.word	0x08019ab9
 801998c:	08019ab9 	.word	0x08019ab9
 8019990:	080199f5 	.word	0x080199f5
 8019994:	08019ab9 	.word	0x08019ab9
 8019998:	08019ab9 	.word	0x08019ab9
 801999c:	08019ab9 	.word	0x08019ab9
 80199a0:	08019a37 	.word	0x08019a37
 80199a4:	08019ab9 	.word	0x08019ab9
 80199a8:	08019ab9 	.word	0x08019ab9
 80199ac:	08019ab9 	.word	0x08019ab9
 80199b0:	08019a77 	.word	0x08019a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	68b9      	ldr	r1, [r7, #8]
 80199ba:	4618      	mov	r0, r3
 80199bc:	f000 fa16 	bl	8019dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	699a      	ldr	r2, [r3, #24]
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	f042 0208 	orr.w	r2, r2, #8
 80199ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	699a      	ldr	r2, [r3, #24]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	f022 0204 	bic.w	r2, r2, #4
 80199de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	6999      	ldr	r1, [r3, #24]
 80199e6:	68bb      	ldr	r3, [r7, #8]
 80199e8:	691a      	ldr	r2, [r3, #16]
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	430a      	orrs	r2, r1
 80199f0:	619a      	str	r2, [r3, #24]
      break;
 80199f2:	e062      	b.n	8019aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	68b9      	ldr	r1, [r7, #8]
 80199fa:	4618      	mov	r0, r3
 80199fc:	f000 fa66 	bl	8019ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	699a      	ldr	r2, [r3, #24]
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	699a      	ldr	r2, [r3, #24]
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	6999      	ldr	r1, [r3, #24]
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	691b      	ldr	r3, [r3, #16]
 8019a2a:	021a      	lsls	r2, r3, #8
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	430a      	orrs	r2, r1
 8019a32:	619a      	str	r2, [r3, #24]
      break;
 8019a34:	e041      	b.n	8019aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	68b9      	ldr	r1, [r7, #8]
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	f000 fabb 	bl	8019fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	69da      	ldr	r2, [r3, #28]
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	f042 0208 	orr.w	r2, r2, #8
 8019a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	69da      	ldr	r2, [r3, #28]
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	f022 0204 	bic.w	r2, r2, #4
 8019a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	69d9      	ldr	r1, [r3, #28]
 8019a68:	68bb      	ldr	r3, [r7, #8]
 8019a6a:	691a      	ldr	r2, [r3, #16]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	430a      	orrs	r2, r1
 8019a72:	61da      	str	r2, [r3, #28]
      break;
 8019a74:	e021      	b.n	8019aba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	68b9      	ldr	r1, [r7, #8]
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	f000 fb0f 	bl	801a0a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8019a82:	68fb      	ldr	r3, [r7, #12]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	69da      	ldr	r2, [r3, #28]
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8019a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	69da      	ldr	r2, [r3, #28]
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8019aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	69d9      	ldr	r1, [r3, #28]
 8019aa8:	68bb      	ldr	r3, [r7, #8]
 8019aaa:	691b      	ldr	r3, [r3, #16]
 8019aac:	021a      	lsls	r2, r3, #8
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	430a      	orrs	r2, r1
 8019ab4:	61da      	str	r2, [r3, #28]
      break;
 8019ab6:	e000      	b.n	8019aba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8019ab8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	2201      	movs	r2, #1
 8019abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019aca:	2300      	movs	r3, #0
}
 8019acc:	4618      	mov	r0, r3
 8019ace:	3710      	adds	r7, #16
 8019ad0:	46bd      	mov	sp, r7
 8019ad2:	bd80      	pop	{r7, pc}

08019ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b084      	sub	sp, #16
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
 8019adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019ae4:	2b01      	cmp	r3, #1
 8019ae6:	d101      	bne.n	8019aec <HAL_TIM_ConfigClockSource+0x18>
 8019ae8:	2302      	movs	r3, #2
 8019aea:	e0b3      	b.n	8019c54 <HAL_TIM_ConfigClockSource+0x180>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	2201      	movs	r2, #1
 8019af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2202      	movs	r2, #2
 8019af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	689b      	ldr	r3, [r3, #8]
 8019b02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8019b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8019b12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	68fa      	ldr	r2, [r7, #12]
 8019b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8019b1c:	683b      	ldr	r3, [r7, #0]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019b24:	d03e      	beq.n	8019ba4 <HAL_TIM_ConfigClockSource+0xd0>
 8019b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019b2a:	f200 8087 	bhi.w	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019b32:	f000 8085 	beq.w	8019c40 <HAL_TIM_ConfigClockSource+0x16c>
 8019b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019b3a:	d87f      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b3c:	2b70      	cmp	r3, #112	; 0x70
 8019b3e:	d01a      	beq.n	8019b76 <HAL_TIM_ConfigClockSource+0xa2>
 8019b40:	2b70      	cmp	r3, #112	; 0x70
 8019b42:	d87b      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b44:	2b60      	cmp	r3, #96	; 0x60
 8019b46:	d050      	beq.n	8019bea <HAL_TIM_ConfigClockSource+0x116>
 8019b48:	2b60      	cmp	r3, #96	; 0x60
 8019b4a:	d877      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b4c:	2b50      	cmp	r3, #80	; 0x50
 8019b4e:	d03c      	beq.n	8019bca <HAL_TIM_ConfigClockSource+0xf6>
 8019b50:	2b50      	cmp	r3, #80	; 0x50
 8019b52:	d873      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b54:	2b40      	cmp	r3, #64	; 0x40
 8019b56:	d058      	beq.n	8019c0a <HAL_TIM_ConfigClockSource+0x136>
 8019b58:	2b40      	cmp	r3, #64	; 0x40
 8019b5a:	d86f      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b5c:	2b30      	cmp	r3, #48	; 0x30
 8019b5e:	d064      	beq.n	8019c2a <HAL_TIM_ConfigClockSource+0x156>
 8019b60:	2b30      	cmp	r3, #48	; 0x30
 8019b62:	d86b      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b64:	2b20      	cmp	r3, #32
 8019b66:	d060      	beq.n	8019c2a <HAL_TIM_ConfigClockSource+0x156>
 8019b68:	2b20      	cmp	r3, #32
 8019b6a:	d867      	bhi.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d05c      	beq.n	8019c2a <HAL_TIM_ConfigClockSource+0x156>
 8019b70:	2b10      	cmp	r3, #16
 8019b72:	d05a      	beq.n	8019c2a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8019b74:	e062      	b.n	8019c3c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6818      	ldr	r0, [r3, #0]
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	6899      	ldr	r1, [r3, #8]
 8019b7e:	683b      	ldr	r3, [r7, #0]
 8019b80:	685a      	ldr	r2, [r3, #4]
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	68db      	ldr	r3, [r3, #12]
 8019b86:	f000 fb5b 	bl	801a240 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	689b      	ldr	r3, [r3, #8]
 8019b90:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8019b98:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	68fa      	ldr	r2, [r7, #12]
 8019ba0:	609a      	str	r2, [r3, #8]
      break;
 8019ba2:	e04e      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	6818      	ldr	r0, [r3, #0]
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	6899      	ldr	r1, [r3, #8]
 8019bac:	683b      	ldr	r3, [r7, #0]
 8019bae:	685a      	ldr	r2, [r3, #4]
 8019bb0:	683b      	ldr	r3, [r7, #0]
 8019bb2:	68db      	ldr	r3, [r3, #12]
 8019bb4:	f000 fb44 	bl	801a240 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	689a      	ldr	r2, [r3, #8]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019bc6:	609a      	str	r2, [r3, #8]
      break;
 8019bc8:	e03b      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6818      	ldr	r0, [r3, #0]
 8019bce:	683b      	ldr	r3, [r7, #0]
 8019bd0:	6859      	ldr	r1, [r3, #4]
 8019bd2:	683b      	ldr	r3, [r7, #0]
 8019bd4:	68db      	ldr	r3, [r3, #12]
 8019bd6:	461a      	mov	r2, r3
 8019bd8:	f000 fab8 	bl	801a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	2150      	movs	r1, #80	; 0x50
 8019be2:	4618      	mov	r0, r3
 8019be4:	f000 fb11 	bl	801a20a <TIM_ITRx_SetConfig>
      break;
 8019be8:	e02b      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6818      	ldr	r0, [r3, #0]
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	6859      	ldr	r1, [r3, #4]
 8019bf2:	683b      	ldr	r3, [r7, #0]
 8019bf4:	68db      	ldr	r3, [r3, #12]
 8019bf6:	461a      	mov	r2, r3
 8019bf8:	f000 fad7 	bl	801a1aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	681b      	ldr	r3, [r3, #0]
 8019c00:	2160      	movs	r1, #96	; 0x60
 8019c02:	4618      	mov	r0, r3
 8019c04:	f000 fb01 	bl	801a20a <TIM_ITRx_SetConfig>
      break;
 8019c08:	e01b      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	6818      	ldr	r0, [r3, #0]
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	6859      	ldr	r1, [r3, #4]
 8019c12:	683b      	ldr	r3, [r7, #0]
 8019c14:	68db      	ldr	r3, [r3, #12]
 8019c16:	461a      	mov	r2, r3
 8019c18:	f000 fa98 	bl	801a14c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	2140      	movs	r1, #64	; 0x40
 8019c22:	4618      	mov	r0, r3
 8019c24:	f000 faf1 	bl	801a20a <TIM_ITRx_SetConfig>
      break;
 8019c28:	e00b      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681a      	ldr	r2, [r3, #0]
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	4619      	mov	r1, r3
 8019c34:	4610      	mov	r0, r2
 8019c36:	f000 fae8 	bl	801a20a <TIM_ITRx_SetConfig>
      break;
 8019c3a:	e002      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8019c3c:	bf00      	nop
 8019c3e:	e000      	b.n	8019c42 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8019c40:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	2201      	movs	r2, #1
 8019c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8019c52:	2300      	movs	r3, #0
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}

08019c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8019c5c:	b480      	push	{r7}
 8019c5e:	b083      	sub	sp, #12
 8019c60:	af00      	add	r7, sp, #0
 8019c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8019c64:	bf00      	nop
 8019c66:	370c      	adds	r7, #12
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c6e:	4770      	bx	lr

08019c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8019c70:	b480      	push	{r7}
 8019c72:	b083      	sub	sp, #12
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8019c78:	bf00      	nop
 8019c7a:	370c      	adds	r7, #12
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c82:	4770      	bx	lr

08019c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8019c84:	b480      	push	{r7}
 8019c86:	b083      	sub	sp, #12
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8019c8c:	bf00      	nop
 8019c8e:	370c      	adds	r7, #12
 8019c90:	46bd      	mov	sp, r7
 8019c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c96:	4770      	bx	lr

08019c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8019c98:	b480      	push	{r7}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8019ca0:	bf00      	nop
 8019ca2:	370c      	adds	r7, #12
 8019ca4:	46bd      	mov	sp, r7
 8019ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019caa:	4770      	bx	lr

08019cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8019cac:	b480      	push	{r7}
 8019cae:	b085      	sub	sp, #20
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	4a40      	ldr	r2, [pc, #256]	; (8019dc0 <TIM_Base_SetConfig+0x114>)
 8019cc0:	4293      	cmp	r3, r2
 8019cc2:	d013      	beq.n	8019cec <TIM_Base_SetConfig+0x40>
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019cca:	d00f      	beq.n	8019cec <TIM_Base_SetConfig+0x40>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	4a3d      	ldr	r2, [pc, #244]	; (8019dc4 <TIM_Base_SetConfig+0x118>)
 8019cd0:	4293      	cmp	r3, r2
 8019cd2:	d00b      	beq.n	8019cec <TIM_Base_SetConfig+0x40>
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	4a3c      	ldr	r2, [pc, #240]	; (8019dc8 <TIM_Base_SetConfig+0x11c>)
 8019cd8:	4293      	cmp	r3, r2
 8019cda:	d007      	beq.n	8019cec <TIM_Base_SetConfig+0x40>
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	4a3b      	ldr	r2, [pc, #236]	; (8019dcc <TIM_Base_SetConfig+0x120>)
 8019ce0:	4293      	cmp	r3, r2
 8019ce2:	d003      	beq.n	8019cec <TIM_Base_SetConfig+0x40>
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	4a3a      	ldr	r2, [pc, #232]	; (8019dd0 <TIM_Base_SetConfig+0x124>)
 8019ce8:	4293      	cmp	r3, r2
 8019cea:	d108      	bne.n	8019cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8019cf4:	683b      	ldr	r3, [r7, #0]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	68fa      	ldr	r2, [r7, #12]
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	4a2f      	ldr	r2, [pc, #188]	; (8019dc0 <TIM_Base_SetConfig+0x114>)
 8019d02:	4293      	cmp	r3, r2
 8019d04:	d02b      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8019d0c:	d027      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	4a2c      	ldr	r2, [pc, #176]	; (8019dc4 <TIM_Base_SetConfig+0x118>)
 8019d12:	4293      	cmp	r3, r2
 8019d14:	d023      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	4a2b      	ldr	r2, [pc, #172]	; (8019dc8 <TIM_Base_SetConfig+0x11c>)
 8019d1a:	4293      	cmp	r3, r2
 8019d1c:	d01f      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	4a2a      	ldr	r2, [pc, #168]	; (8019dcc <TIM_Base_SetConfig+0x120>)
 8019d22:	4293      	cmp	r3, r2
 8019d24:	d01b      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	4a29      	ldr	r2, [pc, #164]	; (8019dd0 <TIM_Base_SetConfig+0x124>)
 8019d2a:	4293      	cmp	r3, r2
 8019d2c:	d017      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	4a28      	ldr	r2, [pc, #160]	; (8019dd4 <TIM_Base_SetConfig+0x128>)
 8019d32:	4293      	cmp	r3, r2
 8019d34:	d013      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	4a27      	ldr	r2, [pc, #156]	; (8019dd8 <TIM_Base_SetConfig+0x12c>)
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	d00f      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	4a26      	ldr	r2, [pc, #152]	; (8019ddc <TIM_Base_SetConfig+0x130>)
 8019d42:	4293      	cmp	r3, r2
 8019d44:	d00b      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	4a25      	ldr	r2, [pc, #148]	; (8019de0 <TIM_Base_SetConfig+0x134>)
 8019d4a:	4293      	cmp	r3, r2
 8019d4c:	d007      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	4a24      	ldr	r2, [pc, #144]	; (8019de4 <TIM_Base_SetConfig+0x138>)
 8019d52:	4293      	cmp	r3, r2
 8019d54:	d003      	beq.n	8019d5e <TIM_Base_SetConfig+0xb2>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	4a23      	ldr	r2, [pc, #140]	; (8019de8 <TIM_Base_SetConfig+0x13c>)
 8019d5a:	4293      	cmp	r3, r2
 8019d5c:	d108      	bne.n	8019d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	68db      	ldr	r3, [r3, #12]
 8019d6a:	68fa      	ldr	r2, [r7, #12]
 8019d6c:	4313      	orrs	r3, r2
 8019d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8019d76:	683b      	ldr	r3, [r7, #0]
 8019d78:	695b      	ldr	r3, [r3, #20]
 8019d7a:	4313      	orrs	r3, r2
 8019d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	68fa      	ldr	r2, [r7, #12]
 8019d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	689a      	ldr	r2, [r3, #8]
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	681a      	ldr	r2, [r3, #0]
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	4a0a      	ldr	r2, [pc, #40]	; (8019dc0 <TIM_Base_SetConfig+0x114>)
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d003      	beq.n	8019da4 <TIM_Base_SetConfig+0xf8>
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	4a0c      	ldr	r2, [pc, #48]	; (8019dd0 <TIM_Base_SetConfig+0x124>)
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d103      	bne.n	8019dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8019da4:	683b      	ldr	r3, [r7, #0]
 8019da6:	691a      	ldr	r2, [r3, #16]
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	2201      	movs	r2, #1
 8019db0:	615a      	str	r2, [r3, #20]
}
 8019db2:	bf00      	nop
 8019db4:	3714      	adds	r7, #20
 8019db6:	46bd      	mov	sp, r7
 8019db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbc:	4770      	bx	lr
 8019dbe:	bf00      	nop
 8019dc0:	40010000 	.word	0x40010000
 8019dc4:	40000400 	.word	0x40000400
 8019dc8:	40000800 	.word	0x40000800
 8019dcc:	40000c00 	.word	0x40000c00
 8019dd0:	40010400 	.word	0x40010400
 8019dd4:	40014000 	.word	0x40014000
 8019dd8:	40014400 	.word	0x40014400
 8019ddc:	40014800 	.word	0x40014800
 8019de0:	40001800 	.word	0x40001800
 8019de4:	40001c00 	.word	0x40001c00
 8019de8:	40002000 	.word	0x40002000

08019dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019dec:	b480      	push	{r7}
 8019dee:	b087      	sub	sp, #28
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	6a1b      	ldr	r3, [r3, #32]
 8019dfa:	f023 0201 	bic.w	r2, r3, #1
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6a1b      	ldr	r3, [r3, #32]
 8019e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	699b      	ldr	r3, [r3, #24]
 8019e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	f023 0303 	bic.w	r3, r3, #3
 8019e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	68fa      	ldr	r2, [r7, #12]
 8019e2a:	4313      	orrs	r3, r2
 8019e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	f023 0302 	bic.w	r3, r3, #2
 8019e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8019e36:	683b      	ldr	r3, [r7, #0]
 8019e38:	689b      	ldr	r3, [r3, #8]
 8019e3a:	697a      	ldr	r2, [r7, #20]
 8019e3c:	4313      	orrs	r3, r2
 8019e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	4a20      	ldr	r2, [pc, #128]	; (8019ec4 <TIM_OC1_SetConfig+0xd8>)
 8019e44:	4293      	cmp	r3, r2
 8019e46:	d003      	beq.n	8019e50 <TIM_OC1_SetConfig+0x64>
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	4a1f      	ldr	r2, [pc, #124]	; (8019ec8 <TIM_OC1_SetConfig+0xdc>)
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	d10c      	bne.n	8019e6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8019e50:	697b      	ldr	r3, [r7, #20]
 8019e52:	f023 0308 	bic.w	r3, r3, #8
 8019e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	68db      	ldr	r3, [r3, #12]
 8019e5c:	697a      	ldr	r2, [r7, #20]
 8019e5e:	4313      	orrs	r3, r2
 8019e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	f023 0304 	bic.w	r3, r3, #4
 8019e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	4a15      	ldr	r2, [pc, #84]	; (8019ec4 <TIM_OC1_SetConfig+0xd8>)
 8019e6e:	4293      	cmp	r3, r2
 8019e70:	d003      	beq.n	8019e7a <TIM_OC1_SetConfig+0x8e>
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	4a14      	ldr	r2, [pc, #80]	; (8019ec8 <TIM_OC1_SetConfig+0xdc>)
 8019e76:	4293      	cmp	r3, r2
 8019e78:	d111      	bne.n	8019e9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8019e7a:	693b      	ldr	r3, [r7, #16]
 8019e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8019e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	695b      	ldr	r3, [r3, #20]
 8019e8e:	693a      	ldr	r2, [r7, #16]
 8019e90:	4313      	orrs	r3, r2
 8019e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	699b      	ldr	r3, [r3, #24]
 8019e98:	693a      	ldr	r2, [r7, #16]
 8019e9a:	4313      	orrs	r3, r2
 8019e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	693a      	ldr	r2, [r7, #16]
 8019ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	68fa      	ldr	r2, [r7, #12]
 8019ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	685a      	ldr	r2, [r3, #4]
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	697a      	ldr	r2, [r7, #20]
 8019eb6:	621a      	str	r2, [r3, #32]
}
 8019eb8:	bf00      	nop
 8019eba:	371c      	adds	r7, #28
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec2:	4770      	bx	lr
 8019ec4:	40010000 	.word	0x40010000
 8019ec8:	40010400 	.word	0x40010400

08019ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019ecc:	b480      	push	{r7}
 8019ece:	b087      	sub	sp, #28
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	6a1b      	ldr	r3, [r3, #32]
 8019eda:	f023 0210 	bic.w	r2, r3, #16
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	6a1b      	ldr	r3, [r3, #32]
 8019ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	699b      	ldr	r3, [r3, #24]
 8019ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	021b      	lsls	r3, r3, #8
 8019f0a:	68fa      	ldr	r2, [r7, #12]
 8019f0c:	4313      	orrs	r3, r2
 8019f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8019f10:	697b      	ldr	r3, [r7, #20]
 8019f12:	f023 0320 	bic.w	r3, r3, #32
 8019f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8019f18:	683b      	ldr	r3, [r7, #0]
 8019f1a:	689b      	ldr	r3, [r3, #8]
 8019f1c:	011b      	lsls	r3, r3, #4
 8019f1e:	697a      	ldr	r2, [r7, #20]
 8019f20:	4313      	orrs	r3, r2
 8019f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	4a22      	ldr	r2, [pc, #136]	; (8019fb0 <TIM_OC2_SetConfig+0xe4>)
 8019f28:	4293      	cmp	r3, r2
 8019f2a:	d003      	beq.n	8019f34 <TIM_OC2_SetConfig+0x68>
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	4a21      	ldr	r2, [pc, #132]	; (8019fb4 <TIM_OC2_SetConfig+0xe8>)
 8019f30:	4293      	cmp	r3, r2
 8019f32:	d10d      	bne.n	8019f50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8019f3c:	683b      	ldr	r3, [r7, #0]
 8019f3e:	68db      	ldr	r3, [r3, #12]
 8019f40:	011b      	lsls	r3, r3, #4
 8019f42:	697a      	ldr	r2, [r7, #20]
 8019f44:	4313      	orrs	r3, r2
 8019f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8019f48:	697b      	ldr	r3, [r7, #20]
 8019f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	4a17      	ldr	r2, [pc, #92]	; (8019fb0 <TIM_OC2_SetConfig+0xe4>)
 8019f54:	4293      	cmp	r3, r2
 8019f56:	d003      	beq.n	8019f60 <TIM_OC2_SetConfig+0x94>
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	4a16      	ldr	r2, [pc, #88]	; (8019fb4 <TIM_OC2_SetConfig+0xe8>)
 8019f5c:	4293      	cmp	r3, r2
 8019f5e:	d113      	bne.n	8019f88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8019f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8019f68:	693b      	ldr	r3, [r7, #16]
 8019f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	695b      	ldr	r3, [r3, #20]
 8019f74:	009b      	lsls	r3, r3, #2
 8019f76:	693a      	ldr	r2, [r7, #16]
 8019f78:	4313      	orrs	r3, r2
 8019f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8019f7c:	683b      	ldr	r3, [r7, #0]
 8019f7e:	699b      	ldr	r3, [r3, #24]
 8019f80:	009b      	lsls	r3, r3, #2
 8019f82:	693a      	ldr	r2, [r7, #16]
 8019f84:	4313      	orrs	r3, r2
 8019f86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	693a      	ldr	r2, [r7, #16]
 8019f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	68fa      	ldr	r2, [r7, #12]
 8019f92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	685a      	ldr	r2, [r3, #4]
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	697a      	ldr	r2, [r7, #20]
 8019fa0:	621a      	str	r2, [r3, #32]
}
 8019fa2:	bf00      	nop
 8019fa4:	371c      	adds	r7, #28
 8019fa6:	46bd      	mov	sp, r7
 8019fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fac:	4770      	bx	lr
 8019fae:	bf00      	nop
 8019fb0:	40010000 	.word	0x40010000
 8019fb4:	40010400 	.word	0x40010400

08019fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8019fb8:	b480      	push	{r7}
 8019fba:	b087      	sub	sp, #28
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	6a1b      	ldr	r3, [r3, #32]
 8019fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	6a1b      	ldr	r3, [r3, #32]
 8019fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	685b      	ldr	r3, [r3, #4]
 8019fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	69db      	ldr	r3, [r3, #28]
 8019fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	f023 0303 	bic.w	r3, r3, #3
 8019fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8019ff0:	683b      	ldr	r3, [r7, #0]
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	68fa      	ldr	r2, [r7, #12]
 8019ff6:	4313      	orrs	r3, r2
 8019ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8019ffa:	697b      	ldr	r3, [r7, #20]
 8019ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801a002:	683b      	ldr	r3, [r7, #0]
 801a004:	689b      	ldr	r3, [r3, #8]
 801a006:	021b      	lsls	r3, r3, #8
 801a008:	697a      	ldr	r2, [r7, #20]
 801a00a:	4313      	orrs	r3, r2
 801a00c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	4a21      	ldr	r2, [pc, #132]	; (801a098 <TIM_OC3_SetConfig+0xe0>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d003      	beq.n	801a01e <TIM_OC3_SetConfig+0x66>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	4a20      	ldr	r2, [pc, #128]	; (801a09c <TIM_OC3_SetConfig+0xe4>)
 801a01a:	4293      	cmp	r3, r2
 801a01c:	d10d      	bne.n	801a03a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801a01e:	697b      	ldr	r3, [r7, #20]
 801a020:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	68db      	ldr	r3, [r3, #12]
 801a02a:	021b      	lsls	r3, r3, #8
 801a02c:	697a      	ldr	r2, [r7, #20]
 801a02e:	4313      	orrs	r3, r2
 801a030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801a032:	697b      	ldr	r3, [r7, #20]
 801a034:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	4a16      	ldr	r2, [pc, #88]	; (801a098 <TIM_OC3_SetConfig+0xe0>)
 801a03e:	4293      	cmp	r3, r2
 801a040:	d003      	beq.n	801a04a <TIM_OC3_SetConfig+0x92>
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	4a15      	ldr	r2, [pc, #84]	; (801a09c <TIM_OC3_SetConfig+0xe4>)
 801a046:	4293      	cmp	r3, r2
 801a048:	d113      	bne.n	801a072 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801a04a:	693b      	ldr	r3, [r7, #16]
 801a04c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801a052:	693b      	ldr	r3, [r7, #16]
 801a054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	695b      	ldr	r3, [r3, #20]
 801a05e:	011b      	lsls	r3, r3, #4
 801a060:	693a      	ldr	r2, [r7, #16]
 801a062:	4313      	orrs	r3, r2
 801a064:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	699b      	ldr	r3, [r3, #24]
 801a06a:	011b      	lsls	r3, r3, #4
 801a06c:	693a      	ldr	r2, [r7, #16]
 801a06e:	4313      	orrs	r3, r2
 801a070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	693a      	ldr	r2, [r7, #16]
 801a076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	68fa      	ldr	r2, [r7, #12]
 801a07c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801a07e:	683b      	ldr	r3, [r7, #0]
 801a080:	685a      	ldr	r2, [r3, #4]
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	697a      	ldr	r2, [r7, #20]
 801a08a:	621a      	str	r2, [r3, #32]
}
 801a08c:	bf00      	nop
 801a08e:	371c      	adds	r7, #28
 801a090:	46bd      	mov	sp, r7
 801a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a096:	4770      	bx	lr
 801a098:	40010000 	.word	0x40010000
 801a09c:	40010400 	.word	0x40010400

0801a0a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b087      	sub	sp, #28
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	6078      	str	r0, [r7, #4]
 801a0a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	6a1b      	ldr	r3, [r3, #32]
 801a0ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6a1b      	ldr	r3, [r3, #32]
 801a0ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	685b      	ldr	r3, [r3, #4]
 801a0c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	69db      	ldr	r3, [r3, #28]
 801a0c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801a0ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a0d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	021b      	lsls	r3, r3, #8
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	4313      	orrs	r3, r2
 801a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801a0e4:	693b      	ldr	r3, [r7, #16]
 801a0e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801a0ec:	683b      	ldr	r3, [r7, #0]
 801a0ee:	689b      	ldr	r3, [r3, #8]
 801a0f0:	031b      	lsls	r3, r3, #12
 801a0f2:	693a      	ldr	r2, [r7, #16]
 801a0f4:	4313      	orrs	r3, r2
 801a0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	4a12      	ldr	r2, [pc, #72]	; (801a144 <TIM_OC4_SetConfig+0xa4>)
 801a0fc:	4293      	cmp	r3, r2
 801a0fe:	d003      	beq.n	801a108 <TIM_OC4_SetConfig+0x68>
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	4a11      	ldr	r2, [pc, #68]	; (801a148 <TIM_OC4_SetConfig+0xa8>)
 801a104:	4293      	cmp	r3, r2
 801a106:	d109      	bne.n	801a11c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801a108:	697b      	ldr	r3, [r7, #20]
 801a10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a10e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801a110:	683b      	ldr	r3, [r7, #0]
 801a112:	695b      	ldr	r3, [r3, #20]
 801a114:	019b      	lsls	r3, r3, #6
 801a116:	697a      	ldr	r2, [r7, #20]
 801a118:	4313      	orrs	r3, r2
 801a11a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	697a      	ldr	r2, [r7, #20]
 801a120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	68fa      	ldr	r2, [r7, #12]
 801a126:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801a128:	683b      	ldr	r3, [r7, #0]
 801a12a:	685a      	ldr	r2, [r3, #4]
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	693a      	ldr	r2, [r7, #16]
 801a134:	621a      	str	r2, [r3, #32]
}
 801a136:	bf00      	nop
 801a138:	371c      	adds	r7, #28
 801a13a:	46bd      	mov	sp, r7
 801a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a140:	4770      	bx	lr
 801a142:	bf00      	nop
 801a144:	40010000 	.word	0x40010000
 801a148:	40010400 	.word	0x40010400

0801a14c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a14c:	b480      	push	{r7}
 801a14e:	b087      	sub	sp, #28
 801a150:	af00      	add	r7, sp, #0
 801a152:	60f8      	str	r0, [r7, #12]
 801a154:	60b9      	str	r1, [r7, #8]
 801a156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801a158:	68fb      	ldr	r3, [r7, #12]
 801a15a:	6a1b      	ldr	r3, [r3, #32]
 801a15c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	6a1b      	ldr	r3, [r3, #32]
 801a162:	f023 0201 	bic.w	r2, r3, #1
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	699b      	ldr	r3, [r3, #24]
 801a16e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801a170:	693b      	ldr	r3, [r7, #16]
 801a172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	011b      	lsls	r3, r3, #4
 801a17c:	693a      	ldr	r2, [r7, #16]
 801a17e:	4313      	orrs	r3, r2
 801a180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	f023 030a 	bic.w	r3, r3, #10
 801a188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801a18a:	697a      	ldr	r2, [r7, #20]
 801a18c:	68bb      	ldr	r3, [r7, #8]
 801a18e:	4313      	orrs	r3, r2
 801a190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	693a      	ldr	r2, [r7, #16]
 801a196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	697a      	ldr	r2, [r7, #20]
 801a19c:	621a      	str	r2, [r3, #32]
}
 801a19e:	bf00      	nop
 801a1a0:	371c      	adds	r7, #28
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a8:	4770      	bx	lr

0801a1aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801a1aa:	b480      	push	{r7}
 801a1ac:	b087      	sub	sp, #28
 801a1ae:	af00      	add	r7, sp, #0
 801a1b0:	60f8      	str	r0, [r7, #12]
 801a1b2:	60b9      	str	r1, [r7, #8]
 801a1b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	6a1b      	ldr	r3, [r3, #32]
 801a1ba:	f023 0210 	bic.w	r2, r3, #16
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	699b      	ldr	r3, [r3, #24]
 801a1c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	6a1b      	ldr	r3, [r3, #32]
 801a1cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a1d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	031b      	lsls	r3, r3, #12
 801a1da:	697a      	ldr	r2, [r7, #20]
 801a1dc:	4313      	orrs	r3, r2
 801a1de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801a1e0:	693b      	ldr	r3, [r7, #16]
 801a1e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801a1e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801a1e8:	68bb      	ldr	r3, [r7, #8]
 801a1ea:	011b      	lsls	r3, r3, #4
 801a1ec:	693a      	ldr	r2, [r7, #16]
 801a1ee:	4313      	orrs	r3, r2
 801a1f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	697a      	ldr	r2, [r7, #20]
 801a1f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	693a      	ldr	r2, [r7, #16]
 801a1fc:	621a      	str	r2, [r3, #32]
}
 801a1fe:	bf00      	nop
 801a200:	371c      	adds	r7, #28
 801a202:	46bd      	mov	sp, r7
 801a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a208:	4770      	bx	lr

0801a20a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801a20a:	b480      	push	{r7}
 801a20c:	b085      	sub	sp, #20
 801a20e:	af00      	add	r7, sp, #0
 801a210:	6078      	str	r0, [r7, #4]
 801a212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	689b      	ldr	r3, [r3, #8]
 801a218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801a222:	683a      	ldr	r2, [r7, #0]
 801a224:	68fb      	ldr	r3, [r7, #12]
 801a226:	4313      	orrs	r3, r2
 801a228:	f043 0307 	orr.w	r3, r3, #7
 801a22c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	68fa      	ldr	r2, [r7, #12]
 801a232:	609a      	str	r2, [r3, #8]
}
 801a234:	bf00      	nop
 801a236:	3714      	adds	r7, #20
 801a238:	46bd      	mov	sp, r7
 801a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23e:	4770      	bx	lr

0801a240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801a240:	b480      	push	{r7}
 801a242:	b087      	sub	sp, #28
 801a244:	af00      	add	r7, sp, #0
 801a246:	60f8      	str	r0, [r7, #12]
 801a248:	60b9      	str	r1, [r7, #8]
 801a24a:	607a      	str	r2, [r7, #4]
 801a24c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	689b      	ldr	r3, [r3, #8]
 801a252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a254:	697b      	ldr	r3, [r7, #20]
 801a256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a25a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801a25c:	683b      	ldr	r3, [r7, #0]
 801a25e:	021a      	lsls	r2, r3, #8
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	431a      	orrs	r2, r3
 801a264:	68bb      	ldr	r3, [r7, #8]
 801a266:	4313      	orrs	r3, r2
 801a268:	697a      	ldr	r2, [r7, #20]
 801a26a:	4313      	orrs	r3, r2
 801a26c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	697a      	ldr	r2, [r7, #20]
 801a272:	609a      	str	r2, [r3, #8]
}
 801a274:	bf00      	nop
 801a276:	371c      	adds	r7, #28
 801a278:	46bd      	mov	sp, r7
 801a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27e:	4770      	bx	lr

0801a280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801a280:	b480      	push	{r7}
 801a282:	b087      	sub	sp, #28
 801a284:	af00      	add	r7, sp, #0
 801a286:	60f8      	str	r0, [r7, #12]
 801a288:	60b9      	str	r1, [r7, #8]
 801a28a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801a28c:	68bb      	ldr	r3, [r7, #8]
 801a28e:	f003 031f 	and.w	r3, r3, #31
 801a292:	2201      	movs	r2, #1
 801a294:	fa02 f303 	lsl.w	r3, r2, r3
 801a298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	6a1a      	ldr	r2, [r3, #32]
 801a29e:	697b      	ldr	r3, [r7, #20]
 801a2a0:	43db      	mvns	r3, r3
 801a2a2:	401a      	ands	r2, r3
 801a2a4:	68fb      	ldr	r3, [r7, #12]
 801a2a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	6a1a      	ldr	r2, [r3, #32]
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	f003 031f 	and.w	r3, r3, #31
 801a2b2:	6879      	ldr	r1, [r7, #4]
 801a2b4:	fa01 f303 	lsl.w	r3, r1, r3
 801a2b8:	431a      	orrs	r2, r3
 801a2ba:	68fb      	ldr	r3, [r7, #12]
 801a2bc:	621a      	str	r2, [r3, #32]
}
 801a2be:	bf00      	nop
 801a2c0:	371c      	adds	r7, #28
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c8:	4770      	bx	lr
	...

0801a2cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801a2cc:	b480      	push	{r7}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a2dc:	2b01      	cmp	r3, #1
 801a2de:	d101      	bne.n	801a2e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801a2e0:	2302      	movs	r3, #2
 801a2e2:	e05a      	b.n	801a39a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	2201      	movs	r2, #1
 801a2e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	2202      	movs	r2, #2
 801a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	685b      	ldr	r3, [r3, #4]
 801a2fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	689b      	ldr	r3, [r3, #8]
 801a302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a30a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801a30c:	683b      	ldr	r3, [r7, #0]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	68fa      	ldr	r2, [r7, #12]
 801a312:	4313      	orrs	r3, r2
 801a314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	68fa      	ldr	r2, [r7, #12]
 801a31c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	4a21      	ldr	r2, [pc, #132]	; (801a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801a324:	4293      	cmp	r3, r2
 801a326:	d022      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a330:	d01d      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	4a1d      	ldr	r2, [pc, #116]	; (801a3ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801a338:	4293      	cmp	r3, r2
 801a33a:	d018      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	4a1b      	ldr	r2, [pc, #108]	; (801a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801a342:	4293      	cmp	r3, r2
 801a344:	d013      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	4a1a      	ldr	r2, [pc, #104]	; (801a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801a34c:	4293      	cmp	r3, r2
 801a34e:	d00e      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681b      	ldr	r3, [r3, #0]
 801a354:	4a18      	ldr	r2, [pc, #96]	; (801a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801a356:	4293      	cmp	r3, r2
 801a358:	d009      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	4a17      	ldr	r2, [pc, #92]	; (801a3bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801a360:	4293      	cmp	r3, r2
 801a362:	d004      	beq.n	801a36e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	4a15      	ldr	r2, [pc, #84]	; (801a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801a36a:	4293      	cmp	r3, r2
 801a36c:	d10c      	bne.n	801a388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801a36e:	68bb      	ldr	r3, [r7, #8]
 801a370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801a374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	68ba      	ldr	r2, [r7, #8]
 801a37c:	4313      	orrs	r3, r2
 801a37e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	68ba      	ldr	r2, [r7, #8]
 801a386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	2201      	movs	r2, #1
 801a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2200      	movs	r2, #0
 801a394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a398:	2300      	movs	r3, #0
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	3714      	adds	r7, #20
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a4:	4770      	bx	lr
 801a3a6:	bf00      	nop
 801a3a8:	40010000 	.word	0x40010000
 801a3ac:	40000400 	.word	0x40000400
 801a3b0:	40000800 	.word	0x40000800
 801a3b4:	40000c00 	.word	0x40000c00
 801a3b8:	40010400 	.word	0x40010400
 801a3bc:	40014000 	.word	0x40014000
 801a3c0:	40001800 	.word	0x40001800

0801a3c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801a3c4:	b480      	push	{r7}
 801a3c6:	b083      	sub	sp, #12
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801a3cc:	bf00      	nop
 801a3ce:	370c      	adds	r7, #12
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d6:	4770      	bx	lr

0801a3d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	b083      	sub	sp, #12
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801a3e0:	bf00      	nop
 801a3e2:	370c      	adds	r7, #12
 801a3e4:	46bd      	mov	sp, r7
 801a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ea:	4770      	bx	lr

0801a3ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b082      	sub	sp, #8
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d101      	bne.n	801a3fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801a3fa:	2301      	movs	r3, #1
 801a3fc:	e03f      	b.n	801a47e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801a404:	b2db      	uxtb	r3, r3
 801a406:	2b00      	cmp	r3, #0
 801a408:	d106      	bne.n	801a418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	2200      	movs	r2, #0
 801a40e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801a412:	6878      	ldr	r0, [r7, #4]
 801a414:	f7e8 fc62 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	2224      	movs	r2, #36	; 0x24
 801a41c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	68da      	ldr	r2, [r3, #12]
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a42e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801a430:	6878      	ldr	r0, [r7, #4]
 801a432:	f000 fcc3 	bl	801adbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	691a      	ldr	r2, [r3, #16]
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801a444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	695a      	ldr	r2, [r3, #20]
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801a454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	68da      	ldr	r2, [r3, #12]
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	2200      	movs	r2, #0
 801a46a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	2220      	movs	r2, #32
 801a470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2220      	movs	r2, #32
 801a478:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801a47c:	2300      	movs	r3, #0
}
 801a47e:	4618      	mov	r0, r3
 801a480:	3708      	adds	r7, #8
 801a482:	46bd      	mov	sp, r7
 801a484:	bd80      	pop	{r7, pc}

0801a486 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a486:	b580      	push	{r7, lr}
 801a488:	b088      	sub	sp, #32
 801a48a:	af02      	add	r7, sp, #8
 801a48c:	60f8      	str	r0, [r7, #12]
 801a48e:	60b9      	str	r1, [r7, #8]
 801a490:	603b      	str	r3, [r7, #0]
 801a492:	4613      	mov	r3, r2
 801a494:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801a496:	2300      	movs	r3, #0
 801a498:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801a4a0:	b2db      	uxtb	r3, r3
 801a4a2:	2b20      	cmp	r3, #32
 801a4a4:	f040 8083 	bne.w	801a5ae <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801a4a8:	68bb      	ldr	r3, [r7, #8]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d002      	beq.n	801a4b4 <HAL_UART_Transmit+0x2e>
 801a4ae:	88fb      	ldrh	r3, [r7, #6]
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d101      	bne.n	801a4b8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801a4b4:	2301      	movs	r3, #1
 801a4b6:	e07b      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a4be:	2b01      	cmp	r3, #1
 801a4c0:	d101      	bne.n	801a4c6 <HAL_UART_Transmit+0x40>
 801a4c2:	2302      	movs	r3, #2
 801a4c4:	e074      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
 801a4c6:	68fb      	ldr	r3, [r7, #12]
 801a4c8:	2201      	movs	r2, #1
 801a4ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	2221      	movs	r2, #33	; 0x21
 801a4d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801a4dc:	f7f9 fbcc 	bl	8013c78 <HAL_GetTick>
 801a4e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	88fa      	ldrh	r2, [r7, #6]
 801a4e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	88fa      	ldrh	r2, [r7, #6]
 801a4ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	2200      	movs	r2, #0
 801a4f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801a4f6:	e042      	b.n	801a57e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a4fc:	b29b      	uxth	r3, r3
 801a4fe:	3b01      	subs	r3, #1
 801a500:	b29a      	uxth	r2, r3
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	689b      	ldr	r3, [r3, #8]
 801a50a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a50e:	d122      	bne.n	801a556 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a510:	683b      	ldr	r3, [r7, #0]
 801a512:	9300      	str	r3, [sp, #0]
 801a514:	697b      	ldr	r3, [r7, #20]
 801a516:	2200      	movs	r2, #0
 801a518:	2180      	movs	r1, #128	; 0x80
 801a51a:	68f8      	ldr	r0, [r7, #12]
 801a51c:	f000 facc 	bl	801aab8 <UART_WaitOnFlagUntilTimeout>
 801a520:	4603      	mov	r3, r0
 801a522:	2b00      	cmp	r3, #0
 801a524:	d001      	beq.n	801a52a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801a526:	2303      	movs	r3, #3
 801a528:	e042      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801a52a:	68bb      	ldr	r3, [r7, #8]
 801a52c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	881b      	ldrh	r3, [r3, #0]
 801a532:	461a      	mov	r2, r3
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801a53c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	691b      	ldr	r3, [r3, #16]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d103      	bne.n	801a54e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	3302      	adds	r3, #2
 801a54a:	60bb      	str	r3, [r7, #8]
 801a54c:	e017      	b.n	801a57e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801a54e:	68bb      	ldr	r3, [r7, #8]
 801a550:	3301      	adds	r3, #1
 801a552:	60bb      	str	r3, [r7, #8]
 801a554:	e013      	b.n	801a57e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801a556:	683b      	ldr	r3, [r7, #0]
 801a558:	9300      	str	r3, [sp, #0]
 801a55a:	697b      	ldr	r3, [r7, #20]
 801a55c:	2200      	movs	r2, #0
 801a55e:	2180      	movs	r1, #128	; 0x80
 801a560:	68f8      	ldr	r0, [r7, #12]
 801a562:	f000 faa9 	bl	801aab8 <UART_WaitOnFlagUntilTimeout>
 801a566:	4603      	mov	r3, r0
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d001      	beq.n	801a570 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801a56c:	2303      	movs	r3, #3
 801a56e:	e01f      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801a570:	68bb      	ldr	r3, [r7, #8]
 801a572:	1c5a      	adds	r2, r3, #1
 801a574:	60ba      	str	r2, [r7, #8]
 801a576:	781a      	ldrb	r2, [r3, #0]
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801a582:	b29b      	uxth	r3, r3
 801a584:	2b00      	cmp	r3, #0
 801a586:	d1b7      	bne.n	801a4f8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801a588:	683b      	ldr	r3, [r7, #0]
 801a58a:	9300      	str	r3, [sp, #0]
 801a58c:	697b      	ldr	r3, [r7, #20]
 801a58e:	2200      	movs	r2, #0
 801a590:	2140      	movs	r1, #64	; 0x40
 801a592:	68f8      	ldr	r0, [r7, #12]
 801a594:	f000 fa90 	bl	801aab8 <UART_WaitOnFlagUntilTimeout>
 801a598:	4603      	mov	r3, r0
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d001      	beq.n	801a5a2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801a59e:	2303      	movs	r3, #3
 801a5a0:	e006      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801a5a2:	68fb      	ldr	r3, [r7, #12]
 801a5a4:	2220      	movs	r2, #32
 801a5a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	e000      	b.n	801a5b0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801a5ae:	2302      	movs	r3, #2
  }
}
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3718      	adds	r7, #24
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}

0801a5b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a5b8:	b480      	push	{r7}
 801a5ba:	b085      	sub	sp, #20
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	60f8      	str	r0, [r7, #12]
 801a5c0:	60b9      	str	r1, [r7, #8]
 801a5c2:	4613      	mov	r3, r2
 801a5c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a5cc:	b2db      	uxtb	r3, r3
 801a5ce:	2b20      	cmp	r3, #32
 801a5d0:	d140      	bne.n	801a654 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d002      	beq.n	801a5de <HAL_UART_Receive_IT+0x26>
 801a5d8:	88fb      	ldrh	r3, [r7, #6]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d101      	bne.n	801a5e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801a5de:	2301      	movs	r3, #1
 801a5e0:	e039      	b.n	801a656 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a5e8:	2b01      	cmp	r3, #1
 801a5ea:	d101      	bne.n	801a5f0 <HAL_UART_Receive_IT+0x38>
 801a5ec:	2302      	movs	r3, #2
 801a5ee:	e032      	b.n	801a656 <HAL_UART_Receive_IT+0x9e>
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	2201      	movs	r2, #1
 801a5f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	68ba      	ldr	r2, [r7, #8]
 801a5fc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	88fa      	ldrh	r2, [r7, #6]
 801a602:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	88fa      	ldrh	r2, [r7, #6]
 801a608:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2200      	movs	r2, #0
 801a60e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a610:	68fb      	ldr	r3, [r7, #12]
 801a612:	2222      	movs	r2, #34	; 0x22
 801a614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	2200      	movs	r2, #0
 801a61c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801a620:	68fb      	ldr	r3, [r7, #12]
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	68da      	ldr	r2, [r3, #12]
 801a626:	68fb      	ldr	r3, [r7, #12]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a62e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	695a      	ldr	r2, [r3, #20]
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	f042 0201 	orr.w	r2, r2, #1
 801a63e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801a640:	68fb      	ldr	r3, [r7, #12]
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	68da      	ldr	r2, [r3, #12]
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	f042 0220 	orr.w	r2, r2, #32
 801a64e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801a650:	2300      	movs	r3, #0
 801a652:	e000      	b.n	801a656 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 801a654:	2302      	movs	r3, #2
  }
}
 801a656:	4618      	mov	r0, r3
 801a658:	3714      	adds	r7, #20
 801a65a:	46bd      	mov	sp, r7
 801a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a660:	4770      	bx	lr
	...

0801a664 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a664:	b580      	push	{r7, lr}
 801a666:	b086      	sub	sp, #24
 801a668:	af00      	add	r7, sp, #0
 801a66a:	60f8      	str	r0, [r7, #12]
 801a66c:	60b9      	str	r1, [r7, #8]
 801a66e:	4613      	mov	r3, r2
 801a670:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801a672:	68fb      	ldr	r3, [r7, #12]
 801a674:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	2b20      	cmp	r3, #32
 801a67c:	d166      	bne.n	801a74c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801a67e:	68bb      	ldr	r3, [r7, #8]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d002      	beq.n	801a68a <HAL_UART_Receive_DMA+0x26>
 801a684:	88fb      	ldrh	r3, [r7, #6]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d101      	bne.n	801a68e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801a68a:	2301      	movs	r3, #1
 801a68c:	e05f      	b.n	801a74e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a694:	2b01      	cmp	r3, #1
 801a696:	d101      	bne.n	801a69c <HAL_UART_Receive_DMA+0x38>
 801a698:	2302      	movs	r3, #2
 801a69a:	e058      	b.n	801a74e <HAL_UART_Receive_DMA+0xea>
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	2201      	movs	r2, #1
 801a6a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 801a6a4:	68ba      	ldr	r2, [r7, #8]
 801a6a6:	68fb      	ldr	r3, [r7, #12]
 801a6a8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	88fa      	ldrh	r2, [r7, #6]
 801a6ae:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a6b0:	68fb      	ldr	r3, [r7, #12]
 801a6b2:	2200      	movs	r2, #0
 801a6b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a6b6:	68fb      	ldr	r3, [r7, #12]
 801a6b8:	2222      	movs	r2, #34	; 0x22
 801a6ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6c2:	4a25      	ldr	r2, [pc, #148]	; (801a758 <HAL_UART_Receive_DMA+0xf4>)
 801a6c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6ca:	4a24      	ldr	r2, [pc, #144]	; (801a75c <HAL_UART_Receive_DMA+0xf8>)
 801a6cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801a6ce:	68fb      	ldr	r3, [r7, #12]
 801a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6d2:	4a23      	ldr	r2, [pc, #140]	; (801a760 <HAL_UART_Receive_DMA+0xfc>)
 801a6d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6da:	2200      	movs	r2, #0
 801a6dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801a6de:	f107 0308 	add.w	r3, r7, #8
 801a6e2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801a6e8:	68fb      	ldr	r3, [r7, #12]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	3304      	adds	r3, #4
 801a6ee:	4619      	mov	r1, r3
 801a6f0:	697b      	ldr	r3, [r7, #20]
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	88fb      	ldrh	r3, [r7, #6]
 801a6f6:	f7fa ffbd 	bl	8015674 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	613b      	str	r3, [r7, #16]
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	613b      	str	r3, [r7, #16]
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	685b      	ldr	r3, [r3, #4]
 801a70c:	613b      	str	r3, [r7, #16]
 801a70e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	2200      	movs	r2, #0
 801a714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a718:	68fb      	ldr	r3, [r7, #12]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	68da      	ldr	r2, [r3, #12]
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a726:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a728:	68fb      	ldr	r3, [r7, #12]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	695a      	ldr	r2, [r3, #20]
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	f042 0201 	orr.w	r2, r2, #1
 801a736:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	695a      	ldr	r2, [r3, #20]
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a746:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 801a748:	2300      	movs	r3, #0
 801a74a:	e000      	b.n	801a74e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 801a74c:	2302      	movs	r3, #2
  }
}
 801a74e:	4618      	mov	r0, r3
 801a750:	3718      	adds	r7, #24
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}
 801a756:	bf00      	nop
 801a758:	0801a9a1 	.word	0x0801a9a1
 801a75c:	0801aa09 	.word	0x0801aa09
 801a760:	0801aa25 	.word	0x0801aa25

0801a764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b088      	sub	sp, #32
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	68db      	ldr	r3, [r3, #12]
 801a77a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	695b      	ldr	r3, [r3, #20]
 801a782:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 801a784:	2300      	movs	r3, #0
 801a786:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 801a788:	2300      	movs	r3, #0
 801a78a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801a78c:	69fb      	ldr	r3, [r7, #28]
 801a78e:	f003 030f 	and.w	r3, r3, #15
 801a792:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d10d      	bne.n	801a7b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801a79a:	69fb      	ldr	r3, [r7, #28]
 801a79c:	f003 0320 	and.w	r3, r3, #32
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d008      	beq.n	801a7b6 <HAL_UART_IRQHandler+0x52>
 801a7a4:	69bb      	ldr	r3, [r7, #24]
 801a7a6:	f003 0320 	and.w	r3, r3, #32
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d003      	beq.n	801a7b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801a7ae:	6878      	ldr	r0, [r7, #4]
 801a7b0:	f000 fa82 	bl	801acb8 <UART_Receive_IT>
      return;
 801a7b4:	e0d0      	b.n	801a958 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	f000 80b0 	beq.w	801a91e <HAL_UART_IRQHandler+0x1ba>
 801a7be:	697b      	ldr	r3, [r7, #20]
 801a7c0:	f003 0301 	and.w	r3, r3, #1
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d105      	bne.n	801a7d4 <HAL_UART_IRQHandler+0x70>
 801a7c8:	69bb      	ldr	r3, [r7, #24]
 801a7ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	f000 80a5 	beq.w	801a91e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801a7d4:	69fb      	ldr	r3, [r7, #28]
 801a7d6:	f003 0301 	and.w	r3, r3, #1
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	d00a      	beq.n	801a7f4 <HAL_UART_IRQHandler+0x90>
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	d005      	beq.n	801a7f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7ec:	f043 0201 	orr.w	r2, r3, #1
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801a7f4:	69fb      	ldr	r3, [r7, #28]
 801a7f6:	f003 0304 	and.w	r3, r3, #4
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d00a      	beq.n	801a814 <HAL_UART_IRQHandler+0xb0>
 801a7fe:	697b      	ldr	r3, [r7, #20]
 801a800:	f003 0301 	and.w	r3, r3, #1
 801a804:	2b00      	cmp	r3, #0
 801a806:	d005      	beq.n	801a814 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a80c:	f043 0202 	orr.w	r2, r3, #2
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801a814:	69fb      	ldr	r3, [r7, #28]
 801a816:	f003 0302 	and.w	r3, r3, #2
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d00a      	beq.n	801a834 <HAL_UART_IRQHandler+0xd0>
 801a81e:	697b      	ldr	r3, [r7, #20]
 801a820:	f003 0301 	and.w	r3, r3, #1
 801a824:	2b00      	cmp	r3, #0
 801a826:	d005      	beq.n	801a834 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a82c:	f043 0204 	orr.w	r2, r3, #4
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 801a834:	69fb      	ldr	r3, [r7, #28]
 801a836:	f003 0308 	and.w	r3, r3, #8
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d00f      	beq.n	801a85e <HAL_UART_IRQHandler+0xfa>
 801a83e:	69bb      	ldr	r3, [r7, #24]
 801a840:	f003 0320 	and.w	r3, r3, #32
 801a844:	2b00      	cmp	r3, #0
 801a846:	d104      	bne.n	801a852 <HAL_UART_IRQHandler+0xee>
 801a848:	697b      	ldr	r3, [r7, #20]
 801a84a:	f003 0301 	and.w	r3, r3, #1
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d005      	beq.n	801a85e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a856:	f043 0208 	orr.w	r2, r3, #8
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a862:	2b00      	cmp	r3, #0
 801a864:	d077      	beq.n	801a956 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	f003 0320 	and.w	r3, r3, #32
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d007      	beq.n	801a880 <HAL_UART_IRQHandler+0x11c>
 801a870:	69bb      	ldr	r3, [r7, #24]
 801a872:	f003 0320 	and.w	r3, r3, #32
 801a876:	2b00      	cmp	r3, #0
 801a878:	d002      	beq.n	801a880 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801a87a:	6878      	ldr	r0, [r7, #4]
 801a87c:	f000 fa1c 	bl	801acb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	695b      	ldr	r3, [r3, #20]
 801a886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a88a:	2b40      	cmp	r3, #64	; 0x40
 801a88c:	bf0c      	ite	eq
 801a88e:	2301      	moveq	r3, #1
 801a890:	2300      	movne	r3, #0
 801a892:	b2db      	uxtb	r3, r3
 801a894:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a89a:	f003 0308 	and.w	r3, r3, #8
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d102      	bne.n	801a8a8 <HAL_UART_IRQHandler+0x144>
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d031      	beq.n	801a90c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801a8a8:	6878      	ldr	r0, [r7, #4]
 801a8aa:	f000 f965 	bl	801ab78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	695b      	ldr	r3, [r3, #20]
 801a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a8b8:	2b40      	cmp	r3, #64	; 0x40
 801a8ba:	d123      	bne.n	801a904 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	695a      	ldr	r2, [r3, #20]
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a8ca:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d013      	beq.n	801a8fc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8d8:	4a21      	ldr	r2, [pc, #132]	; (801a960 <HAL_UART_IRQHandler+0x1fc>)
 801a8da:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f7fa ff1f 	bl	8015724 <HAL_DMA_Abort_IT>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d016      	beq.n	801a91a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8f2:	687a      	ldr	r2, [r7, #4]
 801a8f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801a8f6:	4610      	mov	r0, r2
 801a8f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a8fa:	e00e      	b.n	801a91a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801a8fc:	6878      	ldr	r0, [r7, #4]
 801a8fe:	f000 f845 	bl	801a98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a902:	e00a      	b.n	801a91a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a904:	6878      	ldr	r0, [r7, #4]
 801a906:	f000 f841 	bl	801a98c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a90a:	e006      	b.n	801a91a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f000 f83d 	bl	801a98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2200      	movs	r2, #0
 801a916:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 801a918:	e01d      	b.n	801a956 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801a91a:	bf00      	nop
    return;
 801a91c:	e01b      	b.n	801a956 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801a91e:	69fb      	ldr	r3, [r7, #28]
 801a920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a924:	2b00      	cmp	r3, #0
 801a926:	d008      	beq.n	801a93a <HAL_UART_IRQHandler+0x1d6>
 801a928:	69bb      	ldr	r3, [r7, #24]
 801a92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d003      	beq.n	801a93a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801a932:	6878      	ldr	r0, [r7, #4]
 801a934:	f000 f952 	bl	801abdc <UART_Transmit_IT>
    return;
 801a938:	e00e      	b.n	801a958 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a940:	2b00      	cmp	r3, #0
 801a942:	d009      	beq.n	801a958 <HAL_UART_IRQHandler+0x1f4>
 801a944:	69bb      	ldr	r3, [r7, #24]
 801a946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d004      	beq.n	801a958 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801a94e:	6878      	ldr	r0, [r7, #4]
 801a950:	f000 f99a 	bl	801ac88 <UART_EndTransmit_IT>
    return;
 801a954:	e000      	b.n	801a958 <HAL_UART_IRQHandler+0x1f4>
    return;
 801a956:	bf00      	nop
  }
}
 801a958:	3720      	adds	r7, #32
 801a95a:	46bd      	mov	sp, r7
 801a95c:	bd80      	pop	{r7, pc}
 801a95e:	bf00      	nop
 801a960:	0801abb5 	.word	0x0801abb5

0801a964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801a964:	b480      	push	{r7}
 801a966:	b083      	sub	sp, #12
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 801a96c:	bf00      	nop
 801a96e:	370c      	adds	r7, #12
 801a970:	46bd      	mov	sp, r7
 801a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a976:	4770      	bx	lr

0801a978 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801a978:	b480      	push	{r7}
 801a97a:	b083      	sub	sp, #12
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 801a980:	bf00      	nop
 801a982:	370c      	adds	r7, #12
 801a984:	46bd      	mov	sp, r7
 801a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98a:	4770      	bx	lr

0801a98c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801a98c:	b480      	push	{r7}
 801a98e:	b083      	sub	sp, #12
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801a994:	bf00      	nop
 801a996:	370c      	adds	r7, #12
 801a998:	46bd      	mov	sp, r7
 801a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99e:	4770      	bx	lr

0801a9a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b084      	sub	sp, #16
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9ac:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d11e      	bne.n	801a9fa <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	2200      	movs	r2, #0
 801a9c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	68da      	ldr	r2, [r3, #12]
 801a9c8:	68fb      	ldr	r3, [r7, #12]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a9d0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	695a      	ldr	r2, [r3, #20]
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	f022 0201 	bic.w	r2, r2, #1
 801a9e0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	695a      	ldr	r2, [r3, #20]
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a9f0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	2220      	movs	r2, #32
 801a9f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 801a9fa:	68f8      	ldr	r0, [r7, #12]
 801a9fc:	f7ea fe8c 	bl	8005718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801aa00:	bf00      	nop
 801aa02:	3710      	adds	r7, #16
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	b084      	sub	sp, #16
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa14:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 801aa16:	68f8      	ldr	r0, [r7, #12]
 801aa18:	f7ff ffae 	bl	801a978 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801aa1c:	bf00      	nop
 801aa1e:	3710      	adds	r7, #16
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}

0801aa24 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b084      	sub	sp, #16
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa34:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801aa36:	68bb      	ldr	r3, [r7, #8]
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	695b      	ldr	r3, [r3, #20]
 801aa3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa40:	2b80      	cmp	r3, #128	; 0x80
 801aa42:	bf0c      	ite	eq
 801aa44:	2301      	moveq	r3, #1
 801aa46:	2300      	movne	r3, #0
 801aa48:	b2db      	uxtb	r3, r3
 801aa4a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801aa52:	b2db      	uxtb	r3, r3
 801aa54:	2b21      	cmp	r3, #33	; 0x21
 801aa56:	d108      	bne.n	801aa6a <UART_DMAError+0x46>
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d005      	beq.n	801aa6a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	2200      	movs	r2, #0
 801aa62:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801aa64:	68b8      	ldr	r0, [r7, #8]
 801aa66:	f000 f871 	bl	801ab4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	695b      	ldr	r3, [r3, #20]
 801aa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa74:	2b40      	cmp	r3, #64	; 0x40
 801aa76:	bf0c      	ite	eq
 801aa78:	2301      	moveq	r3, #1
 801aa7a:	2300      	movne	r3, #0
 801aa7c:	b2db      	uxtb	r3, r3
 801aa7e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801aa86:	b2db      	uxtb	r3, r3
 801aa88:	2b22      	cmp	r3, #34	; 0x22
 801aa8a:	d108      	bne.n	801aa9e <UART_DMAError+0x7a>
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d005      	beq.n	801aa9e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	2200      	movs	r2, #0
 801aa96:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801aa98:	68b8      	ldr	r0, [r7, #8]
 801aa9a:	f000 f86d 	bl	801ab78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801aa9e:	68bb      	ldr	r3, [r7, #8]
 801aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aaa2:	f043 0210 	orr.w	r2, r3, #16
 801aaa6:	68bb      	ldr	r3, [r7, #8]
 801aaa8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801aaaa:	68b8      	ldr	r0, [r7, #8]
 801aaac:	f7ff ff6e 	bl	801a98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801aab0:	bf00      	nop
 801aab2:	3710      	adds	r7, #16
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}

0801aab8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b084      	sub	sp, #16
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	60f8      	str	r0, [r7, #12]
 801aac0:	60b9      	str	r1, [r7, #8]
 801aac2:	603b      	str	r3, [r7, #0]
 801aac4:	4613      	mov	r3, r2
 801aac6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801aac8:	e02c      	b.n	801ab24 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801aaca:	69bb      	ldr	r3, [r7, #24]
 801aacc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801aad0:	d028      	beq.n	801ab24 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801aad2:	69bb      	ldr	r3, [r7, #24]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d007      	beq.n	801aae8 <UART_WaitOnFlagUntilTimeout+0x30>
 801aad8:	f7f9 f8ce 	bl	8013c78 <HAL_GetTick>
 801aadc:	4602      	mov	r2, r0
 801aade:	683b      	ldr	r3, [r7, #0]
 801aae0:	1ad3      	subs	r3, r2, r3
 801aae2:	69ba      	ldr	r2, [r7, #24]
 801aae4:	429a      	cmp	r2, r3
 801aae6:	d21d      	bcs.n	801ab24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	68da      	ldr	r2, [r3, #12]
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801aaf6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	695a      	ldr	r2, [r3, #20]
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	f022 0201 	bic.w	r2, r2, #1
 801ab06:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	2220      	movs	r2, #32
 801ab0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	2220      	movs	r2, #32
 801ab14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801ab20:	2303      	movs	r3, #3
 801ab22:	e00f      	b.n	801ab44 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	681a      	ldr	r2, [r3, #0]
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	4013      	ands	r3, r2
 801ab2e:	68ba      	ldr	r2, [r7, #8]
 801ab30:	429a      	cmp	r2, r3
 801ab32:	bf0c      	ite	eq
 801ab34:	2301      	moveq	r3, #1
 801ab36:	2300      	movne	r3, #0
 801ab38:	b2db      	uxtb	r3, r3
 801ab3a:	461a      	mov	r2, r3
 801ab3c:	79fb      	ldrb	r3, [r7, #7]
 801ab3e:	429a      	cmp	r2, r3
 801ab40:	d0c3      	beq.n	801aaca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801ab42:	2300      	movs	r3, #0
}
 801ab44:	4618      	mov	r0, r3
 801ab46:	3710      	adds	r7, #16
 801ab48:	46bd      	mov	sp, r7
 801ab4a:	bd80      	pop	{r7, pc}

0801ab4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ab4c:	b480      	push	{r7}
 801ab4e:	b083      	sub	sp, #12
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	68da      	ldr	r2, [r3, #12]
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801ab62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2220      	movs	r2, #32
 801ab68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 801ab6c:	bf00      	nop
 801ab6e:	370c      	adds	r7, #12
 801ab70:	46bd      	mov	sp, r7
 801ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab76:	4770      	bx	lr

0801ab78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ab78:	b480      	push	{r7}
 801ab7a:	b083      	sub	sp, #12
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	68da      	ldr	r2, [r3, #12]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801ab8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	695a      	ldr	r2, [r3, #20]
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	f022 0201 	bic.w	r2, r2, #1
 801ab9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2220      	movs	r2, #32
 801aba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 801aba8:	bf00      	nop
 801abaa:	370c      	adds	r7, #12
 801abac:	46bd      	mov	sp, r7
 801abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abb2:	4770      	bx	lr

0801abb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	2200      	movs	r2, #0
 801abc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801abc8:	68fb      	ldr	r3, [r7, #12]
 801abca:	2200      	movs	r2, #0
 801abcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801abce:	68f8      	ldr	r0, [r7, #12]
 801abd0:	f7ff fedc 	bl	801a98c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801abd4:	bf00      	nop
 801abd6:	3710      	adds	r7, #16
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}

0801abdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801abdc:	b480      	push	{r7}
 801abde:	b085      	sub	sp, #20
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801abea:	b2db      	uxtb	r3, r3
 801abec:	2b21      	cmp	r3, #33	; 0x21
 801abee:	d144      	bne.n	801ac7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	689b      	ldr	r3, [r3, #8]
 801abf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801abf8:	d11a      	bne.n	801ac30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	6a1b      	ldr	r3, [r3, #32]
 801abfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	881b      	ldrh	r3, [r3, #0]
 801ac04:	461a      	mov	r2, r3
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ac0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	691b      	ldr	r3, [r3, #16]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d105      	bne.n	801ac24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	6a1b      	ldr	r3, [r3, #32]
 801ac1c:	1c9a      	adds	r2, r3, #2
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	621a      	str	r2, [r3, #32]
 801ac22:	e00e      	b.n	801ac42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	6a1b      	ldr	r3, [r3, #32]
 801ac28:	1c5a      	adds	r2, r3, #1
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	621a      	str	r2, [r3, #32]
 801ac2e:	e008      	b.n	801ac42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	6a1b      	ldr	r3, [r3, #32]
 801ac34:	1c59      	adds	r1, r3, #1
 801ac36:	687a      	ldr	r2, [r7, #4]
 801ac38:	6211      	str	r1, [r2, #32]
 801ac3a:	781a      	ldrb	r2, [r3, #0]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	3b01      	subs	r3, #1
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	687a      	ldr	r2, [r7, #4]
 801ac4e:	4619      	mov	r1, r3
 801ac50:	84d1      	strh	r1, [r2, #38]	; 0x26
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d10f      	bne.n	801ac76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	68da      	ldr	r2, [r3, #12]
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ac64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	68da      	ldr	r2, [r3, #12]
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ac74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801ac76:	2300      	movs	r3, #0
 801ac78:	e000      	b.n	801ac7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801ac7a:	2302      	movs	r3, #2
  }
}
 801ac7c:	4618      	mov	r0, r3
 801ac7e:	3714      	adds	r7, #20
 801ac80:	46bd      	mov	sp, r7
 801ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac86:	4770      	bx	lr

0801ac88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b082      	sub	sp, #8
 801ac8c:	af00      	add	r7, sp, #0
 801ac8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	68da      	ldr	r2, [r3, #12]
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ac9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	2220      	movs	r2, #32
 801aca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7ff fe5b 	bl	801a964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801acae:	2300      	movs	r3, #0
}
 801acb0:	4618      	mov	r0, r3
 801acb2:	3708      	adds	r7, #8
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801acb8:	b580      	push	{r7, lr}
 801acba:	b084      	sub	sp, #16
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801acc6:	b2db      	uxtb	r3, r3
 801acc8:	2b22      	cmp	r3, #34	; 0x22
 801acca:	d171      	bne.n	801adb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	689b      	ldr	r3, [r3, #8]
 801acd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801acd4:	d123      	bne.n	801ad1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	691b      	ldr	r3, [r3, #16]
 801ace0:	2b00      	cmp	r3, #0
 801ace2:	d10e      	bne.n	801ad02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	685b      	ldr	r3, [r3, #4]
 801acea:	b29b      	uxth	r3, r3
 801acec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801acf0:	b29a      	uxth	r2, r3
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acfa:	1c9a      	adds	r2, r3, #2
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	629a      	str	r2, [r3, #40]	; 0x28
 801ad00:	e029      	b.n	801ad56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	685b      	ldr	r3, [r3, #4]
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	b2db      	uxtb	r3, r3
 801ad0c:	b29a      	uxth	r2, r3
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad16:	1c5a      	adds	r2, r3, #1
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	629a      	str	r2, [r3, #40]	; 0x28
 801ad1c:	e01b      	b.n	801ad56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	691b      	ldr	r3, [r3, #16]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d10a      	bne.n	801ad3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	6858      	ldr	r0, [r3, #4]
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad30:	1c59      	adds	r1, r3, #1
 801ad32:	687a      	ldr	r2, [r7, #4]
 801ad34:	6291      	str	r1, [r2, #40]	; 0x28
 801ad36:	b2c2      	uxtb	r2, r0
 801ad38:	701a      	strb	r2, [r3, #0]
 801ad3a:	e00c      	b.n	801ad56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	685b      	ldr	r3, [r3, #4]
 801ad42:	b2da      	uxtb	r2, r3
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad48:	1c58      	adds	r0, r3, #1
 801ad4a:	6879      	ldr	r1, [r7, #4]
 801ad4c:	6288      	str	r0, [r1, #40]	; 0x28
 801ad4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ad52:	b2d2      	uxtb	r2, r2
 801ad54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	687a      	ldr	r2, [r7, #4]
 801ad62:	4619      	mov	r1, r3
 801ad64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d120      	bne.n	801adac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	68da      	ldr	r2, [r3, #12]
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	681b      	ldr	r3, [r3, #0]
 801ad74:	f022 0220 	bic.w	r2, r2, #32
 801ad78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	68da      	ldr	r2, [r3, #12]
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801ad88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	695a      	ldr	r2, [r3, #20]
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	f022 0201 	bic.w	r2, r2, #1
 801ad98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	2220      	movs	r2, #32
 801ad9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801ada2:	6878      	ldr	r0, [r7, #4]
 801ada4:	f7ea fcb8 	bl	8005718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 801ada8:	2300      	movs	r3, #0
 801adaa:	e002      	b.n	801adb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801adac:	2300      	movs	r3, #0
 801adae:	e000      	b.n	801adb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801adb0:	2302      	movs	r3, #2
  }
}
 801adb2:	4618      	mov	r0, r3
 801adb4:	3710      	adds	r7, #16
 801adb6:	46bd      	mov	sp, r7
 801adb8:	bd80      	pop	{r7, pc}
	...

0801adbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc0:	b0bd      	sub	sp, #244	; 0xf4
 801adc2:	af00      	add	r7, sp, #0
 801adc4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801adc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	691b      	ldr	r3, [r3, #16]
 801add0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801add4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801add8:	68d9      	ldr	r1, [r3, #12]
 801adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801adde:	681a      	ldr	r2, [r3, #0]
 801ade0:	ea40 0301 	orr.w	r3, r0, r1
 801ade4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801ade6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801adea:	689a      	ldr	r2, [r3, #8]
 801adec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801adf0:	691b      	ldr	r3, [r3, #16]
 801adf2:	431a      	orrs	r2, r3
 801adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801adf8:	695b      	ldr	r3, [r3, #20]
 801adfa:	431a      	orrs	r2, r3
 801adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae00:	69db      	ldr	r3, [r3, #28]
 801ae02:	4313      	orrs	r3, r2
 801ae04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 801ae08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	68db      	ldr	r3, [r3, #12]
 801ae10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801ae14:	f021 010c 	bic.w	r1, r1, #12
 801ae18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae1c:	681a      	ldr	r2, [r3, #0]
 801ae1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801ae22:	430b      	orrs	r3, r1
 801ae24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801ae26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	695b      	ldr	r3, [r3, #20]
 801ae2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801ae32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae36:	6999      	ldr	r1, [r3, #24]
 801ae38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae3c:	681a      	ldr	r2, [r3, #0]
 801ae3e:	ea40 0301 	orr.w	r3, r0, r1
 801ae42:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801ae44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae48:	69db      	ldr	r3, [r3, #28]
 801ae4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ae4e:	f040 81a5 	bne.w	801b19c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801ae52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae56:	681a      	ldr	r2, [r3, #0]
 801ae58:	4bcd      	ldr	r3, [pc, #820]	; (801b190 <UART_SetConfig+0x3d4>)
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d006      	beq.n	801ae6c <UART_SetConfig+0xb0>
 801ae5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ae62:	681a      	ldr	r2, [r3, #0]
 801ae64:	4bcb      	ldr	r3, [pc, #812]	; (801b194 <UART_SetConfig+0x3d8>)
 801ae66:	429a      	cmp	r2, r3
 801ae68:	f040 80cb 	bne.w	801b002 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801ae6c:	f7fe f95a 	bl	8019124 <HAL_RCC_GetPCLK2Freq>
 801ae70:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801ae74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801ae78:	461c      	mov	r4, r3
 801ae7a:	f04f 0500 	mov.w	r5, #0
 801ae7e:	4622      	mov	r2, r4
 801ae80:	462b      	mov	r3, r5
 801ae82:	1891      	adds	r1, r2, r2
 801ae84:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 801ae88:	415b      	adcs	r3, r3
 801ae8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801ae8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801ae92:	1912      	adds	r2, r2, r4
 801ae94:	eb45 0303 	adc.w	r3, r5, r3
 801ae98:	f04f 0000 	mov.w	r0, #0
 801ae9c:	f04f 0100 	mov.w	r1, #0
 801aea0:	00d9      	lsls	r1, r3, #3
 801aea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801aea6:	00d0      	lsls	r0, r2, #3
 801aea8:	4602      	mov	r2, r0
 801aeaa:	460b      	mov	r3, r1
 801aeac:	1911      	adds	r1, r2, r4
 801aeae:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801aeb2:	416b      	adcs	r3, r5
 801aeb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801aeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aebc:	685b      	ldr	r3, [r3, #4]
 801aebe:	461a      	mov	r2, r3
 801aec0:	f04f 0300 	mov.w	r3, #0
 801aec4:	1891      	adds	r1, r2, r2
 801aec6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 801aeca:	415b      	adcs	r3, r3
 801aecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801aed0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 801aed4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 801aed8:	f7e5 fed6 	bl	8000c88 <__aeabi_uldivmod>
 801aedc:	4602      	mov	r2, r0
 801aede:	460b      	mov	r3, r1
 801aee0:	4bad      	ldr	r3, [pc, #692]	; (801b198 <UART_SetConfig+0x3dc>)
 801aee2:	fba3 2302 	umull	r2, r3, r3, r2
 801aee6:	095b      	lsrs	r3, r3, #5
 801aee8:	011e      	lsls	r6, r3, #4
 801aeea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801aeee:	461c      	mov	r4, r3
 801aef0:	f04f 0500 	mov.w	r5, #0
 801aef4:	4622      	mov	r2, r4
 801aef6:	462b      	mov	r3, r5
 801aef8:	1891      	adds	r1, r2, r2
 801aefa:	67b9      	str	r1, [r7, #120]	; 0x78
 801aefc:	415b      	adcs	r3, r3
 801aefe:	67fb      	str	r3, [r7, #124]	; 0x7c
 801af00:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 801af04:	1912      	adds	r2, r2, r4
 801af06:	eb45 0303 	adc.w	r3, r5, r3
 801af0a:	f04f 0000 	mov.w	r0, #0
 801af0e:	f04f 0100 	mov.w	r1, #0
 801af12:	00d9      	lsls	r1, r3, #3
 801af14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801af18:	00d0      	lsls	r0, r2, #3
 801af1a:	4602      	mov	r2, r0
 801af1c:	460b      	mov	r3, r1
 801af1e:	1911      	adds	r1, r2, r4
 801af20:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 801af24:	416b      	adcs	r3, r5
 801af26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801af2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801af2e:	685b      	ldr	r3, [r3, #4]
 801af30:	461a      	mov	r2, r3
 801af32:	f04f 0300 	mov.w	r3, #0
 801af36:	1891      	adds	r1, r2, r2
 801af38:	6739      	str	r1, [r7, #112]	; 0x70
 801af3a:	415b      	adcs	r3, r3
 801af3c:	677b      	str	r3, [r7, #116]	; 0x74
 801af3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 801af42:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 801af46:	f7e5 fe9f 	bl	8000c88 <__aeabi_uldivmod>
 801af4a:	4602      	mov	r2, r0
 801af4c:	460b      	mov	r3, r1
 801af4e:	4b92      	ldr	r3, [pc, #584]	; (801b198 <UART_SetConfig+0x3dc>)
 801af50:	fba3 1302 	umull	r1, r3, r3, r2
 801af54:	095b      	lsrs	r3, r3, #5
 801af56:	2164      	movs	r1, #100	; 0x64
 801af58:	fb01 f303 	mul.w	r3, r1, r3
 801af5c:	1ad3      	subs	r3, r2, r3
 801af5e:	00db      	lsls	r3, r3, #3
 801af60:	3332      	adds	r3, #50	; 0x32
 801af62:	4a8d      	ldr	r2, [pc, #564]	; (801b198 <UART_SetConfig+0x3dc>)
 801af64:	fba2 2303 	umull	r2, r3, r2, r3
 801af68:	095b      	lsrs	r3, r3, #5
 801af6a:	005b      	lsls	r3, r3, #1
 801af6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801af70:	441e      	add	r6, r3
 801af72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801af76:	4618      	mov	r0, r3
 801af78:	f04f 0100 	mov.w	r1, #0
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	1894      	adds	r4, r2, r2
 801af82:	66bc      	str	r4, [r7, #104]	; 0x68
 801af84:	415b      	adcs	r3, r3
 801af86:	66fb      	str	r3, [r7, #108]	; 0x6c
 801af88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801af8c:	1812      	adds	r2, r2, r0
 801af8e:	eb41 0303 	adc.w	r3, r1, r3
 801af92:	f04f 0400 	mov.w	r4, #0
 801af96:	f04f 0500 	mov.w	r5, #0
 801af9a:	00dd      	lsls	r5, r3, #3
 801af9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801afa0:	00d4      	lsls	r4, r2, #3
 801afa2:	4622      	mov	r2, r4
 801afa4:	462b      	mov	r3, r5
 801afa6:	1814      	adds	r4, r2, r0
 801afa8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 801afac:	414b      	adcs	r3, r1
 801afae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801afb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afb6:	685b      	ldr	r3, [r3, #4]
 801afb8:	461a      	mov	r2, r3
 801afba:	f04f 0300 	mov.w	r3, #0
 801afbe:	1891      	adds	r1, r2, r2
 801afc0:	6639      	str	r1, [r7, #96]	; 0x60
 801afc2:	415b      	adcs	r3, r3
 801afc4:	667b      	str	r3, [r7, #100]	; 0x64
 801afc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801afca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801afce:	f7e5 fe5b 	bl	8000c88 <__aeabi_uldivmod>
 801afd2:	4602      	mov	r2, r0
 801afd4:	460b      	mov	r3, r1
 801afd6:	4b70      	ldr	r3, [pc, #448]	; (801b198 <UART_SetConfig+0x3dc>)
 801afd8:	fba3 1302 	umull	r1, r3, r3, r2
 801afdc:	095b      	lsrs	r3, r3, #5
 801afde:	2164      	movs	r1, #100	; 0x64
 801afe0:	fb01 f303 	mul.w	r3, r1, r3
 801afe4:	1ad3      	subs	r3, r2, r3
 801afe6:	00db      	lsls	r3, r3, #3
 801afe8:	3332      	adds	r3, #50	; 0x32
 801afea:	4a6b      	ldr	r2, [pc, #428]	; (801b198 <UART_SetConfig+0x3dc>)
 801afec:	fba2 2303 	umull	r2, r3, r2, r3
 801aff0:	095b      	lsrs	r3, r3, #5
 801aff2:	f003 0207 	and.w	r2, r3, #7
 801aff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	4432      	add	r2, r6
 801affe:	609a      	str	r2, [r3, #8]
 801b000:	e26d      	b.n	801b4de <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801b002:	f7fe f87b 	bl	80190fc <HAL_RCC_GetPCLK1Freq>
 801b006:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801b00a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b00e:	461c      	mov	r4, r3
 801b010:	f04f 0500 	mov.w	r5, #0
 801b014:	4622      	mov	r2, r4
 801b016:	462b      	mov	r3, r5
 801b018:	1891      	adds	r1, r2, r2
 801b01a:	65b9      	str	r1, [r7, #88]	; 0x58
 801b01c:	415b      	adcs	r3, r3
 801b01e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801b020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801b024:	1912      	adds	r2, r2, r4
 801b026:	eb45 0303 	adc.w	r3, r5, r3
 801b02a:	f04f 0000 	mov.w	r0, #0
 801b02e:	f04f 0100 	mov.w	r1, #0
 801b032:	00d9      	lsls	r1, r3, #3
 801b034:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b038:	00d0      	lsls	r0, r2, #3
 801b03a:	4602      	mov	r2, r0
 801b03c:	460b      	mov	r3, r1
 801b03e:	1911      	adds	r1, r2, r4
 801b040:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 801b044:	416b      	adcs	r3, r5
 801b046:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b04e:	685b      	ldr	r3, [r3, #4]
 801b050:	461a      	mov	r2, r3
 801b052:	f04f 0300 	mov.w	r3, #0
 801b056:	1891      	adds	r1, r2, r2
 801b058:	6539      	str	r1, [r7, #80]	; 0x50
 801b05a:	415b      	adcs	r3, r3
 801b05c:	657b      	str	r3, [r7, #84]	; 0x54
 801b05e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801b062:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 801b066:	f7e5 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 801b06a:	4602      	mov	r2, r0
 801b06c:	460b      	mov	r3, r1
 801b06e:	4b4a      	ldr	r3, [pc, #296]	; (801b198 <UART_SetConfig+0x3dc>)
 801b070:	fba3 2302 	umull	r2, r3, r3, r2
 801b074:	095b      	lsrs	r3, r3, #5
 801b076:	011e      	lsls	r6, r3, #4
 801b078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b07c:	461c      	mov	r4, r3
 801b07e:	f04f 0500 	mov.w	r5, #0
 801b082:	4622      	mov	r2, r4
 801b084:	462b      	mov	r3, r5
 801b086:	1891      	adds	r1, r2, r2
 801b088:	64b9      	str	r1, [r7, #72]	; 0x48
 801b08a:	415b      	adcs	r3, r3
 801b08c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b08e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801b092:	1912      	adds	r2, r2, r4
 801b094:	eb45 0303 	adc.w	r3, r5, r3
 801b098:	f04f 0000 	mov.w	r0, #0
 801b09c:	f04f 0100 	mov.w	r1, #0
 801b0a0:	00d9      	lsls	r1, r3, #3
 801b0a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b0a6:	00d0      	lsls	r0, r2, #3
 801b0a8:	4602      	mov	r2, r0
 801b0aa:	460b      	mov	r3, r1
 801b0ac:	1911      	adds	r1, r2, r4
 801b0ae:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801b0b2:	416b      	adcs	r3, r5
 801b0b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801b0b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0bc:	685b      	ldr	r3, [r3, #4]
 801b0be:	461a      	mov	r2, r3
 801b0c0:	f04f 0300 	mov.w	r3, #0
 801b0c4:	1891      	adds	r1, r2, r2
 801b0c6:	6439      	str	r1, [r7, #64]	; 0x40
 801b0c8:	415b      	adcs	r3, r3
 801b0ca:	647b      	str	r3, [r7, #68]	; 0x44
 801b0cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801b0d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 801b0d4:	f7e5 fdd8 	bl	8000c88 <__aeabi_uldivmod>
 801b0d8:	4602      	mov	r2, r0
 801b0da:	460b      	mov	r3, r1
 801b0dc:	4b2e      	ldr	r3, [pc, #184]	; (801b198 <UART_SetConfig+0x3dc>)
 801b0de:	fba3 1302 	umull	r1, r3, r3, r2
 801b0e2:	095b      	lsrs	r3, r3, #5
 801b0e4:	2164      	movs	r1, #100	; 0x64
 801b0e6:	fb01 f303 	mul.w	r3, r1, r3
 801b0ea:	1ad3      	subs	r3, r2, r3
 801b0ec:	00db      	lsls	r3, r3, #3
 801b0ee:	3332      	adds	r3, #50	; 0x32
 801b0f0:	4a29      	ldr	r2, [pc, #164]	; (801b198 <UART_SetConfig+0x3dc>)
 801b0f2:	fba2 2303 	umull	r2, r3, r2, r3
 801b0f6:	095b      	lsrs	r3, r3, #5
 801b0f8:	005b      	lsls	r3, r3, #1
 801b0fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801b0fe:	441e      	add	r6, r3
 801b100:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b104:	4618      	mov	r0, r3
 801b106:	f04f 0100 	mov.w	r1, #0
 801b10a:	4602      	mov	r2, r0
 801b10c:	460b      	mov	r3, r1
 801b10e:	1894      	adds	r4, r2, r2
 801b110:	63bc      	str	r4, [r7, #56]	; 0x38
 801b112:	415b      	adcs	r3, r3
 801b114:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b116:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801b11a:	1812      	adds	r2, r2, r0
 801b11c:	eb41 0303 	adc.w	r3, r1, r3
 801b120:	f04f 0400 	mov.w	r4, #0
 801b124:	f04f 0500 	mov.w	r5, #0
 801b128:	00dd      	lsls	r5, r3, #3
 801b12a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b12e:	00d4      	lsls	r4, r2, #3
 801b130:	4622      	mov	r2, r4
 801b132:	462b      	mov	r3, r5
 801b134:	1814      	adds	r4, r2, r0
 801b136:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 801b13a:	414b      	adcs	r3, r1
 801b13c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b144:	685b      	ldr	r3, [r3, #4]
 801b146:	461a      	mov	r2, r3
 801b148:	f04f 0300 	mov.w	r3, #0
 801b14c:	1891      	adds	r1, r2, r2
 801b14e:	6339      	str	r1, [r7, #48]	; 0x30
 801b150:	415b      	adcs	r3, r3
 801b152:	637b      	str	r3, [r7, #52]	; 0x34
 801b154:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801b158:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801b15c:	f7e5 fd94 	bl	8000c88 <__aeabi_uldivmod>
 801b160:	4602      	mov	r2, r0
 801b162:	460b      	mov	r3, r1
 801b164:	4b0c      	ldr	r3, [pc, #48]	; (801b198 <UART_SetConfig+0x3dc>)
 801b166:	fba3 1302 	umull	r1, r3, r3, r2
 801b16a:	095b      	lsrs	r3, r3, #5
 801b16c:	2164      	movs	r1, #100	; 0x64
 801b16e:	fb01 f303 	mul.w	r3, r1, r3
 801b172:	1ad3      	subs	r3, r2, r3
 801b174:	00db      	lsls	r3, r3, #3
 801b176:	3332      	adds	r3, #50	; 0x32
 801b178:	4a07      	ldr	r2, [pc, #28]	; (801b198 <UART_SetConfig+0x3dc>)
 801b17a:	fba2 2303 	umull	r2, r3, r2, r3
 801b17e:	095b      	lsrs	r3, r3, #5
 801b180:	f003 0207 	and.w	r2, r3, #7
 801b184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	4432      	add	r2, r6
 801b18c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801b18e:	e1a6      	b.n	801b4de <UART_SetConfig+0x722>
 801b190:	40011000 	.word	0x40011000
 801b194:	40011400 	.word	0x40011400
 801b198:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1a0:	681a      	ldr	r2, [r3, #0]
 801b1a2:	4bd1      	ldr	r3, [pc, #836]	; (801b4e8 <UART_SetConfig+0x72c>)
 801b1a4:	429a      	cmp	r2, r3
 801b1a6:	d006      	beq.n	801b1b6 <UART_SetConfig+0x3fa>
 801b1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1ac:	681a      	ldr	r2, [r3, #0]
 801b1ae:	4bcf      	ldr	r3, [pc, #828]	; (801b4ec <UART_SetConfig+0x730>)
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	f040 80ca 	bne.w	801b34a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 801b1b6:	f7fd ffb5 	bl	8019124 <HAL_RCC_GetPCLK2Freq>
 801b1ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b1be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b1c2:	461c      	mov	r4, r3
 801b1c4:	f04f 0500 	mov.w	r5, #0
 801b1c8:	4622      	mov	r2, r4
 801b1ca:	462b      	mov	r3, r5
 801b1cc:	1891      	adds	r1, r2, r2
 801b1ce:	62b9      	str	r1, [r7, #40]	; 0x28
 801b1d0:	415b      	adcs	r3, r3
 801b1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b1d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801b1d8:	1912      	adds	r2, r2, r4
 801b1da:	eb45 0303 	adc.w	r3, r5, r3
 801b1de:	f04f 0000 	mov.w	r0, #0
 801b1e2:	f04f 0100 	mov.w	r1, #0
 801b1e6:	00d9      	lsls	r1, r3, #3
 801b1e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b1ec:	00d0      	lsls	r0, r2, #3
 801b1ee:	4602      	mov	r2, r0
 801b1f0:	460b      	mov	r3, r1
 801b1f2:	eb12 0a04 	adds.w	sl, r2, r4
 801b1f6:	eb43 0b05 	adc.w	fp, r3, r5
 801b1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1fe:	685b      	ldr	r3, [r3, #4]
 801b200:	4618      	mov	r0, r3
 801b202:	f04f 0100 	mov.w	r1, #0
 801b206:	f04f 0200 	mov.w	r2, #0
 801b20a:	f04f 0300 	mov.w	r3, #0
 801b20e:	008b      	lsls	r3, r1, #2
 801b210:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b214:	0082      	lsls	r2, r0, #2
 801b216:	4650      	mov	r0, sl
 801b218:	4659      	mov	r1, fp
 801b21a:	f7e5 fd35 	bl	8000c88 <__aeabi_uldivmod>
 801b21e:	4602      	mov	r2, r0
 801b220:	460b      	mov	r3, r1
 801b222:	4bb3      	ldr	r3, [pc, #716]	; (801b4f0 <UART_SetConfig+0x734>)
 801b224:	fba3 2302 	umull	r2, r3, r3, r2
 801b228:	095b      	lsrs	r3, r3, #5
 801b22a:	011e      	lsls	r6, r3, #4
 801b22c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b230:	4618      	mov	r0, r3
 801b232:	f04f 0100 	mov.w	r1, #0
 801b236:	4602      	mov	r2, r0
 801b238:	460b      	mov	r3, r1
 801b23a:	1894      	adds	r4, r2, r2
 801b23c:	623c      	str	r4, [r7, #32]
 801b23e:	415b      	adcs	r3, r3
 801b240:	627b      	str	r3, [r7, #36]	; 0x24
 801b242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801b246:	1812      	adds	r2, r2, r0
 801b248:	eb41 0303 	adc.w	r3, r1, r3
 801b24c:	f04f 0400 	mov.w	r4, #0
 801b250:	f04f 0500 	mov.w	r5, #0
 801b254:	00dd      	lsls	r5, r3, #3
 801b256:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b25a:	00d4      	lsls	r4, r2, #3
 801b25c:	4622      	mov	r2, r4
 801b25e:	462b      	mov	r3, r5
 801b260:	1814      	adds	r4, r2, r0
 801b262:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 801b266:	414b      	adcs	r3, r1
 801b268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	4618      	mov	r0, r3
 801b274:	f04f 0100 	mov.w	r1, #0
 801b278:	f04f 0200 	mov.w	r2, #0
 801b27c:	f04f 0300 	mov.w	r3, #0
 801b280:	008b      	lsls	r3, r1, #2
 801b282:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b286:	0082      	lsls	r2, r0, #2
 801b288:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 801b28c:	f7e5 fcfc 	bl	8000c88 <__aeabi_uldivmod>
 801b290:	4602      	mov	r2, r0
 801b292:	460b      	mov	r3, r1
 801b294:	4b96      	ldr	r3, [pc, #600]	; (801b4f0 <UART_SetConfig+0x734>)
 801b296:	fba3 1302 	umull	r1, r3, r3, r2
 801b29a:	095b      	lsrs	r3, r3, #5
 801b29c:	2164      	movs	r1, #100	; 0x64
 801b29e:	fb01 f303 	mul.w	r3, r1, r3
 801b2a2:	1ad3      	subs	r3, r2, r3
 801b2a4:	011b      	lsls	r3, r3, #4
 801b2a6:	3332      	adds	r3, #50	; 0x32
 801b2a8:	4a91      	ldr	r2, [pc, #580]	; (801b4f0 <UART_SetConfig+0x734>)
 801b2aa:	fba2 2303 	umull	r2, r3, r2, r3
 801b2ae:	095b      	lsrs	r3, r3, #5
 801b2b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b2b4:	441e      	add	r6, r3
 801b2b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f04f 0100 	mov.w	r1, #0
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	460b      	mov	r3, r1
 801b2c4:	1894      	adds	r4, r2, r2
 801b2c6:	61bc      	str	r4, [r7, #24]
 801b2c8:	415b      	adcs	r3, r3
 801b2ca:	61fb      	str	r3, [r7, #28]
 801b2cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b2d0:	1812      	adds	r2, r2, r0
 801b2d2:	eb41 0303 	adc.w	r3, r1, r3
 801b2d6:	f04f 0400 	mov.w	r4, #0
 801b2da:	f04f 0500 	mov.w	r5, #0
 801b2de:	00dd      	lsls	r5, r3, #3
 801b2e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b2e4:	00d4      	lsls	r4, r2, #3
 801b2e6:	4622      	mov	r2, r4
 801b2e8:	462b      	mov	r3, r5
 801b2ea:	1814      	adds	r4, r2, r0
 801b2ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 801b2f0:	414b      	adcs	r3, r1
 801b2f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801b2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2fa:	685b      	ldr	r3, [r3, #4]
 801b2fc:	4618      	mov	r0, r3
 801b2fe:	f04f 0100 	mov.w	r1, #0
 801b302:	f04f 0200 	mov.w	r2, #0
 801b306:	f04f 0300 	mov.w	r3, #0
 801b30a:	008b      	lsls	r3, r1, #2
 801b30c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b310:	0082      	lsls	r2, r0, #2
 801b312:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 801b316:	f7e5 fcb7 	bl	8000c88 <__aeabi_uldivmod>
 801b31a:	4602      	mov	r2, r0
 801b31c:	460b      	mov	r3, r1
 801b31e:	4b74      	ldr	r3, [pc, #464]	; (801b4f0 <UART_SetConfig+0x734>)
 801b320:	fba3 1302 	umull	r1, r3, r3, r2
 801b324:	095b      	lsrs	r3, r3, #5
 801b326:	2164      	movs	r1, #100	; 0x64
 801b328:	fb01 f303 	mul.w	r3, r1, r3
 801b32c:	1ad3      	subs	r3, r2, r3
 801b32e:	011b      	lsls	r3, r3, #4
 801b330:	3332      	adds	r3, #50	; 0x32
 801b332:	4a6f      	ldr	r2, [pc, #444]	; (801b4f0 <UART_SetConfig+0x734>)
 801b334:	fba2 2303 	umull	r2, r3, r2, r3
 801b338:	095b      	lsrs	r3, r3, #5
 801b33a:	f003 020f 	and.w	r2, r3, #15
 801b33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	4432      	add	r2, r6
 801b346:	609a      	str	r2, [r3, #8]
 801b348:	e0c9      	b.n	801b4de <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 801b34a:	f7fd fed7 	bl	80190fc <HAL_RCC_GetPCLK1Freq>
 801b34e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b356:	461c      	mov	r4, r3
 801b358:	f04f 0500 	mov.w	r5, #0
 801b35c:	4622      	mov	r2, r4
 801b35e:	462b      	mov	r3, r5
 801b360:	1891      	adds	r1, r2, r2
 801b362:	6139      	str	r1, [r7, #16]
 801b364:	415b      	adcs	r3, r3
 801b366:	617b      	str	r3, [r7, #20]
 801b368:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801b36c:	1912      	adds	r2, r2, r4
 801b36e:	eb45 0303 	adc.w	r3, r5, r3
 801b372:	f04f 0000 	mov.w	r0, #0
 801b376:	f04f 0100 	mov.w	r1, #0
 801b37a:	00d9      	lsls	r1, r3, #3
 801b37c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801b380:	00d0      	lsls	r0, r2, #3
 801b382:	4602      	mov	r2, r0
 801b384:	460b      	mov	r3, r1
 801b386:	eb12 0804 	adds.w	r8, r2, r4
 801b38a:	eb43 0905 	adc.w	r9, r3, r5
 801b38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b392:	685b      	ldr	r3, [r3, #4]
 801b394:	4618      	mov	r0, r3
 801b396:	f04f 0100 	mov.w	r1, #0
 801b39a:	f04f 0200 	mov.w	r2, #0
 801b39e:	f04f 0300 	mov.w	r3, #0
 801b3a2:	008b      	lsls	r3, r1, #2
 801b3a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b3a8:	0082      	lsls	r2, r0, #2
 801b3aa:	4640      	mov	r0, r8
 801b3ac:	4649      	mov	r1, r9
 801b3ae:	f7e5 fc6b 	bl	8000c88 <__aeabi_uldivmod>
 801b3b2:	4602      	mov	r2, r0
 801b3b4:	460b      	mov	r3, r1
 801b3b6:	4b4e      	ldr	r3, [pc, #312]	; (801b4f0 <UART_SetConfig+0x734>)
 801b3b8:	fba3 2302 	umull	r2, r3, r3, r2
 801b3bc:	095b      	lsrs	r3, r3, #5
 801b3be:	011e      	lsls	r6, r3, #4
 801b3c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b3c4:	4618      	mov	r0, r3
 801b3c6:	f04f 0100 	mov.w	r1, #0
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	1894      	adds	r4, r2, r2
 801b3d0:	60bc      	str	r4, [r7, #8]
 801b3d2:	415b      	adcs	r3, r3
 801b3d4:	60fb      	str	r3, [r7, #12]
 801b3d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801b3da:	1812      	adds	r2, r2, r0
 801b3dc:	eb41 0303 	adc.w	r3, r1, r3
 801b3e0:	f04f 0400 	mov.w	r4, #0
 801b3e4:	f04f 0500 	mov.w	r5, #0
 801b3e8:	00dd      	lsls	r5, r3, #3
 801b3ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b3ee:	00d4      	lsls	r4, r2, #3
 801b3f0:	4622      	mov	r2, r4
 801b3f2:	462b      	mov	r3, r5
 801b3f4:	1814      	adds	r4, r2, r0
 801b3f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801b3fa:	414b      	adcs	r3, r1
 801b3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	4618      	mov	r0, r3
 801b408:	f04f 0100 	mov.w	r1, #0
 801b40c:	f04f 0200 	mov.w	r2, #0
 801b410:	f04f 0300 	mov.w	r3, #0
 801b414:	008b      	lsls	r3, r1, #2
 801b416:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b41a:	0082      	lsls	r2, r0, #2
 801b41c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801b420:	f7e5 fc32 	bl	8000c88 <__aeabi_uldivmod>
 801b424:	4602      	mov	r2, r0
 801b426:	460b      	mov	r3, r1
 801b428:	4b31      	ldr	r3, [pc, #196]	; (801b4f0 <UART_SetConfig+0x734>)
 801b42a:	fba3 1302 	umull	r1, r3, r3, r2
 801b42e:	095b      	lsrs	r3, r3, #5
 801b430:	2164      	movs	r1, #100	; 0x64
 801b432:	fb01 f303 	mul.w	r3, r1, r3
 801b436:	1ad3      	subs	r3, r2, r3
 801b438:	011b      	lsls	r3, r3, #4
 801b43a:	3332      	adds	r3, #50	; 0x32
 801b43c:	4a2c      	ldr	r2, [pc, #176]	; (801b4f0 <UART_SetConfig+0x734>)
 801b43e:	fba2 2303 	umull	r2, r3, r2, r3
 801b442:	095b      	lsrs	r3, r3, #5
 801b444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b448:	441e      	add	r6, r3
 801b44a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801b44e:	4618      	mov	r0, r3
 801b450:	f04f 0100 	mov.w	r1, #0
 801b454:	4602      	mov	r2, r0
 801b456:	460b      	mov	r3, r1
 801b458:	1894      	adds	r4, r2, r2
 801b45a:	603c      	str	r4, [r7, #0]
 801b45c:	415b      	adcs	r3, r3
 801b45e:	607b      	str	r3, [r7, #4]
 801b460:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b464:	1812      	adds	r2, r2, r0
 801b466:	eb41 0303 	adc.w	r3, r1, r3
 801b46a:	f04f 0400 	mov.w	r4, #0
 801b46e:	f04f 0500 	mov.w	r5, #0
 801b472:	00dd      	lsls	r5, r3, #3
 801b474:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801b478:	00d4      	lsls	r4, r2, #3
 801b47a:	4622      	mov	r2, r4
 801b47c:	462b      	mov	r3, r5
 801b47e:	1814      	adds	r4, r2, r0
 801b480:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801b484:	414b      	adcs	r3, r1
 801b486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b48e:	685b      	ldr	r3, [r3, #4]
 801b490:	4618      	mov	r0, r3
 801b492:	f04f 0100 	mov.w	r1, #0
 801b496:	f04f 0200 	mov.w	r2, #0
 801b49a:	f04f 0300 	mov.w	r3, #0
 801b49e:	008b      	lsls	r3, r1, #2
 801b4a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801b4a4:	0082      	lsls	r2, r0, #2
 801b4a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801b4aa:	f7e5 fbed 	bl	8000c88 <__aeabi_uldivmod>
 801b4ae:	4602      	mov	r2, r0
 801b4b0:	460b      	mov	r3, r1
 801b4b2:	4b0f      	ldr	r3, [pc, #60]	; (801b4f0 <UART_SetConfig+0x734>)
 801b4b4:	fba3 1302 	umull	r1, r3, r3, r2
 801b4b8:	095b      	lsrs	r3, r3, #5
 801b4ba:	2164      	movs	r1, #100	; 0x64
 801b4bc:	fb01 f303 	mul.w	r3, r1, r3
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	011b      	lsls	r3, r3, #4
 801b4c4:	3332      	adds	r3, #50	; 0x32
 801b4c6:	4a0a      	ldr	r2, [pc, #40]	; (801b4f0 <UART_SetConfig+0x734>)
 801b4c8:	fba2 2303 	umull	r2, r3, r2, r3
 801b4cc:	095b      	lsrs	r3, r3, #5
 801b4ce:	f003 020f 	and.w	r2, r3, #15
 801b4d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	4432      	add	r2, r6
 801b4da:	609a      	str	r2, [r3, #8]
}
 801b4dc:	e7ff      	b.n	801b4de <UART_SetConfig+0x722>
 801b4de:	bf00      	nop
 801b4e0:	37f4      	adds	r7, #244	; 0xf4
 801b4e2:	46bd      	mov	sp, r7
 801b4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4e8:	40011000 	.word	0x40011000
 801b4ec:	40011400 	.word	0x40011400
 801b4f0:	51eb851f 	.word	0x51eb851f

0801b4f4 <__NVIC_SetPriority>:
{
 801b4f4:	b480      	push	{r7}
 801b4f6:	b083      	sub	sp, #12
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	4603      	mov	r3, r0
 801b4fc:	6039      	str	r1, [r7, #0]
 801b4fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b504:	2b00      	cmp	r3, #0
 801b506:	db0a      	blt.n	801b51e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	b2da      	uxtb	r2, r3
 801b50c:	490c      	ldr	r1, [pc, #48]	; (801b540 <__NVIC_SetPriority+0x4c>)
 801b50e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b512:	0112      	lsls	r2, r2, #4
 801b514:	b2d2      	uxtb	r2, r2
 801b516:	440b      	add	r3, r1
 801b518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801b51c:	e00a      	b.n	801b534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b51e:	683b      	ldr	r3, [r7, #0]
 801b520:	b2da      	uxtb	r2, r3
 801b522:	4908      	ldr	r1, [pc, #32]	; (801b544 <__NVIC_SetPriority+0x50>)
 801b524:	79fb      	ldrb	r3, [r7, #7]
 801b526:	f003 030f 	and.w	r3, r3, #15
 801b52a:	3b04      	subs	r3, #4
 801b52c:	0112      	lsls	r2, r2, #4
 801b52e:	b2d2      	uxtb	r2, r2
 801b530:	440b      	add	r3, r1
 801b532:	761a      	strb	r2, [r3, #24]
}
 801b534:	bf00      	nop
 801b536:	370c      	adds	r7, #12
 801b538:	46bd      	mov	sp, r7
 801b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53e:	4770      	bx	lr
 801b540:	e000e100 	.word	0xe000e100
 801b544:	e000ed00 	.word	0xe000ed00

0801b548 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801b548:	b580      	push	{r7, lr}
 801b54a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801b54c:	4b05      	ldr	r3, [pc, #20]	; (801b564 <SysTick_Handler+0x1c>)
 801b54e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801b550:	f002 fa44 	bl	801d9dc <xTaskGetSchedulerState>
 801b554:	4603      	mov	r3, r0
 801b556:	2b01      	cmp	r3, #1
 801b558:	d001      	beq.n	801b55e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801b55a:	f003 f92d 	bl	801e7b8 <xPortSysTickHandler>
  }
}
 801b55e:	bf00      	nop
 801b560:	bd80      	pop	{r7, pc}
 801b562:	bf00      	nop
 801b564:	e000e010 	.word	0xe000e010

0801b568 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801b568:	b580      	push	{r7, lr}
 801b56a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801b56c:	2100      	movs	r1, #0
 801b56e:	f06f 0004 	mvn.w	r0, #4
 801b572:	f7ff ffbf 	bl	801b4f4 <__NVIC_SetPriority>
#endif
}
 801b576:	bf00      	nop
 801b578:	bd80      	pop	{r7, pc}
	...

0801b57c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801b57c:	b480      	push	{r7}
 801b57e:	b083      	sub	sp, #12
 801b580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b582:	f3ef 8305 	mrs	r3, IPSR
 801b586:	603b      	str	r3, [r7, #0]
  return(result);
 801b588:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d003      	beq.n	801b596 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801b58e:	f06f 0305 	mvn.w	r3, #5
 801b592:	607b      	str	r3, [r7, #4]
 801b594:	e00c      	b.n	801b5b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801b596:	4b0a      	ldr	r3, [pc, #40]	; (801b5c0 <osKernelInitialize+0x44>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d105      	bne.n	801b5aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801b59e:	4b08      	ldr	r3, [pc, #32]	; (801b5c0 <osKernelInitialize+0x44>)
 801b5a0:	2201      	movs	r2, #1
 801b5a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	607b      	str	r3, [r7, #4]
 801b5a8:	e002      	b.n	801b5b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801b5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801b5b0:	687b      	ldr	r3, [r7, #4]
}
 801b5b2:	4618      	mov	r0, r3
 801b5b4:	370c      	adds	r7, #12
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5bc:	4770      	bx	lr
 801b5be:	bf00      	nop
 801b5c0:	20001ca0 	.word	0x20001ca0

0801b5c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801b5c4:	b580      	push	{r7, lr}
 801b5c6:	b082      	sub	sp, #8
 801b5c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b5ca:	f3ef 8305 	mrs	r3, IPSR
 801b5ce:	603b      	str	r3, [r7, #0]
  return(result);
 801b5d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d003      	beq.n	801b5de <osKernelStart+0x1a>
    stat = osErrorISR;
 801b5d6:	f06f 0305 	mvn.w	r3, #5
 801b5da:	607b      	str	r3, [r7, #4]
 801b5dc:	e010      	b.n	801b600 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801b5de:	4b0b      	ldr	r3, [pc, #44]	; (801b60c <osKernelStart+0x48>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	2b01      	cmp	r3, #1
 801b5e4:	d109      	bne.n	801b5fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801b5e6:	f7ff ffbf 	bl	801b568 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801b5ea:	4b08      	ldr	r3, [pc, #32]	; (801b60c <osKernelStart+0x48>)
 801b5ec:	2202      	movs	r2, #2
 801b5ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801b5f0:	f001 fdac 	bl	801d14c <vTaskStartScheduler>
      stat = osOK;
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	607b      	str	r3, [r7, #4]
 801b5f8:	e002      	b.n	801b600 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801b5fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b5fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801b600:	687b      	ldr	r3, [r7, #4]
}
 801b602:	4618      	mov	r0, r3
 801b604:	3708      	adds	r7, #8
 801b606:	46bd      	mov	sp, r7
 801b608:	bd80      	pop	{r7, pc}
 801b60a:	bf00      	nop
 801b60c:	20001ca0 	.word	0x20001ca0

0801b610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801b610:	b580      	push	{r7, lr}
 801b612:	b08e      	sub	sp, #56	; 0x38
 801b614:	af04      	add	r7, sp, #16
 801b616:	60f8      	str	r0, [r7, #12]
 801b618:	60b9      	str	r1, [r7, #8]
 801b61a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801b61c:	2300      	movs	r3, #0
 801b61e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b620:	f3ef 8305 	mrs	r3, IPSR
 801b624:	617b      	str	r3, [r7, #20]
  return(result);
 801b626:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d17e      	bne.n	801b72a <osThreadNew+0x11a>
 801b62c:	68fb      	ldr	r3, [r7, #12]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d07b      	beq.n	801b72a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801b632:	2380      	movs	r3, #128	; 0x80
 801b634:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801b636:	2318      	movs	r3, #24
 801b638:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801b63a:	2300      	movs	r3, #0
 801b63c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801b63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b642:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d045      	beq.n	801b6d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d002      	beq.n	801b658 <osThreadNew+0x48>
        name = attr->name;
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	699b      	ldr	r3, [r3, #24]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d002      	beq.n	801b666 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	699b      	ldr	r3, [r3, #24]
 801b664:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801b666:	69fb      	ldr	r3, [r7, #28]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d008      	beq.n	801b67e <osThreadNew+0x6e>
 801b66c:	69fb      	ldr	r3, [r7, #28]
 801b66e:	2b38      	cmp	r3, #56	; 0x38
 801b670:	d805      	bhi.n	801b67e <osThreadNew+0x6e>
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	685b      	ldr	r3, [r3, #4]
 801b676:	f003 0301 	and.w	r3, r3, #1
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d001      	beq.n	801b682 <osThreadNew+0x72>
        return (NULL);
 801b67e:	2300      	movs	r3, #0
 801b680:	e054      	b.n	801b72c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	695b      	ldr	r3, [r3, #20]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d003      	beq.n	801b692 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	695b      	ldr	r3, [r3, #20]
 801b68e:	089b      	lsrs	r3, r3, #2
 801b690:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	689b      	ldr	r3, [r3, #8]
 801b696:	2b00      	cmp	r3, #0
 801b698:	d00e      	beq.n	801b6b8 <osThreadNew+0xa8>
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	68db      	ldr	r3, [r3, #12]
 801b69e:	2b5b      	cmp	r3, #91	; 0x5b
 801b6a0:	d90a      	bls.n	801b6b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801b6a2:	687b      	ldr	r3, [r7, #4]
 801b6a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801b6a6:	2b00      	cmp	r3, #0
 801b6a8:	d006      	beq.n	801b6b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	695b      	ldr	r3, [r3, #20]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d002      	beq.n	801b6b8 <osThreadNew+0xa8>
        mem = 1;
 801b6b2:	2301      	movs	r3, #1
 801b6b4:	61bb      	str	r3, [r7, #24]
 801b6b6:	e010      	b.n	801b6da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	689b      	ldr	r3, [r3, #8]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d10c      	bne.n	801b6da <osThreadNew+0xca>
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	68db      	ldr	r3, [r3, #12]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d108      	bne.n	801b6da <osThreadNew+0xca>
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	691b      	ldr	r3, [r3, #16]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d104      	bne.n	801b6da <osThreadNew+0xca>
          mem = 0;
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	61bb      	str	r3, [r7, #24]
 801b6d4:	e001      	b.n	801b6da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801b6da:	69bb      	ldr	r3, [r7, #24]
 801b6dc:	2b01      	cmp	r3, #1
 801b6de:	d110      	bne.n	801b702 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801b6e4:	687a      	ldr	r2, [r7, #4]
 801b6e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801b6e8:	9202      	str	r2, [sp, #8]
 801b6ea:	9301      	str	r3, [sp, #4]
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	9300      	str	r3, [sp, #0]
 801b6f0:	68bb      	ldr	r3, [r7, #8]
 801b6f2:	6a3a      	ldr	r2, [r7, #32]
 801b6f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b6f6:	68f8      	ldr	r0, [r7, #12]
 801b6f8:	f001 fa7a 	bl	801cbf0 <xTaskCreateStatic>
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	613b      	str	r3, [r7, #16]
 801b700:	e013      	b.n	801b72a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801b702:	69bb      	ldr	r3, [r7, #24]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d110      	bne.n	801b72a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801b708:	6a3b      	ldr	r3, [r7, #32]
 801b70a:	b29a      	uxth	r2, r3
 801b70c:	f107 0310 	add.w	r3, r7, #16
 801b710:	9301      	str	r3, [sp, #4]
 801b712:	69fb      	ldr	r3, [r7, #28]
 801b714:	9300      	str	r3, [sp, #0]
 801b716:	68bb      	ldr	r3, [r7, #8]
 801b718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b71a:	68f8      	ldr	r0, [r7, #12]
 801b71c:	f001 fac5 	bl	801ccaa <xTaskCreate>
 801b720:	4603      	mov	r3, r0
 801b722:	2b01      	cmp	r3, #1
 801b724:	d001      	beq.n	801b72a <osThreadNew+0x11a>
            hTask = NULL;
 801b726:	2300      	movs	r3, #0
 801b728:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801b72a:	693b      	ldr	r3, [r7, #16]
}
 801b72c:	4618      	mov	r0, r3
 801b72e:	3728      	adds	r7, #40	; 0x28
 801b730:	46bd      	mov	sp, r7
 801b732:	bd80      	pop	{r7, pc}

0801b734 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 801b734:	b580      	push	{r7, lr}
 801b736:	b086      	sub	sp, #24
 801b738:	af00      	add	r7, sp, #0
 801b73a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b740:	f3ef 8305 	mrs	r3, IPSR
 801b744:	60bb      	str	r3, [r7, #8]
  return(result);
 801b746:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d003      	beq.n	801b754 <osThreadTerminate+0x20>
    stat = osErrorISR;
 801b74c:	f06f 0305 	mvn.w	r3, #5
 801b750:	617b      	str	r3, [r7, #20]
 801b752:	e017      	b.n	801b784 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d103      	bne.n	801b762 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 801b75a:	f06f 0303 	mvn.w	r3, #3
 801b75e:	617b      	str	r3, [r7, #20]
 801b760:	e010      	b.n	801b784 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801b762:	6938      	ldr	r0, [r7, #16]
 801b764:	f001 fc8c 	bl	801d080 <eTaskGetState>
 801b768:	4603      	mov	r3, r0
 801b76a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 801b76c:	7bfb      	ldrb	r3, [r7, #15]
 801b76e:	2b04      	cmp	r3, #4
 801b770:	d005      	beq.n	801b77e <osThreadTerminate+0x4a>
      stat = osOK;
 801b772:	2300      	movs	r3, #0
 801b774:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 801b776:	6938      	ldr	r0, [r7, #16]
 801b778:	f001 fbdc 	bl	801cf34 <vTaskDelete>
 801b77c:	e002      	b.n	801b784 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 801b77e:	f06f 0302 	mvn.w	r3, #2
 801b782:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801b784:	697b      	ldr	r3, [r7, #20]
}
 801b786:	4618      	mov	r0, r3
 801b788:	3718      	adds	r7, #24
 801b78a:	46bd      	mov	sp, r7
 801b78c:	bd80      	pop	{r7, pc}

0801b78e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801b78e:	b580      	push	{r7, lr}
 801b790:	b084      	sub	sp, #16
 801b792:	af00      	add	r7, sp, #0
 801b794:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b796:	f3ef 8305 	mrs	r3, IPSR
 801b79a:	60bb      	str	r3, [r7, #8]
  return(result);
 801b79c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d003      	beq.n	801b7aa <osDelay+0x1c>
    stat = osErrorISR;
 801b7a2:	f06f 0305 	mvn.w	r3, #5
 801b7a6:	60fb      	str	r3, [r7, #12]
 801b7a8:	e007      	b.n	801b7ba <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d002      	beq.n	801b7ba <osDelay+0x2c>
      vTaskDelay(ticks);
 801b7b4:	6878      	ldr	r0, [r7, #4]
 801b7b6:	f001 fc2f 	bl	801d018 <vTaskDelay>
    }
  }

  return (stat);
 801b7ba:	68fb      	ldr	r3, [r7, #12]
}
 801b7bc:	4618      	mov	r0, r3
 801b7be:	3710      	adds	r7, #16
 801b7c0:	46bd      	mov	sp, r7
 801b7c2:	bd80      	pop	{r7, pc}

0801b7c4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b08a      	sub	sp, #40	; 0x28
 801b7c8:	af02      	add	r7, sp, #8
 801b7ca:	60f8      	str	r0, [r7, #12]
 801b7cc:	60b9      	str	r1, [r7, #8]
 801b7ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b7d4:	f3ef 8305 	mrs	r3, IPSR
 801b7d8:	613b      	str	r3, [r7, #16]
  return(result);
 801b7da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d175      	bne.n	801b8cc <osSemaphoreNew+0x108>
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d072      	beq.n	801b8cc <osSemaphoreNew+0x108>
 801b7e6:	68ba      	ldr	r2, [r7, #8]
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	429a      	cmp	r2, r3
 801b7ec:	d86e      	bhi.n	801b8cc <osSemaphoreNew+0x108>
    mem = -1;
 801b7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b7f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d015      	beq.n	801b826 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	689b      	ldr	r3, [r3, #8]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d006      	beq.n	801b810 <osSemaphoreNew+0x4c>
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	68db      	ldr	r3, [r3, #12]
 801b806:	2b4f      	cmp	r3, #79	; 0x4f
 801b808:	d902      	bls.n	801b810 <osSemaphoreNew+0x4c>
        mem = 1;
 801b80a:	2301      	movs	r3, #1
 801b80c:	61bb      	str	r3, [r7, #24]
 801b80e:	e00c      	b.n	801b82a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	689b      	ldr	r3, [r3, #8]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d108      	bne.n	801b82a <osSemaphoreNew+0x66>
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	68db      	ldr	r3, [r3, #12]
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d104      	bne.n	801b82a <osSemaphoreNew+0x66>
          mem = 0;
 801b820:	2300      	movs	r3, #0
 801b822:	61bb      	str	r3, [r7, #24]
 801b824:	e001      	b.n	801b82a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801b826:	2300      	movs	r3, #0
 801b828:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 801b82a:	69bb      	ldr	r3, [r7, #24]
 801b82c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b830:	d04c      	beq.n	801b8cc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	2b01      	cmp	r3, #1
 801b836:	d128      	bne.n	801b88a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801b838:	69bb      	ldr	r3, [r7, #24]
 801b83a:	2b01      	cmp	r3, #1
 801b83c:	d10a      	bne.n	801b854 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	689b      	ldr	r3, [r3, #8]
 801b842:	2203      	movs	r2, #3
 801b844:	9200      	str	r2, [sp, #0]
 801b846:	2200      	movs	r2, #0
 801b848:	2100      	movs	r1, #0
 801b84a:	2001      	movs	r0, #1
 801b84c:	f000 fa2a 	bl	801bca4 <xQueueGenericCreateStatic>
 801b850:	61f8      	str	r0, [r7, #28]
 801b852:	e005      	b.n	801b860 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801b854:	2203      	movs	r2, #3
 801b856:	2100      	movs	r1, #0
 801b858:	2001      	movs	r0, #1
 801b85a:	f000 fa9b 	bl	801bd94 <xQueueGenericCreate>
 801b85e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801b860:	69fb      	ldr	r3, [r7, #28]
 801b862:	2b00      	cmp	r3, #0
 801b864:	d022      	beq.n	801b8ac <osSemaphoreNew+0xe8>
 801b866:	68bb      	ldr	r3, [r7, #8]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d01f      	beq.n	801b8ac <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801b86c:	2300      	movs	r3, #0
 801b86e:	2200      	movs	r2, #0
 801b870:	2100      	movs	r1, #0
 801b872:	69f8      	ldr	r0, [r7, #28]
 801b874:	f000 fb56 	bl	801bf24 <xQueueGenericSend>
 801b878:	4603      	mov	r3, r0
 801b87a:	2b01      	cmp	r3, #1
 801b87c:	d016      	beq.n	801b8ac <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801b87e:	69f8      	ldr	r0, [r7, #28]
 801b880:	f000 ffe2 	bl	801c848 <vQueueDelete>
            hSemaphore = NULL;
 801b884:	2300      	movs	r3, #0
 801b886:	61fb      	str	r3, [r7, #28]
 801b888:	e010      	b.n	801b8ac <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d108      	bne.n	801b8a2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	689b      	ldr	r3, [r3, #8]
 801b894:	461a      	mov	r2, r3
 801b896:	68b9      	ldr	r1, [r7, #8]
 801b898:	68f8      	ldr	r0, [r7, #12]
 801b89a:	f000 fad8 	bl	801be4e <xQueueCreateCountingSemaphoreStatic>
 801b89e:	61f8      	str	r0, [r7, #28]
 801b8a0:	e004      	b.n	801b8ac <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801b8a2:	68b9      	ldr	r1, [r7, #8]
 801b8a4:	68f8      	ldr	r0, [r7, #12]
 801b8a6:	f000 fb09 	bl	801bebc <xQueueCreateCountingSemaphore>
 801b8aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d00c      	beq.n	801b8cc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d003      	beq.n	801b8c0 <osSemaphoreNew+0xfc>
          name = attr->name;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	681b      	ldr	r3, [r3, #0]
 801b8bc:	617b      	str	r3, [r7, #20]
 801b8be:	e001      	b.n	801b8c4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801b8c4:	6979      	ldr	r1, [r7, #20]
 801b8c6:	69f8      	ldr	r0, [r7, #28]
 801b8c8:	f001 f90a 	bl	801cae0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801b8cc:	69fb      	ldr	r3, [r7, #28]
}
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3720      	adds	r7, #32
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bd80      	pop	{r7, pc}
	...

0801b8d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b086      	sub	sp, #24
 801b8dc:	af00      	add	r7, sp, #0
 801b8de:	6078      	str	r0, [r7, #4]
 801b8e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801b8e6:	2300      	movs	r3, #0
 801b8e8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801b8ea:	693b      	ldr	r3, [r7, #16]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d103      	bne.n	801b8f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801b8f0:	f06f 0303 	mvn.w	r3, #3
 801b8f4:	617b      	str	r3, [r7, #20]
 801b8f6:	e039      	b.n	801b96c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b8f8:	f3ef 8305 	mrs	r3, IPSR
 801b8fc:	60fb      	str	r3, [r7, #12]
  return(result);
 801b8fe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801b900:	2b00      	cmp	r3, #0
 801b902:	d022      	beq.n	801b94a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801b904:	683b      	ldr	r3, [r7, #0]
 801b906:	2b00      	cmp	r3, #0
 801b908:	d003      	beq.n	801b912 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801b90a:	f06f 0303 	mvn.w	r3, #3
 801b90e:	617b      	str	r3, [r7, #20]
 801b910:	e02c      	b.n	801b96c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801b912:	2300      	movs	r3, #0
 801b914:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801b916:	f107 0308 	add.w	r3, r7, #8
 801b91a:	461a      	mov	r2, r3
 801b91c:	2100      	movs	r1, #0
 801b91e:	6938      	ldr	r0, [r7, #16]
 801b920:	f000 ff12 	bl	801c748 <xQueueReceiveFromISR>
 801b924:	4603      	mov	r3, r0
 801b926:	2b01      	cmp	r3, #1
 801b928:	d003      	beq.n	801b932 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801b92a:	f06f 0302 	mvn.w	r3, #2
 801b92e:	617b      	str	r3, [r7, #20]
 801b930:	e01c      	b.n	801b96c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801b932:	68bb      	ldr	r3, [r7, #8]
 801b934:	2b00      	cmp	r3, #0
 801b936:	d019      	beq.n	801b96c <osSemaphoreAcquire+0x94>
 801b938:	4b0f      	ldr	r3, [pc, #60]	; (801b978 <osSemaphoreAcquire+0xa0>)
 801b93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b93e:	601a      	str	r2, [r3, #0]
 801b940:	f3bf 8f4f 	dsb	sy
 801b944:	f3bf 8f6f 	isb	sy
 801b948:	e010      	b.n	801b96c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801b94a:	6839      	ldr	r1, [r7, #0]
 801b94c:	6938      	ldr	r0, [r7, #16]
 801b94e:	f000 fdef 	bl	801c530 <xQueueSemaphoreTake>
 801b952:	4603      	mov	r3, r0
 801b954:	2b01      	cmp	r3, #1
 801b956:	d009      	beq.n	801b96c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801b958:	683b      	ldr	r3, [r7, #0]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d003      	beq.n	801b966 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801b95e:	f06f 0301 	mvn.w	r3, #1
 801b962:	617b      	str	r3, [r7, #20]
 801b964:	e002      	b.n	801b96c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801b966:	f06f 0302 	mvn.w	r3, #2
 801b96a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801b96c:	697b      	ldr	r3, [r7, #20]
}
 801b96e:	4618      	mov	r0, r3
 801b970:	3718      	adds	r7, #24
 801b972:	46bd      	mov	sp, r7
 801b974:	bd80      	pop	{r7, pc}
 801b976:	bf00      	nop
 801b978:	e000ed04 	.word	0xe000ed04

0801b97c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b086      	sub	sp, #24
 801b980:	af00      	add	r7, sp, #0
 801b982:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801b988:	2300      	movs	r3, #0
 801b98a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801b98c:	693b      	ldr	r3, [r7, #16]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d103      	bne.n	801b99a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801b992:	f06f 0303 	mvn.w	r3, #3
 801b996:	617b      	str	r3, [r7, #20]
 801b998:	e02c      	b.n	801b9f4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801b99a:	f3ef 8305 	mrs	r3, IPSR
 801b99e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801b9a2:	2b00      	cmp	r3, #0
 801b9a4:	d01a      	beq.n	801b9dc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801b9aa:	f107 0308 	add.w	r3, r7, #8
 801b9ae:	4619      	mov	r1, r3
 801b9b0:	6938      	ldr	r0, [r7, #16]
 801b9b2:	f000 fc50 	bl	801c256 <xQueueGiveFromISR>
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	2b01      	cmp	r3, #1
 801b9ba:	d003      	beq.n	801b9c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801b9bc:	f06f 0302 	mvn.w	r3, #2
 801b9c0:	617b      	str	r3, [r7, #20]
 801b9c2:	e017      	b.n	801b9f4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d014      	beq.n	801b9f4 <osSemaphoreRelease+0x78>
 801b9ca:	4b0d      	ldr	r3, [pc, #52]	; (801ba00 <osSemaphoreRelease+0x84>)
 801b9cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b9d0:	601a      	str	r2, [r3, #0]
 801b9d2:	f3bf 8f4f 	dsb	sy
 801b9d6:	f3bf 8f6f 	isb	sy
 801b9da:	e00b      	b.n	801b9f4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801b9dc:	2300      	movs	r3, #0
 801b9de:	2200      	movs	r2, #0
 801b9e0:	2100      	movs	r1, #0
 801b9e2:	6938      	ldr	r0, [r7, #16]
 801b9e4:	f000 fa9e 	bl	801bf24 <xQueueGenericSend>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	2b01      	cmp	r3, #1
 801b9ec:	d002      	beq.n	801b9f4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801b9ee:	f06f 0302 	mvn.w	r3, #2
 801b9f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801b9f4:	697b      	ldr	r3, [r7, #20]
}
 801b9f6:	4618      	mov	r0, r3
 801b9f8:	3718      	adds	r7, #24
 801b9fa:	46bd      	mov	sp, r7
 801b9fc:	bd80      	pop	{r7, pc}
 801b9fe:	bf00      	nop
 801ba00:	e000ed04 	.word	0xe000ed04

0801ba04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801ba04:	b480      	push	{r7}
 801ba06:	b085      	sub	sp, #20
 801ba08:	af00      	add	r7, sp, #0
 801ba0a:	60f8      	str	r0, [r7, #12]
 801ba0c:	60b9      	str	r1, [r7, #8]
 801ba0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	4a07      	ldr	r2, [pc, #28]	; (801ba30 <vApplicationGetIdleTaskMemory+0x2c>)
 801ba14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801ba16:	68bb      	ldr	r3, [r7, #8]
 801ba18:	4a06      	ldr	r2, [pc, #24]	; (801ba34 <vApplicationGetIdleTaskMemory+0x30>)
 801ba1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	2280      	movs	r2, #128	; 0x80
 801ba20:	601a      	str	r2, [r3, #0]
}
 801ba22:	bf00      	nop
 801ba24:	3714      	adds	r7, #20
 801ba26:	46bd      	mov	sp, r7
 801ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop
 801ba30:	20001ca4 	.word	0x20001ca4
 801ba34:	20001d00 	.word	0x20001d00

0801ba38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801ba38:	b480      	push	{r7}
 801ba3a:	b085      	sub	sp, #20
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	60f8      	str	r0, [r7, #12]
 801ba40:	60b9      	str	r1, [r7, #8]
 801ba42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801ba44:	68fb      	ldr	r3, [r7, #12]
 801ba46:	4a07      	ldr	r2, [pc, #28]	; (801ba64 <vApplicationGetTimerTaskMemory+0x2c>)
 801ba48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801ba4a:	68bb      	ldr	r3, [r7, #8]
 801ba4c:	4a06      	ldr	r2, [pc, #24]	; (801ba68 <vApplicationGetTimerTaskMemory+0x30>)
 801ba4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801ba50:	687b      	ldr	r3, [r7, #4]
 801ba52:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ba56:	601a      	str	r2, [r3, #0]
}
 801ba58:	bf00      	nop
 801ba5a:	3714      	adds	r7, #20
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba62:	4770      	bx	lr
 801ba64:	20001f00 	.word	0x20001f00
 801ba68:	20001f5c 	.word	0x20001f5c

0801ba6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801ba6c:	b480      	push	{r7}
 801ba6e:	b083      	sub	sp, #12
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	f103 0208 	add.w	r2, r3, #8
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ba84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	f103 0208 	add.w	r2, r3, #8
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f103 0208 	add.w	r2, r3, #8
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801baa0:	bf00      	nop
 801baa2:	370c      	adds	r7, #12
 801baa4:	46bd      	mov	sp, r7
 801baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baaa:	4770      	bx	lr

0801baac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801baac:	b480      	push	{r7}
 801baae:	b083      	sub	sp, #12
 801bab0:	af00      	add	r7, sp, #0
 801bab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	2200      	movs	r2, #0
 801bab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801baba:	bf00      	nop
 801babc:	370c      	adds	r7, #12
 801babe:	46bd      	mov	sp, r7
 801bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bac4:	4770      	bx	lr

0801bac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801bac6:	b480      	push	{r7}
 801bac8:	b085      	sub	sp, #20
 801baca:	af00      	add	r7, sp, #0
 801bacc:	6078      	str	r0, [r7, #4]
 801bace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	685b      	ldr	r3, [r3, #4]
 801bad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801bad6:	683b      	ldr	r3, [r7, #0]
 801bad8:	68fa      	ldr	r2, [r7, #12]
 801bada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801badc:	68fb      	ldr	r3, [r7, #12]
 801bade:	689a      	ldr	r2, [r3, #8]
 801bae0:	683b      	ldr	r3, [r7, #0]
 801bae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	689b      	ldr	r3, [r3, #8]
 801bae8:	683a      	ldr	r2, [r7, #0]
 801baea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	683a      	ldr	r2, [r7, #0]
 801baf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801baf2:	683b      	ldr	r3, [r7, #0]
 801baf4:	687a      	ldr	r2, [r7, #4]
 801baf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	1c5a      	adds	r2, r3, #1
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	601a      	str	r2, [r3, #0]
}
 801bb02:	bf00      	nop
 801bb04:	3714      	adds	r7, #20
 801bb06:	46bd      	mov	sp, r7
 801bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb0c:	4770      	bx	lr

0801bb0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801bb0e:	b480      	push	{r7}
 801bb10:	b085      	sub	sp, #20
 801bb12:	af00      	add	r7, sp, #0
 801bb14:	6078      	str	r0, [r7, #4]
 801bb16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801bb1e:	68bb      	ldr	r3, [r7, #8]
 801bb20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801bb24:	d103      	bne.n	801bb2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	691b      	ldr	r3, [r3, #16]
 801bb2a:	60fb      	str	r3, [r7, #12]
 801bb2c:	e00c      	b.n	801bb48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	3308      	adds	r3, #8
 801bb32:	60fb      	str	r3, [r7, #12]
 801bb34:	e002      	b.n	801bb3c <vListInsert+0x2e>
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	685b      	ldr	r3, [r3, #4]
 801bb3a:	60fb      	str	r3, [r7, #12]
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	685b      	ldr	r3, [r3, #4]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	68ba      	ldr	r2, [r7, #8]
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d2f6      	bcs.n	801bb36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	685a      	ldr	r2, [r3, #4]
 801bb4c:	683b      	ldr	r3, [r7, #0]
 801bb4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801bb50:	683b      	ldr	r3, [r7, #0]
 801bb52:	685b      	ldr	r3, [r3, #4]
 801bb54:	683a      	ldr	r2, [r7, #0]
 801bb56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801bb58:	683b      	ldr	r3, [r7, #0]
 801bb5a:	68fa      	ldr	r2, [r7, #12]
 801bb5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	683a      	ldr	r2, [r7, #0]
 801bb62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	687a      	ldr	r2, [r7, #4]
 801bb68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	1c5a      	adds	r2, r3, #1
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	601a      	str	r2, [r3, #0]
}
 801bb74:	bf00      	nop
 801bb76:	3714      	adds	r7, #20
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb7e:	4770      	bx	lr

0801bb80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801bb80:	b480      	push	{r7}
 801bb82:	b085      	sub	sp, #20
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	691b      	ldr	r3, [r3, #16]
 801bb8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	685b      	ldr	r3, [r3, #4]
 801bb92:	687a      	ldr	r2, [r7, #4]
 801bb94:	6892      	ldr	r2, [r2, #8]
 801bb96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	689b      	ldr	r3, [r3, #8]
 801bb9c:	687a      	ldr	r2, [r7, #4]
 801bb9e:	6852      	ldr	r2, [r2, #4]
 801bba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	687a      	ldr	r2, [r7, #4]
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	d103      	bne.n	801bbb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	689a      	ldr	r2, [r3, #8]
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801bbba:	68fb      	ldr	r3, [r7, #12]
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	1e5a      	subs	r2, r3, #1
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	681b      	ldr	r3, [r3, #0]
}
 801bbc8:	4618      	mov	r0, r3
 801bbca:	3714      	adds	r7, #20
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd2:	4770      	bx	lr

0801bbd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b084      	sub	sp, #16
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
 801bbdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801bbe2:	68fb      	ldr	r3, [r7, #12]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d10a      	bne.n	801bbfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbec:	f383 8811 	msr	BASEPRI, r3
 801bbf0:	f3bf 8f6f 	isb	sy
 801bbf4:	f3bf 8f4f 	dsb	sy
 801bbf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801bbfa:	bf00      	nop
 801bbfc:	e7fe      	b.n	801bbfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801bbfe:	f002 fd49 	bl	801e694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	681a      	ldr	r2, [r3, #0]
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc0a:	68f9      	ldr	r1, [r7, #12]
 801bc0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801bc0e:	fb01 f303 	mul.w	r3, r1, r3
 801bc12:	441a      	add	r2, r3
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801bc1e:	68fb      	ldr	r3, [r7, #12]
 801bc20:	681a      	ldr	r2, [r3, #0]
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	681a      	ldr	r2, [r3, #0]
 801bc2a:	68fb      	ldr	r3, [r7, #12]
 801bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bc2e:	3b01      	subs	r3, #1
 801bc30:	68f9      	ldr	r1, [r7, #12]
 801bc32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801bc34:	fb01 f303 	mul.w	r3, r1, r3
 801bc38:	441a      	add	r2, r3
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	22ff      	movs	r2, #255	; 0xff
 801bc42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	22ff      	movs	r2, #255	; 0xff
 801bc4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d114      	bne.n	801bc7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	691b      	ldr	r3, [r3, #16]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d01a      	beq.n	801bc92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	3310      	adds	r3, #16
 801bc60:	4618      	mov	r0, r3
 801bc62:	f001 fcfd 	bl	801d660 <xTaskRemoveFromEventList>
 801bc66:	4603      	mov	r3, r0
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d012      	beq.n	801bc92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801bc6c:	4b0c      	ldr	r3, [pc, #48]	; (801bca0 <xQueueGenericReset+0xcc>)
 801bc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bc72:	601a      	str	r2, [r3, #0]
 801bc74:	f3bf 8f4f 	dsb	sy
 801bc78:	f3bf 8f6f 	isb	sy
 801bc7c:	e009      	b.n	801bc92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	3310      	adds	r3, #16
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7ff fef2 	bl	801ba6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	3324      	adds	r3, #36	; 0x24
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f7ff feed 	bl	801ba6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801bc92:	f002 fd2f 	bl	801e6f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801bc96:	2301      	movs	r3, #1
}
 801bc98:	4618      	mov	r0, r3
 801bc9a:	3710      	adds	r7, #16
 801bc9c:	46bd      	mov	sp, r7
 801bc9e:	bd80      	pop	{r7, pc}
 801bca0:	e000ed04 	.word	0xe000ed04

0801bca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b08e      	sub	sp, #56	; 0x38
 801bca8:	af02      	add	r7, sp, #8
 801bcaa:	60f8      	str	r0, [r7, #12]
 801bcac:	60b9      	str	r1, [r7, #8]
 801bcae:	607a      	str	r2, [r7, #4]
 801bcb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801bcb2:	68fb      	ldr	r3, [r7, #12]
 801bcb4:	2b00      	cmp	r3, #0
 801bcb6:	d10a      	bne.n	801bcce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801bcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcbc:	f383 8811 	msr	BASEPRI, r3
 801bcc0:	f3bf 8f6f 	isb	sy
 801bcc4:	f3bf 8f4f 	dsb	sy
 801bcc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801bcca:	bf00      	nop
 801bccc:	e7fe      	b.n	801bccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d10a      	bne.n	801bcea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcd8:	f383 8811 	msr	BASEPRI, r3
 801bcdc:	f3bf 8f6f 	isb	sy
 801bce0:	f3bf 8f4f 	dsb	sy
 801bce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 801bce6:	bf00      	nop
 801bce8:	e7fe      	b.n	801bce8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d002      	beq.n	801bcf6 <xQueueGenericCreateStatic+0x52>
 801bcf0:	68bb      	ldr	r3, [r7, #8]
 801bcf2:	2b00      	cmp	r3, #0
 801bcf4:	d001      	beq.n	801bcfa <xQueueGenericCreateStatic+0x56>
 801bcf6:	2301      	movs	r3, #1
 801bcf8:	e000      	b.n	801bcfc <xQueueGenericCreateStatic+0x58>
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d10a      	bne.n	801bd16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd04:	f383 8811 	msr	BASEPRI, r3
 801bd08:	f3bf 8f6f 	isb	sy
 801bd0c:	f3bf 8f4f 	dsb	sy
 801bd10:	623b      	str	r3, [r7, #32]
}
 801bd12:	bf00      	nop
 801bd14:	e7fe      	b.n	801bd14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d102      	bne.n	801bd22 <xQueueGenericCreateStatic+0x7e>
 801bd1c:	68bb      	ldr	r3, [r7, #8]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d101      	bne.n	801bd26 <xQueueGenericCreateStatic+0x82>
 801bd22:	2301      	movs	r3, #1
 801bd24:	e000      	b.n	801bd28 <xQueueGenericCreateStatic+0x84>
 801bd26:	2300      	movs	r3, #0
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d10a      	bne.n	801bd42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd30:	f383 8811 	msr	BASEPRI, r3
 801bd34:	f3bf 8f6f 	isb	sy
 801bd38:	f3bf 8f4f 	dsb	sy
 801bd3c:	61fb      	str	r3, [r7, #28]
}
 801bd3e:	bf00      	nop
 801bd40:	e7fe      	b.n	801bd40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801bd42:	2350      	movs	r3, #80	; 0x50
 801bd44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	2b50      	cmp	r3, #80	; 0x50
 801bd4a:	d00a      	beq.n	801bd62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd50:	f383 8811 	msr	BASEPRI, r3
 801bd54:	f3bf 8f6f 	isb	sy
 801bd58:	f3bf 8f4f 	dsb	sy
 801bd5c:	61bb      	str	r3, [r7, #24]
}
 801bd5e:	bf00      	nop
 801bd60:	e7fe      	b.n	801bd60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801bd62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801bd64:	683b      	ldr	r3, [r7, #0]
 801bd66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d00d      	beq.n	801bd8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd70:	2201      	movs	r2, #1
 801bd72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801bd76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd7c:	9300      	str	r3, [sp, #0]
 801bd7e:	4613      	mov	r3, r2
 801bd80:	687a      	ldr	r2, [r7, #4]
 801bd82:	68b9      	ldr	r1, [r7, #8]
 801bd84:	68f8      	ldr	r0, [r7, #12]
 801bd86:	f000 f83f 	bl	801be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3730      	adds	r7, #48	; 0x30
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}

0801bd94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b08a      	sub	sp, #40	; 0x28
 801bd98:	af02      	add	r7, sp, #8
 801bd9a:	60f8      	str	r0, [r7, #12]
 801bd9c:	60b9      	str	r1, [r7, #8]
 801bd9e:	4613      	mov	r3, r2
 801bda0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d10a      	bne.n	801bdbe <xQueueGenericCreate+0x2a>
	__asm volatile
 801bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdac:	f383 8811 	msr	BASEPRI, r3
 801bdb0:	f3bf 8f6f 	isb	sy
 801bdb4:	f3bf 8f4f 	dsb	sy
 801bdb8:	613b      	str	r3, [r7, #16]
}
 801bdba:	bf00      	nop
 801bdbc:	e7fe      	b.n	801bdbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	68ba      	ldr	r2, [r7, #8]
 801bdc2:	fb02 f303 	mul.w	r3, r2, r3
 801bdc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801bdc8:	69fb      	ldr	r3, [r7, #28]
 801bdca:	3350      	adds	r3, #80	; 0x50
 801bdcc:	4618      	mov	r0, r3
 801bdce:	f002 fd83 	bl	801e8d8 <pvPortMalloc>
 801bdd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801bdd4:	69bb      	ldr	r3, [r7, #24]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d011      	beq.n	801bdfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801bdda:	69bb      	ldr	r3, [r7, #24]
 801bddc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801bdde:	697b      	ldr	r3, [r7, #20]
 801bde0:	3350      	adds	r3, #80	; 0x50
 801bde2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801bde4:	69bb      	ldr	r3, [r7, #24]
 801bde6:	2200      	movs	r2, #0
 801bde8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801bdec:	79fa      	ldrb	r2, [r7, #7]
 801bdee:	69bb      	ldr	r3, [r7, #24]
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	4613      	mov	r3, r2
 801bdf4:	697a      	ldr	r2, [r7, #20]
 801bdf6:	68b9      	ldr	r1, [r7, #8]
 801bdf8:	68f8      	ldr	r0, [r7, #12]
 801bdfa:	f000 f805 	bl	801be08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801bdfe:	69bb      	ldr	r3, [r7, #24]
	}
 801be00:	4618      	mov	r0, r3
 801be02:	3720      	adds	r7, #32
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b084      	sub	sp, #16
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	60f8      	str	r0, [r7, #12]
 801be10:	60b9      	str	r1, [r7, #8]
 801be12:	607a      	str	r2, [r7, #4]
 801be14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801be16:	68bb      	ldr	r3, [r7, #8]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d103      	bne.n	801be24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801be1c:	69bb      	ldr	r3, [r7, #24]
 801be1e:	69ba      	ldr	r2, [r7, #24]
 801be20:	601a      	str	r2, [r3, #0]
 801be22:	e002      	b.n	801be2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801be24:	69bb      	ldr	r3, [r7, #24]
 801be26:	687a      	ldr	r2, [r7, #4]
 801be28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801be2a:	69bb      	ldr	r3, [r7, #24]
 801be2c:	68fa      	ldr	r2, [r7, #12]
 801be2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801be30:	69bb      	ldr	r3, [r7, #24]
 801be32:	68ba      	ldr	r2, [r7, #8]
 801be34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801be36:	2101      	movs	r1, #1
 801be38:	69b8      	ldr	r0, [r7, #24]
 801be3a:	f7ff fecb 	bl	801bbd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801be3e:	69bb      	ldr	r3, [r7, #24]
 801be40:	78fa      	ldrb	r2, [r7, #3]
 801be42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801be46:	bf00      	nop
 801be48:	3710      	adds	r7, #16
 801be4a:	46bd      	mov	sp, r7
 801be4c:	bd80      	pop	{r7, pc}

0801be4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801be4e:	b580      	push	{r7, lr}
 801be50:	b08a      	sub	sp, #40	; 0x28
 801be52:	af02      	add	r7, sp, #8
 801be54:	60f8      	str	r0, [r7, #12]
 801be56:	60b9      	str	r1, [r7, #8]
 801be58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d10a      	bne.n	801be76 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 801be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be64:	f383 8811 	msr	BASEPRI, r3
 801be68:	f3bf 8f6f 	isb	sy
 801be6c:	f3bf 8f4f 	dsb	sy
 801be70:	61bb      	str	r3, [r7, #24]
}
 801be72:	bf00      	nop
 801be74:	e7fe      	b.n	801be74 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801be76:	68ba      	ldr	r2, [r7, #8]
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	429a      	cmp	r2, r3
 801be7c:	d90a      	bls.n	801be94 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be82:	f383 8811 	msr	BASEPRI, r3
 801be86:	f3bf 8f6f 	isb	sy
 801be8a:	f3bf 8f4f 	dsb	sy
 801be8e:	617b      	str	r3, [r7, #20]
}
 801be90:	bf00      	nop
 801be92:	e7fe      	b.n	801be92 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801be94:	2302      	movs	r3, #2
 801be96:	9300      	str	r3, [sp, #0]
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	2200      	movs	r2, #0
 801be9c:	2100      	movs	r1, #0
 801be9e:	68f8      	ldr	r0, [r7, #12]
 801bea0:	f7ff ff00 	bl	801bca4 <xQueueGenericCreateStatic>
 801bea4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801bea6:	69fb      	ldr	r3, [r7, #28]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d002      	beq.n	801beb2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801beac:	69fb      	ldr	r3, [r7, #28]
 801beae:	68ba      	ldr	r2, [r7, #8]
 801beb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801beb2:	69fb      	ldr	r3, [r7, #28]
	}
 801beb4:	4618      	mov	r0, r3
 801beb6:	3720      	adds	r7, #32
 801beb8:	46bd      	mov	sp, r7
 801beba:	bd80      	pop	{r7, pc}

0801bebc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801bebc:	b580      	push	{r7, lr}
 801bebe:	b086      	sub	sp, #24
 801bec0:	af00      	add	r7, sp, #0
 801bec2:	6078      	str	r0, [r7, #4]
 801bec4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d10a      	bne.n	801bee2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801becc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bed0:	f383 8811 	msr	BASEPRI, r3
 801bed4:	f3bf 8f6f 	isb	sy
 801bed8:	f3bf 8f4f 	dsb	sy
 801bedc:	613b      	str	r3, [r7, #16]
}
 801bede:	bf00      	nop
 801bee0:	e7fe      	b.n	801bee0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801bee2:	683a      	ldr	r2, [r7, #0]
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	429a      	cmp	r2, r3
 801bee8:	d90a      	bls.n	801bf00 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beee:	f383 8811 	msr	BASEPRI, r3
 801bef2:	f3bf 8f6f 	isb	sy
 801bef6:	f3bf 8f4f 	dsb	sy
 801befa:	60fb      	str	r3, [r7, #12]
}
 801befc:	bf00      	nop
 801befe:	e7fe      	b.n	801befe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801bf00:	2202      	movs	r2, #2
 801bf02:	2100      	movs	r1, #0
 801bf04:	6878      	ldr	r0, [r7, #4]
 801bf06:	f7ff ff45 	bl	801bd94 <xQueueGenericCreate>
 801bf0a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801bf0c:	697b      	ldr	r3, [r7, #20]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d002      	beq.n	801bf18 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801bf12:	697b      	ldr	r3, [r7, #20]
 801bf14:	683a      	ldr	r2, [r7, #0]
 801bf16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801bf18:	697b      	ldr	r3, [r7, #20]
	}
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	3718      	adds	r7, #24
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}
	...

0801bf24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801bf24:	b580      	push	{r7, lr}
 801bf26:	b08e      	sub	sp, #56	; 0x38
 801bf28:	af00      	add	r7, sp, #0
 801bf2a:	60f8      	str	r0, [r7, #12]
 801bf2c:	60b9      	str	r1, [r7, #8]
 801bf2e:	607a      	str	r2, [r7, #4]
 801bf30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801bf32:	2300      	movs	r3, #0
 801bf34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf3c:	2b00      	cmp	r3, #0
 801bf3e:	d10a      	bne.n	801bf56 <xQueueGenericSend+0x32>
	__asm volatile
 801bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf44:	f383 8811 	msr	BASEPRI, r3
 801bf48:	f3bf 8f6f 	isb	sy
 801bf4c:	f3bf 8f4f 	dsb	sy
 801bf50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801bf52:	bf00      	nop
 801bf54:	e7fe      	b.n	801bf54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	2b00      	cmp	r3, #0
 801bf5a:	d103      	bne.n	801bf64 <xQueueGenericSend+0x40>
 801bf5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d101      	bne.n	801bf68 <xQueueGenericSend+0x44>
 801bf64:	2301      	movs	r3, #1
 801bf66:	e000      	b.n	801bf6a <xQueueGenericSend+0x46>
 801bf68:	2300      	movs	r3, #0
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d10a      	bne.n	801bf84 <xQueueGenericSend+0x60>
	__asm volatile
 801bf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf72:	f383 8811 	msr	BASEPRI, r3
 801bf76:	f3bf 8f6f 	isb	sy
 801bf7a:	f3bf 8f4f 	dsb	sy
 801bf7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 801bf80:	bf00      	nop
 801bf82:	e7fe      	b.n	801bf82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	2b02      	cmp	r3, #2
 801bf88:	d103      	bne.n	801bf92 <xQueueGenericSend+0x6e>
 801bf8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bf8e:	2b01      	cmp	r3, #1
 801bf90:	d101      	bne.n	801bf96 <xQueueGenericSend+0x72>
 801bf92:	2301      	movs	r3, #1
 801bf94:	e000      	b.n	801bf98 <xQueueGenericSend+0x74>
 801bf96:	2300      	movs	r3, #0
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d10a      	bne.n	801bfb2 <xQueueGenericSend+0x8e>
	__asm volatile
 801bf9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfa0:	f383 8811 	msr	BASEPRI, r3
 801bfa4:	f3bf 8f6f 	isb	sy
 801bfa8:	f3bf 8f4f 	dsb	sy
 801bfac:	623b      	str	r3, [r7, #32]
}
 801bfae:	bf00      	nop
 801bfb0:	e7fe      	b.n	801bfb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801bfb2:	f001 fd13 	bl	801d9dc <xTaskGetSchedulerState>
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d102      	bne.n	801bfc2 <xQueueGenericSend+0x9e>
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d101      	bne.n	801bfc6 <xQueueGenericSend+0xa2>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	e000      	b.n	801bfc8 <xQueueGenericSend+0xa4>
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d10a      	bne.n	801bfe2 <xQueueGenericSend+0xbe>
	__asm volatile
 801bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfd0:	f383 8811 	msr	BASEPRI, r3
 801bfd4:	f3bf 8f6f 	isb	sy
 801bfd8:	f3bf 8f4f 	dsb	sy
 801bfdc:	61fb      	str	r3, [r7, #28]
}
 801bfde:	bf00      	nop
 801bfe0:	e7fe      	b.n	801bfe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801bfe2:	f002 fb57 	bl	801e694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bfee:	429a      	cmp	r2, r3
 801bff0:	d302      	bcc.n	801bff8 <xQueueGenericSend+0xd4>
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	2b02      	cmp	r3, #2
 801bff6:	d129      	bne.n	801c04c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801bff8:	683a      	ldr	r2, [r7, #0]
 801bffa:	68b9      	ldr	r1, [r7, #8]
 801bffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801bffe:	f000 fc5e 	bl	801c8be <prvCopyDataToQueue>
 801c002:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d010      	beq.n	801c02e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c00e:	3324      	adds	r3, #36	; 0x24
 801c010:	4618      	mov	r0, r3
 801c012:	f001 fb25 	bl	801d660 <xTaskRemoveFromEventList>
 801c016:	4603      	mov	r3, r0
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d013      	beq.n	801c044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801c01c:	4b3f      	ldr	r3, [pc, #252]	; (801c11c <xQueueGenericSend+0x1f8>)
 801c01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c022:	601a      	str	r2, [r3, #0]
 801c024:	f3bf 8f4f 	dsb	sy
 801c028:	f3bf 8f6f 	isb	sy
 801c02c:	e00a      	b.n	801c044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c030:	2b00      	cmp	r3, #0
 801c032:	d007      	beq.n	801c044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801c034:	4b39      	ldr	r3, [pc, #228]	; (801c11c <xQueueGenericSend+0x1f8>)
 801c036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c03a:	601a      	str	r2, [r3, #0]
 801c03c:	f3bf 8f4f 	dsb	sy
 801c040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801c044:	f002 fb56 	bl	801e6f4 <vPortExitCritical>
				return pdPASS;
 801c048:	2301      	movs	r3, #1
 801c04a:	e063      	b.n	801c114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d103      	bne.n	801c05a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801c052:	f002 fb4f 	bl	801e6f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801c056:	2300      	movs	r3, #0
 801c058:	e05c      	b.n	801c114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801c05a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d106      	bne.n	801c06e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801c060:	f107 0314 	add.w	r3, r7, #20
 801c064:	4618      	mov	r0, r3
 801c066:	f001 fb5f 	bl	801d728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801c06a:	2301      	movs	r3, #1
 801c06c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801c06e:	f002 fb41 	bl	801e6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801c072:	f001 f8d1 	bl	801d218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801c076:	f002 fb0d 	bl	801e694 <vPortEnterCritical>
 801c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c07c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c080:	b25b      	sxtb	r3, r3
 801c082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c086:	d103      	bne.n	801c090 <xQueueGenericSend+0x16c>
 801c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c08a:	2200      	movs	r2, #0
 801c08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c096:	b25b      	sxtb	r3, r3
 801c098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c09c:	d103      	bne.n	801c0a6 <xQueueGenericSend+0x182>
 801c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801c0a6:	f002 fb25 	bl	801e6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801c0aa:	1d3a      	adds	r2, r7, #4
 801c0ac:	f107 0314 	add.w	r3, r7, #20
 801c0b0:	4611      	mov	r1, r2
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	f001 fb4e 	bl	801d754 <xTaskCheckForTimeOut>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d124      	bne.n	801c108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801c0be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c0c0:	f000 fcf5 	bl	801caae <prvIsQueueFull>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d018      	beq.n	801c0fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801c0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0cc:	3310      	adds	r3, #16
 801c0ce:	687a      	ldr	r2, [r7, #4]
 801c0d0:	4611      	mov	r1, r2
 801c0d2:	4618      	mov	r0, r3
 801c0d4:	f001 fa74 	bl	801d5c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801c0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c0da:	f000 fc80 	bl	801c9de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801c0de:	f001 f8a9 	bl	801d234 <xTaskResumeAll>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f47f af7c 	bne.w	801bfe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801c0ea:	4b0c      	ldr	r3, [pc, #48]	; (801c11c <xQueueGenericSend+0x1f8>)
 801c0ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c0f0:	601a      	str	r2, [r3, #0]
 801c0f2:	f3bf 8f4f 	dsb	sy
 801c0f6:	f3bf 8f6f 	isb	sy
 801c0fa:	e772      	b.n	801bfe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801c0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c0fe:	f000 fc6e 	bl	801c9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801c102:	f001 f897 	bl	801d234 <xTaskResumeAll>
 801c106:	e76c      	b.n	801bfe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801c108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c10a:	f000 fc68 	bl	801c9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801c10e:	f001 f891 	bl	801d234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801c112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801c114:	4618      	mov	r0, r3
 801c116:	3738      	adds	r7, #56	; 0x38
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}
 801c11c:	e000ed04 	.word	0xe000ed04

0801c120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801c120:	b580      	push	{r7, lr}
 801c122:	b090      	sub	sp, #64	; 0x40
 801c124:	af00      	add	r7, sp, #0
 801c126:	60f8      	str	r0, [r7, #12]
 801c128:	60b9      	str	r1, [r7, #8]
 801c12a:	607a      	str	r2, [r7, #4]
 801c12c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801c132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c134:	2b00      	cmp	r3, #0
 801c136:	d10a      	bne.n	801c14e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801c138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c13c:	f383 8811 	msr	BASEPRI, r3
 801c140:	f3bf 8f6f 	isb	sy
 801c144:	f3bf 8f4f 	dsb	sy
 801c148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801c14a:	bf00      	nop
 801c14c:	e7fe      	b.n	801c14c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c14e:	68bb      	ldr	r3, [r7, #8]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d103      	bne.n	801c15c <xQueueGenericSendFromISR+0x3c>
 801c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d101      	bne.n	801c160 <xQueueGenericSendFromISR+0x40>
 801c15c:	2301      	movs	r3, #1
 801c15e:	e000      	b.n	801c162 <xQueueGenericSendFromISR+0x42>
 801c160:	2300      	movs	r3, #0
 801c162:	2b00      	cmp	r3, #0
 801c164:	d10a      	bne.n	801c17c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801c166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c16a:	f383 8811 	msr	BASEPRI, r3
 801c16e:	f3bf 8f6f 	isb	sy
 801c172:	f3bf 8f4f 	dsb	sy
 801c176:	627b      	str	r3, [r7, #36]	; 0x24
}
 801c178:	bf00      	nop
 801c17a:	e7fe      	b.n	801c17a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801c17c:	683b      	ldr	r3, [r7, #0]
 801c17e:	2b02      	cmp	r3, #2
 801c180:	d103      	bne.n	801c18a <xQueueGenericSendFromISR+0x6a>
 801c182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c186:	2b01      	cmp	r3, #1
 801c188:	d101      	bne.n	801c18e <xQueueGenericSendFromISR+0x6e>
 801c18a:	2301      	movs	r3, #1
 801c18c:	e000      	b.n	801c190 <xQueueGenericSendFromISR+0x70>
 801c18e:	2300      	movs	r3, #0
 801c190:	2b00      	cmp	r3, #0
 801c192:	d10a      	bne.n	801c1aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c198:	f383 8811 	msr	BASEPRI, r3
 801c19c:	f3bf 8f6f 	isb	sy
 801c1a0:	f3bf 8f4f 	dsb	sy
 801c1a4:	623b      	str	r3, [r7, #32]
}
 801c1a6:	bf00      	nop
 801c1a8:	e7fe      	b.n	801c1a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801c1aa:	f002 fb55 	bl	801e858 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801c1ae:	f3ef 8211 	mrs	r2, BASEPRI
 801c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1b6:	f383 8811 	msr	BASEPRI, r3
 801c1ba:	f3bf 8f6f 	isb	sy
 801c1be:	f3bf 8f4f 	dsb	sy
 801c1c2:	61fa      	str	r2, [r7, #28]
 801c1c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801c1c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801c1c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d302      	bcc.n	801c1dc <xQueueGenericSendFromISR+0xbc>
 801c1d6:	683b      	ldr	r3, [r7, #0]
 801c1d8:	2b02      	cmp	r3, #2
 801c1da:	d12f      	bne.n	801c23c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801c1ec:	683a      	ldr	r2, [r7, #0]
 801c1ee:	68b9      	ldr	r1, [r7, #8]
 801c1f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801c1f2:	f000 fb64 	bl	801c8be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801c1f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801c1fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c1fe:	d112      	bne.n	801c226 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c204:	2b00      	cmp	r3, #0
 801c206:	d016      	beq.n	801c236 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c20a:	3324      	adds	r3, #36	; 0x24
 801c20c:	4618      	mov	r0, r3
 801c20e:	f001 fa27 	bl	801d660 <xTaskRemoveFromEventList>
 801c212:	4603      	mov	r3, r0
 801c214:	2b00      	cmp	r3, #0
 801c216:	d00e      	beq.n	801c236 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d00b      	beq.n	801c236 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	2201      	movs	r2, #1
 801c222:	601a      	str	r2, [r3, #0]
 801c224:	e007      	b.n	801c236 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801c226:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801c22a:	3301      	adds	r3, #1
 801c22c:	b2db      	uxtb	r3, r3
 801c22e:	b25a      	sxtb	r2, r3
 801c230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801c236:	2301      	movs	r3, #1
 801c238:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801c23a:	e001      	b.n	801c240 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801c23c:	2300      	movs	r3, #0
 801c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c242:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801c244:	697b      	ldr	r3, [r7, #20]
 801c246:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801c24a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801c24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801c24e:	4618      	mov	r0, r3
 801c250:	3740      	adds	r7, #64	; 0x40
 801c252:	46bd      	mov	sp, r7
 801c254:	bd80      	pop	{r7, pc}

0801c256 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801c256:	b580      	push	{r7, lr}
 801c258:	b08e      	sub	sp, #56	; 0x38
 801c25a:	af00      	add	r7, sp, #0
 801c25c:	6078      	str	r0, [r7, #4]
 801c25e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801c264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c266:	2b00      	cmp	r3, #0
 801c268:	d10a      	bne.n	801c280 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801c26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c26e:	f383 8811 	msr	BASEPRI, r3
 801c272:	f3bf 8f6f 	isb	sy
 801c276:	f3bf 8f4f 	dsb	sy
 801c27a:	623b      	str	r3, [r7, #32]
}
 801c27c:	bf00      	nop
 801c27e:	e7fe      	b.n	801c27e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c284:	2b00      	cmp	r3, #0
 801c286:	d00a      	beq.n	801c29e <xQueueGiveFromISR+0x48>
	__asm volatile
 801c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c28c:	f383 8811 	msr	BASEPRI, r3
 801c290:	f3bf 8f6f 	isb	sy
 801c294:	f3bf 8f4f 	dsb	sy
 801c298:	61fb      	str	r3, [r7, #28]
}
 801c29a:	bf00      	nop
 801c29c:	e7fe      	b.n	801c29c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d103      	bne.n	801c2ae <xQueueGiveFromISR+0x58>
 801c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2a8:	689b      	ldr	r3, [r3, #8]
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d101      	bne.n	801c2b2 <xQueueGiveFromISR+0x5c>
 801c2ae:	2301      	movs	r3, #1
 801c2b0:	e000      	b.n	801c2b4 <xQueueGiveFromISR+0x5e>
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d10a      	bne.n	801c2ce <xQueueGiveFromISR+0x78>
	__asm volatile
 801c2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2bc:	f383 8811 	msr	BASEPRI, r3
 801c2c0:	f3bf 8f6f 	isb	sy
 801c2c4:	f3bf 8f4f 	dsb	sy
 801c2c8:	61bb      	str	r3, [r7, #24]
}
 801c2ca:	bf00      	nop
 801c2cc:	e7fe      	b.n	801c2cc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801c2ce:	f002 fac3 	bl	801e858 <vPortValidateInterruptPriority>
	__asm volatile
 801c2d2:	f3ef 8211 	mrs	r2, BASEPRI
 801c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2da:	f383 8811 	msr	BASEPRI, r3
 801c2de:	f3bf 8f6f 	isb	sy
 801c2e2:	f3bf 8f4f 	dsb	sy
 801c2e6:	617a      	str	r2, [r7, #20]
 801c2e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801c2ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801c2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c2f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c2fa:	429a      	cmp	r2, r3
 801c2fc:	d22b      	bcs.n	801c356 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c30a:	1c5a      	adds	r2, r3, #1
 801c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c30e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801c310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c318:	d112      	bne.n	801c340 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d016      	beq.n	801c350 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c324:	3324      	adds	r3, #36	; 0x24
 801c326:	4618      	mov	r0, r3
 801c328:	f001 f99a 	bl	801d660 <xTaskRemoveFromEventList>
 801c32c:	4603      	mov	r3, r0
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d00e      	beq.n	801c350 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801c332:	683b      	ldr	r3, [r7, #0]
 801c334:	2b00      	cmp	r3, #0
 801c336:	d00b      	beq.n	801c350 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	2201      	movs	r2, #1
 801c33c:	601a      	str	r2, [r3, #0]
 801c33e:	e007      	b.n	801c350 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801c340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c344:	3301      	adds	r3, #1
 801c346:	b2db      	uxtb	r3, r3
 801c348:	b25a      	sxtb	r2, r3
 801c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c34c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801c350:	2301      	movs	r3, #1
 801c352:	637b      	str	r3, [r7, #52]	; 0x34
 801c354:	e001      	b.n	801c35a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801c356:	2300      	movs	r3, #0
 801c358:	637b      	str	r3, [r7, #52]	; 0x34
 801c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c35c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801c35e:	68fb      	ldr	r3, [r7, #12]
 801c360:	f383 8811 	msr	BASEPRI, r3
}
 801c364:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801c366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801c368:	4618      	mov	r0, r3
 801c36a:	3738      	adds	r7, #56	; 0x38
 801c36c:	46bd      	mov	sp, r7
 801c36e:	bd80      	pop	{r7, pc}

0801c370 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801c370:	b580      	push	{r7, lr}
 801c372:	b08c      	sub	sp, #48	; 0x30
 801c374:	af00      	add	r7, sp, #0
 801c376:	60f8      	str	r0, [r7, #12]
 801c378:	60b9      	str	r1, [r7, #8]
 801c37a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801c37c:	2300      	movs	r3, #0
 801c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801c384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c386:	2b00      	cmp	r3, #0
 801c388:	d10a      	bne.n	801c3a0 <xQueueReceive+0x30>
	__asm volatile
 801c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c38e:	f383 8811 	msr	BASEPRI, r3
 801c392:	f3bf 8f6f 	isb	sy
 801c396:	f3bf 8f4f 	dsb	sy
 801c39a:	623b      	str	r3, [r7, #32]
}
 801c39c:	bf00      	nop
 801c39e:	e7fe      	b.n	801c39e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c3a0:	68bb      	ldr	r3, [r7, #8]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d103      	bne.n	801c3ae <xQueueReceive+0x3e>
 801c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d101      	bne.n	801c3b2 <xQueueReceive+0x42>
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	e000      	b.n	801c3b4 <xQueueReceive+0x44>
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d10a      	bne.n	801c3ce <xQueueReceive+0x5e>
	__asm volatile
 801c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3bc:	f383 8811 	msr	BASEPRI, r3
 801c3c0:	f3bf 8f6f 	isb	sy
 801c3c4:	f3bf 8f4f 	dsb	sy
 801c3c8:	61fb      	str	r3, [r7, #28]
}
 801c3ca:	bf00      	nop
 801c3cc:	e7fe      	b.n	801c3cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801c3ce:	f001 fb05 	bl	801d9dc <xTaskGetSchedulerState>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	2b00      	cmp	r3, #0
 801c3d6:	d102      	bne.n	801c3de <xQueueReceive+0x6e>
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d101      	bne.n	801c3e2 <xQueueReceive+0x72>
 801c3de:	2301      	movs	r3, #1
 801c3e0:	e000      	b.n	801c3e4 <xQueueReceive+0x74>
 801c3e2:	2300      	movs	r3, #0
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d10a      	bne.n	801c3fe <xQueueReceive+0x8e>
	__asm volatile
 801c3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3ec:	f383 8811 	msr	BASEPRI, r3
 801c3f0:	f3bf 8f6f 	isb	sy
 801c3f4:	f3bf 8f4f 	dsb	sy
 801c3f8:	61bb      	str	r3, [r7, #24]
}
 801c3fa:	bf00      	nop
 801c3fc:	e7fe      	b.n	801c3fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801c3fe:	f002 f949 	bl	801e694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c406:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d01f      	beq.n	801c44e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801c40e:	68b9      	ldr	r1, [r7, #8]
 801c410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c412:	f000 fabe 	bl	801c992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c418:	1e5a      	subs	r2, r3, #1
 801c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c41c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c420:	691b      	ldr	r3, [r3, #16]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d00f      	beq.n	801c446 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c428:	3310      	adds	r3, #16
 801c42a:	4618      	mov	r0, r3
 801c42c:	f001 f918 	bl	801d660 <xTaskRemoveFromEventList>
 801c430:	4603      	mov	r3, r0
 801c432:	2b00      	cmp	r3, #0
 801c434:	d007      	beq.n	801c446 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801c436:	4b3d      	ldr	r3, [pc, #244]	; (801c52c <xQueueReceive+0x1bc>)
 801c438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c43c:	601a      	str	r2, [r3, #0]
 801c43e:	f3bf 8f4f 	dsb	sy
 801c442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801c446:	f002 f955 	bl	801e6f4 <vPortExitCritical>
				return pdPASS;
 801c44a:	2301      	movs	r3, #1
 801c44c:	e069      	b.n	801c522 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d103      	bne.n	801c45c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801c454:	f002 f94e 	bl	801e6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801c458:	2300      	movs	r3, #0
 801c45a:	e062      	b.n	801c522 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d106      	bne.n	801c470 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801c462:	f107 0310 	add.w	r3, r7, #16
 801c466:	4618      	mov	r0, r3
 801c468:	f001 f95e 	bl	801d728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801c46c:	2301      	movs	r3, #1
 801c46e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801c470:	f002 f940 	bl	801e6f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801c474:	f000 fed0 	bl	801d218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801c478:	f002 f90c 	bl	801e694 <vPortEnterCritical>
 801c47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c47e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c482:	b25b      	sxtb	r3, r3
 801c484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c488:	d103      	bne.n	801c492 <xQueueReceive+0x122>
 801c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c48c:	2200      	movs	r2, #0
 801c48e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c498:	b25b      	sxtb	r3, r3
 801c49a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c49e:	d103      	bne.n	801c4a8 <xQueueReceive+0x138>
 801c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801c4a8:	f002 f924 	bl	801e6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801c4ac:	1d3a      	adds	r2, r7, #4
 801c4ae:	f107 0310 	add.w	r3, r7, #16
 801c4b2:	4611      	mov	r1, r2
 801c4b4:	4618      	mov	r0, r3
 801c4b6:	f001 f94d 	bl	801d754 <xTaskCheckForTimeOut>
 801c4ba:	4603      	mov	r3, r0
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d123      	bne.n	801c508 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801c4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c4c2:	f000 fade 	bl	801ca82 <prvIsQueueEmpty>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d017      	beq.n	801c4fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4ce:	3324      	adds	r3, #36	; 0x24
 801c4d0:	687a      	ldr	r2, [r7, #4]
 801c4d2:	4611      	mov	r1, r2
 801c4d4:	4618      	mov	r0, r3
 801c4d6:	f001 f873 	bl	801d5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801c4da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c4dc:	f000 fa7f 	bl	801c9de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801c4e0:	f000 fea8 	bl	801d234 <xTaskResumeAll>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d189      	bne.n	801c3fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801c4ea:	4b10      	ldr	r3, [pc, #64]	; (801c52c <xQueueReceive+0x1bc>)
 801c4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c4f0:	601a      	str	r2, [r3, #0]
 801c4f2:	f3bf 8f4f 	dsb	sy
 801c4f6:	f3bf 8f6f 	isb	sy
 801c4fa:	e780      	b.n	801c3fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801c4fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c4fe:	f000 fa6e 	bl	801c9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801c502:	f000 fe97 	bl	801d234 <xTaskResumeAll>
 801c506:	e77a      	b.n	801c3fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801c508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c50a:	f000 fa68 	bl	801c9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801c50e:	f000 fe91 	bl	801d234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801c512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c514:	f000 fab5 	bl	801ca82 <prvIsQueueEmpty>
 801c518:	4603      	mov	r3, r0
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	f43f af6f 	beq.w	801c3fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801c520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801c522:	4618      	mov	r0, r3
 801c524:	3730      	adds	r7, #48	; 0x30
 801c526:	46bd      	mov	sp, r7
 801c528:	bd80      	pop	{r7, pc}
 801c52a:	bf00      	nop
 801c52c:	e000ed04 	.word	0xe000ed04

0801c530 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b08e      	sub	sp, #56	; 0x38
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801c53a:	2300      	movs	r3, #0
 801c53c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801c542:	2300      	movs	r3, #0
 801c544:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801c546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d10a      	bne.n	801c562 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801c54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c550:	f383 8811 	msr	BASEPRI, r3
 801c554:	f3bf 8f6f 	isb	sy
 801c558:	f3bf 8f4f 	dsb	sy
 801c55c:	623b      	str	r3, [r7, #32]
}
 801c55e:	bf00      	nop
 801c560:	e7fe      	b.n	801c560 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801c562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c566:	2b00      	cmp	r3, #0
 801c568:	d00a      	beq.n	801c580 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c56e:	f383 8811 	msr	BASEPRI, r3
 801c572:	f3bf 8f6f 	isb	sy
 801c576:	f3bf 8f4f 	dsb	sy
 801c57a:	61fb      	str	r3, [r7, #28]
}
 801c57c:	bf00      	nop
 801c57e:	e7fe      	b.n	801c57e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801c580:	f001 fa2c 	bl	801d9dc <xTaskGetSchedulerState>
 801c584:	4603      	mov	r3, r0
 801c586:	2b00      	cmp	r3, #0
 801c588:	d102      	bne.n	801c590 <xQueueSemaphoreTake+0x60>
 801c58a:	683b      	ldr	r3, [r7, #0]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d101      	bne.n	801c594 <xQueueSemaphoreTake+0x64>
 801c590:	2301      	movs	r3, #1
 801c592:	e000      	b.n	801c596 <xQueueSemaphoreTake+0x66>
 801c594:	2300      	movs	r3, #0
 801c596:	2b00      	cmp	r3, #0
 801c598:	d10a      	bne.n	801c5b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c59e:	f383 8811 	msr	BASEPRI, r3
 801c5a2:	f3bf 8f6f 	isb	sy
 801c5a6:	f3bf 8f4f 	dsb	sy
 801c5aa:	61bb      	str	r3, [r7, #24]
}
 801c5ac:	bf00      	nop
 801c5ae:	e7fe      	b.n	801c5ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801c5b0:	f002 f870 	bl	801e694 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801c5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d024      	beq.n	801c60a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c5c2:	1e5a      	subs	r2, r3, #1
 801c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d104      	bne.n	801c5da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801c5d0:	f001 fb7a 	bl	801dcc8 <pvTaskIncrementMutexHeldCount>
 801c5d4:	4602      	mov	r2, r0
 801c5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5dc:	691b      	ldr	r3, [r3, #16]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d00f      	beq.n	801c602 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5e4:	3310      	adds	r3, #16
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	f001 f83a 	bl	801d660 <xTaskRemoveFromEventList>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d007      	beq.n	801c602 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801c5f2:	4b54      	ldr	r3, [pc, #336]	; (801c744 <xQueueSemaphoreTake+0x214>)
 801c5f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c5f8:	601a      	str	r2, [r3, #0]
 801c5fa:	f3bf 8f4f 	dsb	sy
 801c5fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801c602:	f002 f877 	bl	801e6f4 <vPortExitCritical>
				return pdPASS;
 801c606:	2301      	movs	r3, #1
 801c608:	e097      	b.n	801c73a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801c60a:	683b      	ldr	r3, [r7, #0]
 801c60c:	2b00      	cmp	r3, #0
 801c60e:	d111      	bne.n	801c634 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c612:	2b00      	cmp	r3, #0
 801c614:	d00a      	beq.n	801c62c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c61a:	f383 8811 	msr	BASEPRI, r3
 801c61e:	f3bf 8f6f 	isb	sy
 801c622:	f3bf 8f4f 	dsb	sy
 801c626:	617b      	str	r3, [r7, #20]
}
 801c628:	bf00      	nop
 801c62a:	e7fe      	b.n	801c62a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801c62c:	f002 f862 	bl	801e6f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801c630:	2300      	movs	r3, #0
 801c632:	e082      	b.n	801c73a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801c634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c636:	2b00      	cmp	r3, #0
 801c638:	d106      	bne.n	801c648 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801c63a:	f107 030c 	add.w	r3, r7, #12
 801c63e:	4618      	mov	r0, r3
 801c640:	f001 f872 	bl	801d728 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801c644:	2301      	movs	r3, #1
 801c646:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801c648:	f002 f854 	bl	801e6f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801c64c:	f000 fde4 	bl	801d218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801c650:	f002 f820 	bl	801e694 <vPortEnterCritical>
 801c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c65a:	b25b      	sxtb	r3, r3
 801c65c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c660:	d103      	bne.n	801c66a <xQueueSemaphoreTake+0x13a>
 801c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c664:	2200      	movs	r2, #0
 801c666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c66c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c670:	b25b      	sxtb	r3, r3
 801c672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c676:	d103      	bne.n	801c680 <xQueueSemaphoreTake+0x150>
 801c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c67a:	2200      	movs	r2, #0
 801c67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801c680:	f002 f838 	bl	801e6f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801c684:	463a      	mov	r2, r7
 801c686:	f107 030c 	add.w	r3, r7, #12
 801c68a:	4611      	mov	r1, r2
 801c68c:	4618      	mov	r0, r3
 801c68e:	f001 f861 	bl	801d754 <xTaskCheckForTimeOut>
 801c692:	4603      	mov	r3, r0
 801c694:	2b00      	cmp	r3, #0
 801c696:	d132      	bne.n	801c6fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801c698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c69a:	f000 f9f2 	bl	801ca82 <prvIsQueueEmpty>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d026      	beq.n	801c6f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d109      	bne.n	801c6c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801c6ac:	f001 fff2 	bl	801e694 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6b2:	689b      	ldr	r3, [r3, #8]
 801c6b4:	4618      	mov	r0, r3
 801c6b6:	f001 f9af 	bl	801da18 <xTaskPriorityInherit>
 801c6ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801c6bc:	f002 f81a 	bl	801e6f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6c2:	3324      	adds	r3, #36	; 0x24
 801c6c4:	683a      	ldr	r2, [r7, #0]
 801c6c6:	4611      	mov	r1, r2
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f000 ff79 	bl	801d5c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801c6ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c6d0:	f000 f985 	bl	801c9de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801c6d4:	f000 fdae 	bl	801d234 <xTaskResumeAll>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	f47f af68 	bne.w	801c5b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801c6e0:	4b18      	ldr	r3, [pc, #96]	; (801c744 <xQueueSemaphoreTake+0x214>)
 801c6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c6e6:	601a      	str	r2, [r3, #0]
 801c6e8:	f3bf 8f4f 	dsb	sy
 801c6ec:	f3bf 8f6f 	isb	sy
 801c6f0:	e75e      	b.n	801c5b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801c6f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c6f4:	f000 f973 	bl	801c9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801c6f8:	f000 fd9c 	bl	801d234 <xTaskResumeAll>
 801c6fc:	e758      	b.n	801c5b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801c6fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c700:	f000 f96d 	bl	801c9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801c704:	f000 fd96 	bl	801d234 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801c708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c70a:	f000 f9ba 	bl	801ca82 <prvIsQueueEmpty>
 801c70e:	4603      	mov	r3, r0
 801c710:	2b00      	cmp	r3, #0
 801c712:	f43f af4d 	beq.w	801c5b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d00d      	beq.n	801c738 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801c71c:	f001 ffba 	bl	801e694 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801c720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801c722:	f000 f8b4 	bl	801c88e <prvGetDisinheritPriorityAfterTimeout>
 801c726:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c72a:	689b      	ldr	r3, [r3, #8]
 801c72c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c72e:	4618      	mov	r0, r3
 801c730:	f001 fa48 	bl	801dbc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801c734:	f001 ffde 	bl	801e6f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801c738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801c73a:	4618      	mov	r0, r3
 801c73c:	3738      	adds	r7, #56	; 0x38
 801c73e:	46bd      	mov	sp, r7
 801c740:	bd80      	pop	{r7, pc}
 801c742:	bf00      	nop
 801c744:	e000ed04 	.word	0xe000ed04

0801c748 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b08e      	sub	sp, #56	; 0x38
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	60f8      	str	r0, [r7, #12]
 801c750:	60b9      	str	r1, [r7, #8]
 801c752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d10a      	bne.n	801c774 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c762:	f383 8811 	msr	BASEPRI, r3
 801c766:	f3bf 8f6f 	isb	sy
 801c76a:	f3bf 8f4f 	dsb	sy
 801c76e:	623b      	str	r3, [r7, #32]
}
 801c770:	bf00      	nop
 801c772:	e7fe      	b.n	801c772 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801c774:	68bb      	ldr	r3, [r7, #8]
 801c776:	2b00      	cmp	r3, #0
 801c778:	d103      	bne.n	801c782 <xQueueReceiveFromISR+0x3a>
 801c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d101      	bne.n	801c786 <xQueueReceiveFromISR+0x3e>
 801c782:	2301      	movs	r3, #1
 801c784:	e000      	b.n	801c788 <xQueueReceiveFromISR+0x40>
 801c786:	2300      	movs	r3, #0
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d10a      	bne.n	801c7a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c790:	f383 8811 	msr	BASEPRI, r3
 801c794:	f3bf 8f6f 	isb	sy
 801c798:	f3bf 8f4f 	dsb	sy
 801c79c:	61fb      	str	r3, [r7, #28]
}
 801c79e:	bf00      	nop
 801c7a0:	e7fe      	b.n	801c7a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801c7a2:	f002 f859 	bl	801e858 <vPortValidateInterruptPriority>
	__asm volatile
 801c7a6:	f3ef 8211 	mrs	r2, BASEPRI
 801c7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c7ae:	f383 8811 	msr	BASEPRI, r3
 801c7b2:	f3bf 8f6f 	isb	sy
 801c7b6:	f3bf 8f4f 	dsb	sy
 801c7ba:	61ba      	str	r2, [r7, #24]
 801c7bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801c7be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801c7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d02f      	beq.n	801c82e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801c7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801c7d8:	68b9      	ldr	r1, [r7, #8]
 801c7da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c7dc:	f000 f8d9 	bl	801c992 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801c7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7e2:	1e5a      	subs	r2, r3, #1
 801c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801c7e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c7f0:	d112      	bne.n	801c818 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7f4:	691b      	ldr	r3, [r3, #16]
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d016      	beq.n	801c828 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c7fc:	3310      	adds	r3, #16
 801c7fe:	4618      	mov	r0, r3
 801c800:	f000 ff2e 	bl	801d660 <xTaskRemoveFromEventList>
 801c804:	4603      	mov	r3, r0
 801c806:	2b00      	cmp	r3, #0
 801c808:	d00e      	beq.n	801c828 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d00b      	beq.n	801c828 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	2201      	movs	r2, #1
 801c814:	601a      	str	r2, [r3, #0]
 801c816:	e007      	b.n	801c828 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801c818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c81c:	3301      	adds	r3, #1
 801c81e:	b2db      	uxtb	r3, r3
 801c820:	b25a      	sxtb	r2, r3
 801c822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801c828:	2301      	movs	r3, #1
 801c82a:	637b      	str	r3, [r7, #52]	; 0x34
 801c82c:	e001      	b.n	801c832 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801c82e:	2300      	movs	r3, #0
 801c830:	637b      	str	r3, [r7, #52]	; 0x34
 801c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c834:	613b      	str	r3, [r7, #16]
	__asm volatile
 801c836:	693b      	ldr	r3, [r7, #16]
 801c838:	f383 8811 	msr	BASEPRI, r3
}
 801c83c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801c83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801c840:	4618      	mov	r0, r3
 801c842:	3738      	adds	r7, #56	; 0x38
 801c844:	46bd      	mov	sp, r7
 801c846:	bd80      	pop	{r7, pc}

0801c848 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801c848:	b580      	push	{r7, lr}
 801c84a:	b084      	sub	sp, #16
 801c84c:	af00      	add	r7, sp, #0
 801c84e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	2b00      	cmp	r3, #0
 801c858:	d10a      	bne.n	801c870 <vQueueDelete+0x28>
	__asm volatile
 801c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c85e:	f383 8811 	msr	BASEPRI, r3
 801c862:	f3bf 8f6f 	isb	sy
 801c866:	f3bf 8f4f 	dsb	sy
 801c86a:	60bb      	str	r3, [r7, #8]
}
 801c86c:	bf00      	nop
 801c86e:	e7fe      	b.n	801c86e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801c870:	68f8      	ldr	r0, [r7, #12]
 801c872:	f000 f95f 	bl	801cb34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d102      	bne.n	801c886 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801c880:	68f8      	ldr	r0, [r7, #12]
 801c882:	f002 f8f5 	bl	801ea70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801c886:	bf00      	nop
 801c888:	3710      	adds	r7, #16
 801c88a:	46bd      	mov	sp, r7
 801c88c:	bd80      	pop	{r7, pc}

0801c88e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801c88e:	b480      	push	{r7}
 801c890:	b085      	sub	sp, #20
 801c892:	af00      	add	r7, sp, #0
 801c894:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d006      	beq.n	801c8ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801c8a8:	60fb      	str	r3, [r7, #12]
 801c8aa:	e001      	b.n	801c8b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801c8ac:	2300      	movs	r3, #0
 801c8ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801c8b0:	68fb      	ldr	r3, [r7, #12]
	}
 801c8b2:	4618      	mov	r0, r3
 801c8b4:	3714      	adds	r7, #20
 801c8b6:	46bd      	mov	sp, r7
 801c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8bc:	4770      	bx	lr

0801c8be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801c8be:	b580      	push	{r7, lr}
 801c8c0:	b086      	sub	sp, #24
 801c8c2:	af00      	add	r7, sp, #0
 801c8c4:	60f8      	str	r0, [r7, #12]
 801c8c6:	60b9      	str	r1, [r7, #8]
 801c8c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801c8ca:	2300      	movs	r3, #0
 801c8cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801c8ce:	68fb      	ldr	r3, [r7, #12]
 801c8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c8d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d10d      	bne.n	801c8f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d14d      	bne.n	801c980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	689b      	ldr	r3, [r3, #8]
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f001 f8fd 	bl	801dae8 <xTaskPriorityDisinherit>
 801c8ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	609a      	str	r2, [r3, #8]
 801c8f6:	e043      	b.n	801c980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d119      	bne.n	801c932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	6858      	ldr	r0, [r3, #4]
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c906:	461a      	mov	r2, r3
 801c908:	68b9      	ldr	r1, [r7, #8]
 801c90a:	f002 fa09 	bl	801ed20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	685a      	ldr	r2, [r3, #4]
 801c912:	68fb      	ldr	r3, [r7, #12]
 801c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c916:	441a      	add	r2, r3
 801c918:	68fb      	ldr	r3, [r7, #12]
 801c91a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c91c:	68fb      	ldr	r3, [r7, #12]
 801c91e:	685a      	ldr	r2, [r3, #4]
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	689b      	ldr	r3, [r3, #8]
 801c924:	429a      	cmp	r2, r3
 801c926:	d32b      	bcc.n	801c980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	681a      	ldr	r2, [r3, #0]
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	605a      	str	r2, [r3, #4]
 801c930:	e026      	b.n	801c980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	68d8      	ldr	r0, [r3, #12]
 801c936:	68fb      	ldr	r3, [r7, #12]
 801c938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c93a:	461a      	mov	r2, r3
 801c93c:	68b9      	ldr	r1, [r7, #8]
 801c93e:	f002 f9ef 	bl	801ed20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	68da      	ldr	r2, [r3, #12]
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c94a:	425b      	negs	r3, r3
 801c94c:	441a      	add	r2, r3
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801c952:	68fb      	ldr	r3, [r7, #12]
 801c954:	68da      	ldr	r2, [r3, #12]
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	429a      	cmp	r2, r3
 801c95c:	d207      	bcs.n	801c96e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	689a      	ldr	r2, [r3, #8]
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c966:	425b      	negs	r3, r3
 801c968:	441a      	add	r2, r3
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	2b02      	cmp	r3, #2
 801c972:	d105      	bne.n	801c980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801c974:	693b      	ldr	r3, [r7, #16]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d002      	beq.n	801c980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801c97a:	693b      	ldr	r3, [r7, #16]
 801c97c:	3b01      	subs	r3, #1
 801c97e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801c980:	693b      	ldr	r3, [r7, #16]
 801c982:	1c5a      	adds	r2, r3, #1
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801c988:	697b      	ldr	r3, [r7, #20]
}
 801c98a:	4618      	mov	r0, r3
 801c98c:	3718      	adds	r7, #24
 801c98e:	46bd      	mov	sp, r7
 801c990:	bd80      	pop	{r7, pc}

0801c992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801c992:	b580      	push	{r7, lr}
 801c994:	b082      	sub	sp, #8
 801c996:	af00      	add	r7, sp, #0
 801c998:	6078      	str	r0, [r7, #4]
 801c99a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d018      	beq.n	801c9d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	68da      	ldr	r2, [r3, #12]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9ac:	441a      	add	r2, r3
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	68da      	ldr	r2, [r3, #12]
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	689b      	ldr	r3, [r3, #8]
 801c9ba:	429a      	cmp	r2, r3
 801c9bc:	d303      	bcc.n	801c9c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	681a      	ldr	r2, [r3, #0]
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	68d9      	ldr	r1, [r3, #12]
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c9ce:	461a      	mov	r2, r3
 801c9d0:	6838      	ldr	r0, [r7, #0]
 801c9d2:	f002 f9a5 	bl	801ed20 <memcpy>
	}
}
 801c9d6:	bf00      	nop
 801c9d8:	3708      	adds	r7, #8
 801c9da:	46bd      	mov	sp, r7
 801c9dc:	bd80      	pop	{r7, pc}

0801c9de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801c9de:	b580      	push	{r7, lr}
 801c9e0:	b084      	sub	sp, #16
 801c9e2:	af00      	add	r7, sp, #0
 801c9e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801c9e6:	f001 fe55 	bl	801e694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801c9ea:	687b      	ldr	r3, [r7, #4]
 801c9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801c9f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801c9f2:	e011      	b.n	801ca18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d012      	beq.n	801ca22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	3324      	adds	r3, #36	; 0x24
 801ca00:	4618      	mov	r0, r3
 801ca02:	f000 fe2d 	bl	801d660 <xTaskRemoveFromEventList>
 801ca06:	4603      	mov	r3, r0
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d001      	beq.n	801ca10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801ca0c:	f000 ff04 	bl	801d818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801ca10:	7bfb      	ldrb	r3, [r7, #15]
 801ca12:	3b01      	subs	r3, #1
 801ca14:	b2db      	uxtb	r3, r3
 801ca16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801ca18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	dce9      	bgt.n	801c9f4 <prvUnlockQueue+0x16>
 801ca20:	e000      	b.n	801ca24 <prvUnlockQueue+0x46>
					break;
 801ca22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	22ff      	movs	r2, #255	; 0xff
 801ca28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801ca2c:	f001 fe62 	bl	801e6f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801ca30:	f001 fe30 	bl	801e694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ca3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ca3c:	e011      	b.n	801ca62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	691b      	ldr	r3, [r3, #16]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d012      	beq.n	801ca6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	3310      	adds	r3, #16
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	f000 fe08 	bl	801d660 <xTaskRemoveFromEventList>
 801ca50:	4603      	mov	r3, r0
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d001      	beq.n	801ca5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801ca56:	f000 fedf 	bl	801d818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801ca5a:	7bbb      	ldrb	r3, [r7, #14]
 801ca5c:	3b01      	subs	r3, #1
 801ca5e:	b2db      	uxtb	r3, r3
 801ca60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801ca62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	dce9      	bgt.n	801ca3e <prvUnlockQueue+0x60>
 801ca6a:	e000      	b.n	801ca6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801ca6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	22ff      	movs	r2, #255	; 0xff
 801ca72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801ca76:	f001 fe3d 	bl	801e6f4 <vPortExitCritical>
}
 801ca7a:	bf00      	nop
 801ca7c:	3710      	adds	r7, #16
 801ca7e:	46bd      	mov	sp, r7
 801ca80:	bd80      	pop	{r7, pc}

0801ca82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801ca82:	b580      	push	{r7, lr}
 801ca84:	b084      	sub	sp, #16
 801ca86:	af00      	add	r7, sp, #0
 801ca88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801ca8a:	f001 fe03 	bl	801e694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ca92:	2b00      	cmp	r3, #0
 801ca94:	d102      	bne.n	801ca9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801ca96:	2301      	movs	r3, #1
 801ca98:	60fb      	str	r3, [r7, #12]
 801ca9a:	e001      	b.n	801caa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801ca9c:	2300      	movs	r3, #0
 801ca9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801caa0:	f001 fe28 	bl	801e6f4 <vPortExitCritical>

	return xReturn;
 801caa4:	68fb      	ldr	r3, [r7, #12]
}
 801caa6:	4618      	mov	r0, r3
 801caa8:	3710      	adds	r7, #16
 801caaa:	46bd      	mov	sp, r7
 801caac:	bd80      	pop	{r7, pc}

0801caae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801caae:	b580      	push	{r7, lr}
 801cab0:	b084      	sub	sp, #16
 801cab2:	af00      	add	r7, sp, #0
 801cab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801cab6:	f001 fded 	bl	801e694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cac2:	429a      	cmp	r2, r3
 801cac4:	d102      	bne.n	801cacc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801cac6:	2301      	movs	r3, #1
 801cac8:	60fb      	str	r3, [r7, #12]
 801caca:	e001      	b.n	801cad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801cacc:	2300      	movs	r3, #0
 801cace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801cad0:	f001 fe10 	bl	801e6f4 <vPortExitCritical>

	return xReturn;
 801cad4:	68fb      	ldr	r3, [r7, #12]
}
 801cad6:	4618      	mov	r0, r3
 801cad8:	3710      	adds	r7, #16
 801cada:	46bd      	mov	sp, r7
 801cadc:	bd80      	pop	{r7, pc}
	...

0801cae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801cae0:	b480      	push	{r7}
 801cae2:	b085      	sub	sp, #20
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
 801cae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801caea:	2300      	movs	r3, #0
 801caec:	60fb      	str	r3, [r7, #12]
 801caee:	e014      	b.n	801cb1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801caf0:	4a0f      	ldr	r2, [pc, #60]	; (801cb30 <vQueueAddToRegistry+0x50>)
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d10b      	bne.n	801cb14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801cafc:	490c      	ldr	r1, [pc, #48]	; (801cb30 <vQueueAddToRegistry+0x50>)
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	683a      	ldr	r2, [r7, #0]
 801cb02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801cb06:	4a0a      	ldr	r2, [pc, #40]	; (801cb30 <vQueueAddToRegistry+0x50>)
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	00db      	lsls	r3, r3, #3
 801cb0c:	4413      	add	r3, r2
 801cb0e:	687a      	ldr	r2, [r7, #4]
 801cb10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801cb12:	e006      	b.n	801cb22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801cb14:	68fb      	ldr	r3, [r7, #12]
 801cb16:	3301      	adds	r3, #1
 801cb18:	60fb      	str	r3, [r7, #12]
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	2b07      	cmp	r3, #7
 801cb1e:	d9e7      	bls.n	801caf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801cb20:	bf00      	nop
 801cb22:	bf00      	nop
 801cb24:	3714      	adds	r7, #20
 801cb26:	46bd      	mov	sp, r7
 801cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2c:	4770      	bx	lr
 801cb2e:	bf00      	nop
 801cb30:	2000ac38 	.word	0x2000ac38

0801cb34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801cb34:	b480      	push	{r7}
 801cb36:	b085      	sub	sp, #20
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801cb3c:	2300      	movs	r3, #0
 801cb3e:	60fb      	str	r3, [r7, #12]
 801cb40:	e016      	b.n	801cb70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801cb42:	4a10      	ldr	r2, [pc, #64]	; (801cb84 <vQueueUnregisterQueue+0x50>)
 801cb44:	68fb      	ldr	r3, [r7, #12]
 801cb46:	00db      	lsls	r3, r3, #3
 801cb48:	4413      	add	r3, r2
 801cb4a:	685b      	ldr	r3, [r3, #4]
 801cb4c:	687a      	ldr	r2, [r7, #4]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	d10b      	bne.n	801cb6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801cb52:	4a0c      	ldr	r2, [pc, #48]	; (801cb84 <vQueueUnregisterQueue+0x50>)
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	2100      	movs	r1, #0
 801cb58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801cb5c:	4a09      	ldr	r2, [pc, #36]	; (801cb84 <vQueueUnregisterQueue+0x50>)
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	00db      	lsls	r3, r3, #3
 801cb62:	4413      	add	r3, r2
 801cb64:	2200      	movs	r2, #0
 801cb66:	605a      	str	r2, [r3, #4]
				break;
 801cb68:	e006      	b.n	801cb78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801cb6a:	68fb      	ldr	r3, [r7, #12]
 801cb6c:	3301      	adds	r3, #1
 801cb6e:	60fb      	str	r3, [r7, #12]
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	2b07      	cmp	r3, #7
 801cb74:	d9e5      	bls.n	801cb42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801cb76:	bf00      	nop
 801cb78:	bf00      	nop
 801cb7a:	3714      	adds	r7, #20
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb82:	4770      	bx	lr
 801cb84:	2000ac38 	.word	0x2000ac38

0801cb88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b086      	sub	sp, #24
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	60f8      	str	r0, [r7, #12]
 801cb90:	60b9      	str	r1, [r7, #8]
 801cb92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801cb98:	f001 fd7c 	bl	801e694 <vPortEnterCritical>
 801cb9c:	697b      	ldr	r3, [r7, #20]
 801cb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801cba2:	b25b      	sxtb	r3, r3
 801cba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cba8:	d103      	bne.n	801cbb2 <vQueueWaitForMessageRestricted+0x2a>
 801cbaa:	697b      	ldr	r3, [r7, #20]
 801cbac:	2200      	movs	r2, #0
 801cbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cbb2:	697b      	ldr	r3, [r7, #20]
 801cbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801cbb8:	b25b      	sxtb	r3, r3
 801cbba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cbbe:	d103      	bne.n	801cbc8 <vQueueWaitForMessageRestricted+0x40>
 801cbc0:	697b      	ldr	r3, [r7, #20]
 801cbc2:	2200      	movs	r2, #0
 801cbc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cbc8:	f001 fd94 	bl	801e6f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d106      	bne.n	801cbe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801cbd4:	697b      	ldr	r3, [r7, #20]
 801cbd6:	3324      	adds	r3, #36	; 0x24
 801cbd8:	687a      	ldr	r2, [r7, #4]
 801cbda:	68b9      	ldr	r1, [r7, #8]
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f000 fd13 	bl	801d608 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801cbe2:	6978      	ldr	r0, [r7, #20]
 801cbe4:	f7ff fefb 	bl	801c9de <prvUnlockQueue>
	}
 801cbe8:	bf00      	nop
 801cbea:	3718      	adds	r7, #24
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd80      	pop	{r7, pc}

0801cbf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b08e      	sub	sp, #56	; 0x38
 801cbf4:	af04      	add	r7, sp, #16
 801cbf6:	60f8      	str	r0, [r7, #12]
 801cbf8:	60b9      	str	r1, [r7, #8]
 801cbfa:	607a      	str	r2, [r7, #4]
 801cbfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801cbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d10a      	bne.n	801cc1a <xTaskCreateStatic+0x2a>
	__asm volatile
 801cc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc08:	f383 8811 	msr	BASEPRI, r3
 801cc0c:	f3bf 8f6f 	isb	sy
 801cc10:	f3bf 8f4f 	dsb	sy
 801cc14:	623b      	str	r3, [r7, #32]
}
 801cc16:	bf00      	nop
 801cc18:	e7fe      	b.n	801cc18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d10a      	bne.n	801cc36 <xTaskCreateStatic+0x46>
	__asm volatile
 801cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc24:	f383 8811 	msr	BASEPRI, r3
 801cc28:	f3bf 8f6f 	isb	sy
 801cc2c:	f3bf 8f4f 	dsb	sy
 801cc30:	61fb      	str	r3, [r7, #28]
}
 801cc32:	bf00      	nop
 801cc34:	e7fe      	b.n	801cc34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801cc36:	235c      	movs	r3, #92	; 0x5c
 801cc38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801cc3a:	693b      	ldr	r3, [r7, #16]
 801cc3c:	2b5c      	cmp	r3, #92	; 0x5c
 801cc3e:	d00a      	beq.n	801cc56 <xTaskCreateStatic+0x66>
	__asm volatile
 801cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cc44:	f383 8811 	msr	BASEPRI, r3
 801cc48:	f3bf 8f6f 	isb	sy
 801cc4c:	f3bf 8f4f 	dsb	sy
 801cc50:	61bb      	str	r3, [r7, #24]
}
 801cc52:	bf00      	nop
 801cc54:	e7fe      	b.n	801cc54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801cc56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801cc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d01e      	beq.n	801cc9c <xTaskCreateStatic+0xac>
 801cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cc60:	2b00      	cmp	r3, #0
 801cc62:	d01b      	beq.n	801cc9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801cc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cc66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cc6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801cc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc70:	2202      	movs	r2, #2
 801cc72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801cc76:	2300      	movs	r3, #0
 801cc78:	9303      	str	r3, [sp, #12]
 801cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cc7c:	9302      	str	r3, [sp, #8]
 801cc7e:	f107 0314 	add.w	r3, r7, #20
 801cc82:	9301      	str	r3, [sp, #4]
 801cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cc86:	9300      	str	r3, [sp, #0]
 801cc88:	683b      	ldr	r3, [r7, #0]
 801cc8a:	687a      	ldr	r2, [r7, #4]
 801cc8c:	68b9      	ldr	r1, [r7, #8]
 801cc8e:	68f8      	ldr	r0, [r7, #12]
 801cc90:	f000 f850 	bl	801cd34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801cc94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cc96:	f000 f8dd 	bl	801ce54 <prvAddNewTaskToReadyList>
 801cc9a:	e001      	b.n	801cca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801cca0:	697b      	ldr	r3, [r7, #20]
	}
 801cca2:	4618      	mov	r0, r3
 801cca4:	3728      	adds	r7, #40	; 0x28
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}

0801ccaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801ccaa:	b580      	push	{r7, lr}
 801ccac:	b08c      	sub	sp, #48	; 0x30
 801ccae:	af04      	add	r7, sp, #16
 801ccb0:	60f8      	str	r0, [r7, #12]
 801ccb2:	60b9      	str	r1, [r7, #8]
 801ccb4:	603b      	str	r3, [r7, #0]
 801ccb6:	4613      	mov	r3, r2
 801ccb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801ccba:	88fb      	ldrh	r3, [r7, #6]
 801ccbc:	009b      	lsls	r3, r3, #2
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f001 fe0a 	bl	801e8d8 <pvPortMalloc>
 801ccc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801ccc6:	697b      	ldr	r3, [r7, #20]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d00e      	beq.n	801ccea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801cccc:	205c      	movs	r0, #92	; 0x5c
 801ccce:	f001 fe03 	bl	801e8d8 <pvPortMalloc>
 801ccd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801ccd4:	69fb      	ldr	r3, [r7, #28]
 801ccd6:	2b00      	cmp	r3, #0
 801ccd8:	d003      	beq.n	801cce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801ccda:	69fb      	ldr	r3, [r7, #28]
 801ccdc:	697a      	ldr	r2, [r7, #20]
 801ccde:	631a      	str	r2, [r3, #48]	; 0x30
 801cce0:	e005      	b.n	801ccee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801cce2:	6978      	ldr	r0, [r7, #20]
 801cce4:	f001 fec4 	bl	801ea70 <vPortFree>
 801cce8:	e001      	b.n	801ccee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801ccea:	2300      	movs	r3, #0
 801ccec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801ccee:	69fb      	ldr	r3, [r7, #28]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d017      	beq.n	801cd24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801ccf4:	69fb      	ldr	r3, [r7, #28]
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801ccfc:	88fa      	ldrh	r2, [r7, #6]
 801ccfe:	2300      	movs	r3, #0
 801cd00:	9303      	str	r3, [sp, #12]
 801cd02:	69fb      	ldr	r3, [r7, #28]
 801cd04:	9302      	str	r3, [sp, #8]
 801cd06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd08:	9301      	str	r3, [sp, #4]
 801cd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd0c:	9300      	str	r3, [sp, #0]
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	68b9      	ldr	r1, [r7, #8]
 801cd12:	68f8      	ldr	r0, [r7, #12]
 801cd14:	f000 f80e 	bl	801cd34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801cd18:	69f8      	ldr	r0, [r7, #28]
 801cd1a:	f000 f89b 	bl	801ce54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801cd1e:	2301      	movs	r3, #1
 801cd20:	61bb      	str	r3, [r7, #24]
 801cd22:	e002      	b.n	801cd2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801cd24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801cd2a:	69bb      	ldr	r3, [r7, #24]
	}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	3720      	adds	r7, #32
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}

0801cd34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	b088      	sub	sp, #32
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	60f8      	str	r0, [r7, #12]
 801cd3c:	60b9      	str	r1, [r7, #8]
 801cd3e:	607a      	str	r2, [r7, #4]
 801cd40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	009b      	lsls	r3, r3, #2
 801cd4a:	461a      	mov	r2, r3
 801cd4c:	21a5      	movs	r1, #165	; 0xa5
 801cd4e:	f001 fff5 	bl	801ed3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801cd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801cd5c:	3b01      	subs	r3, #1
 801cd5e:	009b      	lsls	r3, r3, #2
 801cd60:	4413      	add	r3, r2
 801cd62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801cd64:	69bb      	ldr	r3, [r7, #24]
 801cd66:	f023 0307 	bic.w	r3, r3, #7
 801cd6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801cd6c:	69bb      	ldr	r3, [r7, #24]
 801cd6e:	f003 0307 	and.w	r3, r3, #7
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d00a      	beq.n	801cd8c <prvInitialiseNewTask+0x58>
	__asm volatile
 801cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cd7a:	f383 8811 	msr	BASEPRI, r3
 801cd7e:	f3bf 8f6f 	isb	sy
 801cd82:	f3bf 8f4f 	dsb	sy
 801cd86:	617b      	str	r3, [r7, #20]
}
 801cd88:	bf00      	nop
 801cd8a:	e7fe      	b.n	801cd8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801cd8c:	68bb      	ldr	r3, [r7, #8]
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d01f      	beq.n	801cdd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801cd92:	2300      	movs	r3, #0
 801cd94:	61fb      	str	r3, [r7, #28]
 801cd96:	e012      	b.n	801cdbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801cd98:	68ba      	ldr	r2, [r7, #8]
 801cd9a:	69fb      	ldr	r3, [r7, #28]
 801cd9c:	4413      	add	r3, r2
 801cd9e:	7819      	ldrb	r1, [r3, #0]
 801cda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801cda2:	69fb      	ldr	r3, [r7, #28]
 801cda4:	4413      	add	r3, r2
 801cda6:	3334      	adds	r3, #52	; 0x34
 801cda8:	460a      	mov	r2, r1
 801cdaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801cdac:	68ba      	ldr	r2, [r7, #8]
 801cdae:	69fb      	ldr	r3, [r7, #28]
 801cdb0:	4413      	add	r3, r2
 801cdb2:	781b      	ldrb	r3, [r3, #0]
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d006      	beq.n	801cdc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801cdb8:	69fb      	ldr	r3, [r7, #28]
 801cdba:	3301      	adds	r3, #1
 801cdbc:	61fb      	str	r3, [r7, #28]
 801cdbe:	69fb      	ldr	r3, [r7, #28]
 801cdc0:	2b0f      	cmp	r3, #15
 801cdc2:	d9e9      	bls.n	801cd98 <prvInitialiseNewTask+0x64>
 801cdc4:	e000      	b.n	801cdc8 <prvInitialiseNewTask+0x94>
			{
				break;
 801cdc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801cdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdca:	2200      	movs	r2, #0
 801cdcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801cdd0:	e003      	b.n	801cdda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801cdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cddc:	2b37      	cmp	r3, #55	; 0x37
 801cdde:	d901      	bls.n	801cde4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801cde0:	2337      	movs	r3, #55	; 0x37
 801cde2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801cde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cde6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cde8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cdee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdf8:	3304      	adds	r3, #4
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	f7fe fe56 	bl	801baac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce02:	3318      	adds	r3, #24
 801ce04:	4618      	mov	r0, r3
 801ce06:	f7fe fe51 	bl	801baac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ce10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801ce20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce22:	2200      	movs	r2, #0
 801ce24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce28:	2200      	movs	r2, #0
 801ce2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801ce2e:	683a      	ldr	r2, [r7, #0]
 801ce30:	68f9      	ldr	r1, [r7, #12]
 801ce32:	69b8      	ldr	r0, [r7, #24]
 801ce34:	f001 fafe 	bl	801e434 <pxPortInitialiseStack>
 801ce38:	4602      	mov	r2, r0
 801ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d002      	beq.n	801ce4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ce46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ce48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ce4a:	bf00      	nop
 801ce4c:	3720      	adds	r7, #32
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	bd80      	pop	{r7, pc}
	...

0801ce54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801ce5c:	f001 fc1a 	bl	801e694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801ce60:	4b2d      	ldr	r3, [pc, #180]	; (801cf18 <prvAddNewTaskToReadyList+0xc4>)
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	3301      	adds	r3, #1
 801ce66:	4a2c      	ldr	r2, [pc, #176]	; (801cf18 <prvAddNewTaskToReadyList+0xc4>)
 801ce68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801ce6a:	4b2c      	ldr	r3, [pc, #176]	; (801cf1c <prvAddNewTaskToReadyList+0xc8>)
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d109      	bne.n	801ce86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801ce72:	4a2a      	ldr	r2, [pc, #168]	; (801cf1c <prvAddNewTaskToReadyList+0xc8>)
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801ce78:	4b27      	ldr	r3, [pc, #156]	; (801cf18 <prvAddNewTaskToReadyList+0xc4>)
 801ce7a:	681b      	ldr	r3, [r3, #0]
 801ce7c:	2b01      	cmp	r3, #1
 801ce7e:	d110      	bne.n	801cea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801ce80:	f000 fcee 	bl	801d860 <prvInitialiseTaskLists>
 801ce84:	e00d      	b.n	801cea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801ce86:	4b26      	ldr	r3, [pc, #152]	; (801cf20 <prvAddNewTaskToReadyList+0xcc>)
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d109      	bne.n	801cea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801ce8e:	4b23      	ldr	r3, [pc, #140]	; (801cf1c <prvAddNewTaskToReadyList+0xc8>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce98:	429a      	cmp	r2, r3
 801ce9a:	d802      	bhi.n	801cea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801ce9c:	4a1f      	ldr	r2, [pc, #124]	; (801cf1c <prvAddNewTaskToReadyList+0xc8>)
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801cea2:	4b20      	ldr	r3, [pc, #128]	; (801cf24 <prvAddNewTaskToReadyList+0xd0>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	3301      	adds	r3, #1
 801cea8:	4a1e      	ldr	r2, [pc, #120]	; (801cf24 <prvAddNewTaskToReadyList+0xd0>)
 801ceaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801ceac:	4b1d      	ldr	r3, [pc, #116]	; (801cf24 <prvAddNewTaskToReadyList+0xd0>)
 801ceae:	681a      	ldr	r2, [r3, #0]
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ceb8:	4b1b      	ldr	r3, [pc, #108]	; (801cf28 <prvAddNewTaskToReadyList+0xd4>)
 801ceba:	681b      	ldr	r3, [r3, #0]
 801cebc:	429a      	cmp	r2, r3
 801cebe:	d903      	bls.n	801cec8 <prvAddNewTaskToReadyList+0x74>
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cec4:	4a18      	ldr	r2, [pc, #96]	; (801cf28 <prvAddNewTaskToReadyList+0xd4>)
 801cec6:	6013      	str	r3, [r2, #0]
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cecc:	4613      	mov	r3, r2
 801cece:	009b      	lsls	r3, r3, #2
 801ced0:	4413      	add	r3, r2
 801ced2:	009b      	lsls	r3, r3, #2
 801ced4:	4a15      	ldr	r2, [pc, #84]	; (801cf2c <prvAddNewTaskToReadyList+0xd8>)
 801ced6:	441a      	add	r2, r3
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	3304      	adds	r3, #4
 801cedc:	4619      	mov	r1, r3
 801cede:	4610      	mov	r0, r2
 801cee0:	f7fe fdf1 	bl	801bac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801cee4:	f001 fc06 	bl	801e6f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801cee8:	4b0d      	ldr	r3, [pc, #52]	; (801cf20 <prvAddNewTaskToReadyList+0xcc>)
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d00e      	beq.n	801cf0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801cef0:	4b0a      	ldr	r3, [pc, #40]	; (801cf1c <prvAddNewTaskToReadyList+0xc8>)
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cefa:	429a      	cmp	r2, r3
 801cefc:	d207      	bcs.n	801cf0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801cefe:	4b0c      	ldr	r3, [pc, #48]	; (801cf30 <prvAddNewTaskToReadyList+0xdc>)
 801cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cf04:	601a      	str	r2, [r3, #0]
 801cf06:	f3bf 8f4f 	dsb	sy
 801cf0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801cf0e:	bf00      	nop
 801cf10:	3708      	adds	r7, #8
 801cf12:	46bd      	mov	sp, r7
 801cf14:	bd80      	pop	{r7, pc}
 801cf16:	bf00      	nop
 801cf18:	20002830 	.word	0x20002830
 801cf1c:	2000235c 	.word	0x2000235c
 801cf20:	2000283c 	.word	0x2000283c
 801cf24:	2000284c 	.word	0x2000284c
 801cf28:	20002838 	.word	0x20002838
 801cf2c:	20002360 	.word	0x20002360
 801cf30:	e000ed04 	.word	0xe000ed04

0801cf34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b084      	sub	sp, #16
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801cf3c:	f001 fbaa 	bl	801e694 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d102      	bne.n	801cf4c <vTaskDelete+0x18>
 801cf46:	4b2c      	ldr	r3, [pc, #176]	; (801cff8 <vTaskDelete+0xc4>)
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	e000      	b.n	801cf4e <vTaskDelete+0x1a>
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	3304      	adds	r3, #4
 801cf54:	4618      	mov	r0, r3
 801cf56:	f7fe fe13 	bl	801bb80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d004      	beq.n	801cf6c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	3318      	adds	r3, #24
 801cf66:	4618      	mov	r0, r3
 801cf68:	f7fe fe0a 	bl	801bb80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801cf6c:	4b23      	ldr	r3, [pc, #140]	; (801cffc <vTaskDelete+0xc8>)
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	3301      	adds	r3, #1
 801cf72:	4a22      	ldr	r2, [pc, #136]	; (801cffc <vTaskDelete+0xc8>)
 801cf74:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801cf76:	4b20      	ldr	r3, [pc, #128]	; (801cff8 <vTaskDelete+0xc4>)
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	68fa      	ldr	r2, [r7, #12]
 801cf7c:	429a      	cmp	r2, r3
 801cf7e:	d10b      	bne.n	801cf98 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801cf80:	68fb      	ldr	r3, [r7, #12]
 801cf82:	3304      	adds	r3, #4
 801cf84:	4619      	mov	r1, r3
 801cf86:	481e      	ldr	r0, [pc, #120]	; (801d000 <vTaskDelete+0xcc>)
 801cf88:	f7fe fd9d 	bl	801bac6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801cf8c:	4b1d      	ldr	r3, [pc, #116]	; (801d004 <vTaskDelete+0xd0>)
 801cf8e:	681b      	ldr	r3, [r3, #0]
 801cf90:	3301      	adds	r3, #1
 801cf92:	4a1c      	ldr	r2, [pc, #112]	; (801d004 <vTaskDelete+0xd0>)
 801cf94:	6013      	str	r3, [r2, #0]
 801cf96:	e009      	b.n	801cfac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801cf98:	4b1b      	ldr	r3, [pc, #108]	; (801d008 <vTaskDelete+0xd4>)
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	3b01      	subs	r3, #1
 801cf9e:	4a1a      	ldr	r2, [pc, #104]	; (801d008 <vTaskDelete+0xd4>)
 801cfa0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801cfa2:	68f8      	ldr	r0, [r7, #12]
 801cfa4:	f000 fcca 	bl	801d93c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801cfa8:	f000 fcf8 	bl	801d99c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801cfac:	f001 fba2 	bl	801e6f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801cfb0:	4b16      	ldr	r3, [pc, #88]	; (801d00c <vTaskDelete+0xd8>)
 801cfb2:	681b      	ldr	r3, [r3, #0]
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d01b      	beq.n	801cff0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801cfb8:	4b0f      	ldr	r3, [pc, #60]	; (801cff8 <vTaskDelete+0xc4>)
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	68fa      	ldr	r2, [r7, #12]
 801cfbe:	429a      	cmp	r2, r3
 801cfc0:	d116      	bne.n	801cff0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801cfc2:	4b13      	ldr	r3, [pc, #76]	; (801d010 <vTaskDelete+0xdc>)
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d00a      	beq.n	801cfe0 <vTaskDelete+0xac>
	__asm volatile
 801cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801cfce:	f383 8811 	msr	BASEPRI, r3
 801cfd2:	f3bf 8f6f 	isb	sy
 801cfd6:	f3bf 8f4f 	dsb	sy
 801cfda:	60bb      	str	r3, [r7, #8]
}
 801cfdc:	bf00      	nop
 801cfde:	e7fe      	b.n	801cfde <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801cfe0:	4b0c      	ldr	r3, [pc, #48]	; (801d014 <vTaskDelete+0xe0>)
 801cfe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cfe6:	601a      	str	r2, [r3, #0]
 801cfe8:	f3bf 8f4f 	dsb	sy
 801cfec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801cff0:	bf00      	nop
 801cff2:	3710      	adds	r7, #16
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}
 801cff8:	2000235c 	.word	0x2000235c
 801cffc:	2000284c 	.word	0x2000284c
 801d000:	20002804 	.word	0x20002804
 801d004:	20002818 	.word	0x20002818
 801d008:	20002830 	.word	0x20002830
 801d00c:	2000283c 	.word	0x2000283c
 801d010:	20002858 	.word	0x20002858
 801d014:	e000ed04 	.word	0xe000ed04

0801d018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b084      	sub	sp, #16
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801d020:	2300      	movs	r3, #0
 801d022:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d017      	beq.n	801d05a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801d02a:	4b13      	ldr	r3, [pc, #76]	; (801d078 <vTaskDelay+0x60>)
 801d02c:	681b      	ldr	r3, [r3, #0]
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d00a      	beq.n	801d048 <vTaskDelay+0x30>
	__asm volatile
 801d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d036:	f383 8811 	msr	BASEPRI, r3
 801d03a:	f3bf 8f6f 	isb	sy
 801d03e:	f3bf 8f4f 	dsb	sy
 801d042:	60bb      	str	r3, [r7, #8]
}
 801d044:	bf00      	nop
 801d046:	e7fe      	b.n	801d046 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801d048:	f000 f8e6 	bl	801d218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801d04c:	2100      	movs	r1, #0
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f000 fe4e 	bl	801dcf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801d054:	f000 f8ee 	bl	801d234 <xTaskResumeAll>
 801d058:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d107      	bne.n	801d070 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801d060:	4b06      	ldr	r3, [pc, #24]	; (801d07c <vTaskDelay+0x64>)
 801d062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d066:	601a      	str	r2, [r3, #0]
 801d068:	f3bf 8f4f 	dsb	sy
 801d06c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801d070:	bf00      	nop
 801d072:	3710      	adds	r7, #16
 801d074:	46bd      	mov	sp, r7
 801d076:	bd80      	pop	{r7, pc}
 801d078:	20002858 	.word	0x20002858
 801d07c:	e000ed04 	.word	0xe000ed04

0801d080 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801d080:	b580      	push	{r7, lr}
 801d082:	b088      	sub	sp, #32
 801d084:	af00      	add	r7, sp, #0
 801d086:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801d08c:	69bb      	ldr	r3, [r7, #24]
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d10a      	bne.n	801d0a8 <eTaskGetState+0x28>
	__asm volatile
 801d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d096:	f383 8811 	msr	BASEPRI, r3
 801d09a:	f3bf 8f6f 	isb	sy
 801d09e:	f3bf 8f4f 	dsb	sy
 801d0a2:	60bb      	str	r3, [r7, #8]
}
 801d0a4:	bf00      	nop
 801d0a6:	e7fe      	b.n	801d0a6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801d0a8:	4b23      	ldr	r3, [pc, #140]	; (801d138 <eTaskGetState+0xb8>)
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	69ba      	ldr	r2, [r7, #24]
 801d0ae:	429a      	cmp	r2, r3
 801d0b0:	d102      	bne.n	801d0b8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	77fb      	strb	r3, [r7, #31]
 801d0b6:	e03a      	b.n	801d12e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801d0b8:	f001 faec 	bl	801e694 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801d0bc:	69bb      	ldr	r3, [r7, #24]
 801d0be:	695b      	ldr	r3, [r3, #20]
 801d0c0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801d0c2:	4b1e      	ldr	r3, [pc, #120]	; (801d13c <eTaskGetState+0xbc>)
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801d0c8:	4b1d      	ldr	r3, [pc, #116]	; (801d140 <eTaskGetState+0xc0>)
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801d0ce:	f001 fb11 	bl	801e6f4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801d0d2:	697a      	ldr	r2, [r7, #20]
 801d0d4:	693b      	ldr	r3, [r7, #16]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	d003      	beq.n	801d0e2 <eTaskGetState+0x62>
 801d0da:	697a      	ldr	r2, [r7, #20]
 801d0dc:	68fb      	ldr	r3, [r7, #12]
 801d0de:	429a      	cmp	r2, r3
 801d0e0:	d102      	bne.n	801d0e8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801d0e2:	2302      	movs	r3, #2
 801d0e4:	77fb      	strb	r3, [r7, #31]
 801d0e6:	e022      	b.n	801d12e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801d0e8:	697b      	ldr	r3, [r7, #20]
 801d0ea:	4a16      	ldr	r2, [pc, #88]	; (801d144 <eTaskGetState+0xc4>)
 801d0ec:	4293      	cmp	r3, r2
 801d0ee:	d112      	bne.n	801d116 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801d0f0:	69bb      	ldr	r3, [r7, #24]
 801d0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d10b      	bne.n	801d110 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801d0f8:	69bb      	ldr	r3, [r7, #24]
 801d0fa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801d0fe:	b2db      	uxtb	r3, r3
 801d100:	2b01      	cmp	r3, #1
 801d102:	d102      	bne.n	801d10a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801d104:	2302      	movs	r3, #2
 801d106:	77fb      	strb	r3, [r7, #31]
 801d108:	e011      	b.n	801d12e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801d10a:	2303      	movs	r3, #3
 801d10c:	77fb      	strb	r3, [r7, #31]
 801d10e:	e00e      	b.n	801d12e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801d110:	2302      	movs	r3, #2
 801d112:	77fb      	strb	r3, [r7, #31]
 801d114:	e00b      	b.n	801d12e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801d116:	697b      	ldr	r3, [r7, #20]
 801d118:	4a0b      	ldr	r2, [pc, #44]	; (801d148 <eTaskGetState+0xc8>)
 801d11a:	4293      	cmp	r3, r2
 801d11c:	d002      	beq.n	801d124 <eTaskGetState+0xa4>
 801d11e:	697b      	ldr	r3, [r7, #20]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d102      	bne.n	801d12a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801d124:	2304      	movs	r3, #4
 801d126:	77fb      	strb	r3, [r7, #31]
 801d128:	e001      	b.n	801d12e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801d12a:	2301      	movs	r3, #1
 801d12c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801d12e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801d130:	4618      	mov	r0, r3
 801d132:	3720      	adds	r7, #32
 801d134:	46bd      	mov	sp, r7
 801d136:	bd80      	pop	{r7, pc}
 801d138:	2000235c 	.word	0x2000235c
 801d13c:	200027e8 	.word	0x200027e8
 801d140:	200027ec 	.word	0x200027ec
 801d144:	2000281c 	.word	0x2000281c
 801d148:	20002804 	.word	0x20002804

0801d14c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b08a      	sub	sp, #40	; 0x28
 801d150:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801d152:	2300      	movs	r3, #0
 801d154:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801d156:	2300      	movs	r3, #0
 801d158:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801d15a:	463a      	mov	r2, r7
 801d15c:	1d39      	adds	r1, r7, #4
 801d15e:	f107 0308 	add.w	r3, r7, #8
 801d162:	4618      	mov	r0, r3
 801d164:	f7fe fc4e 	bl	801ba04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801d168:	6839      	ldr	r1, [r7, #0]
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	68ba      	ldr	r2, [r7, #8]
 801d16e:	9202      	str	r2, [sp, #8]
 801d170:	9301      	str	r3, [sp, #4]
 801d172:	2300      	movs	r3, #0
 801d174:	9300      	str	r3, [sp, #0]
 801d176:	2300      	movs	r3, #0
 801d178:	460a      	mov	r2, r1
 801d17a:	4921      	ldr	r1, [pc, #132]	; (801d200 <vTaskStartScheduler+0xb4>)
 801d17c:	4821      	ldr	r0, [pc, #132]	; (801d204 <vTaskStartScheduler+0xb8>)
 801d17e:	f7ff fd37 	bl	801cbf0 <xTaskCreateStatic>
 801d182:	4603      	mov	r3, r0
 801d184:	4a20      	ldr	r2, [pc, #128]	; (801d208 <vTaskStartScheduler+0xbc>)
 801d186:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801d188:	4b1f      	ldr	r3, [pc, #124]	; (801d208 <vTaskStartScheduler+0xbc>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d002      	beq.n	801d196 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801d190:	2301      	movs	r3, #1
 801d192:	617b      	str	r3, [r7, #20]
 801d194:	e001      	b.n	801d19a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801d196:	2300      	movs	r3, #0
 801d198:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801d19a:	697b      	ldr	r3, [r7, #20]
 801d19c:	2b01      	cmp	r3, #1
 801d19e:	d102      	bne.n	801d1a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801d1a0:	f000 fdfa 	bl	801dd98 <xTimerCreateTimerTask>
 801d1a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801d1a6:	697b      	ldr	r3, [r7, #20]
 801d1a8:	2b01      	cmp	r3, #1
 801d1aa:	d116      	bne.n	801d1da <vTaskStartScheduler+0x8e>
	__asm volatile
 801d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d1b0:	f383 8811 	msr	BASEPRI, r3
 801d1b4:	f3bf 8f6f 	isb	sy
 801d1b8:	f3bf 8f4f 	dsb	sy
 801d1bc:	613b      	str	r3, [r7, #16]
}
 801d1be:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801d1c0:	4b12      	ldr	r3, [pc, #72]	; (801d20c <vTaskStartScheduler+0xc0>)
 801d1c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d1c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801d1c8:	4b11      	ldr	r3, [pc, #68]	; (801d210 <vTaskStartScheduler+0xc4>)
 801d1ca:	2201      	movs	r2, #1
 801d1cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801d1ce:	4b11      	ldr	r3, [pc, #68]	; (801d214 <vTaskStartScheduler+0xc8>)
 801d1d0:	2200      	movs	r2, #0
 801d1d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801d1d4:	f001 f9bc 	bl	801e550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801d1d8:	e00e      	b.n	801d1f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801d1da:	697b      	ldr	r3, [r7, #20]
 801d1dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d1e0:	d10a      	bne.n	801d1f8 <vTaskStartScheduler+0xac>
	__asm volatile
 801d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d1e6:	f383 8811 	msr	BASEPRI, r3
 801d1ea:	f3bf 8f6f 	isb	sy
 801d1ee:	f3bf 8f4f 	dsb	sy
 801d1f2:	60fb      	str	r3, [r7, #12]
}
 801d1f4:	bf00      	nop
 801d1f6:	e7fe      	b.n	801d1f6 <vTaskStartScheduler+0xaa>
}
 801d1f8:	bf00      	nop
 801d1fa:	3718      	adds	r7, #24
 801d1fc:	46bd      	mov	sp, r7
 801d1fe:	bd80      	pop	{r7, pc}
 801d200:	08024ba4 	.word	0x08024ba4
 801d204:	0801d831 	.word	0x0801d831
 801d208:	20002854 	.word	0x20002854
 801d20c:	20002850 	.word	0x20002850
 801d210:	2000283c 	.word	0x2000283c
 801d214:	20002834 	.word	0x20002834

0801d218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801d218:	b480      	push	{r7}
 801d21a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801d21c:	4b04      	ldr	r3, [pc, #16]	; (801d230 <vTaskSuspendAll+0x18>)
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	3301      	adds	r3, #1
 801d222:	4a03      	ldr	r2, [pc, #12]	; (801d230 <vTaskSuspendAll+0x18>)
 801d224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801d226:	bf00      	nop
 801d228:	46bd      	mov	sp, r7
 801d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d22e:	4770      	bx	lr
 801d230:	20002858 	.word	0x20002858

0801d234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801d234:	b580      	push	{r7, lr}
 801d236:	b084      	sub	sp, #16
 801d238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801d23a:	2300      	movs	r3, #0
 801d23c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801d23e:	2300      	movs	r3, #0
 801d240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801d242:	4b42      	ldr	r3, [pc, #264]	; (801d34c <xTaskResumeAll+0x118>)
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d10a      	bne.n	801d260 <xTaskResumeAll+0x2c>
	__asm volatile
 801d24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d24e:	f383 8811 	msr	BASEPRI, r3
 801d252:	f3bf 8f6f 	isb	sy
 801d256:	f3bf 8f4f 	dsb	sy
 801d25a:	603b      	str	r3, [r7, #0]
}
 801d25c:	bf00      	nop
 801d25e:	e7fe      	b.n	801d25e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801d260:	f001 fa18 	bl	801e694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801d264:	4b39      	ldr	r3, [pc, #228]	; (801d34c <xTaskResumeAll+0x118>)
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	3b01      	subs	r3, #1
 801d26a:	4a38      	ldr	r2, [pc, #224]	; (801d34c <xTaskResumeAll+0x118>)
 801d26c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d26e:	4b37      	ldr	r3, [pc, #220]	; (801d34c <xTaskResumeAll+0x118>)
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d162      	bne.n	801d33c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801d276:	4b36      	ldr	r3, [pc, #216]	; (801d350 <xTaskResumeAll+0x11c>)
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d05e      	beq.n	801d33c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d27e:	e02f      	b.n	801d2e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d280:	4b34      	ldr	r3, [pc, #208]	; (801d354 <xTaskResumeAll+0x120>)
 801d282:	68db      	ldr	r3, [r3, #12]
 801d284:	68db      	ldr	r3, [r3, #12]
 801d286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d288:	68fb      	ldr	r3, [r7, #12]
 801d28a:	3318      	adds	r3, #24
 801d28c:	4618      	mov	r0, r3
 801d28e:	f7fe fc77 	bl	801bb80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d292:	68fb      	ldr	r3, [r7, #12]
 801d294:	3304      	adds	r3, #4
 801d296:	4618      	mov	r0, r3
 801d298:	f7fe fc72 	bl	801bb80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d2a0:	4b2d      	ldr	r3, [pc, #180]	; (801d358 <xTaskResumeAll+0x124>)
 801d2a2:	681b      	ldr	r3, [r3, #0]
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	d903      	bls.n	801d2b0 <xTaskResumeAll+0x7c>
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2ac:	4a2a      	ldr	r2, [pc, #168]	; (801d358 <xTaskResumeAll+0x124>)
 801d2ae:	6013      	str	r3, [r2, #0]
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d2b4:	4613      	mov	r3, r2
 801d2b6:	009b      	lsls	r3, r3, #2
 801d2b8:	4413      	add	r3, r2
 801d2ba:	009b      	lsls	r3, r3, #2
 801d2bc:	4a27      	ldr	r2, [pc, #156]	; (801d35c <xTaskResumeAll+0x128>)
 801d2be:	441a      	add	r2, r3
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	3304      	adds	r3, #4
 801d2c4:	4619      	mov	r1, r3
 801d2c6:	4610      	mov	r0, r2
 801d2c8:	f7fe fbfd 	bl	801bac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d2d0:	4b23      	ldr	r3, [pc, #140]	; (801d360 <xTaskResumeAll+0x12c>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d2d6:	429a      	cmp	r2, r3
 801d2d8:	d302      	bcc.n	801d2e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801d2da:	4b22      	ldr	r3, [pc, #136]	; (801d364 <xTaskResumeAll+0x130>)
 801d2dc:	2201      	movs	r2, #1
 801d2de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801d2e0:	4b1c      	ldr	r3, [pc, #112]	; (801d354 <xTaskResumeAll+0x120>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	d1cb      	bne.n	801d280 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d001      	beq.n	801d2f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801d2ee:	f000 fb55 	bl	801d99c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801d2f2:	4b1d      	ldr	r3, [pc, #116]	; (801d368 <xTaskResumeAll+0x134>)
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d010      	beq.n	801d320 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801d2fe:	f000 f847 	bl	801d390 <xTaskIncrementTick>
 801d302:	4603      	mov	r3, r0
 801d304:	2b00      	cmp	r3, #0
 801d306:	d002      	beq.n	801d30e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801d308:	4b16      	ldr	r3, [pc, #88]	; (801d364 <xTaskResumeAll+0x130>)
 801d30a:	2201      	movs	r2, #1
 801d30c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	3b01      	subs	r3, #1
 801d312:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d1f1      	bne.n	801d2fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801d31a:	4b13      	ldr	r3, [pc, #76]	; (801d368 <xTaskResumeAll+0x134>)
 801d31c:	2200      	movs	r2, #0
 801d31e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801d320:	4b10      	ldr	r3, [pc, #64]	; (801d364 <xTaskResumeAll+0x130>)
 801d322:	681b      	ldr	r3, [r3, #0]
 801d324:	2b00      	cmp	r3, #0
 801d326:	d009      	beq.n	801d33c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801d328:	2301      	movs	r3, #1
 801d32a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801d32c:	4b0f      	ldr	r3, [pc, #60]	; (801d36c <xTaskResumeAll+0x138>)
 801d32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d332:	601a      	str	r2, [r3, #0]
 801d334:	f3bf 8f4f 	dsb	sy
 801d338:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801d33c:	f001 f9da 	bl	801e6f4 <vPortExitCritical>

	return xAlreadyYielded;
 801d340:	68bb      	ldr	r3, [r7, #8]
}
 801d342:	4618      	mov	r0, r3
 801d344:	3710      	adds	r7, #16
 801d346:	46bd      	mov	sp, r7
 801d348:	bd80      	pop	{r7, pc}
 801d34a:	bf00      	nop
 801d34c:	20002858 	.word	0x20002858
 801d350:	20002830 	.word	0x20002830
 801d354:	200027f0 	.word	0x200027f0
 801d358:	20002838 	.word	0x20002838
 801d35c:	20002360 	.word	0x20002360
 801d360:	2000235c 	.word	0x2000235c
 801d364:	20002844 	.word	0x20002844
 801d368:	20002840 	.word	0x20002840
 801d36c:	e000ed04 	.word	0xe000ed04

0801d370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801d370:	b480      	push	{r7}
 801d372:	b083      	sub	sp, #12
 801d374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801d376:	4b05      	ldr	r3, [pc, #20]	; (801d38c <xTaskGetTickCount+0x1c>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801d37c:	687b      	ldr	r3, [r7, #4]
}
 801d37e:	4618      	mov	r0, r3
 801d380:	370c      	adds	r7, #12
 801d382:	46bd      	mov	sp, r7
 801d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d388:	4770      	bx	lr
 801d38a:	bf00      	nop
 801d38c:	20002834 	.word	0x20002834

0801d390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801d390:	b580      	push	{r7, lr}
 801d392:	b086      	sub	sp, #24
 801d394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801d396:	2300      	movs	r3, #0
 801d398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d39a:	4b4f      	ldr	r3, [pc, #316]	; (801d4d8 <xTaskIncrementTick+0x148>)
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	f040 808f 	bne.w	801d4c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801d3a4:	4b4d      	ldr	r3, [pc, #308]	; (801d4dc <xTaskIncrementTick+0x14c>)
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	3301      	adds	r3, #1
 801d3aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801d3ac:	4a4b      	ldr	r2, [pc, #300]	; (801d4dc <xTaskIncrementTick+0x14c>)
 801d3ae:	693b      	ldr	r3, [r7, #16]
 801d3b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801d3b2:	693b      	ldr	r3, [r7, #16]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d120      	bne.n	801d3fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801d3b8:	4b49      	ldr	r3, [pc, #292]	; (801d4e0 <xTaskIncrementTick+0x150>)
 801d3ba:	681b      	ldr	r3, [r3, #0]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	d00a      	beq.n	801d3d8 <xTaskIncrementTick+0x48>
	__asm volatile
 801d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d3c6:	f383 8811 	msr	BASEPRI, r3
 801d3ca:	f3bf 8f6f 	isb	sy
 801d3ce:	f3bf 8f4f 	dsb	sy
 801d3d2:	603b      	str	r3, [r7, #0]
}
 801d3d4:	bf00      	nop
 801d3d6:	e7fe      	b.n	801d3d6 <xTaskIncrementTick+0x46>
 801d3d8:	4b41      	ldr	r3, [pc, #260]	; (801d4e0 <xTaskIncrementTick+0x150>)
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	60fb      	str	r3, [r7, #12]
 801d3de:	4b41      	ldr	r3, [pc, #260]	; (801d4e4 <xTaskIncrementTick+0x154>)
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	4a3f      	ldr	r2, [pc, #252]	; (801d4e0 <xTaskIncrementTick+0x150>)
 801d3e4:	6013      	str	r3, [r2, #0]
 801d3e6:	4a3f      	ldr	r2, [pc, #252]	; (801d4e4 <xTaskIncrementTick+0x154>)
 801d3e8:	68fb      	ldr	r3, [r7, #12]
 801d3ea:	6013      	str	r3, [r2, #0]
 801d3ec:	4b3e      	ldr	r3, [pc, #248]	; (801d4e8 <xTaskIncrementTick+0x158>)
 801d3ee:	681b      	ldr	r3, [r3, #0]
 801d3f0:	3301      	adds	r3, #1
 801d3f2:	4a3d      	ldr	r2, [pc, #244]	; (801d4e8 <xTaskIncrementTick+0x158>)
 801d3f4:	6013      	str	r3, [r2, #0]
 801d3f6:	f000 fad1 	bl	801d99c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801d3fa:	4b3c      	ldr	r3, [pc, #240]	; (801d4ec <xTaskIncrementTick+0x15c>)
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	693a      	ldr	r2, [r7, #16]
 801d400:	429a      	cmp	r2, r3
 801d402:	d349      	bcc.n	801d498 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d404:	4b36      	ldr	r3, [pc, #216]	; (801d4e0 <xTaskIncrementTick+0x150>)
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	681b      	ldr	r3, [r3, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d104      	bne.n	801d418 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801d40e:	4b37      	ldr	r3, [pc, #220]	; (801d4ec <xTaskIncrementTick+0x15c>)
 801d410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d414:	601a      	str	r2, [r3, #0]
					break;
 801d416:	e03f      	b.n	801d498 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d418:	4b31      	ldr	r3, [pc, #196]	; (801d4e0 <xTaskIncrementTick+0x150>)
 801d41a:	681b      	ldr	r3, [r3, #0]
 801d41c:	68db      	ldr	r3, [r3, #12]
 801d41e:	68db      	ldr	r3, [r3, #12]
 801d420:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801d422:	68bb      	ldr	r3, [r7, #8]
 801d424:	685b      	ldr	r3, [r3, #4]
 801d426:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801d428:	693a      	ldr	r2, [r7, #16]
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	429a      	cmp	r2, r3
 801d42e:	d203      	bcs.n	801d438 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801d430:	4a2e      	ldr	r2, [pc, #184]	; (801d4ec <xTaskIncrementTick+0x15c>)
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801d436:	e02f      	b.n	801d498 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d438:	68bb      	ldr	r3, [r7, #8]
 801d43a:	3304      	adds	r3, #4
 801d43c:	4618      	mov	r0, r3
 801d43e:	f7fe fb9f 	bl	801bb80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d446:	2b00      	cmp	r3, #0
 801d448:	d004      	beq.n	801d454 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801d44a:	68bb      	ldr	r3, [r7, #8]
 801d44c:	3318      	adds	r3, #24
 801d44e:	4618      	mov	r0, r3
 801d450:	f7fe fb96 	bl	801bb80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801d454:	68bb      	ldr	r3, [r7, #8]
 801d456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d458:	4b25      	ldr	r3, [pc, #148]	; (801d4f0 <xTaskIncrementTick+0x160>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	429a      	cmp	r2, r3
 801d45e:	d903      	bls.n	801d468 <xTaskIncrementTick+0xd8>
 801d460:	68bb      	ldr	r3, [r7, #8]
 801d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d464:	4a22      	ldr	r2, [pc, #136]	; (801d4f0 <xTaskIncrementTick+0x160>)
 801d466:	6013      	str	r3, [r2, #0]
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d46c:	4613      	mov	r3, r2
 801d46e:	009b      	lsls	r3, r3, #2
 801d470:	4413      	add	r3, r2
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	4a1f      	ldr	r2, [pc, #124]	; (801d4f4 <xTaskIncrementTick+0x164>)
 801d476:	441a      	add	r2, r3
 801d478:	68bb      	ldr	r3, [r7, #8]
 801d47a:	3304      	adds	r3, #4
 801d47c:	4619      	mov	r1, r3
 801d47e:	4610      	mov	r0, r2
 801d480:	f7fe fb21 	bl	801bac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801d484:	68bb      	ldr	r3, [r7, #8]
 801d486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d488:	4b1b      	ldr	r3, [pc, #108]	; (801d4f8 <xTaskIncrementTick+0x168>)
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d48e:	429a      	cmp	r2, r3
 801d490:	d3b8      	bcc.n	801d404 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801d492:	2301      	movs	r3, #1
 801d494:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d496:	e7b5      	b.n	801d404 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801d498:	4b17      	ldr	r3, [pc, #92]	; (801d4f8 <xTaskIncrementTick+0x168>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d49e:	4915      	ldr	r1, [pc, #84]	; (801d4f4 <xTaskIncrementTick+0x164>)
 801d4a0:	4613      	mov	r3, r2
 801d4a2:	009b      	lsls	r3, r3, #2
 801d4a4:	4413      	add	r3, r2
 801d4a6:	009b      	lsls	r3, r3, #2
 801d4a8:	440b      	add	r3, r1
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	2b01      	cmp	r3, #1
 801d4ae:	d901      	bls.n	801d4b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801d4b0:	2301      	movs	r3, #1
 801d4b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801d4b4:	4b11      	ldr	r3, [pc, #68]	; (801d4fc <xTaskIncrementTick+0x16c>)
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d007      	beq.n	801d4cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801d4bc:	2301      	movs	r3, #1
 801d4be:	617b      	str	r3, [r7, #20]
 801d4c0:	e004      	b.n	801d4cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801d4c2:	4b0f      	ldr	r3, [pc, #60]	; (801d500 <xTaskIncrementTick+0x170>)
 801d4c4:	681b      	ldr	r3, [r3, #0]
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	4a0d      	ldr	r2, [pc, #52]	; (801d500 <xTaskIncrementTick+0x170>)
 801d4ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801d4cc:	697b      	ldr	r3, [r7, #20]
}
 801d4ce:	4618      	mov	r0, r3
 801d4d0:	3718      	adds	r7, #24
 801d4d2:	46bd      	mov	sp, r7
 801d4d4:	bd80      	pop	{r7, pc}
 801d4d6:	bf00      	nop
 801d4d8:	20002858 	.word	0x20002858
 801d4dc:	20002834 	.word	0x20002834
 801d4e0:	200027e8 	.word	0x200027e8
 801d4e4:	200027ec 	.word	0x200027ec
 801d4e8:	20002848 	.word	0x20002848
 801d4ec:	20002850 	.word	0x20002850
 801d4f0:	20002838 	.word	0x20002838
 801d4f4:	20002360 	.word	0x20002360
 801d4f8:	2000235c 	.word	0x2000235c
 801d4fc:	20002844 	.word	0x20002844
 801d500:	20002840 	.word	0x20002840

0801d504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801d504:	b480      	push	{r7}
 801d506:	b085      	sub	sp, #20
 801d508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801d50a:	4b28      	ldr	r3, [pc, #160]	; (801d5ac <vTaskSwitchContext+0xa8>)
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d003      	beq.n	801d51a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801d512:	4b27      	ldr	r3, [pc, #156]	; (801d5b0 <vTaskSwitchContext+0xac>)
 801d514:	2201      	movs	r2, #1
 801d516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801d518:	e041      	b.n	801d59e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801d51a:	4b25      	ldr	r3, [pc, #148]	; (801d5b0 <vTaskSwitchContext+0xac>)
 801d51c:	2200      	movs	r2, #0
 801d51e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d520:	4b24      	ldr	r3, [pc, #144]	; (801d5b4 <vTaskSwitchContext+0xb0>)
 801d522:	681b      	ldr	r3, [r3, #0]
 801d524:	60fb      	str	r3, [r7, #12]
 801d526:	e010      	b.n	801d54a <vTaskSwitchContext+0x46>
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	d10a      	bne.n	801d544 <vTaskSwitchContext+0x40>
	__asm volatile
 801d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d532:	f383 8811 	msr	BASEPRI, r3
 801d536:	f3bf 8f6f 	isb	sy
 801d53a:	f3bf 8f4f 	dsb	sy
 801d53e:	607b      	str	r3, [r7, #4]
}
 801d540:	bf00      	nop
 801d542:	e7fe      	b.n	801d542 <vTaskSwitchContext+0x3e>
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	3b01      	subs	r3, #1
 801d548:	60fb      	str	r3, [r7, #12]
 801d54a:	491b      	ldr	r1, [pc, #108]	; (801d5b8 <vTaskSwitchContext+0xb4>)
 801d54c:	68fa      	ldr	r2, [r7, #12]
 801d54e:	4613      	mov	r3, r2
 801d550:	009b      	lsls	r3, r3, #2
 801d552:	4413      	add	r3, r2
 801d554:	009b      	lsls	r3, r3, #2
 801d556:	440b      	add	r3, r1
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d0e4      	beq.n	801d528 <vTaskSwitchContext+0x24>
 801d55e:	68fa      	ldr	r2, [r7, #12]
 801d560:	4613      	mov	r3, r2
 801d562:	009b      	lsls	r3, r3, #2
 801d564:	4413      	add	r3, r2
 801d566:	009b      	lsls	r3, r3, #2
 801d568:	4a13      	ldr	r2, [pc, #76]	; (801d5b8 <vTaskSwitchContext+0xb4>)
 801d56a:	4413      	add	r3, r2
 801d56c:	60bb      	str	r3, [r7, #8]
 801d56e:	68bb      	ldr	r3, [r7, #8]
 801d570:	685b      	ldr	r3, [r3, #4]
 801d572:	685a      	ldr	r2, [r3, #4]
 801d574:	68bb      	ldr	r3, [r7, #8]
 801d576:	605a      	str	r2, [r3, #4]
 801d578:	68bb      	ldr	r3, [r7, #8]
 801d57a:	685a      	ldr	r2, [r3, #4]
 801d57c:	68bb      	ldr	r3, [r7, #8]
 801d57e:	3308      	adds	r3, #8
 801d580:	429a      	cmp	r2, r3
 801d582:	d104      	bne.n	801d58e <vTaskSwitchContext+0x8a>
 801d584:	68bb      	ldr	r3, [r7, #8]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	685a      	ldr	r2, [r3, #4]
 801d58a:	68bb      	ldr	r3, [r7, #8]
 801d58c:	605a      	str	r2, [r3, #4]
 801d58e:	68bb      	ldr	r3, [r7, #8]
 801d590:	685b      	ldr	r3, [r3, #4]
 801d592:	68db      	ldr	r3, [r3, #12]
 801d594:	4a09      	ldr	r2, [pc, #36]	; (801d5bc <vTaskSwitchContext+0xb8>)
 801d596:	6013      	str	r3, [r2, #0]
 801d598:	4a06      	ldr	r2, [pc, #24]	; (801d5b4 <vTaskSwitchContext+0xb0>)
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	6013      	str	r3, [r2, #0]
}
 801d59e:	bf00      	nop
 801d5a0:	3714      	adds	r7, #20
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5a8:	4770      	bx	lr
 801d5aa:	bf00      	nop
 801d5ac:	20002858 	.word	0x20002858
 801d5b0:	20002844 	.word	0x20002844
 801d5b4:	20002838 	.word	0x20002838
 801d5b8:	20002360 	.word	0x20002360
 801d5bc:	2000235c 	.word	0x2000235c

0801d5c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b084      	sub	sp, #16
 801d5c4:	af00      	add	r7, sp, #0
 801d5c6:	6078      	str	r0, [r7, #4]
 801d5c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d10a      	bne.n	801d5e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801d5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d5d4:	f383 8811 	msr	BASEPRI, r3
 801d5d8:	f3bf 8f6f 	isb	sy
 801d5dc:	f3bf 8f4f 	dsb	sy
 801d5e0:	60fb      	str	r3, [r7, #12]
}
 801d5e2:	bf00      	nop
 801d5e4:	e7fe      	b.n	801d5e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d5e6:	4b07      	ldr	r3, [pc, #28]	; (801d604 <vTaskPlaceOnEventList+0x44>)
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	3318      	adds	r3, #24
 801d5ec:	4619      	mov	r1, r3
 801d5ee:	6878      	ldr	r0, [r7, #4]
 801d5f0:	f7fe fa8d 	bl	801bb0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801d5f4:	2101      	movs	r1, #1
 801d5f6:	6838      	ldr	r0, [r7, #0]
 801d5f8:	f000 fb7a 	bl	801dcf0 <prvAddCurrentTaskToDelayedList>
}
 801d5fc:	bf00      	nop
 801d5fe:	3710      	adds	r7, #16
 801d600:	46bd      	mov	sp, r7
 801d602:	bd80      	pop	{r7, pc}
 801d604:	2000235c 	.word	0x2000235c

0801d608 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b086      	sub	sp, #24
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	60f8      	str	r0, [r7, #12]
 801d610:	60b9      	str	r1, [r7, #8]
 801d612:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d10a      	bne.n	801d630 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d61e:	f383 8811 	msr	BASEPRI, r3
 801d622:	f3bf 8f6f 	isb	sy
 801d626:	f3bf 8f4f 	dsb	sy
 801d62a:	617b      	str	r3, [r7, #20]
}
 801d62c:	bf00      	nop
 801d62e:	e7fe      	b.n	801d62e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801d630:	4b0a      	ldr	r3, [pc, #40]	; (801d65c <vTaskPlaceOnEventListRestricted+0x54>)
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	3318      	adds	r3, #24
 801d636:	4619      	mov	r1, r3
 801d638:	68f8      	ldr	r0, [r7, #12]
 801d63a:	f7fe fa44 	bl	801bac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801d63e:	687b      	ldr	r3, [r7, #4]
 801d640:	2b00      	cmp	r3, #0
 801d642:	d002      	beq.n	801d64a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801d644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d648:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801d64a:	6879      	ldr	r1, [r7, #4]
 801d64c:	68b8      	ldr	r0, [r7, #8]
 801d64e:	f000 fb4f 	bl	801dcf0 <prvAddCurrentTaskToDelayedList>
	}
 801d652:	bf00      	nop
 801d654:	3718      	adds	r7, #24
 801d656:	46bd      	mov	sp, r7
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	bf00      	nop
 801d65c:	2000235c 	.word	0x2000235c

0801d660 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801d660:	b580      	push	{r7, lr}
 801d662:	b086      	sub	sp, #24
 801d664:	af00      	add	r7, sp, #0
 801d666:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	68db      	ldr	r3, [r3, #12]
 801d66c:	68db      	ldr	r3, [r3, #12]
 801d66e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801d670:	693b      	ldr	r3, [r7, #16]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d10a      	bne.n	801d68c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801d676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d67a:	f383 8811 	msr	BASEPRI, r3
 801d67e:	f3bf 8f6f 	isb	sy
 801d682:	f3bf 8f4f 	dsb	sy
 801d686:	60fb      	str	r3, [r7, #12]
}
 801d688:	bf00      	nop
 801d68a:	e7fe      	b.n	801d68a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801d68c:	693b      	ldr	r3, [r7, #16]
 801d68e:	3318      	adds	r3, #24
 801d690:	4618      	mov	r0, r3
 801d692:	f7fe fa75 	bl	801bb80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d696:	4b1e      	ldr	r3, [pc, #120]	; (801d710 <xTaskRemoveFromEventList+0xb0>)
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d11d      	bne.n	801d6da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801d69e:	693b      	ldr	r3, [r7, #16]
 801d6a0:	3304      	adds	r3, #4
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f7fe fa6c 	bl	801bb80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801d6a8:	693b      	ldr	r3, [r7, #16]
 801d6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d6ac:	4b19      	ldr	r3, [pc, #100]	; (801d714 <xTaskRemoveFromEventList+0xb4>)
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	429a      	cmp	r2, r3
 801d6b2:	d903      	bls.n	801d6bc <xTaskRemoveFromEventList+0x5c>
 801d6b4:	693b      	ldr	r3, [r7, #16]
 801d6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6b8:	4a16      	ldr	r2, [pc, #88]	; (801d714 <xTaskRemoveFromEventList+0xb4>)
 801d6ba:	6013      	str	r3, [r2, #0]
 801d6bc:	693b      	ldr	r3, [r7, #16]
 801d6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d6c0:	4613      	mov	r3, r2
 801d6c2:	009b      	lsls	r3, r3, #2
 801d6c4:	4413      	add	r3, r2
 801d6c6:	009b      	lsls	r3, r3, #2
 801d6c8:	4a13      	ldr	r2, [pc, #76]	; (801d718 <xTaskRemoveFromEventList+0xb8>)
 801d6ca:	441a      	add	r2, r3
 801d6cc:	693b      	ldr	r3, [r7, #16]
 801d6ce:	3304      	adds	r3, #4
 801d6d0:	4619      	mov	r1, r3
 801d6d2:	4610      	mov	r0, r2
 801d6d4:	f7fe f9f7 	bl	801bac6 <vListInsertEnd>
 801d6d8:	e005      	b.n	801d6e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801d6da:	693b      	ldr	r3, [r7, #16]
 801d6dc:	3318      	adds	r3, #24
 801d6de:	4619      	mov	r1, r3
 801d6e0:	480e      	ldr	r0, [pc, #56]	; (801d71c <xTaskRemoveFromEventList+0xbc>)
 801d6e2:	f7fe f9f0 	bl	801bac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801d6e6:	693b      	ldr	r3, [r7, #16]
 801d6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801d6ea:	4b0d      	ldr	r3, [pc, #52]	; (801d720 <xTaskRemoveFromEventList+0xc0>)
 801d6ec:	681b      	ldr	r3, [r3, #0]
 801d6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	d905      	bls.n	801d700 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801d6f8:	4b0a      	ldr	r3, [pc, #40]	; (801d724 <xTaskRemoveFromEventList+0xc4>)
 801d6fa:	2201      	movs	r2, #1
 801d6fc:	601a      	str	r2, [r3, #0]
 801d6fe:	e001      	b.n	801d704 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801d700:	2300      	movs	r3, #0
 801d702:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801d704:	697b      	ldr	r3, [r7, #20]
}
 801d706:	4618      	mov	r0, r3
 801d708:	3718      	adds	r7, #24
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd80      	pop	{r7, pc}
 801d70e:	bf00      	nop
 801d710:	20002858 	.word	0x20002858
 801d714:	20002838 	.word	0x20002838
 801d718:	20002360 	.word	0x20002360
 801d71c:	200027f0 	.word	0x200027f0
 801d720:	2000235c 	.word	0x2000235c
 801d724:	20002844 	.word	0x20002844

0801d728 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801d728:	b480      	push	{r7}
 801d72a:	b083      	sub	sp, #12
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801d730:	4b06      	ldr	r3, [pc, #24]	; (801d74c <vTaskInternalSetTimeOutState+0x24>)
 801d732:	681a      	ldr	r2, [r3, #0]
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801d738:	4b05      	ldr	r3, [pc, #20]	; (801d750 <vTaskInternalSetTimeOutState+0x28>)
 801d73a:	681a      	ldr	r2, [r3, #0]
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	605a      	str	r2, [r3, #4]
}
 801d740:	bf00      	nop
 801d742:	370c      	adds	r7, #12
 801d744:	46bd      	mov	sp, r7
 801d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d74a:	4770      	bx	lr
 801d74c:	20002848 	.word	0x20002848
 801d750:	20002834 	.word	0x20002834

0801d754 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801d754:	b580      	push	{r7, lr}
 801d756:	b088      	sub	sp, #32
 801d758:	af00      	add	r7, sp, #0
 801d75a:	6078      	str	r0, [r7, #4]
 801d75c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d10a      	bne.n	801d77a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d768:	f383 8811 	msr	BASEPRI, r3
 801d76c:	f3bf 8f6f 	isb	sy
 801d770:	f3bf 8f4f 	dsb	sy
 801d774:	613b      	str	r3, [r7, #16]
}
 801d776:	bf00      	nop
 801d778:	e7fe      	b.n	801d778 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801d77a:	683b      	ldr	r3, [r7, #0]
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d10a      	bne.n	801d796 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d784:	f383 8811 	msr	BASEPRI, r3
 801d788:	f3bf 8f6f 	isb	sy
 801d78c:	f3bf 8f4f 	dsb	sy
 801d790:	60fb      	str	r3, [r7, #12]
}
 801d792:	bf00      	nop
 801d794:	e7fe      	b.n	801d794 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801d796:	f000 ff7d 	bl	801e694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801d79a:	4b1d      	ldr	r3, [pc, #116]	; (801d810 <xTaskCheckForTimeOut+0xbc>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	685b      	ldr	r3, [r3, #4]
 801d7a4:	69ba      	ldr	r2, [r7, #24]
 801d7a6:	1ad3      	subs	r3, r2, r3
 801d7a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801d7aa:	683b      	ldr	r3, [r7, #0]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d7b2:	d102      	bne.n	801d7ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801d7b4:	2300      	movs	r3, #0
 801d7b6:	61fb      	str	r3, [r7, #28]
 801d7b8:	e023      	b.n	801d802 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	681a      	ldr	r2, [r3, #0]
 801d7be:	4b15      	ldr	r3, [pc, #84]	; (801d814 <xTaskCheckForTimeOut+0xc0>)
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d007      	beq.n	801d7d6 <xTaskCheckForTimeOut+0x82>
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	69ba      	ldr	r2, [r7, #24]
 801d7cc:	429a      	cmp	r2, r3
 801d7ce:	d302      	bcc.n	801d7d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801d7d0:	2301      	movs	r3, #1
 801d7d2:	61fb      	str	r3, [r7, #28]
 801d7d4:	e015      	b.n	801d802 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801d7d6:	683b      	ldr	r3, [r7, #0]
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	697a      	ldr	r2, [r7, #20]
 801d7dc:	429a      	cmp	r2, r3
 801d7de:	d20b      	bcs.n	801d7f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801d7e0:	683b      	ldr	r3, [r7, #0]
 801d7e2:	681a      	ldr	r2, [r3, #0]
 801d7e4:	697b      	ldr	r3, [r7, #20]
 801d7e6:	1ad2      	subs	r2, r2, r3
 801d7e8:	683b      	ldr	r3, [r7, #0]
 801d7ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	f7ff ff9b 	bl	801d728 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	61fb      	str	r3, [r7, #28]
 801d7f6:	e004      	b.n	801d802 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801d7f8:	683b      	ldr	r3, [r7, #0]
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801d7fe:	2301      	movs	r3, #1
 801d800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801d802:	f000 ff77 	bl	801e6f4 <vPortExitCritical>

	return xReturn;
 801d806:	69fb      	ldr	r3, [r7, #28]
}
 801d808:	4618      	mov	r0, r3
 801d80a:	3720      	adds	r7, #32
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bd80      	pop	{r7, pc}
 801d810:	20002834 	.word	0x20002834
 801d814:	20002848 	.word	0x20002848

0801d818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801d818:	b480      	push	{r7}
 801d81a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801d81c:	4b03      	ldr	r3, [pc, #12]	; (801d82c <vTaskMissedYield+0x14>)
 801d81e:	2201      	movs	r2, #1
 801d820:	601a      	str	r2, [r3, #0]
}
 801d822:	bf00      	nop
 801d824:	46bd      	mov	sp, r7
 801d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d82a:	4770      	bx	lr
 801d82c:	20002844 	.word	0x20002844

0801d830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801d830:	b580      	push	{r7, lr}
 801d832:	b082      	sub	sp, #8
 801d834:	af00      	add	r7, sp, #0
 801d836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801d838:	f000 f852 	bl	801d8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801d83c:	4b06      	ldr	r3, [pc, #24]	; (801d858 <prvIdleTask+0x28>)
 801d83e:	681b      	ldr	r3, [r3, #0]
 801d840:	2b01      	cmp	r3, #1
 801d842:	d9f9      	bls.n	801d838 <prvIdleTask+0x8>
			{
				taskYIELD();
 801d844:	4b05      	ldr	r3, [pc, #20]	; (801d85c <prvIdleTask+0x2c>)
 801d846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d84a:	601a      	str	r2, [r3, #0]
 801d84c:	f3bf 8f4f 	dsb	sy
 801d850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801d854:	e7f0      	b.n	801d838 <prvIdleTask+0x8>
 801d856:	bf00      	nop
 801d858:	20002360 	.word	0x20002360
 801d85c:	e000ed04 	.word	0xe000ed04

0801d860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801d860:	b580      	push	{r7, lr}
 801d862:	b082      	sub	sp, #8
 801d864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801d866:	2300      	movs	r3, #0
 801d868:	607b      	str	r3, [r7, #4]
 801d86a:	e00c      	b.n	801d886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801d86c:	687a      	ldr	r2, [r7, #4]
 801d86e:	4613      	mov	r3, r2
 801d870:	009b      	lsls	r3, r3, #2
 801d872:	4413      	add	r3, r2
 801d874:	009b      	lsls	r3, r3, #2
 801d876:	4a12      	ldr	r2, [pc, #72]	; (801d8c0 <prvInitialiseTaskLists+0x60>)
 801d878:	4413      	add	r3, r2
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7fe f8f6 	bl	801ba6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	3301      	adds	r3, #1
 801d884:	607b      	str	r3, [r7, #4]
 801d886:	687b      	ldr	r3, [r7, #4]
 801d888:	2b37      	cmp	r3, #55	; 0x37
 801d88a:	d9ef      	bls.n	801d86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801d88c:	480d      	ldr	r0, [pc, #52]	; (801d8c4 <prvInitialiseTaskLists+0x64>)
 801d88e:	f7fe f8ed 	bl	801ba6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801d892:	480d      	ldr	r0, [pc, #52]	; (801d8c8 <prvInitialiseTaskLists+0x68>)
 801d894:	f7fe f8ea 	bl	801ba6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801d898:	480c      	ldr	r0, [pc, #48]	; (801d8cc <prvInitialiseTaskLists+0x6c>)
 801d89a:	f7fe f8e7 	bl	801ba6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801d89e:	480c      	ldr	r0, [pc, #48]	; (801d8d0 <prvInitialiseTaskLists+0x70>)
 801d8a0:	f7fe f8e4 	bl	801ba6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801d8a4:	480b      	ldr	r0, [pc, #44]	; (801d8d4 <prvInitialiseTaskLists+0x74>)
 801d8a6:	f7fe f8e1 	bl	801ba6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801d8aa:	4b0b      	ldr	r3, [pc, #44]	; (801d8d8 <prvInitialiseTaskLists+0x78>)
 801d8ac:	4a05      	ldr	r2, [pc, #20]	; (801d8c4 <prvInitialiseTaskLists+0x64>)
 801d8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801d8b0:	4b0a      	ldr	r3, [pc, #40]	; (801d8dc <prvInitialiseTaskLists+0x7c>)
 801d8b2:	4a05      	ldr	r2, [pc, #20]	; (801d8c8 <prvInitialiseTaskLists+0x68>)
 801d8b4:	601a      	str	r2, [r3, #0]
}
 801d8b6:	bf00      	nop
 801d8b8:	3708      	adds	r7, #8
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	bd80      	pop	{r7, pc}
 801d8be:	bf00      	nop
 801d8c0:	20002360 	.word	0x20002360
 801d8c4:	200027c0 	.word	0x200027c0
 801d8c8:	200027d4 	.word	0x200027d4
 801d8cc:	200027f0 	.word	0x200027f0
 801d8d0:	20002804 	.word	0x20002804
 801d8d4:	2000281c 	.word	0x2000281c
 801d8d8:	200027e8 	.word	0x200027e8
 801d8dc:	200027ec 	.word	0x200027ec

0801d8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b082      	sub	sp, #8
 801d8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801d8e6:	e019      	b.n	801d91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801d8e8:	f000 fed4 	bl	801e694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d8ec:	4b10      	ldr	r3, [pc, #64]	; (801d930 <prvCheckTasksWaitingTermination+0x50>)
 801d8ee:	68db      	ldr	r3, [r3, #12]
 801d8f0:	68db      	ldr	r3, [r3, #12]
 801d8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801d8f4:	687b      	ldr	r3, [r7, #4]
 801d8f6:	3304      	adds	r3, #4
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7fe f941 	bl	801bb80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801d8fe:	4b0d      	ldr	r3, [pc, #52]	; (801d934 <prvCheckTasksWaitingTermination+0x54>)
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	3b01      	subs	r3, #1
 801d904:	4a0b      	ldr	r2, [pc, #44]	; (801d934 <prvCheckTasksWaitingTermination+0x54>)
 801d906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801d908:	4b0b      	ldr	r3, [pc, #44]	; (801d938 <prvCheckTasksWaitingTermination+0x58>)
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	3b01      	subs	r3, #1
 801d90e:	4a0a      	ldr	r2, [pc, #40]	; (801d938 <prvCheckTasksWaitingTermination+0x58>)
 801d910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801d912:	f000 feef 	bl	801e6f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801d916:	6878      	ldr	r0, [r7, #4]
 801d918:	f000 f810 	bl	801d93c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801d91c:	4b06      	ldr	r3, [pc, #24]	; (801d938 <prvCheckTasksWaitingTermination+0x58>)
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d1e1      	bne.n	801d8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801d924:	bf00      	nop
 801d926:	bf00      	nop
 801d928:	3708      	adds	r7, #8
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}
 801d92e:	bf00      	nop
 801d930:	20002804 	.word	0x20002804
 801d934:	20002830 	.word	0x20002830
 801d938:	20002818 	.word	0x20002818

0801d93c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b084      	sub	sp, #16
 801d940:	af00      	add	r7, sp, #0
 801d942:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d108      	bne.n	801d960 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d952:	4618      	mov	r0, r3
 801d954:	f001 f88c 	bl	801ea70 <vPortFree>
				vPortFree( pxTCB );
 801d958:	6878      	ldr	r0, [r7, #4]
 801d95a:	f001 f889 	bl	801ea70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801d95e:	e018      	b.n	801d992 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801d966:	2b01      	cmp	r3, #1
 801d968:	d103      	bne.n	801d972 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801d96a:	6878      	ldr	r0, [r7, #4]
 801d96c:	f001 f880 	bl	801ea70 <vPortFree>
	}
 801d970:	e00f      	b.n	801d992 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801d978:	2b02      	cmp	r3, #2
 801d97a:	d00a      	beq.n	801d992 <prvDeleteTCB+0x56>
	__asm volatile
 801d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801d980:	f383 8811 	msr	BASEPRI, r3
 801d984:	f3bf 8f6f 	isb	sy
 801d988:	f3bf 8f4f 	dsb	sy
 801d98c:	60fb      	str	r3, [r7, #12]
}
 801d98e:	bf00      	nop
 801d990:	e7fe      	b.n	801d990 <prvDeleteTCB+0x54>
	}
 801d992:	bf00      	nop
 801d994:	3710      	adds	r7, #16
 801d996:	46bd      	mov	sp, r7
 801d998:	bd80      	pop	{r7, pc}
	...

0801d99c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801d99c:	b480      	push	{r7}
 801d99e:	b083      	sub	sp, #12
 801d9a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801d9a2:	4b0c      	ldr	r3, [pc, #48]	; (801d9d4 <prvResetNextTaskUnblockTime+0x38>)
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	681b      	ldr	r3, [r3, #0]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d104      	bne.n	801d9b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801d9ac:	4b0a      	ldr	r3, [pc, #40]	; (801d9d8 <prvResetNextTaskUnblockTime+0x3c>)
 801d9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d9b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801d9b4:	e008      	b.n	801d9c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801d9b6:	4b07      	ldr	r3, [pc, #28]	; (801d9d4 <prvResetNextTaskUnblockTime+0x38>)
 801d9b8:	681b      	ldr	r3, [r3, #0]
 801d9ba:	68db      	ldr	r3, [r3, #12]
 801d9bc:	68db      	ldr	r3, [r3, #12]
 801d9be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	685b      	ldr	r3, [r3, #4]
 801d9c4:	4a04      	ldr	r2, [pc, #16]	; (801d9d8 <prvResetNextTaskUnblockTime+0x3c>)
 801d9c6:	6013      	str	r3, [r2, #0]
}
 801d9c8:	bf00      	nop
 801d9ca:	370c      	adds	r7, #12
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d2:	4770      	bx	lr
 801d9d4:	200027e8 	.word	0x200027e8
 801d9d8:	20002850 	.word	0x20002850

0801d9dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801d9dc:	b480      	push	{r7}
 801d9de:	b083      	sub	sp, #12
 801d9e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801d9e2:	4b0b      	ldr	r3, [pc, #44]	; (801da10 <xTaskGetSchedulerState+0x34>)
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d102      	bne.n	801d9f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801d9ea:	2301      	movs	r3, #1
 801d9ec:	607b      	str	r3, [r7, #4]
 801d9ee:	e008      	b.n	801da02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801d9f0:	4b08      	ldr	r3, [pc, #32]	; (801da14 <xTaskGetSchedulerState+0x38>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d102      	bne.n	801d9fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801d9f8:	2302      	movs	r3, #2
 801d9fa:	607b      	str	r3, [r7, #4]
 801d9fc:	e001      	b.n	801da02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801d9fe:	2300      	movs	r3, #0
 801da00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801da02:	687b      	ldr	r3, [r7, #4]
	}
 801da04:	4618      	mov	r0, r3
 801da06:	370c      	adds	r7, #12
 801da08:	46bd      	mov	sp, r7
 801da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da0e:	4770      	bx	lr
 801da10:	2000283c 	.word	0x2000283c
 801da14:	20002858 	.word	0x20002858

0801da18 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801da18:	b580      	push	{r7, lr}
 801da1a:	b084      	sub	sp, #16
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801da24:	2300      	movs	r3, #0
 801da26:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d051      	beq.n	801dad2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801da2e:	68bb      	ldr	r3, [r7, #8]
 801da30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da32:	4b2a      	ldr	r3, [pc, #168]	; (801dadc <xTaskPriorityInherit+0xc4>)
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da38:	429a      	cmp	r2, r3
 801da3a:	d241      	bcs.n	801dac0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801da3c:	68bb      	ldr	r3, [r7, #8]
 801da3e:	699b      	ldr	r3, [r3, #24]
 801da40:	2b00      	cmp	r3, #0
 801da42:	db06      	blt.n	801da52 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801da44:	4b25      	ldr	r3, [pc, #148]	; (801dadc <xTaskPriorityInherit+0xc4>)
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801da4e:	68bb      	ldr	r3, [r7, #8]
 801da50:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801da52:	68bb      	ldr	r3, [r7, #8]
 801da54:	6959      	ldr	r1, [r3, #20]
 801da56:	68bb      	ldr	r3, [r7, #8]
 801da58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da5a:	4613      	mov	r3, r2
 801da5c:	009b      	lsls	r3, r3, #2
 801da5e:	4413      	add	r3, r2
 801da60:	009b      	lsls	r3, r3, #2
 801da62:	4a1f      	ldr	r2, [pc, #124]	; (801dae0 <xTaskPriorityInherit+0xc8>)
 801da64:	4413      	add	r3, r2
 801da66:	4299      	cmp	r1, r3
 801da68:	d122      	bne.n	801dab0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801da6a:	68bb      	ldr	r3, [r7, #8]
 801da6c:	3304      	adds	r3, #4
 801da6e:	4618      	mov	r0, r3
 801da70:	f7fe f886 	bl	801bb80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801da74:	4b19      	ldr	r3, [pc, #100]	; (801dadc <xTaskPriorityInherit+0xc4>)
 801da76:	681b      	ldr	r3, [r3, #0]
 801da78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da7a:	68bb      	ldr	r3, [r7, #8]
 801da7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801da7e:	68bb      	ldr	r3, [r7, #8]
 801da80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da82:	4b18      	ldr	r3, [pc, #96]	; (801dae4 <xTaskPriorityInherit+0xcc>)
 801da84:	681b      	ldr	r3, [r3, #0]
 801da86:	429a      	cmp	r2, r3
 801da88:	d903      	bls.n	801da92 <xTaskPriorityInherit+0x7a>
 801da8a:	68bb      	ldr	r3, [r7, #8]
 801da8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801da8e:	4a15      	ldr	r2, [pc, #84]	; (801dae4 <xTaskPriorityInherit+0xcc>)
 801da90:	6013      	str	r3, [r2, #0]
 801da92:	68bb      	ldr	r3, [r7, #8]
 801da94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801da96:	4613      	mov	r3, r2
 801da98:	009b      	lsls	r3, r3, #2
 801da9a:	4413      	add	r3, r2
 801da9c:	009b      	lsls	r3, r3, #2
 801da9e:	4a10      	ldr	r2, [pc, #64]	; (801dae0 <xTaskPriorityInherit+0xc8>)
 801daa0:	441a      	add	r2, r3
 801daa2:	68bb      	ldr	r3, [r7, #8]
 801daa4:	3304      	adds	r3, #4
 801daa6:	4619      	mov	r1, r3
 801daa8:	4610      	mov	r0, r2
 801daaa:	f7fe f80c 	bl	801bac6 <vListInsertEnd>
 801daae:	e004      	b.n	801daba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801dab0:	4b0a      	ldr	r3, [pc, #40]	; (801dadc <xTaskPriorityInherit+0xc4>)
 801dab2:	681b      	ldr	r3, [r3, #0]
 801dab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dab6:	68bb      	ldr	r3, [r7, #8]
 801dab8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801daba:	2301      	movs	r3, #1
 801dabc:	60fb      	str	r3, [r7, #12]
 801dabe:	e008      	b.n	801dad2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801dac0:	68bb      	ldr	r3, [r7, #8]
 801dac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801dac4:	4b05      	ldr	r3, [pc, #20]	; (801dadc <xTaskPriorityInherit+0xc4>)
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daca:	429a      	cmp	r2, r3
 801dacc:	d201      	bcs.n	801dad2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801dace:	2301      	movs	r3, #1
 801dad0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801dad2:	68fb      	ldr	r3, [r7, #12]
	}
 801dad4:	4618      	mov	r0, r3
 801dad6:	3710      	adds	r7, #16
 801dad8:	46bd      	mov	sp, r7
 801dada:	bd80      	pop	{r7, pc}
 801dadc:	2000235c 	.word	0x2000235c
 801dae0:	20002360 	.word	0x20002360
 801dae4:	20002838 	.word	0x20002838

0801dae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b086      	sub	sp, #24
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801daf4:	2300      	movs	r3, #0
 801daf6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d056      	beq.n	801dbac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801dafe:	4b2e      	ldr	r3, [pc, #184]	; (801dbb8 <xTaskPriorityDisinherit+0xd0>)
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	693a      	ldr	r2, [r7, #16]
 801db04:	429a      	cmp	r2, r3
 801db06:	d00a      	beq.n	801db1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db0c:	f383 8811 	msr	BASEPRI, r3
 801db10:	f3bf 8f6f 	isb	sy
 801db14:	f3bf 8f4f 	dsb	sy
 801db18:	60fb      	str	r3, [r7, #12]
}
 801db1a:	bf00      	nop
 801db1c:	e7fe      	b.n	801db1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801db1e:	693b      	ldr	r3, [r7, #16]
 801db20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db22:	2b00      	cmp	r3, #0
 801db24:	d10a      	bne.n	801db3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801db26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801db2a:	f383 8811 	msr	BASEPRI, r3
 801db2e:	f3bf 8f6f 	isb	sy
 801db32:	f3bf 8f4f 	dsb	sy
 801db36:	60bb      	str	r3, [r7, #8]
}
 801db38:	bf00      	nop
 801db3a:	e7fe      	b.n	801db3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801db3c:	693b      	ldr	r3, [r7, #16]
 801db3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db40:	1e5a      	subs	r2, r3, #1
 801db42:	693b      	ldr	r3, [r7, #16]
 801db44:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801db46:	693b      	ldr	r3, [r7, #16]
 801db48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801db4a:	693b      	ldr	r3, [r7, #16]
 801db4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db4e:	429a      	cmp	r2, r3
 801db50:	d02c      	beq.n	801dbac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801db52:	693b      	ldr	r3, [r7, #16]
 801db54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801db56:	2b00      	cmp	r3, #0
 801db58:	d128      	bne.n	801dbac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801db5a:	693b      	ldr	r3, [r7, #16]
 801db5c:	3304      	adds	r3, #4
 801db5e:	4618      	mov	r0, r3
 801db60:	f7fe f80e 	bl	801bb80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801db64:	693b      	ldr	r3, [r7, #16]
 801db66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801db6c:	693b      	ldr	r3, [r7, #16]
 801db6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801db74:	693b      	ldr	r3, [r7, #16]
 801db76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801db78:	693b      	ldr	r3, [r7, #16]
 801db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801db7c:	4b0f      	ldr	r3, [pc, #60]	; (801dbbc <xTaskPriorityDisinherit+0xd4>)
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	429a      	cmp	r2, r3
 801db82:	d903      	bls.n	801db8c <xTaskPriorityDisinherit+0xa4>
 801db84:	693b      	ldr	r3, [r7, #16]
 801db86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db88:	4a0c      	ldr	r2, [pc, #48]	; (801dbbc <xTaskPriorityDisinherit+0xd4>)
 801db8a:	6013      	str	r3, [r2, #0]
 801db8c:	693b      	ldr	r3, [r7, #16]
 801db8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801db90:	4613      	mov	r3, r2
 801db92:	009b      	lsls	r3, r3, #2
 801db94:	4413      	add	r3, r2
 801db96:	009b      	lsls	r3, r3, #2
 801db98:	4a09      	ldr	r2, [pc, #36]	; (801dbc0 <xTaskPriorityDisinherit+0xd8>)
 801db9a:	441a      	add	r2, r3
 801db9c:	693b      	ldr	r3, [r7, #16]
 801db9e:	3304      	adds	r3, #4
 801dba0:	4619      	mov	r1, r3
 801dba2:	4610      	mov	r0, r2
 801dba4:	f7fd ff8f 	bl	801bac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801dba8:	2301      	movs	r3, #1
 801dbaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801dbac:	697b      	ldr	r3, [r7, #20]
	}
 801dbae:	4618      	mov	r0, r3
 801dbb0:	3718      	adds	r7, #24
 801dbb2:	46bd      	mov	sp, r7
 801dbb4:	bd80      	pop	{r7, pc}
 801dbb6:	bf00      	nop
 801dbb8:	2000235c 	.word	0x2000235c
 801dbbc:	20002838 	.word	0x20002838
 801dbc0:	20002360 	.word	0x20002360

0801dbc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801dbc4:	b580      	push	{r7, lr}
 801dbc6:	b088      	sub	sp, #32
 801dbc8:	af00      	add	r7, sp, #0
 801dbca:	6078      	str	r0, [r7, #4]
 801dbcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801dbd2:	2301      	movs	r3, #1
 801dbd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d06a      	beq.n	801dcb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801dbdc:	69bb      	ldr	r3, [r7, #24]
 801dbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d10a      	bne.n	801dbfa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801dbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dbe8:	f383 8811 	msr	BASEPRI, r3
 801dbec:	f3bf 8f6f 	isb	sy
 801dbf0:	f3bf 8f4f 	dsb	sy
 801dbf4:	60fb      	str	r3, [r7, #12]
}
 801dbf6:	bf00      	nop
 801dbf8:	e7fe      	b.n	801dbf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801dbfa:	69bb      	ldr	r3, [r7, #24]
 801dbfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dbfe:	683a      	ldr	r2, [r7, #0]
 801dc00:	429a      	cmp	r2, r3
 801dc02:	d902      	bls.n	801dc0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801dc04:	683b      	ldr	r3, [r7, #0]
 801dc06:	61fb      	str	r3, [r7, #28]
 801dc08:	e002      	b.n	801dc10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801dc0a:	69bb      	ldr	r3, [r7, #24]
 801dc0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801dc0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801dc10:	69bb      	ldr	r3, [r7, #24]
 801dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc14:	69fa      	ldr	r2, [r7, #28]
 801dc16:	429a      	cmp	r2, r3
 801dc18:	d04b      	beq.n	801dcb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801dc1a:	69bb      	ldr	r3, [r7, #24]
 801dc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc1e:	697a      	ldr	r2, [r7, #20]
 801dc20:	429a      	cmp	r2, r3
 801dc22:	d146      	bne.n	801dcb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801dc24:	4b25      	ldr	r3, [pc, #148]	; (801dcbc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801dc26:	681b      	ldr	r3, [r3, #0]
 801dc28:	69ba      	ldr	r2, [r7, #24]
 801dc2a:	429a      	cmp	r2, r3
 801dc2c:	d10a      	bne.n	801dc44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801dc32:	f383 8811 	msr	BASEPRI, r3
 801dc36:	f3bf 8f6f 	isb	sy
 801dc3a:	f3bf 8f4f 	dsb	sy
 801dc3e:	60bb      	str	r3, [r7, #8]
}
 801dc40:	bf00      	nop
 801dc42:	e7fe      	b.n	801dc42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801dc44:	69bb      	ldr	r3, [r7, #24]
 801dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801dc4a:	69bb      	ldr	r3, [r7, #24]
 801dc4c:	69fa      	ldr	r2, [r7, #28]
 801dc4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801dc50:	69bb      	ldr	r3, [r7, #24]
 801dc52:	699b      	ldr	r3, [r3, #24]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	db04      	blt.n	801dc62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801dc58:	69fb      	ldr	r3, [r7, #28]
 801dc5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801dc5e:	69bb      	ldr	r3, [r7, #24]
 801dc60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801dc62:	69bb      	ldr	r3, [r7, #24]
 801dc64:	6959      	ldr	r1, [r3, #20]
 801dc66:	693a      	ldr	r2, [r7, #16]
 801dc68:	4613      	mov	r3, r2
 801dc6a:	009b      	lsls	r3, r3, #2
 801dc6c:	4413      	add	r3, r2
 801dc6e:	009b      	lsls	r3, r3, #2
 801dc70:	4a13      	ldr	r2, [pc, #76]	; (801dcc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801dc72:	4413      	add	r3, r2
 801dc74:	4299      	cmp	r1, r3
 801dc76:	d11c      	bne.n	801dcb2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801dc78:	69bb      	ldr	r3, [r7, #24]
 801dc7a:	3304      	adds	r3, #4
 801dc7c:	4618      	mov	r0, r3
 801dc7e:	f7fd ff7f 	bl	801bb80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801dc82:	69bb      	ldr	r3, [r7, #24]
 801dc84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc86:	4b0f      	ldr	r3, [pc, #60]	; (801dcc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	429a      	cmp	r2, r3
 801dc8c:	d903      	bls.n	801dc96 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801dc8e:	69bb      	ldr	r3, [r7, #24]
 801dc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc92:	4a0c      	ldr	r2, [pc, #48]	; (801dcc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801dc94:	6013      	str	r3, [r2, #0]
 801dc96:	69bb      	ldr	r3, [r7, #24]
 801dc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801dc9a:	4613      	mov	r3, r2
 801dc9c:	009b      	lsls	r3, r3, #2
 801dc9e:	4413      	add	r3, r2
 801dca0:	009b      	lsls	r3, r3, #2
 801dca2:	4a07      	ldr	r2, [pc, #28]	; (801dcc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801dca4:	441a      	add	r2, r3
 801dca6:	69bb      	ldr	r3, [r7, #24]
 801dca8:	3304      	adds	r3, #4
 801dcaa:	4619      	mov	r1, r3
 801dcac:	4610      	mov	r0, r2
 801dcae:	f7fd ff0a 	bl	801bac6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801dcb2:	bf00      	nop
 801dcb4:	3720      	adds	r7, #32
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
 801dcba:	bf00      	nop
 801dcbc:	2000235c 	.word	0x2000235c
 801dcc0:	20002360 	.word	0x20002360
 801dcc4:	20002838 	.word	0x20002838

0801dcc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801dcc8:	b480      	push	{r7}
 801dcca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801dccc:	4b07      	ldr	r3, [pc, #28]	; (801dcec <pvTaskIncrementMutexHeldCount+0x24>)
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	d004      	beq.n	801dcde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801dcd4:	4b05      	ldr	r3, [pc, #20]	; (801dcec <pvTaskIncrementMutexHeldCount+0x24>)
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dcda:	3201      	adds	r2, #1
 801dcdc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801dcde:	4b03      	ldr	r3, [pc, #12]	; (801dcec <pvTaskIncrementMutexHeldCount+0x24>)
 801dce0:	681b      	ldr	r3, [r3, #0]
	}
 801dce2:	4618      	mov	r0, r3
 801dce4:	46bd      	mov	sp, r7
 801dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcea:	4770      	bx	lr
 801dcec:	2000235c 	.word	0x2000235c

0801dcf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801dcf0:	b580      	push	{r7, lr}
 801dcf2:	b084      	sub	sp, #16
 801dcf4:	af00      	add	r7, sp, #0
 801dcf6:	6078      	str	r0, [r7, #4]
 801dcf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801dcfa:	4b21      	ldr	r3, [pc, #132]	; (801dd80 <prvAddCurrentTaskToDelayedList+0x90>)
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801dd00:	4b20      	ldr	r3, [pc, #128]	; (801dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	3304      	adds	r3, #4
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7fd ff3a 	bl	801bb80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dd12:	d10a      	bne.n	801dd2a <prvAddCurrentTaskToDelayedList+0x3a>
 801dd14:	683b      	ldr	r3, [r7, #0]
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d007      	beq.n	801dd2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801dd1a:	4b1a      	ldr	r3, [pc, #104]	; (801dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 801dd1c:	681b      	ldr	r3, [r3, #0]
 801dd1e:	3304      	adds	r3, #4
 801dd20:	4619      	mov	r1, r3
 801dd22:	4819      	ldr	r0, [pc, #100]	; (801dd88 <prvAddCurrentTaskToDelayedList+0x98>)
 801dd24:	f7fd fecf 	bl	801bac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801dd28:	e026      	b.n	801dd78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801dd2a:	68fa      	ldr	r2, [r7, #12]
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	4413      	add	r3, r2
 801dd30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801dd32:	4b14      	ldr	r3, [pc, #80]	; (801dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 801dd34:	681b      	ldr	r3, [r3, #0]
 801dd36:	68ba      	ldr	r2, [r7, #8]
 801dd38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801dd3a:	68ba      	ldr	r2, [r7, #8]
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	429a      	cmp	r2, r3
 801dd40:	d209      	bcs.n	801dd56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801dd42:	4b12      	ldr	r3, [pc, #72]	; (801dd8c <prvAddCurrentTaskToDelayedList+0x9c>)
 801dd44:	681a      	ldr	r2, [r3, #0]
 801dd46:	4b0f      	ldr	r3, [pc, #60]	; (801dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 801dd48:	681b      	ldr	r3, [r3, #0]
 801dd4a:	3304      	adds	r3, #4
 801dd4c:	4619      	mov	r1, r3
 801dd4e:	4610      	mov	r0, r2
 801dd50:	f7fd fedd 	bl	801bb0e <vListInsert>
}
 801dd54:	e010      	b.n	801dd78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801dd56:	4b0e      	ldr	r3, [pc, #56]	; (801dd90 <prvAddCurrentTaskToDelayedList+0xa0>)
 801dd58:	681a      	ldr	r2, [r3, #0]
 801dd5a:	4b0a      	ldr	r3, [pc, #40]	; (801dd84 <prvAddCurrentTaskToDelayedList+0x94>)
 801dd5c:	681b      	ldr	r3, [r3, #0]
 801dd5e:	3304      	adds	r3, #4
 801dd60:	4619      	mov	r1, r3
 801dd62:	4610      	mov	r0, r2
 801dd64:	f7fd fed3 	bl	801bb0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801dd68:	4b0a      	ldr	r3, [pc, #40]	; (801dd94 <prvAddCurrentTaskToDelayedList+0xa4>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	68ba      	ldr	r2, [r7, #8]
 801dd6e:	429a      	cmp	r2, r3
 801dd70:	d202      	bcs.n	801dd78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801dd72:	4a08      	ldr	r2, [pc, #32]	; (801dd94 <prvAddCurrentTaskToDelayedList+0xa4>)
 801dd74:	68bb      	ldr	r3, [r7, #8]
 801dd76:	6013      	str	r3, [r2, #0]
}
 801dd78:	bf00      	nop
 801dd7a:	3710      	adds	r7, #16
 801dd7c:	46bd      	mov	sp, r7
 801dd7e:	bd80      	pop	{r7, pc}
 801dd80:	20002834 	.word	0x20002834
 801dd84:	2000235c 	.word	0x2000235c
 801dd88:	2000281c 	.word	0x2000281c
 801dd8c:	200027ec 	.word	0x200027ec
 801dd90:	200027e8 	.word	0x200027e8
 801dd94:	20002850 	.word	0x20002850

0801dd98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b08a      	sub	sp, #40	; 0x28
 801dd9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801dd9e:	2300      	movs	r3, #0
 801dda0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801dda2:	f000 fb07 	bl	801e3b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801dda6:	4b1c      	ldr	r3, [pc, #112]	; (801de18 <xTimerCreateTimerTask+0x80>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d021      	beq.n	801ddf2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801ddae:	2300      	movs	r3, #0
 801ddb0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801ddb2:	2300      	movs	r3, #0
 801ddb4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801ddb6:	1d3a      	adds	r2, r7, #4
 801ddb8:	f107 0108 	add.w	r1, r7, #8
 801ddbc:	f107 030c 	add.w	r3, r7, #12
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	f7fd fe39 	bl	801ba38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ddc6:	6879      	ldr	r1, [r7, #4]
 801ddc8:	68bb      	ldr	r3, [r7, #8]
 801ddca:	68fa      	ldr	r2, [r7, #12]
 801ddcc:	9202      	str	r2, [sp, #8]
 801ddce:	9301      	str	r3, [sp, #4]
 801ddd0:	2302      	movs	r3, #2
 801ddd2:	9300      	str	r3, [sp, #0]
 801ddd4:	2300      	movs	r3, #0
 801ddd6:	460a      	mov	r2, r1
 801ddd8:	4910      	ldr	r1, [pc, #64]	; (801de1c <xTimerCreateTimerTask+0x84>)
 801ddda:	4811      	ldr	r0, [pc, #68]	; (801de20 <xTimerCreateTimerTask+0x88>)
 801dddc:	f7fe ff08 	bl	801cbf0 <xTaskCreateStatic>
 801dde0:	4603      	mov	r3, r0
 801dde2:	4a10      	ldr	r2, [pc, #64]	; (801de24 <xTimerCreateTimerTask+0x8c>)
 801dde4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801dde6:	4b0f      	ldr	r3, [pc, #60]	; (801de24 <xTimerCreateTimerTask+0x8c>)
 801dde8:	681b      	ldr	r3, [r3, #0]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d001      	beq.n	801ddf2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801ddee:	2301      	movs	r3, #1
 801ddf0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801ddf2:	697b      	ldr	r3, [r7, #20]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	d10a      	bne.n	801de0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 801ddf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ddfc:	f383 8811 	msr	BASEPRI, r3
 801de00:	f3bf 8f6f 	isb	sy
 801de04:	f3bf 8f4f 	dsb	sy
 801de08:	613b      	str	r3, [r7, #16]
}
 801de0a:	bf00      	nop
 801de0c:	e7fe      	b.n	801de0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801de0e:	697b      	ldr	r3, [r7, #20]
}
 801de10:	4618      	mov	r0, r3
 801de12:	3718      	adds	r7, #24
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}
 801de18:	2000288c 	.word	0x2000288c
 801de1c:	08024bac 	.word	0x08024bac
 801de20:	0801df5d 	.word	0x0801df5d
 801de24:	20002890 	.word	0x20002890

0801de28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801de28:	b580      	push	{r7, lr}
 801de2a:	b08a      	sub	sp, #40	; 0x28
 801de2c:	af00      	add	r7, sp, #0
 801de2e:	60f8      	str	r0, [r7, #12]
 801de30:	60b9      	str	r1, [r7, #8]
 801de32:	607a      	str	r2, [r7, #4]
 801de34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801de36:	2300      	movs	r3, #0
 801de38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d10a      	bne.n	801de56 <xTimerGenericCommand+0x2e>
	__asm volatile
 801de40:	f04f 0350 	mov.w	r3, #80	; 0x50
 801de44:	f383 8811 	msr	BASEPRI, r3
 801de48:	f3bf 8f6f 	isb	sy
 801de4c:	f3bf 8f4f 	dsb	sy
 801de50:	623b      	str	r3, [r7, #32]
}
 801de52:	bf00      	nop
 801de54:	e7fe      	b.n	801de54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801de56:	4b1a      	ldr	r3, [pc, #104]	; (801dec0 <xTimerGenericCommand+0x98>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d02a      	beq.n	801deb4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801de5e:	68bb      	ldr	r3, [r7, #8]
 801de60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801de66:	68fb      	ldr	r3, [r7, #12]
 801de68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801de6a:	68bb      	ldr	r3, [r7, #8]
 801de6c:	2b05      	cmp	r3, #5
 801de6e:	dc18      	bgt.n	801dea2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801de70:	f7ff fdb4 	bl	801d9dc <xTaskGetSchedulerState>
 801de74:	4603      	mov	r3, r0
 801de76:	2b02      	cmp	r3, #2
 801de78:	d109      	bne.n	801de8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801de7a:	4b11      	ldr	r3, [pc, #68]	; (801dec0 <xTimerGenericCommand+0x98>)
 801de7c:	6818      	ldr	r0, [r3, #0]
 801de7e:	f107 0110 	add.w	r1, r7, #16
 801de82:	2300      	movs	r3, #0
 801de84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801de86:	f7fe f84d 	bl	801bf24 <xQueueGenericSend>
 801de8a:	6278      	str	r0, [r7, #36]	; 0x24
 801de8c:	e012      	b.n	801deb4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801de8e:	4b0c      	ldr	r3, [pc, #48]	; (801dec0 <xTimerGenericCommand+0x98>)
 801de90:	6818      	ldr	r0, [r3, #0]
 801de92:	f107 0110 	add.w	r1, r7, #16
 801de96:	2300      	movs	r3, #0
 801de98:	2200      	movs	r2, #0
 801de9a:	f7fe f843 	bl	801bf24 <xQueueGenericSend>
 801de9e:	6278      	str	r0, [r7, #36]	; 0x24
 801dea0:	e008      	b.n	801deb4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801dea2:	4b07      	ldr	r3, [pc, #28]	; (801dec0 <xTimerGenericCommand+0x98>)
 801dea4:	6818      	ldr	r0, [r3, #0]
 801dea6:	f107 0110 	add.w	r1, r7, #16
 801deaa:	2300      	movs	r3, #0
 801deac:	683a      	ldr	r2, [r7, #0]
 801deae:	f7fe f937 	bl	801c120 <xQueueGenericSendFromISR>
 801deb2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801deb6:	4618      	mov	r0, r3
 801deb8:	3728      	adds	r7, #40	; 0x28
 801deba:	46bd      	mov	sp, r7
 801debc:	bd80      	pop	{r7, pc}
 801debe:	bf00      	nop
 801dec0:	2000288c 	.word	0x2000288c

0801dec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801dec4:	b580      	push	{r7, lr}
 801dec6:	b088      	sub	sp, #32
 801dec8:	af02      	add	r7, sp, #8
 801deca:	6078      	str	r0, [r7, #4]
 801decc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801dece:	4b22      	ldr	r3, [pc, #136]	; (801df58 <prvProcessExpiredTimer+0x94>)
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	68db      	ldr	r3, [r3, #12]
 801ded4:	68db      	ldr	r3, [r3, #12]
 801ded6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ded8:	697b      	ldr	r3, [r7, #20]
 801deda:	3304      	adds	r3, #4
 801dedc:	4618      	mov	r0, r3
 801dede:	f7fd fe4f 	bl	801bb80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801dee2:	697b      	ldr	r3, [r7, #20]
 801dee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801dee8:	f003 0304 	and.w	r3, r3, #4
 801deec:	2b00      	cmp	r3, #0
 801deee:	d022      	beq.n	801df36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801def0:	697b      	ldr	r3, [r7, #20]
 801def2:	699a      	ldr	r2, [r3, #24]
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	18d1      	adds	r1, r2, r3
 801def8:	687b      	ldr	r3, [r7, #4]
 801defa:	683a      	ldr	r2, [r7, #0]
 801defc:	6978      	ldr	r0, [r7, #20]
 801defe:	f000 f8d1 	bl	801e0a4 <prvInsertTimerInActiveList>
 801df02:	4603      	mov	r3, r0
 801df04:	2b00      	cmp	r3, #0
 801df06:	d01f      	beq.n	801df48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801df08:	2300      	movs	r3, #0
 801df0a:	9300      	str	r3, [sp, #0]
 801df0c:	2300      	movs	r3, #0
 801df0e:	687a      	ldr	r2, [r7, #4]
 801df10:	2100      	movs	r1, #0
 801df12:	6978      	ldr	r0, [r7, #20]
 801df14:	f7ff ff88 	bl	801de28 <xTimerGenericCommand>
 801df18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801df1a:	693b      	ldr	r3, [r7, #16]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d113      	bne.n	801df48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801df24:	f383 8811 	msr	BASEPRI, r3
 801df28:	f3bf 8f6f 	isb	sy
 801df2c:	f3bf 8f4f 	dsb	sy
 801df30:	60fb      	str	r3, [r7, #12]
}
 801df32:	bf00      	nop
 801df34:	e7fe      	b.n	801df34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801df36:	697b      	ldr	r3, [r7, #20]
 801df38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801df3c:	f023 0301 	bic.w	r3, r3, #1
 801df40:	b2da      	uxtb	r2, r3
 801df42:	697b      	ldr	r3, [r7, #20]
 801df44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801df48:	697b      	ldr	r3, [r7, #20]
 801df4a:	6a1b      	ldr	r3, [r3, #32]
 801df4c:	6978      	ldr	r0, [r7, #20]
 801df4e:	4798      	blx	r3
}
 801df50:	bf00      	nop
 801df52:	3718      	adds	r7, #24
 801df54:	46bd      	mov	sp, r7
 801df56:	bd80      	pop	{r7, pc}
 801df58:	20002884 	.word	0x20002884

0801df5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801df5c:	b580      	push	{r7, lr}
 801df5e:	b084      	sub	sp, #16
 801df60:	af00      	add	r7, sp, #0
 801df62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801df64:	f107 0308 	add.w	r3, r7, #8
 801df68:	4618      	mov	r0, r3
 801df6a:	f000 f857 	bl	801e01c <prvGetNextExpireTime>
 801df6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	4619      	mov	r1, r3
 801df74:	68f8      	ldr	r0, [r7, #12]
 801df76:	f000 f803 	bl	801df80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801df7a:	f000 f8d5 	bl	801e128 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801df7e:	e7f1      	b.n	801df64 <prvTimerTask+0x8>

0801df80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b084      	sub	sp, #16
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
 801df88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801df8a:	f7ff f945 	bl	801d218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801df8e:	f107 0308 	add.w	r3, r7, #8
 801df92:	4618      	mov	r0, r3
 801df94:	f000 f866 	bl	801e064 <prvSampleTimeNow>
 801df98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801df9a:	68bb      	ldr	r3, [r7, #8]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d130      	bne.n	801e002 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801dfa0:	683b      	ldr	r3, [r7, #0]
 801dfa2:	2b00      	cmp	r3, #0
 801dfa4:	d10a      	bne.n	801dfbc <prvProcessTimerOrBlockTask+0x3c>
 801dfa6:	687a      	ldr	r2, [r7, #4]
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	429a      	cmp	r2, r3
 801dfac:	d806      	bhi.n	801dfbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801dfae:	f7ff f941 	bl	801d234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801dfb2:	68f9      	ldr	r1, [r7, #12]
 801dfb4:	6878      	ldr	r0, [r7, #4]
 801dfb6:	f7ff ff85 	bl	801dec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801dfba:	e024      	b.n	801e006 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801dfbc:	683b      	ldr	r3, [r7, #0]
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	d008      	beq.n	801dfd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801dfc2:	4b13      	ldr	r3, [pc, #76]	; (801e010 <prvProcessTimerOrBlockTask+0x90>)
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	681b      	ldr	r3, [r3, #0]
 801dfc8:	2b00      	cmp	r3, #0
 801dfca:	d101      	bne.n	801dfd0 <prvProcessTimerOrBlockTask+0x50>
 801dfcc:	2301      	movs	r3, #1
 801dfce:	e000      	b.n	801dfd2 <prvProcessTimerOrBlockTask+0x52>
 801dfd0:	2300      	movs	r3, #0
 801dfd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801dfd4:	4b0f      	ldr	r3, [pc, #60]	; (801e014 <prvProcessTimerOrBlockTask+0x94>)
 801dfd6:	6818      	ldr	r0, [r3, #0]
 801dfd8:	687a      	ldr	r2, [r7, #4]
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	1ad3      	subs	r3, r2, r3
 801dfde:	683a      	ldr	r2, [r7, #0]
 801dfe0:	4619      	mov	r1, r3
 801dfe2:	f7fe fdd1 	bl	801cb88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801dfe6:	f7ff f925 	bl	801d234 <xTaskResumeAll>
 801dfea:	4603      	mov	r3, r0
 801dfec:	2b00      	cmp	r3, #0
 801dfee:	d10a      	bne.n	801e006 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801dff0:	4b09      	ldr	r3, [pc, #36]	; (801e018 <prvProcessTimerOrBlockTask+0x98>)
 801dff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801dff6:	601a      	str	r2, [r3, #0]
 801dff8:	f3bf 8f4f 	dsb	sy
 801dffc:	f3bf 8f6f 	isb	sy
}
 801e000:	e001      	b.n	801e006 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801e002:	f7ff f917 	bl	801d234 <xTaskResumeAll>
}
 801e006:	bf00      	nop
 801e008:	3710      	adds	r7, #16
 801e00a:	46bd      	mov	sp, r7
 801e00c:	bd80      	pop	{r7, pc}
 801e00e:	bf00      	nop
 801e010:	20002888 	.word	0x20002888
 801e014:	2000288c 	.word	0x2000288c
 801e018:	e000ed04 	.word	0xe000ed04

0801e01c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801e01c:	b480      	push	{r7}
 801e01e:	b085      	sub	sp, #20
 801e020:	af00      	add	r7, sp, #0
 801e022:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801e024:	4b0e      	ldr	r3, [pc, #56]	; (801e060 <prvGetNextExpireTime+0x44>)
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d101      	bne.n	801e032 <prvGetNextExpireTime+0x16>
 801e02e:	2201      	movs	r2, #1
 801e030:	e000      	b.n	801e034 <prvGetNextExpireTime+0x18>
 801e032:	2200      	movs	r2, #0
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	681b      	ldr	r3, [r3, #0]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d105      	bne.n	801e04c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e040:	4b07      	ldr	r3, [pc, #28]	; (801e060 <prvGetNextExpireTime+0x44>)
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	68db      	ldr	r3, [r3, #12]
 801e046:	681b      	ldr	r3, [r3, #0]
 801e048:	60fb      	str	r3, [r7, #12]
 801e04a:	e001      	b.n	801e050 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801e04c:	2300      	movs	r3, #0
 801e04e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801e050:	68fb      	ldr	r3, [r7, #12]
}
 801e052:	4618      	mov	r0, r3
 801e054:	3714      	adds	r7, #20
 801e056:	46bd      	mov	sp, r7
 801e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05c:	4770      	bx	lr
 801e05e:	bf00      	nop
 801e060:	20002884 	.word	0x20002884

0801e064 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801e064:	b580      	push	{r7, lr}
 801e066:	b084      	sub	sp, #16
 801e068:	af00      	add	r7, sp, #0
 801e06a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801e06c:	f7ff f980 	bl	801d370 <xTaskGetTickCount>
 801e070:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801e072:	4b0b      	ldr	r3, [pc, #44]	; (801e0a0 <prvSampleTimeNow+0x3c>)
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	68fa      	ldr	r2, [r7, #12]
 801e078:	429a      	cmp	r2, r3
 801e07a:	d205      	bcs.n	801e088 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801e07c:	f000 f936 	bl	801e2ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	2201      	movs	r2, #1
 801e084:	601a      	str	r2, [r3, #0]
 801e086:	e002      	b.n	801e08e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	2200      	movs	r2, #0
 801e08c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801e08e:	4a04      	ldr	r2, [pc, #16]	; (801e0a0 <prvSampleTimeNow+0x3c>)
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801e094:	68fb      	ldr	r3, [r7, #12]
}
 801e096:	4618      	mov	r0, r3
 801e098:	3710      	adds	r7, #16
 801e09a:	46bd      	mov	sp, r7
 801e09c:	bd80      	pop	{r7, pc}
 801e09e:	bf00      	nop
 801e0a0:	20002894 	.word	0x20002894

0801e0a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b086      	sub	sp, #24
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	60f8      	str	r0, [r7, #12]
 801e0ac:	60b9      	str	r1, [r7, #8]
 801e0ae:	607a      	str	r2, [r7, #4]
 801e0b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801e0b6:	68fb      	ldr	r3, [r7, #12]
 801e0b8:	68ba      	ldr	r2, [r7, #8]
 801e0ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	68fa      	ldr	r2, [r7, #12]
 801e0c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801e0c2:	68ba      	ldr	r2, [r7, #8]
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	429a      	cmp	r2, r3
 801e0c8:	d812      	bhi.n	801e0f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801e0ca:	687a      	ldr	r2, [r7, #4]
 801e0cc:	683b      	ldr	r3, [r7, #0]
 801e0ce:	1ad2      	subs	r2, r2, r3
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	699b      	ldr	r3, [r3, #24]
 801e0d4:	429a      	cmp	r2, r3
 801e0d6:	d302      	bcc.n	801e0de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801e0d8:	2301      	movs	r3, #1
 801e0da:	617b      	str	r3, [r7, #20]
 801e0dc:	e01b      	b.n	801e116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801e0de:	4b10      	ldr	r3, [pc, #64]	; (801e120 <prvInsertTimerInActiveList+0x7c>)
 801e0e0:	681a      	ldr	r2, [r3, #0]
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	3304      	adds	r3, #4
 801e0e6:	4619      	mov	r1, r3
 801e0e8:	4610      	mov	r0, r2
 801e0ea:	f7fd fd10 	bl	801bb0e <vListInsert>
 801e0ee:	e012      	b.n	801e116 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	429a      	cmp	r2, r3
 801e0f6:	d206      	bcs.n	801e106 <prvInsertTimerInActiveList+0x62>
 801e0f8:	68ba      	ldr	r2, [r7, #8]
 801e0fa:	683b      	ldr	r3, [r7, #0]
 801e0fc:	429a      	cmp	r2, r3
 801e0fe:	d302      	bcc.n	801e106 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801e100:	2301      	movs	r3, #1
 801e102:	617b      	str	r3, [r7, #20]
 801e104:	e007      	b.n	801e116 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e106:	4b07      	ldr	r3, [pc, #28]	; (801e124 <prvInsertTimerInActiveList+0x80>)
 801e108:	681a      	ldr	r2, [r3, #0]
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	3304      	adds	r3, #4
 801e10e:	4619      	mov	r1, r3
 801e110:	4610      	mov	r0, r2
 801e112:	f7fd fcfc 	bl	801bb0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801e116:	697b      	ldr	r3, [r7, #20]
}
 801e118:	4618      	mov	r0, r3
 801e11a:	3718      	adds	r7, #24
 801e11c:	46bd      	mov	sp, r7
 801e11e:	bd80      	pop	{r7, pc}
 801e120:	20002888 	.word	0x20002888
 801e124:	20002884 	.word	0x20002884

0801e128 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801e128:	b580      	push	{r7, lr}
 801e12a:	b08e      	sub	sp, #56	; 0x38
 801e12c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e12e:	e0ca      	b.n	801e2c6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	2b00      	cmp	r3, #0
 801e134:	da18      	bge.n	801e168 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801e136:	1d3b      	adds	r3, r7, #4
 801e138:	3304      	adds	r3, #4
 801e13a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d10a      	bne.n	801e158 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e146:	f383 8811 	msr	BASEPRI, r3
 801e14a:	f3bf 8f6f 	isb	sy
 801e14e:	f3bf 8f4f 	dsb	sy
 801e152:	61fb      	str	r3, [r7, #28]
}
 801e154:	bf00      	nop
 801e156:	e7fe      	b.n	801e156 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e15e:	6850      	ldr	r0, [r2, #4]
 801e160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e162:	6892      	ldr	r2, [r2, #8]
 801e164:	4611      	mov	r1, r2
 801e166:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	f2c0 80aa 	blt.w	801e2c4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e176:	695b      	ldr	r3, [r3, #20]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d004      	beq.n	801e186 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e17e:	3304      	adds	r3, #4
 801e180:	4618      	mov	r0, r3
 801e182:	f7fd fcfd 	bl	801bb80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801e186:	463b      	mov	r3, r7
 801e188:	4618      	mov	r0, r3
 801e18a:	f7ff ff6b 	bl	801e064 <prvSampleTimeNow>
 801e18e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801e190:	687b      	ldr	r3, [r7, #4]
 801e192:	2b09      	cmp	r3, #9
 801e194:	f200 8097 	bhi.w	801e2c6 <prvProcessReceivedCommands+0x19e>
 801e198:	a201      	add	r2, pc, #4	; (adr r2, 801e1a0 <prvProcessReceivedCommands+0x78>)
 801e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e19e:	bf00      	nop
 801e1a0:	0801e1c9 	.word	0x0801e1c9
 801e1a4:	0801e1c9 	.word	0x0801e1c9
 801e1a8:	0801e1c9 	.word	0x0801e1c9
 801e1ac:	0801e23d 	.word	0x0801e23d
 801e1b0:	0801e251 	.word	0x0801e251
 801e1b4:	0801e29b 	.word	0x0801e29b
 801e1b8:	0801e1c9 	.word	0x0801e1c9
 801e1bc:	0801e1c9 	.word	0x0801e1c9
 801e1c0:	0801e23d 	.word	0x0801e23d
 801e1c4:	0801e251 	.word	0x0801e251
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e1ce:	f043 0301 	orr.w	r3, r3, #1
 801e1d2:	b2da      	uxtb	r2, r3
 801e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801e1da:	68ba      	ldr	r2, [r7, #8]
 801e1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1de:	699b      	ldr	r3, [r3, #24]
 801e1e0:	18d1      	adds	r1, r2, r3
 801e1e2:	68bb      	ldr	r3, [r7, #8]
 801e1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e1e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e1e8:	f7ff ff5c 	bl	801e0a4 <prvInsertTimerInActiveList>
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d069      	beq.n	801e2c6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1f4:	6a1b      	ldr	r3, [r3, #32]
 801e1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e1f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e200:	f003 0304 	and.w	r3, r3, #4
 801e204:	2b00      	cmp	r3, #0
 801e206:	d05e      	beq.n	801e2c6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801e208:	68ba      	ldr	r2, [r7, #8]
 801e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e20c:	699b      	ldr	r3, [r3, #24]
 801e20e:	441a      	add	r2, r3
 801e210:	2300      	movs	r3, #0
 801e212:	9300      	str	r3, [sp, #0]
 801e214:	2300      	movs	r3, #0
 801e216:	2100      	movs	r1, #0
 801e218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e21a:	f7ff fe05 	bl	801de28 <xTimerGenericCommand>
 801e21e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801e220:	6a3b      	ldr	r3, [r7, #32]
 801e222:	2b00      	cmp	r3, #0
 801e224:	d14f      	bne.n	801e2c6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801e226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e22a:	f383 8811 	msr	BASEPRI, r3
 801e22e:	f3bf 8f6f 	isb	sy
 801e232:	f3bf 8f4f 	dsb	sy
 801e236:	61bb      	str	r3, [r7, #24]
}
 801e238:	bf00      	nop
 801e23a:	e7fe      	b.n	801e23a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e242:	f023 0301 	bic.w	r3, r3, #1
 801e246:	b2da      	uxtb	r2, r3
 801e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e24a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801e24e:	e03a      	b.n	801e2c6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e256:	f043 0301 	orr.w	r3, r3, #1
 801e25a:	b2da      	uxtb	r2, r3
 801e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e25e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801e262:	68ba      	ldr	r2, [r7, #8]
 801e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e266:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e26a:	699b      	ldr	r3, [r3, #24]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d10a      	bne.n	801e286 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e274:	f383 8811 	msr	BASEPRI, r3
 801e278:	f3bf 8f6f 	isb	sy
 801e27c:	f3bf 8f4f 	dsb	sy
 801e280:	617b      	str	r3, [r7, #20]
}
 801e282:	bf00      	nop
 801e284:	e7fe      	b.n	801e284 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e288:	699a      	ldr	r2, [r3, #24]
 801e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e28c:	18d1      	adds	r1, r2, r3
 801e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e294:	f7ff ff06 	bl	801e0a4 <prvInsertTimerInActiveList>
					break;
 801e298:	e015      	b.n	801e2c6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801e29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e29c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e2a0:	f003 0302 	and.w	r3, r3, #2
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d103      	bne.n	801e2b0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801e2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e2aa:	f000 fbe1 	bl	801ea70 <vPortFree>
 801e2ae:	e00a      	b.n	801e2c6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e2b6:	f023 0301 	bic.w	r3, r3, #1
 801e2ba:	b2da      	uxtb	r2, r3
 801e2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e2be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801e2c2:	e000      	b.n	801e2c6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801e2c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801e2c6:	4b08      	ldr	r3, [pc, #32]	; (801e2e8 <prvProcessReceivedCommands+0x1c0>)
 801e2c8:	681b      	ldr	r3, [r3, #0]
 801e2ca:	1d39      	adds	r1, r7, #4
 801e2cc:	2200      	movs	r2, #0
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	f7fe f84e 	bl	801c370 <xQueueReceive>
 801e2d4:	4603      	mov	r3, r0
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	f47f af2a 	bne.w	801e130 <prvProcessReceivedCommands+0x8>
	}
}
 801e2dc:	bf00      	nop
 801e2de:	bf00      	nop
 801e2e0:	3730      	adds	r7, #48	; 0x30
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}
 801e2e6:	bf00      	nop
 801e2e8:	2000288c 	.word	0x2000288c

0801e2ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b088      	sub	sp, #32
 801e2f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e2f2:	e048      	b.n	801e386 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801e2f4:	4b2d      	ldr	r3, [pc, #180]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e2f6:	681b      	ldr	r3, [r3, #0]
 801e2f8:	68db      	ldr	r3, [r3, #12]
 801e2fa:	681b      	ldr	r3, [r3, #0]
 801e2fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801e2fe:	4b2b      	ldr	r3, [pc, #172]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	68db      	ldr	r3, [r3, #12]
 801e304:	68db      	ldr	r3, [r3, #12]
 801e306:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801e308:	68fb      	ldr	r3, [r7, #12]
 801e30a:	3304      	adds	r3, #4
 801e30c:	4618      	mov	r0, r3
 801e30e:	f7fd fc37 	bl	801bb80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801e312:	68fb      	ldr	r3, [r7, #12]
 801e314:	6a1b      	ldr	r3, [r3, #32]
 801e316:	68f8      	ldr	r0, [r7, #12]
 801e318:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801e320:	f003 0304 	and.w	r3, r3, #4
 801e324:	2b00      	cmp	r3, #0
 801e326:	d02e      	beq.n	801e386 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	699b      	ldr	r3, [r3, #24]
 801e32c:	693a      	ldr	r2, [r7, #16]
 801e32e:	4413      	add	r3, r2
 801e330:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801e332:	68ba      	ldr	r2, [r7, #8]
 801e334:	693b      	ldr	r3, [r7, #16]
 801e336:	429a      	cmp	r2, r3
 801e338:	d90e      	bls.n	801e358 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	68ba      	ldr	r2, [r7, #8]
 801e33e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	68fa      	ldr	r2, [r7, #12]
 801e344:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801e346:	4b19      	ldr	r3, [pc, #100]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e348:	681a      	ldr	r2, [r3, #0]
 801e34a:	68fb      	ldr	r3, [r7, #12]
 801e34c:	3304      	adds	r3, #4
 801e34e:	4619      	mov	r1, r3
 801e350:	4610      	mov	r0, r2
 801e352:	f7fd fbdc 	bl	801bb0e <vListInsert>
 801e356:	e016      	b.n	801e386 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801e358:	2300      	movs	r3, #0
 801e35a:	9300      	str	r3, [sp, #0]
 801e35c:	2300      	movs	r3, #0
 801e35e:	693a      	ldr	r2, [r7, #16]
 801e360:	2100      	movs	r1, #0
 801e362:	68f8      	ldr	r0, [r7, #12]
 801e364:	f7ff fd60 	bl	801de28 <xTimerGenericCommand>
 801e368:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d10a      	bne.n	801e386 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801e370:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e374:	f383 8811 	msr	BASEPRI, r3
 801e378:	f3bf 8f6f 	isb	sy
 801e37c:	f3bf 8f4f 	dsb	sy
 801e380:	603b      	str	r3, [r7, #0]
}
 801e382:	bf00      	nop
 801e384:	e7fe      	b.n	801e384 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801e386:	4b09      	ldr	r3, [pc, #36]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d1b1      	bne.n	801e2f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801e390:	4b06      	ldr	r3, [pc, #24]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e392:	681b      	ldr	r3, [r3, #0]
 801e394:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801e396:	4b06      	ldr	r3, [pc, #24]	; (801e3b0 <prvSwitchTimerLists+0xc4>)
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	4a04      	ldr	r2, [pc, #16]	; (801e3ac <prvSwitchTimerLists+0xc0>)
 801e39c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801e39e:	4a04      	ldr	r2, [pc, #16]	; (801e3b0 <prvSwitchTimerLists+0xc4>)
 801e3a0:	697b      	ldr	r3, [r7, #20]
 801e3a2:	6013      	str	r3, [r2, #0]
}
 801e3a4:	bf00      	nop
 801e3a6:	3718      	adds	r7, #24
 801e3a8:	46bd      	mov	sp, r7
 801e3aa:	bd80      	pop	{r7, pc}
 801e3ac:	20002884 	.word	0x20002884
 801e3b0:	20002888 	.word	0x20002888

0801e3b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	b082      	sub	sp, #8
 801e3b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801e3ba:	f000 f96b 	bl	801e694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801e3be:	4b15      	ldr	r3, [pc, #84]	; (801e414 <prvCheckForValidListAndQueue+0x60>)
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d120      	bne.n	801e408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801e3c6:	4814      	ldr	r0, [pc, #80]	; (801e418 <prvCheckForValidListAndQueue+0x64>)
 801e3c8:	f7fd fb50 	bl	801ba6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801e3cc:	4813      	ldr	r0, [pc, #76]	; (801e41c <prvCheckForValidListAndQueue+0x68>)
 801e3ce:	f7fd fb4d 	bl	801ba6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801e3d2:	4b13      	ldr	r3, [pc, #76]	; (801e420 <prvCheckForValidListAndQueue+0x6c>)
 801e3d4:	4a10      	ldr	r2, [pc, #64]	; (801e418 <prvCheckForValidListAndQueue+0x64>)
 801e3d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801e3d8:	4b12      	ldr	r3, [pc, #72]	; (801e424 <prvCheckForValidListAndQueue+0x70>)
 801e3da:	4a10      	ldr	r2, [pc, #64]	; (801e41c <prvCheckForValidListAndQueue+0x68>)
 801e3dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801e3de:	2300      	movs	r3, #0
 801e3e0:	9300      	str	r3, [sp, #0]
 801e3e2:	4b11      	ldr	r3, [pc, #68]	; (801e428 <prvCheckForValidListAndQueue+0x74>)
 801e3e4:	4a11      	ldr	r2, [pc, #68]	; (801e42c <prvCheckForValidListAndQueue+0x78>)
 801e3e6:	2110      	movs	r1, #16
 801e3e8:	200a      	movs	r0, #10
 801e3ea:	f7fd fc5b 	bl	801bca4 <xQueueGenericCreateStatic>
 801e3ee:	4603      	mov	r3, r0
 801e3f0:	4a08      	ldr	r2, [pc, #32]	; (801e414 <prvCheckForValidListAndQueue+0x60>)
 801e3f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801e3f4:	4b07      	ldr	r3, [pc, #28]	; (801e414 <prvCheckForValidListAndQueue+0x60>)
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d005      	beq.n	801e408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801e3fc:	4b05      	ldr	r3, [pc, #20]	; (801e414 <prvCheckForValidListAndQueue+0x60>)
 801e3fe:	681b      	ldr	r3, [r3, #0]
 801e400:	490b      	ldr	r1, [pc, #44]	; (801e430 <prvCheckForValidListAndQueue+0x7c>)
 801e402:	4618      	mov	r0, r3
 801e404:	f7fe fb6c 	bl	801cae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801e408:	f000 f974 	bl	801e6f4 <vPortExitCritical>
}
 801e40c:	bf00      	nop
 801e40e:	46bd      	mov	sp, r7
 801e410:	bd80      	pop	{r7, pc}
 801e412:	bf00      	nop
 801e414:	2000288c 	.word	0x2000288c
 801e418:	2000285c 	.word	0x2000285c
 801e41c:	20002870 	.word	0x20002870
 801e420:	20002884 	.word	0x20002884
 801e424:	20002888 	.word	0x20002888
 801e428:	20002938 	.word	0x20002938
 801e42c:	20002898 	.word	0x20002898
 801e430:	08024bb4 	.word	0x08024bb4

0801e434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801e434:	b480      	push	{r7}
 801e436:	b085      	sub	sp, #20
 801e438:	af00      	add	r7, sp, #0
 801e43a:	60f8      	str	r0, [r7, #12]
 801e43c:	60b9      	str	r1, [r7, #8]
 801e43e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	3b04      	subs	r3, #4
 801e444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801e44c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	3b04      	subs	r3, #4
 801e452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801e454:	68bb      	ldr	r3, [r7, #8]
 801e456:	f023 0201 	bic.w	r2, r3, #1
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801e45e:	68fb      	ldr	r3, [r7, #12]
 801e460:	3b04      	subs	r3, #4
 801e462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801e464:	4a0c      	ldr	r2, [pc, #48]	; (801e498 <pxPortInitialiseStack+0x64>)
 801e466:	68fb      	ldr	r3, [r7, #12]
 801e468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	3b14      	subs	r3, #20
 801e46e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801e470:	687a      	ldr	r2, [r7, #4]
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801e476:	68fb      	ldr	r3, [r7, #12]
 801e478:	3b04      	subs	r3, #4
 801e47a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	f06f 0202 	mvn.w	r2, #2
 801e482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	3b20      	subs	r3, #32
 801e488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801e48a:	68fb      	ldr	r3, [r7, #12]
}
 801e48c:	4618      	mov	r0, r3
 801e48e:	3714      	adds	r7, #20
 801e490:	46bd      	mov	sp, r7
 801e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e496:	4770      	bx	lr
 801e498:	0801e49d 	.word	0x0801e49d

0801e49c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801e49c:	b480      	push	{r7}
 801e49e:	b085      	sub	sp, #20
 801e4a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801e4a2:	2300      	movs	r3, #0
 801e4a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801e4a6:	4b12      	ldr	r3, [pc, #72]	; (801e4f0 <prvTaskExitError+0x54>)
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e4ae:	d00a      	beq.n	801e4c6 <prvTaskExitError+0x2a>
	__asm volatile
 801e4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e4b4:	f383 8811 	msr	BASEPRI, r3
 801e4b8:	f3bf 8f6f 	isb	sy
 801e4bc:	f3bf 8f4f 	dsb	sy
 801e4c0:	60fb      	str	r3, [r7, #12]
}
 801e4c2:	bf00      	nop
 801e4c4:	e7fe      	b.n	801e4c4 <prvTaskExitError+0x28>
	__asm volatile
 801e4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e4ca:	f383 8811 	msr	BASEPRI, r3
 801e4ce:	f3bf 8f6f 	isb	sy
 801e4d2:	f3bf 8f4f 	dsb	sy
 801e4d6:	60bb      	str	r3, [r7, #8]
}
 801e4d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801e4da:	bf00      	nop
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d0fc      	beq.n	801e4dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801e4e2:	bf00      	nop
 801e4e4:	bf00      	nop
 801e4e6:	3714      	adds	r7, #20
 801e4e8:	46bd      	mov	sp, r7
 801e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ee:	4770      	bx	lr
 801e4f0:	200006bc 	.word	0x200006bc
	...

0801e500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801e500:	4b07      	ldr	r3, [pc, #28]	; (801e520 <pxCurrentTCBConst2>)
 801e502:	6819      	ldr	r1, [r3, #0]
 801e504:	6808      	ldr	r0, [r1, #0]
 801e506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e50a:	f380 8809 	msr	PSP, r0
 801e50e:	f3bf 8f6f 	isb	sy
 801e512:	f04f 0000 	mov.w	r0, #0
 801e516:	f380 8811 	msr	BASEPRI, r0
 801e51a:	4770      	bx	lr
 801e51c:	f3af 8000 	nop.w

0801e520 <pxCurrentTCBConst2>:
 801e520:	2000235c 	.word	0x2000235c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801e524:	bf00      	nop
 801e526:	bf00      	nop

0801e528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801e528:	4808      	ldr	r0, [pc, #32]	; (801e54c <prvPortStartFirstTask+0x24>)
 801e52a:	6800      	ldr	r0, [r0, #0]
 801e52c:	6800      	ldr	r0, [r0, #0]
 801e52e:	f380 8808 	msr	MSP, r0
 801e532:	f04f 0000 	mov.w	r0, #0
 801e536:	f380 8814 	msr	CONTROL, r0
 801e53a:	b662      	cpsie	i
 801e53c:	b661      	cpsie	f
 801e53e:	f3bf 8f4f 	dsb	sy
 801e542:	f3bf 8f6f 	isb	sy
 801e546:	df00      	svc	0
 801e548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801e54a:	bf00      	nop
 801e54c:	e000ed08 	.word	0xe000ed08

0801e550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801e550:	b580      	push	{r7, lr}
 801e552:	b086      	sub	sp, #24
 801e554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801e556:	4b46      	ldr	r3, [pc, #280]	; (801e670 <xPortStartScheduler+0x120>)
 801e558:	681b      	ldr	r3, [r3, #0]
 801e55a:	4a46      	ldr	r2, [pc, #280]	; (801e674 <xPortStartScheduler+0x124>)
 801e55c:	4293      	cmp	r3, r2
 801e55e:	d10a      	bne.n	801e576 <xPortStartScheduler+0x26>
	__asm volatile
 801e560:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e564:	f383 8811 	msr	BASEPRI, r3
 801e568:	f3bf 8f6f 	isb	sy
 801e56c:	f3bf 8f4f 	dsb	sy
 801e570:	613b      	str	r3, [r7, #16]
}
 801e572:	bf00      	nop
 801e574:	e7fe      	b.n	801e574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801e576:	4b3e      	ldr	r3, [pc, #248]	; (801e670 <xPortStartScheduler+0x120>)
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	4a3f      	ldr	r2, [pc, #252]	; (801e678 <xPortStartScheduler+0x128>)
 801e57c:	4293      	cmp	r3, r2
 801e57e:	d10a      	bne.n	801e596 <xPortStartScheduler+0x46>
	__asm volatile
 801e580:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e584:	f383 8811 	msr	BASEPRI, r3
 801e588:	f3bf 8f6f 	isb	sy
 801e58c:	f3bf 8f4f 	dsb	sy
 801e590:	60fb      	str	r3, [r7, #12]
}
 801e592:	bf00      	nop
 801e594:	e7fe      	b.n	801e594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801e596:	4b39      	ldr	r3, [pc, #228]	; (801e67c <xPortStartScheduler+0x12c>)
 801e598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801e59a:	697b      	ldr	r3, [r7, #20]
 801e59c:	781b      	ldrb	r3, [r3, #0]
 801e59e:	b2db      	uxtb	r3, r3
 801e5a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801e5a2:	697b      	ldr	r3, [r7, #20]
 801e5a4:	22ff      	movs	r2, #255	; 0xff
 801e5a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801e5a8:	697b      	ldr	r3, [r7, #20]
 801e5aa:	781b      	ldrb	r3, [r3, #0]
 801e5ac:	b2db      	uxtb	r3, r3
 801e5ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801e5b0:	78fb      	ldrb	r3, [r7, #3]
 801e5b2:	b2db      	uxtb	r3, r3
 801e5b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801e5b8:	b2da      	uxtb	r2, r3
 801e5ba:	4b31      	ldr	r3, [pc, #196]	; (801e680 <xPortStartScheduler+0x130>)
 801e5bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801e5be:	4b31      	ldr	r3, [pc, #196]	; (801e684 <xPortStartScheduler+0x134>)
 801e5c0:	2207      	movs	r2, #7
 801e5c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801e5c4:	e009      	b.n	801e5da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801e5c6:	4b2f      	ldr	r3, [pc, #188]	; (801e684 <xPortStartScheduler+0x134>)
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	3b01      	subs	r3, #1
 801e5cc:	4a2d      	ldr	r2, [pc, #180]	; (801e684 <xPortStartScheduler+0x134>)
 801e5ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801e5d0:	78fb      	ldrb	r3, [r7, #3]
 801e5d2:	b2db      	uxtb	r3, r3
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	b2db      	uxtb	r3, r3
 801e5d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801e5da:	78fb      	ldrb	r3, [r7, #3]
 801e5dc:	b2db      	uxtb	r3, r3
 801e5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e5e2:	2b80      	cmp	r3, #128	; 0x80
 801e5e4:	d0ef      	beq.n	801e5c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801e5e6:	4b27      	ldr	r3, [pc, #156]	; (801e684 <xPortStartScheduler+0x134>)
 801e5e8:	681b      	ldr	r3, [r3, #0]
 801e5ea:	f1c3 0307 	rsb	r3, r3, #7
 801e5ee:	2b04      	cmp	r3, #4
 801e5f0:	d00a      	beq.n	801e608 <xPortStartScheduler+0xb8>
	__asm volatile
 801e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e5f6:	f383 8811 	msr	BASEPRI, r3
 801e5fa:	f3bf 8f6f 	isb	sy
 801e5fe:	f3bf 8f4f 	dsb	sy
 801e602:	60bb      	str	r3, [r7, #8]
}
 801e604:	bf00      	nop
 801e606:	e7fe      	b.n	801e606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801e608:	4b1e      	ldr	r3, [pc, #120]	; (801e684 <xPortStartScheduler+0x134>)
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	021b      	lsls	r3, r3, #8
 801e60e:	4a1d      	ldr	r2, [pc, #116]	; (801e684 <xPortStartScheduler+0x134>)
 801e610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801e612:	4b1c      	ldr	r3, [pc, #112]	; (801e684 <xPortStartScheduler+0x134>)
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801e61a:	4a1a      	ldr	r2, [pc, #104]	; (801e684 <xPortStartScheduler+0x134>)
 801e61c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	b2da      	uxtb	r2, r3
 801e622:	697b      	ldr	r3, [r7, #20]
 801e624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801e626:	4b18      	ldr	r3, [pc, #96]	; (801e688 <xPortStartScheduler+0x138>)
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	4a17      	ldr	r2, [pc, #92]	; (801e688 <xPortStartScheduler+0x138>)
 801e62c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801e630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801e632:	4b15      	ldr	r3, [pc, #84]	; (801e688 <xPortStartScheduler+0x138>)
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	4a14      	ldr	r2, [pc, #80]	; (801e688 <xPortStartScheduler+0x138>)
 801e638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801e63c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801e63e:	f000 f8dd 	bl	801e7fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801e642:	4b12      	ldr	r3, [pc, #72]	; (801e68c <xPortStartScheduler+0x13c>)
 801e644:	2200      	movs	r2, #0
 801e646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801e648:	f000 f8fc 	bl	801e844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801e64c:	4b10      	ldr	r3, [pc, #64]	; (801e690 <xPortStartScheduler+0x140>)
 801e64e:	681b      	ldr	r3, [r3, #0]
 801e650:	4a0f      	ldr	r2, [pc, #60]	; (801e690 <xPortStartScheduler+0x140>)
 801e652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801e656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801e658:	f7ff ff66 	bl	801e528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801e65c:	f7fe ff52 	bl	801d504 <vTaskSwitchContext>
	prvTaskExitError();
 801e660:	f7ff ff1c 	bl	801e49c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801e664:	2300      	movs	r3, #0
}
 801e666:	4618      	mov	r0, r3
 801e668:	3718      	adds	r7, #24
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}
 801e66e:	bf00      	nop
 801e670:	e000ed00 	.word	0xe000ed00
 801e674:	410fc271 	.word	0x410fc271
 801e678:	410fc270 	.word	0x410fc270
 801e67c:	e000e400 	.word	0xe000e400
 801e680:	20002988 	.word	0x20002988
 801e684:	2000298c 	.word	0x2000298c
 801e688:	e000ed20 	.word	0xe000ed20
 801e68c:	200006bc 	.word	0x200006bc
 801e690:	e000ef34 	.word	0xe000ef34

0801e694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801e694:	b480      	push	{r7}
 801e696:	b083      	sub	sp, #12
 801e698:	af00      	add	r7, sp, #0
	__asm volatile
 801e69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e69e:	f383 8811 	msr	BASEPRI, r3
 801e6a2:	f3bf 8f6f 	isb	sy
 801e6a6:	f3bf 8f4f 	dsb	sy
 801e6aa:	607b      	str	r3, [r7, #4]
}
 801e6ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801e6ae:	4b0f      	ldr	r3, [pc, #60]	; (801e6ec <vPortEnterCritical+0x58>)
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	3301      	adds	r3, #1
 801e6b4:	4a0d      	ldr	r2, [pc, #52]	; (801e6ec <vPortEnterCritical+0x58>)
 801e6b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801e6b8:	4b0c      	ldr	r3, [pc, #48]	; (801e6ec <vPortEnterCritical+0x58>)
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	2b01      	cmp	r3, #1
 801e6be:	d10f      	bne.n	801e6e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801e6c0:	4b0b      	ldr	r3, [pc, #44]	; (801e6f0 <vPortEnterCritical+0x5c>)
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	b2db      	uxtb	r3, r3
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d00a      	beq.n	801e6e0 <vPortEnterCritical+0x4c>
	__asm volatile
 801e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e6ce:	f383 8811 	msr	BASEPRI, r3
 801e6d2:	f3bf 8f6f 	isb	sy
 801e6d6:	f3bf 8f4f 	dsb	sy
 801e6da:	603b      	str	r3, [r7, #0]
}
 801e6dc:	bf00      	nop
 801e6de:	e7fe      	b.n	801e6de <vPortEnterCritical+0x4a>
	}
}
 801e6e0:	bf00      	nop
 801e6e2:	370c      	adds	r7, #12
 801e6e4:	46bd      	mov	sp, r7
 801e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ea:	4770      	bx	lr
 801e6ec:	200006bc 	.word	0x200006bc
 801e6f0:	e000ed04 	.word	0xe000ed04

0801e6f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801e6f4:	b480      	push	{r7}
 801e6f6:	b083      	sub	sp, #12
 801e6f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801e6fa:	4b12      	ldr	r3, [pc, #72]	; (801e744 <vPortExitCritical+0x50>)
 801e6fc:	681b      	ldr	r3, [r3, #0]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	d10a      	bne.n	801e718 <vPortExitCritical+0x24>
	__asm volatile
 801e702:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e706:	f383 8811 	msr	BASEPRI, r3
 801e70a:	f3bf 8f6f 	isb	sy
 801e70e:	f3bf 8f4f 	dsb	sy
 801e712:	607b      	str	r3, [r7, #4]
}
 801e714:	bf00      	nop
 801e716:	e7fe      	b.n	801e716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801e718:	4b0a      	ldr	r3, [pc, #40]	; (801e744 <vPortExitCritical+0x50>)
 801e71a:	681b      	ldr	r3, [r3, #0]
 801e71c:	3b01      	subs	r3, #1
 801e71e:	4a09      	ldr	r2, [pc, #36]	; (801e744 <vPortExitCritical+0x50>)
 801e720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801e722:	4b08      	ldr	r3, [pc, #32]	; (801e744 <vPortExitCritical+0x50>)
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	2b00      	cmp	r3, #0
 801e728:	d105      	bne.n	801e736 <vPortExitCritical+0x42>
 801e72a:	2300      	movs	r3, #0
 801e72c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801e72e:	683b      	ldr	r3, [r7, #0]
 801e730:	f383 8811 	msr	BASEPRI, r3
}
 801e734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801e736:	bf00      	nop
 801e738:	370c      	adds	r7, #12
 801e73a:	46bd      	mov	sp, r7
 801e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e740:	4770      	bx	lr
 801e742:	bf00      	nop
 801e744:	200006bc 	.word	0x200006bc
	...

0801e750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801e750:	f3ef 8009 	mrs	r0, PSP
 801e754:	f3bf 8f6f 	isb	sy
 801e758:	4b15      	ldr	r3, [pc, #84]	; (801e7b0 <pxCurrentTCBConst>)
 801e75a:	681a      	ldr	r2, [r3, #0]
 801e75c:	f01e 0f10 	tst.w	lr, #16
 801e760:	bf08      	it	eq
 801e762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801e766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e76a:	6010      	str	r0, [r2, #0]
 801e76c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801e770:	f04f 0050 	mov.w	r0, #80	; 0x50
 801e774:	f380 8811 	msr	BASEPRI, r0
 801e778:	f3bf 8f4f 	dsb	sy
 801e77c:	f3bf 8f6f 	isb	sy
 801e780:	f7fe fec0 	bl	801d504 <vTaskSwitchContext>
 801e784:	f04f 0000 	mov.w	r0, #0
 801e788:	f380 8811 	msr	BASEPRI, r0
 801e78c:	bc09      	pop	{r0, r3}
 801e78e:	6819      	ldr	r1, [r3, #0]
 801e790:	6808      	ldr	r0, [r1, #0]
 801e792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e796:	f01e 0f10 	tst.w	lr, #16
 801e79a:	bf08      	it	eq
 801e79c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801e7a0:	f380 8809 	msr	PSP, r0
 801e7a4:	f3bf 8f6f 	isb	sy
 801e7a8:	4770      	bx	lr
 801e7aa:	bf00      	nop
 801e7ac:	f3af 8000 	nop.w

0801e7b0 <pxCurrentTCBConst>:
 801e7b0:	2000235c 	.word	0x2000235c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801e7b4:	bf00      	nop
 801e7b6:	bf00      	nop

0801e7b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801e7b8:	b580      	push	{r7, lr}
 801e7ba:	b082      	sub	sp, #8
 801e7bc:	af00      	add	r7, sp, #0
	__asm volatile
 801e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e7c2:	f383 8811 	msr	BASEPRI, r3
 801e7c6:	f3bf 8f6f 	isb	sy
 801e7ca:	f3bf 8f4f 	dsb	sy
 801e7ce:	607b      	str	r3, [r7, #4]
}
 801e7d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801e7d2:	f7fe fddd 	bl	801d390 <xTaskIncrementTick>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d003      	beq.n	801e7e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801e7dc:	4b06      	ldr	r3, [pc, #24]	; (801e7f8 <xPortSysTickHandler+0x40>)
 801e7de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801e7e2:	601a      	str	r2, [r3, #0]
 801e7e4:	2300      	movs	r3, #0
 801e7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801e7e8:	683b      	ldr	r3, [r7, #0]
 801e7ea:	f383 8811 	msr	BASEPRI, r3
}
 801e7ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801e7f0:	bf00      	nop
 801e7f2:	3708      	adds	r7, #8
 801e7f4:	46bd      	mov	sp, r7
 801e7f6:	bd80      	pop	{r7, pc}
 801e7f8:	e000ed04 	.word	0xe000ed04

0801e7fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801e7fc:	b480      	push	{r7}
 801e7fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801e800:	4b0b      	ldr	r3, [pc, #44]	; (801e830 <vPortSetupTimerInterrupt+0x34>)
 801e802:	2200      	movs	r2, #0
 801e804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801e806:	4b0b      	ldr	r3, [pc, #44]	; (801e834 <vPortSetupTimerInterrupt+0x38>)
 801e808:	2200      	movs	r2, #0
 801e80a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801e80c:	4b0a      	ldr	r3, [pc, #40]	; (801e838 <vPortSetupTimerInterrupt+0x3c>)
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	4a0a      	ldr	r2, [pc, #40]	; (801e83c <vPortSetupTimerInterrupt+0x40>)
 801e812:	fba2 2303 	umull	r2, r3, r2, r3
 801e816:	099b      	lsrs	r3, r3, #6
 801e818:	4a09      	ldr	r2, [pc, #36]	; (801e840 <vPortSetupTimerInterrupt+0x44>)
 801e81a:	3b01      	subs	r3, #1
 801e81c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801e81e:	4b04      	ldr	r3, [pc, #16]	; (801e830 <vPortSetupTimerInterrupt+0x34>)
 801e820:	2207      	movs	r2, #7
 801e822:	601a      	str	r2, [r3, #0]
}
 801e824:	bf00      	nop
 801e826:	46bd      	mov	sp, r7
 801e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e82c:	4770      	bx	lr
 801e82e:	bf00      	nop
 801e830:	e000e010 	.word	0xe000e010
 801e834:	e000e018 	.word	0xe000e018
 801e838:	20000638 	.word	0x20000638
 801e83c:	10624dd3 	.word	0x10624dd3
 801e840:	e000e014 	.word	0xe000e014

0801e844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801e844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801e854 <vPortEnableVFP+0x10>
 801e848:	6801      	ldr	r1, [r0, #0]
 801e84a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801e84e:	6001      	str	r1, [r0, #0]
 801e850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801e852:	bf00      	nop
 801e854:	e000ed88 	.word	0xe000ed88

0801e858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801e858:	b480      	push	{r7}
 801e85a:	b085      	sub	sp, #20
 801e85c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801e85e:	f3ef 8305 	mrs	r3, IPSR
 801e862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	2b0f      	cmp	r3, #15
 801e868:	d914      	bls.n	801e894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801e86a:	4a17      	ldr	r2, [pc, #92]	; (801e8c8 <vPortValidateInterruptPriority+0x70>)
 801e86c:	68fb      	ldr	r3, [r7, #12]
 801e86e:	4413      	add	r3, r2
 801e870:	781b      	ldrb	r3, [r3, #0]
 801e872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801e874:	4b15      	ldr	r3, [pc, #84]	; (801e8cc <vPortValidateInterruptPriority+0x74>)
 801e876:	781b      	ldrb	r3, [r3, #0]
 801e878:	7afa      	ldrb	r2, [r7, #11]
 801e87a:	429a      	cmp	r2, r3
 801e87c:	d20a      	bcs.n	801e894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801e87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e882:	f383 8811 	msr	BASEPRI, r3
 801e886:	f3bf 8f6f 	isb	sy
 801e88a:	f3bf 8f4f 	dsb	sy
 801e88e:	607b      	str	r3, [r7, #4]
}
 801e890:	bf00      	nop
 801e892:	e7fe      	b.n	801e892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801e894:	4b0e      	ldr	r3, [pc, #56]	; (801e8d0 <vPortValidateInterruptPriority+0x78>)
 801e896:	681b      	ldr	r3, [r3, #0]
 801e898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801e89c:	4b0d      	ldr	r3, [pc, #52]	; (801e8d4 <vPortValidateInterruptPriority+0x7c>)
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	429a      	cmp	r2, r3
 801e8a2:	d90a      	bls.n	801e8ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801e8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e8a8:	f383 8811 	msr	BASEPRI, r3
 801e8ac:	f3bf 8f6f 	isb	sy
 801e8b0:	f3bf 8f4f 	dsb	sy
 801e8b4:	603b      	str	r3, [r7, #0]
}
 801e8b6:	bf00      	nop
 801e8b8:	e7fe      	b.n	801e8b8 <vPortValidateInterruptPriority+0x60>
	}
 801e8ba:	bf00      	nop
 801e8bc:	3714      	adds	r7, #20
 801e8be:	46bd      	mov	sp, r7
 801e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c4:	4770      	bx	lr
 801e8c6:	bf00      	nop
 801e8c8:	e000e3f0 	.word	0xe000e3f0
 801e8cc:	20002988 	.word	0x20002988
 801e8d0:	e000ed0c 	.word	0xe000ed0c
 801e8d4:	2000298c 	.word	0x2000298c

0801e8d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801e8d8:	b580      	push	{r7, lr}
 801e8da:	b08a      	sub	sp, #40	; 0x28
 801e8dc:	af00      	add	r7, sp, #0
 801e8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801e8e4:	f7fe fc98 	bl	801d218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801e8e8:	4b5b      	ldr	r3, [pc, #364]	; (801ea58 <pvPortMalloc+0x180>)
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d101      	bne.n	801e8f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801e8f0:	f000 f920 	bl	801eb34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801e8f4:	4b59      	ldr	r3, [pc, #356]	; (801ea5c <pvPortMalloc+0x184>)
 801e8f6:	681a      	ldr	r2, [r3, #0]
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	4013      	ands	r3, r2
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	f040 8093 	bne.w	801ea28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	2b00      	cmp	r3, #0
 801e906:	d01d      	beq.n	801e944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801e908:	2208      	movs	r2, #8
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	4413      	add	r3, r2
 801e90e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	f003 0307 	and.w	r3, r3, #7
 801e916:	2b00      	cmp	r3, #0
 801e918:	d014      	beq.n	801e944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	f023 0307 	bic.w	r3, r3, #7
 801e920:	3308      	adds	r3, #8
 801e922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	f003 0307 	and.w	r3, r3, #7
 801e92a:	2b00      	cmp	r3, #0
 801e92c:	d00a      	beq.n	801e944 <pvPortMalloc+0x6c>
	__asm volatile
 801e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e932:	f383 8811 	msr	BASEPRI, r3
 801e936:	f3bf 8f6f 	isb	sy
 801e93a:	f3bf 8f4f 	dsb	sy
 801e93e:	617b      	str	r3, [r7, #20]
}
 801e940:	bf00      	nop
 801e942:	e7fe      	b.n	801e942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d06e      	beq.n	801ea28 <pvPortMalloc+0x150>
 801e94a:	4b45      	ldr	r3, [pc, #276]	; (801ea60 <pvPortMalloc+0x188>)
 801e94c:	681b      	ldr	r3, [r3, #0]
 801e94e:	687a      	ldr	r2, [r7, #4]
 801e950:	429a      	cmp	r2, r3
 801e952:	d869      	bhi.n	801ea28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801e954:	4b43      	ldr	r3, [pc, #268]	; (801ea64 <pvPortMalloc+0x18c>)
 801e956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801e958:	4b42      	ldr	r3, [pc, #264]	; (801ea64 <pvPortMalloc+0x18c>)
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801e95e:	e004      	b.n	801e96a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e96c:	685b      	ldr	r3, [r3, #4]
 801e96e:	687a      	ldr	r2, [r7, #4]
 801e970:	429a      	cmp	r2, r3
 801e972:	d903      	bls.n	801e97c <pvPortMalloc+0xa4>
 801e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	2b00      	cmp	r3, #0
 801e97a:	d1f1      	bne.n	801e960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801e97c:	4b36      	ldr	r3, [pc, #216]	; (801ea58 <pvPortMalloc+0x180>)
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e982:	429a      	cmp	r2, r3
 801e984:	d050      	beq.n	801ea28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801e986:	6a3b      	ldr	r3, [r7, #32]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	2208      	movs	r2, #8
 801e98c:	4413      	add	r3, r2
 801e98e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e992:	681a      	ldr	r2, [r3, #0]
 801e994:	6a3b      	ldr	r3, [r7, #32]
 801e996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e99a:	685a      	ldr	r2, [r3, #4]
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	1ad2      	subs	r2, r2, r3
 801e9a0:	2308      	movs	r3, #8
 801e9a2:	005b      	lsls	r3, r3, #1
 801e9a4:	429a      	cmp	r2, r3
 801e9a6:	d91f      	bls.n	801e9e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801e9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	4413      	add	r3, r2
 801e9ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801e9b0:	69bb      	ldr	r3, [r7, #24]
 801e9b2:	f003 0307 	and.w	r3, r3, #7
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d00a      	beq.n	801e9d0 <pvPortMalloc+0xf8>
	__asm volatile
 801e9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 801e9be:	f383 8811 	msr	BASEPRI, r3
 801e9c2:	f3bf 8f6f 	isb	sy
 801e9c6:	f3bf 8f4f 	dsb	sy
 801e9ca:	613b      	str	r3, [r7, #16]
}
 801e9cc:	bf00      	nop
 801e9ce:	e7fe      	b.n	801e9ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9d2:	685a      	ldr	r2, [r3, #4]
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	1ad2      	subs	r2, r2, r3
 801e9d8:	69bb      	ldr	r3, [r7, #24]
 801e9da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9de:	687a      	ldr	r2, [r7, #4]
 801e9e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801e9e2:	69b8      	ldr	r0, [r7, #24]
 801e9e4:	f000 f908 	bl	801ebf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801e9e8:	4b1d      	ldr	r3, [pc, #116]	; (801ea60 <pvPortMalloc+0x188>)
 801e9ea:	681a      	ldr	r2, [r3, #0]
 801e9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9ee:	685b      	ldr	r3, [r3, #4]
 801e9f0:	1ad3      	subs	r3, r2, r3
 801e9f2:	4a1b      	ldr	r2, [pc, #108]	; (801ea60 <pvPortMalloc+0x188>)
 801e9f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801e9f6:	4b1a      	ldr	r3, [pc, #104]	; (801ea60 <pvPortMalloc+0x188>)
 801e9f8:	681a      	ldr	r2, [r3, #0]
 801e9fa:	4b1b      	ldr	r3, [pc, #108]	; (801ea68 <pvPortMalloc+0x190>)
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	429a      	cmp	r2, r3
 801ea00:	d203      	bcs.n	801ea0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801ea02:	4b17      	ldr	r3, [pc, #92]	; (801ea60 <pvPortMalloc+0x188>)
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	4a18      	ldr	r2, [pc, #96]	; (801ea68 <pvPortMalloc+0x190>)
 801ea08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea0c:	685a      	ldr	r2, [r3, #4]
 801ea0e:	4b13      	ldr	r3, [pc, #76]	; (801ea5c <pvPortMalloc+0x184>)
 801ea10:	681b      	ldr	r3, [r3, #0]
 801ea12:	431a      	orrs	r2, r3
 801ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801ea1e:	4b13      	ldr	r3, [pc, #76]	; (801ea6c <pvPortMalloc+0x194>)
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	3301      	adds	r3, #1
 801ea24:	4a11      	ldr	r2, [pc, #68]	; (801ea6c <pvPortMalloc+0x194>)
 801ea26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801ea28:	f7fe fc04 	bl	801d234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801ea2c:	69fb      	ldr	r3, [r7, #28]
 801ea2e:	f003 0307 	and.w	r3, r3, #7
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d00a      	beq.n	801ea4c <pvPortMalloc+0x174>
	__asm volatile
 801ea36:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ea3a:	f383 8811 	msr	BASEPRI, r3
 801ea3e:	f3bf 8f6f 	isb	sy
 801ea42:	f3bf 8f4f 	dsb	sy
 801ea46:	60fb      	str	r3, [r7, #12]
}
 801ea48:	bf00      	nop
 801ea4a:	e7fe      	b.n	801ea4a <pvPortMalloc+0x172>
	return pvReturn;
 801ea4c:	69fb      	ldr	r3, [r7, #28]
}
 801ea4e:	4618      	mov	r0, r3
 801ea50:	3728      	adds	r7, #40	; 0x28
 801ea52:	46bd      	mov	sp, r7
 801ea54:	bd80      	pop	{r7, pc}
 801ea56:	bf00      	nop
 801ea58:	20006598 	.word	0x20006598
 801ea5c:	200065ac 	.word	0x200065ac
 801ea60:	2000659c 	.word	0x2000659c
 801ea64:	20006590 	.word	0x20006590
 801ea68:	200065a0 	.word	0x200065a0
 801ea6c:	200065a4 	.word	0x200065a4

0801ea70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801ea70:	b580      	push	{r7, lr}
 801ea72:	b086      	sub	sp, #24
 801ea74:	af00      	add	r7, sp, #0
 801ea76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d04d      	beq.n	801eb1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801ea82:	2308      	movs	r3, #8
 801ea84:	425b      	negs	r3, r3
 801ea86:	697a      	ldr	r2, [r7, #20]
 801ea88:	4413      	add	r3, r2
 801ea8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801ea8c:	697b      	ldr	r3, [r7, #20]
 801ea8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801ea90:	693b      	ldr	r3, [r7, #16]
 801ea92:	685a      	ldr	r2, [r3, #4]
 801ea94:	4b24      	ldr	r3, [pc, #144]	; (801eb28 <vPortFree+0xb8>)
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	4013      	ands	r3, r2
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d10a      	bne.n	801eab4 <vPortFree+0x44>
	__asm volatile
 801ea9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eaa2:	f383 8811 	msr	BASEPRI, r3
 801eaa6:	f3bf 8f6f 	isb	sy
 801eaaa:	f3bf 8f4f 	dsb	sy
 801eaae:	60fb      	str	r3, [r7, #12]
}
 801eab0:	bf00      	nop
 801eab2:	e7fe      	b.n	801eab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801eab4:	693b      	ldr	r3, [r7, #16]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	2b00      	cmp	r3, #0
 801eaba:	d00a      	beq.n	801ead2 <vPortFree+0x62>
	__asm volatile
 801eabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801eac0:	f383 8811 	msr	BASEPRI, r3
 801eac4:	f3bf 8f6f 	isb	sy
 801eac8:	f3bf 8f4f 	dsb	sy
 801eacc:	60bb      	str	r3, [r7, #8]
}
 801eace:	bf00      	nop
 801ead0:	e7fe      	b.n	801ead0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801ead2:	693b      	ldr	r3, [r7, #16]
 801ead4:	685a      	ldr	r2, [r3, #4]
 801ead6:	4b14      	ldr	r3, [pc, #80]	; (801eb28 <vPortFree+0xb8>)
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	4013      	ands	r3, r2
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d01e      	beq.n	801eb1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801eae0:	693b      	ldr	r3, [r7, #16]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d11a      	bne.n	801eb1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801eae8:	693b      	ldr	r3, [r7, #16]
 801eaea:	685a      	ldr	r2, [r3, #4]
 801eaec:	4b0e      	ldr	r3, [pc, #56]	; (801eb28 <vPortFree+0xb8>)
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	43db      	mvns	r3, r3
 801eaf2:	401a      	ands	r2, r3
 801eaf4:	693b      	ldr	r3, [r7, #16]
 801eaf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801eaf8:	f7fe fb8e 	bl	801d218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801eafc:	693b      	ldr	r3, [r7, #16]
 801eafe:	685a      	ldr	r2, [r3, #4]
 801eb00:	4b0a      	ldr	r3, [pc, #40]	; (801eb2c <vPortFree+0xbc>)
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	4413      	add	r3, r2
 801eb06:	4a09      	ldr	r2, [pc, #36]	; (801eb2c <vPortFree+0xbc>)
 801eb08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801eb0a:	6938      	ldr	r0, [r7, #16]
 801eb0c:	f000 f874 	bl	801ebf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801eb10:	4b07      	ldr	r3, [pc, #28]	; (801eb30 <vPortFree+0xc0>)
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	3301      	adds	r3, #1
 801eb16:	4a06      	ldr	r2, [pc, #24]	; (801eb30 <vPortFree+0xc0>)
 801eb18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801eb1a:	f7fe fb8b 	bl	801d234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801eb1e:	bf00      	nop
 801eb20:	3718      	adds	r7, #24
 801eb22:	46bd      	mov	sp, r7
 801eb24:	bd80      	pop	{r7, pc}
 801eb26:	bf00      	nop
 801eb28:	200065ac 	.word	0x200065ac
 801eb2c:	2000659c 	.word	0x2000659c
 801eb30:	200065a8 	.word	0x200065a8

0801eb34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801eb34:	b480      	push	{r7}
 801eb36:	b085      	sub	sp, #20
 801eb38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801eb3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801eb3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801eb40:	4b27      	ldr	r3, [pc, #156]	; (801ebe0 <prvHeapInit+0xac>)
 801eb42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	f003 0307 	and.w	r3, r3, #7
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d00c      	beq.n	801eb68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	3307      	adds	r3, #7
 801eb52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	f023 0307 	bic.w	r3, r3, #7
 801eb5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801eb5c:	68ba      	ldr	r2, [r7, #8]
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	1ad3      	subs	r3, r2, r3
 801eb62:	4a1f      	ldr	r2, [pc, #124]	; (801ebe0 <prvHeapInit+0xac>)
 801eb64:	4413      	add	r3, r2
 801eb66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801eb6c:	4a1d      	ldr	r2, [pc, #116]	; (801ebe4 <prvHeapInit+0xb0>)
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801eb72:	4b1c      	ldr	r3, [pc, #112]	; (801ebe4 <prvHeapInit+0xb0>)
 801eb74:	2200      	movs	r2, #0
 801eb76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	68ba      	ldr	r2, [r7, #8]
 801eb7c:	4413      	add	r3, r2
 801eb7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801eb80:	2208      	movs	r2, #8
 801eb82:	68fb      	ldr	r3, [r7, #12]
 801eb84:	1a9b      	subs	r3, r3, r2
 801eb86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	f023 0307 	bic.w	r3, r3, #7
 801eb8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	4a15      	ldr	r2, [pc, #84]	; (801ebe8 <prvHeapInit+0xb4>)
 801eb94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801eb96:	4b14      	ldr	r3, [pc, #80]	; (801ebe8 <prvHeapInit+0xb4>)
 801eb98:	681b      	ldr	r3, [r3, #0]
 801eb9a:	2200      	movs	r2, #0
 801eb9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801eb9e:	4b12      	ldr	r3, [pc, #72]	; (801ebe8 <prvHeapInit+0xb4>)
 801eba0:	681b      	ldr	r3, [r3, #0]
 801eba2:	2200      	movs	r2, #0
 801eba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	68fa      	ldr	r2, [r7, #12]
 801ebae:	1ad2      	subs	r2, r2, r3
 801ebb0:	683b      	ldr	r3, [r7, #0]
 801ebb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801ebb4:	4b0c      	ldr	r3, [pc, #48]	; (801ebe8 <prvHeapInit+0xb4>)
 801ebb6:	681a      	ldr	r2, [r3, #0]
 801ebb8:	683b      	ldr	r3, [r7, #0]
 801ebba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ebbc:	683b      	ldr	r3, [r7, #0]
 801ebbe:	685b      	ldr	r3, [r3, #4]
 801ebc0:	4a0a      	ldr	r2, [pc, #40]	; (801ebec <prvHeapInit+0xb8>)
 801ebc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801ebc4:	683b      	ldr	r3, [r7, #0]
 801ebc6:	685b      	ldr	r3, [r3, #4]
 801ebc8:	4a09      	ldr	r2, [pc, #36]	; (801ebf0 <prvHeapInit+0xbc>)
 801ebca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801ebcc:	4b09      	ldr	r3, [pc, #36]	; (801ebf4 <prvHeapInit+0xc0>)
 801ebce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ebd2:	601a      	str	r2, [r3, #0]
}
 801ebd4:	bf00      	nop
 801ebd6:	3714      	adds	r7, #20
 801ebd8:	46bd      	mov	sp, r7
 801ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebde:	4770      	bx	lr
 801ebe0:	20002990 	.word	0x20002990
 801ebe4:	20006590 	.word	0x20006590
 801ebe8:	20006598 	.word	0x20006598
 801ebec:	200065a0 	.word	0x200065a0
 801ebf0:	2000659c 	.word	0x2000659c
 801ebf4:	200065ac 	.word	0x200065ac

0801ebf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801ebf8:	b480      	push	{r7}
 801ebfa:	b085      	sub	sp, #20
 801ebfc:	af00      	add	r7, sp, #0
 801ebfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801ec00:	4b28      	ldr	r3, [pc, #160]	; (801eca4 <prvInsertBlockIntoFreeList+0xac>)
 801ec02:	60fb      	str	r3, [r7, #12]
 801ec04:	e002      	b.n	801ec0c <prvInsertBlockIntoFreeList+0x14>
 801ec06:	68fb      	ldr	r3, [r7, #12]
 801ec08:	681b      	ldr	r3, [r3, #0]
 801ec0a:	60fb      	str	r3, [r7, #12]
 801ec0c:	68fb      	ldr	r3, [r7, #12]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	687a      	ldr	r2, [r7, #4]
 801ec12:	429a      	cmp	r2, r3
 801ec14:	d8f7      	bhi.n	801ec06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801ec1a:	68fb      	ldr	r3, [r7, #12]
 801ec1c:	685b      	ldr	r3, [r3, #4]
 801ec1e:	68ba      	ldr	r2, [r7, #8]
 801ec20:	4413      	add	r3, r2
 801ec22:	687a      	ldr	r2, [r7, #4]
 801ec24:	429a      	cmp	r2, r3
 801ec26:	d108      	bne.n	801ec3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801ec28:	68fb      	ldr	r3, [r7, #12]
 801ec2a:	685a      	ldr	r2, [r3, #4]
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	685b      	ldr	r3, [r3, #4]
 801ec30:	441a      	add	r2, r3
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801ec36:	68fb      	ldr	r3, [r7, #12]
 801ec38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	685b      	ldr	r3, [r3, #4]
 801ec42:	68ba      	ldr	r2, [r7, #8]
 801ec44:	441a      	add	r2, r3
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	681b      	ldr	r3, [r3, #0]
 801ec4a:	429a      	cmp	r2, r3
 801ec4c:	d118      	bne.n	801ec80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	681a      	ldr	r2, [r3, #0]
 801ec52:	4b15      	ldr	r3, [pc, #84]	; (801eca8 <prvInsertBlockIntoFreeList+0xb0>)
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	429a      	cmp	r2, r3
 801ec58:	d00d      	beq.n	801ec76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	685a      	ldr	r2, [r3, #4]
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	685b      	ldr	r3, [r3, #4]
 801ec64:	441a      	add	r2, r3
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	681a      	ldr	r2, [r3, #0]
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	601a      	str	r2, [r3, #0]
 801ec74:	e008      	b.n	801ec88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801ec76:	4b0c      	ldr	r3, [pc, #48]	; (801eca8 <prvInsertBlockIntoFreeList+0xb0>)
 801ec78:	681a      	ldr	r2, [r3, #0]
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	601a      	str	r2, [r3, #0]
 801ec7e:	e003      	b.n	801ec88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ec80:	68fb      	ldr	r3, [r7, #12]
 801ec82:	681a      	ldr	r2, [r3, #0]
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ec88:	68fa      	ldr	r2, [r7, #12]
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	429a      	cmp	r2, r3
 801ec8e:	d002      	beq.n	801ec96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ec90:	68fb      	ldr	r3, [r7, #12]
 801ec92:	687a      	ldr	r2, [r7, #4]
 801ec94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ec96:	bf00      	nop
 801ec98:	3714      	adds	r7, #20
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca0:	4770      	bx	lr
 801eca2:	bf00      	nop
 801eca4:	20006590 	.word	0x20006590
 801eca8:	20006598 	.word	0x20006598

0801ecac <__errno>:
 801ecac:	4b01      	ldr	r3, [pc, #4]	; (801ecb4 <__errno+0x8>)
 801ecae:	6818      	ldr	r0, [r3, #0]
 801ecb0:	4770      	bx	lr
 801ecb2:	bf00      	nop
 801ecb4:	200006c0 	.word	0x200006c0

0801ecb8 <__libc_init_array>:
 801ecb8:	b570      	push	{r4, r5, r6, lr}
 801ecba:	4d0d      	ldr	r5, [pc, #52]	; (801ecf0 <__libc_init_array+0x38>)
 801ecbc:	4c0d      	ldr	r4, [pc, #52]	; (801ecf4 <__libc_init_array+0x3c>)
 801ecbe:	1b64      	subs	r4, r4, r5
 801ecc0:	10a4      	asrs	r4, r4, #2
 801ecc2:	2600      	movs	r6, #0
 801ecc4:	42a6      	cmp	r6, r4
 801ecc6:	d109      	bne.n	801ecdc <__libc_init_array+0x24>
 801ecc8:	4d0b      	ldr	r5, [pc, #44]	; (801ecf8 <__libc_init_array+0x40>)
 801ecca:	4c0c      	ldr	r4, [pc, #48]	; (801ecfc <__libc_init_array+0x44>)
 801eccc:	f005 fa32 	bl	8024134 <_init>
 801ecd0:	1b64      	subs	r4, r4, r5
 801ecd2:	10a4      	asrs	r4, r4, #2
 801ecd4:	2600      	movs	r6, #0
 801ecd6:	42a6      	cmp	r6, r4
 801ecd8:	d105      	bne.n	801ece6 <__libc_init_array+0x2e>
 801ecda:	bd70      	pop	{r4, r5, r6, pc}
 801ecdc:	f855 3b04 	ldr.w	r3, [r5], #4
 801ece0:	4798      	blx	r3
 801ece2:	3601      	adds	r6, #1
 801ece4:	e7ee      	b.n	801ecc4 <__libc_init_array+0xc>
 801ece6:	f855 3b04 	ldr.w	r3, [r5], #4
 801ecea:	4798      	blx	r3
 801ecec:	3601      	adds	r6, #1
 801ecee:	e7f2      	b.n	801ecd6 <__libc_init_array+0x1e>
 801ecf0:	0802566c 	.word	0x0802566c
 801ecf4:	0802566c 	.word	0x0802566c
 801ecf8:	0802566c 	.word	0x0802566c
 801ecfc:	08025670 	.word	0x08025670

0801ed00 <malloc>:
 801ed00:	4b02      	ldr	r3, [pc, #8]	; (801ed0c <malloc+0xc>)
 801ed02:	4601      	mov	r1, r0
 801ed04:	6818      	ldr	r0, [r3, #0]
 801ed06:	f000 b871 	b.w	801edec <_malloc_r>
 801ed0a:	bf00      	nop
 801ed0c:	200006c0 	.word	0x200006c0

0801ed10 <free>:
 801ed10:	4b02      	ldr	r3, [pc, #8]	; (801ed1c <free+0xc>)
 801ed12:	4601      	mov	r1, r0
 801ed14:	6818      	ldr	r0, [r3, #0]
 801ed16:	f000 b819 	b.w	801ed4c <_free_r>
 801ed1a:	bf00      	nop
 801ed1c:	200006c0 	.word	0x200006c0

0801ed20 <memcpy>:
 801ed20:	440a      	add	r2, r1
 801ed22:	4291      	cmp	r1, r2
 801ed24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ed28:	d100      	bne.n	801ed2c <memcpy+0xc>
 801ed2a:	4770      	bx	lr
 801ed2c:	b510      	push	{r4, lr}
 801ed2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ed32:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ed36:	4291      	cmp	r1, r2
 801ed38:	d1f9      	bne.n	801ed2e <memcpy+0xe>
 801ed3a:	bd10      	pop	{r4, pc}

0801ed3c <memset>:
 801ed3c:	4402      	add	r2, r0
 801ed3e:	4603      	mov	r3, r0
 801ed40:	4293      	cmp	r3, r2
 801ed42:	d100      	bne.n	801ed46 <memset+0xa>
 801ed44:	4770      	bx	lr
 801ed46:	f803 1b01 	strb.w	r1, [r3], #1
 801ed4a:	e7f9      	b.n	801ed40 <memset+0x4>

0801ed4c <_free_r>:
 801ed4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed4e:	2900      	cmp	r1, #0
 801ed50:	d048      	beq.n	801ede4 <_free_r+0x98>
 801ed52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ed56:	9001      	str	r0, [sp, #4]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	f1a1 0404 	sub.w	r4, r1, #4
 801ed5e:	bfb8      	it	lt
 801ed60:	18e4      	addlt	r4, r4, r3
 801ed62:	f003 f915 	bl	8021f90 <__malloc_lock>
 801ed66:	4a20      	ldr	r2, [pc, #128]	; (801ede8 <_free_r+0x9c>)
 801ed68:	9801      	ldr	r0, [sp, #4]
 801ed6a:	6813      	ldr	r3, [r2, #0]
 801ed6c:	4615      	mov	r5, r2
 801ed6e:	b933      	cbnz	r3, 801ed7e <_free_r+0x32>
 801ed70:	6063      	str	r3, [r4, #4]
 801ed72:	6014      	str	r4, [r2, #0]
 801ed74:	b003      	add	sp, #12
 801ed76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed7a:	f003 b90f 	b.w	8021f9c <__malloc_unlock>
 801ed7e:	42a3      	cmp	r3, r4
 801ed80:	d90b      	bls.n	801ed9a <_free_r+0x4e>
 801ed82:	6821      	ldr	r1, [r4, #0]
 801ed84:	1862      	adds	r2, r4, r1
 801ed86:	4293      	cmp	r3, r2
 801ed88:	bf04      	itt	eq
 801ed8a:	681a      	ldreq	r2, [r3, #0]
 801ed8c:	685b      	ldreq	r3, [r3, #4]
 801ed8e:	6063      	str	r3, [r4, #4]
 801ed90:	bf04      	itt	eq
 801ed92:	1852      	addeq	r2, r2, r1
 801ed94:	6022      	streq	r2, [r4, #0]
 801ed96:	602c      	str	r4, [r5, #0]
 801ed98:	e7ec      	b.n	801ed74 <_free_r+0x28>
 801ed9a:	461a      	mov	r2, r3
 801ed9c:	685b      	ldr	r3, [r3, #4]
 801ed9e:	b10b      	cbz	r3, 801eda4 <_free_r+0x58>
 801eda0:	42a3      	cmp	r3, r4
 801eda2:	d9fa      	bls.n	801ed9a <_free_r+0x4e>
 801eda4:	6811      	ldr	r1, [r2, #0]
 801eda6:	1855      	adds	r5, r2, r1
 801eda8:	42a5      	cmp	r5, r4
 801edaa:	d10b      	bne.n	801edc4 <_free_r+0x78>
 801edac:	6824      	ldr	r4, [r4, #0]
 801edae:	4421      	add	r1, r4
 801edb0:	1854      	adds	r4, r2, r1
 801edb2:	42a3      	cmp	r3, r4
 801edb4:	6011      	str	r1, [r2, #0]
 801edb6:	d1dd      	bne.n	801ed74 <_free_r+0x28>
 801edb8:	681c      	ldr	r4, [r3, #0]
 801edba:	685b      	ldr	r3, [r3, #4]
 801edbc:	6053      	str	r3, [r2, #4]
 801edbe:	4421      	add	r1, r4
 801edc0:	6011      	str	r1, [r2, #0]
 801edc2:	e7d7      	b.n	801ed74 <_free_r+0x28>
 801edc4:	d902      	bls.n	801edcc <_free_r+0x80>
 801edc6:	230c      	movs	r3, #12
 801edc8:	6003      	str	r3, [r0, #0]
 801edca:	e7d3      	b.n	801ed74 <_free_r+0x28>
 801edcc:	6825      	ldr	r5, [r4, #0]
 801edce:	1961      	adds	r1, r4, r5
 801edd0:	428b      	cmp	r3, r1
 801edd2:	bf04      	itt	eq
 801edd4:	6819      	ldreq	r1, [r3, #0]
 801edd6:	685b      	ldreq	r3, [r3, #4]
 801edd8:	6063      	str	r3, [r4, #4]
 801edda:	bf04      	itt	eq
 801eddc:	1949      	addeq	r1, r1, r5
 801edde:	6021      	streq	r1, [r4, #0]
 801ede0:	6054      	str	r4, [r2, #4]
 801ede2:	e7c7      	b.n	801ed74 <_free_r+0x28>
 801ede4:	b003      	add	sp, #12
 801ede6:	bd30      	pop	{r4, r5, pc}
 801ede8:	200065b0 	.word	0x200065b0

0801edec <_malloc_r>:
 801edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801edee:	1ccd      	adds	r5, r1, #3
 801edf0:	f025 0503 	bic.w	r5, r5, #3
 801edf4:	3508      	adds	r5, #8
 801edf6:	2d0c      	cmp	r5, #12
 801edf8:	bf38      	it	cc
 801edfa:	250c      	movcc	r5, #12
 801edfc:	2d00      	cmp	r5, #0
 801edfe:	4606      	mov	r6, r0
 801ee00:	db01      	blt.n	801ee06 <_malloc_r+0x1a>
 801ee02:	42a9      	cmp	r1, r5
 801ee04:	d903      	bls.n	801ee0e <_malloc_r+0x22>
 801ee06:	230c      	movs	r3, #12
 801ee08:	6033      	str	r3, [r6, #0]
 801ee0a:	2000      	movs	r0, #0
 801ee0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee0e:	f003 f8bf 	bl	8021f90 <__malloc_lock>
 801ee12:	4921      	ldr	r1, [pc, #132]	; (801ee98 <_malloc_r+0xac>)
 801ee14:	680a      	ldr	r2, [r1, #0]
 801ee16:	4614      	mov	r4, r2
 801ee18:	b99c      	cbnz	r4, 801ee42 <_malloc_r+0x56>
 801ee1a:	4f20      	ldr	r7, [pc, #128]	; (801ee9c <_malloc_r+0xb0>)
 801ee1c:	683b      	ldr	r3, [r7, #0]
 801ee1e:	b923      	cbnz	r3, 801ee2a <_malloc_r+0x3e>
 801ee20:	4621      	mov	r1, r4
 801ee22:	4630      	mov	r0, r6
 801ee24:	f000 febe 	bl	801fba4 <_sbrk_r>
 801ee28:	6038      	str	r0, [r7, #0]
 801ee2a:	4629      	mov	r1, r5
 801ee2c:	4630      	mov	r0, r6
 801ee2e:	f000 feb9 	bl	801fba4 <_sbrk_r>
 801ee32:	1c43      	adds	r3, r0, #1
 801ee34:	d123      	bne.n	801ee7e <_malloc_r+0x92>
 801ee36:	230c      	movs	r3, #12
 801ee38:	6033      	str	r3, [r6, #0]
 801ee3a:	4630      	mov	r0, r6
 801ee3c:	f003 f8ae 	bl	8021f9c <__malloc_unlock>
 801ee40:	e7e3      	b.n	801ee0a <_malloc_r+0x1e>
 801ee42:	6823      	ldr	r3, [r4, #0]
 801ee44:	1b5b      	subs	r3, r3, r5
 801ee46:	d417      	bmi.n	801ee78 <_malloc_r+0x8c>
 801ee48:	2b0b      	cmp	r3, #11
 801ee4a:	d903      	bls.n	801ee54 <_malloc_r+0x68>
 801ee4c:	6023      	str	r3, [r4, #0]
 801ee4e:	441c      	add	r4, r3
 801ee50:	6025      	str	r5, [r4, #0]
 801ee52:	e004      	b.n	801ee5e <_malloc_r+0x72>
 801ee54:	6863      	ldr	r3, [r4, #4]
 801ee56:	42a2      	cmp	r2, r4
 801ee58:	bf0c      	ite	eq
 801ee5a:	600b      	streq	r3, [r1, #0]
 801ee5c:	6053      	strne	r3, [r2, #4]
 801ee5e:	4630      	mov	r0, r6
 801ee60:	f003 f89c 	bl	8021f9c <__malloc_unlock>
 801ee64:	f104 000b 	add.w	r0, r4, #11
 801ee68:	1d23      	adds	r3, r4, #4
 801ee6a:	f020 0007 	bic.w	r0, r0, #7
 801ee6e:	1ac2      	subs	r2, r0, r3
 801ee70:	d0cc      	beq.n	801ee0c <_malloc_r+0x20>
 801ee72:	1a1b      	subs	r3, r3, r0
 801ee74:	50a3      	str	r3, [r4, r2]
 801ee76:	e7c9      	b.n	801ee0c <_malloc_r+0x20>
 801ee78:	4622      	mov	r2, r4
 801ee7a:	6864      	ldr	r4, [r4, #4]
 801ee7c:	e7cc      	b.n	801ee18 <_malloc_r+0x2c>
 801ee7e:	1cc4      	adds	r4, r0, #3
 801ee80:	f024 0403 	bic.w	r4, r4, #3
 801ee84:	42a0      	cmp	r0, r4
 801ee86:	d0e3      	beq.n	801ee50 <_malloc_r+0x64>
 801ee88:	1a21      	subs	r1, r4, r0
 801ee8a:	4630      	mov	r0, r6
 801ee8c:	f000 fe8a 	bl	801fba4 <_sbrk_r>
 801ee90:	3001      	adds	r0, #1
 801ee92:	d1dd      	bne.n	801ee50 <_malloc_r+0x64>
 801ee94:	e7cf      	b.n	801ee36 <_malloc_r+0x4a>
 801ee96:	bf00      	nop
 801ee98:	200065b0 	.word	0x200065b0
 801ee9c:	200065b4 	.word	0x200065b4

0801eea0 <__cvt>:
 801eea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eea4:	ec55 4b10 	vmov	r4, r5, d0
 801eea8:	2d00      	cmp	r5, #0
 801eeaa:	460e      	mov	r6, r1
 801eeac:	4619      	mov	r1, r3
 801eeae:	462b      	mov	r3, r5
 801eeb0:	bfbb      	ittet	lt
 801eeb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801eeb6:	461d      	movlt	r5, r3
 801eeb8:	2300      	movge	r3, #0
 801eeba:	232d      	movlt	r3, #45	; 0x2d
 801eebc:	700b      	strb	r3, [r1, #0]
 801eebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801eec4:	4691      	mov	r9, r2
 801eec6:	f023 0820 	bic.w	r8, r3, #32
 801eeca:	bfbc      	itt	lt
 801eecc:	4622      	movlt	r2, r4
 801eece:	4614      	movlt	r4, r2
 801eed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801eed4:	d005      	beq.n	801eee2 <__cvt+0x42>
 801eed6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801eeda:	d100      	bne.n	801eede <__cvt+0x3e>
 801eedc:	3601      	adds	r6, #1
 801eede:	2102      	movs	r1, #2
 801eee0:	e000      	b.n	801eee4 <__cvt+0x44>
 801eee2:	2103      	movs	r1, #3
 801eee4:	ab03      	add	r3, sp, #12
 801eee6:	9301      	str	r3, [sp, #4]
 801eee8:	ab02      	add	r3, sp, #8
 801eeea:	9300      	str	r3, [sp, #0]
 801eeec:	ec45 4b10 	vmov	d0, r4, r5
 801eef0:	4653      	mov	r3, sl
 801eef2:	4632      	mov	r2, r6
 801eef4:	f001 fec8 	bl	8020c88 <_dtoa_r>
 801eef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801eefc:	4607      	mov	r7, r0
 801eefe:	d102      	bne.n	801ef06 <__cvt+0x66>
 801ef00:	f019 0f01 	tst.w	r9, #1
 801ef04:	d022      	beq.n	801ef4c <__cvt+0xac>
 801ef06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ef0a:	eb07 0906 	add.w	r9, r7, r6
 801ef0e:	d110      	bne.n	801ef32 <__cvt+0x92>
 801ef10:	783b      	ldrb	r3, [r7, #0]
 801ef12:	2b30      	cmp	r3, #48	; 0x30
 801ef14:	d10a      	bne.n	801ef2c <__cvt+0x8c>
 801ef16:	2200      	movs	r2, #0
 801ef18:	2300      	movs	r3, #0
 801ef1a:	4620      	mov	r0, r4
 801ef1c:	4629      	mov	r1, r5
 801ef1e:	f7e1 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef22:	b918      	cbnz	r0, 801ef2c <__cvt+0x8c>
 801ef24:	f1c6 0601 	rsb	r6, r6, #1
 801ef28:	f8ca 6000 	str.w	r6, [sl]
 801ef2c:	f8da 3000 	ldr.w	r3, [sl]
 801ef30:	4499      	add	r9, r3
 801ef32:	2200      	movs	r2, #0
 801ef34:	2300      	movs	r3, #0
 801ef36:	4620      	mov	r0, r4
 801ef38:	4629      	mov	r1, r5
 801ef3a:	f7e1 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef3e:	b108      	cbz	r0, 801ef44 <__cvt+0xa4>
 801ef40:	f8cd 900c 	str.w	r9, [sp, #12]
 801ef44:	2230      	movs	r2, #48	; 0x30
 801ef46:	9b03      	ldr	r3, [sp, #12]
 801ef48:	454b      	cmp	r3, r9
 801ef4a:	d307      	bcc.n	801ef5c <__cvt+0xbc>
 801ef4c:	9b03      	ldr	r3, [sp, #12]
 801ef4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef50:	1bdb      	subs	r3, r3, r7
 801ef52:	4638      	mov	r0, r7
 801ef54:	6013      	str	r3, [r2, #0]
 801ef56:	b004      	add	sp, #16
 801ef58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ef5c:	1c59      	adds	r1, r3, #1
 801ef5e:	9103      	str	r1, [sp, #12]
 801ef60:	701a      	strb	r2, [r3, #0]
 801ef62:	e7f0      	b.n	801ef46 <__cvt+0xa6>

0801ef64 <__exponent>:
 801ef64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ef66:	4603      	mov	r3, r0
 801ef68:	2900      	cmp	r1, #0
 801ef6a:	bfb8      	it	lt
 801ef6c:	4249      	neglt	r1, r1
 801ef6e:	f803 2b02 	strb.w	r2, [r3], #2
 801ef72:	bfb4      	ite	lt
 801ef74:	222d      	movlt	r2, #45	; 0x2d
 801ef76:	222b      	movge	r2, #43	; 0x2b
 801ef78:	2909      	cmp	r1, #9
 801ef7a:	7042      	strb	r2, [r0, #1]
 801ef7c:	dd2a      	ble.n	801efd4 <__exponent+0x70>
 801ef7e:	f10d 0407 	add.w	r4, sp, #7
 801ef82:	46a4      	mov	ip, r4
 801ef84:	270a      	movs	r7, #10
 801ef86:	46a6      	mov	lr, r4
 801ef88:	460a      	mov	r2, r1
 801ef8a:	fb91 f6f7 	sdiv	r6, r1, r7
 801ef8e:	fb07 1516 	mls	r5, r7, r6, r1
 801ef92:	3530      	adds	r5, #48	; 0x30
 801ef94:	2a63      	cmp	r2, #99	; 0x63
 801ef96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801ef9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ef9e:	4631      	mov	r1, r6
 801efa0:	dcf1      	bgt.n	801ef86 <__exponent+0x22>
 801efa2:	3130      	adds	r1, #48	; 0x30
 801efa4:	f1ae 0502 	sub.w	r5, lr, #2
 801efa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801efac:	1c44      	adds	r4, r0, #1
 801efae:	4629      	mov	r1, r5
 801efb0:	4561      	cmp	r1, ip
 801efb2:	d30a      	bcc.n	801efca <__exponent+0x66>
 801efb4:	f10d 0209 	add.w	r2, sp, #9
 801efb8:	eba2 020e 	sub.w	r2, r2, lr
 801efbc:	4565      	cmp	r5, ip
 801efbe:	bf88      	it	hi
 801efc0:	2200      	movhi	r2, #0
 801efc2:	4413      	add	r3, r2
 801efc4:	1a18      	subs	r0, r3, r0
 801efc6:	b003      	add	sp, #12
 801efc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efca:	f811 2b01 	ldrb.w	r2, [r1], #1
 801efce:	f804 2f01 	strb.w	r2, [r4, #1]!
 801efd2:	e7ed      	b.n	801efb0 <__exponent+0x4c>
 801efd4:	2330      	movs	r3, #48	; 0x30
 801efd6:	3130      	adds	r1, #48	; 0x30
 801efd8:	7083      	strb	r3, [r0, #2]
 801efda:	70c1      	strb	r1, [r0, #3]
 801efdc:	1d03      	adds	r3, r0, #4
 801efde:	e7f1      	b.n	801efc4 <__exponent+0x60>

0801efe0 <_printf_float>:
 801efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe4:	ed2d 8b02 	vpush	{d8}
 801efe8:	b08d      	sub	sp, #52	; 0x34
 801efea:	460c      	mov	r4, r1
 801efec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801eff0:	4616      	mov	r6, r2
 801eff2:	461f      	mov	r7, r3
 801eff4:	4605      	mov	r5, r0
 801eff6:	f002 ffa3 	bl	8021f40 <_localeconv_r>
 801effa:	f8d0 a000 	ldr.w	sl, [r0]
 801effe:	4650      	mov	r0, sl
 801f000:	f7e1 f8e6 	bl	80001d0 <strlen>
 801f004:	2300      	movs	r3, #0
 801f006:	930a      	str	r3, [sp, #40]	; 0x28
 801f008:	6823      	ldr	r3, [r4, #0]
 801f00a:	9305      	str	r3, [sp, #20]
 801f00c:	f8d8 3000 	ldr.w	r3, [r8]
 801f010:	f894 b018 	ldrb.w	fp, [r4, #24]
 801f014:	3307      	adds	r3, #7
 801f016:	f023 0307 	bic.w	r3, r3, #7
 801f01a:	f103 0208 	add.w	r2, r3, #8
 801f01e:	f8c8 2000 	str.w	r2, [r8]
 801f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f026:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801f02a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801f02e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801f032:	9307      	str	r3, [sp, #28]
 801f034:	f8cd 8018 	str.w	r8, [sp, #24]
 801f038:	ee08 0a10 	vmov	s16, r0
 801f03c:	4b9f      	ldr	r3, [pc, #636]	; (801f2bc <_printf_float+0x2dc>)
 801f03e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f046:	f7e1 fd71 	bl	8000b2c <__aeabi_dcmpun>
 801f04a:	bb88      	cbnz	r0, 801f0b0 <_printf_float+0xd0>
 801f04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801f050:	4b9a      	ldr	r3, [pc, #616]	; (801f2bc <_printf_float+0x2dc>)
 801f052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f056:	f7e1 fd4b 	bl	8000af0 <__aeabi_dcmple>
 801f05a:	bb48      	cbnz	r0, 801f0b0 <_printf_float+0xd0>
 801f05c:	2200      	movs	r2, #0
 801f05e:	2300      	movs	r3, #0
 801f060:	4640      	mov	r0, r8
 801f062:	4649      	mov	r1, r9
 801f064:	f7e1 fd3a 	bl	8000adc <__aeabi_dcmplt>
 801f068:	b110      	cbz	r0, 801f070 <_printf_float+0x90>
 801f06a:	232d      	movs	r3, #45	; 0x2d
 801f06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f070:	4b93      	ldr	r3, [pc, #588]	; (801f2c0 <_printf_float+0x2e0>)
 801f072:	4894      	ldr	r0, [pc, #592]	; (801f2c4 <_printf_float+0x2e4>)
 801f074:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f078:	bf94      	ite	ls
 801f07a:	4698      	movls	r8, r3
 801f07c:	4680      	movhi	r8, r0
 801f07e:	2303      	movs	r3, #3
 801f080:	6123      	str	r3, [r4, #16]
 801f082:	9b05      	ldr	r3, [sp, #20]
 801f084:	f023 0204 	bic.w	r2, r3, #4
 801f088:	6022      	str	r2, [r4, #0]
 801f08a:	f04f 0900 	mov.w	r9, #0
 801f08e:	9700      	str	r7, [sp, #0]
 801f090:	4633      	mov	r3, r6
 801f092:	aa0b      	add	r2, sp, #44	; 0x2c
 801f094:	4621      	mov	r1, r4
 801f096:	4628      	mov	r0, r5
 801f098:	f000 f9d8 	bl	801f44c <_printf_common>
 801f09c:	3001      	adds	r0, #1
 801f09e:	f040 8090 	bne.w	801f1c2 <_printf_float+0x1e2>
 801f0a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f0a6:	b00d      	add	sp, #52	; 0x34
 801f0a8:	ecbd 8b02 	vpop	{d8}
 801f0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0b0:	4642      	mov	r2, r8
 801f0b2:	464b      	mov	r3, r9
 801f0b4:	4640      	mov	r0, r8
 801f0b6:	4649      	mov	r1, r9
 801f0b8:	f7e1 fd38 	bl	8000b2c <__aeabi_dcmpun>
 801f0bc:	b140      	cbz	r0, 801f0d0 <_printf_float+0xf0>
 801f0be:	464b      	mov	r3, r9
 801f0c0:	2b00      	cmp	r3, #0
 801f0c2:	bfbc      	itt	lt
 801f0c4:	232d      	movlt	r3, #45	; 0x2d
 801f0c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f0ca:	487f      	ldr	r0, [pc, #508]	; (801f2c8 <_printf_float+0x2e8>)
 801f0cc:	4b7f      	ldr	r3, [pc, #508]	; (801f2cc <_printf_float+0x2ec>)
 801f0ce:	e7d1      	b.n	801f074 <_printf_float+0x94>
 801f0d0:	6863      	ldr	r3, [r4, #4]
 801f0d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f0d6:	9206      	str	r2, [sp, #24]
 801f0d8:	1c5a      	adds	r2, r3, #1
 801f0da:	d13f      	bne.n	801f15c <_printf_float+0x17c>
 801f0dc:	2306      	movs	r3, #6
 801f0de:	6063      	str	r3, [r4, #4]
 801f0e0:	9b05      	ldr	r3, [sp, #20]
 801f0e2:	6861      	ldr	r1, [r4, #4]
 801f0e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	9303      	str	r3, [sp, #12]
 801f0ec:	ab0a      	add	r3, sp, #40	; 0x28
 801f0ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f0f2:	ab09      	add	r3, sp, #36	; 0x24
 801f0f4:	ec49 8b10 	vmov	d0, r8, r9
 801f0f8:	9300      	str	r3, [sp, #0]
 801f0fa:	6022      	str	r2, [r4, #0]
 801f0fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f100:	4628      	mov	r0, r5
 801f102:	f7ff fecd 	bl	801eea0 <__cvt>
 801f106:	9b06      	ldr	r3, [sp, #24]
 801f108:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f10a:	2b47      	cmp	r3, #71	; 0x47
 801f10c:	4680      	mov	r8, r0
 801f10e:	d108      	bne.n	801f122 <_printf_float+0x142>
 801f110:	1cc8      	adds	r0, r1, #3
 801f112:	db02      	blt.n	801f11a <_printf_float+0x13a>
 801f114:	6863      	ldr	r3, [r4, #4]
 801f116:	4299      	cmp	r1, r3
 801f118:	dd41      	ble.n	801f19e <_printf_float+0x1be>
 801f11a:	f1ab 0b02 	sub.w	fp, fp, #2
 801f11e:	fa5f fb8b 	uxtb.w	fp, fp
 801f122:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f126:	d820      	bhi.n	801f16a <_printf_float+0x18a>
 801f128:	3901      	subs	r1, #1
 801f12a:	465a      	mov	r2, fp
 801f12c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f130:	9109      	str	r1, [sp, #36]	; 0x24
 801f132:	f7ff ff17 	bl	801ef64 <__exponent>
 801f136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f138:	1813      	adds	r3, r2, r0
 801f13a:	2a01      	cmp	r2, #1
 801f13c:	4681      	mov	r9, r0
 801f13e:	6123      	str	r3, [r4, #16]
 801f140:	dc02      	bgt.n	801f148 <_printf_float+0x168>
 801f142:	6822      	ldr	r2, [r4, #0]
 801f144:	07d2      	lsls	r2, r2, #31
 801f146:	d501      	bpl.n	801f14c <_printf_float+0x16c>
 801f148:	3301      	adds	r3, #1
 801f14a:	6123      	str	r3, [r4, #16]
 801f14c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f150:	2b00      	cmp	r3, #0
 801f152:	d09c      	beq.n	801f08e <_printf_float+0xae>
 801f154:	232d      	movs	r3, #45	; 0x2d
 801f156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f15a:	e798      	b.n	801f08e <_printf_float+0xae>
 801f15c:	9a06      	ldr	r2, [sp, #24]
 801f15e:	2a47      	cmp	r2, #71	; 0x47
 801f160:	d1be      	bne.n	801f0e0 <_printf_float+0x100>
 801f162:	2b00      	cmp	r3, #0
 801f164:	d1bc      	bne.n	801f0e0 <_printf_float+0x100>
 801f166:	2301      	movs	r3, #1
 801f168:	e7b9      	b.n	801f0de <_printf_float+0xfe>
 801f16a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f16e:	d118      	bne.n	801f1a2 <_printf_float+0x1c2>
 801f170:	2900      	cmp	r1, #0
 801f172:	6863      	ldr	r3, [r4, #4]
 801f174:	dd0b      	ble.n	801f18e <_printf_float+0x1ae>
 801f176:	6121      	str	r1, [r4, #16]
 801f178:	b913      	cbnz	r3, 801f180 <_printf_float+0x1a0>
 801f17a:	6822      	ldr	r2, [r4, #0]
 801f17c:	07d0      	lsls	r0, r2, #31
 801f17e:	d502      	bpl.n	801f186 <_printf_float+0x1a6>
 801f180:	3301      	adds	r3, #1
 801f182:	440b      	add	r3, r1
 801f184:	6123      	str	r3, [r4, #16]
 801f186:	65a1      	str	r1, [r4, #88]	; 0x58
 801f188:	f04f 0900 	mov.w	r9, #0
 801f18c:	e7de      	b.n	801f14c <_printf_float+0x16c>
 801f18e:	b913      	cbnz	r3, 801f196 <_printf_float+0x1b6>
 801f190:	6822      	ldr	r2, [r4, #0]
 801f192:	07d2      	lsls	r2, r2, #31
 801f194:	d501      	bpl.n	801f19a <_printf_float+0x1ba>
 801f196:	3302      	adds	r3, #2
 801f198:	e7f4      	b.n	801f184 <_printf_float+0x1a4>
 801f19a:	2301      	movs	r3, #1
 801f19c:	e7f2      	b.n	801f184 <_printf_float+0x1a4>
 801f19e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1a4:	4299      	cmp	r1, r3
 801f1a6:	db05      	blt.n	801f1b4 <_printf_float+0x1d4>
 801f1a8:	6823      	ldr	r3, [r4, #0]
 801f1aa:	6121      	str	r1, [r4, #16]
 801f1ac:	07d8      	lsls	r0, r3, #31
 801f1ae:	d5ea      	bpl.n	801f186 <_printf_float+0x1a6>
 801f1b0:	1c4b      	adds	r3, r1, #1
 801f1b2:	e7e7      	b.n	801f184 <_printf_float+0x1a4>
 801f1b4:	2900      	cmp	r1, #0
 801f1b6:	bfd4      	ite	le
 801f1b8:	f1c1 0202 	rsble	r2, r1, #2
 801f1bc:	2201      	movgt	r2, #1
 801f1be:	4413      	add	r3, r2
 801f1c0:	e7e0      	b.n	801f184 <_printf_float+0x1a4>
 801f1c2:	6823      	ldr	r3, [r4, #0]
 801f1c4:	055a      	lsls	r2, r3, #21
 801f1c6:	d407      	bmi.n	801f1d8 <_printf_float+0x1f8>
 801f1c8:	6923      	ldr	r3, [r4, #16]
 801f1ca:	4642      	mov	r2, r8
 801f1cc:	4631      	mov	r1, r6
 801f1ce:	4628      	mov	r0, r5
 801f1d0:	47b8      	blx	r7
 801f1d2:	3001      	adds	r0, #1
 801f1d4:	d12c      	bne.n	801f230 <_printf_float+0x250>
 801f1d6:	e764      	b.n	801f0a2 <_printf_float+0xc2>
 801f1d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f1dc:	f240 80e0 	bls.w	801f3a0 <_printf_float+0x3c0>
 801f1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	2300      	movs	r3, #0
 801f1e8:	f7e1 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 801f1ec:	2800      	cmp	r0, #0
 801f1ee:	d034      	beq.n	801f25a <_printf_float+0x27a>
 801f1f0:	4a37      	ldr	r2, [pc, #220]	; (801f2d0 <_printf_float+0x2f0>)
 801f1f2:	2301      	movs	r3, #1
 801f1f4:	4631      	mov	r1, r6
 801f1f6:	4628      	mov	r0, r5
 801f1f8:	47b8      	blx	r7
 801f1fa:	3001      	adds	r0, #1
 801f1fc:	f43f af51 	beq.w	801f0a2 <_printf_float+0xc2>
 801f200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f204:	429a      	cmp	r2, r3
 801f206:	db02      	blt.n	801f20e <_printf_float+0x22e>
 801f208:	6823      	ldr	r3, [r4, #0]
 801f20a:	07d8      	lsls	r0, r3, #31
 801f20c:	d510      	bpl.n	801f230 <_printf_float+0x250>
 801f20e:	ee18 3a10 	vmov	r3, s16
 801f212:	4652      	mov	r2, sl
 801f214:	4631      	mov	r1, r6
 801f216:	4628      	mov	r0, r5
 801f218:	47b8      	blx	r7
 801f21a:	3001      	adds	r0, #1
 801f21c:	f43f af41 	beq.w	801f0a2 <_printf_float+0xc2>
 801f220:	f04f 0800 	mov.w	r8, #0
 801f224:	f104 091a 	add.w	r9, r4, #26
 801f228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f22a:	3b01      	subs	r3, #1
 801f22c:	4543      	cmp	r3, r8
 801f22e:	dc09      	bgt.n	801f244 <_printf_float+0x264>
 801f230:	6823      	ldr	r3, [r4, #0]
 801f232:	079b      	lsls	r3, r3, #30
 801f234:	f100 8105 	bmi.w	801f442 <_printf_float+0x462>
 801f238:	68e0      	ldr	r0, [r4, #12]
 801f23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f23c:	4298      	cmp	r0, r3
 801f23e:	bfb8      	it	lt
 801f240:	4618      	movlt	r0, r3
 801f242:	e730      	b.n	801f0a6 <_printf_float+0xc6>
 801f244:	2301      	movs	r3, #1
 801f246:	464a      	mov	r2, r9
 801f248:	4631      	mov	r1, r6
 801f24a:	4628      	mov	r0, r5
 801f24c:	47b8      	blx	r7
 801f24e:	3001      	adds	r0, #1
 801f250:	f43f af27 	beq.w	801f0a2 <_printf_float+0xc2>
 801f254:	f108 0801 	add.w	r8, r8, #1
 801f258:	e7e6      	b.n	801f228 <_printf_float+0x248>
 801f25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	dc39      	bgt.n	801f2d4 <_printf_float+0x2f4>
 801f260:	4a1b      	ldr	r2, [pc, #108]	; (801f2d0 <_printf_float+0x2f0>)
 801f262:	2301      	movs	r3, #1
 801f264:	4631      	mov	r1, r6
 801f266:	4628      	mov	r0, r5
 801f268:	47b8      	blx	r7
 801f26a:	3001      	adds	r0, #1
 801f26c:	f43f af19 	beq.w	801f0a2 <_printf_float+0xc2>
 801f270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f274:	4313      	orrs	r3, r2
 801f276:	d102      	bne.n	801f27e <_printf_float+0x29e>
 801f278:	6823      	ldr	r3, [r4, #0]
 801f27a:	07d9      	lsls	r1, r3, #31
 801f27c:	d5d8      	bpl.n	801f230 <_printf_float+0x250>
 801f27e:	ee18 3a10 	vmov	r3, s16
 801f282:	4652      	mov	r2, sl
 801f284:	4631      	mov	r1, r6
 801f286:	4628      	mov	r0, r5
 801f288:	47b8      	blx	r7
 801f28a:	3001      	adds	r0, #1
 801f28c:	f43f af09 	beq.w	801f0a2 <_printf_float+0xc2>
 801f290:	f04f 0900 	mov.w	r9, #0
 801f294:	f104 0a1a 	add.w	sl, r4, #26
 801f298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f29a:	425b      	negs	r3, r3
 801f29c:	454b      	cmp	r3, r9
 801f29e:	dc01      	bgt.n	801f2a4 <_printf_float+0x2c4>
 801f2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2a2:	e792      	b.n	801f1ca <_printf_float+0x1ea>
 801f2a4:	2301      	movs	r3, #1
 801f2a6:	4652      	mov	r2, sl
 801f2a8:	4631      	mov	r1, r6
 801f2aa:	4628      	mov	r0, r5
 801f2ac:	47b8      	blx	r7
 801f2ae:	3001      	adds	r0, #1
 801f2b0:	f43f aef7 	beq.w	801f0a2 <_printf_float+0xc2>
 801f2b4:	f109 0901 	add.w	r9, r9, #1
 801f2b8:	e7ee      	b.n	801f298 <_printf_float+0x2b8>
 801f2ba:	bf00      	nop
 801f2bc:	7fefffff 	.word	0x7fefffff
 801f2c0:	08024de0 	.word	0x08024de0
 801f2c4:	08024de4 	.word	0x08024de4
 801f2c8:	08024dec 	.word	0x08024dec
 801f2cc:	08024de8 	.word	0x08024de8
 801f2d0:	08024df0 	.word	0x08024df0
 801f2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f2d8:	429a      	cmp	r2, r3
 801f2da:	bfa8      	it	ge
 801f2dc:	461a      	movge	r2, r3
 801f2de:	2a00      	cmp	r2, #0
 801f2e0:	4691      	mov	r9, r2
 801f2e2:	dc37      	bgt.n	801f354 <_printf_float+0x374>
 801f2e4:	f04f 0b00 	mov.w	fp, #0
 801f2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f2ec:	f104 021a 	add.w	r2, r4, #26
 801f2f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f2f2:	9305      	str	r3, [sp, #20]
 801f2f4:	eba3 0309 	sub.w	r3, r3, r9
 801f2f8:	455b      	cmp	r3, fp
 801f2fa:	dc33      	bgt.n	801f364 <_printf_float+0x384>
 801f2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f300:	429a      	cmp	r2, r3
 801f302:	db3b      	blt.n	801f37c <_printf_float+0x39c>
 801f304:	6823      	ldr	r3, [r4, #0]
 801f306:	07da      	lsls	r2, r3, #31
 801f308:	d438      	bmi.n	801f37c <_printf_float+0x39c>
 801f30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f30c:	9b05      	ldr	r3, [sp, #20]
 801f30e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f310:	1ad3      	subs	r3, r2, r3
 801f312:	eba2 0901 	sub.w	r9, r2, r1
 801f316:	4599      	cmp	r9, r3
 801f318:	bfa8      	it	ge
 801f31a:	4699      	movge	r9, r3
 801f31c:	f1b9 0f00 	cmp.w	r9, #0
 801f320:	dc35      	bgt.n	801f38e <_printf_float+0x3ae>
 801f322:	f04f 0800 	mov.w	r8, #0
 801f326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f32a:	f104 0a1a 	add.w	sl, r4, #26
 801f32e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f332:	1a9b      	subs	r3, r3, r2
 801f334:	eba3 0309 	sub.w	r3, r3, r9
 801f338:	4543      	cmp	r3, r8
 801f33a:	f77f af79 	ble.w	801f230 <_printf_float+0x250>
 801f33e:	2301      	movs	r3, #1
 801f340:	4652      	mov	r2, sl
 801f342:	4631      	mov	r1, r6
 801f344:	4628      	mov	r0, r5
 801f346:	47b8      	blx	r7
 801f348:	3001      	adds	r0, #1
 801f34a:	f43f aeaa 	beq.w	801f0a2 <_printf_float+0xc2>
 801f34e:	f108 0801 	add.w	r8, r8, #1
 801f352:	e7ec      	b.n	801f32e <_printf_float+0x34e>
 801f354:	4613      	mov	r3, r2
 801f356:	4631      	mov	r1, r6
 801f358:	4642      	mov	r2, r8
 801f35a:	4628      	mov	r0, r5
 801f35c:	47b8      	blx	r7
 801f35e:	3001      	adds	r0, #1
 801f360:	d1c0      	bne.n	801f2e4 <_printf_float+0x304>
 801f362:	e69e      	b.n	801f0a2 <_printf_float+0xc2>
 801f364:	2301      	movs	r3, #1
 801f366:	4631      	mov	r1, r6
 801f368:	4628      	mov	r0, r5
 801f36a:	9205      	str	r2, [sp, #20]
 801f36c:	47b8      	blx	r7
 801f36e:	3001      	adds	r0, #1
 801f370:	f43f ae97 	beq.w	801f0a2 <_printf_float+0xc2>
 801f374:	9a05      	ldr	r2, [sp, #20]
 801f376:	f10b 0b01 	add.w	fp, fp, #1
 801f37a:	e7b9      	b.n	801f2f0 <_printf_float+0x310>
 801f37c:	ee18 3a10 	vmov	r3, s16
 801f380:	4652      	mov	r2, sl
 801f382:	4631      	mov	r1, r6
 801f384:	4628      	mov	r0, r5
 801f386:	47b8      	blx	r7
 801f388:	3001      	adds	r0, #1
 801f38a:	d1be      	bne.n	801f30a <_printf_float+0x32a>
 801f38c:	e689      	b.n	801f0a2 <_printf_float+0xc2>
 801f38e:	9a05      	ldr	r2, [sp, #20]
 801f390:	464b      	mov	r3, r9
 801f392:	4442      	add	r2, r8
 801f394:	4631      	mov	r1, r6
 801f396:	4628      	mov	r0, r5
 801f398:	47b8      	blx	r7
 801f39a:	3001      	adds	r0, #1
 801f39c:	d1c1      	bne.n	801f322 <_printf_float+0x342>
 801f39e:	e680      	b.n	801f0a2 <_printf_float+0xc2>
 801f3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f3a2:	2a01      	cmp	r2, #1
 801f3a4:	dc01      	bgt.n	801f3aa <_printf_float+0x3ca>
 801f3a6:	07db      	lsls	r3, r3, #31
 801f3a8:	d538      	bpl.n	801f41c <_printf_float+0x43c>
 801f3aa:	2301      	movs	r3, #1
 801f3ac:	4642      	mov	r2, r8
 801f3ae:	4631      	mov	r1, r6
 801f3b0:	4628      	mov	r0, r5
 801f3b2:	47b8      	blx	r7
 801f3b4:	3001      	adds	r0, #1
 801f3b6:	f43f ae74 	beq.w	801f0a2 <_printf_float+0xc2>
 801f3ba:	ee18 3a10 	vmov	r3, s16
 801f3be:	4652      	mov	r2, sl
 801f3c0:	4631      	mov	r1, r6
 801f3c2:	4628      	mov	r0, r5
 801f3c4:	47b8      	blx	r7
 801f3c6:	3001      	adds	r0, #1
 801f3c8:	f43f ae6b 	beq.w	801f0a2 <_printf_float+0xc2>
 801f3cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	f7e1 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 801f3d8:	b9d8      	cbnz	r0, 801f412 <_printf_float+0x432>
 801f3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f3dc:	f108 0201 	add.w	r2, r8, #1
 801f3e0:	3b01      	subs	r3, #1
 801f3e2:	4631      	mov	r1, r6
 801f3e4:	4628      	mov	r0, r5
 801f3e6:	47b8      	blx	r7
 801f3e8:	3001      	adds	r0, #1
 801f3ea:	d10e      	bne.n	801f40a <_printf_float+0x42a>
 801f3ec:	e659      	b.n	801f0a2 <_printf_float+0xc2>
 801f3ee:	2301      	movs	r3, #1
 801f3f0:	4652      	mov	r2, sl
 801f3f2:	4631      	mov	r1, r6
 801f3f4:	4628      	mov	r0, r5
 801f3f6:	47b8      	blx	r7
 801f3f8:	3001      	adds	r0, #1
 801f3fa:	f43f ae52 	beq.w	801f0a2 <_printf_float+0xc2>
 801f3fe:	f108 0801 	add.w	r8, r8, #1
 801f402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f404:	3b01      	subs	r3, #1
 801f406:	4543      	cmp	r3, r8
 801f408:	dcf1      	bgt.n	801f3ee <_printf_float+0x40e>
 801f40a:	464b      	mov	r3, r9
 801f40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f410:	e6dc      	b.n	801f1cc <_printf_float+0x1ec>
 801f412:	f04f 0800 	mov.w	r8, #0
 801f416:	f104 0a1a 	add.w	sl, r4, #26
 801f41a:	e7f2      	b.n	801f402 <_printf_float+0x422>
 801f41c:	2301      	movs	r3, #1
 801f41e:	4642      	mov	r2, r8
 801f420:	e7df      	b.n	801f3e2 <_printf_float+0x402>
 801f422:	2301      	movs	r3, #1
 801f424:	464a      	mov	r2, r9
 801f426:	4631      	mov	r1, r6
 801f428:	4628      	mov	r0, r5
 801f42a:	47b8      	blx	r7
 801f42c:	3001      	adds	r0, #1
 801f42e:	f43f ae38 	beq.w	801f0a2 <_printf_float+0xc2>
 801f432:	f108 0801 	add.w	r8, r8, #1
 801f436:	68e3      	ldr	r3, [r4, #12]
 801f438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f43a:	1a5b      	subs	r3, r3, r1
 801f43c:	4543      	cmp	r3, r8
 801f43e:	dcf0      	bgt.n	801f422 <_printf_float+0x442>
 801f440:	e6fa      	b.n	801f238 <_printf_float+0x258>
 801f442:	f04f 0800 	mov.w	r8, #0
 801f446:	f104 0919 	add.w	r9, r4, #25
 801f44a:	e7f4      	b.n	801f436 <_printf_float+0x456>

0801f44c <_printf_common>:
 801f44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f450:	4616      	mov	r6, r2
 801f452:	4699      	mov	r9, r3
 801f454:	688a      	ldr	r2, [r1, #8]
 801f456:	690b      	ldr	r3, [r1, #16]
 801f458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f45c:	4293      	cmp	r3, r2
 801f45e:	bfb8      	it	lt
 801f460:	4613      	movlt	r3, r2
 801f462:	6033      	str	r3, [r6, #0]
 801f464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f468:	4607      	mov	r7, r0
 801f46a:	460c      	mov	r4, r1
 801f46c:	b10a      	cbz	r2, 801f472 <_printf_common+0x26>
 801f46e:	3301      	adds	r3, #1
 801f470:	6033      	str	r3, [r6, #0]
 801f472:	6823      	ldr	r3, [r4, #0]
 801f474:	0699      	lsls	r1, r3, #26
 801f476:	bf42      	ittt	mi
 801f478:	6833      	ldrmi	r3, [r6, #0]
 801f47a:	3302      	addmi	r3, #2
 801f47c:	6033      	strmi	r3, [r6, #0]
 801f47e:	6825      	ldr	r5, [r4, #0]
 801f480:	f015 0506 	ands.w	r5, r5, #6
 801f484:	d106      	bne.n	801f494 <_printf_common+0x48>
 801f486:	f104 0a19 	add.w	sl, r4, #25
 801f48a:	68e3      	ldr	r3, [r4, #12]
 801f48c:	6832      	ldr	r2, [r6, #0]
 801f48e:	1a9b      	subs	r3, r3, r2
 801f490:	42ab      	cmp	r3, r5
 801f492:	dc26      	bgt.n	801f4e2 <_printf_common+0x96>
 801f494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f498:	1e13      	subs	r3, r2, #0
 801f49a:	6822      	ldr	r2, [r4, #0]
 801f49c:	bf18      	it	ne
 801f49e:	2301      	movne	r3, #1
 801f4a0:	0692      	lsls	r2, r2, #26
 801f4a2:	d42b      	bmi.n	801f4fc <_printf_common+0xb0>
 801f4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f4a8:	4649      	mov	r1, r9
 801f4aa:	4638      	mov	r0, r7
 801f4ac:	47c0      	blx	r8
 801f4ae:	3001      	adds	r0, #1
 801f4b0:	d01e      	beq.n	801f4f0 <_printf_common+0xa4>
 801f4b2:	6823      	ldr	r3, [r4, #0]
 801f4b4:	68e5      	ldr	r5, [r4, #12]
 801f4b6:	6832      	ldr	r2, [r6, #0]
 801f4b8:	f003 0306 	and.w	r3, r3, #6
 801f4bc:	2b04      	cmp	r3, #4
 801f4be:	bf08      	it	eq
 801f4c0:	1aad      	subeq	r5, r5, r2
 801f4c2:	68a3      	ldr	r3, [r4, #8]
 801f4c4:	6922      	ldr	r2, [r4, #16]
 801f4c6:	bf0c      	ite	eq
 801f4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f4cc:	2500      	movne	r5, #0
 801f4ce:	4293      	cmp	r3, r2
 801f4d0:	bfc4      	itt	gt
 801f4d2:	1a9b      	subgt	r3, r3, r2
 801f4d4:	18ed      	addgt	r5, r5, r3
 801f4d6:	2600      	movs	r6, #0
 801f4d8:	341a      	adds	r4, #26
 801f4da:	42b5      	cmp	r5, r6
 801f4dc:	d11a      	bne.n	801f514 <_printf_common+0xc8>
 801f4de:	2000      	movs	r0, #0
 801f4e0:	e008      	b.n	801f4f4 <_printf_common+0xa8>
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	4652      	mov	r2, sl
 801f4e6:	4649      	mov	r1, r9
 801f4e8:	4638      	mov	r0, r7
 801f4ea:	47c0      	blx	r8
 801f4ec:	3001      	adds	r0, #1
 801f4ee:	d103      	bne.n	801f4f8 <_printf_common+0xac>
 801f4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4f8:	3501      	adds	r5, #1
 801f4fa:	e7c6      	b.n	801f48a <_printf_common+0x3e>
 801f4fc:	18e1      	adds	r1, r4, r3
 801f4fe:	1c5a      	adds	r2, r3, #1
 801f500:	2030      	movs	r0, #48	; 0x30
 801f502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f506:	4422      	add	r2, r4
 801f508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f510:	3302      	adds	r3, #2
 801f512:	e7c7      	b.n	801f4a4 <_printf_common+0x58>
 801f514:	2301      	movs	r3, #1
 801f516:	4622      	mov	r2, r4
 801f518:	4649      	mov	r1, r9
 801f51a:	4638      	mov	r0, r7
 801f51c:	47c0      	blx	r8
 801f51e:	3001      	adds	r0, #1
 801f520:	d0e6      	beq.n	801f4f0 <_printf_common+0xa4>
 801f522:	3601      	adds	r6, #1
 801f524:	e7d9      	b.n	801f4da <_printf_common+0x8e>
	...

0801f528 <_printf_i>:
 801f528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f52c:	460c      	mov	r4, r1
 801f52e:	4691      	mov	r9, r2
 801f530:	7e27      	ldrb	r7, [r4, #24]
 801f532:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f534:	2f78      	cmp	r7, #120	; 0x78
 801f536:	4680      	mov	r8, r0
 801f538:	469a      	mov	sl, r3
 801f53a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f53e:	d807      	bhi.n	801f550 <_printf_i+0x28>
 801f540:	2f62      	cmp	r7, #98	; 0x62
 801f542:	d80a      	bhi.n	801f55a <_printf_i+0x32>
 801f544:	2f00      	cmp	r7, #0
 801f546:	f000 80d8 	beq.w	801f6fa <_printf_i+0x1d2>
 801f54a:	2f58      	cmp	r7, #88	; 0x58
 801f54c:	f000 80a3 	beq.w	801f696 <_printf_i+0x16e>
 801f550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f558:	e03a      	b.n	801f5d0 <_printf_i+0xa8>
 801f55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f55e:	2b15      	cmp	r3, #21
 801f560:	d8f6      	bhi.n	801f550 <_printf_i+0x28>
 801f562:	a001      	add	r0, pc, #4	; (adr r0, 801f568 <_printf_i+0x40>)
 801f564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f568:	0801f5c1 	.word	0x0801f5c1
 801f56c:	0801f5d5 	.word	0x0801f5d5
 801f570:	0801f551 	.word	0x0801f551
 801f574:	0801f551 	.word	0x0801f551
 801f578:	0801f551 	.word	0x0801f551
 801f57c:	0801f551 	.word	0x0801f551
 801f580:	0801f5d5 	.word	0x0801f5d5
 801f584:	0801f551 	.word	0x0801f551
 801f588:	0801f551 	.word	0x0801f551
 801f58c:	0801f551 	.word	0x0801f551
 801f590:	0801f551 	.word	0x0801f551
 801f594:	0801f6e1 	.word	0x0801f6e1
 801f598:	0801f605 	.word	0x0801f605
 801f59c:	0801f6c3 	.word	0x0801f6c3
 801f5a0:	0801f551 	.word	0x0801f551
 801f5a4:	0801f551 	.word	0x0801f551
 801f5a8:	0801f703 	.word	0x0801f703
 801f5ac:	0801f551 	.word	0x0801f551
 801f5b0:	0801f605 	.word	0x0801f605
 801f5b4:	0801f551 	.word	0x0801f551
 801f5b8:	0801f551 	.word	0x0801f551
 801f5bc:	0801f6cb 	.word	0x0801f6cb
 801f5c0:	680b      	ldr	r3, [r1, #0]
 801f5c2:	1d1a      	adds	r2, r3, #4
 801f5c4:	681b      	ldr	r3, [r3, #0]
 801f5c6:	600a      	str	r2, [r1, #0]
 801f5c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f5d0:	2301      	movs	r3, #1
 801f5d2:	e0a3      	b.n	801f71c <_printf_i+0x1f4>
 801f5d4:	6825      	ldr	r5, [r4, #0]
 801f5d6:	6808      	ldr	r0, [r1, #0]
 801f5d8:	062e      	lsls	r6, r5, #24
 801f5da:	f100 0304 	add.w	r3, r0, #4
 801f5de:	d50a      	bpl.n	801f5f6 <_printf_i+0xce>
 801f5e0:	6805      	ldr	r5, [r0, #0]
 801f5e2:	600b      	str	r3, [r1, #0]
 801f5e4:	2d00      	cmp	r5, #0
 801f5e6:	da03      	bge.n	801f5f0 <_printf_i+0xc8>
 801f5e8:	232d      	movs	r3, #45	; 0x2d
 801f5ea:	426d      	negs	r5, r5
 801f5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f5f0:	485e      	ldr	r0, [pc, #376]	; (801f76c <_printf_i+0x244>)
 801f5f2:	230a      	movs	r3, #10
 801f5f4:	e019      	b.n	801f62a <_printf_i+0x102>
 801f5f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801f5fa:	6805      	ldr	r5, [r0, #0]
 801f5fc:	600b      	str	r3, [r1, #0]
 801f5fe:	bf18      	it	ne
 801f600:	b22d      	sxthne	r5, r5
 801f602:	e7ef      	b.n	801f5e4 <_printf_i+0xbc>
 801f604:	680b      	ldr	r3, [r1, #0]
 801f606:	6825      	ldr	r5, [r4, #0]
 801f608:	1d18      	adds	r0, r3, #4
 801f60a:	6008      	str	r0, [r1, #0]
 801f60c:	0628      	lsls	r0, r5, #24
 801f60e:	d501      	bpl.n	801f614 <_printf_i+0xec>
 801f610:	681d      	ldr	r5, [r3, #0]
 801f612:	e002      	b.n	801f61a <_printf_i+0xf2>
 801f614:	0669      	lsls	r1, r5, #25
 801f616:	d5fb      	bpl.n	801f610 <_printf_i+0xe8>
 801f618:	881d      	ldrh	r5, [r3, #0]
 801f61a:	4854      	ldr	r0, [pc, #336]	; (801f76c <_printf_i+0x244>)
 801f61c:	2f6f      	cmp	r7, #111	; 0x6f
 801f61e:	bf0c      	ite	eq
 801f620:	2308      	moveq	r3, #8
 801f622:	230a      	movne	r3, #10
 801f624:	2100      	movs	r1, #0
 801f626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f62a:	6866      	ldr	r6, [r4, #4]
 801f62c:	60a6      	str	r6, [r4, #8]
 801f62e:	2e00      	cmp	r6, #0
 801f630:	bfa2      	ittt	ge
 801f632:	6821      	ldrge	r1, [r4, #0]
 801f634:	f021 0104 	bicge.w	r1, r1, #4
 801f638:	6021      	strge	r1, [r4, #0]
 801f63a:	b90d      	cbnz	r5, 801f640 <_printf_i+0x118>
 801f63c:	2e00      	cmp	r6, #0
 801f63e:	d04d      	beq.n	801f6dc <_printf_i+0x1b4>
 801f640:	4616      	mov	r6, r2
 801f642:	fbb5 f1f3 	udiv	r1, r5, r3
 801f646:	fb03 5711 	mls	r7, r3, r1, r5
 801f64a:	5dc7      	ldrb	r7, [r0, r7]
 801f64c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f650:	462f      	mov	r7, r5
 801f652:	42bb      	cmp	r3, r7
 801f654:	460d      	mov	r5, r1
 801f656:	d9f4      	bls.n	801f642 <_printf_i+0x11a>
 801f658:	2b08      	cmp	r3, #8
 801f65a:	d10b      	bne.n	801f674 <_printf_i+0x14c>
 801f65c:	6823      	ldr	r3, [r4, #0]
 801f65e:	07df      	lsls	r7, r3, #31
 801f660:	d508      	bpl.n	801f674 <_printf_i+0x14c>
 801f662:	6923      	ldr	r3, [r4, #16]
 801f664:	6861      	ldr	r1, [r4, #4]
 801f666:	4299      	cmp	r1, r3
 801f668:	bfde      	ittt	le
 801f66a:	2330      	movle	r3, #48	; 0x30
 801f66c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f670:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801f674:	1b92      	subs	r2, r2, r6
 801f676:	6122      	str	r2, [r4, #16]
 801f678:	f8cd a000 	str.w	sl, [sp]
 801f67c:	464b      	mov	r3, r9
 801f67e:	aa03      	add	r2, sp, #12
 801f680:	4621      	mov	r1, r4
 801f682:	4640      	mov	r0, r8
 801f684:	f7ff fee2 	bl	801f44c <_printf_common>
 801f688:	3001      	adds	r0, #1
 801f68a:	d14c      	bne.n	801f726 <_printf_i+0x1fe>
 801f68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f690:	b004      	add	sp, #16
 801f692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f696:	4835      	ldr	r0, [pc, #212]	; (801f76c <_printf_i+0x244>)
 801f698:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f69c:	6823      	ldr	r3, [r4, #0]
 801f69e:	680e      	ldr	r6, [r1, #0]
 801f6a0:	061f      	lsls	r7, r3, #24
 801f6a2:	f856 5b04 	ldr.w	r5, [r6], #4
 801f6a6:	600e      	str	r6, [r1, #0]
 801f6a8:	d514      	bpl.n	801f6d4 <_printf_i+0x1ac>
 801f6aa:	07d9      	lsls	r1, r3, #31
 801f6ac:	bf44      	itt	mi
 801f6ae:	f043 0320 	orrmi.w	r3, r3, #32
 801f6b2:	6023      	strmi	r3, [r4, #0]
 801f6b4:	b91d      	cbnz	r5, 801f6be <_printf_i+0x196>
 801f6b6:	6823      	ldr	r3, [r4, #0]
 801f6b8:	f023 0320 	bic.w	r3, r3, #32
 801f6bc:	6023      	str	r3, [r4, #0]
 801f6be:	2310      	movs	r3, #16
 801f6c0:	e7b0      	b.n	801f624 <_printf_i+0xfc>
 801f6c2:	6823      	ldr	r3, [r4, #0]
 801f6c4:	f043 0320 	orr.w	r3, r3, #32
 801f6c8:	6023      	str	r3, [r4, #0]
 801f6ca:	2378      	movs	r3, #120	; 0x78
 801f6cc:	4828      	ldr	r0, [pc, #160]	; (801f770 <_printf_i+0x248>)
 801f6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f6d2:	e7e3      	b.n	801f69c <_printf_i+0x174>
 801f6d4:	065e      	lsls	r6, r3, #25
 801f6d6:	bf48      	it	mi
 801f6d8:	b2ad      	uxthmi	r5, r5
 801f6da:	e7e6      	b.n	801f6aa <_printf_i+0x182>
 801f6dc:	4616      	mov	r6, r2
 801f6de:	e7bb      	b.n	801f658 <_printf_i+0x130>
 801f6e0:	680b      	ldr	r3, [r1, #0]
 801f6e2:	6826      	ldr	r6, [r4, #0]
 801f6e4:	6960      	ldr	r0, [r4, #20]
 801f6e6:	1d1d      	adds	r5, r3, #4
 801f6e8:	600d      	str	r5, [r1, #0]
 801f6ea:	0635      	lsls	r5, r6, #24
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	d501      	bpl.n	801f6f4 <_printf_i+0x1cc>
 801f6f0:	6018      	str	r0, [r3, #0]
 801f6f2:	e002      	b.n	801f6fa <_printf_i+0x1d2>
 801f6f4:	0671      	lsls	r1, r6, #25
 801f6f6:	d5fb      	bpl.n	801f6f0 <_printf_i+0x1c8>
 801f6f8:	8018      	strh	r0, [r3, #0]
 801f6fa:	2300      	movs	r3, #0
 801f6fc:	6123      	str	r3, [r4, #16]
 801f6fe:	4616      	mov	r6, r2
 801f700:	e7ba      	b.n	801f678 <_printf_i+0x150>
 801f702:	680b      	ldr	r3, [r1, #0]
 801f704:	1d1a      	adds	r2, r3, #4
 801f706:	600a      	str	r2, [r1, #0]
 801f708:	681e      	ldr	r6, [r3, #0]
 801f70a:	6862      	ldr	r2, [r4, #4]
 801f70c:	2100      	movs	r1, #0
 801f70e:	4630      	mov	r0, r6
 801f710:	f7e0 fd66 	bl	80001e0 <memchr>
 801f714:	b108      	cbz	r0, 801f71a <_printf_i+0x1f2>
 801f716:	1b80      	subs	r0, r0, r6
 801f718:	6060      	str	r0, [r4, #4]
 801f71a:	6863      	ldr	r3, [r4, #4]
 801f71c:	6123      	str	r3, [r4, #16]
 801f71e:	2300      	movs	r3, #0
 801f720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f724:	e7a8      	b.n	801f678 <_printf_i+0x150>
 801f726:	6923      	ldr	r3, [r4, #16]
 801f728:	4632      	mov	r2, r6
 801f72a:	4649      	mov	r1, r9
 801f72c:	4640      	mov	r0, r8
 801f72e:	47d0      	blx	sl
 801f730:	3001      	adds	r0, #1
 801f732:	d0ab      	beq.n	801f68c <_printf_i+0x164>
 801f734:	6823      	ldr	r3, [r4, #0]
 801f736:	079b      	lsls	r3, r3, #30
 801f738:	d413      	bmi.n	801f762 <_printf_i+0x23a>
 801f73a:	68e0      	ldr	r0, [r4, #12]
 801f73c:	9b03      	ldr	r3, [sp, #12]
 801f73e:	4298      	cmp	r0, r3
 801f740:	bfb8      	it	lt
 801f742:	4618      	movlt	r0, r3
 801f744:	e7a4      	b.n	801f690 <_printf_i+0x168>
 801f746:	2301      	movs	r3, #1
 801f748:	4632      	mov	r2, r6
 801f74a:	4649      	mov	r1, r9
 801f74c:	4640      	mov	r0, r8
 801f74e:	47d0      	blx	sl
 801f750:	3001      	adds	r0, #1
 801f752:	d09b      	beq.n	801f68c <_printf_i+0x164>
 801f754:	3501      	adds	r5, #1
 801f756:	68e3      	ldr	r3, [r4, #12]
 801f758:	9903      	ldr	r1, [sp, #12]
 801f75a:	1a5b      	subs	r3, r3, r1
 801f75c:	42ab      	cmp	r3, r5
 801f75e:	dcf2      	bgt.n	801f746 <_printf_i+0x21e>
 801f760:	e7eb      	b.n	801f73a <_printf_i+0x212>
 801f762:	2500      	movs	r5, #0
 801f764:	f104 0619 	add.w	r6, r4, #25
 801f768:	e7f5      	b.n	801f756 <_printf_i+0x22e>
 801f76a:	bf00      	nop
 801f76c:	08024df2 	.word	0x08024df2
 801f770:	08024e03 	.word	0x08024e03

0801f774 <_scanf_float>:
 801f774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f778:	b087      	sub	sp, #28
 801f77a:	4617      	mov	r7, r2
 801f77c:	9303      	str	r3, [sp, #12]
 801f77e:	688b      	ldr	r3, [r1, #8]
 801f780:	1e5a      	subs	r2, r3, #1
 801f782:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801f786:	bf83      	ittte	hi
 801f788:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801f78c:	195b      	addhi	r3, r3, r5
 801f78e:	9302      	strhi	r3, [sp, #8]
 801f790:	2300      	movls	r3, #0
 801f792:	bf86      	itte	hi
 801f794:	f240 135d 	movwhi	r3, #349	; 0x15d
 801f798:	608b      	strhi	r3, [r1, #8]
 801f79a:	9302      	strls	r3, [sp, #8]
 801f79c:	680b      	ldr	r3, [r1, #0]
 801f79e:	468b      	mov	fp, r1
 801f7a0:	2500      	movs	r5, #0
 801f7a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801f7a6:	f84b 3b1c 	str.w	r3, [fp], #28
 801f7aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801f7ae:	4680      	mov	r8, r0
 801f7b0:	460c      	mov	r4, r1
 801f7b2:	465e      	mov	r6, fp
 801f7b4:	46aa      	mov	sl, r5
 801f7b6:	46a9      	mov	r9, r5
 801f7b8:	9501      	str	r5, [sp, #4]
 801f7ba:	68a2      	ldr	r2, [r4, #8]
 801f7bc:	b152      	cbz	r2, 801f7d4 <_scanf_float+0x60>
 801f7be:	683b      	ldr	r3, [r7, #0]
 801f7c0:	781b      	ldrb	r3, [r3, #0]
 801f7c2:	2b4e      	cmp	r3, #78	; 0x4e
 801f7c4:	d864      	bhi.n	801f890 <_scanf_float+0x11c>
 801f7c6:	2b40      	cmp	r3, #64	; 0x40
 801f7c8:	d83c      	bhi.n	801f844 <_scanf_float+0xd0>
 801f7ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801f7ce:	b2c8      	uxtb	r0, r1
 801f7d0:	280e      	cmp	r0, #14
 801f7d2:	d93a      	bls.n	801f84a <_scanf_float+0xd6>
 801f7d4:	f1b9 0f00 	cmp.w	r9, #0
 801f7d8:	d003      	beq.n	801f7e2 <_scanf_float+0x6e>
 801f7da:	6823      	ldr	r3, [r4, #0]
 801f7dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f7e0:	6023      	str	r3, [r4, #0]
 801f7e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f7e6:	f1ba 0f01 	cmp.w	sl, #1
 801f7ea:	f200 8113 	bhi.w	801fa14 <_scanf_float+0x2a0>
 801f7ee:	455e      	cmp	r6, fp
 801f7f0:	f200 8105 	bhi.w	801f9fe <_scanf_float+0x28a>
 801f7f4:	2501      	movs	r5, #1
 801f7f6:	4628      	mov	r0, r5
 801f7f8:	b007      	add	sp, #28
 801f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f7fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801f802:	2a0d      	cmp	r2, #13
 801f804:	d8e6      	bhi.n	801f7d4 <_scanf_float+0x60>
 801f806:	a101      	add	r1, pc, #4	; (adr r1, 801f80c <_scanf_float+0x98>)
 801f808:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801f80c:	0801f94b 	.word	0x0801f94b
 801f810:	0801f7d5 	.word	0x0801f7d5
 801f814:	0801f7d5 	.word	0x0801f7d5
 801f818:	0801f7d5 	.word	0x0801f7d5
 801f81c:	0801f9ab 	.word	0x0801f9ab
 801f820:	0801f983 	.word	0x0801f983
 801f824:	0801f7d5 	.word	0x0801f7d5
 801f828:	0801f7d5 	.word	0x0801f7d5
 801f82c:	0801f959 	.word	0x0801f959
 801f830:	0801f7d5 	.word	0x0801f7d5
 801f834:	0801f7d5 	.word	0x0801f7d5
 801f838:	0801f7d5 	.word	0x0801f7d5
 801f83c:	0801f7d5 	.word	0x0801f7d5
 801f840:	0801f911 	.word	0x0801f911
 801f844:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801f848:	e7db      	b.n	801f802 <_scanf_float+0x8e>
 801f84a:	290e      	cmp	r1, #14
 801f84c:	d8c2      	bhi.n	801f7d4 <_scanf_float+0x60>
 801f84e:	a001      	add	r0, pc, #4	; (adr r0, 801f854 <_scanf_float+0xe0>)
 801f850:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801f854:	0801f903 	.word	0x0801f903
 801f858:	0801f7d5 	.word	0x0801f7d5
 801f85c:	0801f903 	.word	0x0801f903
 801f860:	0801f997 	.word	0x0801f997
 801f864:	0801f7d5 	.word	0x0801f7d5
 801f868:	0801f8b1 	.word	0x0801f8b1
 801f86c:	0801f8ed 	.word	0x0801f8ed
 801f870:	0801f8ed 	.word	0x0801f8ed
 801f874:	0801f8ed 	.word	0x0801f8ed
 801f878:	0801f8ed 	.word	0x0801f8ed
 801f87c:	0801f8ed 	.word	0x0801f8ed
 801f880:	0801f8ed 	.word	0x0801f8ed
 801f884:	0801f8ed 	.word	0x0801f8ed
 801f888:	0801f8ed 	.word	0x0801f8ed
 801f88c:	0801f8ed 	.word	0x0801f8ed
 801f890:	2b6e      	cmp	r3, #110	; 0x6e
 801f892:	d809      	bhi.n	801f8a8 <_scanf_float+0x134>
 801f894:	2b60      	cmp	r3, #96	; 0x60
 801f896:	d8b2      	bhi.n	801f7fe <_scanf_float+0x8a>
 801f898:	2b54      	cmp	r3, #84	; 0x54
 801f89a:	d077      	beq.n	801f98c <_scanf_float+0x218>
 801f89c:	2b59      	cmp	r3, #89	; 0x59
 801f89e:	d199      	bne.n	801f7d4 <_scanf_float+0x60>
 801f8a0:	2d07      	cmp	r5, #7
 801f8a2:	d197      	bne.n	801f7d4 <_scanf_float+0x60>
 801f8a4:	2508      	movs	r5, #8
 801f8a6:	e029      	b.n	801f8fc <_scanf_float+0x188>
 801f8a8:	2b74      	cmp	r3, #116	; 0x74
 801f8aa:	d06f      	beq.n	801f98c <_scanf_float+0x218>
 801f8ac:	2b79      	cmp	r3, #121	; 0x79
 801f8ae:	e7f6      	b.n	801f89e <_scanf_float+0x12a>
 801f8b0:	6821      	ldr	r1, [r4, #0]
 801f8b2:	05c8      	lsls	r0, r1, #23
 801f8b4:	d51a      	bpl.n	801f8ec <_scanf_float+0x178>
 801f8b6:	9b02      	ldr	r3, [sp, #8]
 801f8b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801f8bc:	6021      	str	r1, [r4, #0]
 801f8be:	f109 0901 	add.w	r9, r9, #1
 801f8c2:	b11b      	cbz	r3, 801f8cc <_scanf_float+0x158>
 801f8c4:	3b01      	subs	r3, #1
 801f8c6:	3201      	adds	r2, #1
 801f8c8:	9302      	str	r3, [sp, #8]
 801f8ca:	60a2      	str	r2, [r4, #8]
 801f8cc:	68a3      	ldr	r3, [r4, #8]
 801f8ce:	3b01      	subs	r3, #1
 801f8d0:	60a3      	str	r3, [r4, #8]
 801f8d2:	6923      	ldr	r3, [r4, #16]
 801f8d4:	3301      	adds	r3, #1
 801f8d6:	6123      	str	r3, [r4, #16]
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	3b01      	subs	r3, #1
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	607b      	str	r3, [r7, #4]
 801f8e0:	f340 8084 	ble.w	801f9ec <_scanf_float+0x278>
 801f8e4:	683b      	ldr	r3, [r7, #0]
 801f8e6:	3301      	adds	r3, #1
 801f8e8:	603b      	str	r3, [r7, #0]
 801f8ea:	e766      	b.n	801f7ba <_scanf_float+0x46>
 801f8ec:	eb1a 0f05 	cmn.w	sl, r5
 801f8f0:	f47f af70 	bne.w	801f7d4 <_scanf_float+0x60>
 801f8f4:	6822      	ldr	r2, [r4, #0]
 801f8f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801f8fa:	6022      	str	r2, [r4, #0]
 801f8fc:	f806 3b01 	strb.w	r3, [r6], #1
 801f900:	e7e4      	b.n	801f8cc <_scanf_float+0x158>
 801f902:	6822      	ldr	r2, [r4, #0]
 801f904:	0610      	lsls	r0, r2, #24
 801f906:	f57f af65 	bpl.w	801f7d4 <_scanf_float+0x60>
 801f90a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801f90e:	e7f4      	b.n	801f8fa <_scanf_float+0x186>
 801f910:	f1ba 0f00 	cmp.w	sl, #0
 801f914:	d10e      	bne.n	801f934 <_scanf_float+0x1c0>
 801f916:	f1b9 0f00 	cmp.w	r9, #0
 801f91a:	d10e      	bne.n	801f93a <_scanf_float+0x1c6>
 801f91c:	6822      	ldr	r2, [r4, #0]
 801f91e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f922:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f926:	d108      	bne.n	801f93a <_scanf_float+0x1c6>
 801f928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f92c:	6022      	str	r2, [r4, #0]
 801f92e:	f04f 0a01 	mov.w	sl, #1
 801f932:	e7e3      	b.n	801f8fc <_scanf_float+0x188>
 801f934:	f1ba 0f02 	cmp.w	sl, #2
 801f938:	d055      	beq.n	801f9e6 <_scanf_float+0x272>
 801f93a:	2d01      	cmp	r5, #1
 801f93c:	d002      	beq.n	801f944 <_scanf_float+0x1d0>
 801f93e:	2d04      	cmp	r5, #4
 801f940:	f47f af48 	bne.w	801f7d4 <_scanf_float+0x60>
 801f944:	3501      	adds	r5, #1
 801f946:	b2ed      	uxtb	r5, r5
 801f948:	e7d8      	b.n	801f8fc <_scanf_float+0x188>
 801f94a:	f1ba 0f01 	cmp.w	sl, #1
 801f94e:	f47f af41 	bne.w	801f7d4 <_scanf_float+0x60>
 801f952:	f04f 0a02 	mov.w	sl, #2
 801f956:	e7d1      	b.n	801f8fc <_scanf_float+0x188>
 801f958:	b97d      	cbnz	r5, 801f97a <_scanf_float+0x206>
 801f95a:	f1b9 0f00 	cmp.w	r9, #0
 801f95e:	f47f af3c 	bne.w	801f7da <_scanf_float+0x66>
 801f962:	6822      	ldr	r2, [r4, #0]
 801f964:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801f968:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801f96c:	f47f af39 	bne.w	801f7e2 <_scanf_float+0x6e>
 801f970:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f974:	6022      	str	r2, [r4, #0]
 801f976:	2501      	movs	r5, #1
 801f978:	e7c0      	b.n	801f8fc <_scanf_float+0x188>
 801f97a:	2d03      	cmp	r5, #3
 801f97c:	d0e2      	beq.n	801f944 <_scanf_float+0x1d0>
 801f97e:	2d05      	cmp	r5, #5
 801f980:	e7de      	b.n	801f940 <_scanf_float+0x1cc>
 801f982:	2d02      	cmp	r5, #2
 801f984:	f47f af26 	bne.w	801f7d4 <_scanf_float+0x60>
 801f988:	2503      	movs	r5, #3
 801f98a:	e7b7      	b.n	801f8fc <_scanf_float+0x188>
 801f98c:	2d06      	cmp	r5, #6
 801f98e:	f47f af21 	bne.w	801f7d4 <_scanf_float+0x60>
 801f992:	2507      	movs	r5, #7
 801f994:	e7b2      	b.n	801f8fc <_scanf_float+0x188>
 801f996:	6822      	ldr	r2, [r4, #0]
 801f998:	0591      	lsls	r1, r2, #22
 801f99a:	f57f af1b 	bpl.w	801f7d4 <_scanf_float+0x60>
 801f99e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801f9a2:	6022      	str	r2, [r4, #0]
 801f9a4:	f8cd 9004 	str.w	r9, [sp, #4]
 801f9a8:	e7a8      	b.n	801f8fc <_scanf_float+0x188>
 801f9aa:	6822      	ldr	r2, [r4, #0]
 801f9ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801f9b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801f9b4:	d006      	beq.n	801f9c4 <_scanf_float+0x250>
 801f9b6:	0550      	lsls	r0, r2, #21
 801f9b8:	f57f af0c 	bpl.w	801f7d4 <_scanf_float+0x60>
 801f9bc:	f1b9 0f00 	cmp.w	r9, #0
 801f9c0:	f43f af0f 	beq.w	801f7e2 <_scanf_float+0x6e>
 801f9c4:	0591      	lsls	r1, r2, #22
 801f9c6:	bf58      	it	pl
 801f9c8:	9901      	ldrpl	r1, [sp, #4]
 801f9ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801f9ce:	bf58      	it	pl
 801f9d0:	eba9 0101 	subpl.w	r1, r9, r1
 801f9d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801f9d8:	bf58      	it	pl
 801f9da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801f9de:	6022      	str	r2, [r4, #0]
 801f9e0:	f04f 0900 	mov.w	r9, #0
 801f9e4:	e78a      	b.n	801f8fc <_scanf_float+0x188>
 801f9e6:	f04f 0a03 	mov.w	sl, #3
 801f9ea:	e787      	b.n	801f8fc <_scanf_float+0x188>
 801f9ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f9f0:	4639      	mov	r1, r7
 801f9f2:	4640      	mov	r0, r8
 801f9f4:	4798      	blx	r3
 801f9f6:	2800      	cmp	r0, #0
 801f9f8:	f43f aedf 	beq.w	801f7ba <_scanf_float+0x46>
 801f9fc:	e6ea      	b.n	801f7d4 <_scanf_float+0x60>
 801f9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fa02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fa06:	463a      	mov	r2, r7
 801fa08:	4640      	mov	r0, r8
 801fa0a:	4798      	blx	r3
 801fa0c:	6923      	ldr	r3, [r4, #16]
 801fa0e:	3b01      	subs	r3, #1
 801fa10:	6123      	str	r3, [r4, #16]
 801fa12:	e6ec      	b.n	801f7ee <_scanf_float+0x7a>
 801fa14:	1e6b      	subs	r3, r5, #1
 801fa16:	2b06      	cmp	r3, #6
 801fa18:	d825      	bhi.n	801fa66 <_scanf_float+0x2f2>
 801fa1a:	2d02      	cmp	r5, #2
 801fa1c:	d836      	bhi.n	801fa8c <_scanf_float+0x318>
 801fa1e:	455e      	cmp	r6, fp
 801fa20:	f67f aee8 	bls.w	801f7f4 <_scanf_float+0x80>
 801fa24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fa28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fa2c:	463a      	mov	r2, r7
 801fa2e:	4640      	mov	r0, r8
 801fa30:	4798      	blx	r3
 801fa32:	6923      	ldr	r3, [r4, #16]
 801fa34:	3b01      	subs	r3, #1
 801fa36:	6123      	str	r3, [r4, #16]
 801fa38:	e7f1      	b.n	801fa1e <_scanf_float+0x2aa>
 801fa3a:	9802      	ldr	r0, [sp, #8]
 801fa3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fa40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801fa44:	9002      	str	r0, [sp, #8]
 801fa46:	463a      	mov	r2, r7
 801fa48:	4640      	mov	r0, r8
 801fa4a:	4798      	blx	r3
 801fa4c:	6923      	ldr	r3, [r4, #16]
 801fa4e:	3b01      	subs	r3, #1
 801fa50:	6123      	str	r3, [r4, #16]
 801fa52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801fa56:	fa5f fa8a 	uxtb.w	sl, sl
 801fa5a:	f1ba 0f02 	cmp.w	sl, #2
 801fa5e:	d1ec      	bne.n	801fa3a <_scanf_float+0x2c6>
 801fa60:	3d03      	subs	r5, #3
 801fa62:	b2ed      	uxtb	r5, r5
 801fa64:	1b76      	subs	r6, r6, r5
 801fa66:	6823      	ldr	r3, [r4, #0]
 801fa68:	05da      	lsls	r2, r3, #23
 801fa6a:	d52f      	bpl.n	801facc <_scanf_float+0x358>
 801fa6c:	055b      	lsls	r3, r3, #21
 801fa6e:	d510      	bpl.n	801fa92 <_scanf_float+0x31e>
 801fa70:	455e      	cmp	r6, fp
 801fa72:	f67f aebf 	bls.w	801f7f4 <_scanf_float+0x80>
 801fa76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fa7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801fa7e:	463a      	mov	r2, r7
 801fa80:	4640      	mov	r0, r8
 801fa82:	4798      	blx	r3
 801fa84:	6923      	ldr	r3, [r4, #16]
 801fa86:	3b01      	subs	r3, #1
 801fa88:	6123      	str	r3, [r4, #16]
 801fa8a:	e7f1      	b.n	801fa70 <_scanf_float+0x2fc>
 801fa8c:	46aa      	mov	sl, r5
 801fa8e:	9602      	str	r6, [sp, #8]
 801fa90:	e7df      	b.n	801fa52 <_scanf_float+0x2de>
 801fa92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801fa96:	6923      	ldr	r3, [r4, #16]
 801fa98:	2965      	cmp	r1, #101	; 0x65
 801fa9a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801fa9e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801faa2:	6123      	str	r3, [r4, #16]
 801faa4:	d00c      	beq.n	801fac0 <_scanf_float+0x34c>
 801faa6:	2945      	cmp	r1, #69	; 0x45
 801faa8:	d00a      	beq.n	801fac0 <_scanf_float+0x34c>
 801faaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801faae:	463a      	mov	r2, r7
 801fab0:	4640      	mov	r0, r8
 801fab2:	4798      	blx	r3
 801fab4:	6923      	ldr	r3, [r4, #16]
 801fab6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801faba:	3b01      	subs	r3, #1
 801fabc:	1eb5      	subs	r5, r6, #2
 801fabe:	6123      	str	r3, [r4, #16]
 801fac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801fac4:	463a      	mov	r2, r7
 801fac6:	4640      	mov	r0, r8
 801fac8:	4798      	blx	r3
 801faca:	462e      	mov	r6, r5
 801facc:	6825      	ldr	r5, [r4, #0]
 801face:	f015 0510 	ands.w	r5, r5, #16
 801fad2:	d158      	bne.n	801fb86 <_scanf_float+0x412>
 801fad4:	7035      	strb	r5, [r6, #0]
 801fad6:	6823      	ldr	r3, [r4, #0]
 801fad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801fadc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fae0:	d11c      	bne.n	801fb1c <_scanf_float+0x3a8>
 801fae2:	9b01      	ldr	r3, [sp, #4]
 801fae4:	454b      	cmp	r3, r9
 801fae6:	eba3 0209 	sub.w	r2, r3, r9
 801faea:	d124      	bne.n	801fb36 <_scanf_float+0x3c2>
 801faec:	2200      	movs	r2, #0
 801faee:	4659      	mov	r1, fp
 801faf0:	4640      	mov	r0, r8
 801faf2:	f000 ff8f 	bl	8020a14 <_strtod_r>
 801faf6:	9b03      	ldr	r3, [sp, #12]
 801faf8:	6821      	ldr	r1, [r4, #0]
 801fafa:	681b      	ldr	r3, [r3, #0]
 801fafc:	f011 0f02 	tst.w	r1, #2
 801fb00:	ec57 6b10 	vmov	r6, r7, d0
 801fb04:	f103 0204 	add.w	r2, r3, #4
 801fb08:	d020      	beq.n	801fb4c <_scanf_float+0x3d8>
 801fb0a:	9903      	ldr	r1, [sp, #12]
 801fb0c:	600a      	str	r2, [r1, #0]
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	e9c3 6700 	strd	r6, r7, [r3]
 801fb14:	68e3      	ldr	r3, [r4, #12]
 801fb16:	3301      	adds	r3, #1
 801fb18:	60e3      	str	r3, [r4, #12]
 801fb1a:	e66c      	b.n	801f7f6 <_scanf_float+0x82>
 801fb1c:	9b04      	ldr	r3, [sp, #16]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d0e4      	beq.n	801faec <_scanf_float+0x378>
 801fb22:	9905      	ldr	r1, [sp, #20]
 801fb24:	230a      	movs	r3, #10
 801fb26:	462a      	mov	r2, r5
 801fb28:	3101      	adds	r1, #1
 801fb2a:	4640      	mov	r0, r8
 801fb2c:	f000 fffc 	bl	8020b28 <_strtol_r>
 801fb30:	9b04      	ldr	r3, [sp, #16]
 801fb32:	9e05      	ldr	r6, [sp, #20]
 801fb34:	1ac2      	subs	r2, r0, r3
 801fb36:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801fb3a:	429e      	cmp	r6, r3
 801fb3c:	bf28      	it	cs
 801fb3e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801fb42:	4912      	ldr	r1, [pc, #72]	; (801fb8c <_scanf_float+0x418>)
 801fb44:	4630      	mov	r0, r6
 801fb46:	f000 f8db 	bl	801fd00 <siprintf>
 801fb4a:	e7cf      	b.n	801faec <_scanf_float+0x378>
 801fb4c:	f011 0f04 	tst.w	r1, #4
 801fb50:	9903      	ldr	r1, [sp, #12]
 801fb52:	600a      	str	r2, [r1, #0]
 801fb54:	d1db      	bne.n	801fb0e <_scanf_float+0x39a>
 801fb56:	f8d3 8000 	ldr.w	r8, [r3]
 801fb5a:	ee10 2a10 	vmov	r2, s0
 801fb5e:	ee10 0a10 	vmov	r0, s0
 801fb62:	463b      	mov	r3, r7
 801fb64:	4639      	mov	r1, r7
 801fb66:	f7e0 ffe1 	bl	8000b2c <__aeabi_dcmpun>
 801fb6a:	b128      	cbz	r0, 801fb78 <_scanf_float+0x404>
 801fb6c:	4808      	ldr	r0, [pc, #32]	; (801fb90 <_scanf_float+0x41c>)
 801fb6e:	f000 f84f 	bl	801fc10 <nanf>
 801fb72:	ed88 0a00 	vstr	s0, [r8]
 801fb76:	e7cd      	b.n	801fb14 <_scanf_float+0x3a0>
 801fb78:	4630      	mov	r0, r6
 801fb7a:	4639      	mov	r1, r7
 801fb7c:	f7e1 f834 	bl	8000be8 <__aeabi_d2f>
 801fb80:	f8c8 0000 	str.w	r0, [r8]
 801fb84:	e7c6      	b.n	801fb14 <_scanf_float+0x3a0>
 801fb86:	2500      	movs	r5, #0
 801fb88:	e635      	b.n	801f7f6 <_scanf_float+0x82>
 801fb8a:	bf00      	nop
 801fb8c:	08024e14 	.word	0x08024e14
 801fb90:	08025230 	.word	0x08025230

0801fb94 <realloc>:
 801fb94:	4b02      	ldr	r3, [pc, #8]	; (801fba0 <realloc+0xc>)
 801fb96:	460a      	mov	r2, r1
 801fb98:	4601      	mov	r1, r0
 801fb9a:	6818      	ldr	r0, [r3, #0]
 801fb9c:	f002 bece 	b.w	802293c <_realloc_r>
 801fba0:	200006c0 	.word	0x200006c0

0801fba4 <_sbrk_r>:
 801fba4:	b538      	push	{r3, r4, r5, lr}
 801fba6:	4d06      	ldr	r5, [pc, #24]	; (801fbc0 <_sbrk_r+0x1c>)
 801fba8:	2300      	movs	r3, #0
 801fbaa:	4604      	mov	r4, r0
 801fbac:	4608      	mov	r0, r1
 801fbae:	602b      	str	r3, [r5, #0]
 801fbb0:	f7ef f96e 	bl	800ee90 <_sbrk>
 801fbb4:	1c43      	adds	r3, r0, #1
 801fbb6:	d102      	bne.n	801fbbe <_sbrk_r+0x1a>
 801fbb8:	682b      	ldr	r3, [r5, #0]
 801fbba:	b103      	cbz	r3, 801fbbe <_sbrk_r+0x1a>
 801fbbc:	6023      	str	r3, [r4, #0]
 801fbbe:	bd38      	pop	{r3, r4, r5, pc}
 801fbc0:	2000ac78 	.word	0x2000ac78

0801fbc4 <ldexpf>:
 801fbc4:	b510      	push	{r4, lr}
 801fbc6:	ed2d 8b02 	vpush	{d8}
 801fbca:	4604      	mov	r4, r0
 801fbcc:	eeb0 8a40 	vmov.f32	s16, s0
 801fbd0:	f003 f852 	bl	8022c78 <finitef>
 801fbd4:	b1b8      	cbz	r0, 801fc06 <ldexpf+0x42>
 801fbd6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbde:	d012      	beq.n	801fc06 <ldexpf+0x42>
 801fbe0:	eeb0 0a48 	vmov.f32	s0, s16
 801fbe4:	4620      	mov	r0, r4
 801fbe6:	f000 f819 	bl	801fc1c <scalbnf>
 801fbea:	eeb0 8a40 	vmov.f32	s16, s0
 801fbee:	f003 f843 	bl	8022c78 <finitef>
 801fbf2:	b120      	cbz	r0, 801fbfe <ldexpf+0x3a>
 801fbf4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801fbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbfc:	d103      	bne.n	801fc06 <ldexpf+0x42>
 801fbfe:	f7ff f855 	bl	801ecac <__errno>
 801fc02:	2322      	movs	r3, #34	; 0x22
 801fc04:	6003      	str	r3, [r0, #0]
 801fc06:	eeb0 0a48 	vmov.f32	s0, s16
 801fc0a:	ecbd 8b02 	vpop	{d8}
 801fc0e:	bd10      	pop	{r4, pc}

0801fc10 <nanf>:
 801fc10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801fc18 <nanf+0x8>
 801fc14:	4770      	bx	lr
 801fc16:	bf00      	nop
 801fc18:	7fc00000 	.word	0x7fc00000

0801fc1c <scalbnf>:
 801fc1c:	ee10 3a10 	vmov	r3, s0
 801fc20:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801fc24:	d025      	beq.n	801fc72 <scalbnf+0x56>
 801fc26:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801fc2a:	d302      	bcc.n	801fc32 <scalbnf+0x16>
 801fc2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801fc30:	4770      	bx	lr
 801fc32:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801fc36:	d122      	bne.n	801fc7e <scalbnf+0x62>
 801fc38:	4b2a      	ldr	r3, [pc, #168]	; (801fce4 <scalbnf+0xc8>)
 801fc3a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801fce8 <scalbnf+0xcc>
 801fc3e:	4298      	cmp	r0, r3
 801fc40:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fc44:	db16      	blt.n	801fc74 <scalbnf+0x58>
 801fc46:	ee10 3a10 	vmov	r3, s0
 801fc4a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801fc4e:	3a19      	subs	r2, #25
 801fc50:	4402      	add	r2, r0
 801fc52:	2afe      	cmp	r2, #254	; 0xfe
 801fc54:	dd15      	ble.n	801fc82 <scalbnf+0x66>
 801fc56:	ee10 3a10 	vmov	r3, s0
 801fc5a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801fcec <scalbnf+0xd0>
 801fc5e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801fcf0 <scalbnf+0xd4>
 801fc62:	2b00      	cmp	r3, #0
 801fc64:	eeb0 7a67 	vmov.f32	s14, s15
 801fc68:	bfb8      	it	lt
 801fc6a:	eef0 7a66 	vmovlt.f32	s15, s13
 801fc6e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801fc72:	4770      	bx	lr
 801fc74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fcf4 <scalbnf+0xd8>
 801fc78:	ee20 0a27 	vmul.f32	s0, s0, s15
 801fc7c:	4770      	bx	lr
 801fc7e:	0dd2      	lsrs	r2, r2, #23
 801fc80:	e7e6      	b.n	801fc50 <scalbnf+0x34>
 801fc82:	2a00      	cmp	r2, #0
 801fc84:	dd06      	ble.n	801fc94 <scalbnf+0x78>
 801fc86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fc8a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801fc8e:	ee00 3a10 	vmov	s0, r3
 801fc92:	4770      	bx	lr
 801fc94:	f112 0f16 	cmn.w	r2, #22
 801fc98:	da1a      	bge.n	801fcd0 <scalbnf+0xb4>
 801fc9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801fc9e:	4298      	cmp	r0, r3
 801fca0:	ee10 3a10 	vmov	r3, s0
 801fca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801fca8:	dd0a      	ble.n	801fcc0 <scalbnf+0xa4>
 801fcaa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801fcec <scalbnf+0xd0>
 801fcae:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801fcf0 <scalbnf+0xd4>
 801fcb2:	eef0 7a40 	vmov.f32	s15, s0
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	bf18      	it	ne
 801fcba:	eeb0 0a47 	vmovne.f32	s0, s14
 801fcbe:	e7db      	b.n	801fc78 <scalbnf+0x5c>
 801fcc0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801fcf4 <scalbnf+0xd8>
 801fcc4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801fcf8 <scalbnf+0xdc>
 801fcc8:	eef0 7a40 	vmov.f32	s15, s0
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	e7f3      	b.n	801fcb8 <scalbnf+0x9c>
 801fcd0:	3219      	adds	r2, #25
 801fcd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fcd6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801fcda:	eddf 7a08 	vldr	s15, [pc, #32]	; 801fcfc <scalbnf+0xe0>
 801fcde:	ee07 3a10 	vmov	s14, r3
 801fce2:	e7c4      	b.n	801fc6e <scalbnf+0x52>
 801fce4:	ffff3cb0 	.word	0xffff3cb0
 801fce8:	4c000000 	.word	0x4c000000
 801fcec:	7149f2ca 	.word	0x7149f2ca
 801fcf0:	f149f2ca 	.word	0xf149f2ca
 801fcf4:	0da24260 	.word	0x0da24260
 801fcf8:	8da24260 	.word	0x8da24260
 801fcfc:	33000000 	.word	0x33000000

0801fd00 <siprintf>:
 801fd00:	b40e      	push	{r1, r2, r3}
 801fd02:	b500      	push	{lr}
 801fd04:	b09c      	sub	sp, #112	; 0x70
 801fd06:	ab1d      	add	r3, sp, #116	; 0x74
 801fd08:	9002      	str	r0, [sp, #8]
 801fd0a:	9006      	str	r0, [sp, #24]
 801fd0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801fd10:	4809      	ldr	r0, [pc, #36]	; (801fd38 <siprintf+0x38>)
 801fd12:	9107      	str	r1, [sp, #28]
 801fd14:	9104      	str	r1, [sp, #16]
 801fd16:	4909      	ldr	r1, [pc, #36]	; (801fd3c <siprintf+0x3c>)
 801fd18:	f853 2b04 	ldr.w	r2, [r3], #4
 801fd1c:	9105      	str	r1, [sp, #20]
 801fd1e:	6800      	ldr	r0, [r0, #0]
 801fd20:	9301      	str	r3, [sp, #4]
 801fd22:	a902      	add	r1, sp, #8
 801fd24:	f002 fe8c 	bl	8022a40 <_svfiprintf_r>
 801fd28:	9b02      	ldr	r3, [sp, #8]
 801fd2a:	2200      	movs	r2, #0
 801fd2c:	701a      	strb	r2, [r3, #0]
 801fd2e:	b01c      	add	sp, #112	; 0x70
 801fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 801fd34:	b003      	add	sp, #12
 801fd36:	4770      	bx	lr
 801fd38:	200006c0 	.word	0x200006c0
 801fd3c:	ffff0208 	.word	0xffff0208

0801fd40 <__sread>:
 801fd40:	b510      	push	{r4, lr}
 801fd42:	460c      	mov	r4, r1
 801fd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd48:	f002 ff7a 	bl	8022c40 <_read_r>
 801fd4c:	2800      	cmp	r0, #0
 801fd4e:	bfab      	itete	ge
 801fd50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fd52:	89a3      	ldrhlt	r3, [r4, #12]
 801fd54:	181b      	addge	r3, r3, r0
 801fd56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fd5a:	bfac      	ite	ge
 801fd5c:	6563      	strge	r3, [r4, #84]	; 0x54
 801fd5e:	81a3      	strhlt	r3, [r4, #12]
 801fd60:	bd10      	pop	{r4, pc}

0801fd62 <__swrite>:
 801fd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd66:	461f      	mov	r7, r3
 801fd68:	898b      	ldrh	r3, [r1, #12]
 801fd6a:	05db      	lsls	r3, r3, #23
 801fd6c:	4605      	mov	r5, r0
 801fd6e:	460c      	mov	r4, r1
 801fd70:	4616      	mov	r6, r2
 801fd72:	d505      	bpl.n	801fd80 <__swrite+0x1e>
 801fd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd78:	2302      	movs	r3, #2
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	f002 f8e4 	bl	8021f48 <_lseek_r>
 801fd80:	89a3      	ldrh	r3, [r4, #12]
 801fd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fd86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fd8a:	81a3      	strh	r3, [r4, #12]
 801fd8c:	4632      	mov	r2, r6
 801fd8e:	463b      	mov	r3, r7
 801fd90:	4628      	mov	r0, r5
 801fd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fd96:	f000 bec9 	b.w	8020b2c <_write_r>

0801fd9a <__sseek>:
 801fd9a:	b510      	push	{r4, lr}
 801fd9c:	460c      	mov	r4, r1
 801fd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fda2:	f002 f8d1 	bl	8021f48 <_lseek_r>
 801fda6:	1c43      	adds	r3, r0, #1
 801fda8:	89a3      	ldrh	r3, [r4, #12]
 801fdaa:	bf15      	itete	ne
 801fdac:	6560      	strne	r0, [r4, #84]	; 0x54
 801fdae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fdb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fdb6:	81a3      	strheq	r3, [r4, #12]
 801fdb8:	bf18      	it	ne
 801fdba:	81a3      	strhne	r3, [r4, #12]
 801fdbc:	bd10      	pop	{r4, pc}

0801fdbe <__sclose>:
 801fdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdc2:	f000 bec5 	b.w	8020b50 <_close_r>

0801fdc6 <sulp>:
 801fdc6:	b570      	push	{r4, r5, r6, lr}
 801fdc8:	4604      	mov	r4, r0
 801fdca:	460d      	mov	r5, r1
 801fdcc:	ec45 4b10 	vmov	d0, r4, r5
 801fdd0:	4616      	mov	r6, r2
 801fdd2:	f002 fc55 	bl	8022680 <__ulp>
 801fdd6:	ec51 0b10 	vmov	r0, r1, d0
 801fdda:	b17e      	cbz	r6, 801fdfc <sulp+0x36>
 801fddc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801fde0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	dd09      	ble.n	801fdfc <sulp+0x36>
 801fde8:	051b      	lsls	r3, r3, #20
 801fdea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801fdee:	2400      	movs	r4, #0
 801fdf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801fdf4:	4622      	mov	r2, r4
 801fdf6:	462b      	mov	r3, r5
 801fdf8:	f7e0 fbfe 	bl	80005f8 <__aeabi_dmul>
 801fdfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fe00 <_strtod_l>:
 801fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe04:	b0a3      	sub	sp, #140	; 0x8c
 801fe06:	461f      	mov	r7, r3
 801fe08:	2300      	movs	r3, #0
 801fe0a:	931e      	str	r3, [sp, #120]	; 0x78
 801fe0c:	4ba4      	ldr	r3, [pc, #656]	; (80200a0 <_strtod_l+0x2a0>)
 801fe0e:	9219      	str	r2, [sp, #100]	; 0x64
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	9307      	str	r3, [sp, #28]
 801fe14:	4604      	mov	r4, r0
 801fe16:	4618      	mov	r0, r3
 801fe18:	4688      	mov	r8, r1
 801fe1a:	f7e0 f9d9 	bl	80001d0 <strlen>
 801fe1e:	f04f 0a00 	mov.w	sl, #0
 801fe22:	4605      	mov	r5, r0
 801fe24:	f04f 0b00 	mov.w	fp, #0
 801fe28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801fe2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe2e:	781a      	ldrb	r2, [r3, #0]
 801fe30:	2a2b      	cmp	r2, #43	; 0x2b
 801fe32:	d04c      	beq.n	801fece <_strtod_l+0xce>
 801fe34:	d839      	bhi.n	801feaa <_strtod_l+0xaa>
 801fe36:	2a0d      	cmp	r2, #13
 801fe38:	d832      	bhi.n	801fea0 <_strtod_l+0xa0>
 801fe3a:	2a08      	cmp	r2, #8
 801fe3c:	d832      	bhi.n	801fea4 <_strtod_l+0xa4>
 801fe3e:	2a00      	cmp	r2, #0
 801fe40:	d03c      	beq.n	801febc <_strtod_l+0xbc>
 801fe42:	2300      	movs	r3, #0
 801fe44:	930e      	str	r3, [sp, #56]	; 0x38
 801fe46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801fe48:	7833      	ldrb	r3, [r6, #0]
 801fe4a:	2b30      	cmp	r3, #48	; 0x30
 801fe4c:	f040 80b4 	bne.w	801ffb8 <_strtod_l+0x1b8>
 801fe50:	7873      	ldrb	r3, [r6, #1]
 801fe52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801fe56:	2b58      	cmp	r3, #88	; 0x58
 801fe58:	d16c      	bne.n	801ff34 <_strtod_l+0x134>
 801fe5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe5c:	9301      	str	r3, [sp, #4]
 801fe5e:	ab1e      	add	r3, sp, #120	; 0x78
 801fe60:	9702      	str	r7, [sp, #8]
 801fe62:	9300      	str	r3, [sp, #0]
 801fe64:	4a8f      	ldr	r2, [pc, #572]	; (80200a4 <_strtod_l+0x2a4>)
 801fe66:	ab1f      	add	r3, sp, #124	; 0x7c
 801fe68:	a91d      	add	r1, sp, #116	; 0x74
 801fe6a:	4620      	mov	r0, r4
 801fe6c:	f001 fd60 	bl	8021930 <__gethex>
 801fe70:	f010 0707 	ands.w	r7, r0, #7
 801fe74:	4605      	mov	r5, r0
 801fe76:	d005      	beq.n	801fe84 <_strtod_l+0x84>
 801fe78:	2f06      	cmp	r7, #6
 801fe7a:	d12a      	bne.n	801fed2 <_strtod_l+0xd2>
 801fe7c:	3601      	adds	r6, #1
 801fe7e:	2300      	movs	r3, #0
 801fe80:	961d      	str	r6, [sp, #116]	; 0x74
 801fe82:	930e      	str	r3, [sp, #56]	; 0x38
 801fe84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fe86:	2b00      	cmp	r3, #0
 801fe88:	f040 8596 	bne.w	80209b8 <_strtod_l+0xbb8>
 801fe8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe8e:	b1db      	cbz	r3, 801fec8 <_strtod_l+0xc8>
 801fe90:	4652      	mov	r2, sl
 801fe92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801fe96:	ec43 2b10 	vmov	d0, r2, r3
 801fe9a:	b023      	add	sp, #140	; 0x8c
 801fe9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fea0:	2a20      	cmp	r2, #32
 801fea2:	d1ce      	bne.n	801fe42 <_strtod_l+0x42>
 801fea4:	3301      	adds	r3, #1
 801fea6:	931d      	str	r3, [sp, #116]	; 0x74
 801fea8:	e7c0      	b.n	801fe2c <_strtod_l+0x2c>
 801feaa:	2a2d      	cmp	r2, #45	; 0x2d
 801feac:	d1c9      	bne.n	801fe42 <_strtod_l+0x42>
 801feae:	2201      	movs	r2, #1
 801feb0:	920e      	str	r2, [sp, #56]	; 0x38
 801feb2:	1c5a      	adds	r2, r3, #1
 801feb4:	921d      	str	r2, [sp, #116]	; 0x74
 801feb6:	785b      	ldrb	r3, [r3, #1]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d1c4      	bne.n	801fe46 <_strtod_l+0x46>
 801febc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801febe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	f040 8576 	bne.w	80209b4 <_strtod_l+0xbb4>
 801fec8:	4652      	mov	r2, sl
 801feca:	465b      	mov	r3, fp
 801fecc:	e7e3      	b.n	801fe96 <_strtod_l+0x96>
 801fece:	2200      	movs	r2, #0
 801fed0:	e7ee      	b.n	801feb0 <_strtod_l+0xb0>
 801fed2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fed4:	b13a      	cbz	r2, 801fee6 <_strtod_l+0xe6>
 801fed6:	2135      	movs	r1, #53	; 0x35
 801fed8:	a820      	add	r0, sp, #128	; 0x80
 801feda:	f002 fcdc 	bl	8022896 <__copybits>
 801fede:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fee0:	4620      	mov	r0, r4
 801fee2:	f002 f8a1 	bl	8022028 <_Bfree>
 801fee6:	3f01      	subs	r7, #1
 801fee8:	2f05      	cmp	r7, #5
 801feea:	d807      	bhi.n	801fefc <_strtod_l+0xfc>
 801feec:	e8df f007 	tbb	[pc, r7]
 801fef0:	1d180b0e 	.word	0x1d180b0e
 801fef4:	030e      	.short	0x030e
 801fef6:	f04f 0b00 	mov.w	fp, #0
 801fefa:	46da      	mov	sl, fp
 801fefc:	0728      	lsls	r0, r5, #28
 801fefe:	d5c1      	bpl.n	801fe84 <_strtod_l+0x84>
 801ff00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801ff04:	e7be      	b.n	801fe84 <_strtod_l+0x84>
 801ff06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801ff0a:	e7f7      	b.n	801fefc <_strtod_l+0xfc>
 801ff0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801ff10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ff12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801ff16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ff1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ff1e:	e7ed      	b.n	801fefc <_strtod_l+0xfc>
 801ff20:	f8df b184 	ldr.w	fp, [pc, #388]	; 80200a8 <_strtod_l+0x2a8>
 801ff24:	f04f 0a00 	mov.w	sl, #0
 801ff28:	e7e8      	b.n	801fefc <_strtod_l+0xfc>
 801ff2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801ff2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ff32:	e7e3      	b.n	801fefc <_strtod_l+0xfc>
 801ff34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff36:	1c5a      	adds	r2, r3, #1
 801ff38:	921d      	str	r2, [sp, #116]	; 0x74
 801ff3a:	785b      	ldrb	r3, [r3, #1]
 801ff3c:	2b30      	cmp	r3, #48	; 0x30
 801ff3e:	d0f9      	beq.n	801ff34 <_strtod_l+0x134>
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d09f      	beq.n	801fe84 <_strtod_l+0x84>
 801ff44:	2301      	movs	r3, #1
 801ff46:	f04f 0900 	mov.w	r9, #0
 801ff4a:	9304      	str	r3, [sp, #16]
 801ff4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ff4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ff50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801ff54:	464f      	mov	r7, r9
 801ff56:	220a      	movs	r2, #10
 801ff58:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ff5a:	7806      	ldrb	r6, [r0, #0]
 801ff5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801ff60:	b2d9      	uxtb	r1, r3
 801ff62:	2909      	cmp	r1, #9
 801ff64:	d92a      	bls.n	801ffbc <_strtod_l+0x1bc>
 801ff66:	9907      	ldr	r1, [sp, #28]
 801ff68:	462a      	mov	r2, r5
 801ff6a:	f002 fe92 	bl	8022c92 <strncmp>
 801ff6e:	b398      	cbz	r0, 801ffd8 <_strtod_l+0x1d8>
 801ff70:	2000      	movs	r0, #0
 801ff72:	4633      	mov	r3, r6
 801ff74:	463d      	mov	r5, r7
 801ff76:	9007      	str	r0, [sp, #28]
 801ff78:	4602      	mov	r2, r0
 801ff7a:	2b65      	cmp	r3, #101	; 0x65
 801ff7c:	d001      	beq.n	801ff82 <_strtod_l+0x182>
 801ff7e:	2b45      	cmp	r3, #69	; 0x45
 801ff80:	d118      	bne.n	801ffb4 <_strtod_l+0x1b4>
 801ff82:	b91d      	cbnz	r5, 801ff8c <_strtod_l+0x18c>
 801ff84:	9b04      	ldr	r3, [sp, #16]
 801ff86:	4303      	orrs	r3, r0
 801ff88:	d098      	beq.n	801febc <_strtod_l+0xbc>
 801ff8a:	2500      	movs	r5, #0
 801ff8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801ff90:	f108 0301 	add.w	r3, r8, #1
 801ff94:	931d      	str	r3, [sp, #116]	; 0x74
 801ff96:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ff9a:	2b2b      	cmp	r3, #43	; 0x2b
 801ff9c:	d075      	beq.n	802008a <_strtod_l+0x28a>
 801ff9e:	2b2d      	cmp	r3, #45	; 0x2d
 801ffa0:	d07b      	beq.n	802009a <_strtod_l+0x29a>
 801ffa2:	f04f 0c00 	mov.w	ip, #0
 801ffa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ffaa:	2909      	cmp	r1, #9
 801ffac:	f240 8082 	bls.w	80200b4 <_strtod_l+0x2b4>
 801ffb0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801ffb4:	2600      	movs	r6, #0
 801ffb6:	e09d      	b.n	80200f4 <_strtod_l+0x2f4>
 801ffb8:	2300      	movs	r3, #0
 801ffba:	e7c4      	b.n	801ff46 <_strtod_l+0x146>
 801ffbc:	2f08      	cmp	r7, #8
 801ffbe:	bfd8      	it	le
 801ffc0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ffc2:	f100 0001 	add.w	r0, r0, #1
 801ffc6:	bfda      	itte	le
 801ffc8:	fb02 3301 	mlale	r3, r2, r1, r3
 801ffcc:	9309      	strle	r3, [sp, #36]	; 0x24
 801ffce:	fb02 3909 	mlagt	r9, r2, r9, r3
 801ffd2:	3701      	adds	r7, #1
 801ffd4:	901d      	str	r0, [sp, #116]	; 0x74
 801ffd6:	e7bf      	b.n	801ff58 <_strtod_l+0x158>
 801ffd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ffda:	195a      	adds	r2, r3, r5
 801ffdc:	921d      	str	r2, [sp, #116]	; 0x74
 801ffde:	5d5b      	ldrb	r3, [r3, r5]
 801ffe0:	2f00      	cmp	r7, #0
 801ffe2:	d037      	beq.n	8020054 <_strtod_l+0x254>
 801ffe4:	9007      	str	r0, [sp, #28]
 801ffe6:	463d      	mov	r5, r7
 801ffe8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801ffec:	2a09      	cmp	r2, #9
 801ffee:	d912      	bls.n	8020016 <_strtod_l+0x216>
 801fff0:	2201      	movs	r2, #1
 801fff2:	e7c2      	b.n	801ff7a <_strtod_l+0x17a>
 801fff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fff6:	1c5a      	adds	r2, r3, #1
 801fff8:	921d      	str	r2, [sp, #116]	; 0x74
 801fffa:	785b      	ldrb	r3, [r3, #1]
 801fffc:	3001      	adds	r0, #1
 801fffe:	2b30      	cmp	r3, #48	; 0x30
 8020000:	d0f8      	beq.n	801fff4 <_strtod_l+0x1f4>
 8020002:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8020006:	2a08      	cmp	r2, #8
 8020008:	f200 84db 	bhi.w	80209c2 <_strtod_l+0xbc2>
 802000c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802000e:	9007      	str	r0, [sp, #28]
 8020010:	2000      	movs	r0, #0
 8020012:	920a      	str	r2, [sp, #40]	; 0x28
 8020014:	4605      	mov	r5, r0
 8020016:	3b30      	subs	r3, #48	; 0x30
 8020018:	f100 0201 	add.w	r2, r0, #1
 802001c:	d014      	beq.n	8020048 <_strtod_l+0x248>
 802001e:	9907      	ldr	r1, [sp, #28]
 8020020:	4411      	add	r1, r2
 8020022:	9107      	str	r1, [sp, #28]
 8020024:	462a      	mov	r2, r5
 8020026:	eb00 0e05 	add.w	lr, r0, r5
 802002a:	210a      	movs	r1, #10
 802002c:	4572      	cmp	r2, lr
 802002e:	d113      	bne.n	8020058 <_strtod_l+0x258>
 8020030:	182a      	adds	r2, r5, r0
 8020032:	2a08      	cmp	r2, #8
 8020034:	f105 0501 	add.w	r5, r5, #1
 8020038:	4405      	add	r5, r0
 802003a:	dc1c      	bgt.n	8020076 <_strtod_l+0x276>
 802003c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802003e:	220a      	movs	r2, #10
 8020040:	fb02 3301 	mla	r3, r2, r1, r3
 8020044:	9309      	str	r3, [sp, #36]	; 0x24
 8020046:	2200      	movs	r2, #0
 8020048:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802004a:	1c59      	adds	r1, r3, #1
 802004c:	911d      	str	r1, [sp, #116]	; 0x74
 802004e:	785b      	ldrb	r3, [r3, #1]
 8020050:	4610      	mov	r0, r2
 8020052:	e7c9      	b.n	801ffe8 <_strtod_l+0x1e8>
 8020054:	4638      	mov	r0, r7
 8020056:	e7d2      	b.n	801fffe <_strtod_l+0x1fe>
 8020058:	2a08      	cmp	r2, #8
 802005a:	dc04      	bgt.n	8020066 <_strtod_l+0x266>
 802005c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 802005e:	434e      	muls	r6, r1
 8020060:	9609      	str	r6, [sp, #36]	; 0x24
 8020062:	3201      	adds	r2, #1
 8020064:	e7e2      	b.n	802002c <_strtod_l+0x22c>
 8020066:	f102 0c01 	add.w	ip, r2, #1
 802006a:	f1bc 0f10 	cmp.w	ip, #16
 802006e:	bfd8      	it	le
 8020070:	fb01 f909 	mulle.w	r9, r1, r9
 8020074:	e7f5      	b.n	8020062 <_strtod_l+0x262>
 8020076:	2d10      	cmp	r5, #16
 8020078:	bfdc      	itt	le
 802007a:	220a      	movle	r2, #10
 802007c:	fb02 3909 	mlale	r9, r2, r9, r3
 8020080:	e7e1      	b.n	8020046 <_strtod_l+0x246>
 8020082:	2300      	movs	r3, #0
 8020084:	9307      	str	r3, [sp, #28]
 8020086:	2201      	movs	r2, #1
 8020088:	e77c      	b.n	801ff84 <_strtod_l+0x184>
 802008a:	f04f 0c00 	mov.w	ip, #0
 802008e:	f108 0302 	add.w	r3, r8, #2
 8020092:	931d      	str	r3, [sp, #116]	; 0x74
 8020094:	f898 3002 	ldrb.w	r3, [r8, #2]
 8020098:	e785      	b.n	801ffa6 <_strtod_l+0x1a6>
 802009a:	f04f 0c01 	mov.w	ip, #1
 802009e:	e7f6      	b.n	802008e <_strtod_l+0x28e>
 80200a0:	08025070 	.word	0x08025070
 80200a4:	08024e1c 	.word	0x08024e1c
 80200a8:	7ff00000 	.word	0x7ff00000
 80200ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200ae:	1c59      	adds	r1, r3, #1
 80200b0:	911d      	str	r1, [sp, #116]	; 0x74
 80200b2:	785b      	ldrb	r3, [r3, #1]
 80200b4:	2b30      	cmp	r3, #48	; 0x30
 80200b6:	d0f9      	beq.n	80200ac <_strtod_l+0x2ac>
 80200b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80200bc:	2908      	cmp	r1, #8
 80200be:	f63f af79 	bhi.w	801ffb4 <_strtod_l+0x1b4>
 80200c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80200c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200c8:	9308      	str	r3, [sp, #32]
 80200ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200cc:	1c59      	adds	r1, r3, #1
 80200ce:	911d      	str	r1, [sp, #116]	; 0x74
 80200d0:	785b      	ldrb	r3, [r3, #1]
 80200d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80200d6:	2e09      	cmp	r6, #9
 80200d8:	d937      	bls.n	802014a <_strtod_l+0x34a>
 80200da:	9e08      	ldr	r6, [sp, #32]
 80200dc:	1b89      	subs	r1, r1, r6
 80200de:	2908      	cmp	r1, #8
 80200e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80200e4:	dc02      	bgt.n	80200ec <_strtod_l+0x2ec>
 80200e6:	4576      	cmp	r6, lr
 80200e8:	bfa8      	it	ge
 80200ea:	4676      	movge	r6, lr
 80200ec:	f1bc 0f00 	cmp.w	ip, #0
 80200f0:	d000      	beq.n	80200f4 <_strtod_l+0x2f4>
 80200f2:	4276      	negs	r6, r6
 80200f4:	2d00      	cmp	r5, #0
 80200f6:	d14f      	bne.n	8020198 <_strtod_l+0x398>
 80200f8:	9904      	ldr	r1, [sp, #16]
 80200fa:	4301      	orrs	r1, r0
 80200fc:	f47f aec2 	bne.w	801fe84 <_strtod_l+0x84>
 8020100:	2a00      	cmp	r2, #0
 8020102:	f47f aedb 	bne.w	801febc <_strtod_l+0xbc>
 8020106:	2b69      	cmp	r3, #105	; 0x69
 8020108:	d027      	beq.n	802015a <_strtod_l+0x35a>
 802010a:	dc24      	bgt.n	8020156 <_strtod_l+0x356>
 802010c:	2b49      	cmp	r3, #73	; 0x49
 802010e:	d024      	beq.n	802015a <_strtod_l+0x35a>
 8020110:	2b4e      	cmp	r3, #78	; 0x4e
 8020112:	f47f aed3 	bne.w	801febc <_strtod_l+0xbc>
 8020116:	499e      	ldr	r1, [pc, #632]	; (8020390 <_strtod_l+0x590>)
 8020118:	a81d      	add	r0, sp, #116	; 0x74
 802011a:	f001 fe61 	bl	8021de0 <__match>
 802011e:	2800      	cmp	r0, #0
 8020120:	f43f aecc 	beq.w	801febc <_strtod_l+0xbc>
 8020124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020126:	781b      	ldrb	r3, [r3, #0]
 8020128:	2b28      	cmp	r3, #40	; 0x28
 802012a:	d12d      	bne.n	8020188 <_strtod_l+0x388>
 802012c:	4999      	ldr	r1, [pc, #612]	; (8020394 <_strtod_l+0x594>)
 802012e:	aa20      	add	r2, sp, #128	; 0x80
 8020130:	a81d      	add	r0, sp, #116	; 0x74
 8020132:	f001 fe69 	bl	8021e08 <__hexnan>
 8020136:	2805      	cmp	r0, #5
 8020138:	d126      	bne.n	8020188 <_strtod_l+0x388>
 802013a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802013c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8020140:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8020144:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8020148:	e69c      	b.n	801fe84 <_strtod_l+0x84>
 802014a:	210a      	movs	r1, #10
 802014c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8020150:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8020154:	e7b9      	b.n	80200ca <_strtod_l+0x2ca>
 8020156:	2b6e      	cmp	r3, #110	; 0x6e
 8020158:	e7db      	b.n	8020112 <_strtod_l+0x312>
 802015a:	498f      	ldr	r1, [pc, #572]	; (8020398 <_strtod_l+0x598>)
 802015c:	a81d      	add	r0, sp, #116	; 0x74
 802015e:	f001 fe3f 	bl	8021de0 <__match>
 8020162:	2800      	cmp	r0, #0
 8020164:	f43f aeaa 	beq.w	801febc <_strtod_l+0xbc>
 8020168:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802016a:	498c      	ldr	r1, [pc, #560]	; (802039c <_strtod_l+0x59c>)
 802016c:	3b01      	subs	r3, #1
 802016e:	a81d      	add	r0, sp, #116	; 0x74
 8020170:	931d      	str	r3, [sp, #116]	; 0x74
 8020172:	f001 fe35 	bl	8021de0 <__match>
 8020176:	b910      	cbnz	r0, 802017e <_strtod_l+0x37e>
 8020178:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802017a:	3301      	adds	r3, #1
 802017c:	931d      	str	r3, [sp, #116]	; 0x74
 802017e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80203ac <_strtod_l+0x5ac>
 8020182:	f04f 0a00 	mov.w	sl, #0
 8020186:	e67d      	b.n	801fe84 <_strtod_l+0x84>
 8020188:	4885      	ldr	r0, [pc, #532]	; (80203a0 <_strtod_l+0x5a0>)
 802018a:	f002 fd6d 	bl	8022c68 <nan>
 802018e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8020192:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8020196:	e675      	b.n	801fe84 <_strtod_l+0x84>
 8020198:	9b07      	ldr	r3, [sp, #28]
 802019a:	9809      	ldr	r0, [sp, #36]	; 0x24
 802019c:	1af3      	subs	r3, r6, r3
 802019e:	2f00      	cmp	r7, #0
 80201a0:	bf08      	it	eq
 80201a2:	462f      	moveq	r7, r5
 80201a4:	2d10      	cmp	r5, #16
 80201a6:	9308      	str	r3, [sp, #32]
 80201a8:	46a8      	mov	r8, r5
 80201aa:	bfa8      	it	ge
 80201ac:	f04f 0810 	movge.w	r8, #16
 80201b0:	f7e0 f9a8 	bl	8000504 <__aeabi_ui2d>
 80201b4:	2d09      	cmp	r5, #9
 80201b6:	4682      	mov	sl, r0
 80201b8:	468b      	mov	fp, r1
 80201ba:	dd13      	ble.n	80201e4 <_strtod_l+0x3e4>
 80201bc:	4b79      	ldr	r3, [pc, #484]	; (80203a4 <_strtod_l+0x5a4>)
 80201be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80201c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80201c6:	f7e0 fa17 	bl	80005f8 <__aeabi_dmul>
 80201ca:	4682      	mov	sl, r0
 80201cc:	4648      	mov	r0, r9
 80201ce:	468b      	mov	fp, r1
 80201d0:	f7e0 f998 	bl	8000504 <__aeabi_ui2d>
 80201d4:	4602      	mov	r2, r0
 80201d6:	460b      	mov	r3, r1
 80201d8:	4650      	mov	r0, sl
 80201da:	4659      	mov	r1, fp
 80201dc:	f7e0 f856 	bl	800028c <__adddf3>
 80201e0:	4682      	mov	sl, r0
 80201e2:	468b      	mov	fp, r1
 80201e4:	2d0f      	cmp	r5, #15
 80201e6:	dc38      	bgt.n	802025a <_strtod_l+0x45a>
 80201e8:	9b08      	ldr	r3, [sp, #32]
 80201ea:	2b00      	cmp	r3, #0
 80201ec:	f43f ae4a 	beq.w	801fe84 <_strtod_l+0x84>
 80201f0:	dd24      	ble.n	802023c <_strtod_l+0x43c>
 80201f2:	2b16      	cmp	r3, #22
 80201f4:	dc0b      	bgt.n	802020e <_strtod_l+0x40e>
 80201f6:	4d6b      	ldr	r5, [pc, #428]	; (80203a4 <_strtod_l+0x5a4>)
 80201f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80201fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8020200:	4652      	mov	r2, sl
 8020202:	465b      	mov	r3, fp
 8020204:	f7e0 f9f8 	bl	80005f8 <__aeabi_dmul>
 8020208:	4682      	mov	sl, r0
 802020a:	468b      	mov	fp, r1
 802020c:	e63a      	b.n	801fe84 <_strtod_l+0x84>
 802020e:	9a08      	ldr	r2, [sp, #32]
 8020210:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8020214:	4293      	cmp	r3, r2
 8020216:	db20      	blt.n	802025a <_strtod_l+0x45a>
 8020218:	4c62      	ldr	r4, [pc, #392]	; (80203a4 <_strtod_l+0x5a4>)
 802021a:	f1c5 050f 	rsb	r5, r5, #15
 802021e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020222:	4652      	mov	r2, sl
 8020224:	465b      	mov	r3, fp
 8020226:	e9d1 0100 	ldrd	r0, r1, [r1]
 802022a:	f7e0 f9e5 	bl	80005f8 <__aeabi_dmul>
 802022e:	9b08      	ldr	r3, [sp, #32]
 8020230:	1b5d      	subs	r5, r3, r5
 8020232:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020236:	e9d4 2300 	ldrd	r2, r3, [r4]
 802023a:	e7e3      	b.n	8020204 <_strtod_l+0x404>
 802023c:	9b08      	ldr	r3, [sp, #32]
 802023e:	3316      	adds	r3, #22
 8020240:	db0b      	blt.n	802025a <_strtod_l+0x45a>
 8020242:	9b07      	ldr	r3, [sp, #28]
 8020244:	4a57      	ldr	r2, [pc, #348]	; (80203a4 <_strtod_l+0x5a4>)
 8020246:	1b9e      	subs	r6, r3, r6
 8020248:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 802024c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020250:	4650      	mov	r0, sl
 8020252:	4659      	mov	r1, fp
 8020254:	f7e0 fafa 	bl	800084c <__aeabi_ddiv>
 8020258:	e7d6      	b.n	8020208 <_strtod_l+0x408>
 802025a:	9b08      	ldr	r3, [sp, #32]
 802025c:	eba5 0808 	sub.w	r8, r5, r8
 8020260:	4498      	add	r8, r3
 8020262:	f1b8 0f00 	cmp.w	r8, #0
 8020266:	dd71      	ble.n	802034c <_strtod_l+0x54c>
 8020268:	f018 030f 	ands.w	r3, r8, #15
 802026c:	d00a      	beq.n	8020284 <_strtod_l+0x484>
 802026e:	494d      	ldr	r1, [pc, #308]	; (80203a4 <_strtod_l+0x5a4>)
 8020270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020274:	4652      	mov	r2, sl
 8020276:	465b      	mov	r3, fp
 8020278:	e9d1 0100 	ldrd	r0, r1, [r1]
 802027c:	f7e0 f9bc 	bl	80005f8 <__aeabi_dmul>
 8020280:	4682      	mov	sl, r0
 8020282:	468b      	mov	fp, r1
 8020284:	f038 080f 	bics.w	r8, r8, #15
 8020288:	d04d      	beq.n	8020326 <_strtod_l+0x526>
 802028a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 802028e:	dd22      	ble.n	80202d6 <_strtod_l+0x4d6>
 8020290:	2500      	movs	r5, #0
 8020292:	462e      	mov	r6, r5
 8020294:	9509      	str	r5, [sp, #36]	; 0x24
 8020296:	9507      	str	r5, [sp, #28]
 8020298:	2322      	movs	r3, #34	; 0x22
 802029a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80203ac <_strtod_l+0x5ac>
 802029e:	6023      	str	r3, [r4, #0]
 80202a0:	f04f 0a00 	mov.w	sl, #0
 80202a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	f43f adec 	beq.w	801fe84 <_strtod_l+0x84>
 80202ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80202ae:	4620      	mov	r0, r4
 80202b0:	f001 feba 	bl	8022028 <_Bfree>
 80202b4:	9907      	ldr	r1, [sp, #28]
 80202b6:	4620      	mov	r0, r4
 80202b8:	f001 feb6 	bl	8022028 <_Bfree>
 80202bc:	4631      	mov	r1, r6
 80202be:	4620      	mov	r0, r4
 80202c0:	f001 feb2 	bl	8022028 <_Bfree>
 80202c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80202c6:	4620      	mov	r0, r4
 80202c8:	f001 feae 	bl	8022028 <_Bfree>
 80202cc:	4629      	mov	r1, r5
 80202ce:	4620      	mov	r0, r4
 80202d0:	f001 feaa 	bl	8022028 <_Bfree>
 80202d4:	e5d6      	b.n	801fe84 <_strtod_l+0x84>
 80202d6:	2300      	movs	r3, #0
 80202d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80202dc:	4650      	mov	r0, sl
 80202de:	4659      	mov	r1, fp
 80202e0:	4699      	mov	r9, r3
 80202e2:	f1b8 0f01 	cmp.w	r8, #1
 80202e6:	dc21      	bgt.n	802032c <_strtod_l+0x52c>
 80202e8:	b10b      	cbz	r3, 80202ee <_strtod_l+0x4ee>
 80202ea:	4682      	mov	sl, r0
 80202ec:	468b      	mov	fp, r1
 80202ee:	4b2e      	ldr	r3, [pc, #184]	; (80203a8 <_strtod_l+0x5a8>)
 80202f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80202f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80202f8:	4652      	mov	r2, sl
 80202fa:	465b      	mov	r3, fp
 80202fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8020300:	f7e0 f97a 	bl	80005f8 <__aeabi_dmul>
 8020304:	4b29      	ldr	r3, [pc, #164]	; (80203ac <_strtod_l+0x5ac>)
 8020306:	460a      	mov	r2, r1
 8020308:	400b      	ands	r3, r1
 802030a:	4929      	ldr	r1, [pc, #164]	; (80203b0 <_strtod_l+0x5b0>)
 802030c:	428b      	cmp	r3, r1
 802030e:	4682      	mov	sl, r0
 8020310:	d8be      	bhi.n	8020290 <_strtod_l+0x490>
 8020312:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8020316:	428b      	cmp	r3, r1
 8020318:	bf86      	itte	hi
 802031a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80203b4 <_strtod_l+0x5b4>
 802031e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8020322:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8020326:	2300      	movs	r3, #0
 8020328:	9304      	str	r3, [sp, #16]
 802032a:	e081      	b.n	8020430 <_strtod_l+0x630>
 802032c:	f018 0f01 	tst.w	r8, #1
 8020330:	d007      	beq.n	8020342 <_strtod_l+0x542>
 8020332:	4b1d      	ldr	r3, [pc, #116]	; (80203a8 <_strtod_l+0x5a8>)
 8020334:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8020338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802033c:	f7e0 f95c 	bl	80005f8 <__aeabi_dmul>
 8020340:	2301      	movs	r3, #1
 8020342:	f109 0901 	add.w	r9, r9, #1
 8020346:	ea4f 0868 	mov.w	r8, r8, asr #1
 802034a:	e7ca      	b.n	80202e2 <_strtod_l+0x4e2>
 802034c:	d0eb      	beq.n	8020326 <_strtod_l+0x526>
 802034e:	f1c8 0800 	rsb	r8, r8, #0
 8020352:	f018 020f 	ands.w	r2, r8, #15
 8020356:	d00a      	beq.n	802036e <_strtod_l+0x56e>
 8020358:	4b12      	ldr	r3, [pc, #72]	; (80203a4 <_strtod_l+0x5a4>)
 802035a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802035e:	4650      	mov	r0, sl
 8020360:	4659      	mov	r1, fp
 8020362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020366:	f7e0 fa71 	bl	800084c <__aeabi_ddiv>
 802036a:	4682      	mov	sl, r0
 802036c:	468b      	mov	fp, r1
 802036e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8020372:	d0d8      	beq.n	8020326 <_strtod_l+0x526>
 8020374:	f1b8 0f1f 	cmp.w	r8, #31
 8020378:	dd1e      	ble.n	80203b8 <_strtod_l+0x5b8>
 802037a:	2500      	movs	r5, #0
 802037c:	462e      	mov	r6, r5
 802037e:	9509      	str	r5, [sp, #36]	; 0x24
 8020380:	9507      	str	r5, [sp, #28]
 8020382:	2322      	movs	r3, #34	; 0x22
 8020384:	f04f 0a00 	mov.w	sl, #0
 8020388:	f04f 0b00 	mov.w	fp, #0
 802038c:	6023      	str	r3, [r4, #0]
 802038e:	e789      	b.n	80202a4 <_strtod_l+0x4a4>
 8020390:	08024ded 	.word	0x08024ded
 8020394:	08024e30 	.word	0x08024e30
 8020398:	08024de5 	.word	0x08024de5
 802039c:	08024f74 	.word	0x08024f74
 80203a0:	08025230 	.word	0x08025230
 80203a4:	08025110 	.word	0x08025110
 80203a8:	080250e8 	.word	0x080250e8
 80203ac:	7ff00000 	.word	0x7ff00000
 80203b0:	7ca00000 	.word	0x7ca00000
 80203b4:	7fefffff 	.word	0x7fefffff
 80203b8:	f018 0310 	ands.w	r3, r8, #16
 80203bc:	bf18      	it	ne
 80203be:	236a      	movne	r3, #106	; 0x6a
 80203c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8020778 <_strtod_l+0x978>
 80203c4:	9304      	str	r3, [sp, #16]
 80203c6:	4650      	mov	r0, sl
 80203c8:	4659      	mov	r1, fp
 80203ca:	2300      	movs	r3, #0
 80203cc:	f018 0f01 	tst.w	r8, #1
 80203d0:	d004      	beq.n	80203dc <_strtod_l+0x5dc>
 80203d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80203d6:	f7e0 f90f 	bl	80005f8 <__aeabi_dmul>
 80203da:	2301      	movs	r3, #1
 80203dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80203e0:	f109 0908 	add.w	r9, r9, #8
 80203e4:	d1f2      	bne.n	80203cc <_strtod_l+0x5cc>
 80203e6:	b10b      	cbz	r3, 80203ec <_strtod_l+0x5ec>
 80203e8:	4682      	mov	sl, r0
 80203ea:	468b      	mov	fp, r1
 80203ec:	9b04      	ldr	r3, [sp, #16]
 80203ee:	b1bb      	cbz	r3, 8020420 <_strtod_l+0x620>
 80203f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80203f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	4659      	mov	r1, fp
 80203fc:	dd10      	ble.n	8020420 <_strtod_l+0x620>
 80203fe:	2b1f      	cmp	r3, #31
 8020400:	f340 8128 	ble.w	8020654 <_strtod_l+0x854>
 8020404:	2b34      	cmp	r3, #52	; 0x34
 8020406:	bfde      	ittt	le
 8020408:	3b20      	suble	r3, #32
 802040a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 802040e:	fa02 f303 	lslle.w	r3, r2, r3
 8020412:	f04f 0a00 	mov.w	sl, #0
 8020416:	bfcc      	ite	gt
 8020418:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 802041c:	ea03 0b01 	andle.w	fp, r3, r1
 8020420:	2200      	movs	r2, #0
 8020422:	2300      	movs	r3, #0
 8020424:	4650      	mov	r0, sl
 8020426:	4659      	mov	r1, fp
 8020428:	f7e0 fb4e 	bl	8000ac8 <__aeabi_dcmpeq>
 802042c:	2800      	cmp	r0, #0
 802042e:	d1a4      	bne.n	802037a <_strtod_l+0x57a>
 8020430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020432:	9300      	str	r3, [sp, #0]
 8020434:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020436:	462b      	mov	r3, r5
 8020438:	463a      	mov	r2, r7
 802043a:	4620      	mov	r0, r4
 802043c:	f001 fe60 	bl	8022100 <__s2b>
 8020440:	9009      	str	r0, [sp, #36]	; 0x24
 8020442:	2800      	cmp	r0, #0
 8020444:	f43f af24 	beq.w	8020290 <_strtod_l+0x490>
 8020448:	9b07      	ldr	r3, [sp, #28]
 802044a:	1b9e      	subs	r6, r3, r6
 802044c:	9b08      	ldr	r3, [sp, #32]
 802044e:	2b00      	cmp	r3, #0
 8020450:	bfb4      	ite	lt
 8020452:	4633      	movlt	r3, r6
 8020454:	2300      	movge	r3, #0
 8020456:	9310      	str	r3, [sp, #64]	; 0x40
 8020458:	9b08      	ldr	r3, [sp, #32]
 802045a:	2500      	movs	r5, #0
 802045c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020460:	9318      	str	r3, [sp, #96]	; 0x60
 8020462:	462e      	mov	r6, r5
 8020464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020466:	4620      	mov	r0, r4
 8020468:	6859      	ldr	r1, [r3, #4]
 802046a:	f001 fd9d 	bl	8021fa8 <_Balloc>
 802046e:	9007      	str	r0, [sp, #28]
 8020470:	2800      	cmp	r0, #0
 8020472:	f43f af11 	beq.w	8020298 <_strtod_l+0x498>
 8020476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020478:	691a      	ldr	r2, [r3, #16]
 802047a:	3202      	adds	r2, #2
 802047c:	f103 010c 	add.w	r1, r3, #12
 8020480:	0092      	lsls	r2, r2, #2
 8020482:	300c      	adds	r0, #12
 8020484:	f7fe fc4c 	bl	801ed20 <memcpy>
 8020488:	ec4b ab10 	vmov	d0, sl, fp
 802048c:	aa20      	add	r2, sp, #128	; 0x80
 802048e:	a91f      	add	r1, sp, #124	; 0x7c
 8020490:	4620      	mov	r0, r4
 8020492:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8020496:	f002 f96f 	bl	8022778 <__d2b>
 802049a:	901e      	str	r0, [sp, #120]	; 0x78
 802049c:	2800      	cmp	r0, #0
 802049e:	f43f aefb 	beq.w	8020298 <_strtod_l+0x498>
 80204a2:	2101      	movs	r1, #1
 80204a4:	4620      	mov	r0, r4
 80204a6:	f001 fec5 	bl	8022234 <__i2b>
 80204aa:	4606      	mov	r6, r0
 80204ac:	2800      	cmp	r0, #0
 80204ae:	f43f aef3 	beq.w	8020298 <_strtod_l+0x498>
 80204b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80204b4:	9904      	ldr	r1, [sp, #16]
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	bfab      	itete	ge
 80204ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80204bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80204be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80204c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80204c4:	bfac      	ite	ge
 80204c6:	eb03 0902 	addge.w	r9, r3, r2
 80204ca:	1ad7      	sublt	r7, r2, r3
 80204cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80204ce:	eba3 0801 	sub.w	r8, r3, r1
 80204d2:	4490      	add	r8, r2
 80204d4:	4ba3      	ldr	r3, [pc, #652]	; (8020764 <_strtod_l+0x964>)
 80204d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80204da:	4598      	cmp	r8, r3
 80204dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80204e0:	f280 80cc 	bge.w	802067c <_strtod_l+0x87c>
 80204e4:	eba3 0308 	sub.w	r3, r3, r8
 80204e8:	2b1f      	cmp	r3, #31
 80204ea:	eba2 0203 	sub.w	r2, r2, r3
 80204ee:	f04f 0101 	mov.w	r1, #1
 80204f2:	f300 80b6 	bgt.w	8020662 <_strtod_l+0x862>
 80204f6:	fa01 f303 	lsl.w	r3, r1, r3
 80204fa:	9311      	str	r3, [sp, #68]	; 0x44
 80204fc:	2300      	movs	r3, #0
 80204fe:	930c      	str	r3, [sp, #48]	; 0x30
 8020500:	eb09 0802 	add.w	r8, r9, r2
 8020504:	9b04      	ldr	r3, [sp, #16]
 8020506:	45c1      	cmp	r9, r8
 8020508:	4417      	add	r7, r2
 802050a:	441f      	add	r7, r3
 802050c:	464b      	mov	r3, r9
 802050e:	bfa8      	it	ge
 8020510:	4643      	movge	r3, r8
 8020512:	42bb      	cmp	r3, r7
 8020514:	bfa8      	it	ge
 8020516:	463b      	movge	r3, r7
 8020518:	2b00      	cmp	r3, #0
 802051a:	bfc2      	ittt	gt
 802051c:	eba8 0803 	subgt.w	r8, r8, r3
 8020520:	1aff      	subgt	r7, r7, r3
 8020522:	eba9 0903 	subgt.w	r9, r9, r3
 8020526:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020528:	2b00      	cmp	r3, #0
 802052a:	dd17      	ble.n	802055c <_strtod_l+0x75c>
 802052c:	4631      	mov	r1, r6
 802052e:	461a      	mov	r2, r3
 8020530:	4620      	mov	r0, r4
 8020532:	f001 ff3b 	bl	80223ac <__pow5mult>
 8020536:	4606      	mov	r6, r0
 8020538:	2800      	cmp	r0, #0
 802053a:	f43f aead 	beq.w	8020298 <_strtod_l+0x498>
 802053e:	4601      	mov	r1, r0
 8020540:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8020542:	4620      	mov	r0, r4
 8020544:	f001 fe8c 	bl	8022260 <__multiply>
 8020548:	900f      	str	r0, [sp, #60]	; 0x3c
 802054a:	2800      	cmp	r0, #0
 802054c:	f43f aea4 	beq.w	8020298 <_strtod_l+0x498>
 8020550:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020552:	4620      	mov	r0, r4
 8020554:	f001 fd68 	bl	8022028 <_Bfree>
 8020558:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802055a:	931e      	str	r3, [sp, #120]	; 0x78
 802055c:	f1b8 0f00 	cmp.w	r8, #0
 8020560:	f300 8091 	bgt.w	8020686 <_strtod_l+0x886>
 8020564:	9b08      	ldr	r3, [sp, #32]
 8020566:	2b00      	cmp	r3, #0
 8020568:	dd08      	ble.n	802057c <_strtod_l+0x77c>
 802056a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802056c:	9907      	ldr	r1, [sp, #28]
 802056e:	4620      	mov	r0, r4
 8020570:	f001 ff1c 	bl	80223ac <__pow5mult>
 8020574:	9007      	str	r0, [sp, #28]
 8020576:	2800      	cmp	r0, #0
 8020578:	f43f ae8e 	beq.w	8020298 <_strtod_l+0x498>
 802057c:	2f00      	cmp	r7, #0
 802057e:	dd08      	ble.n	8020592 <_strtod_l+0x792>
 8020580:	9907      	ldr	r1, [sp, #28]
 8020582:	463a      	mov	r2, r7
 8020584:	4620      	mov	r0, r4
 8020586:	f001 ff6b 	bl	8022460 <__lshift>
 802058a:	9007      	str	r0, [sp, #28]
 802058c:	2800      	cmp	r0, #0
 802058e:	f43f ae83 	beq.w	8020298 <_strtod_l+0x498>
 8020592:	f1b9 0f00 	cmp.w	r9, #0
 8020596:	dd08      	ble.n	80205aa <_strtod_l+0x7aa>
 8020598:	4631      	mov	r1, r6
 802059a:	464a      	mov	r2, r9
 802059c:	4620      	mov	r0, r4
 802059e:	f001 ff5f 	bl	8022460 <__lshift>
 80205a2:	4606      	mov	r6, r0
 80205a4:	2800      	cmp	r0, #0
 80205a6:	f43f ae77 	beq.w	8020298 <_strtod_l+0x498>
 80205aa:	9a07      	ldr	r2, [sp, #28]
 80205ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80205ae:	4620      	mov	r0, r4
 80205b0:	f001 ffde 	bl	8022570 <__mdiff>
 80205b4:	4605      	mov	r5, r0
 80205b6:	2800      	cmp	r0, #0
 80205b8:	f43f ae6e 	beq.w	8020298 <_strtod_l+0x498>
 80205bc:	68c3      	ldr	r3, [r0, #12]
 80205be:	930f      	str	r3, [sp, #60]	; 0x3c
 80205c0:	2300      	movs	r3, #0
 80205c2:	60c3      	str	r3, [r0, #12]
 80205c4:	4631      	mov	r1, r6
 80205c6:	f001 ffb7 	bl	8022538 <__mcmp>
 80205ca:	2800      	cmp	r0, #0
 80205cc:	da65      	bge.n	802069a <_strtod_l+0x89a>
 80205ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80205d0:	ea53 030a 	orrs.w	r3, r3, sl
 80205d4:	f040 8087 	bne.w	80206e6 <_strtod_l+0x8e6>
 80205d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80205dc:	2b00      	cmp	r3, #0
 80205de:	f040 8082 	bne.w	80206e6 <_strtod_l+0x8e6>
 80205e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80205e6:	0d1b      	lsrs	r3, r3, #20
 80205e8:	051b      	lsls	r3, r3, #20
 80205ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80205ee:	d97a      	bls.n	80206e6 <_strtod_l+0x8e6>
 80205f0:	696b      	ldr	r3, [r5, #20]
 80205f2:	b913      	cbnz	r3, 80205fa <_strtod_l+0x7fa>
 80205f4:	692b      	ldr	r3, [r5, #16]
 80205f6:	2b01      	cmp	r3, #1
 80205f8:	dd75      	ble.n	80206e6 <_strtod_l+0x8e6>
 80205fa:	4629      	mov	r1, r5
 80205fc:	2201      	movs	r2, #1
 80205fe:	4620      	mov	r0, r4
 8020600:	f001 ff2e 	bl	8022460 <__lshift>
 8020604:	4631      	mov	r1, r6
 8020606:	4605      	mov	r5, r0
 8020608:	f001 ff96 	bl	8022538 <__mcmp>
 802060c:	2800      	cmp	r0, #0
 802060e:	dd6a      	ble.n	80206e6 <_strtod_l+0x8e6>
 8020610:	9904      	ldr	r1, [sp, #16]
 8020612:	4a55      	ldr	r2, [pc, #340]	; (8020768 <_strtod_l+0x968>)
 8020614:	465b      	mov	r3, fp
 8020616:	2900      	cmp	r1, #0
 8020618:	f000 8085 	beq.w	8020726 <_strtod_l+0x926>
 802061c:	ea02 010b 	and.w	r1, r2, fp
 8020620:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8020624:	dc7f      	bgt.n	8020726 <_strtod_l+0x926>
 8020626:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802062a:	f77f aeaa 	ble.w	8020382 <_strtod_l+0x582>
 802062e:	4a4f      	ldr	r2, [pc, #316]	; (802076c <_strtod_l+0x96c>)
 8020630:	2300      	movs	r3, #0
 8020632:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8020636:	4650      	mov	r0, sl
 8020638:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 802063c:	4659      	mov	r1, fp
 802063e:	f7df ffdb 	bl	80005f8 <__aeabi_dmul>
 8020642:	460b      	mov	r3, r1
 8020644:	4303      	orrs	r3, r0
 8020646:	bf08      	it	eq
 8020648:	2322      	moveq	r3, #34	; 0x22
 802064a:	4682      	mov	sl, r0
 802064c:	468b      	mov	fp, r1
 802064e:	bf08      	it	eq
 8020650:	6023      	streq	r3, [r4, #0]
 8020652:	e62b      	b.n	80202ac <_strtod_l+0x4ac>
 8020654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020658:	fa02 f303 	lsl.w	r3, r2, r3
 802065c:	ea03 0a0a 	and.w	sl, r3, sl
 8020660:	e6de      	b.n	8020420 <_strtod_l+0x620>
 8020662:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8020666:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 802066a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 802066e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8020672:	fa01 f308 	lsl.w	r3, r1, r8
 8020676:	930c      	str	r3, [sp, #48]	; 0x30
 8020678:	9111      	str	r1, [sp, #68]	; 0x44
 802067a:	e741      	b.n	8020500 <_strtod_l+0x700>
 802067c:	2300      	movs	r3, #0
 802067e:	930c      	str	r3, [sp, #48]	; 0x30
 8020680:	2301      	movs	r3, #1
 8020682:	9311      	str	r3, [sp, #68]	; 0x44
 8020684:	e73c      	b.n	8020500 <_strtod_l+0x700>
 8020686:	991e      	ldr	r1, [sp, #120]	; 0x78
 8020688:	4642      	mov	r2, r8
 802068a:	4620      	mov	r0, r4
 802068c:	f001 fee8 	bl	8022460 <__lshift>
 8020690:	901e      	str	r0, [sp, #120]	; 0x78
 8020692:	2800      	cmp	r0, #0
 8020694:	f47f af66 	bne.w	8020564 <_strtod_l+0x764>
 8020698:	e5fe      	b.n	8020298 <_strtod_l+0x498>
 802069a:	465f      	mov	r7, fp
 802069c:	d16e      	bne.n	802077c <_strtod_l+0x97c>
 802069e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80206a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80206a4:	b342      	cbz	r2, 80206f8 <_strtod_l+0x8f8>
 80206a6:	4a32      	ldr	r2, [pc, #200]	; (8020770 <_strtod_l+0x970>)
 80206a8:	4293      	cmp	r3, r2
 80206aa:	d128      	bne.n	80206fe <_strtod_l+0x8fe>
 80206ac:	9b04      	ldr	r3, [sp, #16]
 80206ae:	4650      	mov	r0, sl
 80206b0:	b1eb      	cbz	r3, 80206ee <_strtod_l+0x8ee>
 80206b2:	4a2d      	ldr	r2, [pc, #180]	; (8020768 <_strtod_l+0x968>)
 80206b4:	403a      	ands	r2, r7
 80206b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80206ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80206be:	d819      	bhi.n	80206f4 <_strtod_l+0x8f4>
 80206c0:	0d12      	lsrs	r2, r2, #20
 80206c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80206c6:	fa01 f303 	lsl.w	r3, r1, r3
 80206ca:	4298      	cmp	r0, r3
 80206cc:	d117      	bne.n	80206fe <_strtod_l+0x8fe>
 80206ce:	4b29      	ldr	r3, [pc, #164]	; (8020774 <_strtod_l+0x974>)
 80206d0:	429f      	cmp	r7, r3
 80206d2:	d102      	bne.n	80206da <_strtod_l+0x8da>
 80206d4:	3001      	adds	r0, #1
 80206d6:	f43f addf 	beq.w	8020298 <_strtod_l+0x498>
 80206da:	4b23      	ldr	r3, [pc, #140]	; (8020768 <_strtod_l+0x968>)
 80206dc:	403b      	ands	r3, r7
 80206de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80206e2:	f04f 0a00 	mov.w	sl, #0
 80206e6:	9b04      	ldr	r3, [sp, #16]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d1a0      	bne.n	802062e <_strtod_l+0x82e>
 80206ec:	e5de      	b.n	80202ac <_strtod_l+0x4ac>
 80206ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80206f2:	e7ea      	b.n	80206ca <_strtod_l+0x8ca>
 80206f4:	460b      	mov	r3, r1
 80206f6:	e7e8      	b.n	80206ca <_strtod_l+0x8ca>
 80206f8:	ea53 030a 	orrs.w	r3, r3, sl
 80206fc:	d088      	beq.n	8020610 <_strtod_l+0x810>
 80206fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020700:	b1db      	cbz	r3, 802073a <_strtod_l+0x93a>
 8020702:	423b      	tst	r3, r7
 8020704:	d0ef      	beq.n	80206e6 <_strtod_l+0x8e6>
 8020706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020708:	9a04      	ldr	r2, [sp, #16]
 802070a:	4650      	mov	r0, sl
 802070c:	4659      	mov	r1, fp
 802070e:	b1c3      	cbz	r3, 8020742 <_strtod_l+0x942>
 8020710:	f7ff fb59 	bl	801fdc6 <sulp>
 8020714:	4602      	mov	r2, r0
 8020716:	460b      	mov	r3, r1
 8020718:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802071c:	f7df fdb6 	bl	800028c <__adddf3>
 8020720:	4682      	mov	sl, r0
 8020722:	468b      	mov	fp, r1
 8020724:	e7df      	b.n	80206e6 <_strtod_l+0x8e6>
 8020726:	4013      	ands	r3, r2
 8020728:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802072c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020730:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020734:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8020738:	e7d5      	b.n	80206e6 <_strtod_l+0x8e6>
 802073a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802073c:	ea13 0f0a 	tst.w	r3, sl
 8020740:	e7e0      	b.n	8020704 <_strtod_l+0x904>
 8020742:	f7ff fb40 	bl	801fdc6 <sulp>
 8020746:	4602      	mov	r2, r0
 8020748:	460b      	mov	r3, r1
 802074a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802074e:	f7df fd9b 	bl	8000288 <__aeabi_dsub>
 8020752:	2200      	movs	r2, #0
 8020754:	2300      	movs	r3, #0
 8020756:	4682      	mov	sl, r0
 8020758:	468b      	mov	fp, r1
 802075a:	f7e0 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 802075e:	2800      	cmp	r0, #0
 8020760:	d0c1      	beq.n	80206e6 <_strtod_l+0x8e6>
 8020762:	e60e      	b.n	8020382 <_strtod_l+0x582>
 8020764:	fffffc02 	.word	0xfffffc02
 8020768:	7ff00000 	.word	0x7ff00000
 802076c:	39500000 	.word	0x39500000
 8020770:	000fffff 	.word	0x000fffff
 8020774:	7fefffff 	.word	0x7fefffff
 8020778:	08024e48 	.word	0x08024e48
 802077c:	4631      	mov	r1, r6
 802077e:	4628      	mov	r0, r5
 8020780:	f002 f856 	bl	8022830 <__ratio>
 8020784:	ec59 8b10 	vmov	r8, r9, d0
 8020788:	ee10 0a10 	vmov	r0, s0
 802078c:	2200      	movs	r2, #0
 802078e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020792:	4649      	mov	r1, r9
 8020794:	f7e0 f9ac 	bl	8000af0 <__aeabi_dcmple>
 8020798:	2800      	cmp	r0, #0
 802079a:	d07c      	beq.n	8020896 <_strtod_l+0xa96>
 802079c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d04c      	beq.n	802083c <_strtod_l+0xa3c>
 80207a2:	4b95      	ldr	r3, [pc, #596]	; (80209f8 <_strtod_l+0xbf8>)
 80207a4:	2200      	movs	r2, #0
 80207a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80207aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80209f8 <_strtod_l+0xbf8>
 80207ae:	f04f 0800 	mov.w	r8, #0
 80207b2:	4b92      	ldr	r3, [pc, #584]	; (80209fc <_strtod_l+0xbfc>)
 80207b4:	403b      	ands	r3, r7
 80207b6:	9311      	str	r3, [sp, #68]	; 0x44
 80207b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80207ba:	4b91      	ldr	r3, [pc, #580]	; (8020a00 <_strtod_l+0xc00>)
 80207bc:	429a      	cmp	r2, r3
 80207be:	f040 80b2 	bne.w	8020926 <_strtod_l+0xb26>
 80207c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80207c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80207ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80207ce:	ec4b ab10 	vmov	d0, sl, fp
 80207d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80207d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80207da:	f001 ff51 	bl	8022680 <__ulp>
 80207de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80207e2:	ec53 2b10 	vmov	r2, r3, d0
 80207e6:	f7df ff07 	bl	80005f8 <__aeabi_dmul>
 80207ea:	4652      	mov	r2, sl
 80207ec:	465b      	mov	r3, fp
 80207ee:	f7df fd4d 	bl	800028c <__adddf3>
 80207f2:	460b      	mov	r3, r1
 80207f4:	4981      	ldr	r1, [pc, #516]	; (80209fc <_strtod_l+0xbfc>)
 80207f6:	4a83      	ldr	r2, [pc, #524]	; (8020a04 <_strtod_l+0xc04>)
 80207f8:	4019      	ands	r1, r3
 80207fa:	4291      	cmp	r1, r2
 80207fc:	4682      	mov	sl, r0
 80207fe:	d95e      	bls.n	80208be <_strtod_l+0xabe>
 8020800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020802:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8020806:	4293      	cmp	r3, r2
 8020808:	d103      	bne.n	8020812 <_strtod_l+0xa12>
 802080a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802080c:	3301      	adds	r3, #1
 802080e:	f43f ad43 	beq.w	8020298 <_strtod_l+0x498>
 8020812:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020a10 <_strtod_l+0xc10>
 8020816:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 802081a:	991e      	ldr	r1, [sp, #120]	; 0x78
 802081c:	4620      	mov	r0, r4
 802081e:	f001 fc03 	bl	8022028 <_Bfree>
 8020822:	9907      	ldr	r1, [sp, #28]
 8020824:	4620      	mov	r0, r4
 8020826:	f001 fbff 	bl	8022028 <_Bfree>
 802082a:	4631      	mov	r1, r6
 802082c:	4620      	mov	r0, r4
 802082e:	f001 fbfb 	bl	8022028 <_Bfree>
 8020832:	4629      	mov	r1, r5
 8020834:	4620      	mov	r0, r4
 8020836:	f001 fbf7 	bl	8022028 <_Bfree>
 802083a:	e613      	b.n	8020464 <_strtod_l+0x664>
 802083c:	f1ba 0f00 	cmp.w	sl, #0
 8020840:	d11b      	bne.n	802087a <_strtod_l+0xa7a>
 8020842:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020846:	b9f3      	cbnz	r3, 8020886 <_strtod_l+0xa86>
 8020848:	4b6b      	ldr	r3, [pc, #428]	; (80209f8 <_strtod_l+0xbf8>)
 802084a:	2200      	movs	r2, #0
 802084c:	4640      	mov	r0, r8
 802084e:	4649      	mov	r1, r9
 8020850:	f7e0 f944 	bl	8000adc <__aeabi_dcmplt>
 8020854:	b9d0      	cbnz	r0, 802088c <_strtod_l+0xa8c>
 8020856:	4640      	mov	r0, r8
 8020858:	4649      	mov	r1, r9
 802085a:	4b6b      	ldr	r3, [pc, #428]	; (8020a08 <_strtod_l+0xc08>)
 802085c:	2200      	movs	r2, #0
 802085e:	f7df fecb 	bl	80005f8 <__aeabi_dmul>
 8020862:	4680      	mov	r8, r0
 8020864:	4689      	mov	r9, r1
 8020866:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802086a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 802086e:	931b      	str	r3, [sp, #108]	; 0x6c
 8020870:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8020874:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8020878:	e79b      	b.n	80207b2 <_strtod_l+0x9b2>
 802087a:	f1ba 0f01 	cmp.w	sl, #1
 802087e:	d102      	bne.n	8020886 <_strtod_l+0xa86>
 8020880:	2f00      	cmp	r7, #0
 8020882:	f43f ad7e 	beq.w	8020382 <_strtod_l+0x582>
 8020886:	4b61      	ldr	r3, [pc, #388]	; (8020a0c <_strtod_l+0xc0c>)
 8020888:	2200      	movs	r2, #0
 802088a:	e78c      	b.n	80207a6 <_strtod_l+0x9a6>
 802088c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020a08 <_strtod_l+0xc08>
 8020890:	f04f 0800 	mov.w	r8, #0
 8020894:	e7e7      	b.n	8020866 <_strtod_l+0xa66>
 8020896:	4b5c      	ldr	r3, [pc, #368]	; (8020a08 <_strtod_l+0xc08>)
 8020898:	4640      	mov	r0, r8
 802089a:	4649      	mov	r1, r9
 802089c:	2200      	movs	r2, #0
 802089e:	f7df feab 	bl	80005f8 <__aeabi_dmul>
 80208a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80208a4:	4680      	mov	r8, r0
 80208a6:	4689      	mov	r9, r1
 80208a8:	b933      	cbnz	r3, 80208b8 <_strtod_l+0xab8>
 80208aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80208ae:	9012      	str	r0, [sp, #72]	; 0x48
 80208b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80208b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80208b6:	e7dd      	b.n	8020874 <_strtod_l+0xa74>
 80208b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80208bc:	e7f9      	b.n	80208b2 <_strtod_l+0xab2>
 80208be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80208c2:	9b04      	ldr	r3, [sp, #16]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d1a8      	bne.n	802081a <_strtod_l+0xa1a>
 80208c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80208cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80208ce:	0d1b      	lsrs	r3, r3, #20
 80208d0:	051b      	lsls	r3, r3, #20
 80208d2:	429a      	cmp	r2, r3
 80208d4:	d1a1      	bne.n	802081a <_strtod_l+0xa1a>
 80208d6:	4640      	mov	r0, r8
 80208d8:	4649      	mov	r1, r9
 80208da:	f7e0 f9ed 	bl	8000cb8 <__aeabi_d2lz>
 80208de:	f7df fe5d 	bl	800059c <__aeabi_l2d>
 80208e2:	4602      	mov	r2, r0
 80208e4:	460b      	mov	r3, r1
 80208e6:	4640      	mov	r0, r8
 80208e8:	4649      	mov	r1, r9
 80208ea:	f7df fccd 	bl	8000288 <__aeabi_dsub>
 80208ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80208f4:	ea43 030a 	orr.w	r3, r3, sl
 80208f8:	4313      	orrs	r3, r2
 80208fa:	4680      	mov	r8, r0
 80208fc:	4689      	mov	r9, r1
 80208fe:	d053      	beq.n	80209a8 <_strtod_l+0xba8>
 8020900:	a335      	add	r3, pc, #212	; (adr r3, 80209d8 <_strtod_l+0xbd8>)
 8020902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020906:	f7e0 f8e9 	bl	8000adc <__aeabi_dcmplt>
 802090a:	2800      	cmp	r0, #0
 802090c:	f47f acce 	bne.w	80202ac <_strtod_l+0x4ac>
 8020910:	a333      	add	r3, pc, #204	; (adr r3, 80209e0 <_strtod_l+0xbe0>)
 8020912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020916:	4640      	mov	r0, r8
 8020918:	4649      	mov	r1, r9
 802091a:	f7e0 f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 802091e:	2800      	cmp	r0, #0
 8020920:	f43f af7b 	beq.w	802081a <_strtod_l+0xa1a>
 8020924:	e4c2      	b.n	80202ac <_strtod_l+0x4ac>
 8020926:	9b04      	ldr	r3, [sp, #16]
 8020928:	b333      	cbz	r3, 8020978 <_strtod_l+0xb78>
 802092a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802092c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020930:	d822      	bhi.n	8020978 <_strtod_l+0xb78>
 8020932:	a32d      	add	r3, pc, #180	; (adr r3, 80209e8 <_strtod_l+0xbe8>)
 8020934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020938:	4640      	mov	r0, r8
 802093a:	4649      	mov	r1, r9
 802093c:	f7e0 f8d8 	bl	8000af0 <__aeabi_dcmple>
 8020940:	b1a0      	cbz	r0, 802096c <_strtod_l+0xb6c>
 8020942:	4649      	mov	r1, r9
 8020944:	4640      	mov	r0, r8
 8020946:	f7e0 f92f 	bl	8000ba8 <__aeabi_d2uiz>
 802094a:	2801      	cmp	r0, #1
 802094c:	bf38      	it	cc
 802094e:	2001      	movcc	r0, #1
 8020950:	f7df fdd8 	bl	8000504 <__aeabi_ui2d>
 8020954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020956:	4680      	mov	r8, r0
 8020958:	4689      	mov	r9, r1
 802095a:	bb13      	cbnz	r3, 80209a2 <_strtod_l+0xba2>
 802095c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020960:	9014      	str	r0, [sp, #80]	; 0x50
 8020962:	9315      	str	r3, [sp, #84]	; 0x54
 8020964:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020968:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802096c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802096e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020970:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020974:	1a9b      	subs	r3, r3, r2
 8020976:	930d      	str	r3, [sp, #52]	; 0x34
 8020978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802097c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020980:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8020984:	f001 fe7c 	bl	8022680 <__ulp>
 8020988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802098c:	ec53 2b10 	vmov	r2, r3, d0
 8020990:	f7df fe32 	bl	80005f8 <__aeabi_dmul>
 8020994:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020998:	f7df fc78 	bl	800028c <__adddf3>
 802099c:	4682      	mov	sl, r0
 802099e:	468b      	mov	fp, r1
 80209a0:	e78f      	b.n	80208c2 <_strtod_l+0xac2>
 80209a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80209a6:	e7dd      	b.n	8020964 <_strtod_l+0xb64>
 80209a8:	a311      	add	r3, pc, #68	; (adr r3, 80209f0 <_strtod_l+0xbf0>)
 80209aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209ae:	f7e0 f895 	bl	8000adc <__aeabi_dcmplt>
 80209b2:	e7b4      	b.n	802091e <_strtod_l+0xb1e>
 80209b4:	2300      	movs	r3, #0
 80209b6:	930e      	str	r3, [sp, #56]	; 0x38
 80209b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80209ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80209bc:	6013      	str	r3, [r2, #0]
 80209be:	f7ff ba65 	b.w	801fe8c <_strtod_l+0x8c>
 80209c2:	2b65      	cmp	r3, #101	; 0x65
 80209c4:	f43f ab5d 	beq.w	8020082 <_strtod_l+0x282>
 80209c8:	2b45      	cmp	r3, #69	; 0x45
 80209ca:	f43f ab5a 	beq.w	8020082 <_strtod_l+0x282>
 80209ce:	2201      	movs	r2, #1
 80209d0:	f7ff bb92 	b.w	80200f8 <_strtod_l+0x2f8>
 80209d4:	f3af 8000 	nop.w
 80209d8:	94a03595 	.word	0x94a03595
 80209dc:	3fdfffff 	.word	0x3fdfffff
 80209e0:	35afe535 	.word	0x35afe535
 80209e4:	3fe00000 	.word	0x3fe00000
 80209e8:	ffc00000 	.word	0xffc00000
 80209ec:	41dfffff 	.word	0x41dfffff
 80209f0:	94a03595 	.word	0x94a03595
 80209f4:	3fcfffff 	.word	0x3fcfffff
 80209f8:	3ff00000 	.word	0x3ff00000
 80209fc:	7ff00000 	.word	0x7ff00000
 8020a00:	7fe00000 	.word	0x7fe00000
 8020a04:	7c9fffff 	.word	0x7c9fffff
 8020a08:	3fe00000 	.word	0x3fe00000
 8020a0c:	bff00000 	.word	0xbff00000
 8020a10:	7fefffff 	.word	0x7fefffff

08020a14 <_strtod_r>:
 8020a14:	4b01      	ldr	r3, [pc, #4]	; (8020a1c <_strtod_r+0x8>)
 8020a16:	f7ff b9f3 	b.w	801fe00 <_strtod_l>
 8020a1a:	bf00      	nop
 8020a1c:	20000728 	.word	0x20000728

08020a20 <_strtol_l.isra.0>:
 8020a20:	2b01      	cmp	r3, #1
 8020a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a26:	d001      	beq.n	8020a2c <_strtol_l.isra.0+0xc>
 8020a28:	2b24      	cmp	r3, #36	; 0x24
 8020a2a:	d906      	bls.n	8020a3a <_strtol_l.isra.0+0x1a>
 8020a2c:	f7fe f93e 	bl	801ecac <__errno>
 8020a30:	2316      	movs	r3, #22
 8020a32:	6003      	str	r3, [r0, #0]
 8020a34:	2000      	movs	r0, #0
 8020a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a3a:	4f3a      	ldr	r7, [pc, #232]	; (8020b24 <_strtol_l.isra.0+0x104>)
 8020a3c:	468e      	mov	lr, r1
 8020a3e:	4676      	mov	r6, lr
 8020a40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020a44:	5de5      	ldrb	r5, [r4, r7]
 8020a46:	f015 0508 	ands.w	r5, r5, #8
 8020a4a:	d1f8      	bne.n	8020a3e <_strtol_l.isra.0+0x1e>
 8020a4c:	2c2d      	cmp	r4, #45	; 0x2d
 8020a4e:	d134      	bne.n	8020aba <_strtol_l.isra.0+0x9a>
 8020a50:	f89e 4000 	ldrb.w	r4, [lr]
 8020a54:	f04f 0801 	mov.w	r8, #1
 8020a58:	f106 0e02 	add.w	lr, r6, #2
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d05c      	beq.n	8020b1a <_strtol_l.isra.0+0xfa>
 8020a60:	2b10      	cmp	r3, #16
 8020a62:	d10c      	bne.n	8020a7e <_strtol_l.isra.0+0x5e>
 8020a64:	2c30      	cmp	r4, #48	; 0x30
 8020a66:	d10a      	bne.n	8020a7e <_strtol_l.isra.0+0x5e>
 8020a68:	f89e 4000 	ldrb.w	r4, [lr]
 8020a6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020a70:	2c58      	cmp	r4, #88	; 0x58
 8020a72:	d14d      	bne.n	8020b10 <_strtol_l.isra.0+0xf0>
 8020a74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020a78:	2310      	movs	r3, #16
 8020a7a:	f10e 0e02 	add.w	lr, lr, #2
 8020a7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020a82:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8020a86:	2600      	movs	r6, #0
 8020a88:	fbbc f9f3 	udiv	r9, ip, r3
 8020a8c:	4635      	mov	r5, r6
 8020a8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020a92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020a96:	2f09      	cmp	r7, #9
 8020a98:	d818      	bhi.n	8020acc <_strtol_l.isra.0+0xac>
 8020a9a:	463c      	mov	r4, r7
 8020a9c:	42a3      	cmp	r3, r4
 8020a9e:	dd24      	ble.n	8020aea <_strtol_l.isra.0+0xca>
 8020aa0:	2e00      	cmp	r6, #0
 8020aa2:	db1f      	blt.n	8020ae4 <_strtol_l.isra.0+0xc4>
 8020aa4:	45a9      	cmp	r9, r5
 8020aa6:	d31d      	bcc.n	8020ae4 <_strtol_l.isra.0+0xc4>
 8020aa8:	d101      	bne.n	8020aae <_strtol_l.isra.0+0x8e>
 8020aaa:	45a2      	cmp	sl, r4
 8020aac:	db1a      	blt.n	8020ae4 <_strtol_l.isra.0+0xc4>
 8020aae:	fb05 4503 	mla	r5, r5, r3, r4
 8020ab2:	2601      	movs	r6, #1
 8020ab4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020ab8:	e7eb      	b.n	8020a92 <_strtol_l.isra.0+0x72>
 8020aba:	2c2b      	cmp	r4, #43	; 0x2b
 8020abc:	bf08      	it	eq
 8020abe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8020ac2:	46a8      	mov	r8, r5
 8020ac4:	bf08      	it	eq
 8020ac6:	f106 0e02 	addeq.w	lr, r6, #2
 8020aca:	e7c7      	b.n	8020a5c <_strtol_l.isra.0+0x3c>
 8020acc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8020ad0:	2f19      	cmp	r7, #25
 8020ad2:	d801      	bhi.n	8020ad8 <_strtol_l.isra.0+0xb8>
 8020ad4:	3c37      	subs	r4, #55	; 0x37
 8020ad6:	e7e1      	b.n	8020a9c <_strtol_l.isra.0+0x7c>
 8020ad8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8020adc:	2f19      	cmp	r7, #25
 8020ade:	d804      	bhi.n	8020aea <_strtol_l.isra.0+0xca>
 8020ae0:	3c57      	subs	r4, #87	; 0x57
 8020ae2:	e7db      	b.n	8020a9c <_strtol_l.isra.0+0x7c>
 8020ae4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8020ae8:	e7e4      	b.n	8020ab4 <_strtol_l.isra.0+0x94>
 8020aea:	2e00      	cmp	r6, #0
 8020aec:	da05      	bge.n	8020afa <_strtol_l.isra.0+0xda>
 8020aee:	2322      	movs	r3, #34	; 0x22
 8020af0:	6003      	str	r3, [r0, #0]
 8020af2:	4665      	mov	r5, ip
 8020af4:	b942      	cbnz	r2, 8020b08 <_strtol_l.isra.0+0xe8>
 8020af6:	4628      	mov	r0, r5
 8020af8:	e79d      	b.n	8020a36 <_strtol_l.isra.0+0x16>
 8020afa:	f1b8 0f00 	cmp.w	r8, #0
 8020afe:	d000      	beq.n	8020b02 <_strtol_l.isra.0+0xe2>
 8020b00:	426d      	negs	r5, r5
 8020b02:	2a00      	cmp	r2, #0
 8020b04:	d0f7      	beq.n	8020af6 <_strtol_l.isra.0+0xd6>
 8020b06:	b10e      	cbz	r6, 8020b0c <_strtol_l.isra.0+0xec>
 8020b08:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8020b0c:	6011      	str	r1, [r2, #0]
 8020b0e:	e7f2      	b.n	8020af6 <_strtol_l.isra.0+0xd6>
 8020b10:	2430      	movs	r4, #48	; 0x30
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d1b3      	bne.n	8020a7e <_strtol_l.isra.0+0x5e>
 8020b16:	2308      	movs	r3, #8
 8020b18:	e7b1      	b.n	8020a7e <_strtol_l.isra.0+0x5e>
 8020b1a:	2c30      	cmp	r4, #48	; 0x30
 8020b1c:	d0a4      	beq.n	8020a68 <_strtol_l.isra.0+0x48>
 8020b1e:	230a      	movs	r3, #10
 8020b20:	e7ad      	b.n	8020a7e <_strtol_l.isra.0+0x5e>
 8020b22:	bf00      	nop
 8020b24:	08024e71 	.word	0x08024e71

08020b28 <_strtol_r>:
 8020b28:	f7ff bf7a 	b.w	8020a20 <_strtol_l.isra.0>

08020b2c <_write_r>:
 8020b2c:	b538      	push	{r3, r4, r5, lr}
 8020b2e:	4d07      	ldr	r5, [pc, #28]	; (8020b4c <_write_r+0x20>)
 8020b30:	4604      	mov	r4, r0
 8020b32:	4608      	mov	r0, r1
 8020b34:	4611      	mov	r1, r2
 8020b36:	2200      	movs	r2, #0
 8020b38:	602a      	str	r2, [r5, #0]
 8020b3a:	461a      	mov	r2, r3
 8020b3c:	f7ee f957 	bl	800edee <_write>
 8020b40:	1c43      	adds	r3, r0, #1
 8020b42:	d102      	bne.n	8020b4a <_write_r+0x1e>
 8020b44:	682b      	ldr	r3, [r5, #0]
 8020b46:	b103      	cbz	r3, 8020b4a <_write_r+0x1e>
 8020b48:	6023      	str	r3, [r4, #0]
 8020b4a:	bd38      	pop	{r3, r4, r5, pc}
 8020b4c:	2000ac78 	.word	0x2000ac78

08020b50 <_close_r>:
 8020b50:	b538      	push	{r3, r4, r5, lr}
 8020b52:	4d06      	ldr	r5, [pc, #24]	; (8020b6c <_close_r+0x1c>)
 8020b54:	2300      	movs	r3, #0
 8020b56:	4604      	mov	r4, r0
 8020b58:	4608      	mov	r0, r1
 8020b5a:	602b      	str	r3, [r5, #0]
 8020b5c:	f7ee f963 	bl	800ee26 <_close>
 8020b60:	1c43      	adds	r3, r0, #1
 8020b62:	d102      	bne.n	8020b6a <_close_r+0x1a>
 8020b64:	682b      	ldr	r3, [r5, #0]
 8020b66:	b103      	cbz	r3, 8020b6a <_close_r+0x1a>
 8020b68:	6023      	str	r3, [r4, #0]
 8020b6a:	bd38      	pop	{r3, r4, r5, pc}
 8020b6c:	2000ac78 	.word	0x2000ac78

08020b70 <quorem>:
 8020b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b74:	6903      	ldr	r3, [r0, #16]
 8020b76:	690c      	ldr	r4, [r1, #16]
 8020b78:	42a3      	cmp	r3, r4
 8020b7a:	4607      	mov	r7, r0
 8020b7c:	f2c0 8081 	blt.w	8020c82 <quorem+0x112>
 8020b80:	3c01      	subs	r4, #1
 8020b82:	f101 0814 	add.w	r8, r1, #20
 8020b86:	f100 0514 	add.w	r5, r0, #20
 8020b8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020b8e:	9301      	str	r3, [sp, #4]
 8020b90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020b94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020b98:	3301      	adds	r3, #1
 8020b9a:	429a      	cmp	r2, r3
 8020b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020ba4:	fbb2 f6f3 	udiv	r6, r2, r3
 8020ba8:	d331      	bcc.n	8020c0e <quorem+0x9e>
 8020baa:	f04f 0e00 	mov.w	lr, #0
 8020bae:	4640      	mov	r0, r8
 8020bb0:	46ac      	mov	ip, r5
 8020bb2:	46f2      	mov	sl, lr
 8020bb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8020bb8:	b293      	uxth	r3, r2
 8020bba:	fb06 e303 	mla	r3, r6, r3, lr
 8020bbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020bc2:	b29b      	uxth	r3, r3
 8020bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8020bc8:	0c12      	lsrs	r2, r2, #16
 8020bca:	f8dc a000 	ldr.w	sl, [ip]
 8020bce:	fb06 e202 	mla	r2, r6, r2, lr
 8020bd2:	fa13 f38a 	uxtah	r3, r3, sl
 8020bd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020bda:	fa1f fa82 	uxth.w	sl, r2
 8020bde:	f8dc 2000 	ldr.w	r2, [ip]
 8020be2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020be6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020bf0:	4581      	cmp	r9, r0
 8020bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8020bf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020bfa:	d2db      	bcs.n	8020bb4 <quorem+0x44>
 8020bfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8020c00:	b92b      	cbnz	r3, 8020c0e <quorem+0x9e>
 8020c02:	9b01      	ldr	r3, [sp, #4]
 8020c04:	3b04      	subs	r3, #4
 8020c06:	429d      	cmp	r5, r3
 8020c08:	461a      	mov	r2, r3
 8020c0a:	d32e      	bcc.n	8020c6a <quorem+0xfa>
 8020c0c:	613c      	str	r4, [r7, #16]
 8020c0e:	4638      	mov	r0, r7
 8020c10:	f001 fc92 	bl	8022538 <__mcmp>
 8020c14:	2800      	cmp	r0, #0
 8020c16:	db24      	blt.n	8020c62 <quorem+0xf2>
 8020c18:	3601      	adds	r6, #1
 8020c1a:	4628      	mov	r0, r5
 8020c1c:	f04f 0c00 	mov.w	ip, #0
 8020c20:	f858 2b04 	ldr.w	r2, [r8], #4
 8020c24:	f8d0 e000 	ldr.w	lr, [r0]
 8020c28:	b293      	uxth	r3, r2
 8020c2a:	ebac 0303 	sub.w	r3, ip, r3
 8020c2e:	0c12      	lsrs	r2, r2, #16
 8020c30:	fa13 f38e 	uxtah	r3, r3, lr
 8020c34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020c3c:	b29b      	uxth	r3, r3
 8020c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020c42:	45c1      	cmp	r9, r8
 8020c44:	f840 3b04 	str.w	r3, [r0], #4
 8020c48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020c4c:	d2e8      	bcs.n	8020c20 <quorem+0xb0>
 8020c4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020c56:	b922      	cbnz	r2, 8020c62 <quorem+0xf2>
 8020c58:	3b04      	subs	r3, #4
 8020c5a:	429d      	cmp	r5, r3
 8020c5c:	461a      	mov	r2, r3
 8020c5e:	d30a      	bcc.n	8020c76 <quorem+0x106>
 8020c60:	613c      	str	r4, [r7, #16]
 8020c62:	4630      	mov	r0, r6
 8020c64:	b003      	add	sp, #12
 8020c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c6a:	6812      	ldr	r2, [r2, #0]
 8020c6c:	3b04      	subs	r3, #4
 8020c6e:	2a00      	cmp	r2, #0
 8020c70:	d1cc      	bne.n	8020c0c <quorem+0x9c>
 8020c72:	3c01      	subs	r4, #1
 8020c74:	e7c7      	b.n	8020c06 <quorem+0x96>
 8020c76:	6812      	ldr	r2, [r2, #0]
 8020c78:	3b04      	subs	r3, #4
 8020c7a:	2a00      	cmp	r2, #0
 8020c7c:	d1f0      	bne.n	8020c60 <quorem+0xf0>
 8020c7e:	3c01      	subs	r4, #1
 8020c80:	e7eb      	b.n	8020c5a <quorem+0xea>
 8020c82:	2000      	movs	r0, #0
 8020c84:	e7ee      	b.n	8020c64 <quorem+0xf4>
	...

08020c88 <_dtoa_r>:
 8020c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c8c:	ed2d 8b02 	vpush	{d8}
 8020c90:	ec57 6b10 	vmov	r6, r7, d0
 8020c94:	b095      	sub	sp, #84	; 0x54
 8020c96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020c98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020c9c:	9105      	str	r1, [sp, #20]
 8020c9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020ca2:	4604      	mov	r4, r0
 8020ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8020ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ca8:	b975      	cbnz	r5, 8020cc8 <_dtoa_r+0x40>
 8020caa:	2010      	movs	r0, #16
 8020cac:	f7fe f828 	bl	801ed00 <malloc>
 8020cb0:	4602      	mov	r2, r0
 8020cb2:	6260      	str	r0, [r4, #36]	; 0x24
 8020cb4:	b920      	cbnz	r0, 8020cc0 <_dtoa_r+0x38>
 8020cb6:	4bb2      	ldr	r3, [pc, #712]	; (8020f80 <_dtoa_r+0x2f8>)
 8020cb8:	21ea      	movs	r1, #234	; 0xea
 8020cba:	48b2      	ldr	r0, [pc, #712]	; (8020f84 <_dtoa_r+0x2fc>)
 8020cbc:	f002 f808 	bl	8022cd0 <__assert_func>
 8020cc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020cc4:	6005      	str	r5, [r0, #0]
 8020cc6:	60c5      	str	r5, [r0, #12]
 8020cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020cca:	6819      	ldr	r1, [r3, #0]
 8020ccc:	b151      	cbz	r1, 8020ce4 <_dtoa_r+0x5c>
 8020cce:	685a      	ldr	r2, [r3, #4]
 8020cd0:	604a      	str	r2, [r1, #4]
 8020cd2:	2301      	movs	r3, #1
 8020cd4:	4093      	lsls	r3, r2
 8020cd6:	608b      	str	r3, [r1, #8]
 8020cd8:	4620      	mov	r0, r4
 8020cda:	f001 f9a5 	bl	8022028 <_Bfree>
 8020cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ce0:	2200      	movs	r2, #0
 8020ce2:	601a      	str	r2, [r3, #0]
 8020ce4:	1e3b      	subs	r3, r7, #0
 8020ce6:	bfb9      	ittee	lt
 8020ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8020cec:	9303      	strlt	r3, [sp, #12]
 8020cee:	2300      	movge	r3, #0
 8020cf0:	f8c8 3000 	strge.w	r3, [r8]
 8020cf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8020cf8:	4ba3      	ldr	r3, [pc, #652]	; (8020f88 <_dtoa_r+0x300>)
 8020cfa:	bfbc      	itt	lt
 8020cfc:	2201      	movlt	r2, #1
 8020cfe:	f8c8 2000 	strlt.w	r2, [r8]
 8020d02:	ea33 0309 	bics.w	r3, r3, r9
 8020d06:	d11b      	bne.n	8020d40 <_dtoa_r+0xb8>
 8020d08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8020d0e:	6013      	str	r3, [r2, #0]
 8020d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020d14:	4333      	orrs	r3, r6
 8020d16:	f000 857a 	beq.w	802180e <_dtoa_r+0xb86>
 8020d1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d1c:	b963      	cbnz	r3, 8020d38 <_dtoa_r+0xb0>
 8020d1e:	4b9b      	ldr	r3, [pc, #620]	; (8020f8c <_dtoa_r+0x304>)
 8020d20:	e024      	b.n	8020d6c <_dtoa_r+0xe4>
 8020d22:	4b9b      	ldr	r3, [pc, #620]	; (8020f90 <_dtoa_r+0x308>)
 8020d24:	9300      	str	r3, [sp, #0]
 8020d26:	3308      	adds	r3, #8
 8020d28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020d2a:	6013      	str	r3, [r2, #0]
 8020d2c:	9800      	ldr	r0, [sp, #0]
 8020d2e:	b015      	add	sp, #84	; 0x54
 8020d30:	ecbd 8b02 	vpop	{d8}
 8020d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d38:	4b94      	ldr	r3, [pc, #592]	; (8020f8c <_dtoa_r+0x304>)
 8020d3a:	9300      	str	r3, [sp, #0]
 8020d3c:	3303      	adds	r3, #3
 8020d3e:	e7f3      	b.n	8020d28 <_dtoa_r+0xa0>
 8020d40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8020d44:	2200      	movs	r2, #0
 8020d46:	ec51 0b17 	vmov	r0, r1, d7
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8020d50:	f7df feba 	bl	8000ac8 <__aeabi_dcmpeq>
 8020d54:	4680      	mov	r8, r0
 8020d56:	b158      	cbz	r0, 8020d70 <_dtoa_r+0xe8>
 8020d58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d5a:	2301      	movs	r3, #1
 8020d5c:	6013      	str	r3, [r2, #0]
 8020d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	f000 8551 	beq.w	8021808 <_dtoa_r+0xb80>
 8020d66:	488b      	ldr	r0, [pc, #556]	; (8020f94 <_dtoa_r+0x30c>)
 8020d68:	6018      	str	r0, [r3, #0]
 8020d6a:	1e43      	subs	r3, r0, #1
 8020d6c:	9300      	str	r3, [sp, #0]
 8020d6e:	e7dd      	b.n	8020d2c <_dtoa_r+0xa4>
 8020d70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8020d74:	aa12      	add	r2, sp, #72	; 0x48
 8020d76:	a913      	add	r1, sp, #76	; 0x4c
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f001 fcfd 	bl	8022778 <__d2b>
 8020d7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8020d82:	4683      	mov	fp, r0
 8020d84:	2d00      	cmp	r5, #0
 8020d86:	d07c      	beq.n	8020e82 <_dtoa_r+0x1fa>
 8020d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8020d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020d92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8020d96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020d9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020d9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020da2:	4b7d      	ldr	r3, [pc, #500]	; (8020f98 <_dtoa_r+0x310>)
 8020da4:	2200      	movs	r2, #0
 8020da6:	4630      	mov	r0, r6
 8020da8:	4639      	mov	r1, r7
 8020daa:	f7df fa6d 	bl	8000288 <__aeabi_dsub>
 8020dae:	a36e      	add	r3, pc, #440	; (adr r3, 8020f68 <_dtoa_r+0x2e0>)
 8020db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020db4:	f7df fc20 	bl	80005f8 <__aeabi_dmul>
 8020db8:	a36d      	add	r3, pc, #436	; (adr r3, 8020f70 <_dtoa_r+0x2e8>)
 8020dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dbe:	f7df fa65 	bl	800028c <__adddf3>
 8020dc2:	4606      	mov	r6, r0
 8020dc4:	4628      	mov	r0, r5
 8020dc6:	460f      	mov	r7, r1
 8020dc8:	f7df fbac 	bl	8000524 <__aeabi_i2d>
 8020dcc:	a36a      	add	r3, pc, #424	; (adr r3, 8020f78 <_dtoa_r+0x2f0>)
 8020dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dd2:	f7df fc11 	bl	80005f8 <__aeabi_dmul>
 8020dd6:	4602      	mov	r2, r0
 8020dd8:	460b      	mov	r3, r1
 8020dda:	4630      	mov	r0, r6
 8020ddc:	4639      	mov	r1, r7
 8020dde:	f7df fa55 	bl	800028c <__adddf3>
 8020de2:	4606      	mov	r6, r0
 8020de4:	460f      	mov	r7, r1
 8020de6:	f7df feb7 	bl	8000b58 <__aeabi_d2iz>
 8020dea:	2200      	movs	r2, #0
 8020dec:	4682      	mov	sl, r0
 8020dee:	2300      	movs	r3, #0
 8020df0:	4630      	mov	r0, r6
 8020df2:	4639      	mov	r1, r7
 8020df4:	f7df fe72 	bl	8000adc <__aeabi_dcmplt>
 8020df8:	b148      	cbz	r0, 8020e0e <_dtoa_r+0x186>
 8020dfa:	4650      	mov	r0, sl
 8020dfc:	f7df fb92 	bl	8000524 <__aeabi_i2d>
 8020e00:	4632      	mov	r2, r6
 8020e02:	463b      	mov	r3, r7
 8020e04:	f7df fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8020e08:	b908      	cbnz	r0, 8020e0e <_dtoa_r+0x186>
 8020e0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020e0e:	f1ba 0f16 	cmp.w	sl, #22
 8020e12:	d854      	bhi.n	8020ebe <_dtoa_r+0x236>
 8020e14:	4b61      	ldr	r3, [pc, #388]	; (8020f9c <_dtoa_r+0x314>)
 8020e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020e22:	f7df fe5b 	bl	8000adc <__aeabi_dcmplt>
 8020e26:	2800      	cmp	r0, #0
 8020e28:	d04b      	beq.n	8020ec2 <_dtoa_r+0x23a>
 8020e2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8020e2e:	2300      	movs	r3, #0
 8020e30:	930e      	str	r3, [sp, #56]	; 0x38
 8020e32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020e34:	1b5d      	subs	r5, r3, r5
 8020e36:	1e6b      	subs	r3, r5, #1
 8020e38:	9304      	str	r3, [sp, #16]
 8020e3a:	bf43      	ittte	mi
 8020e3c:	2300      	movmi	r3, #0
 8020e3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8020e42:	9304      	strmi	r3, [sp, #16]
 8020e44:	f04f 0800 	movpl.w	r8, #0
 8020e48:	f1ba 0f00 	cmp.w	sl, #0
 8020e4c:	db3b      	blt.n	8020ec6 <_dtoa_r+0x23e>
 8020e4e:	9b04      	ldr	r3, [sp, #16]
 8020e50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8020e54:	4453      	add	r3, sl
 8020e56:	9304      	str	r3, [sp, #16]
 8020e58:	2300      	movs	r3, #0
 8020e5a:	9306      	str	r3, [sp, #24]
 8020e5c:	9b05      	ldr	r3, [sp, #20]
 8020e5e:	2b09      	cmp	r3, #9
 8020e60:	d869      	bhi.n	8020f36 <_dtoa_r+0x2ae>
 8020e62:	2b05      	cmp	r3, #5
 8020e64:	bfc4      	itt	gt
 8020e66:	3b04      	subgt	r3, #4
 8020e68:	9305      	strgt	r3, [sp, #20]
 8020e6a:	9b05      	ldr	r3, [sp, #20]
 8020e6c:	f1a3 0302 	sub.w	r3, r3, #2
 8020e70:	bfcc      	ite	gt
 8020e72:	2500      	movgt	r5, #0
 8020e74:	2501      	movle	r5, #1
 8020e76:	2b03      	cmp	r3, #3
 8020e78:	d869      	bhi.n	8020f4e <_dtoa_r+0x2c6>
 8020e7a:	e8df f003 	tbb	[pc, r3]
 8020e7e:	4e2c      	.short	0x4e2c
 8020e80:	5a4c      	.short	0x5a4c
 8020e82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8020e86:	441d      	add	r5, r3
 8020e88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020e8c:	2b20      	cmp	r3, #32
 8020e8e:	bfc1      	itttt	gt
 8020e90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020e94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020e98:	fa09 f303 	lslgt.w	r3, r9, r3
 8020e9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020ea0:	bfda      	itte	le
 8020ea2:	f1c3 0320 	rsble	r3, r3, #32
 8020ea6:	fa06 f003 	lslle.w	r0, r6, r3
 8020eaa:	4318      	orrgt	r0, r3
 8020eac:	f7df fb2a 	bl	8000504 <__aeabi_ui2d>
 8020eb0:	2301      	movs	r3, #1
 8020eb2:	4606      	mov	r6, r0
 8020eb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020eb8:	3d01      	subs	r5, #1
 8020eba:	9310      	str	r3, [sp, #64]	; 0x40
 8020ebc:	e771      	b.n	8020da2 <_dtoa_r+0x11a>
 8020ebe:	2301      	movs	r3, #1
 8020ec0:	e7b6      	b.n	8020e30 <_dtoa_r+0x1a8>
 8020ec2:	900e      	str	r0, [sp, #56]	; 0x38
 8020ec4:	e7b5      	b.n	8020e32 <_dtoa_r+0x1aa>
 8020ec6:	f1ca 0300 	rsb	r3, sl, #0
 8020eca:	9306      	str	r3, [sp, #24]
 8020ecc:	2300      	movs	r3, #0
 8020ece:	eba8 080a 	sub.w	r8, r8, sl
 8020ed2:	930d      	str	r3, [sp, #52]	; 0x34
 8020ed4:	e7c2      	b.n	8020e5c <_dtoa_r+0x1d4>
 8020ed6:	2300      	movs	r3, #0
 8020ed8:	9308      	str	r3, [sp, #32]
 8020eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	dc39      	bgt.n	8020f54 <_dtoa_r+0x2cc>
 8020ee0:	f04f 0901 	mov.w	r9, #1
 8020ee4:	f8cd 9004 	str.w	r9, [sp, #4]
 8020ee8:	464b      	mov	r3, r9
 8020eea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8020eee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020ef0:	2200      	movs	r2, #0
 8020ef2:	6042      	str	r2, [r0, #4]
 8020ef4:	2204      	movs	r2, #4
 8020ef6:	f102 0614 	add.w	r6, r2, #20
 8020efa:	429e      	cmp	r6, r3
 8020efc:	6841      	ldr	r1, [r0, #4]
 8020efe:	d92f      	bls.n	8020f60 <_dtoa_r+0x2d8>
 8020f00:	4620      	mov	r0, r4
 8020f02:	f001 f851 	bl	8021fa8 <_Balloc>
 8020f06:	9000      	str	r0, [sp, #0]
 8020f08:	2800      	cmp	r0, #0
 8020f0a:	d14b      	bne.n	8020fa4 <_dtoa_r+0x31c>
 8020f0c:	4b24      	ldr	r3, [pc, #144]	; (8020fa0 <_dtoa_r+0x318>)
 8020f0e:	4602      	mov	r2, r0
 8020f10:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020f14:	e6d1      	b.n	8020cba <_dtoa_r+0x32>
 8020f16:	2301      	movs	r3, #1
 8020f18:	e7de      	b.n	8020ed8 <_dtoa_r+0x250>
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	9308      	str	r3, [sp, #32]
 8020f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f20:	eb0a 0903 	add.w	r9, sl, r3
 8020f24:	f109 0301 	add.w	r3, r9, #1
 8020f28:	2b01      	cmp	r3, #1
 8020f2a:	9301      	str	r3, [sp, #4]
 8020f2c:	bfb8      	it	lt
 8020f2e:	2301      	movlt	r3, #1
 8020f30:	e7dd      	b.n	8020eee <_dtoa_r+0x266>
 8020f32:	2301      	movs	r3, #1
 8020f34:	e7f2      	b.n	8020f1c <_dtoa_r+0x294>
 8020f36:	2501      	movs	r5, #1
 8020f38:	2300      	movs	r3, #0
 8020f3a:	9305      	str	r3, [sp, #20]
 8020f3c:	9508      	str	r5, [sp, #32]
 8020f3e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8020f42:	2200      	movs	r2, #0
 8020f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8020f48:	2312      	movs	r3, #18
 8020f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8020f4c:	e7cf      	b.n	8020eee <_dtoa_r+0x266>
 8020f4e:	2301      	movs	r3, #1
 8020f50:	9308      	str	r3, [sp, #32]
 8020f52:	e7f4      	b.n	8020f3e <_dtoa_r+0x2b6>
 8020f54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8020f58:	f8cd 9004 	str.w	r9, [sp, #4]
 8020f5c:	464b      	mov	r3, r9
 8020f5e:	e7c6      	b.n	8020eee <_dtoa_r+0x266>
 8020f60:	3101      	adds	r1, #1
 8020f62:	6041      	str	r1, [r0, #4]
 8020f64:	0052      	lsls	r2, r2, #1
 8020f66:	e7c6      	b.n	8020ef6 <_dtoa_r+0x26e>
 8020f68:	636f4361 	.word	0x636f4361
 8020f6c:	3fd287a7 	.word	0x3fd287a7
 8020f70:	8b60c8b3 	.word	0x8b60c8b3
 8020f74:	3fc68a28 	.word	0x3fc68a28
 8020f78:	509f79fb 	.word	0x509f79fb
 8020f7c:	3fd34413 	.word	0x3fd34413
 8020f80:	08024f7e 	.word	0x08024f7e
 8020f84:	08024f95 	.word	0x08024f95
 8020f88:	7ff00000 	.word	0x7ff00000
 8020f8c:	08024f7a 	.word	0x08024f7a
 8020f90:	08024f71 	.word	0x08024f71
 8020f94:	08024df1 	.word	0x08024df1
 8020f98:	3ff80000 	.word	0x3ff80000
 8020f9c:	08025110 	.word	0x08025110
 8020fa0:	08024ff4 	.word	0x08024ff4
 8020fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020fa6:	9a00      	ldr	r2, [sp, #0]
 8020fa8:	601a      	str	r2, [r3, #0]
 8020faa:	9b01      	ldr	r3, [sp, #4]
 8020fac:	2b0e      	cmp	r3, #14
 8020fae:	f200 80ad 	bhi.w	802110c <_dtoa_r+0x484>
 8020fb2:	2d00      	cmp	r5, #0
 8020fb4:	f000 80aa 	beq.w	802110c <_dtoa_r+0x484>
 8020fb8:	f1ba 0f00 	cmp.w	sl, #0
 8020fbc:	dd36      	ble.n	802102c <_dtoa_r+0x3a4>
 8020fbe:	4ac3      	ldr	r2, [pc, #780]	; (80212cc <_dtoa_r+0x644>)
 8020fc0:	f00a 030f 	and.w	r3, sl, #15
 8020fc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020fc8:	ed93 7b00 	vldr	d7, [r3]
 8020fcc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8020fd0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8020fd4:	eeb0 8a47 	vmov.f32	s16, s14
 8020fd8:	eef0 8a67 	vmov.f32	s17, s15
 8020fdc:	d016      	beq.n	802100c <_dtoa_r+0x384>
 8020fde:	4bbc      	ldr	r3, [pc, #752]	; (80212d0 <_dtoa_r+0x648>)
 8020fe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020fe8:	f7df fc30 	bl	800084c <__aeabi_ddiv>
 8020fec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020ff0:	f007 070f 	and.w	r7, r7, #15
 8020ff4:	2503      	movs	r5, #3
 8020ff6:	4eb6      	ldr	r6, [pc, #728]	; (80212d0 <_dtoa_r+0x648>)
 8020ff8:	b957      	cbnz	r7, 8021010 <_dtoa_r+0x388>
 8020ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020ffe:	ec53 2b18 	vmov	r2, r3, d8
 8021002:	f7df fc23 	bl	800084c <__aeabi_ddiv>
 8021006:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802100a:	e029      	b.n	8021060 <_dtoa_r+0x3d8>
 802100c:	2502      	movs	r5, #2
 802100e:	e7f2      	b.n	8020ff6 <_dtoa_r+0x36e>
 8021010:	07f9      	lsls	r1, r7, #31
 8021012:	d508      	bpl.n	8021026 <_dtoa_r+0x39e>
 8021014:	ec51 0b18 	vmov	r0, r1, d8
 8021018:	e9d6 2300 	ldrd	r2, r3, [r6]
 802101c:	f7df faec 	bl	80005f8 <__aeabi_dmul>
 8021020:	ec41 0b18 	vmov	d8, r0, r1
 8021024:	3501      	adds	r5, #1
 8021026:	107f      	asrs	r7, r7, #1
 8021028:	3608      	adds	r6, #8
 802102a:	e7e5      	b.n	8020ff8 <_dtoa_r+0x370>
 802102c:	f000 80a6 	beq.w	802117c <_dtoa_r+0x4f4>
 8021030:	f1ca 0600 	rsb	r6, sl, #0
 8021034:	4ba5      	ldr	r3, [pc, #660]	; (80212cc <_dtoa_r+0x644>)
 8021036:	4fa6      	ldr	r7, [pc, #664]	; (80212d0 <_dtoa_r+0x648>)
 8021038:	f006 020f 	and.w	r2, r6, #15
 802103c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021044:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8021048:	f7df fad6 	bl	80005f8 <__aeabi_dmul>
 802104c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8021050:	1136      	asrs	r6, r6, #4
 8021052:	2300      	movs	r3, #0
 8021054:	2502      	movs	r5, #2
 8021056:	2e00      	cmp	r6, #0
 8021058:	f040 8085 	bne.w	8021166 <_dtoa_r+0x4de>
 802105c:	2b00      	cmp	r3, #0
 802105e:	d1d2      	bne.n	8021006 <_dtoa_r+0x37e>
 8021060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021062:	2b00      	cmp	r3, #0
 8021064:	f000 808c 	beq.w	8021180 <_dtoa_r+0x4f8>
 8021068:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802106c:	4b99      	ldr	r3, [pc, #612]	; (80212d4 <_dtoa_r+0x64c>)
 802106e:	2200      	movs	r2, #0
 8021070:	4630      	mov	r0, r6
 8021072:	4639      	mov	r1, r7
 8021074:	f7df fd32 	bl	8000adc <__aeabi_dcmplt>
 8021078:	2800      	cmp	r0, #0
 802107a:	f000 8081 	beq.w	8021180 <_dtoa_r+0x4f8>
 802107e:	9b01      	ldr	r3, [sp, #4]
 8021080:	2b00      	cmp	r3, #0
 8021082:	d07d      	beq.n	8021180 <_dtoa_r+0x4f8>
 8021084:	f1b9 0f00 	cmp.w	r9, #0
 8021088:	dd3c      	ble.n	8021104 <_dtoa_r+0x47c>
 802108a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802108e:	9307      	str	r3, [sp, #28]
 8021090:	2200      	movs	r2, #0
 8021092:	4b91      	ldr	r3, [pc, #580]	; (80212d8 <_dtoa_r+0x650>)
 8021094:	4630      	mov	r0, r6
 8021096:	4639      	mov	r1, r7
 8021098:	f7df faae 	bl	80005f8 <__aeabi_dmul>
 802109c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80210a0:	3501      	adds	r5, #1
 80210a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80210a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80210aa:	4628      	mov	r0, r5
 80210ac:	f7df fa3a 	bl	8000524 <__aeabi_i2d>
 80210b0:	4632      	mov	r2, r6
 80210b2:	463b      	mov	r3, r7
 80210b4:	f7df faa0 	bl	80005f8 <__aeabi_dmul>
 80210b8:	4b88      	ldr	r3, [pc, #544]	; (80212dc <_dtoa_r+0x654>)
 80210ba:	2200      	movs	r2, #0
 80210bc:	f7df f8e6 	bl	800028c <__adddf3>
 80210c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80210c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80210c8:	9303      	str	r3, [sp, #12]
 80210ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	d15c      	bne.n	802118a <_dtoa_r+0x502>
 80210d0:	4b83      	ldr	r3, [pc, #524]	; (80212e0 <_dtoa_r+0x658>)
 80210d2:	2200      	movs	r2, #0
 80210d4:	4630      	mov	r0, r6
 80210d6:	4639      	mov	r1, r7
 80210d8:	f7df f8d6 	bl	8000288 <__aeabi_dsub>
 80210dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80210e0:	4606      	mov	r6, r0
 80210e2:	460f      	mov	r7, r1
 80210e4:	f7df fd18 	bl	8000b18 <__aeabi_dcmpgt>
 80210e8:	2800      	cmp	r0, #0
 80210ea:	f040 8296 	bne.w	802161a <_dtoa_r+0x992>
 80210ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80210f2:	4630      	mov	r0, r6
 80210f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80210f8:	4639      	mov	r1, r7
 80210fa:	f7df fcef 	bl	8000adc <__aeabi_dcmplt>
 80210fe:	2800      	cmp	r0, #0
 8021100:	f040 8288 	bne.w	8021614 <_dtoa_r+0x98c>
 8021104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8021108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802110c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802110e:	2b00      	cmp	r3, #0
 8021110:	f2c0 8158 	blt.w	80213c4 <_dtoa_r+0x73c>
 8021114:	f1ba 0f0e 	cmp.w	sl, #14
 8021118:	f300 8154 	bgt.w	80213c4 <_dtoa_r+0x73c>
 802111c:	4b6b      	ldr	r3, [pc, #428]	; (80212cc <_dtoa_r+0x644>)
 802111e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8021122:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021128:	2b00      	cmp	r3, #0
 802112a:	f280 80e3 	bge.w	80212f4 <_dtoa_r+0x66c>
 802112e:	9b01      	ldr	r3, [sp, #4]
 8021130:	2b00      	cmp	r3, #0
 8021132:	f300 80df 	bgt.w	80212f4 <_dtoa_r+0x66c>
 8021136:	f040 826d 	bne.w	8021614 <_dtoa_r+0x98c>
 802113a:	4b69      	ldr	r3, [pc, #420]	; (80212e0 <_dtoa_r+0x658>)
 802113c:	2200      	movs	r2, #0
 802113e:	4640      	mov	r0, r8
 8021140:	4649      	mov	r1, r9
 8021142:	f7df fa59 	bl	80005f8 <__aeabi_dmul>
 8021146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802114a:	f7df fcdb 	bl	8000b04 <__aeabi_dcmpge>
 802114e:	9e01      	ldr	r6, [sp, #4]
 8021150:	4637      	mov	r7, r6
 8021152:	2800      	cmp	r0, #0
 8021154:	f040 8243 	bne.w	80215de <_dtoa_r+0x956>
 8021158:	9d00      	ldr	r5, [sp, #0]
 802115a:	2331      	movs	r3, #49	; 0x31
 802115c:	f805 3b01 	strb.w	r3, [r5], #1
 8021160:	f10a 0a01 	add.w	sl, sl, #1
 8021164:	e23f      	b.n	80215e6 <_dtoa_r+0x95e>
 8021166:	07f2      	lsls	r2, r6, #31
 8021168:	d505      	bpl.n	8021176 <_dtoa_r+0x4ee>
 802116a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802116e:	f7df fa43 	bl	80005f8 <__aeabi_dmul>
 8021172:	3501      	adds	r5, #1
 8021174:	2301      	movs	r3, #1
 8021176:	1076      	asrs	r6, r6, #1
 8021178:	3708      	adds	r7, #8
 802117a:	e76c      	b.n	8021056 <_dtoa_r+0x3ce>
 802117c:	2502      	movs	r5, #2
 802117e:	e76f      	b.n	8021060 <_dtoa_r+0x3d8>
 8021180:	9b01      	ldr	r3, [sp, #4]
 8021182:	f8cd a01c 	str.w	sl, [sp, #28]
 8021186:	930c      	str	r3, [sp, #48]	; 0x30
 8021188:	e78d      	b.n	80210a6 <_dtoa_r+0x41e>
 802118a:	9900      	ldr	r1, [sp, #0]
 802118c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802118e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021190:	4b4e      	ldr	r3, [pc, #312]	; (80212cc <_dtoa_r+0x644>)
 8021192:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021196:	4401      	add	r1, r0
 8021198:	9102      	str	r1, [sp, #8]
 802119a:	9908      	ldr	r1, [sp, #32]
 802119c:	eeb0 8a47 	vmov.f32	s16, s14
 80211a0:	eef0 8a67 	vmov.f32	s17, s15
 80211a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80211a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80211ac:	2900      	cmp	r1, #0
 80211ae:	d045      	beq.n	802123c <_dtoa_r+0x5b4>
 80211b0:	494c      	ldr	r1, [pc, #304]	; (80212e4 <_dtoa_r+0x65c>)
 80211b2:	2000      	movs	r0, #0
 80211b4:	f7df fb4a 	bl	800084c <__aeabi_ddiv>
 80211b8:	ec53 2b18 	vmov	r2, r3, d8
 80211bc:	f7df f864 	bl	8000288 <__aeabi_dsub>
 80211c0:	9d00      	ldr	r5, [sp, #0]
 80211c2:	ec41 0b18 	vmov	d8, r0, r1
 80211c6:	4639      	mov	r1, r7
 80211c8:	4630      	mov	r0, r6
 80211ca:	f7df fcc5 	bl	8000b58 <__aeabi_d2iz>
 80211ce:	900c      	str	r0, [sp, #48]	; 0x30
 80211d0:	f7df f9a8 	bl	8000524 <__aeabi_i2d>
 80211d4:	4602      	mov	r2, r0
 80211d6:	460b      	mov	r3, r1
 80211d8:	4630      	mov	r0, r6
 80211da:	4639      	mov	r1, r7
 80211dc:	f7df f854 	bl	8000288 <__aeabi_dsub>
 80211e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80211e2:	3330      	adds	r3, #48	; 0x30
 80211e4:	f805 3b01 	strb.w	r3, [r5], #1
 80211e8:	ec53 2b18 	vmov	r2, r3, d8
 80211ec:	4606      	mov	r6, r0
 80211ee:	460f      	mov	r7, r1
 80211f0:	f7df fc74 	bl	8000adc <__aeabi_dcmplt>
 80211f4:	2800      	cmp	r0, #0
 80211f6:	d165      	bne.n	80212c4 <_dtoa_r+0x63c>
 80211f8:	4632      	mov	r2, r6
 80211fa:	463b      	mov	r3, r7
 80211fc:	4935      	ldr	r1, [pc, #212]	; (80212d4 <_dtoa_r+0x64c>)
 80211fe:	2000      	movs	r0, #0
 8021200:	f7df f842 	bl	8000288 <__aeabi_dsub>
 8021204:	ec53 2b18 	vmov	r2, r3, d8
 8021208:	f7df fc68 	bl	8000adc <__aeabi_dcmplt>
 802120c:	2800      	cmp	r0, #0
 802120e:	f040 80b9 	bne.w	8021384 <_dtoa_r+0x6fc>
 8021212:	9b02      	ldr	r3, [sp, #8]
 8021214:	429d      	cmp	r5, r3
 8021216:	f43f af75 	beq.w	8021104 <_dtoa_r+0x47c>
 802121a:	4b2f      	ldr	r3, [pc, #188]	; (80212d8 <_dtoa_r+0x650>)
 802121c:	ec51 0b18 	vmov	r0, r1, d8
 8021220:	2200      	movs	r2, #0
 8021222:	f7df f9e9 	bl	80005f8 <__aeabi_dmul>
 8021226:	4b2c      	ldr	r3, [pc, #176]	; (80212d8 <_dtoa_r+0x650>)
 8021228:	ec41 0b18 	vmov	d8, r0, r1
 802122c:	2200      	movs	r2, #0
 802122e:	4630      	mov	r0, r6
 8021230:	4639      	mov	r1, r7
 8021232:	f7df f9e1 	bl	80005f8 <__aeabi_dmul>
 8021236:	4606      	mov	r6, r0
 8021238:	460f      	mov	r7, r1
 802123a:	e7c4      	b.n	80211c6 <_dtoa_r+0x53e>
 802123c:	ec51 0b17 	vmov	r0, r1, d7
 8021240:	f7df f9da 	bl	80005f8 <__aeabi_dmul>
 8021244:	9b02      	ldr	r3, [sp, #8]
 8021246:	9d00      	ldr	r5, [sp, #0]
 8021248:	930c      	str	r3, [sp, #48]	; 0x30
 802124a:	ec41 0b18 	vmov	d8, r0, r1
 802124e:	4639      	mov	r1, r7
 8021250:	4630      	mov	r0, r6
 8021252:	f7df fc81 	bl	8000b58 <__aeabi_d2iz>
 8021256:	9011      	str	r0, [sp, #68]	; 0x44
 8021258:	f7df f964 	bl	8000524 <__aeabi_i2d>
 802125c:	4602      	mov	r2, r0
 802125e:	460b      	mov	r3, r1
 8021260:	4630      	mov	r0, r6
 8021262:	4639      	mov	r1, r7
 8021264:	f7df f810 	bl	8000288 <__aeabi_dsub>
 8021268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802126a:	3330      	adds	r3, #48	; 0x30
 802126c:	f805 3b01 	strb.w	r3, [r5], #1
 8021270:	9b02      	ldr	r3, [sp, #8]
 8021272:	429d      	cmp	r5, r3
 8021274:	4606      	mov	r6, r0
 8021276:	460f      	mov	r7, r1
 8021278:	f04f 0200 	mov.w	r2, #0
 802127c:	d134      	bne.n	80212e8 <_dtoa_r+0x660>
 802127e:	4b19      	ldr	r3, [pc, #100]	; (80212e4 <_dtoa_r+0x65c>)
 8021280:	ec51 0b18 	vmov	r0, r1, d8
 8021284:	f7df f802 	bl	800028c <__adddf3>
 8021288:	4602      	mov	r2, r0
 802128a:	460b      	mov	r3, r1
 802128c:	4630      	mov	r0, r6
 802128e:	4639      	mov	r1, r7
 8021290:	f7df fc42 	bl	8000b18 <__aeabi_dcmpgt>
 8021294:	2800      	cmp	r0, #0
 8021296:	d175      	bne.n	8021384 <_dtoa_r+0x6fc>
 8021298:	ec53 2b18 	vmov	r2, r3, d8
 802129c:	4911      	ldr	r1, [pc, #68]	; (80212e4 <_dtoa_r+0x65c>)
 802129e:	2000      	movs	r0, #0
 80212a0:	f7de fff2 	bl	8000288 <__aeabi_dsub>
 80212a4:	4602      	mov	r2, r0
 80212a6:	460b      	mov	r3, r1
 80212a8:	4630      	mov	r0, r6
 80212aa:	4639      	mov	r1, r7
 80212ac:	f7df fc16 	bl	8000adc <__aeabi_dcmplt>
 80212b0:	2800      	cmp	r0, #0
 80212b2:	f43f af27 	beq.w	8021104 <_dtoa_r+0x47c>
 80212b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80212b8:	1e6b      	subs	r3, r5, #1
 80212ba:	930c      	str	r3, [sp, #48]	; 0x30
 80212bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80212c0:	2b30      	cmp	r3, #48	; 0x30
 80212c2:	d0f8      	beq.n	80212b6 <_dtoa_r+0x62e>
 80212c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80212c8:	e04a      	b.n	8021360 <_dtoa_r+0x6d8>
 80212ca:	bf00      	nop
 80212cc:	08025110 	.word	0x08025110
 80212d0:	080250e8 	.word	0x080250e8
 80212d4:	3ff00000 	.word	0x3ff00000
 80212d8:	40240000 	.word	0x40240000
 80212dc:	401c0000 	.word	0x401c0000
 80212e0:	40140000 	.word	0x40140000
 80212e4:	3fe00000 	.word	0x3fe00000
 80212e8:	4baf      	ldr	r3, [pc, #700]	; (80215a8 <_dtoa_r+0x920>)
 80212ea:	f7df f985 	bl	80005f8 <__aeabi_dmul>
 80212ee:	4606      	mov	r6, r0
 80212f0:	460f      	mov	r7, r1
 80212f2:	e7ac      	b.n	802124e <_dtoa_r+0x5c6>
 80212f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80212f8:	9d00      	ldr	r5, [sp, #0]
 80212fa:	4642      	mov	r2, r8
 80212fc:	464b      	mov	r3, r9
 80212fe:	4630      	mov	r0, r6
 8021300:	4639      	mov	r1, r7
 8021302:	f7df faa3 	bl	800084c <__aeabi_ddiv>
 8021306:	f7df fc27 	bl	8000b58 <__aeabi_d2iz>
 802130a:	9002      	str	r0, [sp, #8]
 802130c:	f7df f90a 	bl	8000524 <__aeabi_i2d>
 8021310:	4642      	mov	r2, r8
 8021312:	464b      	mov	r3, r9
 8021314:	f7df f970 	bl	80005f8 <__aeabi_dmul>
 8021318:	4602      	mov	r2, r0
 802131a:	460b      	mov	r3, r1
 802131c:	4630      	mov	r0, r6
 802131e:	4639      	mov	r1, r7
 8021320:	f7de ffb2 	bl	8000288 <__aeabi_dsub>
 8021324:	9e02      	ldr	r6, [sp, #8]
 8021326:	9f01      	ldr	r7, [sp, #4]
 8021328:	3630      	adds	r6, #48	; 0x30
 802132a:	f805 6b01 	strb.w	r6, [r5], #1
 802132e:	9e00      	ldr	r6, [sp, #0]
 8021330:	1bae      	subs	r6, r5, r6
 8021332:	42b7      	cmp	r7, r6
 8021334:	4602      	mov	r2, r0
 8021336:	460b      	mov	r3, r1
 8021338:	d137      	bne.n	80213aa <_dtoa_r+0x722>
 802133a:	f7de ffa7 	bl	800028c <__adddf3>
 802133e:	4642      	mov	r2, r8
 8021340:	464b      	mov	r3, r9
 8021342:	4606      	mov	r6, r0
 8021344:	460f      	mov	r7, r1
 8021346:	f7df fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 802134a:	b9c8      	cbnz	r0, 8021380 <_dtoa_r+0x6f8>
 802134c:	4642      	mov	r2, r8
 802134e:	464b      	mov	r3, r9
 8021350:	4630      	mov	r0, r6
 8021352:	4639      	mov	r1, r7
 8021354:	f7df fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8021358:	b110      	cbz	r0, 8021360 <_dtoa_r+0x6d8>
 802135a:	9b02      	ldr	r3, [sp, #8]
 802135c:	07d9      	lsls	r1, r3, #31
 802135e:	d40f      	bmi.n	8021380 <_dtoa_r+0x6f8>
 8021360:	4620      	mov	r0, r4
 8021362:	4659      	mov	r1, fp
 8021364:	f000 fe60 	bl	8022028 <_Bfree>
 8021368:	2300      	movs	r3, #0
 802136a:	702b      	strb	r3, [r5, #0]
 802136c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802136e:	f10a 0001 	add.w	r0, sl, #1
 8021372:	6018      	str	r0, [r3, #0]
 8021374:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021376:	2b00      	cmp	r3, #0
 8021378:	f43f acd8 	beq.w	8020d2c <_dtoa_r+0xa4>
 802137c:	601d      	str	r5, [r3, #0]
 802137e:	e4d5      	b.n	8020d2c <_dtoa_r+0xa4>
 8021380:	f8cd a01c 	str.w	sl, [sp, #28]
 8021384:	462b      	mov	r3, r5
 8021386:	461d      	mov	r5, r3
 8021388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802138c:	2a39      	cmp	r2, #57	; 0x39
 802138e:	d108      	bne.n	80213a2 <_dtoa_r+0x71a>
 8021390:	9a00      	ldr	r2, [sp, #0]
 8021392:	429a      	cmp	r2, r3
 8021394:	d1f7      	bne.n	8021386 <_dtoa_r+0x6fe>
 8021396:	9a07      	ldr	r2, [sp, #28]
 8021398:	9900      	ldr	r1, [sp, #0]
 802139a:	3201      	adds	r2, #1
 802139c:	9207      	str	r2, [sp, #28]
 802139e:	2230      	movs	r2, #48	; 0x30
 80213a0:	700a      	strb	r2, [r1, #0]
 80213a2:	781a      	ldrb	r2, [r3, #0]
 80213a4:	3201      	adds	r2, #1
 80213a6:	701a      	strb	r2, [r3, #0]
 80213a8:	e78c      	b.n	80212c4 <_dtoa_r+0x63c>
 80213aa:	4b7f      	ldr	r3, [pc, #508]	; (80215a8 <_dtoa_r+0x920>)
 80213ac:	2200      	movs	r2, #0
 80213ae:	f7df f923 	bl	80005f8 <__aeabi_dmul>
 80213b2:	2200      	movs	r2, #0
 80213b4:	2300      	movs	r3, #0
 80213b6:	4606      	mov	r6, r0
 80213b8:	460f      	mov	r7, r1
 80213ba:	f7df fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 80213be:	2800      	cmp	r0, #0
 80213c0:	d09b      	beq.n	80212fa <_dtoa_r+0x672>
 80213c2:	e7cd      	b.n	8021360 <_dtoa_r+0x6d8>
 80213c4:	9a08      	ldr	r2, [sp, #32]
 80213c6:	2a00      	cmp	r2, #0
 80213c8:	f000 80c4 	beq.w	8021554 <_dtoa_r+0x8cc>
 80213cc:	9a05      	ldr	r2, [sp, #20]
 80213ce:	2a01      	cmp	r2, #1
 80213d0:	f300 80a8 	bgt.w	8021524 <_dtoa_r+0x89c>
 80213d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80213d6:	2a00      	cmp	r2, #0
 80213d8:	f000 80a0 	beq.w	802151c <_dtoa_r+0x894>
 80213dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80213e0:	9e06      	ldr	r6, [sp, #24]
 80213e2:	4645      	mov	r5, r8
 80213e4:	9a04      	ldr	r2, [sp, #16]
 80213e6:	2101      	movs	r1, #1
 80213e8:	441a      	add	r2, r3
 80213ea:	4620      	mov	r0, r4
 80213ec:	4498      	add	r8, r3
 80213ee:	9204      	str	r2, [sp, #16]
 80213f0:	f000 ff20 	bl	8022234 <__i2b>
 80213f4:	4607      	mov	r7, r0
 80213f6:	2d00      	cmp	r5, #0
 80213f8:	dd0b      	ble.n	8021412 <_dtoa_r+0x78a>
 80213fa:	9b04      	ldr	r3, [sp, #16]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	dd08      	ble.n	8021412 <_dtoa_r+0x78a>
 8021400:	42ab      	cmp	r3, r5
 8021402:	9a04      	ldr	r2, [sp, #16]
 8021404:	bfa8      	it	ge
 8021406:	462b      	movge	r3, r5
 8021408:	eba8 0803 	sub.w	r8, r8, r3
 802140c:	1aed      	subs	r5, r5, r3
 802140e:	1ad3      	subs	r3, r2, r3
 8021410:	9304      	str	r3, [sp, #16]
 8021412:	9b06      	ldr	r3, [sp, #24]
 8021414:	b1fb      	cbz	r3, 8021456 <_dtoa_r+0x7ce>
 8021416:	9b08      	ldr	r3, [sp, #32]
 8021418:	2b00      	cmp	r3, #0
 802141a:	f000 809f 	beq.w	802155c <_dtoa_r+0x8d4>
 802141e:	2e00      	cmp	r6, #0
 8021420:	dd11      	ble.n	8021446 <_dtoa_r+0x7be>
 8021422:	4639      	mov	r1, r7
 8021424:	4632      	mov	r2, r6
 8021426:	4620      	mov	r0, r4
 8021428:	f000 ffc0 	bl	80223ac <__pow5mult>
 802142c:	465a      	mov	r2, fp
 802142e:	4601      	mov	r1, r0
 8021430:	4607      	mov	r7, r0
 8021432:	4620      	mov	r0, r4
 8021434:	f000 ff14 	bl	8022260 <__multiply>
 8021438:	4659      	mov	r1, fp
 802143a:	9007      	str	r0, [sp, #28]
 802143c:	4620      	mov	r0, r4
 802143e:	f000 fdf3 	bl	8022028 <_Bfree>
 8021442:	9b07      	ldr	r3, [sp, #28]
 8021444:	469b      	mov	fp, r3
 8021446:	9b06      	ldr	r3, [sp, #24]
 8021448:	1b9a      	subs	r2, r3, r6
 802144a:	d004      	beq.n	8021456 <_dtoa_r+0x7ce>
 802144c:	4659      	mov	r1, fp
 802144e:	4620      	mov	r0, r4
 8021450:	f000 ffac 	bl	80223ac <__pow5mult>
 8021454:	4683      	mov	fp, r0
 8021456:	2101      	movs	r1, #1
 8021458:	4620      	mov	r0, r4
 802145a:	f000 feeb 	bl	8022234 <__i2b>
 802145e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021460:	2b00      	cmp	r3, #0
 8021462:	4606      	mov	r6, r0
 8021464:	dd7c      	ble.n	8021560 <_dtoa_r+0x8d8>
 8021466:	461a      	mov	r2, r3
 8021468:	4601      	mov	r1, r0
 802146a:	4620      	mov	r0, r4
 802146c:	f000 ff9e 	bl	80223ac <__pow5mult>
 8021470:	9b05      	ldr	r3, [sp, #20]
 8021472:	2b01      	cmp	r3, #1
 8021474:	4606      	mov	r6, r0
 8021476:	dd76      	ble.n	8021566 <_dtoa_r+0x8de>
 8021478:	2300      	movs	r3, #0
 802147a:	9306      	str	r3, [sp, #24]
 802147c:	6933      	ldr	r3, [r6, #16]
 802147e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021482:	6918      	ldr	r0, [r3, #16]
 8021484:	f000 fe86 	bl	8022194 <__hi0bits>
 8021488:	f1c0 0020 	rsb	r0, r0, #32
 802148c:	9b04      	ldr	r3, [sp, #16]
 802148e:	4418      	add	r0, r3
 8021490:	f010 001f 	ands.w	r0, r0, #31
 8021494:	f000 8086 	beq.w	80215a4 <_dtoa_r+0x91c>
 8021498:	f1c0 0320 	rsb	r3, r0, #32
 802149c:	2b04      	cmp	r3, #4
 802149e:	dd7f      	ble.n	80215a0 <_dtoa_r+0x918>
 80214a0:	f1c0 001c 	rsb	r0, r0, #28
 80214a4:	9b04      	ldr	r3, [sp, #16]
 80214a6:	4403      	add	r3, r0
 80214a8:	4480      	add	r8, r0
 80214aa:	4405      	add	r5, r0
 80214ac:	9304      	str	r3, [sp, #16]
 80214ae:	f1b8 0f00 	cmp.w	r8, #0
 80214b2:	dd05      	ble.n	80214c0 <_dtoa_r+0x838>
 80214b4:	4659      	mov	r1, fp
 80214b6:	4642      	mov	r2, r8
 80214b8:	4620      	mov	r0, r4
 80214ba:	f000 ffd1 	bl	8022460 <__lshift>
 80214be:	4683      	mov	fp, r0
 80214c0:	9b04      	ldr	r3, [sp, #16]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	dd05      	ble.n	80214d2 <_dtoa_r+0x84a>
 80214c6:	4631      	mov	r1, r6
 80214c8:	461a      	mov	r2, r3
 80214ca:	4620      	mov	r0, r4
 80214cc:	f000 ffc8 	bl	8022460 <__lshift>
 80214d0:	4606      	mov	r6, r0
 80214d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d069      	beq.n	80215ac <_dtoa_r+0x924>
 80214d8:	4631      	mov	r1, r6
 80214da:	4658      	mov	r0, fp
 80214dc:	f001 f82c 	bl	8022538 <__mcmp>
 80214e0:	2800      	cmp	r0, #0
 80214e2:	da63      	bge.n	80215ac <_dtoa_r+0x924>
 80214e4:	2300      	movs	r3, #0
 80214e6:	4659      	mov	r1, fp
 80214e8:	220a      	movs	r2, #10
 80214ea:	4620      	mov	r0, r4
 80214ec:	f000 fdbe 	bl	802206c <__multadd>
 80214f0:	9b08      	ldr	r3, [sp, #32]
 80214f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80214f6:	4683      	mov	fp, r0
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	f000 818f 	beq.w	802181c <_dtoa_r+0xb94>
 80214fe:	4639      	mov	r1, r7
 8021500:	2300      	movs	r3, #0
 8021502:	220a      	movs	r2, #10
 8021504:	4620      	mov	r0, r4
 8021506:	f000 fdb1 	bl	802206c <__multadd>
 802150a:	f1b9 0f00 	cmp.w	r9, #0
 802150e:	4607      	mov	r7, r0
 8021510:	f300 808e 	bgt.w	8021630 <_dtoa_r+0x9a8>
 8021514:	9b05      	ldr	r3, [sp, #20]
 8021516:	2b02      	cmp	r3, #2
 8021518:	dc50      	bgt.n	80215bc <_dtoa_r+0x934>
 802151a:	e089      	b.n	8021630 <_dtoa_r+0x9a8>
 802151c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802151e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021522:	e75d      	b.n	80213e0 <_dtoa_r+0x758>
 8021524:	9b01      	ldr	r3, [sp, #4]
 8021526:	1e5e      	subs	r6, r3, #1
 8021528:	9b06      	ldr	r3, [sp, #24]
 802152a:	42b3      	cmp	r3, r6
 802152c:	bfbf      	itttt	lt
 802152e:	9b06      	ldrlt	r3, [sp, #24]
 8021530:	9606      	strlt	r6, [sp, #24]
 8021532:	1af2      	sublt	r2, r6, r3
 8021534:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8021536:	bfb6      	itet	lt
 8021538:	189b      	addlt	r3, r3, r2
 802153a:	1b9e      	subge	r6, r3, r6
 802153c:	930d      	strlt	r3, [sp, #52]	; 0x34
 802153e:	9b01      	ldr	r3, [sp, #4]
 8021540:	bfb8      	it	lt
 8021542:	2600      	movlt	r6, #0
 8021544:	2b00      	cmp	r3, #0
 8021546:	bfb5      	itete	lt
 8021548:	eba8 0503 	sublt.w	r5, r8, r3
 802154c:	9b01      	ldrge	r3, [sp, #4]
 802154e:	2300      	movlt	r3, #0
 8021550:	4645      	movge	r5, r8
 8021552:	e747      	b.n	80213e4 <_dtoa_r+0x75c>
 8021554:	9e06      	ldr	r6, [sp, #24]
 8021556:	9f08      	ldr	r7, [sp, #32]
 8021558:	4645      	mov	r5, r8
 802155a:	e74c      	b.n	80213f6 <_dtoa_r+0x76e>
 802155c:	9a06      	ldr	r2, [sp, #24]
 802155e:	e775      	b.n	802144c <_dtoa_r+0x7c4>
 8021560:	9b05      	ldr	r3, [sp, #20]
 8021562:	2b01      	cmp	r3, #1
 8021564:	dc18      	bgt.n	8021598 <_dtoa_r+0x910>
 8021566:	9b02      	ldr	r3, [sp, #8]
 8021568:	b9b3      	cbnz	r3, 8021598 <_dtoa_r+0x910>
 802156a:	9b03      	ldr	r3, [sp, #12]
 802156c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021570:	b9a3      	cbnz	r3, 802159c <_dtoa_r+0x914>
 8021572:	9b03      	ldr	r3, [sp, #12]
 8021574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021578:	0d1b      	lsrs	r3, r3, #20
 802157a:	051b      	lsls	r3, r3, #20
 802157c:	b12b      	cbz	r3, 802158a <_dtoa_r+0x902>
 802157e:	9b04      	ldr	r3, [sp, #16]
 8021580:	3301      	adds	r3, #1
 8021582:	9304      	str	r3, [sp, #16]
 8021584:	f108 0801 	add.w	r8, r8, #1
 8021588:	2301      	movs	r3, #1
 802158a:	9306      	str	r3, [sp, #24]
 802158c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802158e:	2b00      	cmp	r3, #0
 8021590:	f47f af74 	bne.w	802147c <_dtoa_r+0x7f4>
 8021594:	2001      	movs	r0, #1
 8021596:	e779      	b.n	802148c <_dtoa_r+0x804>
 8021598:	2300      	movs	r3, #0
 802159a:	e7f6      	b.n	802158a <_dtoa_r+0x902>
 802159c:	9b02      	ldr	r3, [sp, #8]
 802159e:	e7f4      	b.n	802158a <_dtoa_r+0x902>
 80215a0:	d085      	beq.n	80214ae <_dtoa_r+0x826>
 80215a2:	4618      	mov	r0, r3
 80215a4:	301c      	adds	r0, #28
 80215a6:	e77d      	b.n	80214a4 <_dtoa_r+0x81c>
 80215a8:	40240000 	.word	0x40240000
 80215ac:	9b01      	ldr	r3, [sp, #4]
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	dc38      	bgt.n	8021624 <_dtoa_r+0x99c>
 80215b2:	9b05      	ldr	r3, [sp, #20]
 80215b4:	2b02      	cmp	r3, #2
 80215b6:	dd35      	ble.n	8021624 <_dtoa_r+0x99c>
 80215b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80215bc:	f1b9 0f00 	cmp.w	r9, #0
 80215c0:	d10d      	bne.n	80215de <_dtoa_r+0x956>
 80215c2:	4631      	mov	r1, r6
 80215c4:	464b      	mov	r3, r9
 80215c6:	2205      	movs	r2, #5
 80215c8:	4620      	mov	r0, r4
 80215ca:	f000 fd4f 	bl	802206c <__multadd>
 80215ce:	4601      	mov	r1, r0
 80215d0:	4606      	mov	r6, r0
 80215d2:	4658      	mov	r0, fp
 80215d4:	f000 ffb0 	bl	8022538 <__mcmp>
 80215d8:	2800      	cmp	r0, #0
 80215da:	f73f adbd 	bgt.w	8021158 <_dtoa_r+0x4d0>
 80215de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215e0:	9d00      	ldr	r5, [sp, #0]
 80215e2:	ea6f 0a03 	mvn.w	sl, r3
 80215e6:	f04f 0800 	mov.w	r8, #0
 80215ea:	4631      	mov	r1, r6
 80215ec:	4620      	mov	r0, r4
 80215ee:	f000 fd1b 	bl	8022028 <_Bfree>
 80215f2:	2f00      	cmp	r7, #0
 80215f4:	f43f aeb4 	beq.w	8021360 <_dtoa_r+0x6d8>
 80215f8:	f1b8 0f00 	cmp.w	r8, #0
 80215fc:	d005      	beq.n	802160a <_dtoa_r+0x982>
 80215fe:	45b8      	cmp	r8, r7
 8021600:	d003      	beq.n	802160a <_dtoa_r+0x982>
 8021602:	4641      	mov	r1, r8
 8021604:	4620      	mov	r0, r4
 8021606:	f000 fd0f 	bl	8022028 <_Bfree>
 802160a:	4639      	mov	r1, r7
 802160c:	4620      	mov	r0, r4
 802160e:	f000 fd0b 	bl	8022028 <_Bfree>
 8021612:	e6a5      	b.n	8021360 <_dtoa_r+0x6d8>
 8021614:	2600      	movs	r6, #0
 8021616:	4637      	mov	r7, r6
 8021618:	e7e1      	b.n	80215de <_dtoa_r+0x956>
 802161a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802161c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8021620:	4637      	mov	r7, r6
 8021622:	e599      	b.n	8021158 <_dtoa_r+0x4d0>
 8021624:	9b08      	ldr	r3, [sp, #32]
 8021626:	f8dd 9004 	ldr.w	r9, [sp, #4]
 802162a:	2b00      	cmp	r3, #0
 802162c:	f000 80fd 	beq.w	802182a <_dtoa_r+0xba2>
 8021630:	2d00      	cmp	r5, #0
 8021632:	dd05      	ble.n	8021640 <_dtoa_r+0x9b8>
 8021634:	4639      	mov	r1, r7
 8021636:	462a      	mov	r2, r5
 8021638:	4620      	mov	r0, r4
 802163a:	f000 ff11 	bl	8022460 <__lshift>
 802163e:	4607      	mov	r7, r0
 8021640:	9b06      	ldr	r3, [sp, #24]
 8021642:	2b00      	cmp	r3, #0
 8021644:	d05c      	beq.n	8021700 <_dtoa_r+0xa78>
 8021646:	6879      	ldr	r1, [r7, #4]
 8021648:	4620      	mov	r0, r4
 802164a:	f000 fcad 	bl	8021fa8 <_Balloc>
 802164e:	4605      	mov	r5, r0
 8021650:	b928      	cbnz	r0, 802165e <_dtoa_r+0x9d6>
 8021652:	4b80      	ldr	r3, [pc, #512]	; (8021854 <_dtoa_r+0xbcc>)
 8021654:	4602      	mov	r2, r0
 8021656:	f240 21ea 	movw	r1, #746	; 0x2ea
 802165a:	f7ff bb2e 	b.w	8020cba <_dtoa_r+0x32>
 802165e:	693a      	ldr	r2, [r7, #16]
 8021660:	3202      	adds	r2, #2
 8021662:	0092      	lsls	r2, r2, #2
 8021664:	f107 010c 	add.w	r1, r7, #12
 8021668:	300c      	adds	r0, #12
 802166a:	f7fd fb59 	bl	801ed20 <memcpy>
 802166e:	2201      	movs	r2, #1
 8021670:	4629      	mov	r1, r5
 8021672:	4620      	mov	r0, r4
 8021674:	f000 fef4 	bl	8022460 <__lshift>
 8021678:	9b00      	ldr	r3, [sp, #0]
 802167a:	3301      	adds	r3, #1
 802167c:	9301      	str	r3, [sp, #4]
 802167e:	9b00      	ldr	r3, [sp, #0]
 8021680:	444b      	add	r3, r9
 8021682:	9307      	str	r3, [sp, #28]
 8021684:	9b02      	ldr	r3, [sp, #8]
 8021686:	f003 0301 	and.w	r3, r3, #1
 802168a:	46b8      	mov	r8, r7
 802168c:	9306      	str	r3, [sp, #24]
 802168e:	4607      	mov	r7, r0
 8021690:	9b01      	ldr	r3, [sp, #4]
 8021692:	4631      	mov	r1, r6
 8021694:	3b01      	subs	r3, #1
 8021696:	4658      	mov	r0, fp
 8021698:	9302      	str	r3, [sp, #8]
 802169a:	f7ff fa69 	bl	8020b70 <quorem>
 802169e:	4603      	mov	r3, r0
 80216a0:	3330      	adds	r3, #48	; 0x30
 80216a2:	9004      	str	r0, [sp, #16]
 80216a4:	4641      	mov	r1, r8
 80216a6:	4658      	mov	r0, fp
 80216a8:	9308      	str	r3, [sp, #32]
 80216aa:	f000 ff45 	bl	8022538 <__mcmp>
 80216ae:	463a      	mov	r2, r7
 80216b0:	4681      	mov	r9, r0
 80216b2:	4631      	mov	r1, r6
 80216b4:	4620      	mov	r0, r4
 80216b6:	f000 ff5b 	bl	8022570 <__mdiff>
 80216ba:	68c2      	ldr	r2, [r0, #12]
 80216bc:	9b08      	ldr	r3, [sp, #32]
 80216be:	4605      	mov	r5, r0
 80216c0:	bb02      	cbnz	r2, 8021704 <_dtoa_r+0xa7c>
 80216c2:	4601      	mov	r1, r0
 80216c4:	4658      	mov	r0, fp
 80216c6:	f000 ff37 	bl	8022538 <__mcmp>
 80216ca:	9b08      	ldr	r3, [sp, #32]
 80216cc:	4602      	mov	r2, r0
 80216ce:	4629      	mov	r1, r5
 80216d0:	4620      	mov	r0, r4
 80216d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80216d6:	f000 fca7 	bl	8022028 <_Bfree>
 80216da:	9b05      	ldr	r3, [sp, #20]
 80216dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80216de:	9d01      	ldr	r5, [sp, #4]
 80216e0:	ea43 0102 	orr.w	r1, r3, r2
 80216e4:	9b06      	ldr	r3, [sp, #24]
 80216e6:	430b      	orrs	r3, r1
 80216e8:	9b08      	ldr	r3, [sp, #32]
 80216ea:	d10d      	bne.n	8021708 <_dtoa_r+0xa80>
 80216ec:	2b39      	cmp	r3, #57	; 0x39
 80216ee:	d029      	beq.n	8021744 <_dtoa_r+0xabc>
 80216f0:	f1b9 0f00 	cmp.w	r9, #0
 80216f4:	dd01      	ble.n	80216fa <_dtoa_r+0xa72>
 80216f6:	9b04      	ldr	r3, [sp, #16]
 80216f8:	3331      	adds	r3, #49	; 0x31
 80216fa:	9a02      	ldr	r2, [sp, #8]
 80216fc:	7013      	strb	r3, [r2, #0]
 80216fe:	e774      	b.n	80215ea <_dtoa_r+0x962>
 8021700:	4638      	mov	r0, r7
 8021702:	e7b9      	b.n	8021678 <_dtoa_r+0x9f0>
 8021704:	2201      	movs	r2, #1
 8021706:	e7e2      	b.n	80216ce <_dtoa_r+0xa46>
 8021708:	f1b9 0f00 	cmp.w	r9, #0
 802170c:	db06      	blt.n	802171c <_dtoa_r+0xa94>
 802170e:	9905      	ldr	r1, [sp, #20]
 8021710:	ea41 0909 	orr.w	r9, r1, r9
 8021714:	9906      	ldr	r1, [sp, #24]
 8021716:	ea59 0101 	orrs.w	r1, r9, r1
 802171a:	d120      	bne.n	802175e <_dtoa_r+0xad6>
 802171c:	2a00      	cmp	r2, #0
 802171e:	ddec      	ble.n	80216fa <_dtoa_r+0xa72>
 8021720:	4659      	mov	r1, fp
 8021722:	2201      	movs	r2, #1
 8021724:	4620      	mov	r0, r4
 8021726:	9301      	str	r3, [sp, #4]
 8021728:	f000 fe9a 	bl	8022460 <__lshift>
 802172c:	4631      	mov	r1, r6
 802172e:	4683      	mov	fp, r0
 8021730:	f000 ff02 	bl	8022538 <__mcmp>
 8021734:	2800      	cmp	r0, #0
 8021736:	9b01      	ldr	r3, [sp, #4]
 8021738:	dc02      	bgt.n	8021740 <_dtoa_r+0xab8>
 802173a:	d1de      	bne.n	80216fa <_dtoa_r+0xa72>
 802173c:	07da      	lsls	r2, r3, #31
 802173e:	d5dc      	bpl.n	80216fa <_dtoa_r+0xa72>
 8021740:	2b39      	cmp	r3, #57	; 0x39
 8021742:	d1d8      	bne.n	80216f6 <_dtoa_r+0xa6e>
 8021744:	9a02      	ldr	r2, [sp, #8]
 8021746:	2339      	movs	r3, #57	; 0x39
 8021748:	7013      	strb	r3, [r2, #0]
 802174a:	462b      	mov	r3, r5
 802174c:	461d      	mov	r5, r3
 802174e:	3b01      	subs	r3, #1
 8021750:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021754:	2a39      	cmp	r2, #57	; 0x39
 8021756:	d050      	beq.n	80217fa <_dtoa_r+0xb72>
 8021758:	3201      	adds	r2, #1
 802175a:	701a      	strb	r2, [r3, #0]
 802175c:	e745      	b.n	80215ea <_dtoa_r+0x962>
 802175e:	2a00      	cmp	r2, #0
 8021760:	dd03      	ble.n	802176a <_dtoa_r+0xae2>
 8021762:	2b39      	cmp	r3, #57	; 0x39
 8021764:	d0ee      	beq.n	8021744 <_dtoa_r+0xabc>
 8021766:	3301      	adds	r3, #1
 8021768:	e7c7      	b.n	80216fa <_dtoa_r+0xa72>
 802176a:	9a01      	ldr	r2, [sp, #4]
 802176c:	9907      	ldr	r1, [sp, #28]
 802176e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8021772:	428a      	cmp	r2, r1
 8021774:	d02a      	beq.n	80217cc <_dtoa_r+0xb44>
 8021776:	4659      	mov	r1, fp
 8021778:	2300      	movs	r3, #0
 802177a:	220a      	movs	r2, #10
 802177c:	4620      	mov	r0, r4
 802177e:	f000 fc75 	bl	802206c <__multadd>
 8021782:	45b8      	cmp	r8, r7
 8021784:	4683      	mov	fp, r0
 8021786:	f04f 0300 	mov.w	r3, #0
 802178a:	f04f 020a 	mov.w	r2, #10
 802178e:	4641      	mov	r1, r8
 8021790:	4620      	mov	r0, r4
 8021792:	d107      	bne.n	80217a4 <_dtoa_r+0xb1c>
 8021794:	f000 fc6a 	bl	802206c <__multadd>
 8021798:	4680      	mov	r8, r0
 802179a:	4607      	mov	r7, r0
 802179c:	9b01      	ldr	r3, [sp, #4]
 802179e:	3301      	adds	r3, #1
 80217a0:	9301      	str	r3, [sp, #4]
 80217a2:	e775      	b.n	8021690 <_dtoa_r+0xa08>
 80217a4:	f000 fc62 	bl	802206c <__multadd>
 80217a8:	4639      	mov	r1, r7
 80217aa:	4680      	mov	r8, r0
 80217ac:	2300      	movs	r3, #0
 80217ae:	220a      	movs	r2, #10
 80217b0:	4620      	mov	r0, r4
 80217b2:	f000 fc5b 	bl	802206c <__multadd>
 80217b6:	4607      	mov	r7, r0
 80217b8:	e7f0      	b.n	802179c <_dtoa_r+0xb14>
 80217ba:	f1b9 0f00 	cmp.w	r9, #0
 80217be:	9a00      	ldr	r2, [sp, #0]
 80217c0:	bfcc      	ite	gt
 80217c2:	464d      	movgt	r5, r9
 80217c4:	2501      	movle	r5, #1
 80217c6:	4415      	add	r5, r2
 80217c8:	f04f 0800 	mov.w	r8, #0
 80217cc:	4659      	mov	r1, fp
 80217ce:	2201      	movs	r2, #1
 80217d0:	4620      	mov	r0, r4
 80217d2:	9301      	str	r3, [sp, #4]
 80217d4:	f000 fe44 	bl	8022460 <__lshift>
 80217d8:	4631      	mov	r1, r6
 80217da:	4683      	mov	fp, r0
 80217dc:	f000 feac 	bl	8022538 <__mcmp>
 80217e0:	2800      	cmp	r0, #0
 80217e2:	dcb2      	bgt.n	802174a <_dtoa_r+0xac2>
 80217e4:	d102      	bne.n	80217ec <_dtoa_r+0xb64>
 80217e6:	9b01      	ldr	r3, [sp, #4]
 80217e8:	07db      	lsls	r3, r3, #31
 80217ea:	d4ae      	bmi.n	802174a <_dtoa_r+0xac2>
 80217ec:	462b      	mov	r3, r5
 80217ee:	461d      	mov	r5, r3
 80217f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80217f4:	2a30      	cmp	r2, #48	; 0x30
 80217f6:	d0fa      	beq.n	80217ee <_dtoa_r+0xb66>
 80217f8:	e6f7      	b.n	80215ea <_dtoa_r+0x962>
 80217fa:	9a00      	ldr	r2, [sp, #0]
 80217fc:	429a      	cmp	r2, r3
 80217fe:	d1a5      	bne.n	802174c <_dtoa_r+0xac4>
 8021800:	f10a 0a01 	add.w	sl, sl, #1
 8021804:	2331      	movs	r3, #49	; 0x31
 8021806:	e779      	b.n	80216fc <_dtoa_r+0xa74>
 8021808:	4b13      	ldr	r3, [pc, #76]	; (8021858 <_dtoa_r+0xbd0>)
 802180a:	f7ff baaf 	b.w	8020d6c <_dtoa_r+0xe4>
 802180e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021810:	2b00      	cmp	r3, #0
 8021812:	f47f aa86 	bne.w	8020d22 <_dtoa_r+0x9a>
 8021816:	4b11      	ldr	r3, [pc, #68]	; (802185c <_dtoa_r+0xbd4>)
 8021818:	f7ff baa8 	b.w	8020d6c <_dtoa_r+0xe4>
 802181c:	f1b9 0f00 	cmp.w	r9, #0
 8021820:	dc03      	bgt.n	802182a <_dtoa_r+0xba2>
 8021822:	9b05      	ldr	r3, [sp, #20]
 8021824:	2b02      	cmp	r3, #2
 8021826:	f73f aec9 	bgt.w	80215bc <_dtoa_r+0x934>
 802182a:	9d00      	ldr	r5, [sp, #0]
 802182c:	4631      	mov	r1, r6
 802182e:	4658      	mov	r0, fp
 8021830:	f7ff f99e 	bl	8020b70 <quorem>
 8021834:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8021838:	f805 3b01 	strb.w	r3, [r5], #1
 802183c:	9a00      	ldr	r2, [sp, #0]
 802183e:	1aaa      	subs	r2, r5, r2
 8021840:	4591      	cmp	r9, r2
 8021842:	ddba      	ble.n	80217ba <_dtoa_r+0xb32>
 8021844:	4659      	mov	r1, fp
 8021846:	2300      	movs	r3, #0
 8021848:	220a      	movs	r2, #10
 802184a:	4620      	mov	r0, r4
 802184c:	f000 fc0e 	bl	802206c <__multadd>
 8021850:	4683      	mov	fp, r0
 8021852:	e7eb      	b.n	802182c <_dtoa_r+0xba4>
 8021854:	08024ff4 	.word	0x08024ff4
 8021858:	08024df0 	.word	0x08024df0
 802185c:	08024f71 	.word	0x08024f71

08021860 <rshift>:
 8021860:	6903      	ldr	r3, [r0, #16]
 8021862:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802186a:	ea4f 1261 	mov.w	r2, r1, asr #5
 802186e:	f100 0414 	add.w	r4, r0, #20
 8021872:	dd45      	ble.n	8021900 <rshift+0xa0>
 8021874:	f011 011f 	ands.w	r1, r1, #31
 8021878:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802187c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021880:	d10c      	bne.n	802189c <rshift+0x3c>
 8021882:	f100 0710 	add.w	r7, r0, #16
 8021886:	4629      	mov	r1, r5
 8021888:	42b1      	cmp	r1, r6
 802188a:	d334      	bcc.n	80218f6 <rshift+0x96>
 802188c:	1a9b      	subs	r3, r3, r2
 802188e:	009b      	lsls	r3, r3, #2
 8021890:	1eea      	subs	r2, r5, #3
 8021892:	4296      	cmp	r6, r2
 8021894:	bf38      	it	cc
 8021896:	2300      	movcc	r3, #0
 8021898:	4423      	add	r3, r4
 802189a:	e015      	b.n	80218c8 <rshift+0x68>
 802189c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80218a0:	f1c1 0820 	rsb	r8, r1, #32
 80218a4:	40cf      	lsrs	r7, r1
 80218a6:	f105 0e04 	add.w	lr, r5, #4
 80218aa:	46a1      	mov	r9, r4
 80218ac:	4576      	cmp	r6, lr
 80218ae:	46f4      	mov	ip, lr
 80218b0:	d815      	bhi.n	80218de <rshift+0x7e>
 80218b2:	1a9b      	subs	r3, r3, r2
 80218b4:	009a      	lsls	r2, r3, #2
 80218b6:	3a04      	subs	r2, #4
 80218b8:	3501      	adds	r5, #1
 80218ba:	42ae      	cmp	r6, r5
 80218bc:	bf38      	it	cc
 80218be:	2200      	movcc	r2, #0
 80218c0:	18a3      	adds	r3, r4, r2
 80218c2:	50a7      	str	r7, [r4, r2]
 80218c4:	b107      	cbz	r7, 80218c8 <rshift+0x68>
 80218c6:	3304      	adds	r3, #4
 80218c8:	1b1a      	subs	r2, r3, r4
 80218ca:	42a3      	cmp	r3, r4
 80218cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80218d0:	bf08      	it	eq
 80218d2:	2300      	moveq	r3, #0
 80218d4:	6102      	str	r2, [r0, #16]
 80218d6:	bf08      	it	eq
 80218d8:	6143      	streq	r3, [r0, #20]
 80218da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80218de:	f8dc c000 	ldr.w	ip, [ip]
 80218e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80218e6:	ea4c 0707 	orr.w	r7, ip, r7
 80218ea:	f849 7b04 	str.w	r7, [r9], #4
 80218ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80218f2:	40cf      	lsrs	r7, r1
 80218f4:	e7da      	b.n	80218ac <rshift+0x4c>
 80218f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80218fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80218fe:	e7c3      	b.n	8021888 <rshift+0x28>
 8021900:	4623      	mov	r3, r4
 8021902:	e7e1      	b.n	80218c8 <rshift+0x68>

08021904 <__hexdig_fun>:
 8021904:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8021908:	2b09      	cmp	r3, #9
 802190a:	d802      	bhi.n	8021912 <__hexdig_fun+0xe>
 802190c:	3820      	subs	r0, #32
 802190e:	b2c0      	uxtb	r0, r0
 8021910:	4770      	bx	lr
 8021912:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8021916:	2b05      	cmp	r3, #5
 8021918:	d801      	bhi.n	802191e <__hexdig_fun+0x1a>
 802191a:	3847      	subs	r0, #71	; 0x47
 802191c:	e7f7      	b.n	802190e <__hexdig_fun+0xa>
 802191e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021922:	2b05      	cmp	r3, #5
 8021924:	d801      	bhi.n	802192a <__hexdig_fun+0x26>
 8021926:	3827      	subs	r0, #39	; 0x27
 8021928:	e7f1      	b.n	802190e <__hexdig_fun+0xa>
 802192a:	2000      	movs	r0, #0
 802192c:	4770      	bx	lr
	...

08021930 <__gethex>:
 8021930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021934:	ed2d 8b02 	vpush	{d8}
 8021938:	b089      	sub	sp, #36	; 0x24
 802193a:	ee08 0a10 	vmov	s16, r0
 802193e:	9304      	str	r3, [sp, #16]
 8021940:	4bbc      	ldr	r3, [pc, #752]	; (8021c34 <__gethex+0x304>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	9301      	str	r3, [sp, #4]
 8021946:	4618      	mov	r0, r3
 8021948:	468b      	mov	fp, r1
 802194a:	4690      	mov	r8, r2
 802194c:	f7de fc40 	bl	80001d0 <strlen>
 8021950:	9b01      	ldr	r3, [sp, #4]
 8021952:	f8db 2000 	ldr.w	r2, [fp]
 8021956:	4403      	add	r3, r0
 8021958:	4682      	mov	sl, r0
 802195a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802195e:	9305      	str	r3, [sp, #20]
 8021960:	1c93      	adds	r3, r2, #2
 8021962:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8021966:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802196a:	32fe      	adds	r2, #254	; 0xfe
 802196c:	18d1      	adds	r1, r2, r3
 802196e:	461f      	mov	r7, r3
 8021970:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021974:	9100      	str	r1, [sp, #0]
 8021976:	2830      	cmp	r0, #48	; 0x30
 8021978:	d0f8      	beq.n	802196c <__gethex+0x3c>
 802197a:	f7ff ffc3 	bl	8021904 <__hexdig_fun>
 802197e:	4604      	mov	r4, r0
 8021980:	2800      	cmp	r0, #0
 8021982:	d13a      	bne.n	80219fa <__gethex+0xca>
 8021984:	9901      	ldr	r1, [sp, #4]
 8021986:	4652      	mov	r2, sl
 8021988:	4638      	mov	r0, r7
 802198a:	f001 f982 	bl	8022c92 <strncmp>
 802198e:	4605      	mov	r5, r0
 8021990:	2800      	cmp	r0, #0
 8021992:	d168      	bne.n	8021a66 <__gethex+0x136>
 8021994:	f817 000a 	ldrb.w	r0, [r7, sl]
 8021998:	eb07 060a 	add.w	r6, r7, sl
 802199c:	f7ff ffb2 	bl	8021904 <__hexdig_fun>
 80219a0:	2800      	cmp	r0, #0
 80219a2:	d062      	beq.n	8021a6a <__gethex+0x13a>
 80219a4:	4633      	mov	r3, r6
 80219a6:	7818      	ldrb	r0, [r3, #0]
 80219a8:	2830      	cmp	r0, #48	; 0x30
 80219aa:	461f      	mov	r7, r3
 80219ac:	f103 0301 	add.w	r3, r3, #1
 80219b0:	d0f9      	beq.n	80219a6 <__gethex+0x76>
 80219b2:	f7ff ffa7 	bl	8021904 <__hexdig_fun>
 80219b6:	2301      	movs	r3, #1
 80219b8:	fab0 f480 	clz	r4, r0
 80219bc:	0964      	lsrs	r4, r4, #5
 80219be:	4635      	mov	r5, r6
 80219c0:	9300      	str	r3, [sp, #0]
 80219c2:	463a      	mov	r2, r7
 80219c4:	4616      	mov	r6, r2
 80219c6:	3201      	adds	r2, #1
 80219c8:	7830      	ldrb	r0, [r6, #0]
 80219ca:	f7ff ff9b 	bl	8021904 <__hexdig_fun>
 80219ce:	2800      	cmp	r0, #0
 80219d0:	d1f8      	bne.n	80219c4 <__gethex+0x94>
 80219d2:	9901      	ldr	r1, [sp, #4]
 80219d4:	4652      	mov	r2, sl
 80219d6:	4630      	mov	r0, r6
 80219d8:	f001 f95b 	bl	8022c92 <strncmp>
 80219dc:	b980      	cbnz	r0, 8021a00 <__gethex+0xd0>
 80219de:	b94d      	cbnz	r5, 80219f4 <__gethex+0xc4>
 80219e0:	eb06 050a 	add.w	r5, r6, sl
 80219e4:	462a      	mov	r2, r5
 80219e6:	4616      	mov	r6, r2
 80219e8:	3201      	adds	r2, #1
 80219ea:	7830      	ldrb	r0, [r6, #0]
 80219ec:	f7ff ff8a 	bl	8021904 <__hexdig_fun>
 80219f0:	2800      	cmp	r0, #0
 80219f2:	d1f8      	bne.n	80219e6 <__gethex+0xb6>
 80219f4:	1bad      	subs	r5, r5, r6
 80219f6:	00ad      	lsls	r5, r5, #2
 80219f8:	e004      	b.n	8021a04 <__gethex+0xd4>
 80219fa:	2400      	movs	r4, #0
 80219fc:	4625      	mov	r5, r4
 80219fe:	e7e0      	b.n	80219c2 <__gethex+0x92>
 8021a00:	2d00      	cmp	r5, #0
 8021a02:	d1f7      	bne.n	80219f4 <__gethex+0xc4>
 8021a04:	7833      	ldrb	r3, [r6, #0]
 8021a06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8021a0a:	2b50      	cmp	r3, #80	; 0x50
 8021a0c:	d13b      	bne.n	8021a86 <__gethex+0x156>
 8021a0e:	7873      	ldrb	r3, [r6, #1]
 8021a10:	2b2b      	cmp	r3, #43	; 0x2b
 8021a12:	d02c      	beq.n	8021a6e <__gethex+0x13e>
 8021a14:	2b2d      	cmp	r3, #45	; 0x2d
 8021a16:	d02e      	beq.n	8021a76 <__gethex+0x146>
 8021a18:	1c71      	adds	r1, r6, #1
 8021a1a:	f04f 0900 	mov.w	r9, #0
 8021a1e:	7808      	ldrb	r0, [r1, #0]
 8021a20:	f7ff ff70 	bl	8021904 <__hexdig_fun>
 8021a24:	1e43      	subs	r3, r0, #1
 8021a26:	b2db      	uxtb	r3, r3
 8021a28:	2b18      	cmp	r3, #24
 8021a2a:	d82c      	bhi.n	8021a86 <__gethex+0x156>
 8021a2c:	f1a0 0210 	sub.w	r2, r0, #16
 8021a30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021a34:	f7ff ff66 	bl	8021904 <__hexdig_fun>
 8021a38:	1e43      	subs	r3, r0, #1
 8021a3a:	b2db      	uxtb	r3, r3
 8021a3c:	2b18      	cmp	r3, #24
 8021a3e:	d91d      	bls.n	8021a7c <__gethex+0x14c>
 8021a40:	f1b9 0f00 	cmp.w	r9, #0
 8021a44:	d000      	beq.n	8021a48 <__gethex+0x118>
 8021a46:	4252      	negs	r2, r2
 8021a48:	4415      	add	r5, r2
 8021a4a:	f8cb 1000 	str.w	r1, [fp]
 8021a4e:	b1e4      	cbz	r4, 8021a8a <__gethex+0x15a>
 8021a50:	9b00      	ldr	r3, [sp, #0]
 8021a52:	2b00      	cmp	r3, #0
 8021a54:	bf14      	ite	ne
 8021a56:	2700      	movne	r7, #0
 8021a58:	2706      	moveq	r7, #6
 8021a5a:	4638      	mov	r0, r7
 8021a5c:	b009      	add	sp, #36	; 0x24
 8021a5e:	ecbd 8b02 	vpop	{d8}
 8021a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a66:	463e      	mov	r6, r7
 8021a68:	4625      	mov	r5, r4
 8021a6a:	2401      	movs	r4, #1
 8021a6c:	e7ca      	b.n	8021a04 <__gethex+0xd4>
 8021a6e:	f04f 0900 	mov.w	r9, #0
 8021a72:	1cb1      	adds	r1, r6, #2
 8021a74:	e7d3      	b.n	8021a1e <__gethex+0xee>
 8021a76:	f04f 0901 	mov.w	r9, #1
 8021a7a:	e7fa      	b.n	8021a72 <__gethex+0x142>
 8021a7c:	230a      	movs	r3, #10
 8021a7e:	fb03 0202 	mla	r2, r3, r2, r0
 8021a82:	3a10      	subs	r2, #16
 8021a84:	e7d4      	b.n	8021a30 <__gethex+0x100>
 8021a86:	4631      	mov	r1, r6
 8021a88:	e7df      	b.n	8021a4a <__gethex+0x11a>
 8021a8a:	1bf3      	subs	r3, r6, r7
 8021a8c:	3b01      	subs	r3, #1
 8021a8e:	4621      	mov	r1, r4
 8021a90:	2b07      	cmp	r3, #7
 8021a92:	dc0b      	bgt.n	8021aac <__gethex+0x17c>
 8021a94:	ee18 0a10 	vmov	r0, s16
 8021a98:	f000 fa86 	bl	8021fa8 <_Balloc>
 8021a9c:	4604      	mov	r4, r0
 8021a9e:	b940      	cbnz	r0, 8021ab2 <__gethex+0x182>
 8021aa0:	4b65      	ldr	r3, [pc, #404]	; (8021c38 <__gethex+0x308>)
 8021aa2:	4602      	mov	r2, r0
 8021aa4:	21de      	movs	r1, #222	; 0xde
 8021aa6:	4865      	ldr	r0, [pc, #404]	; (8021c3c <__gethex+0x30c>)
 8021aa8:	f001 f912 	bl	8022cd0 <__assert_func>
 8021aac:	3101      	adds	r1, #1
 8021aae:	105b      	asrs	r3, r3, #1
 8021ab0:	e7ee      	b.n	8021a90 <__gethex+0x160>
 8021ab2:	f100 0914 	add.w	r9, r0, #20
 8021ab6:	f04f 0b00 	mov.w	fp, #0
 8021aba:	f1ca 0301 	rsb	r3, sl, #1
 8021abe:	f8cd 9008 	str.w	r9, [sp, #8]
 8021ac2:	f8cd b000 	str.w	fp, [sp]
 8021ac6:	9306      	str	r3, [sp, #24]
 8021ac8:	42b7      	cmp	r7, r6
 8021aca:	d340      	bcc.n	8021b4e <__gethex+0x21e>
 8021acc:	9802      	ldr	r0, [sp, #8]
 8021ace:	9b00      	ldr	r3, [sp, #0]
 8021ad0:	f840 3b04 	str.w	r3, [r0], #4
 8021ad4:	eba0 0009 	sub.w	r0, r0, r9
 8021ad8:	1080      	asrs	r0, r0, #2
 8021ada:	0146      	lsls	r6, r0, #5
 8021adc:	6120      	str	r0, [r4, #16]
 8021ade:	4618      	mov	r0, r3
 8021ae0:	f000 fb58 	bl	8022194 <__hi0bits>
 8021ae4:	1a30      	subs	r0, r6, r0
 8021ae6:	f8d8 6000 	ldr.w	r6, [r8]
 8021aea:	42b0      	cmp	r0, r6
 8021aec:	dd63      	ble.n	8021bb6 <__gethex+0x286>
 8021aee:	1b87      	subs	r7, r0, r6
 8021af0:	4639      	mov	r1, r7
 8021af2:	4620      	mov	r0, r4
 8021af4:	f000 fef2 	bl	80228dc <__any_on>
 8021af8:	4682      	mov	sl, r0
 8021afa:	b1a8      	cbz	r0, 8021b28 <__gethex+0x1f8>
 8021afc:	1e7b      	subs	r3, r7, #1
 8021afe:	1159      	asrs	r1, r3, #5
 8021b00:	f003 021f 	and.w	r2, r3, #31
 8021b04:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8021b08:	f04f 0a01 	mov.w	sl, #1
 8021b0c:	fa0a f202 	lsl.w	r2, sl, r2
 8021b10:	420a      	tst	r2, r1
 8021b12:	d009      	beq.n	8021b28 <__gethex+0x1f8>
 8021b14:	4553      	cmp	r3, sl
 8021b16:	dd05      	ble.n	8021b24 <__gethex+0x1f4>
 8021b18:	1eb9      	subs	r1, r7, #2
 8021b1a:	4620      	mov	r0, r4
 8021b1c:	f000 fede 	bl	80228dc <__any_on>
 8021b20:	2800      	cmp	r0, #0
 8021b22:	d145      	bne.n	8021bb0 <__gethex+0x280>
 8021b24:	f04f 0a02 	mov.w	sl, #2
 8021b28:	4639      	mov	r1, r7
 8021b2a:	4620      	mov	r0, r4
 8021b2c:	f7ff fe98 	bl	8021860 <rshift>
 8021b30:	443d      	add	r5, r7
 8021b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021b36:	42ab      	cmp	r3, r5
 8021b38:	da4c      	bge.n	8021bd4 <__gethex+0x2a4>
 8021b3a:	ee18 0a10 	vmov	r0, s16
 8021b3e:	4621      	mov	r1, r4
 8021b40:	f000 fa72 	bl	8022028 <_Bfree>
 8021b44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021b46:	2300      	movs	r3, #0
 8021b48:	6013      	str	r3, [r2, #0]
 8021b4a:	27a3      	movs	r7, #163	; 0xa3
 8021b4c:	e785      	b.n	8021a5a <__gethex+0x12a>
 8021b4e:	1e73      	subs	r3, r6, #1
 8021b50:	9a05      	ldr	r2, [sp, #20]
 8021b52:	9303      	str	r3, [sp, #12]
 8021b54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021b58:	4293      	cmp	r3, r2
 8021b5a:	d019      	beq.n	8021b90 <__gethex+0x260>
 8021b5c:	f1bb 0f20 	cmp.w	fp, #32
 8021b60:	d107      	bne.n	8021b72 <__gethex+0x242>
 8021b62:	9b02      	ldr	r3, [sp, #8]
 8021b64:	9a00      	ldr	r2, [sp, #0]
 8021b66:	f843 2b04 	str.w	r2, [r3], #4
 8021b6a:	9302      	str	r3, [sp, #8]
 8021b6c:	2300      	movs	r3, #0
 8021b6e:	9300      	str	r3, [sp, #0]
 8021b70:	469b      	mov	fp, r3
 8021b72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8021b76:	f7ff fec5 	bl	8021904 <__hexdig_fun>
 8021b7a:	9b00      	ldr	r3, [sp, #0]
 8021b7c:	f000 000f 	and.w	r0, r0, #15
 8021b80:	fa00 f00b 	lsl.w	r0, r0, fp
 8021b84:	4303      	orrs	r3, r0
 8021b86:	9300      	str	r3, [sp, #0]
 8021b88:	f10b 0b04 	add.w	fp, fp, #4
 8021b8c:	9b03      	ldr	r3, [sp, #12]
 8021b8e:	e00d      	b.n	8021bac <__gethex+0x27c>
 8021b90:	9b03      	ldr	r3, [sp, #12]
 8021b92:	9a06      	ldr	r2, [sp, #24]
 8021b94:	4413      	add	r3, r2
 8021b96:	42bb      	cmp	r3, r7
 8021b98:	d3e0      	bcc.n	8021b5c <__gethex+0x22c>
 8021b9a:	4618      	mov	r0, r3
 8021b9c:	9901      	ldr	r1, [sp, #4]
 8021b9e:	9307      	str	r3, [sp, #28]
 8021ba0:	4652      	mov	r2, sl
 8021ba2:	f001 f876 	bl	8022c92 <strncmp>
 8021ba6:	9b07      	ldr	r3, [sp, #28]
 8021ba8:	2800      	cmp	r0, #0
 8021baa:	d1d7      	bne.n	8021b5c <__gethex+0x22c>
 8021bac:	461e      	mov	r6, r3
 8021bae:	e78b      	b.n	8021ac8 <__gethex+0x198>
 8021bb0:	f04f 0a03 	mov.w	sl, #3
 8021bb4:	e7b8      	b.n	8021b28 <__gethex+0x1f8>
 8021bb6:	da0a      	bge.n	8021bce <__gethex+0x29e>
 8021bb8:	1a37      	subs	r7, r6, r0
 8021bba:	4621      	mov	r1, r4
 8021bbc:	ee18 0a10 	vmov	r0, s16
 8021bc0:	463a      	mov	r2, r7
 8021bc2:	f000 fc4d 	bl	8022460 <__lshift>
 8021bc6:	1bed      	subs	r5, r5, r7
 8021bc8:	4604      	mov	r4, r0
 8021bca:	f100 0914 	add.w	r9, r0, #20
 8021bce:	f04f 0a00 	mov.w	sl, #0
 8021bd2:	e7ae      	b.n	8021b32 <__gethex+0x202>
 8021bd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8021bd8:	42a8      	cmp	r0, r5
 8021bda:	dd72      	ble.n	8021cc2 <__gethex+0x392>
 8021bdc:	1b45      	subs	r5, r0, r5
 8021bde:	42ae      	cmp	r6, r5
 8021be0:	dc36      	bgt.n	8021c50 <__gethex+0x320>
 8021be2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021be6:	2b02      	cmp	r3, #2
 8021be8:	d02a      	beq.n	8021c40 <__gethex+0x310>
 8021bea:	2b03      	cmp	r3, #3
 8021bec:	d02c      	beq.n	8021c48 <__gethex+0x318>
 8021bee:	2b01      	cmp	r3, #1
 8021bf0:	d115      	bne.n	8021c1e <__gethex+0x2ee>
 8021bf2:	42ae      	cmp	r6, r5
 8021bf4:	d113      	bne.n	8021c1e <__gethex+0x2ee>
 8021bf6:	2e01      	cmp	r6, #1
 8021bf8:	d10b      	bne.n	8021c12 <__gethex+0x2e2>
 8021bfa:	9a04      	ldr	r2, [sp, #16]
 8021bfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021c00:	6013      	str	r3, [r2, #0]
 8021c02:	2301      	movs	r3, #1
 8021c04:	6123      	str	r3, [r4, #16]
 8021c06:	f8c9 3000 	str.w	r3, [r9]
 8021c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021c0c:	2762      	movs	r7, #98	; 0x62
 8021c0e:	601c      	str	r4, [r3, #0]
 8021c10:	e723      	b.n	8021a5a <__gethex+0x12a>
 8021c12:	1e71      	subs	r1, r6, #1
 8021c14:	4620      	mov	r0, r4
 8021c16:	f000 fe61 	bl	80228dc <__any_on>
 8021c1a:	2800      	cmp	r0, #0
 8021c1c:	d1ed      	bne.n	8021bfa <__gethex+0x2ca>
 8021c1e:	ee18 0a10 	vmov	r0, s16
 8021c22:	4621      	mov	r1, r4
 8021c24:	f000 fa00 	bl	8022028 <_Bfree>
 8021c28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021c2a:	2300      	movs	r3, #0
 8021c2c:	6013      	str	r3, [r2, #0]
 8021c2e:	2750      	movs	r7, #80	; 0x50
 8021c30:	e713      	b.n	8021a5a <__gethex+0x12a>
 8021c32:	bf00      	nop
 8021c34:	08025070 	.word	0x08025070
 8021c38:	08024ff4 	.word	0x08024ff4
 8021c3c:	08025005 	.word	0x08025005
 8021c40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021c42:	2b00      	cmp	r3, #0
 8021c44:	d1eb      	bne.n	8021c1e <__gethex+0x2ee>
 8021c46:	e7d8      	b.n	8021bfa <__gethex+0x2ca>
 8021c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021c4a:	2b00      	cmp	r3, #0
 8021c4c:	d1d5      	bne.n	8021bfa <__gethex+0x2ca>
 8021c4e:	e7e6      	b.n	8021c1e <__gethex+0x2ee>
 8021c50:	1e6f      	subs	r7, r5, #1
 8021c52:	f1ba 0f00 	cmp.w	sl, #0
 8021c56:	d131      	bne.n	8021cbc <__gethex+0x38c>
 8021c58:	b127      	cbz	r7, 8021c64 <__gethex+0x334>
 8021c5a:	4639      	mov	r1, r7
 8021c5c:	4620      	mov	r0, r4
 8021c5e:	f000 fe3d 	bl	80228dc <__any_on>
 8021c62:	4682      	mov	sl, r0
 8021c64:	117b      	asrs	r3, r7, #5
 8021c66:	2101      	movs	r1, #1
 8021c68:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021c6c:	f007 071f 	and.w	r7, r7, #31
 8021c70:	fa01 f707 	lsl.w	r7, r1, r7
 8021c74:	421f      	tst	r7, r3
 8021c76:	4629      	mov	r1, r5
 8021c78:	4620      	mov	r0, r4
 8021c7a:	bf18      	it	ne
 8021c7c:	f04a 0a02 	orrne.w	sl, sl, #2
 8021c80:	1b76      	subs	r6, r6, r5
 8021c82:	f7ff fded 	bl	8021860 <rshift>
 8021c86:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021c8a:	2702      	movs	r7, #2
 8021c8c:	f1ba 0f00 	cmp.w	sl, #0
 8021c90:	d048      	beq.n	8021d24 <__gethex+0x3f4>
 8021c92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021c96:	2b02      	cmp	r3, #2
 8021c98:	d015      	beq.n	8021cc6 <__gethex+0x396>
 8021c9a:	2b03      	cmp	r3, #3
 8021c9c:	d017      	beq.n	8021cce <__gethex+0x39e>
 8021c9e:	2b01      	cmp	r3, #1
 8021ca0:	d109      	bne.n	8021cb6 <__gethex+0x386>
 8021ca2:	f01a 0f02 	tst.w	sl, #2
 8021ca6:	d006      	beq.n	8021cb6 <__gethex+0x386>
 8021ca8:	f8d9 0000 	ldr.w	r0, [r9]
 8021cac:	ea4a 0a00 	orr.w	sl, sl, r0
 8021cb0:	f01a 0f01 	tst.w	sl, #1
 8021cb4:	d10e      	bne.n	8021cd4 <__gethex+0x3a4>
 8021cb6:	f047 0710 	orr.w	r7, r7, #16
 8021cba:	e033      	b.n	8021d24 <__gethex+0x3f4>
 8021cbc:	f04f 0a01 	mov.w	sl, #1
 8021cc0:	e7d0      	b.n	8021c64 <__gethex+0x334>
 8021cc2:	2701      	movs	r7, #1
 8021cc4:	e7e2      	b.n	8021c8c <__gethex+0x35c>
 8021cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021cc8:	f1c3 0301 	rsb	r3, r3, #1
 8021ccc:	9315      	str	r3, [sp, #84]	; 0x54
 8021cce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d0f0      	beq.n	8021cb6 <__gethex+0x386>
 8021cd4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8021cd8:	f104 0314 	add.w	r3, r4, #20
 8021cdc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021ce0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8021ce4:	f04f 0c00 	mov.w	ip, #0
 8021ce8:	4618      	mov	r0, r3
 8021cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8021cee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8021cf2:	d01c      	beq.n	8021d2e <__gethex+0x3fe>
 8021cf4:	3201      	adds	r2, #1
 8021cf6:	6002      	str	r2, [r0, #0]
 8021cf8:	2f02      	cmp	r7, #2
 8021cfa:	f104 0314 	add.w	r3, r4, #20
 8021cfe:	d13f      	bne.n	8021d80 <__gethex+0x450>
 8021d00:	f8d8 2000 	ldr.w	r2, [r8]
 8021d04:	3a01      	subs	r2, #1
 8021d06:	42b2      	cmp	r2, r6
 8021d08:	d10a      	bne.n	8021d20 <__gethex+0x3f0>
 8021d0a:	1171      	asrs	r1, r6, #5
 8021d0c:	2201      	movs	r2, #1
 8021d0e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021d12:	f006 061f 	and.w	r6, r6, #31
 8021d16:	fa02 f606 	lsl.w	r6, r2, r6
 8021d1a:	421e      	tst	r6, r3
 8021d1c:	bf18      	it	ne
 8021d1e:	4617      	movne	r7, r2
 8021d20:	f047 0720 	orr.w	r7, r7, #32
 8021d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021d26:	601c      	str	r4, [r3, #0]
 8021d28:	9b04      	ldr	r3, [sp, #16]
 8021d2a:	601d      	str	r5, [r3, #0]
 8021d2c:	e695      	b.n	8021a5a <__gethex+0x12a>
 8021d2e:	4299      	cmp	r1, r3
 8021d30:	f843 cc04 	str.w	ip, [r3, #-4]
 8021d34:	d8d8      	bhi.n	8021ce8 <__gethex+0x3b8>
 8021d36:	68a3      	ldr	r3, [r4, #8]
 8021d38:	459b      	cmp	fp, r3
 8021d3a:	db19      	blt.n	8021d70 <__gethex+0x440>
 8021d3c:	6861      	ldr	r1, [r4, #4]
 8021d3e:	ee18 0a10 	vmov	r0, s16
 8021d42:	3101      	adds	r1, #1
 8021d44:	f000 f930 	bl	8021fa8 <_Balloc>
 8021d48:	4681      	mov	r9, r0
 8021d4a:	b918      	cbnz	r0, 8021d54 <__gethex+0x424>
 8021d4c:	4b1a      	ldr	r3, [pc, #104]	; (8021db8 <__gethex+0x488>)
 8021d4e:	4602      	mov	r2, r0
 8021d50:	2184      	movs	r1, #132	; 0x84
 8021d52:	e6a8      	b.n	8021aa6 <__gethex+0x176>
 8021d54:	6922      	ldr	r2, [r4, #16]
 8021d56:	3202      	adds	r2, #2
 8021d58:	f104 010c 	add.w	r1, r4, #12
 8021d5c:	0092      	lsls	r2, r2, #2
 8021d5e:	300c      	adds	r0, #12
 8021d60:	f7fc ffde 	bl	801ed20 <memcpy>
 8021d64:	4621      	mov	r1, r4
 8021d66:	ee18 0a10 	vmov	r0, s16
 8021d6a:	f000 f95d 	bl	8022028 <_Bfree>
 8021d6e:	464c      	mov	r4, r9
 8021d70:	6923      	ldr	r3, [r4, #16]
 8021d72:	1c5a      	adds	r2, r3, #1
 8021d74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021d78:	6122      	str	r2, [r4, #16]
 8021d7a:	2201      	movs	r2, #1
 8021d7c:	615a      	str	r2, [r3, #20]
 8021d7e:	e7bb      	b.n	8021cf8 <__gethex+0x3c8>
 8021d80:	6922      	ldr	r2, [r4, #16]
 8021d82:	455a      	cmp	r2, fp
 8021d84:	dd0b      	ble.n	8021d9e <__gethex+0x46e>
 8021d86:	2101      	movs	r1, #1
 8021d88:	4620      	mov	r0, r4
 8021d8a:	f7ff fd69 	bl	8021860 <rshift>
 8021d8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021d92:	3501      	adds	r5, #1
 8021d94:	42ab      	cmp	r3, r5
 8021d96:	f6ff aed0 	blt.w	8021b3a <__gethex+0x20a>
 8021d9a:	2701      	movs	r7, #1
 8021d9c:	e7c0      	b.n	8021d20 <__gethex+0x3f0>
 8021d9e:	f016 061f 	ands.w	r6, r6, #31
 8021da2:	d0fa      	beq.n	8021d9a <__gethex+0x46a>
 8021da4:	449a      	add	sl, r3
 8021da6:	f1c6 0620 	rsb	r6, r6, #32
 8021daa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8021dae:	f000 f9f1 	bl	8022194 <__hi0bits>
 8021db2:	42b0      	cmp	r0, r6
 8021db4:	dbe7      	blt.n	8021d86 <__gethex+0x456>
 8021db6:	e7f0      	b.n	8021d9a <__gethex+0x46a>
 8021db8:	08024ff4 	.word	0x08024ff4

08021dbc <L_shift>:
 8021dbc:	f1c2 0208 	rsb	r2, r2, #8
 8021dc0:	0092      	lsls	r2, r2, #2
 8021dc2:	b570      	push	{r4, r5, r6, lr}
 8021dc4:	f1c2 0620 	rsb	r6, r2, #32
 8021dc8:	6843      	ldr	r3, [r0, #4]
 8021dca:	6804      	ldr	r4, [r0, #0]
 8021dcc:	fa03 f506 	lsl.w	r5, r3, r6
 8021dd0:	432c      	orrs	r4, r5
 8021dd2:	40d3      	lsrs	r3, r2
 8021dd4:	6004      	str	r4, [r0, #0]
 8021dd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8021dda:	4288      	cmp	r0, r1
 8021ddc:	d3f4      	bcc.n	8021dc8 <L_shift+0xc>
 8021dde:	bd70      	pop	{r4, r5, r6, pc}

08021de0 <__match>:
 8021de0:	b530      	push	{r4, r5, lr}
 8021de2:	6803      	ldr	r3, [r0, #0]
 8021de4:	3301      	adds	r3, #1
 8021de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021dea:	b914      	cbnz	r4, 8021df2 <__match+0x12>
 8021dec:	6003      	str	r3, [r0, #0]
 8021dee:	2001      	movs	r0, #1
 8021df0:	bd30      	pop	{r4, r5, pc}
 8021df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021df6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8021dfa:	2d19      	cmp	r5, #25
 8021dfc:	bf98      	it	ls
 8021dfe:	3220      	addls	r2, #32
 8021e00:	42a2      	cmp	r2, r4
 8021e02:	d0f0      	beq.n	8021de6 <__match+0x6>
 8021e04:	2000      	movs	r0, #0
 8021e06:	e7f3      	b.n	8021df0 <__match+0x10>

08021e08 <__hexnan>:
 8021e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e0c:	680b      	ldr	r3, [r1, #0]
 8021e0e:	6801      	ldr	r1, [r0, #0]
 8021e10:	115e      	asrs	r6, r3, #5
 8021e12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021e16:	f013 031f 	ands.w	r3, r3, #31
 8021e1a:	b087      	sub	sp, #28
 8021e1c:	bf18      	it	ne
 8021e1e:	3604      	addne	r6, #4
 8021e20:	2500      	movs	r5, #0
 8021e22:	1f37      	subs	r7, r6, #4
 8021e24:	4682      	mov	sl, r0
 8021e26:	4690      	mov	r8, r2
 8021e28:	9301      	str	r3, [sp, #4]
 8021e2a:	f846 5c04 	str.w	r5, [r6, #-4]
 8021e2e:	46b9      	mov	r9, r7
 8021e30:	463c      	mov	r4, r7
 8021e32:	9502      	str	r5, [sp, #8]
 8021e34:	46ab      	mov	fp, r5
 8021e36:	784a      	ldrb	r2, [r1, #1]
 8021e38:	1c4b      	adds	r3, r1, #1
 8021e3a:	9303      	str	r3, [sp, #12]
 8021e3c:	b342      	cbz	r2, 8021e90 <__hexnan+0x88>
 8021e3e:	4610      	mov	r0, r2
 8021e40:	9105      	str	r1, [sp, #20]
 8021e42:	9204      	str	r2, [sp, #16]
 8021e44:	f7ff fd5e 	bl	8021904 <__hexdig_fun>
 8021e48:	2800      	cmp	r0, #0
 8021e4a:	d14f      	bne.n	8021eec <__hexnan+0xe4>
 8021e4c:	9a04      	ldr	r2, [sp, #16]
 8021e4e:	9905      	ldr	r1, [sp, #20]
 8021e50:	2a20      	cmp	r2, #32
 8021e52:	d818      	bhi.n	8021e86 <__hexnan+0x7e>
 8021e54:	9b02      	ldr	r3, [sp, #8]
 8021e56:	459b      	cmp	fp, r3
 8021e58:	dd13      	ble.n	8021e82 <__hexnan+0x7a>
 8021e5a:	454c      	cmp	r4, r9
 8021e5c:	d206      	bcs.n	8021e6c <__hexnan+0x64>
 8021e5e:	2d07      	cmp	r5, #7
 8021e60:	dc04      	bgt.n	8021e6c <__hexnan+0x64>
 8021e62:	462a      	mov	r2, r5
 8021e64:	4649      	mov	r1, r9
 8021e66:	4620      	mov	r0, r4
 8021e68:	f7ff ffa8 	bl	8021dbc <L_shift>
 8021e6c:	4544      	cmp	r4, r8
 8021e6e:	d950      	bls.n	8021f12 <__hexnan+0x10a>
 8021e70:	2300      	movs	r3, #0
 8021e72:	f1a4 0904 	sub.w	r9, r4, #4
 8021e76:	f844 3c04 	str.w	r3, [r4, #-4]
 8021e7a:	f8cd b008 	str.w	fp, [sp, #8]
 8021e7e:	464c      	mov	r4, r9
 8021e80:	461d      	mov	r5, r3
 8021e82:	9903      	ldr	r1, [sp, #12]
 8021e84:	e7d7      	b.n	8021e36 <__hexnan+0x2e>
 8021e86:	2a29      	cmp	r2, #41	; 0x29
 8021e88:	d156      	bne.n	8021f38 <__hexnan+0x130>
 8021e8a:	3102      	adds	r1, #2
 8021e8c:	f8ca 1000 	str.w	r1, [sl]
 8021e90:	f1bb 0f00 	cmp.w	fp, #0
 8021e94:	d050      	beq.n	8021f38 <__hexnan+0x130>
 8021e96:	454c      	cmp	r4, r9
 8021e98:	d206      	bcs.n	8021ea8 <__hexnan+0xa0>
 8021e9a:	2d07      	cmp	r5, #7
 8021e9c:	dc04      	bgt.n	8021ea8 <__hexnan+0xa0>
 8021e9e:	462a      	mov	r2, r5
 8021ea0:	4649      	mov	r1, r9
 8021ea2:	4620      	mov	r0, r4
 8021ea4:	f7ff ff8a 	bl	8021dbc <L_shift>
 8021ea8:	4544      	cmp	r4, r8
 8021eaa:	d934      	bls.n	8021f16 <__hexnan+0x10e>
 8021eac:	f1a8 0204 	sub.w	r2, r8, #4
 8021eb0:	4623      	mov	r3, r4
 8021eb2:	f853 1b04 	ldr.w	r1, [r3], #4
 8021eb6:	f842 1f04 	str.w	r1, [r2, #4]!
 8021eba:	429f      	cmp	r7, r3
 8021ebc:	d2f9      	bcs.n	8021eb2 <__hexnan+0xaa>
 8021ebe:	1b3b      	subs	r3, r7, r4
 8021ec0:	f023 0303 	bic.w	r3, r3, #3
 8021ec4:	3304      	adds	r3, #4
 8021ec6:	3401      	adds	r4, #1
 8021ec8:	3e03      	subs	r6, #3
 8021eca:	42b4      	cmp	r4, r6
 8021ecc:	bf88      	it	hi
 8021ece:	2304      	movhi	r3, #4
 8021ed0:	4443      	add	r3, r8
 8021ed2:	2200      	movs	r2, #0
 8021ed4:	f843 2b04 	str.w	r2, [r3], #4
 8021ed8:	429f      	cmp	r7, r3
 8021eda:	d2fb      	bcs.n	8021ed4 <__hexnan+0xcc>
 8021edc:	683b      	ldr	r3, [r7, #0]
 8021ede:	b91b      	cbnz	r3, 8021ee8 <__hexnan+0xe0>
 8021ee0:	4547      	cmp	r7, r8
 8021ee2:	d127      	bne.n	8021f34 <__hexnan+0x12c>
 8021ee4:	2301      	movs	r3, #1
 8021ee6:	603b      	str	r3, [r7, #0]
 8021ee8:	2005      	movs	r0, #5
 8021eea:	e026      	b.n	8021f3a <__hexnan+0x132>
 8021eec:	3501      	adds	r5, #1
 8021eee:	2d08      	cmp	r5, #8
 8021ef0:	f10b 0b01 	add.w	fp, fp, #1
 8021ef4:	dd06      	ble.n	8021f04 <__hexnan+0xfc>
 8021ef6:	4544      	cmp	r4, r8
 8021ef8:	d9c3      	bls.n	8021e82 <__hexnan+0x7a>
 8021efa:	2300      	movs	r3, #0
 8021efc:	f844 3c04 	str.w	r3, [r4, #-4]
 8021f00:	2501      	movs	r5, #1
 8021f02:	3c04      	subs	r4, #4
 8021f04:	6822      	ldr	r2, [r4, #0]
 8021f06:	f000 000f 	and.w	r0, r0, #15
 8021f0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021f0e:	6022      	str	r2, [r4, #0]
 8021f10:	e7b7      	b.n	8021e82 <__hexnan+0x7a>
 8021f12:	2508      	movs	r5, #8
 8021f14:	e7b5      	b.n	8021e82 <__hexnan+0x7a>
 8021f16:	9b01      	ldr	r3, [sp, #4]
 8021f18:	2b00      	cmp	r3, #0
 8021f1a:	d0df      	beq.n	8021edc <__hexnan+0xd4>
 8021f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021f20:	f1c3 0320 	rsb	r3, r3, #32
 8021f24:	fa22 f303 	lsr.w	r3, r2, r3
 8021f28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021f2c:	401a      	ands	r2, r3
 8021f2e:	f846 2c04 	str.w	r2, [r6, #-4]
 8021f32:	e7d3      	b.n	8021edc <__hexnan+0xd4>
 8021f34:	3f04      	subs	r7, #4
 8021f36:	e7d1      	b.n	8021edc <__hexnan+0xd4>
 8021f38:	2004      	movs	r0, #4
 8021f3a:	b007      	add	sp, #28
 8021f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f40 <_localeconv_r>:
 8021f40:	4800      	ldr	r0, [pc, #0]	; (8021f44 <_localeconv_r+0x4>)
 8021f42:	4770      	bx	lr
 8021f44:	20000818 	.word	0x20000818

08021f48 <_lseek_r>:
 8021f48:	b538      	push	{r3, r4, r5, lr}
 8021f4a:	4d07      	ldr	r5, [pc, #28]	; (8021f68 <_lseek_r+0x20>)
 8021f4c:	4604      	mov	r4, r0
 8021f4e:	4608      	mov	r0, r1
 8021f50:	4611      	mov	r1, r2
 8021f52:	2200      	movs	r2, #0
 8021f54:	602a      	str	r2, [r5, #0]
 8021f56:	461a      	mov	r2, r3
 8021f58:	f7ec ff8c 	bl	800ee74 <_lseek>
 8021f5c:	1c43      	adds	r3, r0, #1
 8021f5e:	d102      	bne.n	8021f66 <_lseek_r+0x1e>
 8021f60:	682b      	ldr	r3, [r5, #0]
 8021f62:	b103      	cbz	r3, 8021f66 <_lseek_r+0x1e>
 8021f64:	6023      	str	r3, [r4, #0]
 8021f66:	bd38      	pop	{r3, r4, r5, pc}
 8021f68:	2000ac78 	.word	0x2000ac78

08021f6c <__ascii_mbtowc>:
 8021f6c:	b082      	sub	sp, #8
 8021f6e:	b901      	cbnz	r1, 8021f72 <__ascii_mbtowc+0x6>
 8021f70:	a901      	add	r1, sp, #4
 8021f72:	b142      	cbz	r2, 8021f86 <__ascii_mbtowc+0x1a>
 8021f74:	b14b      	cbz	r3, 8021f8a <__ascii_mbtowc+0x1e>
 8021f76:	7813      	ldrb	r3, [r2, #0]
 8021f78:	600b      	str	r3, [r1, #0]
 8021f7a:	7812      	ldrb	r2, [r2, #0]
 8021f7c:	1e10      	subs	r0, r2, #0
 8021f7e:	bf18      	it	ne
 8021f80:	2001      	movne	r0, #1
 8021f82:	b002      	add	sp, #8
 8021f84:	4770      	bx	lr
 8021f86:	4610      	mov	r0, r2
 8021f88:	e7fb      	b.n	8021f82 <__ascii_mbtowc+0x16>
 8021f8a:	f06f 0001 	mvn.w	r0, #1
 8021f8e:	e7f8      	b.n	8021f82 <__ascii_mbtowc+0x16>

08021f90 <__malloc_lock>:
 8021f90:	4801      	ldr	r0, [pc, #4]	; (8021f98 <__malloc_lock+0x8>)
 8021f92:	f001 b885 	b.w	80230a0 <__retarget_lock_acquire_recursive>
 8021f96:	bf00      	nop
 8021f98:	2000ac80 	.word	0x2000ac80

08021f9c <__malloc_unlock>:
 8021f9c:	4801      	ldr	r0, [pc, #4]	; (8021fa4 <__malloc_unlock+0x8>)
 8021f9e:	f001 b880 	b.w	80230a2 <__retarget_lock_release_recursive>
 8021fa2:	bf00      	nop
 8021fa4:	2000ac80 	.word	0x2000ac80

08021fa8 <_Balloc>:
 8021fa8:	b570      	push	{r4, r5, r6, lr}
 8021faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021fac:	4604      	mov	r4, r0
 8021fae:	460d      	mov	r5, r1
 8021fb0:	b976      	cbnz	r6, 8021fd0 <_Balloc+0x28>
 8021fb2:	2010      	movs	r0, #16
 8021fb4:	f7fc fea4 	bl	801ed00 <malloc>
 8021fb8:	4602      	mov	r2, r0
 8021fba:	6260      	str	r0, [r4, #36]	; 0x24
 8021fbc:	b920      	cbnz	r0, 8021fc8 <_Balloc+0x20>
 8021fbe:	4b18      	ldr	r3, [pc, #96]	; (8022020 <_Balloc+0x78>)
 8021fc0:	4818      	ldr	r0, [pc, #96]	; (8022024 <_Balloc+0x7c>)
 8021fc2:	2166      	movs	r1, #102	; 0x66
 8021fc4:	f000 fe84 	bl	8022cd0 <__assert_func>
 8021fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021fcc:	6006      	str	r6, [r0, #0]
 8021fce:	60c6      	str	r6, [r0, #12]
 8021fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021fd2:	68f3      	ldr	r3, [r6, #12]
 8021fd4:	b183      	cbz	r3, 8021ff8 <_Balloc+0x50>
 8021fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021fd8:	68db      	ldr	r3, [r3, #12]
 8021fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021fde:	b9b8      	cbnz	r0, 8022010 <_Balloc+0x68>
 8021fe0:	2101      	movs	r1, #1
 8021fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8021fe6:	1d72      	adds	r2, r6, #5
 8021fe8:	0092      	lsls	r2, r2, #2
 8021fea:	4620      	mov	r0, r4
 8021fec:	f000 fc97 	bl	802291e <_calloc_r>
 8021ff0:	b160      	cbz	r0, 802200c <_Balloc+0x64>
 8021ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021ff6:	e00e      	b.n	8022016 <_Balloc+0x6e>
 8021ff8:	2221      	movs	r2, #33	; 0x21
 8021ffa:	2104      	movs	r1, #4
 8021ffc:	4620      	mov	r0, r4
 8021ffe:	f000 fc8e 	bl	802291e <_calloc_r>
 8022002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022004:	60f0      	str	r0, [r6, #12]
 8022006:	68db      	ldr	r3, [r3, #12]
 8022008:	2b00      	cmp	r3, #0
 802200a:	d1e4      	bne.n	8021fd6 <_Balloc+0x2e>
 802200c:	2000      	movs	r0, #0
 802200e:	bd70      	pop	{r4, r5, r6, pc}
 8022010:	6802      	ldr	r2, [r0, #0]
 8022012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8022016:	2300      	movs	r3, #0
 8022018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802201c:	e7f7      	b.n	802200e <_Balloc+0x66>
 802201e:	bf00      	nop
 8022020:	08024f7e 	.word	0x08024f7e
 8022024:	08025084 	.word	0x08025084

08022028 <_Bfree>:
 8022028:	b570      	push	{r4, r5, r6, lr}
 802202a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 802202c:	4605      	mov	r5, r0
 802202e:	460c      	mov	r4, r1
 8022030:	b976      	cbnz	r6, 8022050 <_Bfree+0x28>
 8022032:	2010      	movs	r0, #16
 8022034:	f7fc fe64 	bl	801ed00 <malloc>
 8022038:	4602      	mov	r2, r0
 802203a:	6268      	str	r0, [r5, #36]	; 0x24
 802203c:	b920      	cbnz	r0, 8022048 <_Bfree+0x20>
 802203e:	4b09      	ldr	r3, [pc, #36]	; (8022064 <_Bfree+0x3c>)
 8022040:	4809      	ldr	r0, [pc, #36]	; (8022068 <_Bfree+0x40>)
 8022042:	218a      	movs	r1, #138	; 0x8a
 8022044:	f000 fe44 	bl	8022cd0 <__assert_func>
 8022048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802204c:	6006      	str	r6, [r0, #0]
 802204e:	60c6      	str	r6, [r0, #12]
 8022050:	b13c      	cbz	r4, 8022062 <_Bfree+0x3a>
 8022052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022054:	6862      	ldr	r2, [r4, #4]
 8022056:	68db      	ldr	r3, [r3, #12]
 8022058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802205c:	6021      	str	r1, [r4, #0]
 802205e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022062:	bd70      	pop	{r4, r5, r6, pc}
 8022064:	08024f7e 	.word	0x08024f7e
 8022068:	08025084 	.word	0x08025084

0802206c <__multadd>:
 802206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022070:	690e      	ldr	r6, [r1, #16]
 8022072:	4607      	mov	r7, r0
 8022074:	4698      	mov	r8, r3
 8022076:	460c      	mov	r4, r1
 8022078:	f101 0014 	add.w	r0, r1, #20
 802207c:	2300      	movs	r3, #0
 802207e:	6805      	ldr	r5, [r0, #0]
 8022080:	b2a9      	uxth	r1, r5
 8022082:	fb02 8101 	mla	r1, r2, r1, r8
 8022086:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802208a:	0c2d      	lsrs	r5, r5, #16
 802208c:	fb02 c505 	mla	r5, r2, r5, ip
 8022090:	b289      	uxth	r1, r1
 8022092:	3301      	adds	r3, #1
 8022094:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8022098:	429e      	cmp	r6, r3
 802209a:	f840 1b04 	str.w	r1, [r0], #4
 802209e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80220a2:	dcec      	bgt.n	802207e <__multadd+0x12>
 80220a4:	f1b8 0f00 	cmp.w	r8, #0
 80220a8:	d022      	beq.n	80220f0 <__multadd+0x84>
 80220aa:	68a3      	ldr	r3, [r4, #8]
 80220ac:	42b3      	cmp	r3, r6
 80220ae:	dc19      	bgt.n	80220e4 <__multadd+0x78>
 80220b0:	6861      	ldr	r1, [r4, #4]
 80220b2:	4638      	mov	r0, r7
 80220b4:	3101      	adds	r1, #1
 80220b6:	f7ff ff77 	bl	8021fa8 <_Balloc>
 80220ba:	4605      	mov	r5, r0
 80220bc:	b928      	cbnz	r0, 80220ca <__multadd+0x5e>
 80220be:	4602      	mov	r2, r0
 80220c0:	4b0d      	ldr	r3, [pc, #52]	; (80220f8 <__multadd+0x8c>)
 80220c2:	480e      	ldr	r0, [pc, #56]	; (80220fc <__multadd+0x90>)
 80220c4:	21b5      	movs	r1, #181	; 0xb5
 80220c6:	f000 fe03 	bl	8022cd0 <__assert_func>
 80220ca:	6922      	ldr	r2, [r4, #16]
 80220cc:	3202      	adds	r2, #2
 80220ce:	f104 010c 	add.w	r1, r4, #12
 80220d2:	0092      	lsls	r2, r2, #2
 80220d4:	300c      	adds	r0, #12
 80220d6:	f7fc fe23 	bl	801ed20 <memcpy>
 80220da:	4621      	mov	r1, r4
 80220dc:	4638      	mov	r0, r7
 80220de:	f7ff ffa3 	bl	8022028 <_Bfree>
 80220e2:	462c      	mov	r4, r5
 80220e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80220e8:	3601      	adds	r6, #1
 80220ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80220ee:	6126      	str	r6, [r4, #16]
 80220f0:	4620      	mov	r0, r4
 80220f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220f6:	bf00      	nop
 80220f8:	08024ff4 	.word	0x08024ff4
 80220fc:	08025084 	.word	0x08025084

08022100 <__s2b>:
 8022100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022104:	460c      	mov	r4, r1
 8022106:	4615      	mov	r5, r2
 8022108:	461f      	mov	r7, r3
 802210a:	2209      	movs	r2, #9
 802210c:	3308      	adds	r3, #8
 802210e:	4606      	mov	r6, r0
 8022110:	fb93 f3f2 	sdiv	r3, r3, r2
 8022114:	2100      	movs	r1, #0
 8022116:	2201      	movs	r2, #1
 8022118:	429a      	cmp	r2, r3
 802211a:	db09      	blt.n	8022130 <__s2b+0x30>
 802211c:	4630      	mov	r0, r6
 802211e:	f7ff ff43 	bl	8021fa8 <_Balloc>
 8022122:	b940      	cbnz	r0, 8022136 <__s2b+0x36>
 8022124:	4602      	mov	r2, r0
 8022126:	4b19      	ldr	r3, [pc, #100]	; (802218c <__s2b+0x8c>)
 8022128:	4819      	ldr	r0, [pc, #100]	; (8022190 <__s2b+0x90>)
 802212a:	21ce      	movs	r1, #206	; 0xce
 802212c:	f000 fdd0 	bl	8022cd0 <__assert_func>
 8022130:	0052      	lsls	r2, r2, #1
 8022132:	3101      	adds	r1, #1
 8022134:	e7f0      	b.n	8022118 <__s2b+0x18>
 8022136:	9b08      	ldr	r3, [sp, #32]
 8022138:	6143      	str	r3, [r0, #20]
 802213a:	2d09      	cmp	r5, #9
 802213c:	f04f 0301 	mov.w	r3, #1
 8022140:	6103      	str	r3, [r0, #16]
 8022142:	dd16      	ble.n	8022172 <__s2b+0x72>
 8022144:	f104 0909 	add.w	r9, r4, #9
 8022148:	46c8      	mov	r8, r9
 802214a:	442c      	add	r4, r5
 802214c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8022150:	4601      	mov	r1, r0
 8022152:	3b30      	subs	r3, #48	; 0x30
 8022154:	220a      	movs	r2, #10
 8022156:	4630      	mov	r0, r6
 8022158:	f7ff ff88 	bl	802206c <__multadd>
 802215c:	45a0      	cmp	r8, r4
 802215e:	d1f5      	bne.n	802214c <__s2b+0x4c>
 8022160:	f1a5 0408 	sub.w	r4, r5, #8
 8022164:	444c      	add	r4, r9
 8022166:	1b2d      	subs	r5, r5, r4
 8022168:	1963      	adds	r3, r4, r5
 802216a:	42bb      	cmp	r3, r7
 802216c:	db04      	blt.n	8022178 <__s2b+0x78>
 802216e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022172:	340a      	adds	r4, #10
 8022174:	2509      	movs	r5, #9
 8022176:	e7f6      	b.n	8022166 <__s2b+0x66>
 8022178:	f814 3b01 	ldrb.w	r3, [r4], #1
 802217c:	4601      	mov	r1, r0
 802217e:	3b30      	subs	r3, #48	; 0x30
 8022180:	220a      	movs	r2, #10
 8022182:	4630      	mov	r0, r6
 8022184:	f7ff ff72 	bl	802206c <__multadd>
 8022188:	e7ee      	b.n	8022168 <__s2b+0x68>
 802218a:	bf00      	nop
 802218c:	08024ff4 	.word	0x08024ff4
 8022190:	08025084 	.word	0x08025084

08022194 <__hi0bits>:
 8022194:	0c03      	lsrs	r3, r0, #16
 8022196:	041b      	lsls	r3, r3, #16
 8022198:	b9d3      	cbnz	r3, 80221d0 <__hi0bits+0x3c>
 802219a:	0400      	lsls	r0, r0, #16
 802219c:	2310      	movs	r3, #16
 802219e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80221a2:	bf04      	itt	eq
 80221a4:	0200      	lsleq	r0, r0, #8
 80221a6:	3308      	addeq	r3, #8
 80221a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80221ac:	bf04      	itt	eq
 80221ae:	0100      	lsleq	r0, r0, #4
 80221b0:	3304      	addeq	r3, #4
 80221b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80221b6:	bf04      	itt	eq
 80221b8:	0080      	lsleq	r0, r0, #2
 80221ba:	3302      	addeq	r3, #2
 80221bc:	2800      	cmp	r0, #0
 80221be:	db05      	blt.n	80221cc <__hi0bits+0x38>
 80221c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80221c4:	f103 0301 	add.w	r3, r3, #1
 80221c8:	bf08      	it	eq
 80221ca:	2320      	moveq	r3, #32
 80221cc:	4618      	mov	r0, r3
 80221ce:	4770      	bx	lr
 80221d0:	2300      	movs	r3, #0
 80221d2:	e7e4      	b.n	802219e <__hi0bits+0xa>

080221d4 <__lo0bits>:
 80221d4:	6803      	ldr	r3, [r0, #0]
 80221d6:	f013 0207 	ands.w	r2, r3, #7
 80221da:	4601      	mov	r1, r0
 80221dc:	d00b      	beq.n	80221f6 <__lo0bits+0x22>
 80221de:	07da      	lsls	r2, r3, #31
 80221e0:	d424      	bmi.n	802222c <__lo0bits+0x58>
 80221e2:	0798      	lsls	r0, r3, #30
 80221e4:	bf49      	itett	mi
 80221e6:	085b      	lsrmi	r3, r3, #1
 80221e8:	089b      	lsrpl	r3, r3, #2
 80221ea:	2001      	movmi	r0, #1
 80221ec:	600b      	strmi	r3, [r1, #0]
 80221ee:	bf5c      	itt	pl
 80221f0:	600b      	strpl	r3, [r1, #0]
 80221f2:	2002      	movpl	r0, #2
 80221f4:	4770      	bx	lr
 80221f6:	b298      	uxth	r0, r3
 80221f8:	b9b0      	cbnz	r0, 8022228 <__lo0bits+0x54>
 80221fa:	0c1b      	lsrs	r3, r3, #16
 80221fc:	2010      	movs	r0, #16
 80221fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8022202:	bf04      	itt	eq
 8022204:	0a1b      	lsreq	r3, r3, #8
 8022206:	3008      	addeq	r0, #8
 8022208:	071a      	lsls	r2, r3, #28
 802220a:	bf04      	itt	eq
 802220c:	091b      	lsreq	r3, r3, #4
 802220e:	3004      	addeq	r0, #4
 8022210:	079a      	lsls	r2, r3, #30
 8022212:	bf04      	itt	eq
 8022214:	089b      	lsreq	r3, r3, #2
 8022216:	3002      	addeq	r0, #2
 8022218:	07da      	lsls	r2, r3, #31
 802221a:	d403      	bmi.n	8022224 <__lo0bits+0x50>
 802221c:	085b      	lsrs	r3, r3, #1
 802221e:	f100 0001 	add.w	r0, r0, #1
 8022222:	d005      	beq.n	8022230 <__lo0bits+0x5c>
 8022224:	600b      	str	r3, [r1, #0]
 8022226:	4770      	bx	lr
 8022228:	4610      	mov	r0, r2
 802222a:	e7e8      	b.n	80221fe <__lo0bits+0x2a>
 802222c:	2000      	movs	r0, #0
 802222e:	4770      	bx	lr
 8022230:	2020      	movs	r0, #32
 8022232:	4770      	bx	lr

08022234 <__i2b>:
 8022234:	b510      	push	{r4, lr}
 8022236:	460c      	mov	r4, r1
 8022238:	2101      	movs	r1, #1
 802223a:	f7ff feb5 	bl	8021fa8 <_Balloc>
 802223e:	4602      	mov	r2, r0
 8022240:	b928      	cbnz	r0, 802224e <__i2b+0x1a>
 8022242:	4b05      	ldr	r3, [pc, #20]	; (8022258 <__i2b+0x24>)
 8022244:	4805      	ldr	r0, [pc, #20]	; (802225c <__i2b+0x28>)
 8022246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802224a:	f000 fd41 	bl	8022cd0 <__assert_func>
 802224e:	2301      	movs	r3, #1
 8022250:	6144      	str	r4, [r0, #20]
 8022252:	6103      	str	r3, [r0, #16]
 8022254:	bd10      	pop	{r4, pc}
 8022256:	bf00      	nop
 8022258:	08024ff4 	.word	0x08024ff4
 802225c:	08025084 	.word	0x08025084

08022260 <__multiply>:
 8022260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022264:	4614      	mov	r4, r2
 8022266:	690a      	ldr	r2, [r1, #16]
 8022268:	6923      	ldr	r3, [r4, #16]
 802226a:	429a      	cmp	r2, r3
 802226c:	bfb8      	it	lt
 802226e:	460b      	movlt	r3, r1
 8022270:	460d      	mov	r5, r1
 8022272:	bfbc      	itt	lt
 8022274:	4625      	movlt	r5, r4
 8022276:	461c      	movlt	r4, r3
 8022278:	f8d5 a010 	ldr.w	sl, [r5, #16]
 802227c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8022280:	68ab      	ldr	r3, [r5, #8]
 8022282:	6869      	ldr	r1, [r5, #4]
 8022284:	eb0a 0709 	add.w	r7, sl, r9
 8022288:	42bb      	cmp	r3, r7
 802228a:	b085      	sub	sp, #20
 802228c:	bfb8      	it	lt
 802228e:	3101      	addlt	r1, #1
 8022290:	f7ff fe8a 	bl	8021fa8 <_Balloc>
 8022294:	b930      	cbnz	r0, 80222a4 <__multiply+0x44>
 8022296:	4602      	mov	r2, r0
 8022298:	4b42      	ldr	r3, [pc, #264]	; (80223a4 <__multiply+0x144>)
 802229a:	4843      	ldr	r0, [pc, #268]	; (80223a8 <__multiply+0x148>)
 802229c:	f240 115d 	movw	r1, #349	; 0x15d
 80222a0:	f000 fd16 	bl	8022cd0 <__assert_func>
 80222a4:	f100 0614 	add.w	r6, r0, #20
 80222a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80222ac:	4633      	mov	r3, r6
 80222ae:	2200      	movs	r2, #0
 80222b0:	4543      	cmp	r3, r8
 80222b2:	d31e      	bcc.n	80222f2 <__multiply+0x92>
 80222b4:	f105 0c14 	add.w	ip, r5, #20
 80222b8:	f104 0314 	add.w	r3, r4, #20
 80222bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80222c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80222c4:	9202      	str	r2, [sp, #8]
 80222c6:	ebac 0205 	sub.w	r2, ip, r5
 80222ca:	3a15      	subs	r2, #21
 80222cc:	f022 0203 	bic.w	r2, r2, #3
 80222d0:	3204      	adds	r2, #4
 80222d2:	f105 0115 	add.w	r1, r5, #21
 80222d6:	458c      	cmp	ip, r1
 80222d8:	bf38      	it	cc
 80222da:	2204      	movcc	r2, #4
 80222dc:	9201      	str	r2, [sp, #4]
 80222de:	9a02      	ldr	r2, [sp, #8]
 80222e0:	9303      	str	r3, [sp, #12]
 80222e2:	429a      	cmp	r2, r3
 80222e4:	d808      	bhi.n	80222f8 <__multiply+0x98>
 80222e6:	2f00      	cmp	r7, #0
 80222e8:	dc55      	bgt.n	8022396 <__multiply+0x136>
 80222ea:	6107      	str	r7, [r0, #16]
 80222ec:	b005      	add	sp, #20
 80222ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222f2:	f843 2b04 	str.w	r2, [r3], #4
 80222f6:	e7db      	b.n	80222b0 <__multiply+0x50>
 80222f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80222fc:	f1ba 0f00 	cmp.w	sl, #0
 8022300:	d020      	beq.n	8022344 <__multiply+0xe4>
 8022302:	f105 0e14 	add.w	lr, r5, #20
 8022306:	46b1      	mov	r9, r6
 8022308:	2200      	movs	r2, #0
 802230a:	f85e 4b04 	ldr.w	r4, [lr], #4
 802230e:	f8d9 b000 	ldr.w	fp, [r9]
 8022312:	b2a1      	uxth	r1, r4
 8022314:	fa1f fb8b 	uxth.w	fp, fp
 8022318:	fb0a b101 	mla	r1, sl, r1, fp
 802231c:	4411      	add	r1, r2
 802231e:	f8d9 2000 	ldr.w	r2, [r9]
 8022322:	0c24      	lsrs	r4, r4, #16
 8022324:	0c12      	lsrs	r2, r2, #16
 8022326:	fb0a 2404 	mla	r4, sl, r4, r2
 802232a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 802232e:	b289      	uxth	r1, r1
 8022330:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8022334:	45f4      	cmp	ip, lr
 8022336:	f849 1b04 	str.w	r1, [r9], #4
 802233a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 802233e:	d8e4      	bhi.n	802230a <__multiply+0xaa>
 8022340:	9901      	ldr	r1, [sp, #4]
 8022342:	5072      	str	r2, [r6, r1]
 8022344:	9a03      	ldr	r2, [sp, #12]
 8022346:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802234a:	3304      	adds	r3, #4
 802234c:	f1b9 0f00 	cmp.w	r9, #0
 8022350:	d01f      	beq.n	8022392 <__multiply+0x132>
 8022352:	6834      	ldr	r4, [r6, #0]
 8022354:	f105 0114 	add.w	r1, r5, #20
 8022358:	46b6      	mov	lr, r6
 802235a:	f04f 0a00 	mov.w	sl, #0
 802235e:	880a      	ldrh	r2, [r1, #0]
 8022360:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022364:	fb09 b202 	mla	r2, r9, r2, fp
 8022368:	4492      	add	sl, r2
 802236a:	b2a4      	uxth	r4, r4
 802236c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8022370:	f84e 4b04 	str.w	r4, [lr], #4
 8022374:	f851 4b04 	ldr.w	r4, [r1], #4
 8022378:	f8be 2000 	ldrh.w	r2, [lr]
 802237c:	0c24      	lsrs	r4, r4, #16
 802237e:	fb09 2404 	mla	r4, r9, r4, r2
 8022382:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8022386:	458c      	cmp	ip, r1
 8022388:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802238c:	d8e7      	bhi.n	802235e <__multiply+0xfe>
 802238e:	9a01      	ldr	r2, [sp, #4]
 8022390:	50b4      	str	r4, [r6, r2]
 8022392:	3604      	adds	r6, #4
 8022394:	e7a3      	b.n	80222de <__multiply+0x7e>
 8022396:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802239a:	2b00      	cmp	r3, #0
 802239c:	d1a5      	bne.n	80222ea <__multiply+0x8a>
 802239e:	3f01      	subs	r7, #1
 80223a0:	e7a1      	b.n	80222e6 <__multiply+0x86>
 80223a2:	bf00      	nop
 80223a4:	08024ff4 	.word	0x08024ff4
 80223a8:	08025084 	.word	0x08025084

080223ac <__pow5mult>:
 80223ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223b0:	4615      	mov	r5, r2
 80223b2:	f012 0203 	ands.w	r2, r2, #3
 80223b6:	4606      	mov	r6, r0
 80223b8:	460f      	mov	r7, r1
 80223ba:	d007      	beq.n	80223cc <__pow5mult+0x20>
 80223bc:	4c25      	ldr	r4, [pc, #148]	; (8022454 <__pow5mult+0xa8>)
 80223be:	3a01      	subs	r2, #1
 80223c0:	2300      	movs	r3, #0
 80223c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80223c6:	f7ff fe51 	bl	802206c <__multadd>
 80223ca:	4607      	mov	r7, r0
 80223cc:	10ad      	asrs	r5, r5, #2
 80223ce:	d03d      	beq.n	802244c <__pow5mult+0xa0>
 80223d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80223d2:	b97c      	cbnz	r4, 80223f4 <__pow5mult+0x48>
 80223d4:	2010      	movs	r0, #16
 80223d6:	f7fc fc93 	bl	801ed00 <malloc>
 80223da:	4602      	mov	r2, r0
 80223dc:	6270      	str	r0, [r6, #36]	; 0x24
 80223de:	b928      	cbnz	r0, 80223ec <__pow5mult+0x40>
 80223e0:	4b1d      	ldr	r3, [pc, #116]	; (8022458 <__pow5mult+0xac>)
 80223e2:	481e      	ldr	r0, [pc, #120]	; (802245c <__pow5mult+0xb0>)
 80223e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80223e8:	f000 fc72 	bl	8022cd0 <__assert_func>
 80223ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80223f0:	6004      	str	r4, [r0, #0]
 80223f2:	60c4      	str	r4, [r0, #12]
 80223f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80223f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80223fc:	b94c      	cbnz	r4, 8022412 <__pow5mult+0x66>
 80223fe:	f240 2171 	movw	r1, #625	; 0x271
 8022402:	4630      	mov	r0, r6
 8022404:	f7ff ff16 	bl	8022234 <__i2b>
 8022408:	2300      	movs	r3, #0
 802240a:	f8c8 0008 	str.w	r0, [r8, #8]
 802240e:	4604      	mov	r4, r0
 8022410:	6003      	str	r3, [r0, #0]
 8022412:	f04f 0900 	mov.w	r9, #0
 8022416:	07eb      	lsls	r3, r5, #31
 8022418:	d50a      	bpl.n	8022430 <__pow5mult+0x84>
 802241a:	4639      	mov	r1, r7
 802241c:	4622      	mov	r2, r4
 802241e:	4630      	mov	r0, r6
 8022420:	f7ff ff1e 	bl	8022260 <__multiply>
 8022424:	4639      	mov	r1, r7
 8022426:	4680      	mov	r8, r0
 8022428:	4630      	mov	r0, r6
 802242a:	f7ff fdfd 	bl	8022028 <_Bfree>
 802242e:	4647      	mov	r7, r8
 8022430:	106d      	asrs	r5, r5, #1
 8022432:	d00b      	beq.n	802244c <__pow5mult+0xa0>
 8022434:	6820      	ldr	r0, [r4, #0]
 8022436:	b938      	cbnz	r0, 8022448 <__pow5mult+0x9c>
 8022438:	4622      	mov	r2, r4
 802243a:	4621      	mov	r1, r4
 802243c:	4630      	mov	r0, r6
 802243e:	f7ff ff0f 	bl	8022260 <__multiply>
 8022442:	6020      	str	r0, [r4, #0]
 8022444:	f8c0 9000 	str.w	r9, [r0]
 8022448:	4604      	mov	r4, r0
 802244a:	e7e4      	b.n	8022416 <__pow5mult+0x6a>
 802244c:	4638      	mov	r0, r7
 802244e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022452:	bf00      	nop
 8022454:	080251d8 	.word	0x080251d8
 8022458:	08024f7e 	.word	0x08024f7e
 802245c:	08025084 	.word	0x08025084

08022460 <__lshift>:
 8022460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022464:	460c      	mov	r4, r1
 8022466:	6849      	ldr	r1, [r1, #4]
 8022468:	6923      	ldr	r3, [r4, #16]
 802246a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802246e:	68a3      	ldr	r3, [r4, #8]
 8022470:	4607      	mov	r7, r0
 8022472:	4691      	mov	r9, r2
 8022474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022478:	f108 0601 	add.w	r6, r8, #1
 802247c:	42b3      	cmp	r3, r6
 802247e:	db0b      	blt.n	8022498 <__lshift+0x38>
 8022480:	4638      	mov	r0, r7
 8022482:	f7ff fd91 	bl	8021fa8 <_Balloc>
 8022486:	4605      	mov	r5, r0
 8022488:	b948      	cbnz	r0, 802249e <__lshift+0x3e>
 802248a:	4602      	mov	r2, r0
 802248c:	4b28      	ldr	r3, [pc, #160]	; (8022530 <__lshift+0xd0>)
 802248e:	4829      	ldr	r0, [pc, #164]	; (8022534 <__lshift+0xd4>)
 8022490:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022494:	f000 fc1c 	bl	8022cd0 <__assert_func>
 8022498:	3101      	adds	r1, #1
 802249a:	005b      	lsls	r3, r3, #1
 802249c:	e7ee      	b.n	802247c <__lshift+0x1c>
 802249e:	2300      	movs	r3, #0
 80224a0:	f100 0114 	add.w	r1, r0, #20
 80224a4:	f100 0210 	add.w	r2, r0, #16
 80224a8:	4618      	mov	r0, r3
 80224aa:	4553      	cmp	r3, sl
 80224ac:	db33      	blt.n	8022516 <__lshift+0xb6>
 80224ae:	6920      	ldr	r0, [r4, #16]
 80224b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80224b4:	f104 0314 	add.w	r3, r4, #20
 80224b8:	f019 091f 	ands.w	r9, r9, #31
 80224bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80224c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80224c4:	d02b      	beq.n	802251e <__lshift+0xbe>
 80224c6:	f1c9 0e20 	rsb	lr, r9, #32
 80224ca:	468a      	mov	sl, r1
 80224cc:	2200      	movs	r2, #0
 80224ce:	6818      	ldr	r0, [r3, #0]
 80224d0:	fa00 f009 	lsl.w	r0, r0, r9
 80224d4:	4302      	orrs	r2, r0
 80224d6:	f84a 2b04 	str.w	r2, [sl], #4
 80224da:	f853 2b04 	ldr.w	r2, [r3], #4
 80224de:	459c      	cmp	ip, r3
 80224e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80224e4:	d8f3      	bhi.n	80224ce <__lshift+0x6e>
 80224e6:	ebac 0304 	sub.w	r3, ip, r4
 80224ea:	3b15      	subs	r3, #21
 80224ec:	f023 0303 	bic.w	r3, r3, #3
 80224f0:	3304      	adds	r3, #4
 80224f2:	f104 0015 	add.w	r0, r4, #21
 80224f6:	4584      	cmp	ip, r0
 80224f8:	bf38      	it	cc
 80224fa:	2304      	movcc	r3, #4
 80224fc:	50ca      	str	r2, [r1, r3]
 80224fe:	b10a      	cbz	r2, 8022504 <__lshift+0xa4>
 8022500:	f108 0602 	add.w	r6, r8, #2
 8022504:	3e01      	subs	r6, #1
 8022506:	4638      	mov	r0, r7
 8022508:	612e      	str	r6, [r5, #16]
 802250a:	4621      	mov	r1, r4
 802250c:	f7ff fd8c 	bl	8022028 <_Bfree>
 8022510:	4628      	mov	r0, r5
 8022512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022516:	f842 0f04 	str.w	r0, [r2, #4]!
 802251a:	3301      	adds	r3, #1
 802251c:	e7c5      	b.n	80224aa <__lshift+0x4a>
 802251e:	3904      	subs	r1, #4
 8022520:	f853 2b04 	ldr.w	r2, [r3], #4
 8022524:	f841 2f04 	str.w	r2, [r1, #4]!
 8022528:	459c      	cmp	ip, r3
 802252a:	d8f9      	bhi.n	8022520 <__lshift+0xc0>
 802252c:	e7ea      	b.n	8022504 <__lshift+0xa4>
 802252e:	bf00      	nop
 8022530:	08024ff4 	.word	0x08024ff4
 8022534:	08025084 	.word	0x08025084

08022538 <__mcmp>:
 8022538:	b530      	push	{r4, r5, lr}
 802253a:	6902      	ldr	r2, [r0, #16]
 802253c:	690c      	ldr	r4, [r1, #16]
 802253e:	1b12      	subs	r2, r2, r4
 8022540:	d10e      	bne.n	8022560 <__mcmp+0x28>
 8022542:	f100 0314 	add.w	r3, r0, #20
 8022546:	3114      	adds	r1, #20
 8022548:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802254c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022550:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022554:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022558:	42a5      	cmp	r5, r4
 802255a:	d003      	beq.n	8022564 <__mcmp+0x2c>
 802255c:	d305      	bcc.n	802256a <__mcmp+0x32>
 802255e:	2201      	movs	r2, #1
 8022560:	4610      	mov	r0, r2
 8022562:	bd30      	pop	{r4, r5, pc}
 8022564:	4283      	cmp	r3, r0
 8022566:	d3f3      	bcc.n	8022550 <__mcmp+0x18>
 8022568:	e7fa      	b.n	8022560 <__mcmp+0x28>
 802256a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802256e:	e7f7      	b.n	8022560 <__mcmp+0x28>

08022570 <__mdiff>:
 8022570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022574:	460c      	mov	r4, r1
 8022576:	4606      	mov	r6, r0
 8022578:	4611      	mov	r1, r2
 802257a:	4620      	mov	r0, r4
 802257c:	4617      	mov	r7, r2
 802257e:	f7ff ffdb 	bl	8022538 <__mcmp>
 8022582:	1e05      	subs	r5, r0, #0
 8022584:	d110      	bne.n	80225a8 <__mdiff+0x38>
 8022586:	4629      	mov	r1, r5
 8022588:	4630      	mov	r0, r6
 802258a:	f7ff fd0d 	bl	8021fa8 <_Balloc>
 802258e:	b930      	cbnz	r0, 802259e <__mdiff+0x2e>
 8022590:	4b39      	ldr	r3, [pc, #228]	; (8022678 <__mdiff+0x108>)
 8022592:	4602      	mov	r2, r0
 8022594:	f240 2132 	movw	r1, #562	; 0x232
 8022598:	4838      	ldr	r0, [pc, #224]	; (802267c <__mdiff+0x10c>)
 802259a:	f000 fb99 	bl	8022cd0 <__assert_func>
 802259e:	2301      	movs	r3, #1
 80225a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80225a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a8:	bfa4      	itt	ge
 80225aa:	463b      	movge	r3, r7
 80225ac:	4627      	movge	r7, r4
 80225ae:	4630      	mov	r0, r6
 80225b0:	6879      	ldr	r1, [r7, #4]
 80225b2:	bfa6      	itte	ge
 80225b4:	461c      	movge	r4, r3
 80225b6:	2500      	movge	r5, #0
 80225b8:	2501      	movlt	r5, #1
 80225ba:	f7ff fcf5 	bl	8021fa8 <_Balloc>
 80225be:	b920      	cbnz	r0, 80225ca <__mdiff+0x5a>
 80225c0:	4b2d      	ldr	r3, [pc, #180]	; (8022678 <__mdiff+0x108>)
 80225c2:	4602      	mov	r2, r0
 80225c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80225c8:	e7e6      	b.n	8022598 <__mdiff+0x28>
 80225ca:	693e      	ldr	r6, [r7, #16]
 80225cc:	60c5      	str	r5, [r0, #12]
 80225ce:	6925      	ldr	r5, [r4, #16]
 80225d0:	f107 0114 	add.w	r1, r7, #20
 80225d4:	f104 0914 	add.w	r9, r4, #20
 80225d8:	f100 0e14 	add.w	lr, r0, #20
 80225dc:	f107 0210 	add.w	r2, r7, #16
 80225e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80225e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80225e8:	46f2      	mov	sl, lr
 80225ea:	2700      	movs	r7, #0
 80225ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80225f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80225f4:	fa1f f883 	uxth.w	r8, r3
 80225f8:	fa17 f78b 	uxtah	r7, r7, fp
 80225fc:	0c1b      	lsrs	r3, r3, #16
 80225fe:	eba7 0808 	sub.w	r8, r7, r8
 8022602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802260a:	fa1f f888 	uxth.w	r8, r8
 802260e:	141f      	asrs	r7, r3, #16
 8022610:	454d      	cmp	r5, r9
 8022612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022616:	f84a 3b04 	str.w	r3, [sl], #4
 802261a:	d8e7      	bhi.n	80225ec <__mdiff+0x7c>
 802261c:	1b2b      	subs	r3, r5, r4
 802261e:	3b15      	subs	r3, #21
 8022620:	f023 0303 	bic.w	r3, r3, #3
 8022624:	3304      	adds	r3, #4
 8022626:	3415      	adds	r4, #21
 8022628:	42a5      	cmp	r5, r4
 802262a:	bf38      	it	cc
 802262c:	2304      	movcc	r3, #4
 802262e:	4419      	add	r1, r3
 8022630:	4473      	add	r3, lr
 8022632:	469e      	mov	lr, r3
 8022634:	460d      	mov	r5, r1
 8022636:	4565      	cmp	r5, ip
 8022638:	d30e      	bcc.n	8022658 <__mdiff+0xe8>
 802263a:	f10c 0203 	add.w	r2, ip, #3
 802263e:	1a52      	subs	r2, r2, r1
 8022640:	f022 0203 	bic.w	r2, r2, #3
 8022644:	3903      	subs	r1, #3
 8022646:	458c      	cmp	ip, r1
 8022648:	bf38      	it	cc
 802264a:	2200      	movcc	r2, #0
 802264c:	441a      	add	r2, r3
 802264e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022652:	b17b      	cbz	r3, 8022674 <__mdiff+0x104>
 8022654:	6106      	str	r6, [r0, #16]
 8022656:	e7a5      	b.n	80225a4 <__mdiff+0x34>
 8022658:	f855 8b04 	ldr.w	r8, [r5], #4
 802265c:	fa17 f488 	uxtah	r4, r7, r8
 8022660:	1422      	asrs	r2, r4, #16
 8022662:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8022666:	b2a4      	uxth	r4, r4
 8022668:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802266c:	f84e 4b04 	str.w	r4, [lr], #4
 8022670:	1417      	asrs	r7, r2, #16
 8022672:	e7e0      	b.n	8022636 <__mdiff+0xc6>
 8022674:	3e01      	subs	r6, #1
 8022676:	e7ea      	b.n	802264e <__mdiff+0xde>
 8022678:	08024ff4 	.word	0x08024ff4
 802267c:	08025084 	.word	0x08025084

08022680 <__ulp>:
 8022680:	b082      	sub	sp, #8
 8022682:	ed8d 0b00 	vstr	d0, [sp]
 8022686:	9b01      	ldr	r3, [sp, #4]
 8022688:	4912      	ldr	r1, [pc, #72]	; (80226d4 <__ulp+0x54>)
 802268a:	4019      	ands	r1, r3
 802268c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8022690:	2900      	cmp	r1, #0
 8022692:	dd05      	ble.n	80226a0 <__ulp+0x20>
 8022694:	2200      	movs	r2, #0
 8022696:	460b      	mov	r3, r1
 8022698:	ec43 2b10 	vmov	d0, r2, r3
 802269c:	b002      	add	sp, #8
 802269e:	4770      	bx	lr
 80226a0:	4249      	negs	r1, r1
 80226a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80226a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80226aa:	f04f 0200 	mov.w	r2, #0
 80226ae:	f04f 0300 	mov.w	r3, #0
 80226b2:	da04      	bge.n	80226be <__ulp+0x3e>
 80226b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80226b8:	fa41 f300 	asr.w	r3, r1, r0
 80226bc:	e7ec      	b.n	8022698 <__ulp+0x18>
 80226be:	f1a0 0114 	sub.w	r1, r0, #20
 80226c2:	291e      	cmp	r1, #30
 80226c4:	bfda      	itte	le
 80226c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80226ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80226ce:	2101      	movgt	r1, #1
 80226d0:	460a      	mov	r2, r1
 80226d2:	e7e1      	b.n	8022698 <__ulp+0x18>
 80226d4:	7ff00000 	.word	0x7ff00000

080226d8 <__b2d>:
 80226d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226da:	6905      	ldr	r5, [r0, #16]
 80226dc:	f100 0714 	add.w	r7, r0, #20
 80226e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80226e4:	1f2e      	subs	r6, r5, #4
 80226e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80226ea:	4620      	mov	r0, r4
 80226ec:	f7ff fd52 	bl	8022194 <__hi0bits>
 80226f0:	f1c0 0320 	rsb	r3, r0, #32
 80226f4:	280a      	cmp	r0, #10
 80226f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022774 <__b2d+0x9c>
 80226fa:	600b      	str	r3, [r1, #0]
 80226fc:	dc14      	bgt.n	8022728 <__b2d+0x50>
 80226fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8022702:	fa24 f10e 	lsr.w	r1, r4, lr
 8022706:	42b7      	cmp	r7, r6
 8022708:	ea41 030c 	orr.w	r3, r1, ip
 802270c:	bf34      	ite	cc
 802270e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022712:	2100      	movcs	r1, #0
 8022714:	3015      	adds	r0, #21
 8022716:	fa04 f000 	lsl.w	r0, r4, r0
 802271a:	fa21 f10e 	lsr.w	r1, r1, lr
 802271e:	ea40 0201 	orr.w	r2, r0, r1
 8022722:	ec43 2b10 	vmov	d0, r2, r3
 8022726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022728:	42b7      	cmp	r7, r6
 802272a:	bf3a      	itte	cc
 802272c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022730:	f1a5 0608 	subcc.w	r6, r5, #8
 8022734:	2100      	movcs	r1, #0
 8022736:	380b      	subs	r0, #11
 8022738:	d017      	beq.n	802276a <__b2d+0x92>
 802273a:	f1c0 0c20 	rsb	ip, r0, #32
 802273e:	fa04 f500 	lsl.w	r5, r4, r0
 8022742:	42be      	cmp	r6, r7
 8022744:	fa21 f40c 	lsr.w	r4, r1, ip
 8022748:	ea45 0504 	orr.w	r5, r5, r4
 802274c:	bf8c      	ite	hi
 802274e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022752:	2400      	movls	r4, #0
 8022754:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8022758:	fa01 f000 	lsl.w	r0, r1, r0
 802275c:	fa24 f40c 	lsr.w	r4, r4, ip
 8022760:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022764:	ea40 0204 	orr.w	r2, r0, r4
 8022768:	e7db      	b.n	8022722 <__b2d+0x4a>
 802276a:	ea44 030c 	orr.w	r3, r4, ip
 802276e:	460a      	mov	r2, r1
 8022770:	e7d7      	b.n	8022722 <__b2d+0x4a>
 8022772:	bf00      	nop
 8022774:	3ff00000 	.word	0x3ff00000

08022778 <__d2b>:
 8022778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802277c:	4689      	mov	r9, r1
 802277e:	2101      	movs	r1, #1
 8022780:	ec57 6b10 	vmov	r6, r7, d0
 8022784:	4690      	mov	r8, r2
 8022786:	f7ff fc0f 	bl	8021fa8 <_Balloc>
 802278a:	4604      	mov	r4, r0
 802278c:	b930      	cbnz	r0, 802279c <__d2b+0x24>
 802278e:	4602      	mov	r2, r0
 8022790:	4b25      	ldr	r3, [pc, #148]	; (8022828 <__d2b+0xb0>)
 8022792:	4826      	ldr	r0, [pc, #152]	; (802282c <__d2b+0xb4>)
 8022794:	f240 310a 	movw	r1, #778	; 0x30a
 8022798:	f000 fa9a 	bl	8022cd0 <__assert_func>
 802279c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80227a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80227a4:	bb35      	cbnz	r5, 80227f4 <__d2b+0x7c>
 80227a6:	2e00      	cmp	r6, #0
 80227a8:	9301      	str	r3, [sp, #4]
 80227aa:	d028      	beq.n	80227fe <__d2b+0x86>
 80227ac:	4668      	mov	r0, sp
 80227ae:	9600      	str	r6, [sp, #0]
 80227b0:	f7ff fd10 	bl	80221d4 <__lo0bits>
 80227b4:	9900      	ldr	r1, [sp, #0]
 80227b6:	b300      	cbz	r0, 80227fa <__d2b+0x82>
 80227b8:	9a01      	ldr	r2, [sp, #4]
 80227ba:	f1c0 0320 	rsb	r3, r0, #32
 80227be:	fa02 f303 	lsl.w	r3, r2, r3
 80227c2:	430b      	orrs	r3, r1
 80227c4:	40c2      	lsrs	r2, r0
 80227c6:	6163      	str	r3, [r4, #20]
 80227c8:	9201      	str	r2, [sp, #4]
 80227ca:	9b01      	ldr	r3, [sp, #4]
 80227cc:	61a3      	str	r3, [r4, #24]
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	bf14      	ite	ne
 80227d2:	2202      	movne	r2, #2
 80227d4:	2201      	moveq	r2, #1
 80227d6:	6122      	str	r2, [r4, #16]
 80227d8:	b1d5      	cbz	r5, 8022810 <__d2b+0x98>
 80227da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80227de:	4405      	add	r5, r0
 80227e0:	f8c9 5000 	str.w	r5, [r9]
 80227e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80227e8:	f8c8 0000 	str.w	r0, [r8]
 80227ec:	4620      	mov	r0, r4
 80227ee:	b003      	add	sp, #12
 80227f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80227f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80227f8:	e7d5      	b.n	80227a6 <__d2b+0x2e>
 80227fa:	6161      	str	r1, [r4, #20]
 80227fc:	e7e5      	b.n	80227ca <__d2b+0x52>
 80227fe:	a801      	add	r0, sp, #4
 8022800:	f7ff fce8 	bl	80221d4 <__lo0bits>
 8022804:	9b01      	ldr	r3, [sp, #4]
 8022806:	6163      	str	r3, [r4, #20]
 8022808:	2201      	movs	r2, #1
 802280a:	6122      	str	r2, [r4, #16]
 802280c:	3020      	adds	r0, #32
 802280e:	e7e3      	b.n	80227d8 <__d2b+0x60>
 8022810:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022818:	f8c9 0000 	str.w	r0, [r9]
 802281c:	6918      	ldr	r0, [r3, #16]
 802281e:	f7ff fcb9 	bl	8022194 <__hi0bits>
 8022822:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022826:	e7df      	b.n	80227e8 <__d2b+0x70>
 8022828:	08024ff4 	.word	0x08024ff4
 802282c:	08025084 	.word	0x08025084

08022830 <__ratio>:
 8022830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022834:	4688      	mov	r8, r1
 8022836:	4669      	mov	r1, sp
 8022838:	4681      	mov	r9, r0
 802283a:	f7ff ff4d 	bl	80226d8 <__b2d>
 802283e:	a901      	add	r1, sp, #4
 8022840:	4640      	mov	r0, r8
 8022842:	ec55 4b10 	vmov	r4, r5, d0
 8022846:	f7ff ff47 	bl	80226d8 <__b2d>
 802284a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802284e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022852:	eba3 0c02 	sub.w	ip, r3, r2
 8022856:	e9dd 3200 	ldrd	r3, r2, [sp]
 802285a:	1a9b      	subs	r3, r3, r2
 802285c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022860:	ec51 0b10 	vmov	r0, r1, d0
 8022864:	2b00      	cmp	r3, #0
 8022866:	bfd6      	itet	le
 8022868:	460a      	movle	r2, r1
 802286a:	462a      	movgt	r2, r5
 802286c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022870:	468b      	mov	fp, r1
 8022872:	462f      	mov	r7, r5
 8022874:	bfd4      	ite	le
 8022876:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802287a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802287e:	4620      	mov	r0, r4
 8022880:	ee10 2a10 	vmov	r2, s0
 8022884:	465b      	mov	r3, fp
 8022886:	4639      	mov	r1, r7
 8022888:	f7dd ffe0 	bl	800084c <__aeabi_ddiv>
 802288c:	ec41 0b10 	vmov	d0, r0, r1
 8022890:	b003      	add	sp, #12
 8022892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022896 <__copybits>:
 8022896:	3901      	subs	r1, #1
 8022898:	b570      	push	{r4, r5, r6, lr}
 802289a:	1149      	asrs	r1, r1, #5
 802289c:	6914      	ldr	r4, [r2, #16]
 802289e:	3101      	adds	r1, #1
 80228a0:	f102 0314 	add.w	r3, r2, #20
 80228a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80228a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80228ac:	1f05      	subs	r5, r0, #4
 80228ae:	42a3      	cmp	r3, r4
 80228b0:	d30c      	bcc.n	80228cc <__copybits+0x36>
 80228b2:	1aa3      	subs	r3, r4, r2
 80228b4:	3b11      	subs	r3, #17
 80228b6:	f023 0303 	bic.w	r3, r3, #3
 80228ba:	3211      	adds	r2, #17
 80228bc:	42a2      	cmp	r2, r4
 80228be:	bf88      	it	hi
 80228c0:	2300      	movhi	r3, #0
 80228c2:	4418      	add	r0, r3
 80228c4:	2300      	movs	r3, #0
 80228c6:	4288      	cmp	r0, r1
 80228c8:	d305      	bcc.n	80228d6 <__copybits+0x40>
 80228ca:	bd70      	pop	{r4, r5, r6, pc}
 80228cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80228d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80228d4:	e7eb      	b.n	80228ae <__copybits+0x18>
 80228d6:	f840 3b04 	str.w	r3, [r0], #4
 80228da:	e7f4      	b.n	80228c6 <__copybits+0x30>

080228dc <__any_on>:
 80228dc:	f100 0214 	add.w	r2, r0, #20
 80228e0:	6900      	ldr	r0, [r0, #16]
 80228e2:	114b      	asrs	r3, r1, #5
 80228e4:	4298      	cmp	r0, r3
 80228e6:	b510      	push	{r4, lr}
 80228e8:	db11      	blt.n	802290e <__any_on+0x32>
 80228ea:	dd0a      	ble.n	8022902 <__any_on+0x26>
 80228ec:	f011 011f 	ands.w	r1, r1, #31
 80228f0:	d007      	beq.n	8022902 <__any_on+0x26>
 80228f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80228f6:	fa24 f001 	lsr.w	r0, r4, r1
 80228fa:	fa00 f101 	lsl.w	r1, r0, r1
 80228fe:	428c      	cmp	r4, r1
 8022900:	d10b      	bne.n	802291a <__any_on+0x3e>
 8022902:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022906:	4293      	cmp	r3, r2
 8022908:	d803      	bhi.n	8022912 <__any_on+0x36>
 802290a:	2000      	movs	r0, #0
 802290c:	bd10      	pop	{r4, pc}
 802290e:	4603      	mov	r3, r0
 8022910:	e7f7      	b.n	8022902 <__any_on+0x26>
 8022912:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8022916:	2900      	cmp	r1, #0
 8022918:	d0f5      	beq.n	8022906 <__any_on+0x2a>
 802291a:	2001      	movs	r0, #1
 802291c:	e7f6      	b.n	802290c <__any_on+0x30>

0802291e <_calloc_r>:
 802291e:	b513      	push	{r0, r1, r4, lr}
 8022920:	434a      	muls	r2, r1
 8022922:	4611      	mov	r1, r2
 8022924:	9201      	str	r2, [sp, #4]
 8022926:	f7fc fa61 	bl	801edec <_malloc_r>
 802292a:	4604      	mov	r4, r0
 802292c:	b118      	cbz	r0, 8022936 <_calloc_r+0x18>
 802292e:	9a01      	ldr	r2, [sp, #4]
 8022930:	2100      	movs	r1, #0
 8022932:	f7fc fa03 	bl	801ed3c <memset>
 8022936:	4620      	mov	r0, r4
 8022938:	b002      	add	sp, #8
 802293a:	bd10      	pop	{r4, pc}

0802293c <_realloc_r>:
 802293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802293e:	4607      	mov	r7, r0
 8022940:	4614      	mov	r4, r2
 8022942:	460e      	mov	r6, r1
 8022944:	b921      	cbnz	r1, 8022950 <_realloc_r+0x14>
 8022946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802294a:	4611      	mov	r1, r2
 802294c:	f7fc ba4e 	b.w	801edec <_malloc_r>
 8022950:	b922      	cbnz	r2, 802295c <_realloc_r+0x20>
 8022952:	f7fc f9fb 	bl	801ed4c <_free_r>
 8022956:	4625      	mov	r5, r4
 8022958:	4628      	mov	r0, r5
 802295a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802295c:	f000 fbbc 	bl	80230d8 <_malloc_usable_size_r>
 8022960:	42a0      	cmp	r0, r4
 8022962:	d20f      	bcs.n	8022984 <_realloc_r+0x48>
 8022964:	4621      	mov	r1, r4
 8022966:	4638      	mov	r0, r7
 8022968:	f7fc fa40 	bl	801edec <_malloc_r>
 802296c:	4605      	mov	r5, r0
 802296e:	2800      	cmp	r0, #0
 8022970:	d0f2      	beq.n	8022958 <_realloc_r+0x1c>
 8022972:	4631      	mov	r1, r6
 8022974:	4622      	mov	r2, r4
 8022976:	f7fc f9d3 	bl	801ed20 <memcpy>
 802297a:	4631      	mov	r1, r6
 802297c:	4638      	mov	r0, r7
 802297e:	f7fc f9e5 	bl	801ed4c <_free_r>
 8022982:	e7e9      	b.n	8022958 <_realloc_r+0x1c>
 8022984:	4635      	mov	r5, r6
 8022986:	e7e7      	b.n	8022958 <_realloc_r+0x1c>

08022988 <__ssputs_r>:
 8022988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802298c:	688e      	ldr	r6, [r1, #8]
 802298e:	429e      	cmp	r6, r3
 8022990:	4682      	mov	sl, r0
 8022992:	460c      	mov	r4, r1
 8022994:	4690      	mov	r8, r2
 8022996:	461f      	mov	r7, r3
 8022998:	d838      	bhi.n	8022a0c <__ssputs_r+0x84>
 802299a:	898a      	ldrh	r2, [r1, #12]
 802299c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80229a0:	d032      	beq.n	8022a08 <__ssputs_r+0x80>
 80229a2:	6825      	ldr	r5, [r4, #0]
 80229a4:	6909      	ldr	r1, [r1, #16]
 80229a6:	eba5 0901 	sub.w	r9, r5, r1
 80229aa:	6965      	ldr	r5, [r4, #20]
 80229ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80229b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80229b4:	3301      	adds	r3, #1
 80229b6:	444b      	add	r3, r9
 80229b8:	106d      	asrs	r5, r5, #1
 80229ba:	429d      	cmp	r5, r3
 80229bc:	bf38      	it	cc
 80229be:	461d      	movcc	r5, r3
 80229c0:	0553      	lsls	r3, r2, #21
 80229c2:	d531      	bpl.n	8022a28 <__ssputs_r+0xa0>
 80229c4:	4629      	mov	r1, r5
 80229c6:	f7fc fa11 	bl	801edec <_malloc_r>
 80229ca:	4606      	mov	r6, r0
 80229cc:	b950      	cbnz	r0, 80229e4 <__ssputs_r+0x5c>
 80229ce:	230c      	movs	r3, #12
 80229d0:	f8ca 3000 	str.w	r3, [sl]
 80229d4:	89a3      	ldrh	r3, [r4, #12]
 80229d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80229da:	81a3      	strh	r3, [r4, #12]
 80229dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80229e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229e4:	6921      	ldr	r1, [r4, #16]
 80229e6:	464a      	mov	r2, r9
 80229e8:	f7fc f99a 	bl	801ed20 <memcpy>
 80229ec:	89a3      	ldrh	r3, [r4, #12]
 80229ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80229f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80229f6:	81a3      	strh	r3, [r4, #12]
 80229f8:	6126      	str	r6, [r4, #16]
 80229fa:	6165      	str	r5, [r4, #20]
 80229fc:	444e      	add	r6, r9
 80229fe:	eba5 0509 	sub.w	r5, r5, r9
 8022a02:	6026      	str	r6, [r4, #0]
 8022a04:	60a5      	str	r5, [r4, #8]
 8022a06:	463e      	mov	r6, r7
 8022a08:	42be      	cmp	r6, r7
 8022a0a:	d900      	bls.n	8022a0e <__ssputs_r+0x86>
 8022a0c:	463e      	mov	r6, r7
 8022a0e:	4632      	mov	r2, r6
 8022a10:	6820      	ldr	r0, [r4, #0]
 8022a12:	4641      	mov	r1, r8
 8022a14:	f000 fb46 	bl	80230a4 <memmove>
 8022a18:	68a3      	ldr	r3, [r4, #8]
 8022a1a:	6822      	ldr	r2, [r4, #0]
 8022a1c:	1b9b      	subs	r3, r3, r6
 8022a1e:	4432      	add	r2, r6
 8022a20:	60a3      	str	r3, [r4, #8]
 8022a22:	6022      	str	r2, [r4, #0]
 8022a24:	2000      	movs	r0, #0
 8022a26:	e7db      	b.n	80229e0 <__ssputs_r+0x58>
 8022a28:	462a      	mov	r2, r5
 8022a2a:	f7ff ff87 	bl	802293c <_realloc_r>
 8022a2e:	4606      	mov	r6, r0
 8022a30:	2800      	cmp	r0, #0
 8022a32:	d1e1      	bne.n	80229f8 <__ssputs_r+0x70>
 8022a34:	6921      	ldr	r1, [r4, #16]
 8022a36:	4650      	mov	r0, sl
 8022a38:	f7fc f988 	bl	801ed4c <_free_r>
 8022a3c:	e7c7      	b.n	80229ce <__ssputs_r+0x46>
	...

08022a40 <_svfiprintf_r>:
 8022a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a44:	4698      	mov	r8, r3
 8022a46:	898b      	ldrh	r3, [r1, #12]
 8022a48:	061b      	lsls	r3, r3, #24
 8022a4a:	b09d      	sub	sp, #116	; 0x74
 8022a4c:	4607      	mov	r7, r0
 8022a4e:	460d      	mov	r5, r1
 8022a50:	4614      	mov	r4, r2
 8022a52:	d50e      	bpl.n	8022a72 <_svfiprintf_r+0x32>
 8022a54:	690b      	ldr	r3, [r1, #16]
 8022a56:	b963      	cbnz	r3, 8022a72 <_svfiprintf_r+0x32>
 8022a58:	2140      	movs	r1, #64	; 0x40
 8022a5a:	f7fc f9c7 	bl	801edec <_malloc_r>
 8022a5e:	6028      	str	r0, [r5, #0]
 8022a60:	6128      	str	r0, [r5, #16]
 8022a62:	b920      	cbnz	r0, 8022a6e <_svfiprintf_r+0x2e>
 8022a64:	230c      	movs	r3, #12
 8022a66:	603b      	str	r3, [r7, #0]
 8022a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022a6c:	e0d1      	b.n	8022c12 <_svfiprintf_r+0x1d2>
 8022a6e:	2340      	movs	r3, #64	; 0x40
 8022a70:	616b      	str	r3, [r5, #20]
 8022a72:	2300      	movs	r3, #0
 8022a74:	9309      	str	r3, [sp, #36]	; 0x24
 8022a76:	2320      	movs	r3, #32
 8022a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a80:	2330      	movs	r3, #48	; 0x30
 8022a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022c2c <_svfiprintf_r+0x1ec>
 8022a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a8a:	f04f 0901 	mov.w	r9, #1
 8022a8e:	4623      	mov	r3, r4
 8022a90:	469a      	mov	sl, r3
 8022a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a96:	b10a      	cbz	r2, 8022a9c <_svfiprintf_r+0x5c>
 8022a98:	2a25      	cmp	r2, #37	; 0x25
 8022a9a:	d1f9      	bne.n	8022a90 <_svfiprintf_r+0x50>
 8022a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8022aa0:	d00b      	beq.n	8022aba <_svfiprintf_r+0x7a>
 8022aa2:	465b      	mov	r3, fp
 8022aa4:	4622      	mov	r2, r4
 8022aa6:	4629      	mov	r1, r5
 8022aa8:	4638      	mov	r0, r7
 8022aaa:	f7ff ff6d 	bl	8022988 <__ssputs_r>
 8022aae:	3001      	adds	r0, #1
 8022ab0:	f000 80aa 	beq.w	8022c08 <_svfiprintf_r+0x1c8>
 8022ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022ab6:	445a      	add	r2, fp
 8022ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8022aba:	f89a 3000 	ldrb.w	r3, [sl]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	f000 80a2 	beq.w	8022c08 <_svfiprintf_r+0x1c8>
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ace:	f10a 0a01 	add.w	sl, sl, #1
 8022ad2:	9304      	str	r3, [sp, #16]
 8022ad4:	9307      	str	r3, [sp, #28]
 8022ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022ada:	931a      	str	r3, [sp, #104]	; 0x68
 8022adc:	4654      	mov	r4, sl
 8022ade:	2205      	movs	r2, #5
 8022ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ae4:	4851      	ldr	r0, [pc, #324]	; (8022c2c <_svfiprintf_r+0x1ec>)
 8022ae6:	f7dd fb7b 	bl	80001e0 <memchr>
 8022aea:	9a04      	ldr	r2, [sp, #16]
 8022aec:	b9d8      	cbnz	r0, 8022b26 <_svfiprintf_r+0xe6>
 8022aee:	06d0      	lsls	r0, r2, #27
 8022af0:	bf44      	itt	mi
 8022af2:	2320      	movmi	r3, #32
 8022af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022af8:	0711      	lsls	r1, r2, #28
 8022afa:	bf44      	itt	mi
 8022afc:	232b      	movmi	r3, #43	; 0x2b
 8022afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022b02:	f89a 3000 	ldrb.w	r3, [sl]
 8022b06:	2b2a      	cmp	r3, #42	; 0x2a
 8022b08:	d015      	beq.n	8022b36 <_svfiprintf_r+0xf6>
 8022b0a:	9a07      	ldr	r2, [sp, #28]
 8022b0c:	4654      	mov	r4, sl
 8022b0e:	2000      	movs	r0, #0
 8022b10:	f04f 0c0a 	mov.w	ip, #10
 8022b14:	4621      	mov	r1, r4
 8022b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022b1a:	3b30      	subs	r3, #48	; 0x30
 8022b1c:	2b09      	cmp	r3, #9
 8022b1e:	d94e      	bls.n	8022bbe <_svfiprintf_r+0x17e>
 8022b20:	b1b0      	cbz	r0, 8022b50 <_svfiprintf_r+0x110>
 8022b22:	9207      	str	r2, [sp, #28]
 8022b24:	e014      	b.n	8022b50 <_svfiprintf_r+0x110>
 8022b26:	eba0 0308 	sub.w	r3, r0, r8
 8022b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8022b2e:	4313      	orrs	r3, r2
 8022b30:	9304      	str	r3, [sp, #16]
 8022b32:	46a2      	mov	sl, r4
 8022b34:	e7d2      	b.n	8022adc <_svfiprintf_r+0x9c>
 8022b36:	9b03      	ldr	r3, [sp, #12]
 8022b38:	1d19      	adds	r1, r3, #4
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	9103      	str	r1, [sp, #12]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	bfbb      	ittet	lt
 8022b42:	425b      	neglt	r3, r3
 8022b44:	f042 0202 	orrlt.w	r2, r2, #2
 8022b48:	9307      	strge	r3, [sp, #28]
 8022b4a:	9307      	strlt	r3, [sp, #28]
 8022b4c:	bfb8      	it	lt
 8022b4e:	9204      	strlt	r2, [sp, #16]
 8022b50:	7823      	ldrb	r3, [r4, #0]
 8022b52:	2b2e      	cmp	r3, #46	; 0x2e
 8022b54:	d10c      	bne.n	8022b70 <_svfiprintf_r+0x130>
 8022b56:	7863      	ldrb	r3, [r4, #1]
 8022b58:	2b2a      	cmp	r3, #42	; 0x2a
 8022b5a:	d135      	bne.n	8022bc8 <_svfiprintf_r+0x188>
 8022b5c:	9b03      	ldr	r3, [sp, #12]
 8022b5e:	1d1a      	adds	r2, r3, #4
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	9203      	str	r2, [sp, #12]
 8022b64:	2b00      	cmp	r3, #0
 8022b66:	bfb8      	it	lt
 8022b68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022b6c:	3402      	adds	r4, #2
 8022b6e:	9305      	str	r3, [sp, #20]
 8022b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022c3c <_svfiprintf_r+0x1fc>
 8022b74:	7821      	ldrb	r1, [r4, #0]
 8022b76:	2203      	movs	r2, #3
 8022b78:	4650      	mov	r0, sl
 8022b7a:	f7dd fb31 	bl	80001e0 <memchr>
 8022b7e:	b140      	cbz	r0, 8022b92 <_svfiprintf_r+0x152>
 8022b80:	2340      	movs	r3, #64	; 0x40
 8022b82:	eba0 000a 	sub.w	r0, r0, sl
 8022b86:	fa03 f000 	lsl.w	r0, r3, r0
 8022b8a:	9b04      	ldr	r3, [sp, #16]
 8022b8c:	4303      	orrs	r3, r0
 8022b8e:	3401      	adds	r4, #1
 8022b90:	9304      	str	r3, [sp, #16]
 8022b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b96:	4826      	ldr	r0, [pc, #152]	; (8022c30 <_svfiprintf_r+0x1f0>)
 8022b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022b9c:	2206      	movs	r2, #6
 8022b9e:	f7dd fb1f 	bl	80001e0 <memchr>
 8022ba2:	2800      	cmp	r0, #0
 8022ba4:	d038      	beq.n	8022c18 <_svfiprintf_r+0x1d8>
 8022ba6:	4b23      	ldr	r3, [pc, #140]	; (8022c34 <_svfiprintf_r+0x1f4>)
 8022ba8:	bb1b      	cbnz	r3, 8022bf2 <_svfiprintf_r+0x1b2>
 8022baa:	9b03      	ldr	r3, [sp, #12]
 8022bac:	3307      	adds	r3, #7
 8022bae:	f023 0307 	bic.w	r3, r3, #7
 8022bb2:	3308      	adds	r3, #8
 8022bb4:	9303      	str	r3, [sp, #12]
 8022bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bb8:	4433      	add	r3, r6
 8022bba:	9309      	str	r3, [sp, #36]	; 0x24
 8022bbc:	e767      	b.n	8022a8e <_svfiprintf_r+0x4e>
 8022bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8022bc2:	460c      	mov	r4, r1
 8022bc4:	2001      	movs	r0, #1
 8022bc6:	e7a5      	b.n	8022b14 <_svfiprintf_r+0xd4>
 8022bc8:	2300      	movs	r3, #0
 8022bca:	3401      	adds	r4, #1
 8022bcc:	9305      	str	r3, [sp, #20]
 8022bce:	4619      	mov	r1, r3
 8022bd0:	f04f 0c0a 	mov.w	ip, #10
 8022bd4:	4620      	mov	r0, r4
 8022bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022bda:	3a30      	subs	r2, #48	; 0x30
 8022bdc:	2a09      	cmp	r2, #9
 8022bde:	d903      	bls.n	8022be8 <_svfiprintf_r+0x1a8>
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	d0c5      	beq.n	8022b70 <_svfiprintf_r+0x130>
 8022be4:	9105      	str	r1, [sp, #20]
 8022be6:	e7c3      	b.n	8022b70 <_svfiprintf_r+0x130>
 8022be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022bec:	4604      	mov	r4, r0
 8022bee:	2301      	movs	r3, #1
 8022bf0:	e7f0      	b.n	8022bd4 <_svfiprintf_r+0x194>
 8022bf2:	ab03      	add	r3, sp, #12
 8022bf4:	9300      	str	r3, [sp, #0]
 8022bf6:	462a      	mov	r2, r5
 8022bf8:	4b0f      	ldr	r3, [pc, #60]	; (8022c38 <_svfiprintf_r+0x1f8>)
 8022bfa:	a904      	add	r1, sp, #16
 8022bfc:	4638      	mov	r0, r7
 8022bfe:	f7fc f9ef 	bl	801efe0 <_printf_float>
 8022c02:	1c42      	adds	r2, r0, #1
 8022c04:	4606      	mov	r6, r0
 8022c06:	d1d6      	bne.n	8022bb6 <_svfiprintf_r+0x176>
 8022c08:	89ab      	ldrh	r3, [r5, #12]
 8022c0a:	065b      	lsls	r3, r3, #25
 8022c0c:	f53f af2c 	bmi.w	8022a68 <_svfiprintf_r+0x28>
 8022c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022c12:	b01d      	add	sp, #116	; 0x74
 8022c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c18:	ab03      	add	r3, sp, #12
 8022c1a:	9300      	str	r3, [sp, #0]
 8022c1c:	462a      	mov	r2, r5
 8022c1e:	4b06      	ldr	r3, [pc, #24]	; (8022c38 <_svfiprintf_r+0x1f8>)
 8022c20:	a904      	add	r1, sp, #16
 8022c22:	4638      	mov	r0, r7
 8022c24:	f7fc fc80 	bl	801f528 <_printf_i>
 8022c28:	e7eb      	b.n	8022c02 <_svfiprintf_r+0x1c2>
 8022c2a:	bf00      	nop
 8022c2c:	080251e4 	.word	0x080251e4
 8022c30:	080251ee 	.word	0x080251ee
 8022c34:	0801efe1 	.word	0x0801efe1
 8022c38:	08022989 	.word	0x08022989
 8022c3c:	080251ea 	.word	0x080251ea

08022c40 <_read_r>:
 8022c40:	b538      	push	{r3, r4, r5, lr}
 8022c42:	4d07      	ldr	r5, [pc, #28]	; (8022c60 <_read_r+0x20>)
 8022c44:	4604      	mov	r4, r0
 8022c46:	4608      	mov	r0, r1
 8022c48:	4611      	mov	r1, r2
 8022c4a:	2200      	movs	r2, #0
 8022c4c:	602a      	str	r2, [r5, #0]
 8022c4e:	461a      	mov	r2, r3
 8022c50:	f7ec f8b0 	bl	800edb4 <_read>
 8022c54:	1c43      	adds	r3, r0, #1
 8022c56:	d102      	bne.n	8022c5e <_read_r+0x1e>
 8022c58:	682b      	ldr	r3, [r5, #0]
 8022c5a:	b103      	cbz	r3, 8022c5e <_read_r+0x1e>
 8022c5c:	6023      	str	r3, [r4, #0]
 8022c5e:	bd38      	pop	{r3, r4, r5, pc}
 8022c60:	2000ac78 	.word	0x2000ac78
 8022c64:	00000000 	.word	0x00000000

08022c68 <nan>:
 8022c68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022c70 <nan+0x8>
 8022c6c:	4770      	bx	lr
 8022c6e:	bf00      	nop
 8022c70:	00000000 	.word	0x00000000
 8022c74:	7ff80000 	.word	0x7ff80000

08022c78 <finitef>:
 8022c78:	b082      	sub	sp, #8
 8022c7a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8022c7e:	9801      	ldr	r0, [sp, #4]
 8022c80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022c84:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8022c88:	bfac      	ite	ge
 8022c8a:	2000      	movge	r0, #0
 8022c8c:	2001      	movlt	r0, #1
 8022c8e:	b002      	add	sp, #8
 8022c90:	4770      	bx	lr

08022c92 <strncmp>:
 8022c92:	b510      	push	{r4, lr}
 8022c94:	b16a      	cbz	r2, 8022cb2 <strncmp+0x20>
 8022c96:	3901      	subs	r1, #1
 8022c98:	1884      	adds	r4, r0, r2
 8022c9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022c9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	d103      	bne.n	8022cae <strncmp+0x1c>
 8022ca6:	42a0      	cmp	r0, r4
 8022ca8:	d001      	beq.n	8022cae <strncmp+0x1c>
 8022caa:	2b00      	cmp	r3, #0
 8022cac:	d1f5      	bne.n	8022c9a <strncmp+0x8>
 8022cae:	1a98      	subs	r0, r3, r2
 8022cb0:	bd10      	pop	{r4, pc}
 8022cb2:	4610      	mov	r0, r2
 8022cb4:	e7fc      	b.n	8022cb0 <strncmp+0x1e>

08022cb6 <__ascii_wctomb>:
 8022cb6:	b149      	cbz	r1, 8022ccc <__ascii_wctomb+0x16>
 8022cb8:	2aff      	cmp	r2, #255	; 0xff
 8022cba:	bf85      	ittet	hi
 8022cbc:	238a      	movhi	r3, #138	; 0x8a
 8022cbe:	6003      	strhi	r3, [r0, #0]
 8022cc0:	700a      	strbls	r2, [r1, #0]
 8022cc2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8022cc6:	bf98      	it	ls
 8022cc8:	2001      	movls	r0, #1
 8022cca:	4770      	bx	lr
 8022ccc:	4608      	mov	r0, r1
 8022cce:	4770      	bx	lr

08022cd0 <__assert_func>:
 8022cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022cd2:	4614      	mov	r4, r2
 8022cd4:	461a      	mov	r2, r3
 8022cd6:	4b09      	ldr	r3, [pc, #36]	; (8022cfc <__assert_func+0x2c>)
 8022cd8:	681b      	ldr	r3, [r3, #0]
 8022cda:	4605      	mov	r5, r0
 8022cdc:	68d8      	ldr	r0, [r3, #12]
 8022cde:	b14c      	cbz	r4, 8022cf4 <__assert_func+0x24>
 8022ce0:	4b07      	ldr	r3, [pc, #28]	; (8022d00 <__assert_func+0x30>)
 8022ce2:	9100      	str	r1, [sp, #0]
 8022ce4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022ce8:	4906      	ldr	r1, [pc, #24]	; (8022d04 <__assert_func+0x34>)
 8022cea:	462b      	mov	r3, r5
 8022cec:	f000 f9a6 	bl	802303c <fiprintf>
 8022cf0:	f000 fc14 	bl	802351c <abort>
 8022cf4:	4b04      	ldr	r3, [pc, #16]	; (8022d08 <__assert_func+0x38>)
 8022cf6:	461c      	mov	r4, r3
 8022cf8:	e7f3      	b.n	8022ce2 <__assert_func+0x12>
 8022cfa:	bf00      	nop
 8022cfc:	200006c0 	.word	0x200006c0
 8022d00:	080251f5 	.word	0x080251f5
 8022d04:	08025202 	.word	0x08025202
 8022d08:	08025230 	.word	0x08025230

08022d0c <__sflush_r>:
 8022d0c:	898a      	ldrh	r2, [r1, #12]
 8022d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022d12:	4605      	mov	r5, r0
 8022d14:	0710      	lsls	r0, r2, #28
 8022d16:	460c      	mov	r4, r1
 8022d18:	d458      	bmi.n	8022dcc <__sflush_r+0xc0>
 8022d1a:	684b      	ldr	r3, [r1, #4]
 8022d1c:	2b00      	cmp	r3, #0
 8022d1e:	dc05      	bgt.n	8022d2c <__sflush_r+0x20>
 8022d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	dc02      	bgt.n	8022d2c <__sflush_r+0x20>
 8022d26:	2000      	movs	r0, #0
 8022d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022d2e:	2e00      	cmp	r6, #0
 8022d30:	d0f9      	beq.n	8022d26 <__sflush_r+0x1a>
 8022d32:	2300      	movs	r3, #0
 8022d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022d38:	682f      	ldr	r7, [r5, #0]
 8022d3a:	602b      	str	r3, [r5, #0]
 8022d3c:	d032      	beq.n	8022da4 <__sflush_r+0x98>
 8022d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022d40:	89a3      	ldrh	r3, [r4, #12]
 8022d42:	075a      	lsls	r2, r3, #29
 8022d44:	d505      	bpl.n	8022d52 <__sflush_r+0x46>
 8022d46:	6863      	ldr	r3, [r4, #4]
 8022d48:	1ac0      	subs	r0, r0, r3
 8022d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022d4c:	b10b      	cbz	r3, 8022d52 <__sflush_r+0x46>
 8022d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022d50:	1ac0      	subs	r0, r0, r3
 8022d52:	2300      	movs	r3, #0
 8022d54:	4602      	mov	r2, r0
 8022d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022d58:	6a21      	ldr	r1, [r4, #32]
 8022d5a:	4628      	mov	r0, r5
 8022d5c:	47b0      	blx	r6
 8022d5e:	1c43      	adds	r3, r0, #1
 8022d60:	89a3      	ldrh	r3, [r4, #12]
 8022d62:	d106      	bne.n	8022d72 <__sflush_r+0x66>
 8022d64:	6829      	ldr	r1, [r5, #0]
 8022d66:	291d      	cmp	r1, #29
 8022d68:	d82c      	bhi.n	8022dc4 <__sflush_r+0xb8>
 8022d6a:	4a2a      	ldr	r2, [pc, #168]	; (8022e14 <__sflush_r+0x108>)
 8022d6c:	40ca      	lsrs	r2, r1
 8022d6e:	07d6      	lsls	r6, r2, #31
 8022d70:	d528      	bpl.n	8022dc4 <__sflush_r+0xb8>
 8022d72:	2200      	movs	r2, #0
 8022d74:	6062      	str	r2, [r4, #4]
 8022d76:	04d9      	lsls	r1, r3, #19
 8022d78:	6922      	ldr	r2, [r4, #16]
 8022d7a:	6022      	str	r2, [r4, #0]
 8022d7c:	d504      	bpl.n	8022d88 <__sflush_r+0x7c>
 8022d7e:	1c42      	adds	r2, r0, #1
 8022d80:	d101      	bne.n	8022d86 <__sflush_r+0x7a>
 8022d82:	682b      	ldr	r3, [r5, #0]
 8022d84:	b903      	cbnz	r3, 8022d88 <__sflush_r+0x7c>
 8022d86:	6560      	str	r0, [r4, #84]	; 0x54
 8022d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022d8a:	602f      	str	r7, [r5, #0]
 8022d8c:	2900      	cmp	r1, #0
 8022d8e:	d0ca      	beq.n	8022d26 <__sflush_r+0x1a>
 8022d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d94:	4299      	cmp	r1, r3
 8022d96:	d002      	beq.n	8022d9e <__sflush_r+0x92>
 8022d98:	4628      	mov	r0, r5
 8022d9a:	f7fb ffd7 	bl	801ed4c <_free_r>
 8022d9e:	2000      	movs	r0, #0
 8022da0:	6360      	str	r0, [r4, #52]	; 0x34
 8022da2:	e7c1      	b.n	8022d28 <__sflush_r+0x1c>
 8022da4:	6a21      	ldr	r1, [r4, #32]
 8022da6:	2301      	movs	r3, #1
 8022da8:	4628      	mov	r0, r5
 8022daa:	47b0      	blx	r6
 8022dac:	1c41      	adds	r1, r0, #1
 8022dae:	d1c7      	bne.n	8022d40 <__sflush_r+0x34>
 8022db0:	682b      	ldr	r3, [r5, #0]
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	d0c4      	beq.n	8022d40 <__sflush_r+0x34>
 8022db6:	2b1d      	cmp	r3, #29
 8022db8:	d001      	beq.n	8022dbe <__sflush_r+0xb2>
 8022dba:	2b16      	cmp	r3, #22
 8022dbc:	d101      	bne.n	8022dc2 <__sflush_r+0xb6>
 8022dbe:	602f      	str	r7, [r5, #0]
 8022dc0:	e7b1      	b.n	8022d26 <__sflush_r+0x1a>
 8022dc2:	89a3      	ldrh	r3, [r4, #12]
 8022dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022dc8:	81a3      	strh	r3, [r4, #12]
 8022dca:	e7ad      	b.n	8022d28 <__sflush_r+0x1c>
 8022dcc:	690f      	ldr	r7, [r1, #16]
 8022dce:	2f00      	cmp	r7, #0
 8022dd0:	d0a9      	beq.n	8022d26 <__sflush_r+0x1a>
 8022dd2:	0793      	lsls	r3, r2, #30
 8022dd4:	680e      	ldr	r6, [r1, #0]
 8022dd6:	bf08      	it	eq
 8022dd8:	694b      	ldreq	r3, [r1, #20]
 8022dda:	600f      	str	r7, [r1, #0]
 8022ddc:	bf18      	it	ne
 8022dde:	2300      	movne	r3, #0
 8022de0:	eba6 0807 	sub.w	r8, r6, r7
 8022de4:	608b      	str	r3, [r1, #8]
 8022de6:	f1b8 0f00 	cmp.w	r8, #0
 8022dea:	dd9c      	ble.n	8022d26 <__sflush_r+0x1a>
 8022dec:	6a21      	ldr	r1, [r4, #32]
 8022dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022df0:	4643      	mov	r3, r8
 8022df2:	463a      	mov	r2, r7
 8022df4:	4628      	mov	r0, r5
 8022df6:	47b0      	blx	r6
 8022df8:	2800      	cmp	r0, #0
 8022dfa:	dc06      	bgt.n	8022e0a <__sflush_r+0xfe>
 8022dfc:	89a3      	ldrh	r3, [r4, #12]
 8022dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e02:	81a3      	strh	r3, [r4, #12]
 8022e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e08:	e78e      	b.n	8022d28 <__sflush_r+0x1c>
 8022e0a:	4407      	add	r7, r0
 8022e0c:	eba8 0800 	sub.w	r8, r8, r0
 8022e10:	e7e9      	b.n	8022de6 <__sflush_r+0xda>
 8022e12:	bf00      	nop
 8022e14:	20400001 	.word	0x20400001

08022e18 <_fflush_r>:
 8022e18:	b538      	push	{r3, r4, r5, lr}
 8022e1a:	690b      	ldr	r3, [r1, #16]
 8022e1c:	4605      	mov	r5, r0
 8022e1e:	460c      	mov	r4, r1
 8022e20:	b913      	cbnz	r3, 8022e28 <_fflush_r+0x10>
 8022e22:	2500      	movs	r5, #0
 8022e24:	4628      	mov	r0, r5
 8022e26:	bd38      	pop	{r3, r4, r5, pc}
 8022e28:	b118      	cbz	r0, 8022e32 <_fflush_r+0x1a>
 8022e2a:	6983      	ldr	r3, [r0, #24]
 8022e2c:	b90b      	cbnz	r3, 8022e32 <_fflush_r+0x1a>
 8022e2e:	f000 f887 	bl	8022f40 <__sinit>
 8022e32:	4b14      	ldr	r3, [pc, #80]	; (8022e84 <_fflush_r+0x6c>)
 8022e34:	429c      	cmp	r4, r3
 8022e36:	d11b      	bne.n	8022e70 <_fflush_r+0x58>
 8022e38:	686c      	ldr	r4, [r5, #4]
 8022e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e3e:	2b00      	cmp	r3, #0
 8022e40:	d0ef      	beq.n	8022e22 <_fflush_r+0xa>
 8022e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022e44:	07d0      	lsls	r0, r2, #31
 8022e46:	d404      	bmi.n	8022e52 <_fflush_r+0x3a>
 8022e48:	0599      	lsls	r1, r3, #22
 8022e4a:	d402      	bmi.n	8022e52 <_fflush_r+0x3a>
 8022e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e4e:	f000 f927 	bl	80230a0 <__retarget_lock_acquire_recursive>
 8022e52:	4628      	mov	r0, r5
 8022e54:	4621      	mov	r1, r4
 8022e56:	f7ff ff59 	bl	8022d0c <__sflush_r>
 8022e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022e5c:	07da      	lsls	r2, r3, #31
 8022e5e:	4605      	mov	r5, r0
 8022e60:	d4e0      	bmi.n	8022e24 <_fflush_r+0xc>
 8022e62:	89a3      	ldrh	r3, [r4, #12]
 8022e64:	059b      	lsls	r3, r3, #22
 8022e66:	d4dd      	bmi.n	8022e24 <_fflush_r+0xc>
 8022e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022e6a:	f000 f91a 	bl	80230a2 <__retarget_lock_release_recursive>
 8022e6e:	e7d9      	b.n	8022e24 <_fflush_r+0xc>
 8022e70:	4b05      	ldr	r3, [pc, #20]	; (8022e88 <_fflush_r+0x70>)
 8022e72:	429c      	cmp	r4, r3
 8022e74:	d101      	bne.n	8022e7a <_fflush_r+0x62>
 8022e76:	68ac      	ldr	r4, [r5, #8]
 8022e78:	e7df      	b.n	8022e3a <_fflush_r+0x22>
 8022e7a:	4b04      	ldr	r3, [pc, #16]	; (8022e8c <_fflush_r+0x74>)
 8022e7c:	429c      	cmp	r4, r3
 8022e7e:	bf08      	it	eq
 8022e80:	68ec      	ldreq	r4, [r5, #12]
 8022e82:	e7da      	b.n	8022e3a <_fflush_r+0x22>
 8022e84:	08025254 	.word	0x08025254
 8022e88:	08025274 	.word	0x08025274
 8022e8c:	08025234 	.word	0x08025234

08022e90 <std>:
 8022e90:	2300      	movs	r3, #0
 8022e92:	b510      	push	{r4, lr}
 8022e94:	4604      	mov	r4, r0
 8022e96:	e9c0 3300 	strd	r3, r3, [r0]
 8022e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022e9e:	6083      	str	r3, [r0, #8]
 8022ea0:	8181      	strh	r1, [r0, #12]
 8022ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8022ea4:	81c2      	strh	r2, [r0, #14]
 8022ea6:	6183      	str	r3, [r0, #24]
 8022ea8:	4619      	mov	r1, r3
 8022eaa:	2208      	movs	r2, #8
 8022eac:	305c      	adds	r0, #92	; 0x5c
 8022eae:	f7fb ff45 	bl	801ed3c <memset>
 8022eb2:	4b05      	ldr	r3, [pc, #20]	; (8022ec8 <std+0x38>)
 8022eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8022eb6:	4b05      	ldr	r3, [pc, #20]	; (8022ecc <std+0x3c>)
 8022eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8022eba:	4b05      	ldr	r3, [pc, #20]	; (8022ed0 <std+0x40>)
 8022ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022ebe:	4b05      	ldr	r3, [pc, #20]	; (8022ed4 <std+0x44>)
 8022ec0:	6224      	str	r4, [r4, #32]
 8022ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8022ec4:	bd10      	pop	{r4, pc}
 8022ec6:	bf00      	nop
 8022ec8:	0801fd41 	.word	0x0801fd41
 8022ecc:	0801fd63 	.word	0x0801fd63
 8022ed0:	0801fd9b 	.word	0x0801fd9b
 8022ed4:	0801fdbf 	.word	0x0801fdbf

08022ed8 <_cleanup_r>:
 8022ed8:	4901      	ldr	r1, [pc, #4]	; (8022ee0 <_cleanup_r+0x8>)
 8022eda:	f000 b8c1 	b.w	8023060 <_fwalk_reent>
 8022ede:	bf00      	nop
 8022ee0:	08022e19 	.word	0x08022e19

08022ee4 <__sfmoreglue>:
 8022ee4:	b570      	push	{r4, r5, r6, lr}
 8022ee6:	1e4a      	subs	r2, r1, #1
 8022ee8:	2568      	movs	r5, #104	; 0x68
 8022eea:	4355      	muls	r5, r2
 8022eec:	460e      	mov	r6, r1
 8022eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022ef2:	f7fb ff7b 	bl	801edec <_malloc_r>
 8022ef6:	4604      	mov	r4, r0
 8022ef8:	b140      	cbz	r0, 8022f0c <__sfmoreglue+0x28>
 8022efa:	2100      	movs	r1, #0
 8022efc:	e9c0 1600 	strd	r1, r6, [r0]
 8022f00:	300c      	adds	r0, #12
 8022f02:	60a0      	str	r0, [r4, #8]
 8022f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022f08:	f7fb ff18 	bl	801ed3c <memset>
 8022f0c:	4620      	mov	r0, r4
 8022f0e:	bd70      	pop	{r4, r5, r6, pc}

08022f10 <__sfp_lock_acquire>:
 8022f10:	4801      	ldr	r0, [pc, #4]	; (8022f18 <__sfp_lock_acquire+0x8>)
 8022f12:	f000 b8c5 	b.w	80230a0 <__retarget_lock_acquire_recursive>
 8022f16:	bf00      	nop
 8022f18:	2000ac84 	.word	0x2000ac84

08022f1c <__sfp_lock_release>:
 8022f1c:	4801      	ldr	r0, [pc, #4]	; (8022f24 <__sfp_lock_release+0x8>)
 8022f1e:	f000 b8c0 	b.w	80230a2 <__retarget_lock_release_recursive>
 8022f22:	bf00      	nop
 8022f24:	2000ac84 	.word	0x2000ac84

08022f28 <__sinit_lock_acquire>:
 8022f28:	4801      	ldr	r0, [pc, #4]	; (8022f30 <__sinit_lock_acquire+0x8>)
 8022f2a:	f000 b8b9 	b.w	80230a0 <__retarget_lock_acquire_recursive>
 8022f2e:	bf00      	nop
 8022f30:	2000ac7f 	.word	0x2000ac7f

08022f34 <__sinit_lock_release>:
 8022f34:	4801      	ldr	r0, [pc, #4]	; (8022f3c <__sinit_lock_release+0x8>)
 8022f36:	f000 b8b4 	b.w	80230a2 <__retarget_lock_release_recursive>
 8022f3a:	bf00      	nop
 8022f3c:	2000ac7f 	.word	0x2000ac7f

08022f40 <__sinit>:
 8022f40:	b510      	push	{r4, lr}
 8022f42:	4604      	mov	r4, r0
 8022f44:	f7ff fff0 	bl	8022f28 <__sinit_lock_acquire>
 8022f48:	69a3      	ldr	r3, [r4, #24]
 8022f4a:	b11b      	cbz	r3, 8022f54 <__sinit+0x14>
 8022f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022f50:	f7ff bff0 	b.w	8022f34 <__sinit_lock_release>
 8022f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022f58:	6523      	str	r3, [r4, #80]	; 0x50
 8022f5a:	4b13      	ldr	r3, [pc, #76]	; (8022fa8 <__sinit+0x68>)
 8022f5c:	4a13      	ldr	r2, [pc, #76]	; (8022fac <__sinit+0x6c>)
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8022f62:	42a3      	cmp	r3, r4
 8022f64:	bf04      	itt	eq
 8022f66:	2301      	moveq	r3, #1
 8022f68:	61a3      	streq	r3, [r4, #24]
 8022f6a:	4620      	mov	r0, r4
 8022f6c:	f000 f820 	bl	8022fb0 <__sfp>
 8022f70:	6060      	str	r0, [r4, #4]
 8022f72:	4620      	mov	r0, r4
 8022f74:	f000 f81c 	bl	8022fb0 <__sfp>
 8022f78:	60a0      	str	r0, [r4, #8]
 8022f7a:	4620      	mov	r0, r4
 8022f7c:	f000 f818 	bl	8022fb0 <__sfp>
 8022f80:	2200      	movs	r2, #0
 8022f82:	60e0      	str	r0, [r4, #12]
 8022f84:	2104      	movs	r1, #4
 8022f86:	6860      	ldr	r0, [r4, #4]
 8022f88:	f7ff ff82 	bl	8022e90 <std>
 8022f8c:	68a0      	ldr	r0, [r4, #8]
 8022f8e:	2201      	movs	r2, #1
 8022f90:	2109      	movs	r1, #9
 8022f92:	f7ff ff7d 	bl	8022e90 <std>
 8022f96:	68e0      	ldr	r0, [r4, #12]
 8022f98:	2202      	movs	r2, #2
 8022f9a:	2112      	movs	r1, #18
 8022f9c:	f7ff ff78 	bl	8022e90 <std>
 8022fa0:	2301      	movs	r3, #1
 8022fa2:	61a3      	str	r3, [r4, #24]
 8022fa4:	e7d2      	b.n	8022f4c <__sinit+0xc>
 8022fa6:	bf00      	nop
 8022fa8:	08024ddc 	.word	0x08024ddc
 8022fac:	08022ed9 	.word	0x08022ed9

08022fb0 <__sfp>:
 8022fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022fb2:	4607      	mov	r7, r0
 8022fb4:	f7ff ffac 	bl	8022f10 <__sfp_lock_acquire>
 8022fb8:	4b1e      	ldr	r3, [pc, #120]	; (8023034 <__sfp+0x84>)
 8022fba:	681e      	ldr	r6, [r3, #0]
 8022fbc:	69b3      	ldr	r3, [r6, #24]
 8022fbe:	b913      	cbnz	r3, 8022fc6 <__sfp+0x16>
 8022fc0:	4630      	mov	r0, r6
 8022fc2:	f7ff ffbd 	bl	8022f40 <__sinit>
 8022fc6:	3648      	adds	r6, #72	; 0x48
 8022fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022fcc:	3b01      	subs	r3, #1
 8022fce:	d503      	bpl.n	8022fd8 <__sfp+0x28>
 8022fd0:	6833      	ldr	r3, [r6, #0]
 8022fd2:	b30b      	cbz	r3, 8023018 <__sfp+0x68>
 8022fd4:	6836      	ldr	r6, [r6, #0]
 8022fd6:	e7f7      	b.n	8022fc8 <__sfp+0x18>
 8022fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022fdc:	b9d5      	cbnz	r5, 8023014 <__sfp+0x64>
 8022fde:	4b16      	ldr	r3, [pc, #88]	; (8023038 <__sfp+0x88>)
 8022fe0:	60e3      	str	r3, [r4, #12]
 8022fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8022fe8:	f000 f859 	bl	802309e <__retarget_lock_init_recursive>
 8022fec:	f7ff ff96 	bl	8022f1c <__sfp_lock_release>
 8022ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022ff8:	6025      	str	r5, [r4, #0]
 8022ffa:	61a5      	str	r5, [r4, #24]
 8022ffc:	2208      	movs	r2, #8
 8022ffe:	4629      	mov	r1, r5
 8023000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023004:	f7fb fe9a 	bl	801ed3c <memset>
 8023008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802300c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023010:	4620      	mov	r0, r4
 8023012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023014:	3468      	adds	r4, #104	; 0x68
 8023016:	e7d9      	b.n	8022fcc <__sfp+0x1c>
 8023018:	2104      	movs	r1, #4
 802301a:	4638      	mov	r0, r7
 802301c:	f7ff ff62 	bl	8022ee4 <__sfmoreglue>
 8023020:	4604      	mov	r4, r0
 8023022:	6030      	str	r0, [r6, #0]
 8023024:	2800      	cmp	r0, #0
 8023026:	d1d5      	bne.n	8022fd4 <__sfp+0x24>
 8023028:	f7ff ff78 	bl	8022f1c <__sfp_lock_release>
 802302c:	230c      	movs	r3, #12
 802302e:	603b      	str	r3, [r7, #0]
 8023030:	e7ee      	b.n	8023010 <__sfp+0x60>
 8023032:	bf00      	nop
 8023034:	08024ddc 	.word	0x08024ddc
 8023038:	ffff0001 	.word	0xffff0001

0802303c <fiprintf>:
 802303c:	b40e      	push	{r1, r2, r3}
 802303e:	b503      	push	{r0, r1, lr}
 8023040:	4601      	mov	r1, r0
 8023042:	ab03      	add	r3, sp, #12
 8023044:	4805      	ldr	r0, [pc, #20]	; (802305c <fiprintf+0x20>)
 8023046:	f853 2b04 	ldr.w	r2, [r3], #4
 802304a:	6800      	ldr	r0, [r0, #0]
 802304c:	9301      	str	r3, [sp, #4]
 802304e:	f000 f875 	bl	802313c <_vfiprintf_r>
 8023052:	b002      	add	sp, #8
 8023054:	f85d eb04 	ldr.w	lr, [sp], #4
 8023058:	b003      	add	sp, #12
 802305a:	4770      	bx	lr
 802305c:	200006c0 	.word	0x200006c0

08023060 <_fwalk_reent>:
 8023060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023064:	4606      	mov	r6, r0
 8023066:	4688      	mov	r8, r1
 8023068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802306c:	2700      	movs	r7, #0
 802306e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023072:	f1b9 0901 	subs.w	r9, r9, #1
 8023076:	d505      	bpl.n	8023084 <_fwalk_reent+0x24>
 8023078:	6824      	ldr	r4, [r4, #0]
 802307a:	2c00      	cmp	r4, #0
 802307c:	d1f7      	bne.n	802306e <_fwalk_reent+0xe>
 802307e:	4638      	mov	r0, r7
 8023080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023084:	89ab      	ldrh	r3, [r5, #12]
 8023086:	2b01      	cmp	r3, #1
 8023088:	d907      	bls.n	802309a <_fwalk_reent+0x3a>
 802308a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802308e:	3301      	adds	r3, #1
 8023090:	d003      	beq.n	802309a <_fwalk_reent+0x3a>
 8023092:	4629      	mov	r1, r5
 8023094:	4630      	mov	r0, r6
 8023096:	47c0      	blx	r8
 8023098:	4307      	orrs	r7, r0
 802309a:	3568      	adds	r5, #104	; 0x68
 802309c:	e7e9      	b.n	8023072 <_fwalk_reent+0x12>

0802309e <__retarget_lock_init_recursive>:
 802309e:	4770      	bx	lr

080230a0 <__retarget_lock_acquire_recursive>:
 80230a0:	4770      	bx	lr

080230a2 <__retarget_lock_release_recursive>:
 80230a2:	4770      	bx	lr

080230a4 <memmove>:
 80230a4:	4288      	cmp	r0, r1
 80230a6:	b510      	push	{r4, lr}
 80230a8:	eb01 0402 	add.w	r4, r1, r2
 80230ac:	d902      	bls.n	80230b4 <memmove+0x10>
 80230ae:	4284      	cmp	r4, r0
 80230b0:	4623      	mov	r3, r4
 80230b2:	d807      	bhi.n	80230c4 <memmove+0x20>
 80230b4:	1e43      	subs	r3, r0, #1
 80230b6:	42a1      	cmp	r1, r4
 80230b8:	d008      	beq.n	80230cc <memmove+0x28>
 80230ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80230be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80230c2:	e7f8      	b.n	80230b6 <memmove+0x12>
 80230c4:	4402      	add	r2, r0
 80230c6:	4601      	mov	r1, r0
 80230c8:	428a      	cmp	r2, r1
 80230ca:	d100      	bne.n	80230ce <memmove+0x2a>
 80230cc:	bd10      	pop	{r4, pc}
 80230ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80230d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80230d6:	e7f7      	b.n	80230c8 <memmove+0x24>

080230d8 <_malloc_usable_size_r>:
 80230d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80230dc:	1f18      	subs	r0, r3, #4
 80230de:	2b00      	cmp	r3, #0
 80230e0:	bfbc      	itt	lt
 80230e2:	580b      	ldrlt	r3, [r1, r0]
 80230e4:	18c0      	addlt	r0, r0, r3
 80230e6:	4770      	bx	lr

080230e8 <__sfputc_r>:
 80230e8:	6893      	ldr	r3, [r2, #8]
 80230ea:	3b01      	subs	r3, #1
 80230ec:	2b00      	cmp	r3, #0
 80230ee:	b410      	push	{r4}
 80230f0:	6093      	str	r3, [r2, #8]
 80230f2:	da08      	bge.n	8023106 <__sfputc_r+0x1e>
 80230f4:	6994      	ldr	r4, [r2, #24]
 80230f6:	42a3      	cmp	r3, r4
 80230f8:	db01      	blt.n	80230fe <__sfputc_r+0x16>
 80230fa:	290a      	cmp	r1, #10
 80230fc:	d103      	bne.n	8023106 <__sfputc_r+0x1e>
 80230fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023102:	f000 b94b 	b.w	802339c <__swbuf_r>
 8023106:	6813      	ldr	r3, [r2, #0]
 8023108:	1c58      	adds	r0, r3, #1
 802310a:	6010      	str	r0, [r2, #0]
 802310c:	7019      	strb	r1, [r3, #0]
 802310e:	4608      	mov	r0, r1
 8023110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023114:	4770      	bx	lr

08023116 <__sfputs_r>:
 8023116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023118:	4606      	mov	r6, r0
 802311a:	460f      	mov	r7, r1
 802311c:	4614      	mov	r4, r2
 802311e:	18d5      	adds	r5, r2, r3
 8023120:	42ac      	cmp	r4, r5
 8023122:	d101      	bne.n	8023128 <__sfputs_r+0x12>
 8023124:	2000      	movs	r0, #0
 8023126:	e007      	b.n	8023138 <__sfputs_r+0x22>
 8023128:	f814 1b01 	ldrb.w	r1, [r4], #1
 802312c:	463a      	mov	r2, r7
 802312e:	4630      	mov	r0, r6
 8023130:	f7ff ffda 	bl	80230e8 <__sfputc_r>
 8023134:	1c43      	adds	r3, r0, #1
 8023136:	d1f3      	bne.n	8023120 <__sfputs_r+0xa>
 8023138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802313c <_vfiprintf_r>:
 802313c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023140:	460d      	mov	r5, r1
 8023142:	b09d      	sub	sp, #116	; 0x74
 8023144:	4614      	mov	r4, r2
 8023146:	4698      	mov	r8, r3
 8023148:	4606      	mov	r6, r0
 802314a:	b118      	cbz	r0, 8023154 <_vfiprintf_r+0x18>
 802314c:	6983      	ldr	r3, [r0, #24]
 802314e:	b90b      	cbnz	r3, 8023154 <_vfiprintf_r+0x18>
 8023150:	f7ff fef6 	bl	8022f40 <__sinit>
 8023154:	4b89      	ldr	r3, [pc, #548]	; (802337c <_vfiprintf_r+0x240>)
 8023156:	429d      	cmp	r5, r3
 8023158:	d11b      	bne.n	8023192 <_vfiprintf_r+0x56>
 802315a:	6875      	ldr	r5, [r6, #4]
 802315c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802315e:	07d9      	lsls	r1, r3, #31
 8023160:	d405      	bmi.n	802316e <_vfiprintf_r+0x32>
 8023162:	89ab      	ldrh	r3, [r5, #12]
 8023164:	059a      	lsls	r2, r3, #22
 8023166:	d402      	bmi.n	802316e <_vfiprintf_r+0x32>
 8023168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802316a:	f7ff ff99 	bl	80230a0 <__retarget_lock_acquire_recursive>
 802316e:	89ab      	ldrh	r3, [r5, #12]
 8023170:	071b      	lsls	r3, r3, #28
 8023172:	d501      	bpl.n	8023178 <_vfiprintf_r+0x3c>
 8023174:	692b      	ldr	r3, [r5, #16]
 8023176:	b9eb      	cbnz	r3, 80231b4 <_vfiprintf_r+0x78>
 8023178:	4629      	mov	r1, r5
 802317a:	4630      	mov	r0, r6
 802317c:	f000 f960 	bl	8023440 <__swsetup_r>
 8023180:	b1c0      	cbz	r0, 80231b4 <_vfiprintf_r+0x78>
 8023182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023184:	07dc      	lsls	r4, r3, #31
 8023186:	d50e      	bpl.n	80231a6 <_vfiprintf_r+0x6a>
 8023188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802318c:	b01d      	add	sp, #116	; 0x74
 802318e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023192:	4b7b      	ldr	r3, [pc, #492]	; (8023380 <_vfiprintf_r+0x244>)
 8023194:	429d      	cmp	r5, r3
 8023196:	d101      	bne.n	802319c <_vfiprintf_r+0x60>
 8023198:	68b5      	ldr	r5, [r6, #8]
 802319a:	e7df      	b.n	802315c <_vfiprintf_r+0x20>
 802319c:	4b79      	ldr	r3, [pc, #484]	; (8023384 <_vfiprintf_r+0x248>)
 802319e:	429d      	cmp	r5, r3
 80231a0:	bf08      	it	eq
 80231a2:	68f5      	ldreq	r5, [r6, #12]
 80231a4:	e7da      	b.n	802315c <_vfiprintf_r+0x20>
 80231a6:	89ab      	ldrh	r3, [r5, #12]
 80231a8:	0598      	lsls	r0, r3, #22
 80231aa:	d4ed      	bmi.n	8023188 <_vfiprintf_r+0x4c>
 80231ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80231ae:	f7ff ff78 	bl	80230a2 <__retarget_lock_release_recursive>
 80231b2:	e7e9      	b.n	8023188 <_vfiprintf_r+0x4c>
 80231b4:	2300      	movs	r3, #0
 80231b6:	9309      	str	r3, [sp, #36]	; 0x24
 80231b8:	2320      	movs	r3, #32
 80231ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80231be:	f8cd 800c 	str.w	r8, [sp, #12]
 80231c2:	2330      	movs	r3, #48	; 0x30
 80231c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023388 <_vfiprintf_r+0x24c>
 80231c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80231cc:	f04f 0901 	mov.w	r9, #1
 80231d0:	4623      	mov	r3, r4
 80231d2:	469a      	mov	sl, r3
 80231d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80231d8:	b10a      	cbz	r2, 80231de <_vfiprintf_r+0xa2>
 80231da:	2a25      	cmp	r2, #37	; 0x25
 80231dc:	d1f9      	bne.n	80231d2 <_vfiprintf_r+0x96>
 80231de:	ebba 0b04 	subs.w	fp, sl, r4
 80231e2:	d00b      	beq.n	80231fc <_vfiprintf_r+0xc0>
 80231e4:	465b      	mov	r3, fp
 80231e6:	4622      	mov	r2, r4
 80231e8:	4629      	mov	r1, r5
 80231ea:	4630      	mov	r0, r6
 80231ec:	f7ff ff93 	bl	8023116 <__sfputs_r>
 80231f0:	3001      	adds	r0, #1
 80231f2:	f000 80aa 	beq.w	802334a <_vfiprintf_r+0x20e>
 80231f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80231f8:	445a      	add	r2, fp
 80231fa:	9209      	str	r2, [sp, #36]	; 0x24
 80231fc:	f89a 3000 	ldrb.w	r3, [sl]
 8023200:	2b00      	cmp	r3, #0
 8023202:	f000 80a2 	beq.w	802334a <_vfiprintf_r+0x20e>
 8023206:	2300      	movs	r3, #0
 8023208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802320c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023210:	f10a 0a01 	add.w	sl, sl, #1
 8023214:	9304      	str	r3, [sp, #16]
 8023216:	9307      	str	r3, [sp, #28]
 8023218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802321c:	931a      	str	r3, [sp, #104]	; 0x68
 802321e:	4654      	mov	r4, sl
 8023220:	2205      	movs	r2, #5
 8023222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023226:	4858      	ldr	r0, [pc, #352]	; (8023388 <_vfiprintf_r+0x24c>)
 8023228:	f7dc ffda 	bl	80001e0 <memchr>
 802322c:	9a04      	ldr	r2, [sp, #16]
 802322e:	b9d8      	cbnz	r0, 8023268 <_vfiprintf_r+0x12c>
 8023230:	06d1      	lsls	r1, r2, #27
 8023232:	bf44      	itt	mi
 8023234:	2320      	movmi	r3, #32
 8023236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802323a:	0713      	lsls	r3, r2, #28
 802323c:	bf44      	itt	mi
 802323e:	232b      	movmi	r3, #43	; 0x2b
 8023240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023244:	f89a 3000 	ldrb.w	r3, [sl]
 8023248:	2b2a      	cmp	r3, #42	; 0x2a
 802324a:	d015      	beq.n	8023278 <_vfiprintf_r+0x13c>
 802324c:	9a07      	ldr	r2, [sp, #28]
 802324e:	4654      	mov	r4, sl
 8023250:	2000      	movs	r0, #0
 8023252:	f04f 0c0a 	mov.w	ip, #10
 8023256:	4621      	mov	r1, r4
 8023258:	f811 3b01 	ldrb.w	r3, [r1], #1
 802325c:	3b30      	subs	r3, #48	; 0x30
 802325e:	2b09      	cmp	r3, #9
 8023260:	d94e      	bls.n	8023300 <_vfiprintf_r+0x1c4>
 8023262:	b1b0      	cbz	r0, 8023292 <_vfiprintf_r+0x156>
 8023264:	9207      	str	r2, [sp, #28]
 8023266:	e014      	b.n	8023292 <_vfiprintf_r+0x156>
 8023268:	eba0 0308 	sub.w	r3, r0, r8
 802326c:	fa09 f303 	lsl.w	r3, r9, r3
 8023270:	4313      	orrs	r3, r2
 8023272:	9304      	str	r3, [sp, #16]
 8023274:	46a2      	mov	sl, r4
 8023276:	e7d2      	b.n	802321e <_vfiprintf_r+0xe2>
 8023278:	9b03      	ldr	r3, [sp, #12]
 802327a:	1d19      	adds	r1, r3, #4
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	9103      	str	r1, [sp, #12]
 8023280:	2b00      	cmp	r3, #0
 8023282:	bfbb      	ittet	lt
 8023284:	425b      	neglt	r3, r3
 8023286:	f042 0202 	orrlt.w	r2, r2, #2
 802328a:	9307      	strge	r3, [sp, #28]
 802328c:	9307      	strlt	r3, [sp, #28]
 802328e:	bfb8      	it	lt
 8023290:	9204      	strlt	r2, [sp, #16]
 8023292:	7823      	ldrb	r3, [r4, #0]
 8023294:	2b2e      	cmp	r3, #46	; 0x2e
 8023296:	d10c      	bne.n	80232b2 <_vfiprintf_r+0x176>
 8023298:	7863      	ldrb	r3, [r4, #1]
 802329a:	2b2a      	cmp	r3, #42	; 0x2a
 802329c:	d135      	bne.n	802330a <_vfiprintf_r+0x1ce>
 802329e:	9b03      	ldr	r3, [sp, #12]
 80232a0:	1d1a      	adds	r2, r3, #4
 80232a2:	681b      	ldr	r3, [r3, #0]
 80232a4:	9203      	str	r2, [sp, #12]
 80232a6:	2b00      	cmp	r3, #0
 80232a8:	bfb8      	it	lt
 80232aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80232ae:	3402      	adds	r4, #2
 80232b0:	9305      	str	r3, [sp, #20]
 80232b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023398 <_vfiprintf_r+0x25c>
 80232b6:	7821      	ldrb	r1, [r4, #0]
 80232b8:	2203      	movs	r2, #3
 80232ba:	4650      	mov	r0, sl
 80232bc:	f7dc ff90 	bl	80001e0 <memchr>
 80232c0:	b140      	cbz	r0, 80232d4 <_vfiprintf_r+0x198>
 80232c2:	2340      	movs	r3, #64	; 0x40
 80232c4:	eba0 000a 	sub.w	r0, r0, sl
 80232c8:	fa03 f000 	lsl.w	r0, r3, r0
 80232cc:	9b04      	ldr	r3, [sp, #16]
 80232ce:	4303      	orrs	r3, r0
 80232d0:	3401      	adds	r4, #1
 80232d2:	9304      	str	r3, [sp, #16]
 80232d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80232d8:	482c      	ldr	r0, [pc, #176]	; (802338c <_vfiprintf_r+0x250>)
 80232da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80232de:	2206      	movs	r2, #6
 80232e0:	f7dc ff7e 	bl	80001e0 <memchr>
 80232e4:	2800      	cmp	r0, #0
 80232e6:	d03f      	beq.n	8023368 <_vfiprintf_r+0x22c>
 80232e8:	4b29      	ldr	r3, [pc, #164]	; (8023390 <_vfiprintf_r+0x254>)
 80232ea:	bb1b      	cbnz	r3, 8023334 <_vfiprintf_r+0x1f8>
 80232ec:	9b03      	ldr	r3, [sp, #12]
 80232ee:	3307      	adds	r3, #7
 80232f0:	f023 0307 	bic.w	r3, r3, #7
 80232f4:	3308      	adds	r3, #8
 80232f6:	9303      	str	r3, [sp, #12]
 80232f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232fa:	443b      	add	r3, r7
 80232fc:	9309      	str	r3, [sp, #36]	; 0x24
 80232fe:	e767      	b.n	80231d0 <_vfiprintf_r+0x94>
 8023300:	fb0c 3202 	mla	r2, ip, r2, r3
 8023304:	460c      	mov	r4, r1
 8023306:	2001      	movs	r0, #1
 8023308:	e7a5      	b.n	8023256 <_vfiprintf_r+0x11a>
 802330a:	2300      	movs	r3, #0
 802330c:	3401      	adds	r4, #1
 802330e:	9305      	str	r3, [sp, #20]
 8023310:	4619      	mov	r1, r3
 8023312:	f04f 0c0a 	mov.w	ip, #10
 8023316:	4620      	mov	r0, r4
 8023318:	f810 2b01 	ldrb.w	r2, [r0], #1
 802331c:	3a30      	subs	r2, #48	; 0x30
 802331e:	2a09      	cmp	r2, #9
 8023320:	d903      	bls.n	802332a <_vfiprintf_r+0x1ee>
 8023322:	2b00      	cmp	r3, #0
 8023324:	d0c5      	beq.n	80232b2 <_vfiprintf_r+0x176>
 8023326:	9105      	str	r1, [sp, #20]
 8023328:	e7c3      	b.n	80232b2 <_vfiprintf_r+0x176>
 802332a:	fb0c 2101 	mla	r1, ip, r1, r2
 802332e:	4604      	mov	r4, r0
 8023330:	2301      	movs	r3, #1
 8023332:	e7f0      	b.n	8023316 <_vfiprintf_r+0x1da>
 8023334:	ab03      	add	r3, sp, #12
 8023336:	9300      	str	r3, [sp, #0]
 8023338:	462a      	mov	r2, r5
 802333a:	4b16      	ldr	r3, [pc, #88]	; (8023394 <_vfiprintf_r+0x258>)
 802333c:	a904      	add	r1, sp, #16
 802333e:	4630      	mov	r0, r6
 8023340:	f7fb fe4e 	bl	801efe0 <_printf_float>
 8023344:	4607      	mov	r7, r0
 8023346:	1c78      	adds	r0, r7, #1
 8023348:	d1d6      	bne.n	80232f8 <_vfiprintf_r+0x1bc>
 802334a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802334c:	07d9      	lsls	r1, r3, #31
 802334e:	d405      	bmi.n	802335c <_vfiprintf_r+0x220>
 8023350:	89ab      	ldrh	r3, [r5, #12]
 8023352:	059a      	lsls	r2, r3, #22
 8023354:	d402      	bmi.n	802335c <_vfiprintf_r+0x220>
 8023356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023358:	f7ff fea3 	bl	80230a2 <__retarget_lock_release_recursive>
 802335c:	89ab      	ldrh	r3, [r5, #12]
 802335e:	065b      	lsls	r3, r3, #25
 8023360:	f53f af12 	bmi.w	8023188 <_vfiprintf_r+0x4c>
 8023364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023366:	e711      	b.n	802318c <_vfiprintf_r+0x50>
 8023368:	ab03      	add	r3, sp, #12
 802336a:	9300      	str	r3, [sp, #0]
 802336c:	462a      	mov	r2, r5
 802336e:	4b09      	ldr	r3, [pc, #36]	; (8023394 <_vfiprintf_r+0x258>)
 8023370:	a904      	add	r1, sp, #16
 8023372:	4630      	mov	r0, r6
 8023374:	f7fc f8d8 	bl	801f528 <_printf_i>
 8023378:	e7e4      	b.n	8023344 <_vfiprintf_r+0x208>
 802337a:	bf00      	nop
 802337c:	08025254 	.word	0x08025254
 8023380:	08025274 	.word	0x08025274
 8023384:	08025234 	.word	0x08025234
 8023388:	080251e4 	.word	0x080251e4
 802338c:	080251ee 	.word	0x080251ee
 8023390:	0801efe1 	.word	0x0801efe1
 8023394:	08023117 	.word	0x08023117
 8023398:	080251ea 	.word	0x080251ea

0802339c <__swbuf_r>:
 802339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802339e:	460e      	mov	r6, r1
 80233a0:	4614      	mov	r4, r2
 80233a2:	4605      	mov	r5, r0
 80233a4:	b118      	cbz	r0, 80233ae <__swbuf_r+0x12>
 80233a6:	6983      	ldr	r3, [r0, #24]
 80233a8:	b90b      	cbnz	r3, 80233ae <__swbuf_r+0x12>
 80233aa:	f7ff fdc9 	bl	8022f40 <__sinit>
 80233ae:	4b21      	ldr	r3, [pc, #132]	; (8023434 <__swbuf_r+0x98>)
 80233b0:	429c      	cmp	r4, r3
 80233b2:	d12b      	bne.n	802340c <__swbuf_r+0x70>
 80233b4:	686c      	ldr	r4, [r5, #4]
 80233b6:	69a3      	ldr	r3, [r4, #24]
 80233b8:	60a3      	str	r3, [r4, #8]
 80233ba:	89a3      	ldrh	r3, [r4, #12]
 80233bc:	071a      	lsls	r2, r3, #28
 80233be:	d52f      	bpl.n	8023420 <__swbuf_r+0x84>
 80233c0:	6923      	ldr	r3, [r4, #16]
 80233c2:	b36b      	cbz	r3, 8023420 <__swbuf_r+0x84>
 80233c4:	6923      	ldr	r3, [r4, #16]
 80233c6:	6820      	ldr	r0, [r4, #0]
 80233c8:	1ac0      	subs	r0, r0, r3
 80233ca:	6963      	ldr	r3, [r4, #20]
 80233cc:	b2f6      	uxtb	r6, r6
 80233ce:	4283      	cmp	r3, r0
 80233d0:	4637      	mov	r7, r6
 80233d2:	dc04      	bgt.n	80233de <__swbuf_r+0x42>
 80233d4:	4621      	mov	r1, r4
 80233d6:	4628      	mov	r0, r5
 80233d8:	f7ff fd1e 	bl	8022e18 <_fflush_r>
 80233dc:	bb30      	cbnz	r0, 802342c <__swbuf_r+0x90>
 80233de:	68a3      	ldr	r3, [r4, #8]
 80233e0:	3b01      	subs	r3, #1
 80233e2:	60a3      	str	r3, [r4, #8]
 80233e4:	6823      	ldr	r3, [r4, #0]
 80233e6:	1c5a      	adds	r2, r3, #1
 80233e8:	6022      	str	r2, [r4, #0]
 80233ea:	701e      	strb	r6, [r3, #0]
 80233ec:	6963      	ldr	r3, [r4, #20]
 80233ee:	3001      	adds	r0, #1
 80233f0:	4283      	cmp	r3, r0
 80233f2:	d004      	beq.n	80233fe <__swbuf_r+0x62>
 80233f4:	89a3      	ldrh	r3, [r4, #12]
 80233f6:	07db      	lsls	r3, r3, #31
 80233f8:	d506      	bpl.n	8023408 <__swbuf_r+0x6c>
 80233fa:	2e0a      	cmp	r6, #10
 80233fc:	d104      	bne.n	8023408 <__swbuf_r+0x6c>
 80233fe:	4621      	mov	r1, r4
 8023400:	4628      	mov	r0, r5
 8023402:	f7ff fd09 	bl	8022e18 <_fflush_r>
 8023406:	b988      	cbnz	r0, 802342c <__swbuf_r+0x90>
 8023408:	4638      	mov	r0, r7
 802340a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802340c:	4b0a      	ldr	r3, [pc, #40]	; (8023438 <__swbuf_r+0x9c>)
 802340e:	429c      	cmp	r4, r3
 8023410:	d101      	bne.n	8023416 <__swbuf_r+0x7a>
 8023412:	68ac      	ldr	r4, [r5, #8]
 8023414:	e7cf      	b.n	80233b6 <__swbuf_r+0x1a>
 8023416:	4b09      	ldr	r3, [pc, #36]	; (802343c <__swbuf_r+0xa0>)
 8023418:	429c      	cmp	r4, r3
 802341a:	bf08      	it	eq
 802341c:	68ec      	ldreq	r4, [r5, #12]
 802341e:	e7ca      	b.n	80233b6 <__swbuf_r+0x1a>
 8023420:	4621      	mov	r1, r4
 8023422:	4628      	mov	r0, r5
 8023424:	f000 f80c 	bl	8023440 <__swsetup_r>
 8023428:	2800      	cmp	r0, #0
 802342a:	d0cb      	beq.n	80233c4 <__swbuf_r+0x28>
 802342c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023430:	e7ea      	b.n	8023408 <__swbuf_r+0x6c>
 8023432:	bf00      	nop
 8023434:	08025254 	.word	0x08025254
 8023438:	08025274 	.word	0x08025274
 802343c:	08025234 	.word	0x08025234

08023440 <__swsetup_r>:
 8023440:	4b32      	ldr	r3, [pc, #200]	; (802350c <__swsetup_r+0xcc>)
 8023442:	b570      	push	{r4, r5, r6, lr}
 8023444:	681d      	ldr	r5, [r3, #0]
 8023446:	4606      	mov	r6, r0
 8023448:	460c      	mov	r4, r1
 802344a:	b125      	cbz	r5, 8023456 <__swsetup_r+0x16>
 802344c:	69ab      	ldr	r3, [r5, #24]
 802344e:	b913      	cbnz	r3, 8023456 <__swsetup_r+0x16>
 8023450:	4628      	mov	r0, r5
 8023452:	f7ff fd75 	bl	8022f40 <__sinit>
 8023456:	4b2e      	ldr	r3, [pc, #184]	; (8023510 <__swsetup_r+0xd0>)
 8023458:	429c      	cmp	r4, r3
 802345a:	d10f      	bne.n	802347c <__swsetup_r+0x3c>
 802345c:	686c      	ldr	r4, [r5, #4]
 802345e:	89a3      	ldrh	r3, [r4, #12]
 8023460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023464:	0719      	lsls	r1, r3, #28
 8023466:	d42c      	bmi.n	80234c2 <__swsetup_r+0x82>
 8023468:	06dd      	lsls	r5, r3, #27
 802346a:	d411      	bmi.n	8023490 <__swsetup_r+0x50>
 802346c:	2309      	movs	r3, #9
 802346e:	6033      	str	r3, [r6, #0]
 8023470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023474:	81a3      	strh	r3, [r4, #12]
 8023476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802347a:	e03e      	b.n	80234fa <__swsetup_r+0xba>
 802347c:	4b25      	ldr	r3, [pc, #148]	; (8023514 <__swsetup_r+0xd4>)
 802347e:	429c      	cmp	r4, r3
 8023480:	d101      	bne.n	8023486 <__swsetup_r+0x46>
 8023482:	68ac      	ldr	r4, [r5, #8]
 8023484:	e7eb      	b.n	802345e <__swsetup_r+0x1e>
 8023486:	4b24      	ldr	r3, [pc, #144]	; (8023518 <__swsetup_r+0xd8>)
 8023488:	429c      	cmp	r4, r3
 802348a:	bf08      	it	eq
 802348c:	68ec      	ldreq	r4, [r5, #12]
 802348e:	e7e6      	b.n	802345e <__swsetup_r+0x1e>
 8023490:	0758      	lsls	r0, r3, #29
 8023492:	d512      	bpl.n	80234ba <__swsetup_r+0x7a>
 8023494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023496:	b141      	cbz	r1, 80234aa <__swsetup_r+0x6a>
 8023498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802349c:	4299      	cmp	r1, r3
 802349e:	d002      	beq.n	80234a6 <__swsetup_r+0x66>
 80234a0:	4630      	mov	r0, r6
 80234a2:	f7fb fc53 	bl	801ed4c <_free_r>
 80234a6:	2300      	movs	r3, #0
 80234a8:	6363      	str	r3, [r4, #52]	; 0x34
 80234aa:	89a3      	ldrh	r3, [r4, #12]
 80234ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80234b0:	81a3      	strh	r3, [r4, #12]
 80234b2:	2300      	movs	r3, #0
 80234b4:	6063      	str	r3, [r4, #4]
 80234b6:	6923      	ldr	r3, [r4, #16]
 80234b8:	6023      	str	r3, [r4, #0]
 80234ba:	89a3      	ldrh	r3, [r4, #12]
 80234bc:	f043 0308 	orr.w	r3, r3, #8
 80234c0:	81a3      	strh	r3, [r4, #12]
 80234c2:	6923      	ldr	r3, [r4, #16]
 80234c4:	b94b      	cbnz	r3, 80234da <__swsetup_r+0x9a>
 80234c6:	89a3      	ldrh	r3, [r4, #12]
 80234c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80234cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80234d0:	d003      	beq.n	80234da <__swsetup_r+0x9a>
 80234d2:	4621      	mov	r1, r4
 80234d4:	4630      	mov	r0, r6
 80234d6:	f000 f84d 	bl	8023574 <__smakebuf_r>
 80234da:	89a0      	ldrh	r0, [r4, #12]
 80234dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80234e0:	f010 0301 	ands.w	r3, r0, #1
 80234e4:	d00a      	beq.n	80234fc <__swsetup_r+0xbc>
 80234e6:	2300      	movs	r3, #0
 80234e8:	60a3      	str	r3, [r4, #8]
 80234ea:	6963      	ldr	r3, [r4, #20]
 80234ec:	425b      	negs	r3, r3
 80234ee:	61a3      	str	r3, [r4, #24]
 80234f0:	6923      	ldr	r3, [r4, #16]
 80234f2:	b943      	cbnz	r3, 8023506 <__swsetup_r+0xc6>
 80234f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80234f8:	d1ba      	bne.n	8023470 <__swsetup_r+0x30>
 80234fa:	bd70      	pop	{r4, r5, r6, pc}
 80234fc:	0781      	lsls	r1, r0, #30
 80234fe:	bf58      	it	pl
 8023500:	6963      	ldrpl	r3, [r4, #20]
 8023502:	60a3      	str	r3, [r4, #8]
 8023504:	e7f4      	b.n	80234f0 <__swsetup_r+0xb0>
 8023506:	2000      	movs	r0, #0
 8023508:	e7f7      	b.n	80234fa <__swsetup_r+0xba>
 802350a:	bf00      	nop
 802350c:	200006c0 	.word	0x200006c0
 8023510:	08025254 	.word	0x08025254
 8023514:	08025274 	.word	0x08025274
 8023518:	08025234 	.word	0x08025234

0802351c <abort>:
 802351c:	b508      	push	{r3, lr}
 802351e:	2006      	movs	r0, #6
 8023520:	f000 f890 	bl	8023644 <raise>
 8023524:	2001      	movs	r0, #1
 8023526:	f7eb fc3b 	bl	800eda0 <_exit>

0802352a <__swhatbuf_r>:
 802352a:	b570      	push	{r4, r5, r6, lr}
 802352c:	460e      	mov	r6, r1
 802352e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023532:	2900      	cmp	r1, #0
 8023534:	b096      	sub	sp, #88	; 0x58
 8023536:	4614      	mov	r4, r2
 8023538:	461d      	mov	r5, r3
 802353a:	da07      	bge.n	802354c <__swhatbuf_r+0x22>
 802353c:	2300      	movs	r3, #0
 802353e:	602b      	str	r3, [r5, #0]
 8023540:	89b3      	ldrh	r3, [r6, #12]
 8023542:	061a      	lsls	r2, r3, #24
 8023544:	d410      	bmi.n	8023568 <__swhatbuf_r+0x3e>
 8023546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802354a:	e00e      	b.n	802356a <__swhatbuf_r+0x40>
 802354c:	466a      	mov	r2, sp
 802354e:	f000 f895 	bl	802367c <_fstat_r>
 8023552:	2800      	cmp	r0, #0
 8023554:	dbf2      	blt.n	802353c <__swhatbuf_r+0x12>
 8023556:	9a01      	ldr	r2, [sp, #4]
 8023558:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802355c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023560:	425a      	negs	r2, r3
 8023562:	415a      	adcs	r2, r3
 8023564:	602a      	str	r2, [r5, #0]
 8023566:	e7ee      	b.n	8023546 <__swhatbuf_r+0x1c>
 8023568:	2340      	movs	r3, #64	; 0x40
 802356a:	2000      	movs	r0, #0
 802356c:	6023      	str	r3, [r4, #0]
 802356e:	b016      	add	sp, #88	; 0x58
 8023570:	bd70      	pop	{r4, r5, r6, pc}
	...

08023574 <__smakebuf_r>:
 8023574:	898b      	ldrh	r3, [r1, #12]
 8023576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023578:	079d      	lsls	r5, r3, #30
 802357a:	4606      	mov	r6, r0
 802357c:	460c      	mov	r4, r1
 802357e:	d507      	bpl.n	8023590 <__smakebuf_r+0x1c>
 8023580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023584:	6023      	str	r3, [r4, #0]
 8023586:	6123      	str	r3, [r4, #16]
 8023588:	2301      	movs	r3, #1
 802358a:	6163      	str	r3, [r4, #20]
 802358c:	b002      	add	sp, #8
 802358e:	bd70      	pop	{r4, r5, r6, pc}
 8023590:	ab01      	add	r3, sp, #4
 8023592:	466a      	mov	r2, sp
 8023594:	f7ff ffc9 	bl	802352a <__swhatbuf_r>
 8023598:	9900      	ldr	r1, [sp, #0]
 802359a:	4605      	mov	r5, r0
 802359c:	4630      	mov	r0, r6
 802359e:	f7fb fc25 	bl	801edec <_malloc_r>
 80235a2:	b948      	cbnz	r0, 80235b8 <__smakebuf_r+0x44>
 80235a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80235a8:	059a      	lsls	r2, r3, #22
 80235aa:	d4ef      	bmi.n	802358c <__smakebuf_r+0x18>
 80235ac:	f023 0303 	bic.w	r3, r3, #3
 80235b0:	f043 0302 	orr.w	r3, r3, #2
 80235b4:	81a3      	strh	r3, [r4, #12]
 80235b6:	e7e3      	b.n	8023580 <__smakebuf_r+0xc>
 80235b8:	4b0d      	ldr	r3, [pc, #52]	; (80235f0 <__smakebuf_r+0x7c>)
 80235ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80235bc:	89a3      	ldrh	r3, [r4, #12]
 80235be:	6020      	str	r0, [r4, #0]
 80235c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80235c4:	81a3      	strh	r3, [r4, #12]
 80235c6:	9b00      	ldr	r3, [sp, #0]
 80235c8:	6163      	str	r3, [r4, #20]
 80235ca:	9b01      	ldr	r3, [sp, #4]
 80235cc:	6120      	str	r0, [r4, #16]
 80235ce:	b15b      	cbz	r3, 80235e8 <__smakebuf_r+0x74>
 80235d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235d4:	4630      	mov	r0, r6
 80235d6:	f000 f863 	bl	80236a0 <_isatty_r>
 80235da:	b128      	cbz	r0, 80235e8 <__smakebuf_r+0x74>
 80235dc:	89a3      	ldrh	r3, [r4, #12]
 80235de:	f023 0303 	bic.w	r3, r3, #3
 80235e2:	f043 0301 	orr.w	r3, r3, #1
 80235e6:	81a3      	strh	r3, [r4, #12]
 80235e8:	89a0      	ldrh	r0, [r4, #12]
 80235ea:	4305      	orrs	r5, r0
 80235ec:	81a5      	strh	r5, [r4, #12]
 80235ee:	e7cd      	b.n	802358c <__smakebuf_r+0x18>
 80235f0:	08022ed9 	.word	0x08022ed9

080235f4 <_raise_r>:
 80235f4:	291f      	cmp	r1, #31
 80235f6:	b538      	push	{r3, r4, r5, lr}
 80235f8:	4604      	mov	r4, r0
 80235fa:	460d      	mov	r5, r1
 80235fc:	d904      	bls.n	8023608 <_raise_r+0x14>
 80235fe:	2316      	movs	r3, #22
 8023600:	6003      	str	r3, [r0, #0]
 8023602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023606:	bd38      	pop	{r3, r4, r5, pc}
 8023608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802360a:	b112      	cbz	r2, 8023612 <_raise_r+0x1e>
 802360c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023610:	b94b      	cbnz	r3, 8023626 <_raise_r+0x32>
 8023612:	4620      	mov	r0, r4
 8023614:	f000 f830 	bl	8023678 <_getpid_r>
 8023618:	462a      	mov	r2, r5
 802361a:	4601      	mov	r1, r0
 802361c:	4620      	mov	r0, r4
 802361e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023622:	f000 b817 	b.w	8023654 <_kill_r>
 8023626:	2b01      	cmp	r3, #1
 8023628:	d00a      	beq.n	8023640 <_raise_r+0x4c>
 802362a:	1c59      	adds	r1, r3, #1
 802362c:	d103      	bne.n	8023636 <_raise_r+0x42>
 802362e:	2316      	movs	r3, #22
 8023630:	6003      	str	r3, [r0, #0]
 8023632:	2001      	movs	r0, #1
 8023634:	e7e7      	b.n	8023606 <_raise_r+0x12>
 8023636:	2400      	movs	r4, #0
 8023638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802363c:	4628      	mov	r0, r5
 802363e:	4798      	blx	r3
 8023640:	2000      	movs	r0, #0
 8023642:	e7e0      	b.n	8023606 <_raise_r+0x12>

08023644 <raise>:
 8023644:	4b02      	ldr	r3, [pc, #8]	; (8023650 <raise+0xc>)
 8023646:	4601      	mov	r1, r0
 8023648:	6818      	ldr	r0, [r3, #0]
 802364a:	f7ff bfd3 	b.w	80235f4 <_raise_r>
 802364e:	bf00      	nop
 8023650:	200006c0 	.word	0x200006c0

08023654 <_kill_r>:
 8023654:	b538      	push	{r3, r4, r5, lr}
 8023656:	4d07      	ldr	r5, [pc, #28]	; (8023674 <_kill_r+0x20>)
 8023658:	2300      	movs	r3, #0
 802365a:	4604      	mov	r4, r0
 802365c:	4608      	mov	r0, r1
 802365e:	4611      	mov	r1, r2
 8023660:	602b      	str	r3, [r5, #0]
 8023662:	f7eb fb8d 	bl	800ed80 <_kill>
 8023666:	1c43      	adds	r3, r0, #1
 8023668:	d102      	bne.n	8023670 <_kill_r+0x1c>
 802366a:	682b      	ldr	r3, [r5, #0]
 802366c:	b103      	cbz	r3, 8023670 <_kill_r+0x1c>
 802366e:	6023      	str	r3, [r4, #0]
 8023670:	bd38      	pop	{r3, r4, r5, pc}
 8023672:	bf00      	nop
 8023674:	2000ac78 	.word	0x2000ac78

08023678 <_getpid_r>:
 8023678:	f7eb bb7a 	b.w	800ed70 <_getpid>

0802367c <_fstat_r>:
 802367c:	b538      	push	{r3, r4, r5, lr}
 802367e:	4d07      	ldr	r5, [pc, #28]	; (802369c <_fstat_r+0x20>)
 8023680:	2300      	movs	r3, #0
 8023682:	4604      	mov	r4, r0
 8023684:	4608      	mov	r0, r1
 8023686:	4611      	mov	r1, r2
 8023688:	602b      	str	r3, [r5, #0]
 802368a:	f7eb fbd8 	bl	800ee3e <_fstat>
 802368e:	1c43      	adds	r3, r0, #1
 8023690:	d102      	bne.n	8023698 <_fstat_r+0x1c>
 8023692:	682b      	ldr	r3, [r5, #0]
 8023694:	b103      	cbz	r3, 8023698 <_fstat_r+0x1c>
 8023696:	6023      	str	r3, [r4, #0]
 8023698:	bd38      	pop	{r3, r4, r5, pc}
 802369a:	bf00      	nop
 802369c:	2000ac78 	.word	0x2000ac78

080236a0 <_isatty_r>:
 80236a0:	b538      	push	{r3, r4, r5, lr}
 80236a2:	4d06      	ldr	r5, [pc, #24]	; (80236bc <_isatty_r+0x1c>)
 80236a4:	2300      	movs	r3, #0
 80236a6:	4604      	mov	r4, r0
 80236a8:	4608      	mov	r0, r1
 80236aa:	602b      	str	r3, [r5, #0]
 80236ac:	f7eb fbd7 	bl	800ee5e <_isatty>
 80236b0:	1c43      	adds	r3, r0, #1
 80236b2:	d102      	bne.n	80236ba <_isatty_r+0x1a>
 80236b4:	682b      	ldr	r3, [r5, #0]
 80236b6:	b103      	cbz	r3, 80236ba <_isatty_r+0x1a>
 80236b8:	6023      	str	r3, [r4, #0]
 80236ba:	bd38      	pop	{r3, r4, r5, pc}
 80236bc:	2000ac78 	.word	0x2000ac78

080236c0 <cosf>:
 80236c0:	ee10 3a10 	vmov	r3, s0
 80236c4:	b507      	push	{r0, r1, r2, lr}
 80236c6:	4a1c      	ldr	r2, [pc, #112]	; (8023738 <cosf+0x78>)
 80236c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80236cc:	4293      	cmp	r3, r2
 80236ce:	dc04      	bgt.n	80236da <cosf+0x1a>
 80236d0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802373c <cosf+0x7c>
 80236d4:	f000 f9b2 	bl	8023a3c <__kernel_cosf>
 80236d8:	e004      	b.n	80236e4 <cosf+0x24>
 80236da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80236de:	db04      	blt.n	80236ea <cosf+0x2a>
 80236e0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80236e4:	b003      	add	sp, #12
 80236e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80236ea:	4668      	mov	r0, sp
 80236ec:	f000 f86a 	bl	80237c4 <__ieee754_rem_pio2f>
 80236f0:	f000 0003 	and.w	r0, r0, #3
 80236f4:	2801      	cmp	r0, #1
 80236f6:	d007      	beq.n	8023708 <cosf+0x48>
 80236f8:	2802      	cmp	r0, #2
 80236fa:	d00e      	beq.n	802371a <cosf+0x5a>
 80236fc:	b9a0      	cbnz	r0, 8023728 <cosf+0x68>
 80236fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8023702:	ed9d 0a00 	vldr	s0, [sp]
 8023706:	e7e5      	b.n	80236d4 <cosf+0x14>
 8023708:	eddd 0a01 	vldr	s1, [sp, #4]
 802370c:	ed9d 0a00 	vldr	s0, [sp]
 8023710:	f000 fc7e 	bl	8024010 <__kernel_sinf>
 8023714:	eeb1 0a40 	vneg.f32	s0, s0
 8023718:	e7e4      	b.n	80236e4 <cosf+0x24>
 802371a:	eddd 0a01 	vldr	s1, [sp, #4]
 802371e:	ed9d 0a00 	vldr	s0, [sp]
 8023722:	f000 f98b 	bl	8023a3c <__kernel_cosf>
 8023726:	e7f5      	b.n	8023714 <cosf+0x54>
 8023728:	eddd 0a01 	vldr	s1, [sp, #4]
 802372c:	ed9d 0a00 	vldr	s0, [sp]
 8023730:	2001      	movs	r0, #1
 8023732:	f000 fc6d 	bl	8024010 <__kernel_sinf>
 8023736:	e7d5      	b.n	80236e4 <cosf+0x24>
 8023738:	3f490fd8 	.word	0x3f490fd8
 802373c:	00000000 	.word	0x00000000

08023740 <sinf>:
 8023740:	ee10 3a10 	vmov	r3, s0
 8023744:	b507      	push	{r0, r1, r2, lr}
 8023746:	4a1d      	ldr	r2, [pc, #116]	; (80237bc <sinf+0x7c>)
 8023748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802374c:	4293      	cmp	r3, r2
 802374e:	dc05      	bgt.n	802375c <sinf+0x1c>
 8023750:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80237c0 <sinf+0x80>
 8023754:	2000      	movs	r0, #0
 8023756:	f000 fc5b 	bl	8024010 <__kernel_sinf>
 802375a:	e004      	b.n	8023766 <sinf+0x26>
 802375c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8023760:	db04      	blt.n	802376c <sinf+0x2c>
 8023762:	ee30 0a40 	vsub.f32	s0, s0, s0
 8023766:	b003      	add	sp, #12
 8023768:	f85d fb04 	ldr.w	pc, [sp], #4
 802376c:	4668      	mov	r0, sp
 802376e:	f000 f829 	bl	80237c4 <__ieee754_rem_pio2f>
 8023772:	f000 0003 	and.w	r0, r0, #3
 8023776:	2801      	cmp	r0, #1
 8023778:	d008      	beq.n	802378c <sinf+0x4c>
 802377a:	2802      	cmp	r0, #2
 802377c:	d00d      	beq.n	802379a <sinf+0x5a>
 802377e:	b9b0      	cbnz	r0, 80237ae <sinf+0x6e>
 8023780:	eddd 0a01 	vldr	s1, [sp, #4]
 8023784:	ed9d 0a00 	vldr	s0, [sp]
 8023788:	2001      	movs	r0, #1
 802378a:	e7e4      	b.n	8023756 <sinf+0x16>
 802378c:	eddd 0a01 	vldr	s1, [sp, #4]
 8023790:	ed9d 0a00 	vldr	s0, [sp]
 8023794:	f000 f952 	bl	8023a3c <__kernel_cosf>
 8023798:	e7e5      	b.n	8023766 <sinf+0x26>
 802379a:	eddd 0a01 	vldr	s1, [sp, #4]
 802379e:	ed9d 0a00 	vldr	s0, [sp]
 80237a2:	2001      	movs	r0, #1
 80237a4:	f000 fc34 	bl	8024010 <__kernel_sinf>
 80237a8:	eeb1 0a40 	vneg.f32	s0, s0
 80237ac:	e7db      	b.n	8023766 <sinf+0x26>
 80237ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80237b2:	ed9d 0a00 	vldr	s0, [sp]
 80237b6:	f000 f941 	bl	8023a3c <__kernel_cosf>
 80237ba:	e7f5      	b.n	80237a8 <sinf+0x68>
 80237bc:	3f490fd8 	.word	0x3f490fd8
 80237c0:	00000000 	.word	0x00000000

080237c4 <__ieee754_rem_pio2f>:
 80237c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237c6:	ee10 6a10 	vmov	r6, s0
 80237ca:	4b8e      	ldr	r3, [pc, #568]	; (8023a04 <__ieee754_rem_pio2f+0x240>)
 80237cc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80237d0:	429d      	cmp	r5, r3
 80237d2:	b087      	sub	sp, #28
 80237d4:	eef0 7a40 	vmov.f32	s15, s0
 80237d8:	4604      	mov	r4, r0
 80237da:	dc05      	bgt.n	80237e8 <__ieee754_rem_pio2f+0x24>
 80237dc:	2300      	movs	r3, #0
 80237de:	ed80 0a00 	vstr	s0, [r0]
 80237e2:	6043      	str	r3, [r0, #4]
 80237e4:	2000      	movs	r0, #0
 80237e6:	e01a      	b.n	802381e <__ieee754_rem_pio2f+0x5a>
 80237e8:	4b87      	ldr	r3, [pc, #540]	; (8023a08 <__ieee754_rem_pio2f+0x244>)
 80237ea:	429d      	cmp	r5, r3
 80237ec:	dc46      	bgt.n	802387c <__ieee754_rem_pio2f+0xb8>
 80237ee:	2e00      	cmp	r6, #0
 80237f0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8023a0c <__ieee754_rem_pio2f+0x248>
 80237f4:	4b86      	ldr	r3, [pc, #536]	; (8023a10 <__ieee754_rem_pio2f+0x24c>)
 80237f6:	f025 050f 	bic.w	r5, r5, #15
 80237fa:	dd1f      	ble.n	802383c <__ieee754_rem_pio2f+0x78>
 80237fc:	429d      	cmp	r5, r3
 80237fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023802:	d00e      	beq.n	8023822 <__ieee754_rem_pio2f+0x5e>
 8023804:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8023a14 <__ieee754_rem_pio2f+0x250>
 8023808:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802380c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023810:	ed80 0a00 	vstr	s0, [r0]
 8023814:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023818:	2001      	movs	r0, #1
 802381a:	edc4 7a01 	vstr	s15, [r4, #4]
 802381e:	b007      	add	sp, #28
 8023820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023822:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8023a18 <__ieee754_rem_pio2f+0x254>
 8023826:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8023a1c <__ieee754_rem_pio2f+0x258>
 802382a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802382e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8023832:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023836:	edc0 6a00 	vstr	s13, [r0]
 802383a:	e7eb      	b.n	8023814 <__ieee754_rem_pio2f+0x50>
 802383c:	429d      	cmp	r5, r3
 802383e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8023842:	d00e      	beq.n	8023862 <__ieee754_rem_pio2f+0x9e>
 8023844:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8023a14 <__ieee754_rem_pio2f+0x250>
 8023848:	ee37 0a87 	vadd.f32	s0, s15, s14
 802384c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8023850:	ed80 0a00 	vstr	s0, [r0]
 8023854:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802385c:	edc4 7a01 	vstr	s15, [r4, #4]
 8023860:	e7dd      	b.n	802381e <__ieee754_rem_pio2f+0x5a>
 8023862:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8023a18 <__ieee754_rem_pio2f+0x254>
 8023866:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8023a1c <__ieee754_rem_pio2f+0x258>
 802386a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802386e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8023872:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023876:	edc0 6a00 	vstr	s13, [r0]
 802387a:	e7eb      	b.n	8023854 <__ieee754_rem_pio2f+0x90>
 802387c:	4b68      	ldr	r3, [pc, #416]	; (8023a20 <__ieee754_rem_pio2f+0x25c>)
 802387e:	429d      	cmp	r5, r3
 8023880:	dc72      	bgt.n	8023968 <__ieee754_rem_pio2f+0x1a4>
 8023882:	f000 fc0d 	bl	80240a0 <fabsf>
 8023886:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8023a24 <__ieee754_rem_pio2f+0x260>
 802388a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 802388e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8023892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023896:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802389a:	ee17 0a90 	vmov	r0, s15
 802389e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8023a0c <__ieee754_rem_pio2f+0x248>
 80238a2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80238a6:	281f      	cmp	r0, #31
 80238a8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8023a14 <__ieee754_rem_pio2f+0x250>
 80238ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80238b0:	eeb1 6a47 	vneg.f32	s12, s14
 80238b4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80238b8:	ee16 2a90 	vmov	r2, s13
 80238bc:	dc1c      	bgt.n	80238f8 <__ieee754_rem_pio2f+0x134>
 80238be:	495a      	ldr	r1, [pc, #360]	; (8023a28 <__ieee754_rem_pio2f+0x264>)
 80238c0:	1e47      	subs	r7, r0, #1
 80238c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80238c6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80238ca:	428b      	cmp	r3, r1
 80238cc:	d014      	beq.n	80238f8 <__ieee754_rem_pio2f+0x134>
 80238ce:	6022      	str	r2, [r4, #0]
 80238d0:	ed94 7a00 	vldr	s14, [r4]
 80238d4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80238d8:	2e00      	cmp	r6, #0
 80238da:	ee30 0a67 	vsub.f32	s0, s0, s15
 80238de:	ed84 0a01 	vstr	s0, [r4, #4]
 80238e2:	da9c      	bge.n	802381e <__ieee754_rem_pio2f+0x5a>
 80238e4:	eeb1 7a47 	vneg.f32	s14, s14
 80238e8:	eeb1 0a40 	vneg.f32	s0, s0
 80238ec:	ed84 7a00 	vstr	s14, [r4]
 80238f0:	ed84 0a01 	vstr	s0, [r4, #4]
 80238f4:	4240      	negs	r0, r0
 80238f6:	e792      	b.n	802381e <__ieee754_rem_pio2f+0x5a>
 80238f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80238fc:	15eb      	asrs	r3, r5, #23
 80238fe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8023902:	2d08      	cmp	r5, #8
 8023904:	dde3      	ble.n	80238ce <__ieee754_rem_pio2f+0x10a>
 8023906:	eddf 7a44 	vldr	s15, [pc, #272]	; 8023a18 <__ieee754_rem_pio2f+0x254>
 802390a:	eef0 6a40 	vmov.f32	s13, s0
 802390e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8023912:	ee30 0a66 	vsub.f32	s0, s0, s13
 8023916:	eea6 0a27 	vfma.f32	s0, s12, s15
 802391a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8023a1c <__ieee754_rem_pio2f+0x258>
 802391e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8023922:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8023926:	eef0 7a40 	vmov.f32	s15, s0
 802392a:	ee15 2a90 	vmov	r2, s11
 802392e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8023932:	1a5b      	subs	r3, r3, r1
 8023934:	2b19      	cmp	r3, #25
 8023936:	dc04      	bgt.n	8023942 <__ieee754_rem_pio2f+0x17e>
 8023938:	edc4 5a00 	vstr	s11, [r4]
 802393c:	eeb0 0a66 	vmov.f32	s0, s13
 8023940:	e7c6      	b.n	80238d0 <__ieee754_rem_pio2f+0x10c>
 8023942:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8023a2c <__ieee754_rem_pio2f+0x268>
 8023946:	eeb0 0a66 	vmov.f32	s0, s13
 802394a:	eea6 0a25 	vfma.f32	s0, s12, s11
 802394e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8023952:	eddf 6a37 	vldr	s13, [pc, #220]	; 8023a30 <__ieee754_rem_pio2f+0x26c>
 8023956:	eee6 7a25 	vfma.f32	s15, s12, s11
 802395a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802395e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8023962:	ed84 7a00 	vstr	s14, [r4]
 8023966:	e7b3      	b.n	80238d0 <__ieee754_rem_pio2f+0x10c>
 8023968:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802396c:	db06      	blt.n	802397c <__ieee754_rem_pio2f+0x1b8>
 802396e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023972:	edc0 7a01 	vstr	s15, [r0, #4]
 8023976:	edc0 7a00 	vstr	s15, [r0]
 802397a:	e733      	b.n	80237e4 <__ieee754_rem_pio2f+0x20>
 802397c:	15ea      	asrs	r2, r5, #23
 802397e:	3a86      	subs	r2, #134	; 0x86
 8023980:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8023984:	ee07 3a90 	vmov	s15, r3
 8023988:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802398c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8023a34 <__ieee754_rem_pio2f+0x270>
 8023990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023998:	ed8d 7a03 	vstr	s14, [sp, #12]
 802399c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80239a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80239a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80239a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80239ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 80239b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80239b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80239b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239bc:	edcd 7a05 	vstr	s15, [sp, #20]
 80239c0:	d11e      	bne.n	8023a00 <__ieee754_rem_pio2f+0x23c>
 80239c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80239c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239ca:	bf14      	ite	ne
 80239cc:	2302      	movne	r3, #2
 80239ce:	2301      	moveq	r3, #1
 80239d0:	4919      	ldr	r1, [pc, #100]	; (8023a38 <__ieee754_rem_pio2f+0x274>)
 80239d2:	9101      	str	r1, [sp, #4]
 80239d4:	2102      	movs	r1, #2
 80239d6:	9100      	str	r1, [sp, #0]
 80239d8:	a803      	add	r0, sp, #12
 80239da:	4621      	mov	r1, r4
 80239dc:	f000 f88e 	bl	8023afc <__kernel_rem_pio2f>
 80239e0:	2e00      	cmp	r6, #0
 80239e2:	f6bf af1c 	bge.w	802381e <__ieee754_rem_pio2f+0x5a>
 80239e6:	edd4 7a00 	vldr	s15, [r4]
 80239ea:	eef1 7a67 	vneg.f32	s15, s15
 80239ee:	edc4 7a00 	vstr	s15, [r4]
 80239f2:	edd4 7a01 	vldr	s15, [r4, #4]
 80239f6:	eef1 7a67 	vneg.f32	s15, s15
 80239fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80239fe:	e779      	b.n	80238f4 <__ieee754_rem_pio2f+0x130>
 8023a00:	2303      	movs	r3, #3
 8023a02:	e7e5      	b.n	80239d0 <__ieee754_rem_pio2f+0x20c>
 8023a04:	3f490fd8 	.word	0x3f490fd8
 8023a08:	4016cbe3 	.word	0x4016cbe3
 8023a0c:	3fc90f80 	.word	0x3fc90f80
 8023a10:	3fc90fd0 	.word	0x3fc90fd0
 8023a14:	37354443 	.word	0x37354443
 8023a18:	37354400 	.word	0x37354400
 8023a1c:	2e85a308 	.word	0x2e85a308
 8023a20:	43490f80 	.word	0x43490f80
 8023a24:	3f22f984 	.word	0x3f22f984
 8023a28:	08025294 	.word	0x08025294
 8023a2c:	2e85a300 	.word	0x2e85a300
 8023a30:	248d3132 	.word	0x248d3132
 8023a34:	43800000 	.word	0x43800000
 8023a38:	08025314 	.word	0x08025314

08023a3c <__kernel_cosf>:
 8023a3c:	ee10 3a10 	vmov	r3, s0
 8023a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023a44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8023a48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8023a4c:	da05      	bge.n	8023a5a <__kernel_cosf+0x1e>
 8023a4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8023a52:	ee17 2a90 	vmov	r2, s15
 8023a56:	2a00      	cmp	r2, #0
 8023a58:	d03d      	beq.n	8023ad6 <__kernel_cosf+0x9a>
 8023a5a:	ee60 5a00 	vmul.f32	s11, s0, s0
 8023a5e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8023adc <__kernel_cosf+0xa0>
 8023a62:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8023ae0 <__kernel_cosf+0xa4>
 8023a66:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8023ae4 <__kernel_cosf+0xa8>
 8023a6a:	4a1f      	ldr	r2, [pc, #124]	; (8023ae8 <__kernel_cosf+0xac>)
 8023a6c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8023a70:	4293      	cmp	r3, r2
 8023a72:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8023aec <__kernel_cosf+0xb0>
 8023a76:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023a7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8023af0 <__kernel_cosf+0xb4>
 8023a7e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023a82:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8023af4 <__kernel_cosf+0xb8>
 8023a86:	eee7 7a25 	vfma.f32	s15, s14, s11
 8023a8a:	eeb0 7a66 	vmov.f32	s14, s13
 8023a8e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8023a92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8023a96:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8023a9a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8023a9e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8023aa2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8023aa6:	dc04      	bgt.n	8023ab2 <__kernel_cosf+0x76>
 8023aa8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8023aac:	ee36 0a47 	vsub.f32	s0, s12, s14
 8023ab0:	4770      	bx	lr
 8023ab2:	4a11      	ldr	r2, [pc, #68]	; (8023af8 <__kernel_cosf+0xbc>)
 8023ab4:	4293      	cmp	r3, r2
 8023ab6:	bfda      	itte	le
 8023ab8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8023abc:	ee06 3a90 	vmovle	s13, r3
 8023ac0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8023ac4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8023ac8:	ee36 0a66 	vsub.f32	s0, s12, s13
 8023acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023ad0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023ad4:	4770      	bx	lr
 8023ad6:	eeb0 0a46 	vmov.f32	s0, s12
 8023ada:	4770      	bx	lr
 8023adc:	ad47d74e 	.word	0xad47d74e
 8023ae0:	310f74f6 	.word	0x310f74f6
 8023ae4:	3d2aaaab 	.word	0x3d2aaaab
 8023ae8:	3e999999 	.word	0x3e999999
 8023aec:	b493f27c 	.word	0xb493f27c
 8023af0:	37d00d01 	.word	0x37d00d01
 8023af4:	bab60b61 	.word	0xbab60b61
 8023af8:	3f480000 	.word	0x3f480000

08023afc <__kernel_rem_pio2f>:
 8023afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b00:	ed2d 8b04 	vpush	{d8-d9}
 8023b04:	b0d7      	sub	sp, #348	; 0x15c
 8023b06:	4616      	mov	r6, r2
 8023b08:	4698      	mov	r8, r3
 8023b0a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8023b0c:	4bbb      	ldr	r3, [pc, #748]	; (8023dfc <__kernel_rem_pio2f+0x300>)
 8023b0e:	9001      	str	r0, [sp, #4]
 8023b10:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8023b14:	1d33      	adds	r3, r6, #4
 8023b16:	460d      	mov	r5, r1
 8023b18:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8023b1c:	db29      	blt.n	8023b72 <__kernel_rem_pio2f+0x76>
 8023b1e:	1ef1      	subs	r1, r6, #3
 8023b20:	bf48      	it	mi
 8023b22:	1d31      	addmi	r1, r6, #4
 8023b24:	10c9      	asrs	r1, r1, #3
 8023b26:	1c4c      	adds	r4, r1, #1
 8023b28:	00e3      	lsls	r3, r4, #3
 8023b2a:	9302      	str	r3, [sp, #8]
 8023b2c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8023b2e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023b32:	eba1 0009 	sub.w	r0, r1, r9
 8023b36:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8023b3a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8023b3e:	eb07 0c09 	add.w	ip, r7, r9
 8023b42:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8023b46:	2300      	movs	r3, #0
 8023b48:	4563      	cmp	r3, ip
 8023b4a:	dd14      	ble.n	8023b76 <__kernel_rem_pio2f+0x7a>
 8023b4c:	ab1a      	add	r3, sp, #104	; 0x68
 8023b4e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8023b52:	46cc      	mov	ip, r9
 8023b54:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8023b58:	f1c8 0b01 	rsb	fp, r8, #1
 8023b5c:	eb0b 020c 	add.w	r2, fp, ip
 8023b60:	4297      	cmp	r7, r2
 8023b62:	db27      	blt.n	8023bb4 <__kernel_rem_pio2f+0xb8>
 8023b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023b68:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023b6c:	4618      	mov	r0, r3
 8023b6e:	2200      	movs	r2, #0
 8023b70:	e016      	b.n	8023ba0 <__kernel_rem_pio2f+0xa4>
 8023b72:	2100      	movs	r1, #0
 8023b74:	e7d7      	b.n	8023b26 <__kernel_rem_pio2f+0x2a>
 8023b76:	42d8      	cmn	r0, r3
 8023b78:	bf5d      	ittte	pl
 8023b7a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8023b7e:	ee07 2a90 	vmovpl	s15, r2
 8023b82:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8023b86:	eef0 7a47 	vmovmi.f32	s15, s14
 8023b8a:	ecea 7a01 	vstmia	sl!, {s15}
 8023b8e:	3301      	adds	r3, #1
 8023b90:	e7da      	b.n	8023b48 <__kernel_rem_pio2f+0x4c>
 8023b92:	ecfe 6a01 	vldmia	lr!, {s13}
 8023b96:	ed90 7a00 	vldr	s14, [r0]
 8023b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023b9e:	3201      	adds	r2, #1
 8023ba0:	454a      	cmp	r2, r9
 8023ba2:	f1a0 0004 	sub.w	r0, r0, #4
 8023ba6:	ddf4      	ble.n	8023b92 <__kernel_rem_pio2f+0x96>
 8023ba8:	ecea 7a01 	vstmia	sl!, {s15}
 8023bac:	3304      	adds	r3, #4
 8023bae:	f10c 0c01 	add.w	ip, ip, #1
 8023bb2:	e7d3      	b.n	8023b5c <__kernel_rem_pio2f+0x60>
 8023bb4:	ab06      	add	r3, sp, #24
 8023bb6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8023bba:	9304      	str	r3, [sp, #16]
 8023bbc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8023bbe:	eddf 8a92 	vldr	s17, [pc, #584]	; 8023e08 <__kernel_rem_pio2f+0x30c>
 8023bc2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8023e04 <__kernel_rem_pio2f+0x308>
 8023bc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8023bca:	9303      	str	r3, [sp, #12]
 8023bcc:	46ba      	mov	sl, r7
 8023bce:	ab56      	add	r3, sp, #344	; 0x158
 8023bd0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8023bd4:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8023bd8:	ab06      	add	r3, sp, #24
 8023bda:	4618      	mov	r0, r3
 8023bdc:	4652      	mov	r2, sl
 8023bde:	2a00      	cmp	r2, #0
 8023be0:	dc51      	bgt.n	8023c86 <__kernel_rem_pio2f+0x18a>
 8023be2:	4620      	mov	r0, r4
 8023be4:	9305      	str	r3, [sp, #20]
 8023be6:	f7fc f819 	bl	801fc1c <scalbnf>
 8023bea:	eeb0 8a40 	vmov.f32	s16, s0
 8023bee:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8023bf2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023bf6:	f000 fa5b 	bl	80240b0 <floorf>
 8023bfa:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8023bfe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023c02:	2c00      	cmp	r4, #0
 8023c04:	9b05      	ldr	r3, [sp, #20]
 8023c06:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8023c0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8023c0e:	edcd 7a00 	vstr	s15, [sp]
 8023c12:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023c16:	dd4b      	ble.n	8023cb0 <__kernel_rem_pio2f+0x1b4>
 8023c18:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8023c1c:	aa06      	add	r2, sp, #24
 8023c1e:	f1c4 0e08 	rsb	lr, r4, #8
 8023c22:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023c26:	ee17 1a90 	vmov	r1, s15
 8023c2a:	fa42 f00e 	asr.w	r0, r2, lr
 8023c2e:	4401      	add	r1, r0
 8023c30:	9100      	str	r1, [sp, #0]
 8023c32:	fa00 f00e 	lsl.w	r0, r0, lr
 8023c36:	a906      	add	r1, sp, #24
 8023c38:	1a12      	subs	r2, r2, r0
 8023c3a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8023c3e:	f1c4 0007 	rsb	r0, r4, #7
 8023c42:	fa42 fb00 	asr.w	fp, r2, r0
 8023c46:	f1bb 0f00 	cmp.w	fp, #0
 8023c4a:	dd43      	ble.n	8023cd4 <__kernel_rem_pio2f+0x1d8>
 8023c4c:	9a00      	ldr	r2, [sp, #0]
 8023c4e:	f04f 0e00 	mov.w	lr, #0
 8023c52:	3201      	adds	r2, #1
 8023c54:	9200      	str	r2, [sp, #0]
 8023c56:	4670      	mov	r0, lr
 8023c58:	45f2      	cmp	sl, lr
 8023c5a:	dc6c      	bgt.n	8023d36 <__kernel_rem_pio2f+0x23a>
 8023c5c:	2c00      	cmp	r4, #0
 8023c5e:	dd04      	ble.n	8023c6a <__kernel_rem_pio2f+0x16e>
 8023c60:	2c01      	cmp	r4, #1
 8023c62:	d079      	beq.n	8023d58 <__kernel_rem_pio2f+0x25c>
 8023c64:	2c02      	cmp	r4, #2
 8023c66:	f000 8082 	beq.w	8023d6e <__kernel_rem_pio2f+0x272>
 8023c6a:	f1bb 0f02 	cmp.w	fp, #2
 8023c6e:	d131      	bne.n	8023cd4 <__kernel_rem_pio2f+0x1d8>
 8023c70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023c74:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023c78:	b360      	cbz	r0, 8023cd4 <__kernel_rem_pio2f+0x1d8>
 8023c7a:	4620      	mov	r0, r4
 8023c7c:	f7fb ffce 	bl	801fc1c <scalbnf>
 8023c80:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023c84:	e026      	b.n	8023cd4 <__kernel_rem_pio2f+0x1d8>
 8023c86:	ee60 7a28 	vmul.f32	s15, s0, s17
 8023c8a:	3a01      	subs	r2, #1
 8023c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c90:	a942      	add	r1, sp, #264	; 0x108
 8023c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023c96:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8023c9a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8023c9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023ca2:	eca0 0a01 	vstmia	r0!, {s0}
 8023ca6:	ed9c 0a00 	vldr	s0, [ip]
 8023caa:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023cae:	e796      	b.n	8023bde <__kernel_rem_pio2f+0xe2>
 8023cb0:	d107      	bne.n	8023cc2 <__kernel_rem_pio2f+0x1c6>
 8023cb2:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8023cb6:	a906      	add	r1, sp, #24
 8023cb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8023cbc:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8023cc0:	e7c1      	b.n	8023c46 <__kernel_rem_pio2f+0x14a>
 8023cc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8023cc6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8023cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cce:	da2f      	bge.n	8023d30 <__kernel_rem_pio2f+0x234>
 8023cd0:	f04f 0b00 	mov.w	fp, #0
 8023cd4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023cdc:	f040 8098 	bne.w	8023e10 <__kernel_rem_pio2f+0x314>
 8023ce0:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8023ce4:	469c      	mov	ip, r3
 8023ce6:	2200      	movs	r2, #0
 8023ce8:	45bc      	cmp	ip, r7
 8023cea:	da48      	bge.n	8023d7e <__kernel_rem_pio2f+0x282>
 8023cec:	2a00      	cmp	r2, #0
 8023cee:	d05f      	beq.n	8023db0 <__kernel_rem_pio2f+0x2b4>
 8023cf0:	aa06      	add	r2, sp, #24
 8023cf2:	3c08      	subs	r4, #8
 8023cf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8023cf8:	2900      	cmp	r1, #0
 8023cfa:	d07d      	beq.n	8023df8 <__kernel_rem_pio2f+0x2fc>
 8023cfc:	4620      	mov	r0, r4
 8023cfe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023d02:	9301      	str	r3, [sp, #4]
 8023d04:	f7fb ff8a 	bl	801fc1c <scalbnf>
 8023d08:	9b01      	ldr	r3, [sp, #4]
 8023d0a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8023e08 <__kernel_rem_pio2f+0x30c>
 8023d0e:	4619      	mov	r1, r3
 8023d10:	2900      	cmp	r1, #0
 8023d12:	f280 80af 	bge.w	8023e74 <__kernel_rem_pio2f+0x378>
 8023d16:	4618      	mov	r0, r3
 8023d18:	2400      	movs	r4, #0
 8023d1a:	2800      	cmp	r0, #0
 8023d1c:	f2c0 80d0 	blt.w	8023ec0 <__kernel_rem_pio2f+0x3c4>
 8023d20:	a942      	add	r1, sp, #264	; 0x108
 8023d22:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8023d26:	4a36      	ldr	r2, [pc, #216]	; (8023e00 <__kernel_rem_pio2f+0x304>)
 8023d28:	eddf 7a38 	vldr	s15, [pc, #224]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023d2c:	2100      	movs	r1, #0
 8023d2e:	e0bb      	b.n	8023ea8 <__kernel_rem_pio2f+0x3ac>
 8023d30:	f04f 0b02 	mov.w	fp, #2
 8023d34:	e78a      	b.n	8023c4c <__kernel_rem_pio2f+0x150>
 8023d36:	681a      	ldr	r2, [r3, #0]
 8023d38:	b948      	cbnz	r0, 8023d4e <__kernel_rem_pio2f+0x252>
 8023d3a:	b11a      	cbz	r2, 8023d44 <__kernel_rem_pio2f+0x248>
 8023d3c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023d40:	601a      	str	r2, [r3, #0]
 8023d42:	2201      	movs	r2, #1
 8023d44:	f10e 0e01 	add.w	lr, lr, #1
 8023d48:	3304      	adds	r3, #4
 8023d4a:	4610      	mov	r0, r2
 8023d4c:	e784      	b.n	8023c58 <__kernel_rem_pio2f+0x15c>
 8023d4e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8023d52:	601a      	str	r2, [r3, #0]
 8023d54:	4602      	mov	r2, r0
 8023d56:	e7f5      	b.n	8023d44 <__kernel_rem_pio2f+0x248>
 8023d58:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8023d5c:	ab06      	add	r3, sp, #24
 8023d5e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023d66:	aa06      	add	r2, sp, #24
 8023d68:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8023d6c:	e77d      	b.n	8023c6a <__kernel_rem_pio2f+0x16e>
 8023d6e:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 8023d72:	ab06      	add	r3, sp, #24
 8023d74:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8023d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023d7c:	e7f3      	b.n	8023d66 <__kernel_rem_pio2f+0x26a>
 8023d7e:	a906      	add	r1, sp, #24
 8023d80:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8023d84:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8023d88:	4302      	orrs	r2, r0
 8023d8a:	e7ad      	b.n	8023ce8 <__kernel_rem_pio2f+0x1ec>
 8023d8c:	3001      	adds	r0, #1
 8023d8e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8023d92:	2a00      	cmp	r2, #0
 8023d94:	d0fa      	beq.n	8023d8c <__kernel_rem_pio2f+0x290>
 8023d96:	a91a      	add	r1, sp, #104	; 0x68
 8023d98:	eb0a 0208 	add.w	r2, sl, r8
 8023d9c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8023da0:	f10a 0301 	add.w	r3, sl, #1
 8023da4:	eb0a 0100 	add.w	r1, sl, r0
 8023da8:	4299      	cmp	r1, r3
 8023daa:	da04      	bge.n	8023db6 <__kernel_rem_pio2f+0x2ba>
 8023dac:	468a      	mov	sl, r1
 8023dae:	e70e      	b.n	8023bce <__kernel_rem_pio2f+0xd2>
 8023db0:	9b04      	ldr	r3, [sp, #16]
 8023db2:	2001      	movs	r0, #1
 8023db4:	e7eb      	b.n	8023d8e <__kernel_rem_pio2f+0x292>
 8023db6:	9803      	ldr	r0, [sp, #12]
 8023db8:	f8dd c004 	ldr.w	ip, [sp, #4]
 8023dbc:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8023dc0:	9000      	str	r0, [sp, #0]
 8023dc2:	ee07 0a90 	vmov	s15, r0
 8023dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023dca:	2000      	movs	r0, #0
 8023dcc:	ece2 7a01 	vstmia	r2!, {s15}
 8023dd0:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023dd4:	4696      	mov	lr, r2
 8023dd6:	4548      	cmp	r0, r9
 8023dd8:	dd06      	ble.n	8023de8 <__kernel_rem_pio2f+0x2ec>
 8023dda:	a842      	add	r0, sp, #264	; 0x108
 8023ddc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8023de0:	edc0 7a00 	vstr	s15, [r0]
 8023de4:	3301      	adds	r3, #1
 8023de6:	e7df      	b.n	8023da8 <__kernel_rem_pio2f+0x2ac>
 8023de8:	ecfc 6a01 	vldmia	ip!, {s13}
 8023dec:	ed3e 7a01 	vldmdb	lr!, {s14}
 8023df0:	3001      	adds	r0, #1
 8023df2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023df6:	e7ee      	b.n	8023dd6 <__kernel_rem_pio2f+0x2da>
 8023df8:	3b01      	subs	r3, #1
 8023dfa:	e779      	b.n	8023cf0 <__kernel_rem_pio2f+0x1f4>
 8023dfc:	08025658 	.word	0x08025658
 8023e00:	0802562c 	.word	0x0802562c
 8023e04:	43800000 	.word	0x43800000
 8023e08:	3b800000 	.word	0x3b800000
 8023e0c:	00000000 	.word	0x00000000
 8023e10:	9b02      	ldr	r3, [sp, #8]
 8023e12:	eeb0 0a48 	vmov.f32	s0, s16
 8023e16:	1b98      	subs	r0, r3, r6
 8023e18:	f7fb ff00 	bl	801fc1c <scalbnf>
 8023e1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8023e04 <__kernel_rem_pio2f+0x308>
 8023e20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8023e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023e28:	db1b      	blt.n	8023e62 <__kernel_rem_pio2f+0x366>
 8023e2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8023e08 <__kernel_rem_pio2f+0x30c>
 8023e2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8023e32:	aa06      	add	r2, sp, #24
 8023e34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023e38:	a906      	add	r1, sp, #24
 8023e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023e3e:	3408      	adds	r4, #8
 8023e40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023e48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023e4c:	ee10 3a10 	vmov	r3, s0
 8023e50:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8023e54:	ee17 2a90 	vmov	r2, s15
 8023e58:	f10a 0301 	add.w	r3, sl, #1
 8023e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8023e60:	e74c      	b.n	8023cfc <__kernel_rem_pio2f+0x200>
 8023e62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023e66:	aa06      	add	r2, sp, #24
 8023e68:	ee10 3a10 	vmov	r3, s0
 8023e6c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8023e70:	4653      	mov	r3, sl
 8023e72:	e743      	b.n	8023cfc <__kernel_rem_pio2f+0x200>
 8023e74:	aa42      	add	r2, sp, #264	; 0x108
 8023e76:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8023e7a:	aa06      	add	r2, sp, #24
 8023e7c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8023e80:	9201      	str	r2, [sp, #4]
 8023e82:	ee07 2a90 	vmov	s15, r2
 8023e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023e8a:	3901      	subs	r1, #1
 8023e8c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023e90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023e94:	edc0 7a00 	vstr	s15, [r0]
 8023e98:	e73a      	b.n	8023d10 <__kernel_rem_pio2f+0x214>
 8023e9a:	ecf2 6a01 	vldmia	r2!, {s13}
 8023e9e:	ecb6 7a01 	vldmia	r6!, {s14}
 8023ea2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023ea6:	3101      	adds	r1, #1
 8023ea8:	42b9      	cmp	r1, r7
 8023eaa:	dc01      	bgt.n	8023eb0 <__kernel_rem_pio2f+0x3b4>
 8023eac:	428c      	cmp	r4, r1
 8023eae:	daf4      	bge.n	8023e9a <__kernel_rem_pio2f+0x39e>
 8023eb0:	aa56      	add	r2, sp, #344	; 0x158
 8023eb2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8023eb6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8023eba:	3801      	subs	r0, #1
 8023ebc:	3401      	adds	r4, #1
 8023ebe:	e72c      	b.n	8023d1a <__kernel_rem_pio2f+0x21e>
 8023ec0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8023ec2:	2a02      	cmp	r2, #2
 8023ec4:	dc0a      	bgt.n	8023edc <__kernel_rem_pio2f+0x3e0>
 8023ec6:	2a00      	cmp	r2, #0
 8023ec8:	dc61      	bgt.n	8023f8e <__kernel_rem_pio2f+0x492>
 8023eca:	d03c      	beq.n	8023f46 <__kernel_rem_pio2f+0x44a>
 8023ecc:	9b00      	ldr	r3, [sp, #0]
 8023ece:	f003 0007 	and.w	r0, r3, #7
 8023ed2:	b057      	add	sp, #348	; 0x15c
 8023ed4:	ecbd 8b04 	vpop	{d8-d9}
 8023ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023edc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8023ede:	2a03      	cmp	r2, #3
 8023ee0:	d1f4      	bne.n	8023ecc <__kernel_rem_pio2f+0x3d0>
 8023ee2:	aa2e      	add	r2, sp, #184	; 0xb8
 8023ee4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8023ee8:	4608      	mov	r0, r1
 8023eea:	461c      	mov	r4, r3
 8023eec:	2c00      	cmp	r4, #0
 8023eee:	f1a0 0004 	sub.w	r0, r0, #4
 8023ef2:	dc59      	bgt.n	8023fa8 <__kernel_rem_pio2f+0x4ac>
 8023ef4:	4618      	mov	r0, r3
 8023ef6:	2801      	cmp	r0, #1
 8023ef8:	f1a1 0104 	sub.w	r1, r1, #4
 8023efc:	dc64      	bgt.n	8023fc8 <__kernel_rem_pio2f+0x4cc>
 8023efe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023f02:	2b01      	cmp	r3, #1
 8023f04:	dc70      	bgt.n	8023fe8 <__kernel_rem_pio2f+0x4ec>
 8023f06:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8023f0a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8023f0e:	f1bb 0f00 	cmp.w	fp, #0
 8023f12:	d172      	bne.n	8023ffa <__kernel_rem_pio2f+0x4fe>
 8023f14:	edc5 6a00 	vstr	s13, [r5]
 8023f18:	ed85 7a01 	vstr	s14, [r5, #4]
 8023f1c:	edc5 7a02 	vstr	s15, [r5, #8]
 8023f20:	e7d4      	b.n	8023ecc <__kernel_rem_pio2f+0x3d0>
 8023f22:	aa2e      	add	r2, sp, #184	; 0xb8
 8023f24:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8023f28:	ed91 7a00 	vldr	s14, [r1]
 8023f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023f30:	3b01      	subs	r3, #1
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	daf5      	bge.n	8023f22 <__kernel_rem_pio2f+0x426>
 8023f36:	f1bb 0f00 	cmp.w	fp, #0
 8023f3a:	d001      	beq.n	8023f40 <__kernel_rem_pio2f+0x444>
 8023f3c:	eef1 7a67 	vneg.f32	s15, s15
 8023f40:	edc5 7a00 	vstr	s15, [r5]
 8023f44:	e7c2      	b.n	8023ecc <__kernel_rem_pio2f+0x3d0>
 8023f46:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023f4a:	e7f2      	b.n	8023f32 <__kernel_rem_pio2f+0x436>
 8023f4c:	aa2e      	add	r2, sp, #184	; 0xb8
 8023f4e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8023f52:	edd0 7a00 	vldr	s15, [r0]
 8023f56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023f5a:	3901      	subs	r1, #1
 8023f5c:	2900      	cmp	r1, #0
 8023f5e:	daf5      	bge.n	8023f4c <__kernel_rem_pio2f+0x450>
 8023f60:	f1bb 0f00 	cmp.w	fp, #0
 8023f64:	d017      	beq.n	8023f96 <__kernel_rem_pio2f+0x49a>
 8023f66:	eef1 7a47 	vneg.f32	s15, s14
 8023f6a:	edc5 7a00 	vstr	s15, [r5]
 8023f6e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8023f72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023f76:	a82f      	add	r0, sp, #188	; 0xbc
 8023f78:	2101      	movs	r1, #1
 8023f7a:	428b      	cmp	r3, r1
 8023f7c:	da0e      	bge.n	8023f9c <__kernel_rem_pio2f+0x4a0>
 8023f7e:	f1bb 0f00 	cmp.w	fp, #0
 8023f82:	d001      	beq.n	8023f88 <__kernel_rem_pio2f+0x48c>
 8023f84:	eef1 7a67 	vneg.f32	s15, s15
 8023f88:	edc5 7a01 	vstr	s15, [r5, #4]
 8023f8c:	e79e      	b.n	8023ecc <__kernel_rem_pio2f+0x3d0>
 8023f8e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8023e0c <__kernel_rem_pio2f+0x310>
 8023f92:	4619      	mov	r1, r3
 8023f94:	e7e2      	b.n	8023f5c <__kernel_rem_pio2f+0x460>
 8023f96:	eef0 7a47 	vmov.f32	s15, s14
 8023f9a:	e7e6      	b.n	8023f6a <__kernel_rem_pio2f+0x46e>
 8023f9c:	ecb0 7a01 	vldmia	r0!, {s14}
 8023fa0:	3101      	adds	r1, #1
 8023fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023fa6:	e7e8      	b.n	8023f7a <__kernel_rem_pio2f+0x47e>
 8023fa8:	edd0 7a00 	vldr	s15, [r0]
 8023fac:	edd0 6a01 	vldr	s13, [r0, #4]
 8023fb0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023fb4:	3c01      	subs	r4, #1
 8023fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023fba:	ed80 7a00 	vstr	s14, [r0]
 8023fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023fc2:	edc0 7a01 	vstr	s15, [r0, #4]
 8023fc6:	e791      	b.n	8023eec <__kernel_rem_pio2f+0x3f0>
 8023fc8:	edd1 7a00 	vldr	s15, [r1]
 8023fcc:	edd1 6a01 	vldr	s13, [r1, #4]
 8023fd0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8023fd4:	3801      	subs	r0, #1
 8023fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023fda:	ed81 7a00 	vstr	s14, [r1]
 8023fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8023fe2:	edc1 7a01 	vstr	s15, [r1, #4]
 8023fe6:	e786      	b.n	8023ef6 <__kernel_rem_pio2f+0x3fa>
 8023fe8:	aa2e      	add	r2, sp, #184	; 0xb8
 8023fea:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8023fee:	ed91 7a00 	vldr	s14, [r1]
 8023ff2:	3b01      	subs	r3, #1
 8023ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023ff8:	e783      	b.n	8023f02 <__kernel_rem_pio2f+0x406>
 8023ffa:	eef1 6a66 	vneg.f32	s13, s13
 8023ffe:	eeb1 7a47 	vneg.f32	s14, s14
 8024002:	edc5 6a00 	vstr	s13, [r5]
 8024006:	ed85 7a01 	vstr	s14, [r5, #4]
 802400a:	eef1 7a67 	vneg.f32	s15, s15
 802400e:	e785      	b.n	8023f1c <__kernel_rem_pio2f+0x420>

08024010 <__kernel_sinf>:
 8024010:	ee10 3a10 	vmov	r3, s0
 8024014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024018:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 802401c:	da04      	bge.n	8024028 <__kernel_sinf+0x18>
 802401e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8024022:	ee17 3a90 	vmov	r3, s15
 8024026:	b35b      	cbz	r3, 8024080 <__kernel_sinf+0x70>
 8024028:	ee20 7a00 	vmul.f32	s14, s0, s0
 802402c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8024084 <__kernel_sinf+0x74>
 8024030:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8024088 <__kernel_sinf+0x78>
 8024034:	eea7 6a27 	vfma.f32	s12, s14, s15
 8024038:	eddf 7a14 	vldr	s15, [pc, #80]	; 802408c <__kernel_sinf+0x7c>
 802403c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024040:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8024090 <__kernel_sinf+0x80>
 8024044:	eea7 6a87 	vfma.f32	s12, s15, s14
 8024048:	eddf 7a12 	vldr	s15, [pc, #72]	; 8024094 <__kernel_sinf+0x84>
 802404c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8024050:	eee6 7a07 	vfma.f32	s15, s12, s14
 8024054:	b930      	cbnz	r0, 8024064 <__kernel_sinf+0x54>
 8024056:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8024098 <__kernel_sinf+0x88>
 802405a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802405e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8024062:	4770      	bx	lr
 8024064:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8024068:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 802406c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8024070:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8024074:	eddf 7a09 	vldr	s15, [pc, #36]	; 802409c <__kernel_sinf+0x8c>
 8024078:	eee6 0aa7 	vfma.f32	s1, s13, s15
 802407c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8024080:	4770      	bx	lr
 8024082:	bf00      	nop
 8024084:	2f2ec9d3 	.word	0x2f2ec9d3
 8024088:	b2d72f34 	.word	0xb2d72f34
 802408c:	3638ef1b 	.word	0x3638ef1b
 8024090:	b9500d01 	.word	0xb9500d01
 8024094:	3c088889 	.word	0x3c088889
 8024098:	be2aaaab 	.word	0xbe2aaaab
 802409c:	3e2aaaab 	.word	0x3e2aaaab

080240a0 <fabsf>:
 80240a0:	ee10 3a10 	vmov	r3, s0
 80240a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80240a8:	ee00 3a10 	vmov	s0, r3
 80240ac:	4770      	bx	lr
	...

080240b0 <floorf>:
 80240b0:	ee10 3a10 	vmov	r3, s0
 80240b4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80240b8:	3a7f      	subs	r2, #127	; 0x7f
 80240ba:	2a16      	cmp	r2, #22
 80240bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80240c0:	dc2a      	bgt.n	8024118 <floorf+0x68>
 80240c2:	2a00      	cmp	r2, #0
 80240c4:	da11      	bge.n	80240ea <floorf+0x3a>
 80240c6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8024128 <floorf+0x78>
 80240ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80240ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80240d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240d6:	dd05      	ble.n	80240e4 <floorf+0x34>
 80240d8:	2b00      	cmp	r3, #0
 80240da:	da23      	bge.n	8024124 <floorf+0x74>
 80240dc:	4a13      	ldr	r2, [pc, #76]	; (802412c <floorf+0x7c>)
 80240de:	2900      	cmp	r1, #0
 80240e0:	bf18      	it	ne
 80240e2:	4613      	movne	r3, r2
 80240e4:	ee00 3a10 	vmov	s0, r3
 80240e8:	4770      	bx	lr
 80240ea:	4911      	ldr	r1, [pc, #68]	; (8024130 <floorf+0x80>)
 80240ec:	4111      	asrs	r1, r2
 80240ee:	420b      	tst	r3, r1
 80240f0:	d0fa      	beq.n	80240e8 <floorf+0x38>
 80240f2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8024128 <floorf+0x78>
 80240f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80240fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80240fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024102:	ddef      	ble.n	80240e4 <floorf+0x34>
 8024104:	2b00      	cmp	r3, #0
 8024106:	bfbe      	ittt	lt
 8024108:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802410c:	fa40 f202 	asrlt.w	r2, r0, r2
 8024110:	189b      	addlt	r3, r3, r2
 8024112:	ea23 0301 	bic.w	r3, r3, r1
 8024116:	e7e5      	b.n	80240e4 <floorf+0x34>
 8024118:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802411c:	d3e4      	bcc.n	80240e8 <floorf+0x38>
 802411e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024122:	4770      	bx	lr
 8024124:	2300      	movs	r3, #0
 8024126:	e7dd      	b.n	80240e4 <floorf+0x34>
 8024128:	7149f2ca 	.word	0x7149f2ca
 802412c:	bf800000 	.word	0xbf800000
 8024130:	007fffff 	.word	0x007fffff

08024134 <_init>:
 8024134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024136:	bf00      	nop
 8024138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802413a:	bc08      	pop	{r3}
 802413c:	469e      	mov	lr, r3
 802413e:	4770      	bx	lr

08024140 <_fini>:
 8024140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024142:	bf00      	nop
 8024144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024146:	bc08      	pop	{r3}
 8024148:	469e      	mov	lr, r3
 802414a:	4770      	bx	lr
