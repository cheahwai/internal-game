
Demo4_V1.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001524  08019be0  08019be0  00029be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b104  0801b104  00030600  2**0
                  CONTENTS
  4 .ARM          00000008  0801b104  0801b104  0002b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b10c  0801b10c  00030600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b10c  0801b10c  0002b10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b110  0801b110  0002b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000600  20000000  0801b114  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008540  20000600  0801b714  00030600  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008b40  0801b714  00038b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030600  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066a11  00000000  00000000  00030630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008e39  00000000  00000000  00097041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002610  00000000  00000000  0009fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002310  00000000  00000000  000a2490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e83d  00000000  00000000  000a47a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003632d  00000000  00000000  000d2fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9966  00000000  00000000  0010930a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f2c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b270  00000000  00000000  001f2cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000600 	.word	0x20000600
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019bc4 	.word	0x08019bc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000604 	.word	0x20000604
 80001cc:	08019bc4 	.word	0x08019bc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 8000fec:	b408      	push	{r3}
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b089      	sub	sp, #36	; 0x24
 8000ff2:	af02      	add	r7, sp, #8
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800100c:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d12e      	bne.n	800107a <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	1d1a      	adds	r2, r3, #4
 8001020:	617a      	str	r2, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	1d1a      	adds	r2, r3, #4
 800102c:	617a      	str	r2, [r7, #20]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1d1a      	adds	r2, r3, #4
 800103a:	617a      	str	r2, [r7, #20]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	1d1a      	adds	r2, r3, #4
 8001046:	617a      	str	r2, [r7, #20]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29a      	uxth	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6858      	ldr	r0, [r3, #4]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8919      	ldrh	r1, [r3, #8]
 8001058:	2301      	movs	r3, #1
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	2201      	movs	r2, #1
 8001060:	f000 f84e 	bl	8001100 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68d8      	ldr	r0, [r3, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8a19      	ldrh	r1, [r3, #16]
 800106c:	2301      	movs	r3, #1
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	2201      	movs	r2, #1
 8001074:	f000 f844 	bl	8001100 <GPIOPinsInit>
 8001078:	e017      	b.n	80010aa <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	617a      	str	r2, [r7, #20]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	1d1a      	adds	r2, r3, #4
 8001092:	617a      	str	r2, [r7, #20]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1d1a      	adds	r2, r3, #4
 80010a0:	617a      	str	r2, [r7, #20]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d105      	bne.n	80010be <BDCInit+0xd2>
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2200      	movs	r2, #0
 80010ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010bc:	e018      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	d105      	bne.n	80010d2 <BDCInit+0xe6>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80010d0:	e00e      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d105      	bne.n	80010e6 <BDCInit+0xfa>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80010e4:	e004      	b.n	80010f0 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010fa:	b001      	add	sp, #4
 80010fc:	4770      	bx	lr
	...

08001100 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b092      	sub	sp, #72	; 0x48
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4a6a      	ldr	r2, [pc, #424]	; (80012cc <GPIOPinsInit+0x1cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f000 80af 	beq.w	8001288 <GPIOPinsInit+0x188>
 800112a:	4a68      	ldr	r2, [pc, #416]	; (80012cc <GPIOPinsInit+0x1cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	f200 80ba 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001132:	4a67      	ldr	r2, [pc, #412]	; (80012d0 <GPIOPinsInit+0x1d0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	f000 8098 	beq.w	800126a <GPIOPinsInit+0x16a>
 800113a:	4a65      	ldr	r2, [pc, #404]	; (80012d0 <GPIOPinsInit+0x1d0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f200 80b2 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001142:	4a64      	ldr	r2, [pc, #400]	; (80012d4 <GPIOPinsInit+0x1d4>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f000 8081 	beq.w	800124c <GPIOPinsInit+0x14c>
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <GPIOPinsInit+0x1d4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	f200 80aa 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001152:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <GPIOPinsInit+0x1d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d06a      	beq.n	800122e <GPIOPinsInit+0x12e>
 8001158:	4a5f      	ldr	r2, [pc, #380]	; (80012d8 <GPIOPinsInit+0x1d8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f200 80a3 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 8001160:	4a5e      	ldr	r2, [pc, #376]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d054      	beq.n	8001210 <GPIOPinsInit+0x110>
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <GPIOPinsInit+0x1dc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	f200 809c 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800116e:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d03e      	beq.n	80011f2 <GPIOPinsInit+0xf2>
 8001174:	4a5a      	ldr	r2, [pc, #360]	; (80012e0 <GPIOPinsInit+0x1e0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f200 8095 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800117c:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <GPIOPinsInit+0x1e4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d028      	beq.n	80011d4 <GPIOPinsInit+0xd4>
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <GPIOPinsInit+0x1e4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f200 808e 	bhi.w	80012a6 <GPIOPinsInit+0x1a6>
 800118a:	4a57      	ldr	r2, [pc, #348]	; (80012e8 <GPIOPinsInit+0x1e8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d003      	beq.n	8001198 <GPIOPinsInit+0x98>
 8001190:	4a56      	ldr	r2, [pc, #344]	; (80012ec <GPIOPinsInit+0x1ec>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00f      	beq.n	80011b6 <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 8001196:	e086      	b.n	80012a6 <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b51      	ldr	r3, [pc, #324]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80011b4:	e078      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ba:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80011d2:	e069      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011dc:	4a44      	ldr	r2, [pc, #272]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6313      	str	r3, [r2, #48]	; 0x30
 80011e4:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80011f0:	e05a      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <GPIOPinsInit+0x1f0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 800120e:	e04b      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	4a35      	ldr	r2, [pc, #212]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6313      	str	r3, [r2, #48]	; 0x30
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
	break;
 800122c:	e03c      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b2c      	ldr	r3, [pc, #176]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
	break;
 800124a:	e02d      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a26      	ldr	r2, [pc, #152]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
	break;
 8001268:	e01e      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
	break;
 8001286:	e00f      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <GPIOPinsInit+0x1f0>)
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <GPIOPinsInit+0x1f0>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
	break;
 80012a4:	e000      	b.n	80012a8 <GPIOPinsInit+0x1a8>
	default: break;
 80012a6:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80012b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f00a fffc 	bl	800c2bc <HAL_GPIO_Init>

}
 80012c4:	bf00      	nop
 80012c6:	3748      	adds	r7, #72	; 0x48
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40022000 	.word	0x40022000
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021400 	.word	0x40021400
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40023800 	.word	0x40023800

080012f4 <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a52      	ldr	r2, [pc, #328]	; (8001464 <PWMTimeBaseInit+0x170>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d103      	bne.n	8001328 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <PWMTimeBaseInit+0x174>)
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e057      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4a50      	ldr	r2, [pc, #320]	; (800146c <PWMTimeBaseInit+0x178>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d104      	bne.n	800133a <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e04e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <PWMTimeBaseInit+0x17c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d103      	bne.n	800134a <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <PWMTimeBaseInit+0x180>)
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e046      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a4a      	ldr	r2, [pc, #296]	; (8001478 <PWMTimeBaseInit+0x184>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d103      	bne.n	800135a <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a49      	ldr	r2, [pc, #292]	; (800147c <PWMTimeBaseInit+0x188>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e03e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a48      	ldr	r2, [pc, #288]	; (8001480 <PWMTimeBaseInit+0x18c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d103      	bne.n	800136a <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a47      	ldr	r2, [pc, #284]	; (8001484 <PWMTimeBaseInit+0x190>)
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e036      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4a46      	ldr	r2, [pc, #280]	; (8001488 <PWMTimeBaseInit+0x194>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d103      	bne.n	800137a <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a45      	ldr	r2, [pc, #276]	; (800148c <PWMTimeBaseInit+0x198>)
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e02e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <PWMTimeBaseInit+0x19c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d103      	bne.n	800138a <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4a43      	ldr	r2, [pc, #268]	; (8001494 <PWMTimeBaseInit+0x1a0>)
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e026      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a42      	ldr	r2, [pc, #264]	; (8001498 <PWMTimeBaseInit+0x1a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4a41      	ldr	r2, [pc, #260]	; (800149c <PWMTimeBaseInit+0x1a8>)
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e01e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4a40      	ldr	r2, [pc, #256]	; (80014a0 <PWMTimeBaseInit+0x1ac>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d103      	bne.n	80013aa <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <PWMTimeBaseInit+0x1b0>)
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e016      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <PWMTimeBaseInit+0x1b4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d103      	bne.n	80013ba <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <PWMTimeBaseInit+0x1b8>)
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e00e      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4a3c      	ldr	r2, [pc, #240]	; (80014b0 <PWMTimeBaseInit+0x1bc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d103      	bne.n	80013ca <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <PWMTimeBaseInit+0x1c0>)
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e006      	b.n	80013d8 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <PWMTimeBaseInit+0x1c4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d102      	bne.n	80013d8 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a39      	ldr	r2, [pc, #228]	; (80014bc <PWMTimeBaseInit+0x1c8>)
 80013d6:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	1e5a      	subs	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2280      	movs	r2, #128	; 0x80
 80013f8:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f00e fa64 	bl	800f8c8 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 8001406:	f004 f945 	bl	8005694 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f00e fd00 	bl	800fe1c <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 8001422:	f004 f937 	bl	8005694 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f00e fac1 	bl	800f9ae <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 8001432:	f004 f92f 	bl	8005694 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	4619      	mov	r1, r3
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f00f f8e5 	bl	8010614 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001450:	f004 f920 	bl	8005694 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f00e fa62 	bl	800f91e <HAL_TIM_Base_Start>

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200067ac 	.word	0x200067ac
 8001468:	40010000 	.word	0x40010000
 800146c:	200068b0 	.word	0x200068b0
 8001470:	20006560 	.word	0x20006560
 8001474:	40000400 	.word	0x40000400
 8001478:	2000639c 	.word	0x2000639c
 800147c:	40000800 	.word	0x40000800
 8001480:	20006520 	.word	0x20006520
 8001484:	40000c00 	.word	0x40000c00
 8001488:	2000635c 	.word	0x2000635c
 800148c:	40010400 	.word	0x40010400
 8001490:	200067ec 	.word	0x200067ec
 8001494:	40014000 	.word	0x40014000
 8001498:	2000647c 	.word	0x2000647c
 800149c:	40014400 	.word	0x40014400
 80014a0:	200066c4 	.word	0x200066c4
 80014a4:	40014800 	.word	0x40014800
 80014a8:	200069d0 	.word	0x200069d0
 80014ac:	40001800 	.word	0x40001800
 80014b0:	20006644 	.word	0x20006644
 80014b4:	40001c00 	.word	0x40001c00
 80014b8:	20006990 	.word	0x20006990
 80014bc:	40002000 	.word	0x40002000

080014c0 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09a      	sub	sp, #104	; 0x68
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80014f2:	2370      	movs	r3, #112	; 0x70
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014fa:	2302      	movs	r3, #2
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80014fe:	2308      	movs	r3, #8
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 800150e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f00e fbba 	bl	800fc90 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <PWMChannelConfig+0x66>
	{
		Error_Handler();
 8001522:	f004 f8b7 	bl	8005694 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a95      	ldr	r2, [pc, #596]	; (8001780 <PWMChannelConfig+0x2c0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f000 80af 	beq.w	800168e <PWMChannelConfig+0x1ce>
 8001530:	4a93      	ldr	r2, [pc, #588]	; (8001780 <PWMChannelConfig+0x2c0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	f200 80ba 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001538:	4a92      	ldr	r2, [pc, #584]	; (8001784 <PWMChannelConfig+0x2c4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	f000 8098 	beq.w	8001670 <PWMChannelConfig+0x1b0>
 8001540:	4a90      	ldr	r2, [pc, #576]	; (8001784 <PWMChannelConfig+0x2c4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	f200 80b2 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001548:	4a8f      	ldr	r2, [pc, #572]	; (8001788 <PWMChannelConfig+0x2c8>)
 800154a:	4293      	cmp	r3, r2
 800154c:	f000 8081 	beq.w	8001652 <PWMChannelConfig+0x192>
 8001550:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <PWMChannelConfig+0x2c8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f200 80aa 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001558:	4a8c      	ldr	r2, [pc, #560]	; (800178c <PWMChannelConfig+0x2cc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d06a      	beq.n	8001634 <PWMChannelConfig+0x174>
 800155e:	4a8b      	ldr	r2, [pc, #556]	; (800178c <PWMChannelConfig+0x2cc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f200 80a3 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001566:	4a8a      	ldr	r2, [pc, #552]	; (8001790 <PWMChannelConfig+0x2d0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d054      	beq.n	8001616 <PWMChannelConfig+0x156>
 800156c:	4a88      	ldr	r2, [pc, #544]	; (8001790 <PWMChannelConfig+0x2d0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f200 809c 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001574:	4a87      	ldr	r2, [pc, #540]	; (8001794 <PWMChannelConfig+0x2d4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d03e      	beq.n	80015f8 <PWMChannelConfig+0x138>
 800157a:	4a86      	ldr	r2, [pc, #536]	; (8001794 <PWMChannelConfig+0x2d4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f200 8095 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001582:	4a85      	ldr	r2, [pc, #532]	; (8001798 <PWMChannelConfig+0x2d8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d028      	beq.n	80015da <PWMChannelConfig+0x11a>
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <PWMChannelConfig+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f200 808e 	bhi.w	80016ac <PWMChannelConfig+0x1ec>
 8001590:	4a82      	ldr	r2, [pc, #520]	; (800179c <PWMChannelConfig+0x2dc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <PWMChannelConfig+0xde>
 8001596:	4a82      	ldr	r2, [pc, #520]	; (80017a0 <PWMChannelConfig+0x2e0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00f      	beq.n	80015bc <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 800159c:	e086      	b.n	80016ac <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
 80015a2:	4b80      	ldr	r3, [pc, #512]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a7f      	ldr	r2, [pc, #508]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b7d      	ldr	r3, [pc, #500]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
 80015b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80015ba:	e078      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a77      	ldr	r2, [pc, #476]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b75      	ldr	r3, [pc, #468]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
 80015d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80015d8:	e069      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015de:	4b71      	ldr	r3, [pc, #452]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a70      	ldr	r2, [pc, #448]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80015f6:	e05a      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80015fc:	4b69      	ldr	r3, [pc, #420]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a68      	ldr	r2, [pc, #416]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b66      	ldr	r3, [pc, #408]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001614:	e04b      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
 800161a:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a61      	ldr	r2, [pc, #388]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b5f      	ldr	r3, [pc, #380]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001632:	e03c      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	4b5a      	ldr	r3, [pc, #360]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800163e:	f043 0320 	orr.w	r3, r3, #32
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0320 	and.w	r3, r3, #32
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001650:	e02d      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800165c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
		break;
 800166e:	e01e      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a4a      	ldr	r2, [pc, #296]	; (80017a4 <PWMChannelConfig+0x2e4>)
 800167a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
		break;
 800168c:	e00f      	b.n	80016ae <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <PWMChannelConfig+0x2e4>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <PWMChannelConfig+0x2e4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697b      	ldr	r3, [r7, #20]
		break;
 80016aa:	e000      	b.n	80016ae <PWMChannelConfig+0x1ee>
		default: break;
 80016ac:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <PWMChannelConfig+0x2e8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d102      	bne.n	80016cc <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80016ca:	e04b      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a37      	ldr	r2, [pc, #220]	; (80017ac <PWMChannelConfig+0x2ec>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 80016d4:	2301      	movs	r3, #1
 80016d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80016d8:	e044      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <PWMChannelConfig+0x2f0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016e2:	2302      	movs	r3, #2
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80016e6:	e03d      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <PWMChannelConfig+0x2f4>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f0:	2302      	movs	r3, #2
 80016f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80016f4:	e036      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <PWMChannelConfig+0x2f8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d102      	bne.n	8001704 <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016fe:	2302      	movs	r3, #2
 8001700:	64bb      	str	r3, [r7, #72]	; 0x48
 8001702:	e02f      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4a2d      	ldr	r2, [pc, #180]	; (80017bc <PWMChannelConfig+0x2fc>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800170c:	2303      	movs	r3, #3
 800170e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001710:	e028      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <PWMChannelConfig+0x300>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800171a:	2303      	movs	r3, #3
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
 800171e:	e021      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a28      	ldr	r2, [pc, #160]	; (80017c4 <PWMChannelConfig+0x304>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001728:	2303      	movs	r3, #3
 800172a:	64bb      	str	r3, [r7, #72]	; 0x48
 800172c:	e01a      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <PWMChannelConfig+0x308>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d102      	bne.n	800173c <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001736:	2303      	movs	r3, #3
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
 800173a:	e013      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4a23      	ldr	r2, [pc, #140]	; (80017cc <PWMChannelConfig+0x30c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d102      	bne.n	800174a <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001744:	2309      	movs	r3, #9
 8001746:	64bb      	str	r3, [r7, #72]	; 0x48
 8001748:	e00c      	b.n	8001764 <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a20      	ldr	r2, [pc, #128]	; (80017d0 <PWMChannelConfig+0x310>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d102      	bne.n	8001758 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001752:	2309      	movs	r3, #9
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
 8001756:	e005      	b.n	8001764 <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <PWMChannelConfig+0x314>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d101      	bne.n	8001764 <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001760:	2309      	movs	r3, #9
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001768:	4619      	mov	r1, r3
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f00a fda6 	bl	800c2bc <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f00e f946 	bl	800fa04 <HAL_TIM_PWM_Start>

}
 8001778:	bf00      	nop
 800177a:	3768      	adds	r7, #104	; 0x68
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40022000 	.word	0x40022000
 8001784:	40021c00 	.word	0x40021c00
 8001788:	40021800 	.word	0x40021800
 800178c:	40021400 	.word	0x40021400
 8001790:	40021000 	.word	0x40021000
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40020800 	.word	0x40020800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	200067ac 	.word	0x200067ac
 80017ac:	200068b0 	.word	0x200068b0
 80017b0:	20006560 	.word	0x20006560
 80017b4:	2000639c 	.word	0x2000639c
 80017b8:	20006520 	.word	0x20006520
 80017bc:	2000635c 	.word	0x2000635c
 80017c0:	200067ec 	.word	0x200067ec
 80017c4:	2000647c 	.word	0x2000647c
 80017c8:	200066c4 	.word	0x200066c4
 80017cc:	200069d0 	.word	0x200069d0
 80017d0:	20006644 	.word	0x20006644
 80017d4:	20006990 	.word	0x20006990

080017d8 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	461a      	mov	r2, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	72fb      	strb	r3, [r7, #11]
 80017e8:	4613      	mov	r3, r2
 80017ea:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	7afa      	ldrb	r2, [r7, #11]
 80017f0:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	893a      	ldrh	r2, [r7, #8]
 80017fc:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8bba      	ldrh	r2, [r7, #28]
 8001808:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001814:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8899      	ldrh	r1, [r3, #4]
 800181e:	2301      	movs	r3, #1
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2302      	movs	r3, #2
 8001824:	2201      	movs	r2, #1
 8001826:	f7ff fc6b 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6898      	ldr	r0, [r3, #8]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8999      	ldrh	r1, [r3, #12]
 8001832:	2301      	movs	r3, #1
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2302      	movs	r3, #2
 8001838:	2201      	movs	r2, #1
 800183a:	f7ff fc61 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6918      	ldr	r0, [r3, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8a99      	ldrh	r1, [r3, #20]
 8001846:	2301      	movs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	2201      	movs	r2, #1
 800184e:	f7ff fc57 	bl	8001100 <GPIOPinsInit>

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7d9b      	ldrb	r3, [r3, #22]
 8001866:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	f00a ffba 	bl	800c7ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6898      	ldr	r0, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	899b      	ldrh	r3, [r3, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	f00a ffb2 	bl	800c7ec <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8001888:	7bba      	ldrb	r2, [r7, #14]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3206      	adds	r2, #6
 800188e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001892:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 8001894:	2308      	movs	r3, #8
 8001896:	737b      	strb	r3, [r7, #13]
 8001898:	e02a      	b.n	80018f0 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da08      	bge.n	80018b4 <SHIFTREGShift+0x5a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6918      	ldr	r0, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a9b      	ldrh	r3, [r3, #20]
 80018aa:	2201      	movs	r2, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	f00a ff9d 	bl	800c7ec <HAL_GPIO_WritePin>
 80018b2:	e007      	b.n	80018c4 <SHIFTREGShift+0x6a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6918      	ldr	r0, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	8a9b      	ldrh	r3, [r3, #20]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f00a ff94 	bl	800c7ec <HAL_GPIO_WritePin>
			out <<= 1;
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	889b      	ldrh	r3, [r3, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4619      	mov	r1, r3
 80018d6:	f00a ff89 	bl	800c7ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	889b      	ldrh	r3, [r3, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f00a ff81 	bl	800c7ec <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	737b      	strb	r3, [r7, #13]
 80018f0:	7b7b      	ldrb	r3, [r7, #13]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1d1      	bne.n	800189a <SHIFTREGShift+0x40>
		}
	}while(i--);
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	73ba      	strb	r2, [r7, #14]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1c3      	bne.n	8001888 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6898      	ldr	r0, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	4619      	mov	r1, r3
 800190c:	f00a ff6e 	bl	800c7ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6898      	ldr	r0, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	899b      	ldrh	r3, [r3, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f00a ff66 	bl	800c7ec <HAL_GPIO_WritePin>

}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_MspInit+0x54>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_MspInit+0x54>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x54>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_MspInit+0x54>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <HAL_MspInit+0x54>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_MspInit+0x54>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	210f      	movs	r1, #15
 800196a:	f06f 0001 	mvn.w	r0, #1
 800196e:	f009 fd71 	bl	800b454 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_CAN_MspInit+0x128>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d135      	bne.n	8001a0e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019a2:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019ac:	4b3f      	ldr	r3, [pc, #252]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10d      	bne.n	80019d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c2:	6413      	str	r3, [r2, #64]	; 0x40
 80019c4:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80019ec:	2303      	movs	r3, #3
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019fc:	2309      	movs	r3, #9
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <HAL_CAN_MspInit+0x134>)
 8001a08:	f00a fc58 	bl	800c2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a0c:	e048      	b.n	8001aa0 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <HAL_CAN_MspInit+0x138>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d143      	bne.n	8001aa0 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a26:	6413      	str	r3, [r2, #64]	; 0x40
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_CAN_MspInit+0x12c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10d      	bne.n	8001a62 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a18      	ldr	r2, [pc, #96]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_CAN_MspInit+0x130>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a90:	2309      	movs	r3, #9
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_CAN_MspInit+0x13c>)
 8001a9c:	f00a fc0e 	bl	800c2bc <HAL_GPIO_Init>
}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40006400 	.word	0x40006400
 8001aac:	2000061c 	.word	0x2000061c
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40006800 	.word	0x40006800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a5c      	ldr	r2, [pc, #368]	; (8001c50 <HAL_I2C_MspInit+0x190>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12d      	bne.n	8001b3e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a5a      	ldr	r2, [pc, #360]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001afe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b10:	2304      	movs	r3, #4
 8001b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	4619      	mov	r1, r3
 8001b1a:	484f      	ldr	r0, [pc, #316]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b1c:	f00a fbce 	bl	800c2bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b3c:	e083      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_I2C_MspInit+0x19c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d12d      	bne.n	8001ba4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	6313      	str	r3, [r2, #48]	; 0x30
 8001b58:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6a:	2312      	movs	r3, #18
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b76:	2304      	movs	r3, #4
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4835      	ldr	r0, [pc, #212]	; (8001c58 <HAL_I2C_MspInit+0x198>)
 8001b82:	f00a fb9b 	bl	800c2bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
}
 8001ba2:	e050      	b.n	8001c46 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_I2C_MspInit+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d14b      	bne.n	8001c46 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bec:	2312      	movs	r3, #18
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x1a4>)
 8001c04:	f00a fb5a 	bl	800c2bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0e:	2312      	movs	r3, #18
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4810      	ldr	r0, [pc, #64]	; (8001c68 <HAL_I2C_MspInit+0x1a8>)
 8001c26:	f00a fb49 	bl	800c2bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_I2C_MspInit+0x194>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
}
 8001c46:	bf00      	nop
 8001c48:	3738      	adds	r7, #56	; 0x38
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40005400 	.word	0x40005400
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40005800 	.word	0x40005800
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_I2C_MspDeInit+0xb8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d116      	bne.n	8001cac <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c7e:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001c84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c88:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8e:	4827      	ldr	r0, [pc, #156]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c90:	f00a fcb0 	bl	800c5f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001c9a:	f00a fcab 	bl	800c5f4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001c9e:	201f      	movs	r0, #31
 8001ca0:	f009 fc02 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	f009 fbff 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001caa:	e036      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_I2C_MspDeInit+0xc4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d116      	bne.n	8001ce4 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cbc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cc8:	f00a fc94 	bl	800c5f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_I2C_MspDeInit+0xc0>)
 8001cd2:	f00a fc8f 	bl	800c5f4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f009 fbe6 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8001cdc:	2022      	movs	r0, #34	; 0x22
 8001cde:	f009 fbe3 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
}
 8001ce2:	e01a      	b.n	8001d1a <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <HAL_I2C_MspDeInit+0xc8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d115      	bne.n	8001d1a <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_I2C_MspDeInit+0xbc>)
 8001cf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <HAL_I2C_MspDeInit+0xcc>)
 8001d00:	f00a fc78 	bl	800c5f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8001d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_I2C_MspDeInit+0xd0>)
 8001d0a:	f00a fc73 	bl	800c5f4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8001d0e:	2048      	movs	r0, #72	; 0x48
 8001d10:	f009 fbca 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8001d14:	2049      	movs	r0, #73	; 0x49
 8001d16:	f009 fbc7 	bl	800b4a8 <HAL_NVIC_DisableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40005800 	.word	0x40005800
 8001d34:	40005c00 	.word	0x40005c00
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b091      	sub	sp, #68	; 0x44
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8d      	ldr	r2, [pc, #564]	; (8001f84 <HAL_TIM_PWM_MspInit+0x244>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d10e      	bne.n	8001d70 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d56:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a8b      	ldr	r2, [pc, #556]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b89      	ldr	r3, [pc, #548]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8001d6e:	e102      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d7e:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a81      	ldr	r2, [pc, #516]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d96:	e0ee      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_TIM_PWM_MspInit+0x24c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
 8001da6:	4b78      	ldr	r3, [pc, #480]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b75      	ldr	r3, [pc, #468]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001dbe:	e0da      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a72      	ldr	r2, [pc, #456]	; (8001f90 <HAL_TIM_PWM_MspInit+0x250>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	4a6d      	ldr	r2, [pc, #436]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
 8001de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001de6:	e0c6      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_TIM_PWM_MspInit+0x254>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e0e:	e0b2      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_TIM_PWM_MspInit+0x258>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10e      	bne.n	8001e38 <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001e36:	e09e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_TIM_PWM_MspInit+0x25c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a4f      	ldr	r2, [pc, #316]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e5e:	e08a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_TIM_PWM_MspInit+0x260>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e74:	f043 0302 	orr.w	r3, r3, #2
 8001e78:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
}
 8001e86:	e076      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	; (8001fa4 <HAL_TIM_PWM_MspInit+0x264>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
}
 8001eae:	e062      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_TIM_PWM_MspInit+0x268>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4b32      	ldr	r3, [pc, #200]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a31      	ldr	r2, [pc, #196]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
}
 8001ed6:	e04e      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_TIM_PWM_MspInit+0x26c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
}
 8001efe:	e03a      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <HAL_TIM_PWM_MspInit+0x270>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]
}
 8001f26:	e026      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_TIM_PWM_MspInit+0x274>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
}
 8001f4e:	e012      	b.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_PWM_MspInit+0x278>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d10d      	bne.n	8001f76 <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a09      	ldr	r2, [pc, #36]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_TIM_PWM_MspInit+0x248>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]
}
 8001f76:	bf00      	nop
 8001f78:	3744      	adds	r7, #68	; 0x44
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40001000 	.word	0x40001000
 8001f9c:	40001400 	.word	0x40001400
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40001800 	.word	0x40001800
 8001fb4:	40001c00 	.word	0x40001c00
 8001fb8:	40002000 	.word	0x40002000

08001fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b091      	sub	sp, #68	; 0x44
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a8d      	ldr	r2, [pc, #564]	; (8002200 <HAL_TIM_Base_MspInit+0x244>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd2:	4b8c      	ldr	r3, [pc, #560]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	4a8b      	ldr	r2, [pc, #556]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8001fea:	e102      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a81      	ldr	r2, [pc, #516]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002012:	e0ee      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a7b      	ldr	r2, [pc, #492]	; (8002208 <HAL_TIM_Base_MspInit+0x24c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10e      	bne.n	800203c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
 8002022:	4b78      	ldr	r3, [pc, #480]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a77      	ldr	r2, [pc, #476]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b75      	ldr	r3, [pc, #468]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800203a:	e0da      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_TIM_Base_MspInit+0x250>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
 800204a:	4b6e      	ldr	r3, [pc, #440]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a6d      	ldr	r2, [pc, #436]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b6b      	ldr	r3, [pc, #428]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002062:	e0c6      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a69      	ldr	r2, [pc, #420]	; (8002210 <HAL_TIM_Base_MspInit+0x254>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10e      	bne.n	800208c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	4b64      	ldr	r3, [pc, #400]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a63      	ldr	r2, [pc, #396]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b61      	ldr	r3, [pc, #388]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800208a:	e0b2      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a60      	ldr	r2, [pc, #384]	; (8002214 <HAL_TIM_Base_MspInit+0x258>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	4b5a      	ldr	r3, [pc, #360]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a59      	ldr	r2, [pc, #356]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80020b2:	e09e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a57      	ldr	r2, [pc, #348]	; (8002218 <HAL_TIM_Base_MspInit+0x25c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020c8:	f043 0320 	orr.w	r3, r3, #32
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020da:	e08a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a4e      	ldr	r2, [pc, #312]	; (800221c <HAL_TIM_Base_MspInit+0x260>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a45      	ldr	r2, [pc, #276]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	623b      	str	r3, [r7, #32]
 8002100:	6a3b      	ldr	r3, [r7, #32]
}
 8002102:	e076      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a45      	ldr	r2, [pc, #276]	; (8002220 <HAL_TIM_Base_MspInit+0x264>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10e      	bne.n	800212c <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
}
 800212a:	e062      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_TIM_Base_MspInit+0x268>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
}
 8002152:	e04e      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a33      	ldr	r2, [pc, #204]	; (8002228 <HAL_TIM_Base_MspInit+0x26c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10e      	bne.n	800217c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a27      	ldr	r2, [pc, #156]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	617b      	str	r3, [r7, #20]
 8002178:	697b      	ldr	r3, [r7, #20]
}
 800217a:	e03a      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_TIM_Base_MspInit+0x270>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
}
 80021a2:	e026      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_TIM_Base_MspInit+0x274>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	e012      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_MspInit+0x278>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_TIM_Base_MspInit+0x248>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3744      	adds	r7, #68	; 0x44
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40001000 	.word	0x40001000
 8002218:	40001400 	.word	0x40001400
 800221c:	40010400 	.word	0x40010400
 8002220:	40014000 	.word	0x40014000
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800
 800222c:	40001800 	.word	0x40001800
 8002230:	40001c00 	.word	0x40001c00
 8002234:	40002000 	.word	0x40002000

08002238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b094      	sub	sp, #80	; 0x50
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a8c      	ldr	r2, [pc, #560]	; (8002488 <HAL_UART_MspInit+0x250>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12d      	bne.n	80022b6 <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_UART_MspInit+0x254>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_UART_MspInit+0x254>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_UART_MspInit+0x254>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	637b      	str	r3, [r7, #52]	; 0x34
 800227a:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_UART_MspInit+0x254>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_UART_MspInit+0x254>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_UART_MspInit+0x254>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002292:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022a4:	2307      	movs	r3, #7
 80022a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ac:	4619      	mov	r1, r3
 80022ae:	4878      	ldr	r0, [pc, #480]	; (8002490 <HAL_UART_MspInit+0x258>)
 80022b0:	f00a f804 	bl	800c2bc <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 80022b4:	e12b      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a76      	ldr	r2, [pc, #472]	; (8002494 <HAL_UART_MspInit+0x25c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12c      	bne.n	800231a <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_UART_MspInit+0x254>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	4a70      	ldr	r2, [pc, #448]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ce:	6413      	str	r3, [r2, #64]	; 0x40
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_UART_MspInit+0x254>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_UART_MspInit+0x254>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_UART_MspInit+0x254>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002308:	2307      	movs	r3, #7
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002310:	4619      	mov	r1, r3
 8002312:	4861      	ldr	r0, [pc, #388]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002314:	f009 ffd2 	bl	800c2bc <HAL_GPIO_Init>
}
 8002318:	e0f9      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_UART_MspInit+0x264>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d12d      	bne.n	8002380 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_UART_MspInit+0x254>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_UART_MspInit+0x254>)
 800232e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002332:	6413      	str	r3, [r2, #64]	; 0x40
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_UART_MspInit+0x254>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	4b51      	ldr	r3, [pc, #324]	; (800248c <HAL_UART_MspInit+0x254>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_UART_MspInit+0x254>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6313      	str	r3, [r2, #48]	; 0x30
 8002350:	4b4e      	ldr	r3, [pc, #312]	; (800248c <HAL_UART_MspInit+0x254>)
 8002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800236e:	2307      	movs	r3, #7
 8002370:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002372:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002376:	4619      	mov	r1, r3
 8002378:	4847      	ldr	r0, [pc, #284]	; (8002498 <HAL_UART_MspInit+0x260>)
 800237a:	f009 ff9f 	bl	800c2bc <HAL_GPIO_Init>
}
 800237e:	e0c6      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a46      	ldr	r2, [pc, #280]	; (80024a0 <HAL_UART_MspInit+0x268>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d12d      	bne.n	80023e6 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_UART_MspInit+0x254>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	4a3e      	ldr	r2, [pc, #248]	; (800248c <HAL_UART_MspInit+0x254>)
 8002394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002398:	6413      	str	r3, [r2, #64]	; 0x40
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_UART_MspInit+0x254>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a2:	623b      	str	r3, [r7, #32]
 80023a4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_UART_MspInit+0x254>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_UART_MspInit+0x254>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023d4:	2308      	movs	r3, #8
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023dc:	4619      	mov	r1, r3
 80023de:	4831      	ldr	r0, [pc, #196]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 80023e0:	f009 ff6c 	bl	800c2bc <HAL_GPIO_Init>
}
 80023e4:	e093      	b.n	800250e <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <HAL_UART_MspInit+0x270>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d15d      	bne.n	80024ac <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_UART_MspInit+0x254>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_UART_MspInit+0x254>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_UART_MspInit+0x254>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_UART_MspInit+0x254>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <HAL_UART_MspInit+0x254>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6313      	str	r3, [r2, #48]	; 0x30
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_UART_MspInit+0x254>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <HAL_UART_MspInit+0x254>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_UART_MspInit+0x254>)
 8002432:	f043 0308 	orr.w	r3, r3, #8
 8002436:	6313      	str	r3, [r2, #48]	; 0x30
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_UART_MspInit+0x254>)
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002456:	2308      	movs	r3, #8
 8002458:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800245e:	4619      	mov	r1, r3
 8002460:	4810      	ldr	r0, [pc, #64]	; (80024a4 <HAL_UART_MspInit+0x26c>)
 8002462:	f009 ff2b 	bl	800c2bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002466:	2304      	movs	r3, #4
 8002468:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800246e:	2301      	movs	r3, #1
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002476:	2308      	movs	r3, #8
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_UART_MspInit+0x260>)
 8002482:	f009 ff1b 	bl	800c2bc <HAL_GPIO_Init>
}
 8002486:	e042      	b.n	800250e <HAL_UART_MspInit+0x2d6>
 8002488:	40011000 	.word	0x40011000
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40004400 	.word	0x40004400
 8002498:	40020c00 	.word	0x40020c00
 800249c:	40004800 	.word	0x40004800
 80024a0:	40004c00 	.word	0x40004c00
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a19      	ldr	r2, [pc, #100]	; (8002518 <HAL_UART_MspInit+0x2e0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12b      	bne.n	800250e <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a17      	ldr	r2, [pc, #92]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c0:	f043 0320 	orr.w	r3, r3, #32
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_UART_MspInit+0x2e4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ee:	23c0      	movs	r3, #192	; 0xc0
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024fe:	2308      	movs	r3, #8
 8002500:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <HAL_UART_MspInit+0x2e8>)
 800250a:	f009 fed7 	bl	800c2bc <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3750      	adds	r7, #80	; 0x50
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40011400 	.word	0x40011400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800

08002524 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6a      	ldr	r2, [pc, #424]	; (80026ec <HAL_SPI_MspInit+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d13c      	bne.n	80025c0 <HAL_SPI_MspInit+0x9c>
  {

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	4b69      	ldr	r3, [pc, #420]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	4a68      	ldr	r2, [pc, #416]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002554:	6453      	str	r3, [r2, #68]	; 0x44
 8002556:	4b66      	ldr	r3, [pc, #408]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	623b      	str	r3, [r7, #32]
 8002560:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a61      	ldr	r2, [pc, #388]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800257e:	2320      	movs	r3, #32
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002586:	2301      	movs	r3, #1
 8002588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002596:	4619      	mov	r1, r3
 8002598:	4856      	ldr	r0, [pc, #344]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 800259a:	f009 fe8f 	bl	800c2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800259e:	23c0      	movs	r3, #192	; 0xc0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025a6:	2302      	movs	r3, #2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025aa:	2303      	movs	r3, #3
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ae:	2305      	movs	r3, #5
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b6:	4619      	mov	r1, r3
 80025b8:	484e      	ldr	r0, [pc, #312]	; (80026f4 <HAL_SPI_MspInit+0x1d0>)
 80025ba:	f009 fe7f 	bl	800c2bc <HAL_GPIO_Init>
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


  }

}
 80025be:	e090      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
  }else if (hspi->Instance==SPI2){
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4c      	ldr	r2, [pc, #304]	; (80026f8 <HAL_SPI_MspInit+0x1d4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d13e      	bne.n	8002648 <HAL_SPI_MspInit+0x124>
	  __HAL_RCC_SPI2_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
	  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002614:	2305      	movs	r3, #5
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4837      	ldr	r0, [pc, #220]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002620:	f009 fe4c 	bl	800c2bc <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002624:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262a:	2302      	movs	r3, #2
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800262e:	2302      	movs	r3, #2
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002636:	2305      	movs	r3, #5
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263e:	4619      	mov	r1, r3
 8002640:	482e      	ldr	r0, [pc, #184]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 8002642:	f009 fe3b 	bl	800c2bc <HAL_GPIO_Init>
}
 8002646:	e04c      	b.n	80026e2 <HAL_SPI_MspInit+0x1be>
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	6313      	str	r3, [r2, #48]	; 0x30
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_SPI_MspInit+0x1cc>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002680:	2308      	movs	r3, #8
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002690:	2306      	movs	r3, #6
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4818      	ldr	r0, [pc, #96]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 800269c:	f009 fe0e 	bl	800c2bc <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80026a0:	2310      	movs	r3, #16
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b0:	2306      	movs	r3, #6
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b8:	4619      	mov	r1, r3
 80026ba:	4810      	ldr	r0, [pc, #64]	; (80026fc <HAL_SPI_MspInit+0x1d8>)
 80026bc:	f009 fdfe 	bl	800c2bc <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ca:	2302      	movs	r3, #2
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d2:	2306      	movs	r3, #6
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <HAL_SPI_MspInit+0x1dc>)
 80026de:	f009 fded 	bl	800c2bc <HAL_GPIO_Init>
}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40013000 	.word	0x40013000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40003800 	.word	0x40003800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800

08002704 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	2230      	movs	r2, #48	; 0x30
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f012 fd92 	bl	801523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <SystemClock_Config+0xd0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <SystemClock_Config+0xd0>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <SystemClock_Config+0xd0>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <SystemClock_Config+0xd4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <SystemClock_Config+0xd4>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <SystemClock_Config+0xd4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002760:	2301      	movs	r3, #1
 8002762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276a:	2302      	movs	r3, #2
 800276c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002774:	2308      	movs	r3, #8
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800277e:	2302      	movs	r3, #2
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4618      	mov	r0, r3
 800278c:	f00c f890 	bl	800e8b0 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002796:	f002 ff7d 	bl	8005694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2105      	movs	r1, #5
 80027b8:	4618      	mov	r0, r3
 80027ba:	f00c fae9 	bl	800ed90 <HAL_RCC_ClockConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80027c4:	f002 ff66 	bl	8005694 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80027c8:	f00c fbc8 	bl	800ef5c <HAL_RCC_EnableCSS>
}
 80027cc:	bf00      	nop
 80027ce:	3750      	adds	r7, #80	; 0x50
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000

080027dc <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ec:	f107 030c 	add.w	r3, r7, #12
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a9b      	ldr	r2, [pc, #620]	; (8002a6c <TIMxInit+0x290>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d105      	bne.n	800280e <TIMxInit+0x32>
		htimx->Instance = TIM1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a9a      	ldr	r2, [pc, #616]	; (8002a70 <TIMxInit+0x294>)
 8002806:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8002808:	2319      	movs	r3, #25
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e081      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a98      	ldr	r2, [pc, #608]	; (8002a74 <TIMxInit+0x298>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d106      	bne.n	8002824 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800281c:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 800281e:	231c      	movs	r3, #28
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e076      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a94      	ldr	r2, [pc, #592]	; (8002a78 <TIMxInit+0x29c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d105      	bne.n	8002838 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a93      	ldr	r2, [pc, #588]	; (8002a7c <TIMxInit+0x2a0>)
 8002830:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 8002832:	231d      	movs	r3, #29
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e06c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a91      	ldr	r2, [pc, #580]	; (8002a80 <TIMxInit+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d105      	bne.n	800284c <TIMxInit+0x70>
		htimx->Instance = TIM4;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <TIMxInit+0x2a8>)
 8002844:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 8002846:	231e      	movs	r3, #30
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e062      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a8e      	ldr	r2, [pc, #568]	; (8002a88 <TIMxInit+0x2ac>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d105      	bne.n	8002860 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <TIMxInit+0x2b0>)
 8002858:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800285a:	2332      	movs	r3, #50	; 0x32
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e058      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a8b      	ldr	r2, [pc, #556]	; (8002a90 <TIMxInit+0x2b4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d105      	bne.n	8002874 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a8a      	ldr	r2, [pc, #552]	; (8002a94 <TIMxInit+0x2b8>)
 800286c:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 800286e:	2336      	movs	r3, #54	; 0x36
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e04e      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a88      	ldr	r2, [pc, #544]	; (8002a98 <TIMxInit+0x2bc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d105      	bne.n	8002888 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <TIMxInit+0x2c0>)
 8002880:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8002882:	2337      	movs	r3, #55	; 0x37
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e044      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a85      	ldr	r2, [pc, #532]	; (8002aa0 <TIMxInit+0x2c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d105      	bne.n	800289c <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a84      	ldr	r2, [pc, #528]	; (8002aa4 <TIMxInit+0x2c8>)
 8002894:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8002896:	232e      	movs	r3, #46	; 0x2e
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	e03a      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a82      	ldr	r2, [pc, #520]	; (8002aa8 <TIMxInit+0x2cc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d105      	bne.n	80028b0 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <TIMxInit+0x2d0>)
 80028a8:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 80028aa:	2318      	movs	r3, #24
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e030      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a7f      	ldr	r2, [pc, #508]	; (8002ab0 <TIMxInit+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d105      	bne.n	80028c4 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a7e      	ldr	r2, [pc, #504]	; (8002ab4 <TIMxInit+0x2d8>)
 80028bc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80028be:	2319      	movs	r3, #25
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e026      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <TIMxInit+0x2dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d105      	bne.n	80028d8 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <TIMxInit+0x2e0>)
 80028d0:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 80028d2:	231a      	movs	r3, #26
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	e01c      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a79      	ldr	r2, [pc, #484]	; (8002ac0 <TIMxInit+0x2e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d105      	bne.n	80028ec <TIMxInit+0x110>
		htimx->Instance = TIM12;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <TIMxInit+0x2e8>)
 80028e4:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 80028e6:	232b      	movs	r3, #43	; 0x2b
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e012      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a76      	ldr	r2, [pc, #472]	; (8002ac8 <TIMxInit+0x2ec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d105      	bne.n	8002900 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <TIMxInit+0x2f0>)
 80028f8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 80028fa:	232c      	movs	r3, #44	; 0x2c
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e008      	b.n	8002912 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <TIMxInit+0x2f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d104      	bne.n	8002912 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a72      	ldr	r2, [pc, #456]	; (8002ad4 <TIMxInit+0x2f8>)
 800290c:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 800290e:	232d      	movs	r3, #45	; 0x2d
 8002910:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 8002912:	883a      	ldrh	r2, [r7, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 800291e:	887a      	ldrh	r2, [r7, #2]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f00c ffcc 	bl	800f8c8 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <TIMxInit+0x15e>
	{
		Error_Handler();
 8002936:	f002 fead 	bl	8005694 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f00d fe63 	bl	8010614 <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <TIMxInit+0x17c>
	{
		Error_Handler();
 8002954:	f002 fe9e 	bl	8005694 <Error_Handler>
	}

	if(htimx == &htim1){
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a44      	ldr	r2, [pc, #272]	; (8002a6c <TIMxInit+0x290>)
 800295c:	4293      	cmp	r3, r2
 800295e:	f000 80cb 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <TIMxInit+0x298>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f000 80c6 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a42      	ldr	r2, [pc, #264]	; (8002a78 <TIMxInit+0x29c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	f000 80c1 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <TIMxInit+0x2a4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	f000 80bc 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a41      	ldr	r2, [pc, #260]	; (8002a88 <TIMxInit+0x2ac>)
 8002984:	4293      	cmp	r3, r2
 8002986:	f000 80b7 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <TIMxInit+0x2b4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d10c      	bne.n	80029ac <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	2107      	movs	r1, #7
 800299a:	4618      	mov	r0, r3
 800299c:	f008 fd5a 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	b25b      	sxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f008 fd71 	bl	800b48c <HAL_NVIC_EnableIRQ>
 80029aa:	e0a5      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3a      	ldr	r2, [pc, #232]	; (8002a98 <TIMxInit+0x2bc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d10c      	bne.n	80029ce <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	2200      	movs	r2, #0
 80029ba:	210e      	movs	r1, #14
 80029bc:	4618      	mov	r0, r3
 80029be:	f008 fd49 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f008 fd60 	bl	800b48c <HAL_NVIC_EnableIRQ>
 80029cc:	e094      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <TIMxInit+0x2c4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	f000 8090 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <TIMxInit+0x2cc>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	f000 808b 	beq.w	8002af8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a32      	ldr	r2, [pc, #200]	; (8002ab0 <TIMxInit+0x2d4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	2200      	movs	r2, #0
 80029f0:	210e      	movs	r1, #14
 80029f2:	4618      	mov	r0, r3
 80029f4:	f008 fd2e 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 fd45 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002a02:	e079      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <TIMxInit+0x2dc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10c      	bne.n	8002a26 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	210e      	movs	r1, #14
 8002a14:	4618      	mov	r0, r3
 8002a16:	f008 fd1d 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 fd34 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002a24:	e068      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <TIMxInit+0x2e4>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	210e      	movs	r1, #14
 8002a36:	4618      	mov	r0, r3
 8002a38:	f008 fd0c 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f008 fd23 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002a46:	e057      	b.n	8002af8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIMxInit+0x2ec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d143      	bne.n	8002ad8 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	210e      	movs	r1, #14
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f008 fcfb 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	4618      	mov	r0, r3
 8002a64:	f008 fd12 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002a68:	e046      	b.n	8002af8 <TIMxInit+0x31c>
 8002a6a:	bf00      	nop
 8002a6c:	200067ac 	.word	0x200067ac
 8002a70:	40010000 	.word	0x40010000
 8002a74:	200068b0 	.word	0x200068b0
 8002a78:	20006560 	.word	0x20006560
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	2000639c 	.word	0x2000639c
 8002a84:	40000800 	.word	0x40000800
 8002a88:	20006520 	.word	0x20006520
 8002a8c:	40000c00 	.word	0x40000c00
 8002a90:	2000676c 	.word	0x2000676c
 8002a94:	40001000 	.word	0x40001000
 8002a98:	20006a10 	.word	0x20006a10
 8002a9c:	40001400 	.word	0x40001400
 8002aa0:	2000635c 	.word	0x2000635c
 8002aa4:	40010400 	.word	0x40010400
 8002aa8:	200067ec 	.word	0x200067ec
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	2000647c 	.word	0x2000647c
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	200066c4 	.word	0x200066c4
 8002abc:	40014800 	.word	0x40014800
 8002ac0:	200069d0 	.word	0x200069d0
 8002ac4:	40001800 	.word	0x40001800
 8002ac8:	20006644 	.word	0x20006644
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	20006990 	.word	0x20006990
 8002ad4:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIMxInit+0x330>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d10b      	bne.n	8002af8 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	210e      	movs	r1, #14
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f008 fcb3 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f008 fcca 	bl	800b48c <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00c ff10 	bl	800f91e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f00c ff31 	bl	800f966 <HAL_TIM_Base_Start_IT>

}
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20006990 	.word	0x20006990

08002b10 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <UARTInit+0x1cc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d107      	bne.n	8002b36 <UARTInit+0x26>
		huartx->Instance = USART1;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4a6d      	ldr	r2, [pc, #436]	; (8002ce0 <UARTInit+0x1d0>)
 8002b2a:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 8002b2c:	2325      	movs	r3, #37	; 0x25
 8002b2e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 8002b30:	4b6c      	ldr	r3, [pc, #432]	; (8002ce4 <UARTInit+0x1d4>)
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e036      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart2){
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a6b      	ldr	r2, [pc, #428]	; (8002ce8 <UARTInit+0x1d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d107      	bne.n	8002b4e <UARTInit+0x3e>
		huartx->Instance = USART2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a6a      	ldr	r2, [pc, #424]	; (8002cec <UARTInit+0x1dc>)
 8002b42:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 8002b44:	2326      	movs	r3, #38	; 0x26
 8002b46:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 8002b48:	4b69      	ldr	r3, [pc, #420]	; (8002cf0 <UARTInit+0x1e0>)
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e02a      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart3){
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a68      	ldr	r2, [pc, #416]	; (8002cf4 <UARTInit+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d107      	bne.n	8002b66 <UARTInit+0x56>
		huartx->Instance = USART3;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a67      	ldr	r2, [pc, #412]	; (8002cf8 <UARTInit+0x1e8>)
 8002b5a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 8002b5c:	2327      	movs	r3, #39	; 0x27
 8002b5e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <UARTInit+0x1ec>)
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e01e      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <UARTInit+0x1f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d107      	bne.n	8002b7e <UARTInit+0x6e>
		huartx->Instance = UART4;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a64      	ldr	r2, [pc, #400]	; (8002d04 <UARTInit+0x1f4>)
 8002b72:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8002b74:	2334      	movs	r3, #52	; 0x34
 8002b76:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8002b78:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <UARTInit+0x1f8>)
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e012      	b.n	8002ba4 <UARTInit+0x94>
	}else if(huartx == &huart5){
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a62      	ldr	r2, [pc, #392]	; (8002d0c <UARTInit+0x1fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d107      	bne.n	8002b96 <UARTInit+0x86>
		huartx->Instance = UART5;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4a61      	ldr	r2, [pc, #388]	; (8002d10 <UARTInit+0x200>)
 8002b8a:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 8002b8c:	2335      	movs	r3, #53	; 0x35
 8002b8e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8002b90:	4b60      	ldr	r3, [pc, #384]	; (8002d14 <UARTInit+0x204>)
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	e006      	b.n	8002ba4 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a5f      	ldr	r2, [pc, #380]	; (8002d18 <UARTInit+0x208>)
 8002b9a:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 8002b9c:	2347      	movs	r3, #71	; 0x47
 8002b9e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <UARTInit+0x20c>)
 8002ba2:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f00d fdb0 	bl	8010734 <HAL_UART_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <UARTInit+0xce>
	{
		Error_Handler();
 8002bda:	f002 fd5b 	bl	8005694 <Error_Handler>
	}

	if(rxstate == ENABLE){
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d176      	bne.n	8002cd2 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <UARTInit+0x1d8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d119      	bne.n	8002c20 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f008 fc2d 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f008 fc60 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f008 fc3f 	bl	800b48c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0220 	orr.w	r2, r2, #32
 8002c1c:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 8002c1e:	e058      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <UARTInit+0x1e4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d119      	bne.n	8002c5c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	210e      	movs	r1, #14
 8002c30:	4618      	mov	r0, r3
 8002c32:	f008 fc0f 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f008 fc42 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f008 fc21 	bl	800b48c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	60da      	str	r2, [r3, #12]
}
 8002c5a:	e03a      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <UARTInit+0x1f0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d119      	bne.n	8002c98 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2106      	movs	r1, #6
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f008 fbf1 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f008 fc24 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f008 fc03 	bl	800b48c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	60da      	str	r2, [r3, #12]
}
 8002c96:	e01c      	b.n	8002cd2 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <UARTInit+0x1fc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d118      	bne.n	8002cd2 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	210e      	movs	r1, #14
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 fbd3 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8002cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f008 fc06 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8002cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f008 fbe5 	bl	800b48c <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0220 	orr.w	r2, r2, #32
 8002cd0:	60da      	str	r2, [r3, #12]
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20006684 	.word	0x20006684
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	20006358 	.word	0x20006358
 8002ce8:	200068f0 	.word	0x200068f0
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	20006704 	.word	0x20006704
 8002cf4:	2000643c 	.word	0x2000643c
 8002cf8:	40004800 	.word	0x40004800
 8002cfc:	200065a1 	.word	0x200065a1
 8002d00:	20006870 	.word	0x20006870
 8002d04:	40004c00 	.word	0x40004c00
 8002d08:	2000686c 	.word	0x2000686c
 8002d0c:	200065a4 	.word	0x200065a4
 8002d10:	40005000 	.word	0x40005000
 8002d14:	2000651c 	.word	0x2000651c
 8002d18:	40011400 	.word	0x40011400
 8002d1c:	200065a0 	.word	0x200065a0

08002d20 <UARTx_DMA_Rx_Init>:
 * 						  baudrate				,normally set to 115200 according to UTM ROBOCON UART COMMUNICATION PROTOCOL.
 * Function Return		: None
 * Function Example		: UARTx_DMA_Rx_Init(&huart1, &hdma_usart2_rx, 115200);
 */
void UARTx_DMA_Rx_Init(UART_HandleTypeDef* huartx, DMA_HandleTypeDef* hdma_usart_rx,  uint32_t baudrate)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	4b5a      	ldr	r3, [pc, #360]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <UARTx_DMA_Rx_Init+0x17c>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697b      	ldr	r3, [r7, #20]
	IRQn_Type nvic;
	uint32_t DMA_CHANNEL;

	if(hdma_usart_rx == &hdma_usart2_rx){
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a55      	ldr	r2, [pc, #340]	; (8002ea0 <UARTx_DMA_Rx_Init+0x180>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d119      	bne.n	8002d84 <UARTx_DMA_Rx_Init+0x64>

		nvic = DMA1_Stream5_IRQn;
 8002d50:	2310      	movs	r3, #16
 8002d52:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream5;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a53      	ldr	r2, [pc, #332]	; (8002ea4 <UARTx_DMA_Rx_Init+0x184>)
 8002d58:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5e:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 8002d60:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2105      	movs	r1, #5
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 fb73 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002d6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 fba6 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002d78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f008 fb85 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002d82:	e058      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_usart3_rx){
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a48      	ldr	r2, [pc, #288]	; (8002ea8 <UARTx_DMA_Rx_Init+0x188>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d119      	bne.n	8002dc0 <UARTx_DMA_Rx_Init+0xa0>

		nvic = DMA1_Stream1_IRQn;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream1;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a46      	ldr	r2, [pc, #280]	; (8002eac <UARTx_DMA_Rx_Init+0x18c>)
 8002d94:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9a:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 8002d9c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002da0:	2200      	movs	r2, #0
 8002da2:	210e      	movs	r1, #14
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 fb55 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002daa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f008 fb88 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002db4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f008 fb67 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002dbe:	e03a      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart4_rx){
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <UARTx_DMA_Rx_Init+0x190>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d119      	bne.n	8002dfc <UARTx_DMA_Rx_Init+0xdc>

		nvic = DMA1_Stream2_IRQn;
 8002dc8:	230d      	movs	r3, #13
 8002dca:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream2;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a39      	ldr	r2, [pc, #228]	; (8002eb4 <UARTx_DMA_Rx_Init+0x194>)
 8002dd0:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002dd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dd6:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8002dd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2106      	movs	r1, #6
 8002de0:	4618      	mov	r0, r3
 8002de2:	f008 fb37 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002de6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f008 fb6a 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002df0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f008 fb49 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8002dfa:	e01c      	b.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

	}else if(hdma_usart_rx == &hdma_uart5_rx){
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <UARTx_DMA_Rx_Init+0x198>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d118      	bne.n	8002e36 <UARTx_DMA_Rx_Init+0x116>

		nvic = DMA1_Stream0_IRQn;
 8002e04:	230b      	movs	r3, #11
 8002e06:	76fb      	strb	r3, [r7, #27]
		hdma_usart_rx->Instance = DMA1_Stream0;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	; (8002ebc <UARTx_DMA_Rx_Init+0x19c>)
 8002e0c:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL = DMA_CHANNEL_4;
 8002e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e12:	61fb      	str	r3, [r7, #28]
		HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8002e14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	210e      	movs	r1, #14
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f008 fb19 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8002e22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f008 fb4c 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8002e2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f008 fb2b 	bl	800b48c <HAL_NVIC_EnableIRQ>

	}

	UARTInit(huartx, baudrate, DISABLE);
 8002e36:	2200      	movs	r2, #0
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f7ff fe68 	bl	8002b10 <UARTInit>

	hdma_usart_rx->Init.Channel = DMA_CHANNEL;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	605a      	str	r2, [r3, #4]
	hdma_usart_rx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
	hdma_usart_rx->Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
	hdma_usart_rx->Init.MemInc = DMA_MINC_ENABLE;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e58:	611a      	str	r2, [r3, #16]
	hdma_usart_rx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
	hdma_usart_rx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
	hdma_usart_rx->Init.Mode = DMA_NORMAL;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
	hdma_usart_rx->Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	621a      	str	r2, [r3, #32]
	hdma_usart_rx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_DMA_Init(hdma_usart_rx) != HAL_OK)
 8002e78:	68b8      	ldr	r0, [r7, #8]
 8002e7a:	f008 fb31 	bl	800b4e0 <HAL_DMA_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <UARTx_DMA_Rx_Init+0x168>
	{
		Error_Handler();
 8002e84:	f002 fc06 	bl	8005694 <Error_Handler>
	}

	__HAL_LINKDMA(huartx,hdmarx, *hdma_usart_rx);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	200062f8 	.word	0x200062f8
 8002ea4:	40026088 	.word	0x40026088
 8002ea8:	200063dc 	.word	0x200063dc
 8002eac:	40026028 	.word	0x40026028
 8002eb0:	20006298 	.word	0x20006298
 8002eb4:	40026040 	.word	0x40026040
 8002eb8:	20006930 	.word	0x20006930
 8002ebc:	40026010 	.word	0x40026010

08002ec0 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <USART1_IRQHandler+0x10>)
 8002ec6:	f00d fd9b 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20006684 	.word	0x20006684

08002ed4 <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <USART2_IRQHandler+0x10>)
 8002eda:	f00d fd91 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200068f0 	.word	0x200068f0

08002ee8 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <USART3_IRQHandler+0x10>)
 8002eee:	f00d fd87 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000643c 	.word	0x2000643c

08002efc <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8002f00:	4802      	ldr	r0, [pc, #8]	; (8002f0c <UART4_IRQHandler+0x10>)
 8002f02:	f00d fd7d 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20006870 	.word	0x20006870

08002f10 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 8002f14:	4802      	ldr	r0, [pc, #8]	; (8002f20 <UART5_IRQHandler+0x10>)
 8002f16:	f00d fd73 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200065a4 	.word	0x200065a4

08002f24 <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <USART6_IRQHandler+0x10>)
 8002f2a:	f00d fd69 	bl	8010a00 <HAL_UART_IRQHandler>
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000682c 	.word	0x2000682c

08002f38 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08e      	sub	sp, #56	; 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2228      	movs	r2, #40	; 0x28
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f012 f971 	bl	801523c <memset>

	if(hcanx == &hcan1){
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a53      	ldr	r2, [pc, #332]	; (80030ac <CANxInit+0x174>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d103      	bne.n	8002f6a <CANxInit+0x32>
		hcanx->Instance = CAN1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <CANxInit+0x178>)
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e002      	b.n	8002f70 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <CANxInit+0x17c>)
 8002f6e:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 8002f70:	897a      	ldrh	r2, [r7, #10]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 8002f82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8002f90:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f98:	615a      	str	r2, [r3, #20]
 8002f9a:	e00b      	b.n	8002fb4 <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 8002f9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8002faa:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8002fb2:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f007 fab3 	bl	800a544 <HAL_CAN_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <CANxInit+0xb0>
	{
		Error_Handler();
 8002fe4:	f002 fb56 	bl	8005694 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8002fe8:	230e      	movs	r3, #14
 8002fea:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8002fec:	2301      	movs	r3, #1
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 8003002:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003006:	015b      	lsls	r3, r3, #5
 8003008:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 800300e:	2301      	movs	r3, #1
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003012:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4619      	mov	r1, r3
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f007 fb8c 	bl	800a73c <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a21      	ldr	r2, [pc, #132]	; (80030ac <CANxInit+0x174>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d11c      	bne.n	8003066 <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	210e      	movs	r1, #14
 8003036:	2014      	movs	r0, #20
 8003038:	f008 fa0c 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800303c:	2014      	movs	r0, #20
 800303e:	f008 fa25 	bl	800b48c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003042:	2102      	movs	r1, #2
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f007 febf 	bl	800adc8 <HAL_CAN_ActivateNotification>
 800304a:	e028      	b.n	800309e <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	210e      	movs	r1, #14
 8003050:	2015      	movs	r0, #21
 8003052:	f008 f9ff 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003056:	2015      	movs	r0, #21
 8003058:	f008 fa18 	bl	800b48c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 800305c:	2110      	movs	r1, #16
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f007 feb2 	bl	800adc8 <HAL_CAN_ActivateNotification>
 8003064:	e01b      	b.n	800309e <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10c      	bne.n	8003086 <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 800306c:	2200      	movs	r2, #0
 800306e:	210e      	movs	r1, #14
 8003070:	2040      	movs	r0, #64	; 0x40
 8003072:	f008 f9ef 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003076:	2040      	movs	r0, #64	; 0x40
 8003078:	f008 fa08 	bl	800b48c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 800307c:	2102      	movs	r1, #2
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f007 fea2 	bl	800adc8 <HAL_CAN_ActivateNotification>
 8003084:	e00b      	b.n	800309e <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	210e      	movs	r1, #14
 800308a:	2041      	movs	r0, #65	; 0x41
 800308c:	f008 f9e2 	bl	800b454 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003090:	2041      	movs	r0, #65	; 0x41
 8003092:	f008 f9fb 	bl	800b48c <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003096:	2110      	movs	r1, #16
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f007 fe95 	bl	800adc8 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f007 fc2c 	bl	800a8fc <HAL_CAN_Start>

}
 80030a4:	bf00      	nop
 80030a6:	3738      	adds	r7, #56	; 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20006d74 	.word	0x20006d74
 80030b0:	40006400 	.word	0x40006400
 80030b4:	40006800 	.word	0x40006800

080030b8 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b090      	sub	sp, #64	; 0x40
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 80030c6:	bf00      	nop
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f007 fd36 	bl	800ab3a <HAL_CAN_GetTxMailboxesFreeLevel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f9      	beq.n	80030c8 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 80030d8:	2300      	movs	r3, #0
 80030da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 80030f6:	e00c      	b.n	8003112 <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 80030f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003100:	1c51      	adds	r1, r2, #1
 8003102:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003104:	4611      	mov	r1, r2
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800310c:	440b      	add	r3, r1
 800310e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003112:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	873a      	strh	r2, [r7, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ed      	bne.n	80030f8 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 800311c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00f      	beq.n	8003142 <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 8003122:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003126:	f107 031c 	add.w	r3, r7, #28
 800312a:	f107 0214 	add.w	r2, r7, #20
 800312e:	f107 0120 	add.w	r1, r7, #32
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f007 fc26 	bl	800a984 <HAL_CAN_AddTxMessage>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <CAN_TxMsg+0x8a>
			Error_Handler();
 800313e:	f002 faa9 	bl	8005694 <Error_Handler>
		}

	}

	return(canMailbox);
 8003142:	69fb      	ldr	r3, [r7, #28]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3740      	adds	r7, #64	; 0x40
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <CAN_TxMsgEID>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsgEID(CAN_HandleTypeDef* hcanx,uint32_t EID,uint8_t *Msg,uint8_t len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b090      	sub	sp, #64	; 0x40
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 800315a:	bf00      	nop
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f007 fcec 	bl	800ab3a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f9      	beq.n	800315c <CAN_TxMsgEID+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 800316c:	2300      	movs	r3, #0
 800316e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=0;					 // standard identifier=0
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=EID;					 // extended identifier=StdId
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Extended;			 // type of identifier for the message is Standard
 800317c:	2304      	movs	r3, #4
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 800318a:	e01f      	b.n	80031cc <CAN_TxMsgEID+0x80>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003192:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003194:	1c51      	adds	r1, r2, #1
 8003196:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003198:	4611      	mov	r1, r2
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031a0:	440b      	add	r3, r1
 80031a2:	f803 2c2c 	strb.w	r2, [r3, #-44]
		if(i == 8){
 80031a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d10f      	bne.n	80031cc <CAN_TxMsgEID+0x80>
			TxMessage.DLC=8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	f107 0214 	add.w	r2, r7, #20
 80031b8:	f107 0120 	add.w	r1, r7, #32
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f007 fbe1 	bl	800a984 <HAL_CAN_AddTxMessage>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <CAN_TxMsgEID+0x80>
				Error_Handler();
 80031c8:	f002 fa64 	bl	8005694 <Error_Handler>
	while(datalen--)
 80031cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031ce:	1e5a      	subs	r2, r3, #1
 80031d0:	873a      	strh	r2, [r7, #56]	; 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1da      	bne.n	800318c <CAN_TxMsgEID+0x40>
			}
		}
	}
	if(i>0){
 80031d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00f      	beq.n	80031fc <CAN_TxMsgEID+0xb0>
		TxMessage.DLC = i;
 80031dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	f107 0214 	add.w	r2, r7, #20
 80031e8:	f107 0120 	add.w	r1, r7, #32
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f007 fbc9 	bl	800a984 <HAL_CAN_AddTxMessage>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <CAN_TxMsgEID+0xb0>
			Error_Handler();
 80031f8:	f002 fa4c 	bl	8005694 <Error_Handler>
		}

	}

	return(canMailbox);
 80031fc:	69fb      	ldr	r3, [r7, #28]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3740      	adds	r7, #64	; 0x40
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <GetSector>:
/*********************************************/
/*           Subroutine Function             */
/*********************************************/

uint32_t GetSector(uint32_t Address)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  static uint32_t sector = 0;

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <GetSector+0xd8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d807      	bhi.n	8003228 <GetSector+0x20>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321e:	d303      	bcc.n	8003228 <GetSector+0x20>
  {
    sector = FLASH_SECTOR_0;
 8003220:	4b30      	ldr	r3, [pc, #192]	; (80032e4 <GetSector+0xdc>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e052      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <GetSector+0xe0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d807      	bhi.n	8003240 <GetSector+0x38>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <GetSector+0xe4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d303      	bcc.n	8003240 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <GetSector+0xdc>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	e046      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <GetSector+0xe8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d807      	bhi.n	8003258 <GetSector+0x50>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <GetSector+0xec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d303      	bcc.n	8003258 <GetSector+0x50>
  {
    sector = FLASH_SECTOR_2;
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <GetSector+0xdc>)
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e03a      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <GetSector+0xf0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d207      	bcs.n	8003270 <GetSector+0x68>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a26      	ldr	r2, [pc, #152]	; (80032fc <GetSector+0xf4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d303      	bcc.n	8003270 <GetSector+0x68>
  {
    sector = FLASH_SECTOR_3;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <GetSector+0xdc>)
 800326a:	2203      	movs	r2, #3
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e02e      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <GetSector+0xf8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d207      	bcs.n	8003288 <GetSector+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <GetSector+0xf0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d903      	bls.n	8003288 <GetSector+0x80>
  {
    sector = FLASH_SECTOR_4;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <GetSector+0xdc>)
 8003282:	2204      	movs	r2, #4
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e022      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <GetSector+0xfc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d207      	bcs.n	80032a0 <GetSector+0x98>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <GetSector+0xf8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d903      	bls.n	80032a0 <GetSector+0x98>
  {
    sector = FLASH_SECTOR_5;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <GetSector+0xdc>)
 800329a:	2205      	movs	r2, #5
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e016      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a19      	ldr	r2, [pc, #100]	; (8003308 <GetSector+0x100>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d207      	bcs.n	80032b8 <GetSector+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a16      	ldr	r2, [pc, #88]	; (8003304 <GetSector+0xfc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d903      	bls.n	80032b8 <GetSector+0xb0>
  {
    sector = FLASH_SECTOR_6;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <GetSector+0xdc>)
 80032b2:	2206      	movs	r2, #6
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e00a      	b.n	80032ce <GetSector+0xc6>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <GetSector+0x104>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d206      	bcs.n	80032ce <GetSector+0xc6>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a11      	ldr	r2, [pc, #68]	; (8003308 <GetSector+0x100>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d902      	bls.n	80032ce <GetSector+0xc6>
  {
    sector = FLASH_SECTOR_7;
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <GetSector+0xdc>)
 80032ca:	2207      	movs	r2, #7
 80032cc:	601a      	str	r2, [r3, #0]
  }
  return sector;
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <GetSector+0xdc>)
 80032d0:	681b      	ldr	r3, [r3, #0]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	08003ffe 	.word	0x08003ffe
 80032e4:	20000620 	.word	0x20000620
 80032e8:	08007ffe 	.word	0x08007ffe
 80032ec:	08004000 	.word	0x08004000
 80032f0:	0800bffe 	.word	0x0800bffe
 80032f4:	08008000 	.word	0x08008000
 80032f8:	0800ffff 	.word	0x0800ffff
 80032fc:	0800c000 	.word	0x0800c000
 8003300:	0801ffff 	.word	0x0801ffff
 8003304:	0803ffff 	.word	0x0803ffff
 8003308:	0805ffff 	.word	0x0805ffff
 800330c:	0807ffff 	.word	0x0807ffff

08003310 <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	4b9e      	ldr	r3, [pc, #632]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a9d      	ldr	r2, [pc, #628]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 800332a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b9b      	ldr	r3, [pc, #620]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a99      	ldr	r2, [pc, #612]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d11d      	bne.n	8003380 <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a98      	ldr	r2, [pc, #608]	; (80035a8 <I2CX_DMA_RX_Init+0x298>)
 8003348:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a97      	ldr	r2, [pc, #604]	; (80035ac <I2CX_DMA_RX_Init+0x29c>)
 800334e:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003350:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003354:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003356:	230b      	movs	r3, #11
 8003358:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 800335a:	2320      	movs	r3, #32
 800335c:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 800335e:	231f      	movs	r3, #31
 8003360:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a8d      	ldr	r2, [pc, #564]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 800336c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <I2CX_DMA_RX_Init+0x290>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	e022      	b.n	80033c6 <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a8b      	ldr	r2, [pc, #556]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10f      	bne.n	80033a8 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a8a      	ldr	r2, [pc, #552]	; (80035b4 <I2CX_DMA_RX_Init+0x2a4>)
 800338c:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a89      	ldr	r2, [pc, #548]	; (80035b8 <I2CX_DMA_RX_Init+0x2a8>)
 8003392:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003394:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003398:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 800339a:	230e      	movs	r3, #14
 800339c:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 800339e:	2322      	movs	r3, #34	; 0x22
 80033a0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 80033a2:	2321      	movs	r3, #33	; 0x21
 80033a4:	777b      	strb	r3, [r7, #29]
 80033a6:	e00e      	b.n	80033c6 <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a84      	ldr	r2, [pc, #528]	; (80035bc <I2CX_DMA_RX_Init+0x2ac>)
 80033ac:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <I2CX_DMA_RX_Init+0x2b0>)
 80033b2:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 80033b4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80033b8:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 80033ba:	230d      	movs	r3, #13
 80033bc:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 80033be:	2349      	movs	r3, #73	; 0x49
 80033c0:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 80033c2:	2348      	movs	r3, #72	; 0x48
 80033c4:	777b      	strb	r3, [r7, #29]
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e2:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a69      	ldr	r2, [pc, #420]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d118      	bne.n	8003436 <I2CX_DMA_RX_Init+0x126>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003404:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003408:	2200      	movs	r2, #0
 800340a:	2100      	movs	r1, #0
 800340c:	4618      	mov	r0, r3
 800340e:	f008 f821 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003412:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003416:	4618      	mov	r0, r3
 8003418:	f008 f838 	bl	800b48c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 800341c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003420:	2200      	movs	r2, #0
 8003422:	2108      	movs	r1, #8
 8003424:	4618      	mov	r0, r3
 8003426:	f008 f815 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 800342a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800342e:	4618      	mov	r0, r3
 8003430:	f008 f82c 	bl	800b48c <HAL_NVIC_EnableIRQ>
 8003434:	e034      	b.n	80034a0 <I2CX_DMA_RX_Init+0x190>
	}else if(hi2cx == &hi2c2){
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a5d      	ldr	r2, [pc, #372]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d118      	bne.n	8003470 <I2CX_DMA_RX_Init+0x160>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 800343e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003442:	2200      	movs	r2, #0
 8003444:	210e      	movs	r1, #14
 8003446:	4618      	mov	r0, r3
 8003448:	f008 f804 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800344c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003450:	4618      	mov	r0, r3
 8003452:	f008 f81b 	bl	800b48c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003456:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800345a:	2200      	movs	r2, #0
 800345c:	210e      	movs	r1, #14
 800345e:	4618      	mov	r0, r3
 8003460:	f007 fff8 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003464:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003468:	4618      	mov	r0, r3
 800346a:	f008 f80f 	bl	800b48c <HAL_NVIC_EnableIRQ>
 800346e:	e017      	b.n	80034a0 <I2CX_DMA_RX_Init+0x190>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003470:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003474:	2200      	movs	r2, #0
 8003476:	210e      	movs	r1, #14
 8003478:	4618      	mov	r0, r3
 800347a:	f007 ffeb 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 800347e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003482:	4618      	mov	r0, r3
 8003484:	f008 f802 	bl	800b48c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003488:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800348c:	2200      	movs	r2, #0
 800348e:	210e      	movs	r1, #14
 8003490:	4618      	mov	r0, r3
 8003492:	f007 ffdf 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003496:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800349a:	4618      	mov	r0, r3
 800349c:	f007 fff6 	bl	800b48c <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f009 f9bd 	bl	800c820 <HAL_I2C_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <I2CX_DMA_RX_Init+0x1a0>
	{

		Error_Handler();
 80034ac:	f002 f8f2 	bl	8005694 <Error_Handler>
	}


	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c8:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e2:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2203      	movs	r2, #3
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003500:	68b8      	ldr	r0, [r7, #8]
 8003502:	f007 ffed 	bl	800b4e0 <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <I2CX_DMA_RX_Init+0x200>
	{

		Error_Handler();
 800350c:	f002 f8c2 	bl	8005694 <Error_Handler>

	}


	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <I2CX_DMA_RX_Init+0x294>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d111      	bne.n	8003548 <I2CX_DMA_RX_Init+0x238>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003524:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003528:	2200      	movs	r2, #0
 800352a:	210a      	movs	r1, #10
 800352c:	4618      	mov	r0, r3
 800352e:	f007 ff91 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003532:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003536:	4618      	mov	r0, r3
 8003538:	f007 ffc4 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800353c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003540:	4618      	mov	r0, r3
 8003542:	f007 ffa3 	bl	800b48c <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
		HAL_NVIC_ClearPendingIRQ(nvic);
		HAL_NVIC_EnableIRQ(nvic);
	}

}
 8003546:	e026      	b.n	8003596 <I2CX_DMA_RX_Init+0x286>
	}else if(hi2cx == &hi2c2){
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <I2CX_DMA_RX_Init+0x2a0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <I2CX_DMA_RX_Init+0x264>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003554:	2200      	movs	r2, #0
 8003556:	210e      	movs	r1, #14
 8003558:	4618      	mov	r0, r3
 800355a:	f007 ff7b 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 800355e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003562:	4618      	mov	r0, r3
 8003564:	f007 ffae 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800356c:	4618      	mov	r0, r3
 800356e:	f007 ff8d 	bl	800b48c <HAL_NVIC_EnableIRQ>
}
 8003572:	e010      	b.n	8003596 <I2CX_DMA_RX_Init+0x286>
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003574:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003578:	2200      	movs	r2, #0
 800357a:	210e      	movs	r1, #14
 800357c:	4618      	mov	r0, r3
 800357e:	f007 ff69 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003586:	4618      	mov	r0, r3
 8003588:	f007 ff9c 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 800358c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003590:	4618      	mov	r0, r3
 8003592:	f007 ff7b 	bl	800b48c <HAL_NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	20007328 	.word	0x20007328
 80035a8:	40005400 	.word	0x40005400
 80035ac:	40026010 	.word	0x40026010
 80035b0:	2000737c 	.word	0x2000737c
 80035b4:	40005800 	.word	0x40005800
 80035b8:	40026058 	.word	0x40026058
 80035bc:	40005c00 	.word	0x40005c00
 80035c0:	40026040 	.word	0x40026040

080035c4 <I2C1_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_EV_IRQHandler(void){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0

	HAL_I2C_EV_IRQHandler(&hi2c1);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <I2C1_EV_IRQHandler+0x10>)
 80035ca:	f009 fbb3 	bl	800cd34 <HAL_I2C_EV_IRQHandler>

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20007328 	.word	0x20007328

080035d8 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <I2C2_EV_IRQHandler+0x10>)
 80035de:	f009 fba9 	bl	800cd34 <HAL_I2C_EV_IRQHandler>


}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000737c 	.word	0x2000737c

080035ec <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <I2C2_ER_IRQHandler+0x10>)
 80035f2:	f009 fd0c 	bl	800d00e <HAL_I2C_ER_IRQHandler>


}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	2000737c 	.word	0x2000737c

08003600 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <I2C3_EV_IRQHandler+0x10>)
 8003606:	f009 fb95 	bl	800cd34 <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20007038 	.word	0x20007038

08003614 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef led_spi;

void ILI9341_Init() {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
//	ILI9341_SPI_Init();

	/* Reset The Screen */
	ILI9341_Reset();
 8003618:	f000 f910 	bl	800383c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 800361c:	2001      	movs	r0, #1
 800361e:	f000 fa35 	bl	8003a8c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8003622:	20cb      	movs	r0, #203	; 0xcb
 8003624:	f000 fa32 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8003628:	2039      	movs	r0, #57	; 0x39
 800362a:	f000 fa3e 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800362e:	202c      	movs	r0, #44	; 0x2c
 8003630:	f000 fa3b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f000 fa38 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800363a:	2034      	movs	r0, #52	; 0x34
 800363c:	f000 fa35 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8003640:	2002      	movs	r0, #2
 8003642:	f000 fa32 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8003646:	20cf      	movs	r0, #207	; 0xcf
 8003648:	f000 fa20 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800364c:	2000      	movs	r0, #0
 800364e:	f000 fa2c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8003652:	20c1      	movs	r0, #193	; 0xc1
 8003654:	f000 fa29 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8003658:	2030      	movs	r0, #48	; 0x30
 800365a:	f000 fa26 	bl	8003aaa <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800365e:	20e8      	movs	r0, #232	; 0xe8
 8003660:	f000 fa14 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8003664:	2085      	movs	r0, #133	; 0x85
 8003666:	f000 fa20 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800366a:	2000      	movs	r0, #0
 800366c:	f000 fa1d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8003670:	2078      	movs	r0, #120	; 0x78
 8003672:	f000 fa1a 	bl	8003aaa <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8003676:	20ea      	movs	r0, #234	; 0xea
 8003678:	f000 fa08 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f000 fa14 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f000 fa11 	bl	8003aaa <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8003688:	20ed      	movs	r0, #237	; 0xed
 800368a:	f000 f9ff 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800368e:	2064      	movs	r0, #100	; 0x64
 8003690:	f000 fa0b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8003694:	2003      	movs	r0, #3
 8003696:	f000 fa08 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800369a:	2012      	movs	r0, #18
 800369c:	f000 fa05 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80036a0:	2081      	movs	r0, #129	; 0x81
 80036a2:	f000 fa02 	bl	8003aaa <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80036a6:	20f7      	movs	r0, #247	; 0xf7
 80036a8:	f000 f9f0 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80036ac:	2020      	movs	r0, #32
 80036ae:	f000 f9fc 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80036b2:	20c0      	movs	r0, #192	; 0xc0
 80036b4:	f000 f9ea 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80036b8:	2010      	movs	r0, #16
 80036ba:	f000 f9f6 	bl	8003aaa <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80036be:	20c1      	movs	r0, #193	; 0xc1
 80036c0:	f000 f9e4 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80036c4:	2010      	movs	r0, #16
 80036c6:	f000 f9f0 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80036ca:	20c5      	movs	r0, #197	; 0xc5
 80036cc:	f000 f9de 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80036d0:	203e      	movs	r0, #62	; 0x3e
 80036d2:	f000 f9ea 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80036d6:	2028      	movs	r0, #40	; 0x28
 80036d8:	f000 f9e7 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80036dc:	20c7      	movs	r0, #199	; 0xc7
 80036de:	f000 f9d5 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80036e2:	2086      	movs	r0, #134	; 0x86
 80036e4:	f000 f9e1 	bl	8003aaa <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80036e8:	2036      	movs	r0, #54	; 0x36
 80036ea:	f000 f9cf 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 80036ee:	2048      	movs	r0, #72	; 0x48
 80036f0:	f000 f9db 	bl	8003aaa <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 80036f4:	203a      	movs	r0, #58	; 0x3a
 80036f6:	f000 f9c9 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80036fa:	2055      	movs	r0, #85	; 0x55
 80036fc:	f000 f9d5 	bl	8003aaa <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8003700:	20b1      	movs	r0, #177	; 0xb1
 8003702:	f000 f9c3 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003706:	2000      	movs	r0, #0
 8003708:	f000 f9cf 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 800370c:	2018      	movs	r0, #24
 800370e:	f000 f9cc 	bl	8003aaa <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8003712:	20b6      	movs	r0, #182	; 0xb6
 8003714:	f000 f9ba 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8003718:	2008      	movs	r0, #8
 800371a:	f000 f9c6 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 800371e:	2082      	movs	r0, #130	; 0x82
 8003720:	f000 f9c3 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8003724:	2027      	movs	r0, #39	; 0x27
 8003726:	f000 f9c0 	bl	8003aaa <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800372a:	20f2      	movs	r0, #242	; 0xf2
 800372c:	f000 f9ae 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f000 f9ba 	bl	8003aaa <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8003736:	2026      	movs	r0, #38	; 0x26
 8003738:	f000 f9a8 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 800373c:	2001      	movs	r0, #1
 800373e:	f000 f9b4 	bl	8003aaa <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8003742:	20e0      	movs	r0, #224	; 0xe0
 8003744:	f000 f9a2 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8003748:	200f      	movs	r0, #15
 800374a:	f000 f9ae 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800374e:	2031      	movs	r0, #49	; 0x31
 8003750:	f000 f9ab 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8003754:	202b      	movs	r0, #43	; 0x2b
 8003756:	f000 f9a8 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800375a:	200c      	movs	r0, #12
 800375c:	f000 f9a5 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003760:	200e      	movs	r0, #14
 8003762:	f000 f9a2 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8003766:	2008      	movs	r0, #8
 8003768:	f000 f99f 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 800376c:	204e      	movs	r0, #78	; 0x4e
 800376e:	f000 f99c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8003772:	20f1      	movs	r0, #241	; 0xf1
 8003774:	f000 f999 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8003778:	2037      	movs	r0, #55	; 0x37
 800377a:	f000 f996 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800377e:	2007      	movs	r0, #7
 8003780:	f000 f993 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8003784:	2010      	movs	r0, #16
 8003786:	f000 f990 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800378a:	2003      	movs	r0, #3
 800378c:	f000 f98d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8003790:	200e      	movs	r0, #14
 8003792:	f000 f98a 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8003796:	2009      	movs	r0, #9
 8003798:	f000 f987 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f000 f984 	bl	8003aaa <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80037a2:	20e1      	movs	r0, #225	; 0xe1
 80037a4:	f000 f972 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f000 f97e 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80037ae:	200e      	movs	r0, #14
 80037b0:	f000 f97b 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80037b4:	2014      	movs	r0, #20
 80037b6:	f000 f978 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80037ba:	2003      	movs	r0, #3
 80037bc:	f000 f975 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80037c0:	2011      	movs	r0, #17
 80037c2:	f000 f972 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80037c6:	2007      	movs	r0, #7
 80037c8:	f000 f96f 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80037cc:	2031      	movs	r0, #49	; 0x31
 80037ce:	f000 f96c 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80037d2:	20c1      	movs	r0, #193	; 0xc1
 80037d4:	f000 f969 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80037d8:	2048      	movs	r0, #72	; 0x48
 80037da:	f000 f966 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80037de:	2008      	movs	r0, #8
 80037e0:	f000 f963 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80037e4:	200f      	movs	r0, #15
 80037e6:	f000 f960 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80037ea:	200c      	movs	r0, #12
 80037ec:	f000 f95d 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80037f0:	2031      	movs	r0, #49	; 0x31
 80037f2:	f000 f95a 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80037f6:	2036      	movs	r0, #54	; 0x36
 80037f8:	f000 f957 	bl	8003aaa <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80037fc:	200f      	movs	r0, #15
 80037fe:	f000 f954 	bl	8003aaa <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8003802:	2011      	movs	r0, #17
 8003804:	f000 f942 	bl	8003a8c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8003808:	2029      	movs	r0, #41	; 0x29
 800380a:	f000 f93f 	bl	8003a8c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	f000 f94b 	bl	8003aaa <ILI9341_Send_Data>
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <ILI9341_SPI_Send>:
		Error_Handler();
	}
}

void ILI9341_SPI_Send(unsigned char data)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
 8003822:	1df9      	adds	r1, r7, #7
 8003824:	2301      	movs	r3, #1
 8003826:	2201      	movs	r2, #1
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <ILI9341_SPI_Send+0x20>)
 800382a:	f00b fd4f 	bl	800f2cc <HAL_SPI_Transmit>
//	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20008224 	.word	0x20008224

0800383c <ILI9341_Reset>:
{
	HAL_SPI_Transmit(&hspi1, &data, size, 10);
//	HAL_SPI_Transmit_DMA(&hspi1, &data, size);
}

void ILI9341_Reset() {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	RESET_ON;
 8003840:	2200      	movs	r2, #0
 8003842:	2110      	movs	r1, #16
 8003844:	4809      	ldr	r0, [pc, #36]	; (800386c <ILI9341_Reset+0x30>)
 8003846:	f008 ffd1 	bl	800c7ec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800384a:	2032      	movs	r0, #50	; 0x32
 800384c:	f006 fe56 	bl	800a4fc <HAL_Delay>
	RESET_OFF;
 8003850:	2201      	movs	r2, #1
 8003852:	2110      	movs	r1, #16
 8003854:	4805      	ldr	r0, [pc, #20]	; (800386c <ILI9341_Reset+0x30>)
 8003856:	f008 ffc9 	bl	800c7ec <HAL_GPIO_WritePin>
	//CS_ON;
	HAL_Delay(50);
 800385a:	2032      	movs	r0, #50	; 0x32
 800385c:	f006 fe4e 	bl	800a4fc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8003860:	2001      	movs	r0, #1
 8003862:	f000 f913 	bl	8003a8c <ILI9341_Send_Command>
	//CS_OFF;
}
 8003866:	bf00      	nop
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020000 	.word	0x40020000

08003870 <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
	//CS_ON;
	DC_COMMAND;
 800387c:	2200      	movs	r2, #0
 800387e:	2140      	movs	r1, #64	; 0x40
 8003880:	4813      	ldr	r0, [pc, #76]	; (80038d0 <ILI9341_SPI_Send_32+0x60>)
 8003882:	f008 ffb3 	bl	800c7ec <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ffc5 	bl	8003818 <ILI9341_SPI_Send>

	DC_DATA;
 800388e:	2201      	movs	r2, #1
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	480f      	ldr	r0, [pc, #60]	; (80038d0 <ILI9341_SPI_Send_32+0x60>)
 8003894:	f008 ffaa 	bl	800c7ec <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	0e1b      	lsrs	r3, r3, #24
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ffba 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff ffb4 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ffae 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff ffa9 	bl	8003818 <ILI9341_SPI_Send>

}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020000 	.word	0x40020000

080038d4 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	617b      	str	r3, [r7, #20]
	t |= x2;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	202a      	movs	r0, #42	; 0x2a
 80038f8:	f7ff ffba 	bl	8003870 <ILI9341_SPI_Send_32>
	t = y1;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	617b      	str	r3, [r7, #20]
	t |= y2;
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800390e:	6979      	ldr	r1, [r7, #20]
 8003910:	202b      	movs	r0, #43	; 0x2b
 8003912:	f7ff ffad 	bl	8003870 <ILI9341_SPI_Send_32>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8003928:	4b0d      	ldr	r3, [pc, #52]	; (8003960 <ILI9341_Fill_Screen+0x40>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <ILI9341_Fill_Screen+0x44>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	2100      	movs	r1, #0
 8003936:	2000      	movs	r0, #0
 8003938:	f7ff ffcc 	bl	80038d4 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4a07      	ldr	r2, [pc, #28]	; (8003960 <ILI9341_Fill_Screen+0x40>)
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	4611      	mov	r1, r2
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <ILI9341_Fill_Screen+0x44>)
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	fb02 f201 	mul.w	r2, r2, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f000 f8b9 	bl	8003ac8 <ILI9341_Send_Burst>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000
 8003964:	20000004 	.word	0x20000004

08003968 <ILI9341_Draw_Filled_Rectangle>:
	ILI9341_SPI_Send(color>>8);
	ILI9341_SPI_Send(color);
}

void ILI9341_Draw_Filled_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
	ILI9341_Set_Address(x1, y1, x2, y2);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68b8      	ldr	r0, [r7, #8]
 800397e:	f7ff ffa9 	bl	80038d4 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	b298      	uxth	r0, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	3301      	adds	r3, #1
 800398e:	4619      	mov	r1, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	3301      	adds	r3, #1
 8003998:	fb03 f301 	mul.w	r3, r3, r1
 800399c:	4619      	mov	r1, r3
 800399e:	f000 f893 	bl	8003ac8 <ILI9341_Send_Burst>
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <ILI9341_Draw_String>:
		}
	}
}

void ILI9341_Draw_String(unsigned int x, unsigned int y, unsigned int color, unsigned int phone, char *str, unsigned char size)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
	switch (size)
 80039ba:	7f3b      	ldrb	r3, [r7, #28]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d028      	beq.n	8003a12 <ILI9341_Draw_String+0x66>
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d02b      	beq.n	8003a1c <ILI9341_Draw_String+0x70>
			x += hh*8;
			str++;
		}
	break;
	}
}
 80039c4:	e059      	b.n	8003a7a <ILI9341_Draw_String+0xce>
			if ((x+(size*8))>X_SIZE)
 80039c6:	7f3b      	ldrb	r3, [r7, #28]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	441a      	add	r2, r3
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <ILI9341_Draw_String+0xd8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d907      	bls.n	80039e8 <ILI9341_Draw_String+0x3c>
				x = 1;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 80039dc:	7f3b      	ldrb	r3, [r7, #28]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	461a      	mov	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4413      	add	r3, r2
 80039e6:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x, y, color, phone, *str, size);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	7f3a      	ldrb	r2, [r7, #28]
 80039f2:	9201      	str	r2, [sp, #4]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	f000 f919 	bl	8003c30 <ILI9341_Draw_Char>
			x += size*8-2;
 80039fe:	7f3b      	ldrb	r3, [r7, #28]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	3b02      	subs	r3, #2
 8003a0a:	60fb      	str	r3, [r7, #12]
			str++;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
		while (*str)
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1d5      	bne.n	80039c6 <ILI9341_Draw_String+0x1a>
	break;
 8003a1a:	e02e      	b.n	8003a7a <ILI9341_Draw_String+0xce>
		hh=1;
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <ILI9341_Draw_String+0xdc>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
		while (*str)
 8003a22:	e025      	b.n	8003a70 <ILI9341_Draw_String+0xc4>
			if ((x+(size*8))>X_SIZE)
 8003a24:	7f3b      	ldrb	r3, [r7, #28]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	441a      	add	r2, r3
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <ILI9341_Draw_String+0xd8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d907      	bls.n	8003a46 <ILI9341_Draw_String+0x9a>
				x = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]
				y = y + (size*8);
 8003a3a:	7f3b      	ldrb	r3, [r7, #28]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4413      	add	r3, r2
 8003a44:	60bb      	str	r3, [r7, #8]
			ILI9341_Draw_Char(x,y,color,phone,*str,size);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	7f3a      	ldrb	r2, [r7, #28]
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	f000 f8ea 	bl	8003c30 <ILI9341_Draw_Char>
			x += hh*8;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <ILI9341_Draw_String+0xdc>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4413      	add	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
			str++;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
		while (*str)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1d5      	bne.n	8003a24 <ILI9341_Draw_String+0x78>
	break;
 8003a78:	bf00      	nop
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000
 8003a88:	20008888 	.word	0x20008888

08003a8c <ILI9341_Send_Command>:

static void ILI9341_Send_Command(unsigned char command) {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8003a96:	f000 f995 	bl	8003dc4 <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff febb 	bl	8003818 <ILI9341_SPI_Send>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8003ab4:	f000 f97a 	bl	8003dac <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff feac 	bl	8003818 <ILI9341_SPI_Send>
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	733b      	strb	r3, [r7, #12]
 8003adc:	88fb      	ldrh	r3, [r7, #6]
 8003ade:	72fb      	strb	r3, [r7, #11]
	//CS_ON;
	DC_COMMAND;
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	4851      	ldr	r0, [pc, #324]	; (8003c2c <ILI9341_Send_Burst+0x164>)
 8003ae6:	f008 fe81 	bl	800c7ec <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8003aea:	202c      	movs	r0, #44	; 0x2c
 8003aec:	f7ff fe94 	bl	8003818 <ILI9341_SPI_Send>
	DC_DATA;
 8003af0:	2201      	movs	r2, #1
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	484d      	ldr	r0, [pc, #308]	; (8003c2c <ILI9341_Send_Burst+0x164>)
 8003af6:	f008 fe79 	bl	800c7ec <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8003afa:	7b3b      	ldrb	r3, [r7, #12]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fe8b 	bl	8003818 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8003b02:	7afb      	ldrb	r3, [r7, #11]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe87 	bl	8003818 <ILI9341_SPI_Send>
	len--;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8003b16:	7b3a      	ldrb	r2, [r7, #12]
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d169      	bne.n	8003bf2 <ILI9341_Send_Burst+0x12a>
	{
		while (blocks--) {
 8003b1e:	e027      	b.n	8003b70 <ILI9341_Send_Burst+0xa8>
			i = 16;
 8003b20:	2310      	movs	r3, #16
 8003b22:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7ff fe76 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fe72 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b34:	7afb      	ldrb	r3, [r7, #11]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fe6e 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe6a 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b44:	7afb      	ldrb	r3, [r7, #11]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff fe66 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff fe62 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b54:	7afb      	ldrb	r3, [r7, #11]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fe5e 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fe5a 	bl	8003818 <ILI9341_SPI_Send>
			} while (--i);
 8003b64:	7b7b      	ldrb	r3, [r7, #13]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	737b      	strb	r3, [r7, #13]
 8003b6a:	7b7b      	ldrb	r3, [r7, #13]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1d9      	bne.n	8003b24 <ILI9341_Send_Burst+0x5c>
		while (blocks--) {
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	1e5a      	subs	r2, r3, #1
 8003b74:	81fa      	strh	r2, [r7, #14]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d2      	bne.n	8003b20 <ILI9341_Send_Burst+0x58>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b82:	737b      	strb	r3, [r7, #13]
 8003b84:	e007      	b.n	8003b96 <ILI9341_Send_Burst+0xce>
			ILI9341_SPI_Send(low_bit);
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff fe45 	bl	8003818 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fe41 	bl	8003818 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003b96:	7b7b      	ldrb	r3, [r7, #13]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	737a      	strb	r2, [r7, #13]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f2      	bne.n	8003b86 <ILI9341_Send_Burst+0xbe>
			ILI9341_SPI_Send(high_bit);
			ILI9341_SPI_Send(low_bit);
		}
	}
	//CS_OFF;
}
 8003ba0:	e03f      	b.n	8003c22 <ILI9341_Send_Burst+0x15a>
			i = 16;
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	737b      	strb	r3, [r7, #13]
				ILI9341_SPI_Send(high_bit);
 8003ba6:	7b3b      	ldrb	r3, [r7, #12]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fe35 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff fe31 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bb6:	7b3b      	ldrb	r3, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe2d 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bbe:	7afb      	ldrb	r3, [r7, #11]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fe29 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bc6:	7b3b      	ldrb	r3, [r7, #12]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fe25 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bce:	7afb      	ldrb	r3, [r7, #11]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fe21 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8003bd6:	7b3b      	ldrb	r3, [r7, #12]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fe1d 	bl	8003818 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fe19 	bl	8003818 <ILI9341_SPI_Send>
			} while (--i);
 8003be6:	7b7b      	ldrb	r3, [r7, #13]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	737b      	strb	r3, [r7, #13]
 8003bec:	7b7b      	ldrb	r3, [r7, #13]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <ILI9341_Send_Burst+0xde>
		while (blocks--) {
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	81fa      	strh	r2, [r7, #14]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1d2      	bne.n	8003ba2 <ILI9341_Send_Burst+0xda>
		for (i = (unsigned char) len & 63; i--;) {
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c04:	737b      	strb	r3, [r7, #13]
 8003c06:	e007      	b.n	8003c18 <ILI9341_Send_Burst+0x150>
			ILI9341_SPI_Send(high_bit);
 8003c08:	7b3b      	ldrb	r3, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fe04 	bl	8003818 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8003c10:	7afb      	ldrb	r3, [r7, #11]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fe00 	bl	8003818 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8003c18:	7b7b      	ldrb	r3, [r7, #13]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	737a      	strb	r2, [r7, #13]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <ILI9341_Send_Burst+0x140>
}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40020000 	.word	0x40020000

08003c30 <ILI9341_Draw_Char>:
	ILI9341_SPI_Send(color1);
	ILI9341_SPI_Send(color2);
}

static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
	int i,h;
	switch(size)
 8003c3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d002      	beq.n	8003c4c <ILI9341_Draw_Char+0x1c>
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d053      	beq.n	8003cf2 <ILI9341_Draw_Char+0xc2>
					}
				}
			}
		break;
	}
}
 8003c4a:	e0a5      	b.n	8003d98 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+5, y+8);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3305      	adds	r3, #5
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	3308      	adds	r3, #8
 8003c5a:	f7ff fe3b 	bl	80038d4 <ILI9341_Set_Address>
			DC_COMMAND;
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2140      	movs	r1, #64	; 0x40
 8003c62:	484f      	ldr	r0, [pc, #316]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003c64:	f008 fdc2 	bl	800c7ec <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003c68:	202c      	movs	r0, #44	; 0x2c
 8003c6a:	f7ff fdd5 	bl	8003818 <ILI9341_SPI_Send>
			DC_DATA;
 8003c6e:	2201      	movs	r2, #1
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	484b      	ldr	r0, [pc, #300]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003c74:	f008 fdba 	bl	800c7ec <HAL_GPIO_WritePin>
			for(h=0;h<8;h++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e035      	b.n	8003cea <ILI9341_Draw_Char+0xba>
				for(i=2;i<8;i++)
 8003c7e:	2302      	movs	r3, #2
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e02c      	b.n	8003cde <ILI9341_Draw_Char+0xae>
					if ((chars8[charcode-0x20][h]>>(7-i))&0x01)
 8003c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c88:	3b20      	subs	r3, #32
 8003c8a:	4a46      	ldr	r2, [pc, #280]	; (8003da4 <ILI9341_Draw_Char+0x174>)
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	441a      	add	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	fa42 f303 	asr.w	r3, r2, r3
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <ILI9341_Draw_Char+0x92>
						ILI9341_SPI_Send(color>>8);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fdb1 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fdac 	bl	8003818 <ILI9341_SPI_Send>
 8003cc0:	e00a      	b.n	8003cd8 <ILI9341_Draw_Char+0xa8>
						ILI9341_SPI_Send(phone>>8);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fda5 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fda0 	bl	8003818 <ILI9341_SPI_Send>
				for(i=2;i<8;i++)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b07      	cmp	r3, #7
 8003ce2:	ddcf      	ble.n	8003c84 <ILI9341_Draw_Char+0x54>
			for(h=0;h<8;h++)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b07      	cmp	r3, #7
 8003cee:	ddc6      	ble.n	8003c7e <ILI9341_Draw_Char+0x4e>
			break;
 8003cf0:	e052      	b.n	8003d98 <ILI9341_Draw_Char+0x168>
			ILI9341_Set_Address(x, y, x+7, y+16);
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3307      	adds	r3, #7
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	3310      	adds	r3, #16
 8003d00:	f7ff fde8 	bl	80038d4 <ILI9341_Set_Address>
			DC_COMMAND;
 8003d04:	2200      	movs	r2, #0
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	4825      	ldr	r0, [pc, #148]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003d0a:	f008 fd6f 	bl	800c7ec <HAL_GPIO_WritePin>
			ILI9341_SPI_Send(0x2C);
 8003d0e:	202c      	movs	r0, #44	; 0x2c
 8003d10:	f7ff fd82 	bl	8003818 <ILI9341_SPI_Send>
			DC_DATA;
 8003d14:	2201      	movs	r2, #1
 8003d16:	2140      	movs	r1, #64	; 0x40
 8003d18:	4821      	ldr	r0, [pc, #132]	; (8003da0 <ILI9341_Draw_Char+0x170>)
 8003d1a:	f008 fd67 	bl	800c7ec <HAL_GPIO_WritePin>
			for(h=0;h<16;h++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	e035      	b.n	8003d90 <ILI9341_Draw_Char+0x160>
				for(i=0;i<8;i++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e02c      	b.n	8003d84 <ILI9341_Draw_Char+0x154>
					if ((chars16[charcode-0x20][h]>>(7-i))&0x01)
 8003d2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d2e:	3b20      	subs	r3, #32
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <ILI9341_Draw_Char+0x178>)
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	441a      	add	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f1c3 0307 	rsb	r3, r3, #7
 8003d44:	fa42 f303 	asr.w	r3, r2, r3
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <ILI9341_Draw_Char+0x138>
						ILI9341_SPI_Send(color>>8);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fd5e 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(color);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fd59 	bl	8003818 <ILI9341_SPI_Send>
 8003d66:	e00a      	b.n	8003d7e <ILI9341_Draw_Char+0x14e>
						ILI9341_SPI_Send(phone>>8);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fd52 	bl	8003818 <ILI9341_SPI_Send>
						ILI9341_SPI_Send(phone);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fd4d 	bl	8003818 <ILI9341_SPI_Send>
				for(i=0;i<8;i++)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3301      	adds	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b07      	cmp	r3, #7
 8003d88:	ddcf      	ble.n	8003d2a <ILI9341_Draw_Char+0xfa>
			for(h=0;h<16;h++)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	2b0f      	cmp	r3, #15
 8003d94:	ddc6      	ble.n	8003d24 <ILI9341_Draw_Char+0xf4>
		break;
 8003d96:	bf00      	nop
}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40020000 	.word	0x40020000
 8003da4:	0801a164 	.word	0x0801a164
 8003da8:	0801a43c 	.word	0x0801a43c

08003dac <Before_Sending_Data>:

static void Before_Sending_Data() {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_SET);
 8003db0:	2201      	movs	r2, #1
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <Before_Sending_Data+0x14>)
 8003db6:	f008 fd19 	bl	800c7ec <HAL_GPIO_WritePin>
//	CS_ON
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40020000 	.word	0x40020000

08003dc4 <Before_Sending_Command>:

static void Before_Sending_Command() {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DC_GPIO_PIN, GPIO_PIN_RESET);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2140      	movs	r1, #64	; 0x40
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <Before_Sending_Command+0x14>)
 8003dce:	f008 fd0d 	bl	800c7ec <HAL_GPIO_WritePin>
//	CS_ON
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40020000 	.word	0x40020000

08003ddc <ILI9341_PrintLine>:

void ILI9341_PrintLine(char* mes, int* row){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	static int lastrow = 0;
	static int first = 1;
	if(first){
 8003de6:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <ILI9341_PrintLine+0x74>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <ILI9341_PrintLine+0x20>
		lastrow = *row;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <ILI9341_PrintLine+0x78>)
 8003df4:	6013      	str	r3, [r2, #0]
		first = 0;
 8003df6:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <ILI9341_PrintLine+0x74>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
	}
	if(*row > 310){
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8003e04:	dd0d      	ble.n	8003e22 <ILI9341_PrintLine+0x46>
		*row = lastrow;
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <ILI9341_PrintLine+0x78>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	601a      	str	r2, [r3, #0]
		ILI9341_Draw_Filled_Rectangle(BLACK, 5, 45, 240, 320);
 8003e0e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	23f0      	movs	r3, #240	; 0xf0
 8003e16:	222d      	movs	r2, #45	; 0x2d
 8003e18:	2105      	movs	r1, #5
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7ff fda4 	bl	8003968 <ILI9341_Draw_Filled_Rectangle>
 8003e20:	e005      	b.n	8003e2e <ILI9341_PrintLine+0x52>
	}else{
		*row += 15;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f103 020f 	add.w	r2, r3, #15
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	601a      	str	r2, [r3, #0]
	}
	ILI9341_Draw_String(5, *row, WHITE, BLACK, mes, 2);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	2302      	movs	r3, #2
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e42:	2005      	movs	r0, #5
 8003e44:	f7ff fdb2 	bl	80039ac <ILI9341_Draw_String>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	20000008 	.word	0x20000008
 8003e54:	20000624 	.word	0x20000624

08003e58 <main>:
//#define DEBUG

int dir = 1;

int main(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0b2      	sub	sp, #200	; 0xc8
 8003e5c:	af00      	add	r7, sp, #0

	set();
 8003e5e:	f005 fbf3 	bl	8009648 <set>

	led3 = 1;
 8003e62:	4a9f      	ldr	r2, [pc, #636]	; (80040e0 <main+0x288>)
 8003e64:	7853      	ldrb	r3, [r2, #1]
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	7053      	strb	r3, [r2, #1]
	tuneRead();
 8003e6c:	f005 ff6e 	bl	8009d4c <tuneRead>
	const osThreadAttr_t MainTask_attributes = {
 8003e70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f011 f9df 	bl	801523c <memset>
 8003e7e:	4b99      	ldr	r3, [pc, #612]	; (80040e4 <main+0x28c>)
 8003e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e8c:	2318      	movs	r3, #24
 8003e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			.name = "MainTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t FlywheelPitchPIDTask_attributes = {
 8003e92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f011 f9ce 	bl	801523c <memset>
 8003ea0:	4b91      	ldr	r3, [pc, #580]	; (80040e8 <main+0x290>)
 8003ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eae:	2318      	movs	r3, #24
 8003eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			.name = "FlywheelPitchPIDTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t FlywheelYawPIDTask_attributes = {
 8003eb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003eb8:	2224      	movs	r2, #36	; 0x24
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f011 f9bd 	bl	801523c <memset>
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <main+0x294>)
 8003ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ecc:	2318      	movs	r3, #24
 8003ece:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "FlywheelYawPIDTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t EmergencyTask_attributes = {
 8003ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f011 f9af 	bl	801523c <memset>
 8003ede:	4b84      	ldr	r3, [pc, #528]	; (80040f0 <main+0x298>)
 8003ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	2318      	movs	r3, #24
 8003eea:	653b      	str	r3, [r7, #80]	; 0x50
			.name = "EmergencyTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t TuneTask_attributes = {
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	2224      	movs	r2, #36	; 0x24
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f011 f9a1 	bl	801523c <memset>
 8003efa:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <main+0x29c>)
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f04:	2320      	movs	r3, #32
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
//			.name = "TestTask",
//			.stack_size = 256 * 4,
//			.priority = (osPriority_t) osPriorityAboveNormal1,
//	};

	const osSemaphoreAttr_t TuneSemaphore_attributes = {
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	60da      	str	r2, [r3, #12]
 8003f14:	4b78      	ldr	r3, [pc, #480]	; (80040f8 <main+0x2a0>)
 8003f16:	607b      	str	r3, [r7, #4]

//	const osSemaphoreAttr_t ShootSemaphore_attributes = {
//			.name = "ShootSemaphore"
//	};

	HAL_UART_Receive_DMA(&huart4, &jetson.header, 1);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	4978      	ldr	r1, [pc, #480]	; (80040fc <main+0x2a4>)
 8003f1c:	4878      	ldr	r0, [pc, #480]	; (8004100 <main+0x2a8>)
 8003f1e:	f00c fcef 	bl	8010900 <HAL_UART_Receive_DMA>
	PIDSourceInit(&errorYaw, &yawDelay, &Pid_Camera);
 8003f22:	4a78      	ldr	r2, [pc, #480]	; (8004104 <main+0x2ac>)
 8003f24:	4978      	ldr	r1, [pc, #480]	; (8004108 <main+0x2b0>)
 8003f26:	4879      	ldr	r0, [pc, #484]	; (800410c <main+0x2b4>)
 8003f28:	f001 fbbb 	bl	80056a2 <PIDSourceInit>
	PIDGainInit(0.03, 1.0, 1.0/320.0, 5.0, yawP, yawI, yawD, 60.0, &Pid_Camera);
 8003f2c:	4b78      	ldr	r3, [pc, #480]	; (8004110 <main+0x2b8>)
 8003f2e:	edd3 7a00 	vldr	s15, [r3]
 8003f32:	4b78      	ldr	r3, [pc, #480]	; (8004114 <main+0x2bc>)
 8003f34:	ed93 7a00 	vldr	s14, [r3]
 8003f38:	4b77      	ldr	r3, [pc, #476]	; (8004118 <main+0x2c0>)
 8003f3a:	edd3 6a00 	vldr	s13, [r3]
 8003f3e:	4871      	ldr	r0, [pc, #452]	; (8004104 <main+0x2ac>)
 8003f40:	eddf 3a76 	vldr	s7, [pc, #472]	; 800411c <main+0x2c4>
 8003f44:	eeb0 3a66 	vmov.f32	s6, s13
 8003f48:	eef0 2a47 	vmov.f32	s5, s14
 8003f4c:	eeb0 2a67 	vmov.f32	s4, s15
 8003f50:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8003f54:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8004120 <main+0x2c8>
 8003f58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f5c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8004124 <main+0x2cc>
 8003f60:	f001 fbb1 	bl	80056c6 <PIDGainInit>
	lastyawP = 1.0; lastyawI = 2.0; lastyawD = 0.0;
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <main+0x2d0>)
 8003f66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <main+0x2d4>)
 8003f6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <main+0x2d8>)
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
	PIDSourceInit(&errorPitch, &pitchDelay, &Pid_Camera_Pitch);
 8003f7c:	4a6d      	ldr	r2, [pc, #436]	; (8004134 <main+0x2dc>)
 8003f7e:	496e      	ldr	r1, [pc, #440]	; (8004138 <main+0x2e0>)
 8003f80:	486e      	ldr	r0, [pc, #440]	; (800413c <main+0x2e4>)
 8003f82:	f001 fb8e 	bl	80056a2 <PIDSourceInit>
	PIDGainInit(0.03, 1.0, 1.0/240.0, PITCH_LONGEST_DELAY, pitchP, pitchI, pitchD, 60.0, &Pid_Camera_Pitch);
 8003f86:	4b6e      	ldr	r3, [pc, #440]	; (8004140 <main+0x2e8>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <main+0x2ec>)
 8003f8e:	ed93 7a00 	vldr	s14, [r3]
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <main+0x2f0>)
 8003f94:	edd3 6a00 	vldr	s13, [r3]
 8003f98:	4866      	ldr	r0, [pc, #408]	; (8004134 <main+0x2dc>)
 8003f9a:	eddf 3a60 	vldr	s7, [pc, #384]	; 800411c <main+0x2c4>
 8003f9e:	eeb0 3a66 	vmov.f32	s6, s13
 8003fa2:	eef0 2a47 	vmov.f32	s5, s14
 8003fa6:	eeb0 2a67 	vmov.f32	s4, s15
 8003faa:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003fae:	ed9f 1a67 	vldr	s2, [pc, #412]	; 800414c <main+0x2f4>
 8003fb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003fb6:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8004124 <main+0x2cc>
 8003fba:	f001 fb84 	bl	80056c6 <PIDGainInit>
	lastpitchP = 2.1; lastpitchI = 3.3; lastpitchD = 0.0;
 8003fbe:	4b64      	ldr	r3, [pc, #400]	; (8004150 <main+0x2f8>)
 8003fc0:	4a64      	ldr	r2, [pc, #400]	; (8004154 <main+0x2fc>)
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <main+0x300>)
 8003fc6:	4a65      	ldr	r2, [pc, #404]	; (800415c <main+0x304>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4b65      	ldr	r3, [pc, #404]	; (8004160 <main+0x308>)
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

	led2 = 1;
 8003fd2:	4a43      	ldr	r2, [pc, #268]	; (80040e0 <main+0x288>)
 8003fd4:	7853      	ldrb	r3, [r2, #1]
 8003fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fda:	7053      	strb	r3, [r2, #1]
	ILI9341_Init();
 8003fdc:	f7ff fb1a 	bl	8003614 <ILI9341_Init>
	//	ILI9341_Set_Rotation(1);
	ILI9341_Fill_Screen(BLACK);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7ff fc9d 	bl	8003920 <ILI9341_Fill_Screen>

	ILI9341_Init_List();
 8003fe6:	f005 fef1 	bl	8009dcc <ILI9341_Init_List>
	sys.updateLCD = 1;
 8003fea:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <main+0x30c>)
 8003fec:	7813      	ldrb	r3, [r2, #0]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff2:	7013      	strb	r3, [r2, #0]

	//	ServoInitPulseLimit(&servo, 300, 2500);
	//	ServoInitPulseLimit(&servo1, 300, 2500);

	ServoInitPulseLimit(&servo, DOWNMINYAWPULSE, DOWNMAXYAWPULSE);
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <main+0x310>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a5c      	ldr	r2, [pc, #368]	; (800416c <main+0x314>)
 8003ffa:	6812      	ldr	r2, [r2, #0]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	485c      	ldr	r0, [pc, #368]	; (8004170 <main+0x318>)
 8004000:	f002 fa9b 	bl	800653a <ServoInitPulseLimit>
	ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 8004004:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <main+0x31c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <main+0x320>)
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	4619      	mov	r1, r3
 800400e:	485b      	ldr	r0, [pc, #364]	; (800417c <main+0x324>)
 8004010:	f002 fa93 	bl	800653a <ServoInitPulseLimit>
	ServoSetPulse(&servo, DOWNLAGORIYAWPULSE);
 8004014:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <main+0x328>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4855      	ldr	r0, [pc, #340]	; (8004170 <main+0x318>)
 800401c:	f002 fa44 	bl	80064a8 <ServoSetPulse>
	ServoSetPulse(&servo1, DOWNLAGORIPITCHPULSE);
 8004020:	4b58      	ldr	r3, [pc, #352]	; (8004184 <main+0x32c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	4855      	ldr	r0, [pc, #340]	; (800417c <main+0x324>)
 8004028:	f002 fa3e 	bl	80064a8 <ServoSetPulse>
	HAL_Delay(200);
 800402c:	20c8      	movs	r0, #200	; 0xc8
 800402e:	f006 fa65 	bl	800a4fc <HAL_Delay>
	LOWER;
 8004032:	4b55      	ldr	r3, [pc, #340]	; (8004188 <main+0x330>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
	GATE_DOWN;
 800403a:	4a54      	ldr	r2, [pc, #336]	; (800418c <main+0x334>)
 800403c:	7f13      	ldrb	r3, [r2, #28]
 800403e:	f36f 1386 	bfc	r3, #6, #1
 8004042:	7713      	strb	r3, [r2, #28]

	osKernelInitialize();
 8004044:	f00d fbe8 	bl	8011818 <osKernelInitialize>

	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004048:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800404c:	461a      	mov	r2, r3
 800404e:	2100      	movs	r1, #0
 8004050:	484f      	ldr	r0, [pc, #316]	; (8004190 <main+0x338>)
 8004052:	f00d fc2b 	bl	80118ac <osThreadNew>
 8004056:	4603      	mov	r3, r0
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <main+0x33c>)
 800405a:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 800405c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004060:	461a      	mov	r2, r3
 8004062:	2100      	movs	r1, #0
 8004064:	484c      	ldr	r0, [pc, #304]	; (8004198 <main+0x340>)
 8004066:	f00d fc21 	bl	80118ac <osThreadNew>
 800406a:	4603      	mov	r3, r0
 800406c:	4a4b      	ldr	r2, [pc, #300]	; (800419c <main+0x344>)
 800406e:	6013      	str	r3, [r2, #0]
	FlywheelPitchPIDTaskHandle = osThreadNew(FlywheelPitchPIDTask, NULL, &FlywheelPitchPIDTask_attributes);
 8004070:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	4849      	ldr	r0, [pc, #292]	; (80041a0 <main+0x348>)
 800407a:	f00d fc17 	bl	80118ac <osThreadNew>
 800407e:	4603      	mov	r3, r0
 8004080:	4a48      	ldr	r2, [pc, #288]	; (80041a4 <main+0x34c>)
 8004082:	6013      	str	r3, [r2, #0]
	FlywheelYawPIDTaskHandle = osThreadNew(FlywheelYawPIDTask, NULL, &FlywheelYawPIDTask_attributes);
 8004084:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004088:	461a      	mov	r2, r3
 800408a:	2100      	movs	r1, #0
 800408c:	4846      	ldr	r0, [pc, #280]	; (80041a8 <main+0x350>)
 800408e:	f00d fc0d 	bl	80118ac <osThreadNew>
 8004092:	4603      	mov	r3, r0
 8004094:	4a45      	ldr	r2, [pc, #276]	; (80041ac <main+0x354>)
 8004096:	6013      	str	r3, [r2, #0]
	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	461a      	mov	r2, r3
 800409e:	2100      	movs	r1, #0
 80040a0:	4843      	ldr	r0, [pc, #268]	; (80041b0 <main+0x358>)
 80040a2:	f00d fc03 	bl	80118ac <osThreadNew>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a42      	ldr	r2, [pc, #264]	; (80041b4 <main+0x35c>)
 80040aa:	6013      	str	r3, [r2, #0]
//	TestTaskHandle = osThreadNew(TestTask, NULL, &TestTask_attributes);

	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
 80040ac:	1d3b      	adds	r3, r7, #4
 80040ae:	461a      	mov	r2, r3
 80040b0:	2100      	movs	r1, #0
 80040b2:	2001      	movs	r0, #1
 80040b4:	f00d fd16 	bl	8011ae4 <osSemaphoreNew>
 80040b8:	4603      	mov	r3, r0
 80040ba:	4a3f      	ldr	r2, [pc, #252]	; (80041b8 <main+0x360>)
 80040bc:	6013      	str	r3, [r2, #0]
	osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <main+0x34c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f00d fc84 	bl	80119d0 <osThreadSuspend>
	osThreadSuspend(FlywheelYawPIDTaskHandle);
 80040c8:	4b38      	ldr	r3, [pc, #224]	; (80041ac <main+0x354>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00d fc7f 	bl	80119d0 <osThreadSuspend>

//	ShootSemaphore = osSemaphoreNew(1, 0, &ShootSemaphore_attributes);
	osKernelStart();
 80040d2:	f00d fbc5 	bl	8011860 <osKernelStart>
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	37c8      	adds	r7, #200	; 0xc8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40020814 	.word	0x40020814
 80040e4:	08019be0 	.word	0x08019be0
 80040e8:	08019bec 	.word	0x08019bec
 80040ec:	08019c04 	.word	0x08019c04
 80040f0:	08019c18 	.word	0x08019c18
 80040f4:	08019c28 	.word	0x08019c28
 80040f8:	08019c34 	.word	0x08019c34
 80040fc:	200089fc 	.word	0x200089fc
 8004100:	20006870 	.word	0x20006870
 8004104:	200088b0 	.word	0x200088b0
 8004108:	200089ac 	.word	0x200089ac
 800410c:	200089a4 	.word	0x200089a4
 8004110:	2000895c 	.word	0x2000895c
 8004114:	2000894c 	.word	0x2000894c
 8004118:	200088a4 	.word	0x200088a4
 800411c:	42700000 	.word	0x42700000
 8004120:	3b4ccccd 	.word	0x3b4ccccd
 8004124:	3cf5c28f 	.word	0x3cf5c28f
 8004128:	20008abc 	.word	0x20008abc
 800412c:	20008944 	.word	0x20008944
 8004130:	2000897c 	.word	0x2000897c
 8004134:	20008a38 	.word	0x20008a38
 8004138:	20008914 	.word	0x20008914
 800413c:	200089a0 	.word	0x200089a0
 8004140:	20008934 	.word	0x20008934
 8004144:	20008950 	.word	0x20008950
 8004148:	20008978 	.word	0x20008978
 800414c:	3b888889 	.word	0x3b888889
 8004150:	200089ec 	.word	0x200089ec
 8004154:	40066666 	.word	0x40066666
 8004158:	20008a2c 	.word	0x20008a2c
 800415c:	40533333 	.word	0x40533333
 8004160:	20008ab4 	.word	0x20008ab4
 8004164:	2000893c 	.word	0x2000893c
 8004168:	20008aac 	.word	0x20008aac
 800416c:	20008940 	.word	0x20008940
 8004170:	20007da4 	.word	0x20007da4
 8004174:	20008920 	.word	0x20008920
 8004178:	20008930 	.word	0x20008930
 800417c:	20007e1c 	.word	0x20007e1c
 8004180:	20008994 	.word	0x20008994
 8004184:	20008a90 	.word	0x20008a90
 8004188:	20006560 	.word	0x20006560
 800418c:	20007d2c 	.word	0x20007d2c
 8004190:	08004589 	.word	0x08004589
 8004194:	20008964 	.word	0x20008964
 8004198:	080053fd 	.word	0x080053fd
 800419c:	20008a34 	.word	0x20008a34
 80041a0:	080051ad 	.word	0x080051ad
 80041a4:	2000899c 	.word	0x2000899c
 80041a8:	08004e75 	.word	0x08004e75
 80041ac:	2000892c 	.word	0x2000892c
 80041b0:	08005491 	.word	0x08005491
 80041b4:	200089e8 	.word	0x200089e8
 80041b8:	20008a9c 	.word	0x20008a9c
 80041bc:	00000000 	.word	0x00000000

080041c0 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
	if(ps4.joyL_2 > 0.6){
 80041c6:	4bae      	ldr	r3, [pc, #696]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f9bc 	bl	8000548 <__aeabi_f2d>
 80041d0:	a3a1      	add	r3, pc, #644	; (adr r3, 8004458 <TIM6_DAC_IRQHandler+0x298>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d046      	beq.n	800426e <TIM6_DAC_IRQHandler+0xae>
		rpm = rpm - 0.002;
 80041e0:	4ba8      	ldr	r3, [pc, #672]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f9af 	bl	8000548 <__aeabi_f2d>
 80041ea:	a39d      	add	r3, pc, #628	; (adr r3, 8004460 <TIM6_DAC_IRQHandler+0x2a0>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fc f84a 	bl	8000288 <__aeabi_dsub>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	f7fc fcf4 	bl	8000be8 <__aeabi_d2f>
 8004200:	4603      	mov	r3, r0
 8004202:	4aa0      	ldr	r2, [pc, #640]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 8004204:	6013      	str	r3, [r2, #0]
		if(rpm < 0.2) rpm = 0.2;
 8004206:	4b9f      	ldr	r3, [pc, #636]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f99c 	bl	8000548 <__aeabi_f2d>
 8004210:	a395      	add	r3, pc, #596	; (adr r3, 8004468 <TIM6_DAC_IRQHandler+0x2a8>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc fc61 	bl	8000adc <__aeabi_dcmplt>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <TIM6_DAC_IRQHandler+0x66>
 8004220:	4b98      	ldr	r3, [pc, #608]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 8004222:	4a99      	ldr	r2, [pc, #612]	; (8004488 <TIM6_DAC_IRQHandler+0x2c8>)
 8004224:	601a      	str	r2, [r3, #0]
		rpm1 = rpm2 = rpm3 = previousAllRpm = rpm;
 8004226:	4b97      	ldr	r3, [pc, #604]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a98      	ldr	r2, [pc, #608]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b97      	ldr	r3, [pc, #604]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a97      	ldr	r2, [pc, #604]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b96      	ldr	r3, [pc, #600]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a96      	ldr	r2, [pc, #600]	; (8004494 <TIM6_DAC_IRQHandler+0x2d4>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b95      	ldr	r3, [pc, #596]	; (8004494 <TIM6_DAC_IRQHandler+0x2d4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a95      	ldr	r2, [pc, #596]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 8004244:	6013      	str	r3, [r2, #0]
		sys.updateLCD = 1;
 8004246:	4a95      	ldr	r2, [pc, #596]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 8004248:	7813      	ldrb	r3, [r2, #0]
 800424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424e:	7013      	strb	r3, [r2, #0]
		led2 = !led2;
 8004250:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <TIM6_DAC_IRQHandler+0x2e0>)
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4a91      	ldr	r2, [pc, #580]	; (80044a0 <TIM6_DAC_IRQHandler+0x2e0>)
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2d9      	uxtb	r1, r3
 8004266:	7853      	ldrb	r3, [r2, #1]
 8004268:	f361 1386 	bfi	r3, r1, #6, #1
 800426c:	7053      	strb	r3, [r2, #1]
	}
	if(ps4.joyR_2 > 0.6){
 800426e:	4b84      	ldr	r3, [pc, #528]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004272:	4618      	mov	r0, r3
 8004274:	f7fc f968 	bl	8000548 <__aeabi_f2d>
 8004278:	a377      	add	r3, pc, #476	; (adr r3, 8004458 <TIM6_DAC_IRQHandler+0x298>)
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f7fc fc4b 	bl	8000b18 <__aeabi_dcmpgt>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d043      	beq.n	8004310 <TIM6_DAC_IRQHandler+0x150>
		rpm = rpm + 0.002;
 8004288:	4b7e      	ldr	r3, [pc, #504]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc f95b 	bl	8000548 <__aeabi_f2d>
 8004292:	a373      	add	r3, pc, #460	; (adr r3, 8004460 <TIM6_DAC_IRQHandler+0x2a0>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fb fff8 	bl	800028c <__adddf3>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7fc fca0 	bl	8000be8 <__aeabi_d2f>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4a76      	ldr	r2, [pc, #472]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042ac:	6013      	str	r3, [r2, #0]
		if(rpm > 0.7) rpm = 0.7;
 80042ae:	4b75      	ldr	r3, [pc, #468]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fc f948 	bl	8000548 <__aeabi_f2d>
 80042b8:	a36d      	add	r3, pc, #436	; (adr r3, 8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <TIM6_DAC_IRQHandler+0x10e>
 80042c8:	4b6e      	ldr	r3, [pc, #440]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042ca:	4a76      	ldr	r2, [pc, #472]	; (80044a4 <TIM6_DAC_IRQHandler+0x2e4>)
 80042cc:	601a      	str	r2, [r3, #0]
		rpm1 = rpm2 = rpm3 = previousAllRpm = rpm;
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <TIM6_DAC_IRQHandler+0x2c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6e      	ldr	r2, [pc, #440]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b6d      	ldr	r3, [pc, #436]	; (800448c <TIM6_DAC_IRQHandler+0x2cc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6d      	ldr	r2, [pc, #436]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	4b6c      	ldr	r3, [pc, #432]	; (8004490 <TIM6_DAC_IRQHandler+0x2d0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6c      	ldr	r2, [pc, #432]	; (8004494 <TIM6_DAC_IRQHandler+0x2d4>)
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b6b      	ldr	r3, [pc, #428]	; (8004494 <TIM6_DAC_IRQHandler+0x2d4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6b      	ldr	r2, [pc, #428]	; (8004498 <TIM6_DAC_IRQHandler+0x2d8>)
 80042ec:	6013      	str	r3, [r2, #0]
		sys.updateLCD = 1;
 80042ee:	4a6b      	ldr	r2, [pc, #428]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 80042f0:	7813      	ldrb	r3, [r2, #0]
 80042f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f6:	7013      	strb	r3, [r2, #0]
		led3 = !led3;
 80042f8:	4b69      	ldr	r3, [pc, #420]	; (80044a0 <TIM6_DAC_IRQHandler+0x2e0>)
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	4a68      	ldr	r2, [pc, #416]	; (80044a0 <TIM6_DAC_IRQHandler+0x2e0>)
 8004300:	43db      	mvns	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	09db      	lsrs	r3, r3, #7
 8004306:	b2d9      	uxtb	r1, r3
 8004308:	7853      	ldrb	r3, [r2, #1]
 800430a:	f361 13c7 	bfi	r3, r1, #7, #1
 800430e:	7053      	strb	r3, [r2, #1]
	}
	if(zoomCounter >= 1){
 8004310:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dd2e      	ble.n	8004376 <TIM6_DAC_IRQHandler+0x1b6>
		if(ps4.joyR_y >= 0.7){
 8004318:	4b59      	ldr	r3, [pc, #356]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	4618      	mov	r0, r3
 800431e:	f7fc f913 	bl	8000548 <__aeabi_f2d>
 8004322:	a353      	add	r3, pc, #332	; (adr r3, 8004470 <TIM6_DAC_IRQHandler+0x2b0>)
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f7fc fbec 	bl	8000b04 <__aeabi_dcmpge>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d008      	beq.n	8004344 <TIM6_DAC_IRQHandler+0x184>
			// 			while(ps4.joyR_y == 1.0);
			char c = 'z';
 8004332:	237a      	movs	r3, #122	; 0x7a
 8004334:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Transmit(&huart4, (uint8_t *)&c, 1, 10);
 8004336:	1df9      	adds	r1, r7, #7
 8004338:	230a      	movs	r3, #10
 800433a:	2201      	movs	r2, #1
 800433c:	485b      	ldr	r0, [pc, #364]	; (80044ac <TIM6_DAC_IRQHandler+0x2ec>)
 800433e:	f00c fa46 	bl	80107ce <HAL_UART_Transmit>
 8004342:	e014      	b.n	800436e <TIM6_DAC_IRQHandler+0x1ae>
		}else if(ps4.joyR_y <= -0.7){
 8004344:	4b4e      	ldr	r3, [pc, #312]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f8fd 	bl	8000548 <__aeabi_f2d>
 800434e:	a34a      	add	r3, pc, #296	; (adr r3, 8004478 <TIM6_DAC_IRQHandler+0x2b8>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc fbcc 	bl	8000af0 <__aeabi_dcmple>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <TIM6_DAC_IRQHandler+0x1ae>
			// 			while(ps4.joyR_y == -1.0);
			char c = 'x';
 800435e:	2378      	movs	r3, #120	; 0x78
 8004360:	71bb      	strb	r3, [r7, #6]
			HAL_UART_Transmit(&huart4, (uint8_t *)&c, 1, 10);
 8004362:	1db9      	adds	r1, r7, #6
 8004364:	230a      	movs	r3, #10
 8004366:	2201      	movs	r2, #1
 8004368:	4850      	ldr	r0, [pc, #320]	; (80044ac <TIM6_DAC_IRQHandler+0x2ec>)
 800436a:	f00c fa30 	bl	80107ce <HAL_UART_Transmit>
		}
		zoomCounter = 0;
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e004      	b.n	8004380 <TIM6_DAC_IRQHandler+0x1c0>
	}else{
		zoomCounter = zoomCounter + 1;
 8004376:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a4a      	ldr	r2, [pc, #296]	; (80044a8 <TIM6_DAC_IRQHandler+0x2e8>)
 800437e:	6013      	str	r3, [r2, #0]
	}


	if(!tracking){
 8004380:	4b4b      	ldr	r3, [pc, #300]	; (80044b0 <TIM6_DAC_IRQHandler+0x2f0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d14f      	bne.n	8004428 <TIM6_DAC_IRQHandler+0x268>
		if(ps4.joyL_y > 0.5){
 8004388:	4b3d      	ldr	r3, [pc, #244]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 800438a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800438e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	dd0c      	ble.n	80043b6 <TIM6_DAC_IRQHandler+0x1f6>
			Pitch(-PITCHSPEED);
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <TIM6_DAC_IRQHandler+0x2f4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	425b      	negs	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	4844      	ldr	r0, [pc, #272]	; (80044b8 <TIM6_DAC_IRQHandler+0x2f8>)
 80043a6:	f002 f8da 	bl	800655e <ServoMovePulse>
			sys.updateLCD = 1;
 80043aa:	4a3c      	ldr	r2, [pc, #240]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 80043ac:	7813      	ldrb	r3, [r2, #0]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b2:	7013      	strb	r3, [r2, #0]
 80043b4:	e014      	b.n	80043e0 <TIM6_DAC_IRQHandler+0x220>
		}else if(ps4.joyL_y < -0.5){
 80043b6:	4b32      	ldr	r3, [pc, #200]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 80043b8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80043c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c8:	d50a      	bpl.n	80043e0 <TIM6_DAC_IRQHandler+0x220>
			Pitch(PITCHSPEED);
 80043ca:	4b3a      	ldr	r3, [pc, #232]	; (80044b4 <TIM6_DAC_IRQHandler+0x2f4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4619      	mov	r1, r3
 80043d0:	4839      	ldr	r0, [pc, #228]	; (80044b8 <TIM6_DAC_IRQHandler+0x2f8>)
 80043d2:	f002 f8c4 	bl	800655e <ServoMovePulse>
			sys.updateLCD = 1;
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 80043d8:	7813      	ldrb	r3, [r2, #0]
 80043da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043de:	7013      	strb	r3, [r2, #0]
		}

		if(ps4.joyL_x > 0.5){
 80043e0:	4b27      	ldr	r3, [pc, #156]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 80043e2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80043e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	dd06      	ble.n	8004402 <TIM6_DAC_IRQHandler+0x242>
			Yaw(YAWSPEED);
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <TIM6_DAC_IRQHandler+0x2fc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	4831      	ldr	r0, [pc, #196]	; (80044c0 <TIM6_DAC_IRQHandler+0x300>)
 80043fc:	f002 f8af 	bl	800655e <ServoMovePulse>
 8004400:	e09d      	b.n	800453e <TIM6_DAC_IRQHandler+0x37e>
		}else if(ps4.joyL_x < -0.5){
 8004402:	4b1f      	ldr	r3, [pc, #124]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004404:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004408:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800440c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	f140 8093 	bpl.w	800453e <TIM6_DAC_IRQHandler+0x37e>
			Yaw(-YAWSPEED);
 8004418:	4b28      	ldr	r3, [pc, #160]	; (80044bc <TIM6_DAC_IRQHandler+0x2fc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	425b      	negs	r3, r3
 800441e:	4619      	mov	r1, r3
 8004420:	4827      	ldr	r0, [pc, #156]	; (80044c0 <TIM6_DAC_IRQHandler+0x300>)
 8004422:	f002 f89c 	bl	800655e <ServoMovePulse>
 8004426:	e08a      	b.n	800453e <TIM6_DAC_IRQHandler+0x37e>
		}
	}else{
		if(sys.pitchrun == 0){
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <TIM6_DAC_IRQHandler+0x2dc>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d154      	bne.n	80044e0 <TIM6_DAC_IRQHandler+0x320>
			if(ps4.joyL_y > 0.5){
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <TIM6_DAC_IRQHandler+0x2c0>)
 8004438:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800443c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	dd3c      	ble.n	80044c4 <TIM6_DAC_IRQHandler+0x304>
				Pitch(-5);
 800444a:	f06f 0104 	mvn.w	r1, #4
 800444e:	481a      	ldr	r0, [pc, #104]	; (80044b8 <TIM6_DAC_IRQHandler+0x2f8>)
 8004450:	f002 f885 	bl	800655e <ServoMovePulse>
 8004454:	e044      	b.n	80044e0 <TIM6_DAC_IRQHandler+0x320>
 8004456:	bf00      	nop
 8004458:	33333333 	.word	0x33333333
 800445c:	3fe33333 	.word	0x3fe33333
 8004460:	d2f1a9fc 	.word	0xd2f1a9fc
 8004464:	3f60624d 	.word	0x3f60624d
 8004468:	9999999a 	.word	0x9999999a
 800446c:	3fc99999 	.word	0x3fc99999
 8004470:	66666666 	.word	0x66666666
 8004474:	3fe66666 	.word	0x3fe66666
 8004478:	66666666 	.word	0x66666666
 800447c:	bfe66666 	.word	0xbfe66666
 8004480:	20008540 	.word	0x20008540
 8004484:	200089a8 	.word	0x200089a8
 8004488:	3e4ccccd 	.word	0x3e4ccccd
 800448c:	20008a94 	.word	0x20008a94
 8004490:	20008ab0 	.word	0x20008ab0
 8004494:	20008898 	.word	0x20008898
 8004498:	200089cc 	.word	0x200089cc
 800449c:	2000893c 	.word	0x2000893c
 80044a0:	40020814 	.word	0x40020814
 80044a4:	3f333333 	.word	0x3f333333
 80044a8:	20008ac0 	.word	0x20008ac0
 80044ac:	20006870 	.word	0x20006870
 80044b0:	200089b4 	.word	0x200089b4
 80044b4:	20008960 	.word	0x20008960
 80044b8:	20007e1c 	.word	0x20007e1c
 80044bc:	2000898c 	.word	0x2000898c
 80044c0:	20007da4 	.word	0x20007da4
			}else if(ps4.joyL_y < -0.5){
 80044c4:	4b29      	ldr	r3, [pc, #164]	; (800456c <TIM6_DAC_IRQHandler+0x3ac>)
 80044c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80044ca:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80044ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d6:	d503      	bpl.n	80044e0 <TIM6_DAC_IRQHandler+0x320>
				Pitch(5);
 80044d8:	2105      	movs	r1, #5
 80044da:	4825      	ldr	r0, [pc, #148]	; (8004570 <TIM6_DAC_IRQHandler+0x3b0>)
 80044dc:	f002 f83f 	bl	800655e <ServoMovePulse>
			}
		}
		if(sys.yawrun == 0){
 80044e0:	4b24      	ldr	r3, [pc, #144]	; (8004574 <TIM6_DAC_IRQHandler+0x3b4>)
 80044e2:	785b      	ldrb	r3, [r3, #1]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <TIM6_DAC_IRQHandler+0x36a>
			if(ps4.joyL_x > 0.5){
 80044ee:	4b1f      	ldr	r3, [pc, #124]	; (800456c <TIM6_DAC_IRQHandler+0x3ac>)
 80044f0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80044f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004500:	dd04      	ble.n	800450c <TIM6_DAC_IRQHandler+0x34c>
				Yaw(2);
 8004502:	2102      	movs	r1, #2
 8004504:	481c      	ldr	r0, [pc, #112]	; (8004578 <TIM6_DAC_IRQHandler+0x3b8>)
 8004506:	f002 f82a 	bl	800655e <ServoMovePulse>
 800450a:	e00e      	b.n	800452a <TIM6_DAC_IRQHandler+0x36a>
			}else if(ps4.joyL_x < -0.5){
 800450c:	4b17      	ldr	r3, [pc, #92]	; (800456c <TIM6_DAC_IRQHandler+0x3ac>)
 800450e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004512:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	d504      	bpl.n	800452a <TIM6_DAC_IRQHandler+0x36a>
				Yaw(-2);
 8004520:	f06f 0101 	mvn.w	r1, #1
 8004524:	4814      	ldr	r0, [pc, #80]	; (8004578 <TIM6_DAC_IRQHandler+0x3b8>)
 8004526:	f002 f81a 	bl	800655e <ServoMovePulse>
			}
		}
		jetson.timeout++;
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <TIM6_DAC_IRQHandler+0x3bc>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <TIM6_DAC_IRQHandler+0x3bc>)
 8004532:	6153      	str	r3, [r2, #20]
		sys.updateLCD = 1;
 8004534:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <TIM6_DAC_IRQHandler+0x3b4>)
 8004536:	7813      	ldrb	r3, [r2, #0]
 8004538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453c:	7013      	strb	r3, [r2, #0]
	}
	led1 = !led1;
 800453e:	4b10      	ldr	r3, [pc, #64]	; (8004580 <TIM6_DAC_IRQHandler+0x3c0>)
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	b2db      	uxtb	r3, r3
 8004548:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <TIM6_DAC_IRQHandler+0x3c0>)
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf0c      	ite	eq
 800454e:	2301      	moveq	r3, #1
 8004550:	2300      	movne	r3, #0
 8004552:	b2d9      	uxtb	r1, r3
 8004554:	7853      	ldrb	r3, [r2, #1]
 8004556:	f361 1345 	bfi	r3, r1, #5, #1
 800455a:	7053      	strb	r3, [r2, #1]
	//	UARTPrintString_IT(&huart5, data);
	HAL_TIM_IRQHandler(&htim6);
 800455c:	4809      	ldr	r0, [pc, #36]	; (8004584 <TIM6_DAC_IRQHandler+0x3c4>)
 800455e:	f00b fa8f 	bl	800fa80 <HAL_TIM_IRQHandler>
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20008540 	.word	0x20008540
 8004570:	20007e1c 	.word	0x20007e1c
 8004574:	2000893c 	.word	0x2000893c
 8004578:	20007da4 	.word	0x20007da4
 800457c:	200089fc 	.word	0x200089fc
 8004580:	40020814 	.word	0x40020814
 8004584:	2000676c 	.word	0x2000676c

08004588 <MainTask>:

	}
}

void MainTask(void *argument)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]

	jetson.header = 0; jetson.tail = 0;
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <MainTask+0xac>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <MainTask+0xac>)
 8004598:	2200      	movs	r2, #0
 800459a:	705a      	strb	r2, [r3, #1]
	sys.shootp1l=sys.shootp1r=0;
 800459c:	4a26      	ldr	r2, [pc, #152]	; (8004638 <MainTask+0xb0>)
 800459e:	7813      	ldrb	r3, [r2, #0]
 80045a0:	f36f 1304 	bfc	r3, #4, #1
 80045a4:	7013      	strb	r3, [r2, #0]
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <MainTask+0xb0>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80045ae:	b2d9      	uxtb	r1, r3
 80045b0:	4a21      	ldr	r2, [pc, #132]	; (8004638 <MainTask+0xb0>)
 80045b2:	7813      	ldrb	r3, [r2, #0]
 80045b4:	f361 1345 	bfi	r3, r1, #5, #1
 80045b8:	7013      	strb	r3, [r2, #0]
#ifdef USE_ONE_AXIS
	sys.shootp1r = 1;
 80045ba:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <MainTask+0xb0>)
 80045bc:	7813      	ldrb	r3, [r2, #0]
 80045be:	f043 0310 	orr.w	r3, r3, #16
 80045c2:	7013      	strb	r3, [r2, #0]
#endif
	rpm1 = rpm2 = rpm3 = rpm;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <MainTask+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <MainTask+0xb8>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <MainTask+0xb8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1c      	ldr	r2, [pc, #112]	; (8004644 <MainTask+0xbc>)
 80045d2:	6013      	str	r3, [r2, #0]
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <MainTask+0xbc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <MainTask+0xc0>)
 80045da:	6013      	str	r3, [r2, #0]
	while(1)
	{
		ServoSetPulse(&servo, servo.currentPulse);
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <MainTask+0xc4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4619      	mov	r1, r3
 80045e2:	481a      	ldr	r0, [pc, #104]	; (800464c <MainTask+0xc4>)
 80045e4:	f001 ff60 	bl	80064a8 <ServoSetPulse>
		ServoSetPulse(&servo1, servo1.currentPulse);
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <MainTask+0xc8>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4818      	ldr	r0, [pc, #96]	; (8004650 <MainTask+0xc8>)
 80045f0:	f001 ff5a 	bl	80064a8 <ServoSetPulse>
		sys.updateLCD = 1;
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <MainTask+0xb0>)
 80045f6:	7813      	ldrb	r3, [r2, #0]
 80045f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045fc:	7013      	strb	r3, [r2, #0]
		if(sys.elevate){
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <MainTask+0xb0>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02f      	beq.n	800466c <MainTask+0xe4>
			if(servo.currentPulse <= 1920 && servo.currentPulse >= 1200){
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <MainTask+0xc4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8004614:	d822      	bhi.n	800465c <MainTask+0xd4>
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <MainTask+0xc4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800461e:	d31d      	bcc.n	800465c <MainTask+0xd4>
				ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <MainTask+0xcc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <MainTask+0xd0>)
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	4809      	ldr	r0, [pc, #36]	; (8004650 <MainTask+0xc8>)
 800462c:	f001 ff85 	bl	800653a <ServoInitPulseLimit>
 8004630:	e01c      	b.n	800466c <MainTask+0xe4>
 8004632:	bf00      	nop
 8004634:	200089fc 	.word	0x200089fc
 8004638:	2000893c 	.word	0x2000893c
 800463c:	200089a8 	.word	0x200089a8
 8004640:	20008ab0 	.word	0x20008ab0
 8004644:	20008898 	.word	0x20008898
 8004648:	200089cc 	.word	0x200089cc
 800464c:	20007da4 	.word	0x20007da4
 8004650:	20007e1c 	.word	0x20007e1c
 8004654:	20008920 	.word	0x20008920
 8004658:	20008930 	.word	0x20008930
			}else{
				ServoInitPulseLimit(&servo1, UPMINPITCHPULSE, UPMAXPITCHPULSE);
 800465c:	4bb1      	ldr	r3, [pc, #708]	; (8004924 <MainTask+0x39c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4ab1      	ldr	r2, [pc, #708]	; (8004928 <MainTask+0x3a0>)
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4619      	mov	r1, r3
 8004666:	48b1      	ldr	r0, [pc, #708]	; (800492c <MainTask+0x3a4>)
 8004668:	f001 ff67 	bl	800653a <ServoInitPulseLimit>
			}
		}
		if(sys.updateLCD){
 800466c:	4bb0      	ldr	r3, [pc, #704]	; (8004930 <MainTask+0x3a8>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <MainTask+0x100>
			ILI9341_Update_List();
 800467a:	f005 fbf7 	bl	8009e6c <ILI9341_Update_List>
			sys.updateLCD = 0;
 800467e:	4aac      	ldr	r2, [pc, #688]	; (8004930 <MainTask+0x3a8>)
 8004680:	7813      	ldrb	r3, [r2, #0]
 8004682:	f36f 1386 	bfc	r3, #6, #1
 8004686:	7013      	strb	r3, [r2, #0]
		}

		if(ps4.button == TRIANGLE){
 8004688:	4baa      	ldr	r3, [pc, #680]	; (8004934 <MainTask+0x3ac>)
 800468a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d120      	bne.n	80046d4 <MainTask+0x14c>
			while(ps4.button == TRIANGLE);
 8004692:	bf00      	nop
 8004694:	4ba7      	ldr	r3, [pc, #668]	; (8004934 <MainTask+0x3ac>)
 8004696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469c:	d0fa      	beq.n	8004694 <MainTask+0x10c>
			led3 = !led3;
 800469e:	4ba6      	ldr	r3, [pc, #664]	; (8004938 <MainTask+0x3b0>)
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	4aa4      	ldr	r2, [pc, #656]	; (8004938 <MainTask+0x3b0>)
 80046a6:	43db      	mvns	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	09db      	lsrs	r3, r3, #7
 80046ac:	b2d9      	uxtb	r1, r3
 80046ae:	7853      	ldrb	r3, [r2, #1]
 80046b0:	f361 13c7 	bfi	r3, r1, #7, #1
 80046b4:	7053      	strb	r3, [r2, #1]
			sys.vesc3run = !sys.vesc3run;
 80046b6:	4b9e      	ldr	r3, [pc, #632]	; (8004930 <MainTask+0x3a8>)
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bf0c      	ite	eq
 80046c4:	2301      	moveq	r3, #1
 80046c6:	2300      	movne	r3, #0
 80046c8:	b2d9      	uxtb	r1, r3
 80046ca:	4a99      	ldr	r2, [pc, #612]	; (8004930 <MainTask+0x3a8>)
 80046cc:	7853      	ldrb	r3, [r2, #1]
 80046ce:	f361 0382 	bfi	r3, r1, #2, #1
 80046d2:	7053      	strb	r3, [r2, #1]
		}

		if(ps4.button == SQUARE){
 80046d4:	4b97      	ldr	r3, [pc, #604]	; (8004934 <MainTask+0x3ac>)
 80046d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	d136      	bne.n	800474c <MainTask+0x1c4>
			while(ps4.button == SQUARE);
 80046de:	bf00      	nop
 80046e0:	4b94      	ldr	r3, [pc, #592]	; (8004934 <MainTask+0x3ac>)
 80046e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e8:	d0fa      	beq.n	80046e0 <MainTask+0x158>
			led3 = !led3;
 80046ea:	4b93      	ldr	r3, [pc, #588]	; (8004938 <MainTask+0x3b0>)
 80046ec:	785b      	ldrb	r3, [r3, #1]
 80046ee:	b25b      	sxtb	r3, r3
 80046f0:	4a91      	ldr	r2, [pc, #580]	; (8004938 <MainTask+0x3b0>)
 80046f2:	43db      	mvns	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	b2d9      	uxtb	r1, r3
 80046fa:	7853      	ldrb	r3, [r2, #1]
 80046fc:	f361 13c7 	bfi	r3, r1, #7, #1
 8004700:	7053      	strb	r3, [r2, #1]
			if(tracking){
 8004702:	4b8e      	ldr	r3, [pc, #568]	; (800493c <MainTask+0x3b4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <MainTask+0x1a6>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 800470a:	4b8d      	ldr	r3, [pc, #564]	; (8004940 <MainTask+0x3b8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f00d f95e 	bl	80119d0 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004714:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <MainTask+0x3bc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f00d f959 	bl	80119d0 <osThreadSuspend>
				yawDelay = 0;
 800471e:	4b8a      	ldr	r3, [pc, #552]	; (8004948 <MainTask+0x3c0>)
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 8004726:	4b89      	ldr	r3, [pc, #548]	; (800494c <MainTask+0x3c4>)
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
			}
				FEED;
 800472e:	4a88      	ldr	r2, [pc, #544]	; (8004950 <MainTask+0x3c8>)
 8004730:	7f13      	ldrb	r3, [r2, #28]
 8004732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004736:	7713      	strb	r3, [r2, #28]
				osDelay(GATEDOWNDELAY);
 8004738:	4b86      	ldr	r3, [pc, #536]	; (8004954 <MainTask+0x3cc>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f00d f9b6 	bl	8011aae <osDelay>
				KEEP;
 8004742:	4a83      	ldr	r2, [pc, #524]	; (8004950 <MainTask+0x3c8>)
 8004744:	7f13      	ldrb	r3, [r2, #28]
 8004746:	f36f 13c7 	bfc	r3, #7, #1
 800474a:	7713      	strb	r3, [r2, #28]
//			}
		}

		if(ps4.button == L1){
 800474c:	4b79      	ldr	r3, [pc, #484]	; (8004934 <MainTask+0x3ac>)
 800474e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d173      	bne.n	800483e <MainTask+0x2b6>
			while(ps4.button == L1);
 8004756:	bf00      	nop
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <MainTask+0x3ac>)
 800475a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800475c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004760:	d0fa      	beq.n	8004758 <MainTask+0x1d0>
			tracking = !tracking;
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <MainTask+0x3b4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	4b72      	ldr	r3, [pc, #456]	; (800493c <MainTask+0x3b4>)
 8004774:	601a      	str	r2, [r3, #0]
			led3 = !led3;
 8004776:	4b70      	ldr	r3, [pc, #448]	; (8004938 <MainTask+0x3b0>)
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	b25b      	sxtb	r3, r3
 800477c:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <MainTask+0x3b0>)
 800477e:	43db      	mvns	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	b2d9      	uxtb	r1, r3
 8004786:	7853      	ldrb	r3, [r2, #1]
 8004788:	f361 13c7 	bfi	r3, r1, #7, #1
 800478c:	7053      	strb	r3, [r2, #1]
			char command = 't';
 800478e:	2374      	movs	r3, #116	; 0x74
 8004790:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004792:	f107 010f 	add.w	r1, r7, #15
 8004796:	2301      	movs	r3, #1
 8004798:	2201      	movs	r2, #1
 800479a:	486f      	ldr	r0, [pc, #444]	; (8004958 <MainTask+0x3d0>)
 800479c:	f00c f817 	bl	80107ce <HAL_UART_Transmit>
			if(!tracking){
 80047a0:	4b66      	ldr	r3, [pc, #408]	; (800493c <MainTask+0x3b4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d136      	bne.n	8004816 <MainTask+0x28e>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80047a8:	4b65      	ldr	r3, [pc, #404]	; (8004940 <MainTask+0x3b8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f00d f90f 	bl	80119d0 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 80047b2:	4b64      	ldr	r3, [pc, #400]	; (8004944 <MainTask+0x3bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f00d f90a 	bl	80119d0 <osThreadSuspend>
				yawDelay = 0;
 80047bc:	4b62      	ldr	r3, [pc, #392]	; (8004948 <MainTask+0x3c0>)
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 80047c4:	4b61      	ldr	r3, [pc, #388]	; (800494c <MainTask+0x3c4>)
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
				jetson.x_pixel = 0;
 80047cc:	4b63      	ldr	r3, [pc, #396]	; (800495c <MainTask+0x3d4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]
				jetson.y_pixel = 0;
 80047d2:	4b62      	ldr	r3, [pc, #392]	; (800495c <MainTask+0x3d4>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
				sys.pid = 0;
 80047d8:	4a55      	ldr	r2, [pc, #340]	; (8004930 <MainTask+0x3a8>)
 80047da:	7813      	ldrb	r3, [r2, #0]
 80047dc:	f36f 0341 	bfc	r3, #1, #1
 80047e0:	7013      	strb	r3, [r2, #0]
				sys.pidPitch = 0;
 80047e2:	4a53      	ldr	r2, [pc, #332]	; (8004930 <MainTask+0x3a8>)
 80047e4:	7813      	ldrb	r3, [r2, #0]
 80047e6:	f36f 0382 	bfc	r3, #2, #1
 80047ea:	7013      	strb	r3, [r2, #0]
				PIDDelayInit(&Pid_Camera);
 80047ec:	485c      	ldr	r0, [pc, #368]	; (8004960 <MainTask+0x3d8>)
 80047ee:	f001 f8d8 	bl	80059a2 <PIDDelayInit>
				PIDDelayInit(&Pid_Camera_Pitch);
 80047f2:	485c      	ldr	r0, [pc, #368]	; (8004964 <MainTask+0x3dc>)
 80047f4:	f001 f8d5 	bl	80059a2 <PIDDelayInit>
				sys.shootp1l = sys.shootp1r = 0;
 80047f8:	4a4d      	ldr	r2, [pc, #308]	; (8004930 <MainTask+0x3a8>)
 80047fa:	7813      	ldrb	r3, [r2, #0]
 80047fc:	f36f 1304 	bfc	r3, #4, #1
 8004800:	7013      	strb	r3, [r2, #0]
 8004802:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <MainTask+0x3a8>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800480a:	b2d9      	uxtb	r1, r3
 800480c:	4a48      	ldr	r2, [pc, #288]	; (8004930 <MainTask+0x3a8>)
 800480e:	7813      	ldrb	r3, [r2, #0]
 8004810:	f361 1345 	bfi	r3, r1, #5, #1
 8004814:	7013      	strb	r3, [r2, #0]
			}
			if(tracking){
 8004816:	4b49      	ldr	r3, [pc, #292]	; (800493c <MainTask+0x3b4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00f      	beq.n	800483e <MainTask+0x2b6>
				osDelay(50);
 800481e:	2032      	movs	r0, #50	; 0x32
 8004820:	f00d f945 	bl	8011aae <osDelay>
				sys.pid = 1;
 8004824:	4a42      	ldr	r2, [pc, #264]	; (8004930 <MainTask+0x3a8>)
 8004826:	7813      	ldrb	r3, [r2, #0]
 8004828:	f043 0302 	orr.w	r3, r3, #2
 800482c:	7013      	strb	r3, [r2, #0]
				osThreadResume(FlywheelYawPIDTaskHandle);
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <MainTask+0x3bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f00d f8ed 	bl	8011a12 <osThreadResume>
				jetson.update = 0;
 8004838:	4b48      	ldr	r3, [pc, #288]	; (800495c <MainTask+0x3d4>)
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]
				osThreadResume(FlywheelPitchPIDTaskHandle);
#endif
			}
		}

		if(ps4.button == OPTION){
 800483e:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <MainTask+0x3ac>)
 8004840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d10d      	bne.n	8004864 <MainTask+0x2dc>
			while(ps4.button == OPTION);
 8004848:	bf00      	nop
 800484a:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <MainTask+0x3ac>)
 800484c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004852:	d0fa      	beq.n	800484a <MainTask+0x2c2>
			sys.autoLagori = 1;
 8004854:	4a36      	ldr	r2, [pc, #216]	; (8004930 <MainTask+0x3a8>)
 8004856:	7853      	ldrb	r3, [r2, #1]
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	7053      	strb	r3, [r2, #1]
			counter = 0;
 800485e:	4b42      	ldr	r3, [pc, #264]	; (8004968 <MainTask+0x3e0>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
		}
		if(sys.autoLagori){
 8004864:	4b32      	ldr	r3, [pc, #200]	; (8004930 <MainTask+0x3a8>)
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01f      	beq.n	80048b2 <MainTask+0x32a>
			sys.vesc3run = 1;
 8004872:	4a2f      	ldr	r2, [pc, #188]	; (8004930 <MainTask+0x3a8>)
 8004874:	7853      	ldrb	r3, [r2, #1]
 8004876:	f043 0304 	orr.w	r3, r3, #4
 800487a:	7053      	strb	r3, [r2, #1]
			if(counter >= shootDelay){
 800487c:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <MainTask+0x3e0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	4b3a      	ldr	r3, [pc, #232]	; (800496c <MainTask+0x3e4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d313      	bcc.n	80048b2 <MainTask+0x32a>
				FEED;
 800488a:	4a31      	ldr	r2, [pc, #196]	; (8004950 <MainTask+0x3c8>)
 800488c:	7f13      	ldrb	r3, [r2, #28]
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	7713      	strb	r3, [r2, #28]
				osDelay(GATEDOWNDELAY);
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <MainTask+0x3cc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f00d f908 	bl	8011aae <osDelay>
				KEEP;
 800489e:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <MainTask+0x3c8>)
 80048a0:	7f13      	ldrb	r3, [r2, #28]
 80048a2:	f36f 13c7 	bfc	r3, #7, #1
 80048a6:	7713      	strb	r3, [r2, #28]
				sys.autoLagori = 0;
 80048a8:	4a21      	ldr	r2, [pc, #132]	; (8004930 <MainTask+0x3a8>)
 80048aa:	7853      	ldrb	r3, [r2, #1]
 80048ac:	f36f 03c3 	bfc	r3, #3, #1
 80048b0:	7053      	strb	r3, [r2, #1]
			}
		}
		// Run Flywheel

		if(sys.vesc3run){
 80048b2:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <MainTask+0x3a8>)
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <MainTask+0x368>
			comm_can_set_duty(VESC1, rpm1);
 80048c0:	4b2b      	ldr	r3, [pc, #172]	; (8004970 <MainTask+0x3e8>)
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ca:	206f      	movs	r0, #111	; 0x6f
 80048cc:	f003 fed0 	bl	8008670 <comm_can_set_duty>
			comm_can_set_duty(VESC2, rpm2);
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <MainTask+0x3ec>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	eeb0 0a67 	vmov.f32	s0, s15
 80048da:	2070      	movs	r0, #112	; 0x70
 80048dc:	f003 fec8 	bl	8008670 <comm_can_set_duty>
			comm_can_set_duty(VESC3, rpm3);
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <MainTask+0x3f0>)
 80048e2:	edd3 7a00 	vldr	s15, [r3]
 80048e6:	eeb0 0a67 	vmov.f32	s0, s15
 80048ea:	2071      	movs	r0, #113	; 0x71
 80048ec:	f003 fec0 	bl	8008670 <comm_can_set_duty>
		}
		if(ps4.button == UP_CIRCLE){
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <MainTask+0x3ac>)
 80048f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f4:	f242 0210 	movw	r2, #8208	; 0x2010
 80048f8:	4293      	cmp	r3, r2
 80048fa:	f040 808b 	bne.w	8004a14 <MainTask+0x48c>
			while(ps4.button == UP_CIRCLE);
 80048fe:	bf00      	nop
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <MainTask+0x3ac>)
 8004902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004904:	f242 0210 	movw	r2, #8208	; 0x2010
 8004908:	4293      	cmp	r3, r2
 800490a:	d0f9      	beq.n	8004900 <MainTask+0x378>
			sys.elevate = !sys.elevate;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <MainTask+0x3a8>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2d9      	uxtb	r1, r3
 8004920:	e02c      	b.n	800497c <MainTask+0x3f4>
 8004922:	bf00      	nop
 8004924:	200089f0 	.word	0x200089f0
 8004928:	200089c0 	.word	0x200089c0
 800492c:	20007e1c 	.word	0x20007e1c
 8004930:	2000893c 	.word	0x2000893c
 8004934:	20008540 	.word	0x20008540
 8004938:	40020814 	.word	0x40020814
 800493c:	200089b4 	.word	0x200089b4
 8004940:	2000899c 	.word	0x2000899c
 8004944:	2000892c 	.word	0x2000892c
 8004948:	200089ac 	.word	0x200089ac
 800494c:	20008914 	.word	0x20008914
 8004950:	20007d2c 	.word	0x20007d2c
 8004954:	20008910 	.word	0x20008910
 8004958:	20006870 	.word	0x20006870
 800495c:	200089fc 	.word	0x200089fc
 8004960:	200088b0 	.word	0x200088b0
 8004964:	20008a38 	.word	0x20008a38
 8004968:	20007e68 	.word	0x20007e68
 800496c:	200089bc 	.word	0x200089bc
 8004970:	200089cc 	.word	0x200089cc
 8004974:	20008898 	.word	0x20008898
 8004978:	20008ab0 	.word	0x20008ab0
 800497c:	4a70      	ldr	r2, [pc, #448]	; (8004b40 <MainTask+0x5b8>)
 800497e:	7813      	ldrb	r3, [r2, #0]
 8004980:	f361 03c3 	bfi	r3, r1, #3, #1
 8004984:	7013      	strb	r3, [r2, #0]
			if(sys.elevate){ //up
 8004986:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <MainTask+0x5b8>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01a      	beq.n	80049ca <MainTask+0x442>
				ELEVATE;
 8004994:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <MainTask+0x5bc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800499c:	641a      	str	r2, [r3, #64]	; 0x40
				ServoInitPulseLimit(&servo, UPMINYAWPULSE, UPMAXYAWPULSE);
 800499e:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <MainTask+0x5c0>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a6a      	ldr	r2, [pc, #424]	; (8004b4c <MainTask+0x5c4>)
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4869      	ldr	r0, [pc, #420]	; (8004b50 <MainTask+0x5c8>)
 80049aa:	f001 fdc6 	bl	800653a <ServoInitPulseLimit>
				ServoInitPulseLimit(&servo1, UPMINPITCHPULSE, UPMAXPITCHPULSE);
 80049ae:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <MainTask+0x5cc>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a69      	ldr	r2, [pc, #420]	; (8004b58 <MainTask+0x5d0>)
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4868      	ldr	r0, [pc, #416]	; (8004b5c <MainTask+0x5d4>)
 80049ba:	f001 fdbe 	bl	800653a <ServoInitPulseLimit>
				GATE_UP;
 80049be:	4a68      	ldr	r2, [pc, #416]	; (8004b60 <MainTask+0x5d8>)
 80049c0:	7f13      	ldrb	r3, [r2, #28]
 80049c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c6:	7713      	strb	r3, [r2, #28]
 80049c8:	e024      	b.n	8004a14 <MainTask+0x48c>
			}else{//down
				LOWER;
 80049ca:	4b5e      	ldr	r3, [pc, #376]	; (8004b44 <MainTask+0x5bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
				ServoInitPulseLimit(&servo, DOWNMINYAWPULSE, DOWNMAXYAWPULSE);
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <MainTask+0x5dc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a64      	ldr	r2, [pc, #400]	; (8004b68 <MainTask+0x5e0>)
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	4619      	mov	r1, r3
 80049dc:	485c      	ldr	r0, [pc, #368]	; (8004b50 <MainTask+0x5c8>)
 80049de:	f001 fdac 	bl	800653a <ServoInitPulseLimit>
				ServoInitPulseLimit(&servo1, DOWNMINPITCHPULSE, DOWNMAXPITCHPULSE);
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <MainTask+0x5e4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a62      	ldr	r2, [pc, #392]	; (8004b70 <MainTask+0x5e8>)
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4619      	mov	r1, r3
 80049ec:	485b      	ldr	r0, [pc, #364]	; (8004b5c <MainTask+0x5d4>)
 80049ee:	f001 fda4 	bl	800653a <ServoInitPulseLimit>
				ServoSetPulse(&servo, DOWNLAGORIYAWPULSE);
 80049f2:	4b60      	ldr	r3, [pc, #384]	; (8004b74 <MainTask+0x5ec>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4855      	ldr	r0, [pc, #340]	; (8004b50 <MainTask+0x5c8>)
 80049fa:	f001 fd55 	bl	80064a8 <ServoSetPulse>
				ServoSetPulse(&servo1, DOWNLAGORIPITCHPULSE);
 80049fe:	4b5e      	ldr	r3, [pc, #376]	; (8004b78 <MainTask+0x5f0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4855      	ldr	r0, [pc, #340]	; (8004b5c <MainTask+0x5d4>)
 8004a06:	f001 fd4f 	bl	80064a8 <ServoSetPulse>
				GATE_DOWN;
 8004a0a:	4a55      	ldr	r2, [pc, #340]	; (8004b60 <MainTask+0x5d8>)
 8004a0c:	7f13      	ldrb	r3, [r2, #28]
 8004a0e:	f36f 1386 	bfc	r3, #6, #1
 8004a12:	7713      	strb	r3, [r2, #28]
			}
		}

		if(!tracking){
 8004a14:	4b59      	ldr	r3, [pc, #356]	; (8004b7c <MainTask+0x5f4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d141      	bne.n	8004aa0 <MainTask+0x518>
			if(ps4.button == UP){
 8004a1c:	4b58      	ldr	r3, [pc, #352]	; (8004b80 <MainTask+0x5f8>)
 8004a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d10c      	bne.n	8004a3e <MainTask+0x4b6>
				while(ps4.button == UP);
 8004a24:	bf00      	nop
 8004a26:	4b56      	ldr	r3, [pc, #344]	; (8004b80 <MainTask+0x5f8>)
 8004a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d0fb      	beq.n	8004a26 <MainTask+0x49e>
				Pitch(-PITCHUPJERKPULSE);
 8004a2e:	4b55      	ldr	r3, [pc, #340]	; (8004b84 <MainTask+0x5fc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	425b      	negs	r3, r3
 8004a34:	4619      	mov	r1, r3
 8004a36:	4849      	ldr	r0, [pc, #292]	; (8004b5c <MainTask+0x5d4>)
 8004a38:	f001 fd91 	bl	800655e <ServoMovePulse>
 8004a3c:	e00e      	b.n	8004a5c <MainTask+0x4d4>
			}else if(ps4.button == DOWN){
 8004a3e:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <MainTask+0x5f8>)
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d10a      	bne.n	8004a5c <MainTask+0x4d4>
				while(ps4.button == DOWN);
 8004a46:	bf00      	nop
 8004a48:	4b4d      	ldr	r3, [pc, #308]	; (8004b80 <MainTask+0x5f8>)
 8004a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d0fb      	beq.n	8004a48 <MainTask+0x4c0>
				Pitch(PITCHJERKPULSE);
 8004a50:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <MainTask+0x600>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4619      	mov	r1, r3
 8004a56:	4841      	ldr	r0, [pc, #260]	; (8004b5c <MainTask+0x5d4>)
 8004a58:	f001 fd81 	bl	800655e <ServoMovePulse>
			}

			if(ps4.button == LEFT){
 8004a5c:	4b48      	ldr	r3, [pc, #288]	; (8004b80 <MainTask+0x5f8>)
 8004a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d10b      	bne.n	8004a7c <MainTask+0x4f4>
				while(ps4.button == LEFT);
 8004a64:	bf00      	nop
 8004a66:	4b46      	ldr	r3, [pc, #280]	; (8004b80 <MainTask+0x5f8>)
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	d0fb      	beq.n	8004a66 <MainTask+0x4de>
				Yaw(YAWJERKPULSE);
 8004a6e:	4b47      	ldr	r3, [pc, #284]	; (8004b8c <MainTask+0x604>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4836      	ldr	r0, [pc, #216]	; (8004b50 <MainTask+0x5c8>)
 8004a76:	f001 fd72 	bl	800655e <ServoMovePulse>
 8004a7a:	e0f5      	b.n	8004c68 <MainTask+0x6e0>
			}else if(ps4.button == RIGHT){
 8004a7c:	4b40      	ldr	r3, [pc, #256]	; (8004b80 <MainTask+0x5f8>)
 8004a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	f040 80f1 	bne.w	8004c68 <MainTask+0x6e0>
				while(ps4.button == RIGHT);
 8004a86:	bf00      	nop
 8004a88:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <MainTask+0x5f8>)
 8004a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d0fb      	beq.n	8004a88 <MainTask+0x500>
				Yaw(-YAWJERKPULSE);
 8004a90:	4b3e      	ldr	r3, [pc, #248]	; (8004b8c <MainTask+0x604>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	425b      	negs	r3, r3
 8004a96:	4619      	mov	r1, r3
 8004a98:	482d      	ldr	r0, [pc, #180]	; (8004b50 <MainTask+0x5c8>)
 8004a9a:	f001 fd60 	bl	800655e <ServoMovePulse>
 8004a9e:	e0e3      	b.n	8004c68 <MainTask+0x6e0>
//				char command = 't';
//				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
//				jetson.update = 0;
//			}
		}else{
			if(ps4.button == LEFT){
 8004aa0:	4b37      	ldr	r3, [pc, #220]	; (8004b80 <MainTask+0x5f8>)
 8004aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa4:	2b80      	cmp	r3, #128	; 0x80
 8004aa6:	d115      	bne.n	8004ad4 <MainTask+0x54c>
				while(ps4.button == LEFT);
 8004aa8:	bf00      	nop
 8004aaa:	4b35      	ldr	r3, [pc, #212]	; (8004b80 <MainTask+0x5f8>)
 8004aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aae:	2b80      	cmp	r3, #128	; 0x80
 8004ab0:	d0fb      	beq.n	8004aaa <MainTask+0x522>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <MainTask+0x608>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f00c ff8a 	bl	80119d0 <osThreadSuspend>
				sys.yawrun = 0;
 8004abc:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <MainTask+0x5b8>)
 8004abe:	7853      	ldrb	r3, [r2, #1]
 8004ac0:	f36f 0301 	bfc	r3, #0, #2
 8004ac4:	7053      	strb	r3, [r2, #1]
				Yaw(YAWJERKPULSE);
 8004ac6:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <MainTask+0x604>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4820      	ldr	r0, [pc, #128]	; (8004b50 <MainTask+0x5c8>)
 8004ace:	f001 fd46 	bl	800655e <ServoMovePulse>
 8004ad2:	e019      	b.n	8004b08 <MainTask+0x580>
			}else if(ps4.button == RIGHT){
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <MainTask+0x5f8>)
 8004ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	d115      	bne.n	8004b08 <MainTask+0x580>
				while(ps4.button == RIGHT);
 8004adc:	bf00      	nop
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <MainTask+0x5f8>)
 8004ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d0fb      	beq.n	8004ade <MainTask+0x556>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <MainTask+0x608>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00c ff70 	bl	80119d0 <osThreadSuspend>
				sys.yawrun = 0;
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <MainTask+0x5b8>)
 8004af2:	7853      	ldrb	r3, [r2, #1]
 8004af4:	f36f 0301 	bfc	r3, #0, #2
 8004af8:	7053      	strb	r3, [r2, #1]
				Yaw(-YAWJERKPULSE);
 8004afa:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <MainTask+0x604>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	425b      	negs	r3, r3
 8004b00:	4619      	mov	r1, r3
 8004b02:	4813      	ldr	r0, [pc, #76]	; (8004b50 <MainTask+0x5c8>)
 8004b04:	f001 fd2b 	bl	800655e <ServoMovePulse>
			}

			if(ps4.button == UP){
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <MainTask+0x5f8>)
 8004b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0c:	2b10      	cmp	r3, #16
 8004b0e:	d143      	bne.n	8004b98 <MainTask+0x610>
				while(ps4.button == UP);
 8004b10:	bf00      	nop
 8004b12:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <MainTask+0x5f8>)
 8004b14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d0fb      	beq.n	8004b12 <MainTask+0x58a>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <MainTask+0x60c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f00c ff56 	bl	80119d0 <osThreadSuspend>
				Pitch(-PITCHUPJERKPULSE);
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <MainTask+0x5fc>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	425b      	negs	r3, r3
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480b      	ldr	r0, [pc, #44]	; (8004b5c <MainTask+0x5d4>)
 8004b2e:	f001 fd16 	bl	800655e <ServoMovePulse>
				sys.pitchrun = 0;
 8004b32:	4a03      	ldr	r2, [pc, #12]	; (8004b40 <MainTask+0x5b8>)
 8004b34:	7813      	ldrb	r3, [r2, #0]
 8004b36:	f36f 13c7 	bfc	r3, #7, #1
 8004b3a:	7013      	strb	r3, [r2, #0]
 8004b3c:	e045      	b.n	8004bca <MainTask+0x642>
 8004b3e:	bf00      	nop
 8004b40:	2000893c 	.word	0x2000893c
 8004b44:	20006560 	.word	0x20006560
 8004b48:	2000891c 	.word	0x2000891c
 8004b4c:	20008a98 	.word	0x20008a98
 8004b50:	20007da4 	.word	0x20007da4
 8004b54:	200089f0 	.word	0x200089f0
 8004b58:	200089c0 	.word	0x200089c0
 8004b5c:	20007e1c 	.word	0x20007e1c
 8004b60:	20007d2c 	.word	0x20007d2c
 8004b64:	20008aac 	.word	0x20008aac
 8004b68:	20008940 	.word	0x20008940
 8004b6c:	20008920 	.word	0x20008920
 8004b70:	20008930 	.word	0x20008930
 8004b74:	20008994 	.word	0x20008994
 8004b78:	20008a90 	.word	0x20008a90
 8004b7c:	200089b4 	.word	0x200089b4
 8004b80:	20008540 	.word	0x20008540
 8004b84:	200089e4 	.word	0x200089e4
 8004b88:	20008974 	.word	0x20008974
 8004b8c:	20008918 	.word	0x20008918
 8004b90:	2000892c 	.word	0x2000892c
 8004b94:	2000899c 	.word	0x2000899c
			}else if(ps4.button == DOWN){
 8004b98:	4b97      	ldr	r3, [pc, #604]	; (8004df8 <MainTask+0x870>)
 8004b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d114      	bne.n	8004bca <MainTask+0x642>
				while(ps4.button == DOWN);
 8004ba0:	bf00      	nop
 8004ba2:	4b95      	ldr	r3, [pc, #596]	; (8004df8 <MainTask+0x870>)
 8004ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d0fb      	beq.n	8004ba2 <MainTask+0x61a>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004baa:	4b94      	ldr	r3, [pc, #592]	; (8004dfc <MainTask+0x874>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f00c ff0e 	bl	80119d0 <osThreadSuspend>
				Pitch(PITCHJERKPULSE);
 8004bb4:	4b92      	ldr	r3, [pc, #584]	; (8004e00 <MainTask+0x878>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4892      	ldr	r0, [pc, #584]	; (8004e04 <MainTask+0x87c>)
 8004bbc:	f001 fccf 	bl	800655e <ServoMovePulse>
				sys.pitchrun = 0;
 8004bc0:	4a91      	ldr	r2, [pc, #580]	; (8004e08 <MainTask+0x880>)
 8004bc2:	7813      	ldrb	r3, [r2, #0]
 8004bc4:	f36f 13c7 	bfc	r3, #7, #1
 8004bc8:	7013      	strb	r3, [r2, #0]
			}

			if(jetson.state == 'd'){
 8004bca:	4b90      	ldr	r3, [pc, #576]	; (8004e0c <MainTask+0x884>)
 8004bcc:	7c1b      	ldrb	r3, [r3, #16]
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d10b      	bne.n	8004bea <MainTask+0x662>
				char command = 't';
 8004bd2:	2374      	movs	r3, #116	; 0x74
 8004bd4:	73bb      	strb	r3, [r7, #14]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004bd6:	f107 010e 	add.w	r1, r7, #14
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2201      	movs	r2, #1
 8004bde:	488c      	ldr	r0, [pc, #560]	; (8004e10 <MainTask+0x888>)
 8004be0:	f00b fdf5 	bl	80107ce <HAL_UART_Transmit>
				jetson.update = 0;
 8004be4:	4b89      	ldr	r3, [pc, #548]	; (8004e0c <MainTask+0x884>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	619a      	str	r2, [r3, #24]
			}

			if(jetson.update >= jetsonUpdateDelay){
 8004bea:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <MainTask+0x884>)
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	4b89      	ldr	r3, [pc, #548]	; (8004e14 <MainTask+0x88c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d308      	bcc.n	8004c08 <MainTask+0x680>
				char command = 't';
 8004bf6:	2374      	movs	r3, #116	; 0x74
 8004bf8:	737b      	strb	r3, [r7, #13]
				HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
 8004bfa:	f107 010d 	add.w	r1, r7, #13
 8004bfe:	2301      	movs	r3, #1
 8004c00:	2201      	movs	r2, #1
 8004c02:	4883      	ldr	r0, [pc, #524]	; (8004e10 <MainTask+0x888>)
 8004c04:	f00b fde3 	bl	80107ce <HAL_UART_Transmit>
			}
			if(jetson.timeout >= jetsonTimeout){
 8004c08:	4b80      	ldr	r3, [pc, #512]	; (8004e0c <MainTask+0x884>)
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b82      	ldr	r3, [pc, #520]	; (8004e18 <MainTask+0x890>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d328      	bcc.n	8004c68 <MainTask+0x6e0>
				tracking = 0;
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <MainTask+0x894>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
				jetson.x_pixel = 0;
 8004c1c:	4b7b      	ldr	r3, [pc, #492]	; (8004e0c <MainTask+0x884>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	605a      	str	r2, [r3, #4]
				jetson.y_pixel = 0;
 8004c22:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <MainTask+0x884>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
				sys.pid = 0;
 8004c28:	4a77      	ldr	r2, [pc, #476]	; (8004e08 <MainTask+0x880>)
 8004c2a:	7813      	ldrb	r3, [r2, #0]
 8004c2c:	f36f 0341 	bfc	r3, #1, #1
 8004c30:	7013      	strb	r3, [r2, #0]
				jetson.timeout = 0;
 8004c32:	4b76      	ldr	r3, [pc, #472]	; (8004e0c <MainTask+0x884>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
				PIDDelayInit(&Pid_Camera);
 8004c38:	4879      	ldr	r0, [pc, #484]	; (8004e20 <MainTask+0x898>)
 8004c3a:	f000 feb2 	bl	80059a2 <PIDDelayInit>
				PIDDelayInit(&Pid_Camera_Pitch);
 8004c3e:	4879      	ldr	r0, [pc, #484]	; (8004e24 <MainTask+0x89c>)
 8004c40:	f000 feaf 	bl	80059a2 <PIDDelayInit>
				yawDelay = 0;
 8004c44:	4b78      	ldr	r3, [pc, #480]	; (8004e28 <MainTask+0x8a0>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
				pitchDelay = 0;
 8004c4c:	4b77      	ldr	r3, [pc, #476]	; (8004e2c <MainTask+0x8a4>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004c54:	4b69      	ldr	r3, [pc, #420]	; (8004dfc <MainTask+0x874>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f00c feb9 	bl	80119d0 <osThreadSuspend>
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004c5e:	4b74      	ldr	r3, [pc, #464]	; (8004e30 <MainTask+0x8a8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f00c feb4 	bl	80119d0 <osThreadSuspend>
//			char command = 'l';
//			HAL_UART_Transmit(&huart4,(uint8_t *)&command, 1, 1);
//		}

		//update
		if(ps4.button == R1){
 8004c68:	4b63      	ldr	r3, [pc, #396]	; (8004df8 <MainTask+0x870>)
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d12d      	bne.n	8004cce <MainTask+0x746>
			while(ps4.button == R1);
 8004c72:	bf00      	nop
 8004c74:	4b60      	ldr	r3, [pc, #384]	; (8004df8 <MainTask+0x870>)
 8004c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d0fa      	beq.n	8004c74 <MainTask+0x6ec>
			if(sys.yawrun == 0){
 8004c7e:	4b62      	ldr	r3, [pc, #392]	; (8004e08 <MainTask+0x880>)
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <MainTask+0x710>
				osThreadResume(FlywheelYawPIDTaskHandle);
 8004c8c:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <MainTask+0x8a8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f00c febe 	bl	8011a12 <osThreadResume>
 8004c96:	e009      	b.n	8004cac <MainTask+0x724>
			}else{
				osThreadSuspend(FlywheelYawPIDTaskHandle);
 8004c98:	4b65      	ldr	r3, [pc, #404]	; (8004e30 <MainTask+0x8a8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f00c fe97 	bl	80119d0 <osThreadSuspend>
				sys.yawrun = 0;
 8004ca2:	4a59      	ldr	r2, [pc, #356]	; (8004e08 <MainTask+0x880>)
 8004ca4:	7853      	ldrb	r3, [r2, #1]
 8004ca6:	f36f 0301 	bfc	r3, #0, #2
 8004caa:	7053      	strb	r3, [r2, #1]
			}

			if(sys.pitchrun == 1){
 8004cac:	4b56      	ldr	r3, [pc, #344]	; (8004e08 <MainTask+0x880>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <MainTask+0x746>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 8004cba:	4b50      	ldr	r3, [pc, #320]	; (8004dfc <MainTask+0x874>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f00c fe86 	bl	80119d0 <osThreadSuspend>
				sys.pitchrun = 0;
 8004cc4:	4a50      	ldr	r2, [pc, #320]	; (8004e08 <MainTask+0x880>)
 8004cc6:	7813      	ldrb	r3, [r2, #0]
 8004cc8:	f36f 13c7 	bfc	r3, #7, #1
 8004ccc:	7013      	strb	r3, [r2, #0]
			}
		}

		//Start tracking

		if(lastyawP != yawP || lastyawI != yawI || lastyawD != yawD){
 8004cce:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <MainTask+0x8ac>)
 8004cd0:	ed93 7a00 	vldr	s14, [r3]
 8004cd4:	4b58      	ldr	r3, [pc, #352]	; (8004e38 <MainTask+0x8b0>)
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	eeb4 7a67 	vcmp.f32	s14, s15
 8004cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce2:	d115      	bne.n	8004d10 <MainTask+0x788>
 8004ce4:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <MainTask+0x8b4>)
 8004ce6:	ed93 7a00 	vldr	s14, [r3]
 8004cea:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <MainTask+0x8b8>)
 8004cec:	edd3 7a00 	vldr	s15, [r3]
 8004cf0:	eeb4 7a67 	vcmp.f32	s14, s15
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	d10a      	bne.n	8004d10 <MainTask+0x788>
 8004cfa:	4b52      	ldr	r3, [pc, #328]	; (8004e44 <MainTask+0x8bc>)
 8004cfc:	ed93 7a00 	vldr	s14, [r3]
 8004d00:	4b51      	ldr	r3, [pc, #324]	; (8004e48 <MainTask+0x8c0>)
 8004d02:	edd3 7a00 	vldr	s15, [r3]
 8004d06:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d0e:	d027      	beq.n	8004d60 <MainTask+0x7d8>
			PIDGainInit(0.03, 1.0, 1/320.0, YAW_LONGEST_DELAY, yawP, yawI, yawD, 60.0, &Pid_Camera);
 8004d10:	4b49      	ldr	r3, [pc, #292]	; (8004e38 <MainTask+0x8b0>)
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	4b4a      	ldr	r3, [pc, #296]	; (8004e40 <MainTask+0x8b8>)
 8004d18:	ed93 7a00 	vldr	s14, [r3]
 8004d1c:	4b4a      	ldr	r3, [pc, #296]	; (8004e48 <MainTask+0x8c0>)
 8004d1e:	edd3 6a00 	vldr	s13, [r3]
 8004d22:	483f      	ldr	r0, [pc, #252]	; (8004e20 <MainTask+0x898>)
 8004d24:	eddf 3a49 	vldr	s7, [pc, #292]	; 8004e4c <MainTask+0x8c4>
 8004d28:	eeb0 3a66 	vmov.f32	s6, s13
 8004d2c:	eef0 2a47 	vmov.f32	s5, s14
 8004d30:	eeb0 2a67 	vmov.f32	s4, s15
 8004d34:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8004d38:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8004e50 <MainTask+0x8c8>
 8004d3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004d40:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004e54 <MainTask+0x8cc>
 8004d44:	f000 fcbf 	bl	80056c6 <PIDGainInit>
			lastyawP = yawP;
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <MainTask+0x8b0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a39      	ldr	r2, [pc, #228]	; (8004e34 <MainTask+0x8ac>)
 8004d4e:	6013      	str	r3, [r2, #0]
			lastyawI = yawI;
 8004d50:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <MainTask+0x8b8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <MainTask+0x8b4>)
 8004d56:	6013      	str	r3, [r2, #0]
			lastyawD = yawD;
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <MainTask+0x8c0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a39      	ldr	r2, [pc, #228]	; (8004e44 <MainTask+0x8bc>)
 8004d5e:	6013      	str	r3, [r2, #0]
		}

		if(lastpitchP != pitchP || lastpitchI != pitchI || lastpitchD != pitchD){
 8004d60:	4b3d      	ldr	r3, [pc, #244]	; (8004e58 <MainTask+0x8d0>)
 8004d62:	ed93 7a00 	vldr	s14, [r3]
 8004d66:	4b3d      	ldr	r3, [pc, #244]	; (8004e5c <MainTask+0x8d4>)
 8004d68:	edd3 7a00 	vldr	s15, [r3]
 8004d6c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d74:	d116      	bne.n	8004da4 <MainTask+0x81c>
 8004d76:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <MainTask+0x8d8>)
 8004d78:	ed93 7a00 	vldr	s14, [r3]
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <MainTask+0x8dc>)
 8004d7e:	edd3 7a00 	vldr	s15, [r3]
 8004d82:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8a:	d10b      	bne.n	8004da4 <MainTask+0x81c>
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <MainTask+0x8e0>)
 8004d8e:	ed93 7a00 	vldr	s14, [r3]
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <MainTask+0x8e4>)
 8004d94:	edd3 7a00 	vldr	s15, [r3]
 8004d98:	eeb4 7a67 	vcmp.f32	s14, s15
 8004d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da0:	f43f ac1c 	beq.w	80045dc <MainTask+0x54>
			PIDGainInit(0.03, 1.0, 1/240.0, PITCH_LONGEST_DELAY, pitchP, pitchI, pitchD, 60.0, &Pid_Camera_Pitch);
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <MainTask+0x8d4>)
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <MainTask+0x8dc>)
 8004dac:	ed93 7a00 	vldr	s14, [r3]
 8004db0:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <MainTask+0x8e4>)
 8004db2:	edd3 6a00 	vldr	s13, [r3]
 8004db6:	481b      	ldr	r0, [pc, #108]	; (8004e24 <MainTask+0x89c>)
 8004db8:	eddf 3a24 	vldr	s7, [pc, #144]	; 8004e4c <MainTask+0x8c4>
 8004dbc:	eeb0 3a66 	vmov.f32	s6, s13
 8004dc0:	eef0 2a47 	vmov.f32	s5, s14
 8004dc4:	eeb0 2a67 	vmov.f32	s4, s15
 8004dc8:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8004dcc:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8004e70 <MainTask+0x8e8>
 8004dd0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004dd4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004e54 <MainTask+0x8cc>
 8004dd8:	f000 fc75 	bl	80056c6 <PIDGainInit>
			lastpitchP = pitchP;
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <MainTask+0x8d4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <MainTask+0x8d0>)
 8004de2:	6013      	str	r3, [r2, #0]
			lastpitchI = pitchI;
 8004de4:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <MainTask+0x8dc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <MainTask+0x8d8>)
 8004dea:	6013      	str	r3, [r2, #0]
			lastpitchD = pitchD;
 8004dec:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <MainTask+0x8e4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <MainTask+0x8e0>)
 8004df2:	6013      	str	r3, [r2, #0]
		ServoSetPulse(&servo, servo.currentPulse);
 8004df4:	f7ff bbf2 	b.w	80045dc <MainTask+0x54>
 8004df8:	20008540 	.word	0x20008540
 8004dfc:	2000899c 	.word	0x2000899c
 8004e00:	20008974 	.word	0x20008974
 8004e04:	20007e1c 	.word	0x20007e1c
 8004e08:	2000893c 	.word	0x2000893c
 8004e0c:	200089fc 	.word	0x200089fc
 8004e10:	20006870 	.word	0x20006870
 8004e14:	2000889c 	.word	0x2000889c
 8004e18:	20008980 	.word	0x20008980
 8004e1c:	200089b4 	.word	0x200089b4
 8004e20:	200088b0 	.word	0x200088b0
 8004e24:	20008a38 	.word	0x20008a38
 8004e28:	200089ac 	.word	0x200089ac
 8004e2c:	20008914 	.word	0x20008914
 8004e30:	2000892c 	.word	0x2000892c
 8004e34:	20008abc 	.word	0x20008abc
 8004e38:	2000895c 	.word	0x2000895c
 8004e3c:	20008944 	.word	0x20008944
 8004e40:	2000894c 	.word	0x2000894c
 8004e44:	2000897c 	.word	0x2000897c
 8004e48:	200088a4 	.word	0x200088a4
 8004e4c:	42700000 	.word	0x42700000
 8004e50:	3b4ccccd 	.word	0x3b4ccccd
 8004e54:	3cf5c28f 	.word	0x3cf5c28f
 8004e58:	200089ec 	.word	0x200089ec
 8004e5c:	20008934 	.word	0x20008934
 8004e60:	20008a2c 	.word	0x20008a2c
 8004e64:	20008950 	.word	0x20008950
 8004e68:	20008ab4 	.word	0x20008ab4
 8004e6c:	20008978 	.word	0x20008978
 8004e70:	3b888889 	.word	0x3b888889

08004e74 <FlywheelYawPIDTask>:
		}
	}
}

void FlywheelYawPIDTask(void *argument){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	float yawDynamicCoarseTolerance, yawDynamicFineTolerance;
	while(1){
		sys.yawrun = 1;
 8004e7c:	4aae      	ldr	r2, [pc, #696]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004e7e:	7853      	ldrb	r3, [r2, #1]
 8004e80:	2101      	movs	r1, #1
 8004e82:	f361 0301 	bfi	r3, r1, #0, #2
 8004e86:	7053      	strb	r3, [r2, #1]
		if(tracking){
 8004e88:	4bac      	ldr	r3, [pc, #688]	; (800513c <FlywheelYawPIDTask+0x2c8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f5      	beq.n	8004e7c <FlywheelYawPIDTask+0x8>
			errorYaw = jetson.x_pixel;
 8004e90:	4bab      	ldr	r3, [pc, #684]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9c:	4ba9      	ldr	r3, [pc, #676]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8004e9e:	edc3 7a00 	vstr	s15, [r3]

			if(jetson.area < 4500.0){
 8004ea2:	4ba7      	ldr	r3, [pc, #668]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004ea4:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ea8:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8005148 <FlywheelYawPIDTask+0x2d4>
 8004eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb4:	d532      	bpl.n	8004f1c <FlywheelYawPIDTask+0xa8>
				if(jetson.area > 3000){
 8004eb6:	4ba2      	ldr	r3, [pc, #648]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004eb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ebc:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800514c <FlywheelYawPIDTask+0x2d8>
 8004ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	dd06      	ble.n	8004ed8 <FlywheelYawPIDTask+0x64>
					yawDynamicCoarseTolerance = yaw3000tol;
 8004eca:	4ba1      	ldr	r3, [pc, #644]	; (8005150 <FlywheelYawPIDTask+0x2dc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
					yawDynamicFineTolerance = yaw3000ftol;
 8004ed0:	4ba0      	ldr	r3, [pc, #640]	; (8005154 <FlywheelYawPIDTask+0x2e0>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e038      	b.n	8004f4a <FlywheelYawPIDTask+0xd6>
				}else if(jetson.area > 2000){
 8004ed8:	4b99      	ldr	r3, [pc, #612]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004eda:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ede:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8005158 <FlywheelYawPIDTask+0x2e4>
 8004ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	dd06      	ble.n	8004efa <FlywheelYawPIDTask+0x86>
					yawDynamicCoarseTolerance = yaw2000tol;
 8004eec:	4b9b      	ldr	r3, [pc, #620]	; (800515c <FlywheelYawPIDTask+0x2e8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	617b      	str	r3, [r7, #20]
					yawDynamicFineTolerance = yaw2000ftol;
 8004ef2:	4b9b      	ldr	r3, [pc, #620]	; (8005160 <FlywheelYawPIDTask+0x2ec>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e027      	b.n	8004f4a <FlywheelYawPIDTask+0xd6>
				}else if(jetson.area > 1000){
 8004efa:	4b91      	ldr	r3, [pc, #580]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004efc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f00:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8005164 <FlywheelYawPIDTask+0x2f0>
 8004f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	dd1d      	ble.n	8004f4a <FlywheelYawPIDTask+0xd6>
					yawDynamicCoarseTolerance = yaw1000tol;
 8004f0e:	4b96      	ldr	r3, [pc, #600]	; (8005168 <FlywheelYawPIDTask+0x2f4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	617b      	str	r3, [r7, #20]
					yawDynamicFineTolerance = yaw1000ftol;
 8004f14:	4b95      	ldr	r3, [pc, #596]	; (800516c <FlywheelYawPIDTask+0x2f8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	e016      	b.n	8004f4a <FlywheelYawPIDTask+0xd6>
				}
			}else if(jetson.area > 6500.0){
 8004f1c:	4b88      	ldr	r3, [pc, #544]	; (8005140 <FlywheelYawPIDTask+0x2cc>)
 8004f1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f22:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005170 <FlywheelYawPIDTask+0x2fc>
 8004f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	dd06      	ble.n	8004f3e <FlywheelYawPIDTask+0xca>
				yawDynamicCoarseTolerance = yawBtol;
 8004f30:	4b90      	ldr	r3, [pc, #576]	; (8005174 <FlywheelYawPIDTask+0x300>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	617b      	str	r3, [r7, #20]
				yawDynamicFineTolerance = yawBftol;
 8004f36:	4b90      	ldr	r3, [pc, #576]	; (8005178 <FlywheelYawPIDTask+0x304>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e005      	b.n	8004f4a <FlywheelYawPIDTask+0xd6>
			}else{
				yawDynamicCoarseTolerance = YAWCTOL;
 8004f3e:	4b8f      	ldr	r3, [pc, #572]	; (800517c <FlywheelYawPIDTask+0x308>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	617b      	str	r3, [r7, #20]
				yawDynamicFineTolerance = YAWFTOL;
 8004f44:	4b8e      	ldr	r3, [pc, #568]	; (8005180 <FlywheelYawPIDTask+0x30c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	613b      	str	r3, [r7, #16]
			}
			//Coarse Tolerance Fast response
			if(WITHIN_TOL(yawDynamicCoarseTolerance)){
 8004f4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f4e:	eeb1 7a67 	vneg.f32	s14, s15
 8004f52:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8004f54:	edd3 7a00 	vldr	s15, [r3]
 8004f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	d82c      	bhi.n	8004fbc <FlywheelYawPIDTask+0x148>
 8004f62:	4b78      	ldr	r3, [pc, #480]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8004f64:	edd3 7a00 	vldr	s15, [r3]
 8004f68:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	db22      	blt.n	8004fbc <FlywheelYawPIDTask+0x148>
				sys.pid = 0;
 8004f76:	4a70      	ldr	r2, [pc, #448]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004f78:	7813      	ldrb	r3, [r2, #0]
 8004f7a:	f36f 0341 	bfc	r3, #1, #1
 8004f7e:	7013      	strb	r3, [r2, #0]
				PIDDelayInit(&Pid_Camera);
 8004f80:	4880      	ldr	r0, [pc, #512]	; (8005184 <FlywheelYawPIDTask+0x310>)
 8004f82:	f000 fd0e 	bl	80059a2 <PIDDelayInit>
				yawDelay = 0;
 8004f86:	4b80      	ldr	r3, [pc, #512]	; (8005188 <FlywheelYawPIDTask+0x314>)
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
				if(sys.shootp1l == 0){
 8004f8e:	4b6a      	ldr	r3, [pc, #424]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d179      	bne.n	8005090 <FlywheelYawPIDTask+0x21c>
					within_tolerance_counter ++;
 8004f9c:	4b7b      	ldr	r3, [pc, #492]	; (800518c <FlywheelYawPIDTask+0x318>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	4a7a      	ldr	r2, [pc, #488]	; (800518c <FlywheelYawPIDTask+0x318>)
 8004fa4:	6013      	str	r3, [r2, #0]
					if(within_tolerance_counter >= WITHIN_TIMES){
 8004fa6:	4b79      	ldr	r3, [pc, #484]	; (800518c <FlywheelYawPIDTask+0x318>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fae:	db6f      	blt.n	8005090 <FlywheelYawPIDTask+0x21c>
						sys.shootp1l = 1;
 8004fb0:	4a61      	ldr	r2, [pc, #388]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004fb2:	7813      	ldrb	r3, [r2, #0]
 8004fb4:	f043 0320 	orr.w	r3, r3, #32
 8004fb8:	7013      	strb	r3, [r2, #0]
				if(sys.shootp1l == 0){
 8004fba:	e069      	b.n	8005090 <FlywheelYawPIDTask+0x21c>
					}
				}
			}else{
				sys.pid = 1;
 8004fbc:	4a5e      	ldr	r2, [pc, #376]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004fbe:	7813      	ldrb	r3, [r2, #0]
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	7013      	strb	r3, [r2, #0]
				sys.shootp1l = 0;
 8004fc6:	4a5c      	ldr	r2, [pc, #368]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8004fc8:	7813      	ldrb	r3, [r2, #0]
 8004fca:	f36f 1345 	bfc	r3, #5, #1
 8004fce:	7013      	strb	r3, [r2, #0]
				within_tolerance_counter = 0;
 8004fd0:	4b6e      	ldr	r3, [pc, #440]	; (800518c <FlywheelYawPIDTask+0x318>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
				if(errorYaw < 0){
 8004fd6:	4b5b      	ldr	r3, [pc, #364]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8004fd8:	edd3 7a00 	vldr	s15, [r3]
 8004fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d524      	bpl.n	8005030 <FlywheelYawPIDTask+0x1bc>
					Yaw(YAWPIDPULSE);
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <FlywheelYawPIDTask+0x31c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4619      	mov	r1, r3
 8004fec:	4869      	ldr	r0, [pc, #420]	; (8005194 <FlywheelYawPIDTask+0x320>)
 8004fee:	f001 fab6 	bl	800655e <ServoMovePulse>
					//yawDelay(PID output) should be negative, the bigger the error, the bigger yawDelay
					//but we want the bigger the error, the smaller yawDelay, minimum is delay 1ms
					uint32_t delay = YAW_LONGEST_DELAY + yawDelay + 1;
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <FlywheelYawPIDTask+0x314>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb faa6 	bl	8000548 <__aeabi_f2d>
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	4b65      	ldr	r3, [pc, #404]	; (8005198 <FlywheelYawPIDTask+0x324>)
 8005002:	f7fb f943 	bl	800028c <__adddf3>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	4b62      	ldr	r3, [pc, #392]	; (800519c <FlywheelYawPIDTask+0x328>)
 8005014:	f7fb f93a 	bl	800028c <__adddf3>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fdc2 	bl	8000ba8 <__aeabi_d2uiz>
 8005024:	4603      	mov	r3, r0
 8005026:	60bb      	str	r3, [r7, #8]
					osDelay(delay);
 8005028:	68b8      	ldr	r0, [r7, #8]
 800502a:	f00c fd40 	bl	8011aae <osDelay>
 800502e:	e030      	b.n	8005092 <FlywheelYawPIDTask+0x21e>
				}else if(errorYaw > 0){
 8005030:	4b44      	ldr	r3, [pc, #272]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8005032:	edd3 7a00 	vldr	s15, [r3]
 8005036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503e:	dd28      	ble.n	8005092 <FlywheelYawPIDTask+0x21e>
					Yaw(-YAWPIDPULSE);
 8005040:	4b53      	ldr	r3, [pc, #332]	; (8005190 <FlywheelYawPIDTask+0x31c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	425b      	negs	r3, r3
 8005046:	4619      	mov	r1, r3
 8005048:	4852      	ldr	r0, [pc, #328]	; (8005194 <FlywheelYawPIDTask+0x320>)
 800504a:	f001 fa88 	bl	800655e <ServoMovePulse>
					uint32_t delay = YAW_LONGEST_DELAY - yawDelay + 1;
 800504e:	4b4e      	ldr	r3, [pc, #312]	; (8005188 <FlywheelYawPIDTask+0x314>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fa78 	bl	8000548 <__aeabi_f2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	f04f 0000 	mov.w	r0, #0
 8005060:	494d      	ldr	r1, [pc, #308]	; (8005198 <FlywheelYawPIDTask+0x324>)
 8005062:	f7fb f911 	bl	8000288 <__aeabi_dsub>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	4b4a      	ldr	r3, [pc, #296]	; (800519c <FlywheelYawPIDTask+0x328>)
 8005074:	f7fb f90a 	bl	800028c <__adddf3>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	f7fb fd92 	bl	8000ba8 <__aeabi_d2uiz>
 8005084:	4603      	mov	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]
					osDelay(delay);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f00c fd10 	bl	8011aae <osDelay>
 800508e:	e000      	b.n	8005092 <FlywheelYawPIDTask+0x21e>
				if(sys.shootp1l == 0){
 8005090:	bf00      	nop
				}
			}
#ifndef TWO_AXIS_TOGETHER
			if(!sys.shootp1l){
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <FlywheelYawPIDTask+0x236>
				osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80050a0:	4b3f      	ldr	r3, [pc, #252]	; (80051a0 <FlywheelYawPIDTask+0x32c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f00c fc93 	bl	80119d0 <osThreadSuspend>
			}
#endif
			//Fine Tolerance
			if(sys.shootp1l && X_NOT_WITHIN(yawDynamicFineTolerance)){
 80050aa:	4b23      	ldr	r3, [pc, #140]	; (8005138 <FlywheelYawPIDTask+0x2c4>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f43f aee1 	beq.w	8004e7c <FlywheelYawPIDTask+0x8>
 80050ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80050be:	eeb1 7a67 	vneg.f32	s14, s15
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 80050c4:	edd3 7a00 	vldr	s15, [r3]
 80050c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d0:	da09      	bge.n	80050e6 <FlywheelYawPIDTask+0x272>
 80050d2:	4b1c      	ldr	r3, [pc, #112]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 80050d4:	edd3 7a00 	vldr	s15, [r3]
 80050d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80050dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e4:	d827      	bhi.n	8005136 <FlywheelYawPIDTask+0x2c2>
				if(errorYaw < 0.0){
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 80050e8:	edd3 7a00 	vldr	s15, [r3]
 80050ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f4:	d50b      	bpl.n	800510e <FlywheelYawPIDTask+0x29a>
					Yaw(yawPidJerkPulse);
 80050f6:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <FlywheelYawPIDTask+0x330>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4619      	mov	r1, r3
 80050fc:	4825      	ldr	r0, [pc, #148]	; (8005194 <FlywheelYawPIDTask+0x320>)
 80050fe:	f001 fa2e 	bl	800655e <ServoMovePulse>
					osDelay(JERKTIME);
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <FlywheelYawPIDTask+0x334>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f00c fcd1 	bl	8011aae <osDelay>
 800510c:	e6b6      	b.n	8004e7c <FlywheelYawPIDTask+0x8>
				}else if(errorYaw > 0.0){
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <FlywheelYawPIDTask+0x2d0>)
 8005110:	edd3 7a00 	vldr	s15, [r3]
 8005114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511c:	dd0b      	ble.n	8005136 <FlywheelYawPIDTask+0x2c2>
					Yaw(-yawPidJerkPulse);
 800511e:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <FlywheelYawPIDTask+0x330>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	425b      	negs	r3, r3
 8005124:	4619      	mov	r1, r3
 8005126:	481b      	ldr	r0, [pc, #108]	; (8005194 <FlywheelYawPIDTask+0x320>)
 8005128:	f001 fa19 	bl	800655e <ServoMovePulse>
					osDelay(JERKTIME);
 800512c:	4b1e      	ldr	r3, [pc, #120]	; (80051a8 <FlywheelYawPIDTask+0x334>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f00c fcbc 	bl	8011aae <osDelay>
		sys.yawrun = 1;
 8005136:	e6a1      	b.n	8004e7c <FlywheelYawPIDTask+0x8>
 8005138:	2000893c 	.word	0x2000893c
 800513c:	200089b4 	.word	0x200089b4
 8005140:	200089fc 	.word	0x200089fc
 8005144:	200089a4 	.word	0x200089a4
 8005148:	458ca000 	.word	0x458ca000
 800514c:	453b8000 	.word	0x453b8000
 8005150:	20008948 	.word	0x20008948
 8005154:	200089d8 	.word	0x200089d8
 8005158:	44fa0000 	.word	0x44fa0000
 800515c:	200089d0 	.word	0x200089d0
 8005160:	20008894 	.word	0x20008894
 8005164:	447a0000 	.word	0x447a0000
 8005168:	20008ab8 	.word	0x20008ab8
 800516c:	200089d4 	.word	0x200089d4
 8005170:	45cb2000 	.word	0x45cb2000
 8005174:	2000890c 	.word	0x2000890c
 8005178:	200089c4 	.word	0x200089c4
 800517c:	20008988 	.word	0x20008988
 8005180:	20008970 	.word	0x20008970
 8005184:	200088b0 	.word	0x200088b0
 8005188:	200089ac 	.word	0x200089ac
 800518c:	20008954 	.word	0x20008954
 8005190:	20008a8c 	.word	0x20008a8c
 8005194:	20007da4 	.word	0x20007da4
 8005198:	40140000 	.word	0x40140000
 800519c:	3ff00000 	.word	0x3ff00000
 80051a0:	2000899c 	.word	0x2000899c
 80051a4:	20008a30 	.word	0x20008a30
 80051a8:	20008aa8 	.word	0x20008aa8

080051ac <FlywheelPitchPIDTask>:
#endif
		}
	}
}

void FlywheelPitchPIDTask(void *argument){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	while(1){
		sys.pitchrun = 1;
 80051b4:	4a83      	ldr	r2, [pc, #524]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 80051b6:	7813      	ldrb	r3, [r2, #0]
 80051b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051bc:	7013      	strb	r3, [r2, #0]
		errorPitch = jetson.y_pixel;
 80051be:	4b82      	ldr	r3, [pc, #520]	; (80053c8 <FlywheelPitchPIDTask+0x21c>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ca:	4b80      	ldr	r3, [pc, #512]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 80051cc:	edc3 7a00 	vstr	s15, [r3]

		if(Y_WITHIN_TOL(PITCHCTOL)){
 80051d0:	4b7f      	ldr	r3, [pc, #508]	; (80053d0 <FlywheelPitchPIDTask+0x224>)
 80051d2:	edd3 7a00 	vldr	s15, [r3]
 80051d6:	eeb1 7a67 	vneg.f32	s14, s15
 80051da:	4b7c      	ldr	r3, [pc, #496]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	d82d      	bhi.n	8005246 <FlywheelPitchPIDTask+0x9a>
 80051ea:	4b78      	ldr	r3, [pc, #480]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 80051ec:	ed93 7a00 	vldr	s14, [r3]
 80051f0:	4b77      	ldr	r3, [pc, #476]	; (80053d0 <FlywheelPitchPIDTask+0x224>)
 80051f2:	edd3 7a00 	vldr	s15, [r3]
 80051f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fe:	d822      	bhi.n	8005246 <FlywheelPitchPIDTask+0x9a>
			sys.pidPitch = 0;
 8005200:	4a70      	ldr	r2, [pc, #448]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 8005202:	7813      	ldrb	r3, [r2, #0]
 8005204:	f36f 0382 	bfc	r3, #2, #1
 8005208:	7013      	strb	r3, [r2, #0]
			PIDDelayInit(&Pid_Camera_Pitch);
 800520a:	4872      	ldr	r0, [pc, #456]	; (80053d4 <FlywheelPitchPIDTask+0x228>)
 800520c:	f000 fbc9 	bl	80059a2 <PIDDelayInit>
			pitchDelay = 0;
 8005210:	4b71      	ldr	r3, [pc, #452]	; (80053d8 <FlywheelPitchPIDTask+0x22c>)
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
			if(sys.shootp1r == 0){
 8005218:	4b6a      	ldr	r3, [pc, #424]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d178      	bne.n	8005318 <FlywheelPitchPIDTask+0x16c>
				y_within_tolerance_counter ++;
 8005226:	4b6d      	ldr	r3, [pc, #436]	; (80053dc <FlywheelPitchPIDTask+0x230>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a6b      	ldr	r2, [pc, #428]	; (80053dc <FlywheelPitchPIDTask+0x230>)
 800522e:	6013      	str	r3, [r2, #0]
				if(y_within_tolerance_counter >= WITHIN_TIMES){
 8005230:	4b6a      	ldr	r3, [pc, #424]	; (80053dc <FlywheelPitchPIDTask+0x230>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005238:	db6e      	blt.n	8005318 <FlywheelPitchPIDTask+0x16c>
					sys.shootp1r = 1;
 800523a:	4a62      	ldr	r2, [pc, #392]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 800523c:	7813      	ldrb	r3, [r2, #0]
 800523e:	f043 0310 	orr.w	r3, r3, #16
 8005242:	7013      	strb	r3, [r2, #0]
			if(sys.shootp1r == 0){
 8005244:	e068      	b.n	8005318 <FlywheelPitchPIDTask+0x16c>
				}
			}
		}else{
			sys.pidPitch = 1;
 8005246:	4a5f      	ldr	r2, [pc, #380]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 8005248:	7813      	ldrb	r3, [r2, #0]
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	7013      	strb	r3, [r2, #0]
			sys.shootp1r = 0;
 8005250:	4a5c      	ldr	r2, [pc, #368]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 8005252:	7813      	ldrb	r3, [r2, #0]
 8005254:	f36f 1304 	bfc	r3, #4, #1
 8005258:	7013      	strb	r3, [r2, #0]
			y_within_tolerance_counter = 0;
 800525a:	4b60      	ldr	r3, [pc, #384]	; (80053dc <FlywheelPitchPIDTask+0x230>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
			if(errorPitch < 0){
 8005260:	4b5a      	ldr	r3, [pc, #360]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 8005262:	edd3 7a00 	vldr	s15, [r3]
 8005266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d523      	bpl.n	80052b8 <FlywheelPitchPIDTask+0x10c>
				Pitch(PITCHPIDPULSE);
 8005270:	4b5b      	ldr	r3, [pc, #364]	; (80053e0 <FlywheelPitchPIDTask+0x234>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	485b      	ldr	r0, [pc, #364]	; (80053e4 <FlywheelPitchPIDTask+0x238>)
 8005278:	f001 f971 	bl	800655e <ServoMovePulse>
				uint32_t delay = PITCH_LONGEST_DELAY + pitchDelay + 1;
 800527c:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <FlywheelPitchPIDTask+0x22c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb f961 	bl	8000548 <__aeabi_f2d>
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <FlywheelPitchPIDTask+0x23c>)
 800528c:	f7fa fffe 	bl	800028c <__adddf3>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	4b53      	ldr	r3, [pc, #332]	; (80053ec <FlywheelPitchPIDTask+0x240>)
 800529e:	f7fa fff5 	bl	800028c <__adddf3>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	f7fb fc7d 	bl	8000ba8 <__aeabi_d2uiz>
 80052ae:	4603      	mov	r3, r0
 80052b0:	60fb      	str	r3, [r7, #12]
				osDelay(delay);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f00c fbfb 	bl	8011aae <osDelay>
			}

			if(errorPitch > 0){
 80052b8:	4b44      	ldr	r3, [pc, #272]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 80052ba:	edd3 7a00 	vldr	s15, [r3]
 80052be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c6:	dd28      	ble.n	800531a <FlywheelPitchPIDTask+0x16e>
				Pitch(-PITCHPIDUPPULSE);
 80052c8:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <FlywheelPitchPIDTask+0x244>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	425b      	negs	r3, r3
 80052ce:	4619      	mov	r1, r3
 80052d0:	4844      	ldr	r0, [pc, #272]	; (80053e4 <FlywheelPitchPIDTask+0x238>)
 80052d2:	f001 f944 	bl	800655e <ServoMovePulse>
				uint32_t delay = PITCH_LONGEST_DELAY - pitchDelay + 1;
 80052d6:	4b40      	ldr	r3, [pc, #256]	; (80053d8 <FlywheelPitchPIDTask+0x22c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fb f934 	bl	8000548 <__aeabi_f2d>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	493f      	ldr	r1, [pc, #252]	; (80053e8 <FlywheelPitchPIDTask+0x23c>)
 80052ea:	f7fa ffcd 	bl	8000288 <__aeabi_dsub>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4610      	mov	r0, r2
 80052f4:	4619      	mov	r1, r3
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	4b3c      	ldr	r3, [pc, #240]	; (80053ec <FlywheelPitchPIDTask+0x240>)
 80052fc:	f7fa ffc6 	bl	800028c <__adddf3>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	f7fb fc4e 	bl	8000ba8 <__aeabi_d2uiz>
 800530c:	4603      	mov	r3, r0
 800530e:	60bb      	str	r3, [r7, #8]
				osDelay(delay);
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f00c fbcc 	bl	8011aae <osDelay>
 8005316:	e000      	b.n	800531a <FlywheelPitchPIDTask+0x16e>
			if(sys.shootp1r == 0){
 8005318:	bf00      	nop
			}
		}

		if(sys.shootp1r && !Y_WITHIN_TOL(PITCHFTOL)){
 800531a:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <FlywheelPitchPIDTask+0x218>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f003 0310 	and.w	r3, r3, #16
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	f43f af45 	beq.w	80051b4 <FlywheelPitchPIDTask+0x8>
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <FlywheelPitchPIDTask+0x248>)
 800532c:	edd3 7a00 	vldr	s15, [r3]
 8005330:	eeb1 7a67 	vneg.f32	s14, s15
 8005334:	4b25      	ldr	r3, [pc, #148]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 8005336:	edd3 7a00 	vldr	s15, [r3]
 800533a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800533e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005342:	bf94      	ite	ls
 8005344:	2301      	movls	r3, #1
 8005346:	2300      	movhi	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d113      	bne.n	800537c <FlywheelPitchPIDTask+0x1d0>
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 8005356:	ed93 7a00 	vldr	s14, [r3]
 800535a:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <FlywheelPitchPIDTask+0x248>)
 800535c:	edd3 7a00 	vldr	s15, [r3]
 8005360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005368:	bf94      	ite	ls
 800536a:	2301      	movls	r3, #1
 800536c:	2300      	movhi	r3, #0
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f083 0301 	eor.w	r3, r3, #1
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	f43f af1c 	beq.w	80051b4 <FlywheelPitchPIDTask+0x8>
			if(errorPitch < 0){
 800537c:	4b13      	ldr	r3, [pc, #76]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 800537e:	edd3 7a00 	vldr	s15, [r3]
 8005382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	d508      	bpl.n	800539e <FlywheelPitchPIDTask+0x1f2>
				Pitch(1);
 800538c:	2101      	movs	r1, #1
 800538e:	4815      	ldr	r0, [pc, #84]	; (80053e4 <FlywheelPitchPIDTask+0x238>)
 8005390:	f001 f8e5 	bl	800655e <ServoMovePulse>
				osDelay(PITCHJERKTIME);
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <FlywheelPitchPIDTask+0x24c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f00c fb88 	bl	8011aae <osDelay>
			}

			if(errorPitch > 0){
 800539e:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <FlywheelPitchPIDTask+0x220>)
 80053a0:	edd3 7a00 	vldr	s15, [r3]
 80053a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	dd09      	ble.n	80053c2 <FlywheelPitchPIDTask+0x216>
				Pitch(-1);
 80053ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053b2:	480c      	ldr	r0, [pc, #48]	; (80053e4 <FlywheelPitchPIDTask+0x238>)
 80053b4:	f001 f8d3 	bl	800655e <ServoMovePulse>
				osDelay(PITCHJERKTIME);
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <FlywheelPitchPIDTask+0x24c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f00c fb76 	bl	8011aae <osDelay>
		sys.pitchrun = 1;
 80053c2:	e6f7      	b.n	80051b4 <FlywheelPitchPIDTask+0x8>
 80053c4:	2000893c 	.word	0x2000893c
 80053c8:	200089fc 	.word	0x200089fc
 80053cc:	200089a0 	.word	0x200089a0
 80053d0:	20008ac4 	.word	0x20008ac4
 80053d4:	20008a38 	.word	0x20008a38
 80053d8:	20008914 	.word	0x20008914
 80053dc:	20008908 	.word	0x20008908
 80053e0:	200088a0 	.word	0x200088a0
 80053e4:	20007e1c 	.word	0x20007e1c
 80053e8:	40240000 	.word	0x40240000
 80053ec:	3ff00000 	.word	0x3ff00000
 80053f0:	20008890 	.word	0x20008890
 80053f4:	20008968 	.word	0x20008968
 80053f8:	200089b8 	.word	0x200089b8

080053fc <EmergencyTask>:
	}
}



void EmergencyTask(void *argument){
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	; 0x30
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

	while(1){

		if(ps4.button == TOUCH){
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <EmergencyTask+0x74>)
 8005406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800540c:	d1fa      	bne.n	8005404 <EmergencyTask+0x8>
			RNSStop(&rns);
 800540e:	4819      	ldr	r0, [pc, #100]	; (8005474 <EmergencyTask+0x78>)
 8005410:	f000 fee4 	bl	80061dc <RNSStop>
			VESCStop(&vesc1);
 8005414:	4818      	ldr	r0, [pc, #96]	; (8005478 <EmergencyTask+0x7c>)
 8005416:	f003 fb2d 	bl	8008a74 <VESCStop>
			osThreadSuspend(FlywheelPitchPIDTaskHandle);
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <EmergencyTask+0x80>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f00c fad6 	bl	80119d0 <osThreadSuspend>
			osThreadSuspend(FlywheelYawPIDTaskHandle);
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <EmergencyTask+0x84>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f00c fad1 	bl	80119d0 <osThreadSuspend>
			osThreadTerminate(MainTaskHandle);
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <EmergencyTask+0x88>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f00c fb0e 	bl	8011a54 <osThreadTerminate>
			osDelay(5);
 8005438:	2005      	movs	r0, #5
 800543a:	f00c fb38 	bl	8011aae <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 800543e:	f107 030c 	add.w	r3, r7, #12
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f00f fef8 	bl	801523c <memset>
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <EmergencyTask+0x8c>)
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005454:	623b      	str	r3, [r7, #32]
 8005456:	2318      	movs	r3, #24
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	461a      	mov	r2, r3
 8005460:	2100      	movs	r1, #0
 8005462:	480a      	ldr	r0, [pc, #40]	; (800548c <EmergencyTask+0x90>)
 8005464:	f00c fa22 	bl	80118ac <osThreadNew>
 8005468:	4603      	mov	r3, r0
 800546a:	4a06      	ldr	r2, [pc, #24]	; (8005484 <EmergencyTask+0x88>)
 800546c:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 800546e:	e7c9      	b.n	8005404 <EmergencyTask+0x8>
 8005470:	20008540 	.word	0x20008540
 8005474:	200079e0 	.word	0x200079e0
 8005478:	200072b4 	.word	0x200072b4
 800547c:	2000899c 	.word	0x2000899c
 8005480:	2000892c 	.word	0x2000892c
 8005484:	20008964 	.word	0x20008964
 8005488:	08019be0 	.word	0x08019be0
 800548c:	08004589 	.word	0x08004589

08005490 <TuneTask>:
		}

	}
}

void TuneTask(void *argument){
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	tunePending(&huart2);
 8005498:	4857      	ldr	r0, [pc, #348]	; (80055f8 <TuneTask+0x168>)
 800549a:	f004 f953 	bl	8009744 <tunePending>
	while(1){
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 800549e:	4b57      	ldr	r3, [pc, #348]	; (80055fc <TuneTask+0x16c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054a6:	4618      	mov	r0, r3
 80054a8:	f00c fba6 	bl	8011bf8 <osSemaphoreAcquire>
		osThreadSuspend(MainTaskHandle);
 80054ac:	4b54      	ldr	r3, [pc, #336]	; (8005600 <TuneTask+0x170>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f00c fa8d 	bl	80119d0 <osThreadSuspend>
		osThreadSuspend(EmergencyTaskHandle);
 80054b6:	4b53      	ldr	r3, [pc, #332]	; (8005604 <TuneTask+0x174>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f00c fa88 	bl	80119d0 <osThreadSuspend>
		osThreadSuspend(FlywheelYawPIDTaskHandle);
 80054c0:	4b51      	ldr	r3, [pc, #324]	; (8005608 <TuneTask+0x178>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f00c fa83 	bl	80119d0 <osThreadSuspend>
		osThreadSuspend(FlywheelPitchPIDTaskHandle);
 80054ca:	4b50      	ldr	r3, [pc, #320]	; (800560c <TuneTask+0x17c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f00c fa7e 	bl	80119d0 <osThreadSuspend>
		if(tuneCommand == 'i'){
 80054d4:	4b4e      	ldr	r3, [pc, #312]	; (8005610 <TuneTask+0x180>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b69      	cmp	r3, #105	; 0x69
 80054da:	d102      	bne.n	80054e2 <TuneTask+0x52>
			tuneInit(&huart2);
 80054dc:	4846      	ldr	r0, [pc, #280]	; (80055f8 <TuneTask+0x168>)
 80054de:	f004 f941 	bl	8009764 <tuneInit>
		}

		if(tuneCommand == 'r'){
 80054e2:	4b4b      	ldr	r3, [pc, #300]	; (8005610 <TuneTask+0x180>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b72      	cmp	r3, #114	; 0x72
 80054e8:	d102      	bne.n	80054f0 <TuneTask+0x60>
			tuneUpdate(&huart2);
 80054ea:	4843      	ldr	r0, [pc, #268]	; (80055f8 <TuneTask+0x168>)
 80054ec:	f004 fa38 	bl	8009960 <tuneUpdate>
		}

		if(tuneCommand == 'w'){
 80054f0:	4b47      	ldr	r3, [pc, #284]	; (8005610 <TuneTask+0x180>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b77      	cmp	r3, #119	; 0x77
 80054f6:	d14a      	bne.n	800558e <TuneTask+0xfe>
			led3 = 0; led2 = 1;
 80054f8:	4a46      	ldr	r2, [pc, #280]	; (8005614 <TuneTask+0x184>)
 80054fa:	7853      	ldrb	r3, [r2, #1]
 80054fc:	f36f 13c7 	bfc	r3, #7, #1
 8005500:	7053      	strb	r3, [r2, #1]
 8005502:	4a44      	ldr	r2, [pc, #272]	; (8005614 <TuneTask+0x184>)
 8005504:	7853      	ldrb	r3, [r2, #1]
 8005506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800550a:	7053      	strb	r3, [r2, #1]
			led2 = 0;
 800550c:	4a41      	ldr	r2, [pc, #260]	; (8005614 <TuneTask+0x184>)
 800550e:	7853      	ldrb	r3, [r2, #1]
 8005510:	f36f 1386 	bfc	r3, #6, #1
 8005514:	7053      	strb	r3, [r2, #1]
			uint32_t writeSuccess=0;
 8005516:	2300      	movs	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
			writeSuccess += tuneWrite(SECTOR6, (NUM_INT_TUNE)*4);
 800551a:	2170      	movs	r1, #112	; 0x70
 800551c:	483e      	ldr	r0, [pc, #248]	; (8005618 <TuneTask+0x188>)
 800551e:	f004 fb7f 	bl	8009c20 <tuneWrite>
 8005522:	4602      	mov	r2, r0
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	61fb      	str	r3, [r7, #28]
			writeSuccess += tuneWrite(SECTOR7, (NUM_FLOAT_TUNE)*4);
 800552a:	2160      	movs	r1, #96	; 0x60
 800552c:	483b      	ldr	r0, [pc, #236]	; (800561c <TuneTask+0x18c>)
 800552e:	f004 fb77 	bl	8009c20 <tuneWrite>
 8005532:	4602      	mov	r2, r0
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]
			char mes[20];
			sprintf(mes, "writeSuccess = %lu", writeSuccess);
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	4937      	ldr	r1, [pc, #220]	; (8005620 <TuneTask+0x190>)
 8005542:	4618      	mov	r0, r3
 8005544:	f010 fd9a 	bl	801607c <siprintf>
			ILI9341_PrintLine(mes, &ILI9341row);
 8005548:	f107 0308 	add.w	r3, r7, #8
 800554c:	4935      	ldr	r1, [pc, #212]	; (8005624 <TuneTask+0x194>)
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fc44 	bl	8003ddc <ILI9341_PrintLine>
			if( writeSuccess == (NUM_INT_TUNE+NUM_FLOAT_TUNE) ){
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b34      	cmp	r3, #52	; 0x34
 8005558:	d10b      	bne.n	8005572 <TuneTask+0xe2>
				HAL_UART_Transmit(&huart2, (uint8_t *)((char *)"EEPROM WRITTEN\n"), 15, 10);
 800555a:	230a      	movs	r3, #10
 800555c:	220f      	movs	r2, #15
 800555e:	4932      	ldr	r1, [pc, #200]	; (8005628 <TuneTask+0x198>)
 8005560:	4825      	ldr	r0, [pc, #148]	; (80055f8 <TuneTask+0x168>)
 8005562:	f00b f934 	bl	80107ce <HAL_UART_Transmit>
				led2 = 1;
 8005566:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <TuneTask+0x184>)
 8005568:	7853      	ldrb	r3, [r2, #1]
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	7053      	strb	r3, [r2, #1]
 8005570:	e00a      	b.n	8005588 <TuneTask+0xf8>
			}else{
				HAL_UART_Transmit(&huart2, (uint8_t *)((char *)"EEPROM WRITE FAIL\n"), 18, 10);
 8005572:	230a      	movs	r3, #10
 8005574:	2212      	movs	r2, #18
 8005576:	492d      	ldr	r1, [pc, #180]	; (800562c <TuneTask+0x19c>)
 8005578:	481f      	ldr	r0, [pc, #124]	; (80055f8 <TuneTask+0x168>)
 800557a:	f00b f928 	bl	80107ce <HAL_UART_Transmit>
				led3 = 1;
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <TuneTask+0x184>)
 8005580:	7853      	ldrb	r3, [r2, #1]
 8005582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005586:	7053      	strb	r3, [r2, #1]
			}
			tunePending(&huart2);
 8005588:	481b      	ldr	r0, [pc, #108]	; (80055f8 <TuneTask+0x168>)
 800558a:	f004 f8db 	bl	8009744 <tunePending>
		}

		if(tuneCommand == 'e'){
 800558e:	4b20      	ldr	r3, [pc, #128]	; (8005610 <TuneTask+0x180>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b65      	cmp	r3, #101	; 0x65
 8005594:	d102      	bne.n	800559c <TuneTask+0x10c>
			tuneEdit(&huart2);
 8005596:	4818      	ldr	r0, [pc, #96]	; (80055f8 <TuneTask+0x168>)
 8005598:	f004 faa0 	bl	8009adc <tuneEdit>
		}
		sys.updateLCD = 1;
 800559c:	4a24      	ldr	r2, [pc, #144]	; (8005630 <TuneTask+0x1a0>)
 800559e:	7813      	ldrb	r3, [r2, #0]
 80055a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a4:	7013      	strb	r3, [r2, #0]
		if(fabs(previousAllRpm - rpm)>5){
 80055a6:	4b23      	ldr	r3, [pc, #140]	; (8005634 <TuneTask+0x1a4>)
 80055a8:	ed93 7a00 	vldr	s14, [r3]
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <TuneTask+0x1a8>)
 80055ae:	edd3 7a00 	vldr	s15, [r3]
 80055b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055b6:	eef0 7ae7 	vabs.f32	s15, s15
 80055ba:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80055be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	dd0b      	ble.n	80055e0 <TuneTask+0x150>
			rpm1 = rpm2 = rpm3 = rpm;
 80055c8:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <TuneTask+0x1a8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1b      	ldr	r2, [pc, #108]	; (800563c <TuneTask+0x1ac>)
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	4b1a      	ldr	r3, [pc, #104]	; (800563c <TuneTask+0x1ac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1a      	ldr	r2, [pc, #104]	; (8005640 <TuneTask+0x1b0>)
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <TuneTask+0x1b0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <TuneTask+0x1b4>)
 80055de:	6013      	str	r3, [r2, #0]
		}
		osThreadResume(MainTaskHandle);
 80055e0:	4b07      	ldr	r3, [pc, #28]	; (8005600 <TuneTask+0x170>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f00c fa14 	bl	8011a12 <osThreadResume>
		osThreadResume(EmergencyTaskHandle);
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <TuneTask+0x174>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f00c fa0f 	bl	8011a12 <osThreadResume>
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 80055f4:	e753      	b.n	800549e <TuneTask+0xe>
 80055f6:	bf00      	nop
 80055f8:	200068f0 	.word	0x200068f0
 80055fc:	20008a9c 	.word	0x20008a9c
 8005600:	20008964 	.word	0x20008964
 8005604:	20008a34 	.word	0x20008a34
 8005608:	2000892c 	.word	0x2000892c
 800560c:	2000899c 	.word	0x2000899c
 8005610:	20008984 	.word	0x20008984
 8005614:	40020814 	.word	0x40020814
 8005618:	08040000 	.word	0x08040000
 800561c:	08060004 	.word	0x08060004
 8005620:	08019c44 	.word	0x08019c44
 8005624:	2000702c 	.word	0x2000702c
 8005628:	08019c58 	.word	0x08019c58
 800562c:	08019c68 	.word	0x08019c68
 8005630:	2000893c 	.word	0x2000893c
 8005634:	20008a94 	.word	0x20008a94
 8005638:	200089a8 	.word	0x200089a8
 800563c:	20008ab0 	.word	0x20008ab0
 8005640:	20008898 	.word	0x20008898
 8005644:	200089cc 	.word	0x200089cc

08005648 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a0c      	ldr	r2, [pc, #48]	; (8005684 <HAL_UART_RxCpltCallback+0x3c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d105      	bne.n	8005664 <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(TuneSemaphore);
 8005658:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_UART_RxCpltCallback+0x40>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f00c fb1d 	bl	8011c9c <osSemaphoreRelease>
	}else if(huart == &huart4){
		jetsonHandler(&huart4);
		sys.updateLCD = 1;
	}
}
 8005662:	e00b      	b.n	800567c <HAL_UART_RxCpltCallback+0x34>
	}else if(huart == &huart4){
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a09      	ldr	r2, [pc, #36]	; (800568c <HAL_UART_RxCpltCallback+0x44>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d107      	bne.n	800567c <HAL_UART_RxCpltCallback+0x34>
		jetsonHandler(&huart4);
 800566c:	4807      	ldr	r0, [pc, #28]	; (800568c <HAL_UART_RxCpltCallback+0x44>)
 800566e:	f004 f81d 	bl	80096ac <jetsonHandler>
		sys.updateLCD = 1;
 8005672:	4a07      	ldr	r2, [pc, #28]	; (8005690 <HAL_UART_RxCpltCallback+0x48>)
 8005674:	7813      	ldrb	r3, [r2, #0]
 8005676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800567a:	7013      	strb	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200068f0 	.word	0x200068f0
 8005688:	20008a9c 	.word	0x20008a9c
 800568c:	20006870 	.word	0x20006870
 8005690:	2000893c 	.word	0x2000893c

08005694 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0


}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
	pid->error = in;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b08a      	sub	sp, #40	; 0x28
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80056d0:	edc7 0a08 	vstr	s1, [r7, #32]
 80056d4:	ed87 1a07 	vstr	s2, [r7, #28]
 80056d8:	edc7 1a06 	vstr	s3, [r7, #24]
 80056dc:	ed87 2a05 	vstr	s4, [r7, #20]
 80056e0:	edc7 2a04 	vstr	s5, [r7, #16]
 80056e4:	ed87 3a03 	vstr	s6, [r7, #12]
 80056e8:	edc7 3a02 	vstr	s7, [r7, #8]
 80056ec:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f804 	bl	800572c <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005724:	bf00      	nop
 8005726:	3728      	adds	r7, #40	; 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <PIDCoeffCalc>:
	pid->K[a] = value;
	PIDCoeffCalc(pid);
}

void PIDCoeffCalc (PID_t *pid)
{
 800572c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	edd3 7a08 	vldr	s15, [r3, #32]
 800573c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005744:	d013      	beq.n	800576e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	ed93 7a03 	vldr	s14, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800575a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
 800576c:	e007      	b.n	800577e <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	edd3 7a07 	vldr	s15, [r3, #28]
 8005784:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800578c:	d108      	bne.n	80057a0 <PIDCoeffCalc+0x74>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005794:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579c:	f000 80ef 	beq.w	800597e <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80057ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b0:	ee17 0a90 	vmov	r0, s15
 80057b4:	f7fa fec8 	bl	8000548 <__aeabi_f2d>
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057c0:	f7fa fd62 	bl	8000288 <__aeabi_dsub>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4614      	mov	r4, r2
 80057ca:	461d      	mov	r5, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80057d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057dc:	ee17 0a90 	vmov	r0, s15
 80057e0:	f7fa feb2 	bl	8000548 <__aeabi_f2d>
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ec:	f7fa fd4e 	bl	800028c <__adddf3>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4620      	mov	r0, r4
 80057f6:	4629      	mov	r1, r5
 80057f8:	f7fb f828 	bl	800084c <__aeabi_ddiv>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	f7fb f9f0 	bl	8000be8 <__aeabi_d2f>
 8005808:	4603      	mov	r3, r0
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef1 7a67 	vneg.f32	s15, s15
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fa fe93 	bl	8000548 <__aeabi_f2d>
 8005822:	4604      	mov	r4, r0
 8005824:	460d      	mov	r5, r1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	4618      	mov	r0, r3
 800582c:	f7fa fe8c 	bl	8000548 <__aeabi_f2d>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	f7fa fd2a 	bl	800028c <__adddf3>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4690      	mov	r8, r2
 800583e:	4699      	mov	r9, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fe7f 	bl	8000548 <__aeabi_f2d>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4640      	mov	r0, r8
 8005850:	4649      	mov	r1, r9
 8005852:	f7fa fed1 	bl	80005f8 <__aeabi_dmul>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4690      	mov	r8, r2
 800585c:	4699      	mov	r9, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	edd3 7a03 	vldr	s15, [r3, #12]
 800586a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800586e:	ee17 0a90 	vmov	r0, s15
 8005872:	f7fa fe69 	bl	8000548 <__aeabi_f2d>
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800587e:	f7fa fd05 	bl	800028c <__adddf3>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4640      	mov	r0, r8
 8005888:	4649      	mov	r1, r9
 800588a:	f7fa ffdf 	bl	800084c <__aeabi_ddiv>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fa fcf9 	bl	800028c <__adddf3>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4610      	mov	r0, r2
 80058a0:	4619      	mov	r1, r3
 80058a2:	f7fb f9a1 	bl	8000be8 <__aeabi_d2f>
 80058a6:	4602      	mov	r2, r0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80058b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058bc:	ee17 0a90 	vmov	r0, s15
 80058c0:	f7fa fe42 	bl	8000548 <__aeabi_f2d>
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4614      	mov	r4, r2
 80058d6:	461d      	mov	r5, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fe33 	bl	8000548 <__aeabi_f2d>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fe85 	bl	80005f8 <__aeabi_dmul>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4614      	mov	r4, r2
 80058f4:	461d      	mov	r5, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fa fe24 	bl	8000548 <__aeabi_f2d>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	f7fa fcc2 	bl	800028c <__adddf3>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4690      	mov	r8, r2
 800590e:	4699      	mov	r9, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005914:	4618      	mov	r0, r3
 8005916:	f7fa fe17 	bl	8000548 <__aeabi_f2d>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4640      	mov	r0, r8
 8005920:	4649      	mov	r1, r9
 8005922:	f7fa fe69 	bl	80005f8 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4614      	mov	r4, r2
 8005938:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	edd3 7a03 	vldr	s15, [r3, #12]
 8005946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594a:	ee17 0a90 	vmov	r0, s15
 800594e:	f7fa fdfb 	bl	8000548 <__aeabi_f2d>
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800595a:	f7fa fc97 	bl	800028c <__adddf3>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fa ff71 	bl	800084c <__aeabi_ddiv>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	f7fb f939 	bl	8000be8 <__aeabi_d2f>
 8005976:	4602      	mov	r2, r0
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	63da      	str	r2, [r3, #60]	; 0x3c
 800597c:	e00c      	b.n	8005998 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	63da      	str	r2, [r3, #60]	; 0x3c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	; 0x38
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080059a2 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <PID>:
{
	return !pid->s_flag;	/* 1 is not saturated, 0 is saturated */
}

void PID (PID_t *pid)
{
 80059de:	b480      	push	{r7}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
	/* Error ******************************************************************/
	float input_buffer, error;

	input_buffer = *pid->error;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	613b      	str	r3, [r7, #16]
	error = input_buffer * pid->K[KE];
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80059f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Reset previous sum *****************************************************/
	pid->s_delay = 0;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	651a      	str	r2, [r3, #80]	; 0x50

	/* I algorithm ************************************************************/

	if (pid->K[KI] != 0){
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8005a0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a16:	d033      	beq.n	8005a80 <PID+0xa2>
		if (pid->s_flag){     //flag only, so 0 or 1...
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <PID+0x5e>
			pid->i_delay[1] = error + pid->i_delay[0];      //it is not saturated, so it will continue add error
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8005a3a:	e003      	b.n	8005a44 <PID+0x66>
		} else {
			pid->i_delay[1] = pid->i_delay[0];				//it is saturated already, so all pid->i_delay will be constant
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005a56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5a:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (pid->K[B_1] * pid->i_delay[0]);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005a6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + (pid->K[B_0] * pid->i_delay[1]) //after saturated, s_delay will be continously added
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->i_delay[0] = pid->i_delay[1];
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40

// since final output is addition of 2 outputs, so pid->s_delay will combine with the equation in document..

	/* PD algorithm ***********************************************************/

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){       				// i has change behind KP to KD..
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	d107      	bne.n	8005aa0 <PID+0xc2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005a96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	d02c      	beq.n	8005afa <PID+0x11c>
		pid->d_delay[1] = error + pid->K[C_1] * pid->d_delay[0];  		//pid->d_delay[0] is old value,pid->d_delay[1]is new value,so both are different values
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ pid->K[D_1] * pid->d_delay[0];
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8005ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
		pid->s_delay = pid->s_delay + pid->K[D_0] * pid->d_delay[1]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		pid->d_delay[0] = pid->d_delay[1];
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	649a      	str	r2, [r3, #72]	; 0x48
	}

	/* Saturation element *****************************************************/
	float output_buffer, output;

	output_buffer = pid->s_delay;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afe:	60bb      	str	r3, [r7, #8]
	if (output_buffer > pid->K[SAT]){
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b06:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b12:	dd0f      	ble.n	8005b34 <PID+0x156>
		output = (pid->K[SAT] * pid->K[KU]);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	ed93 7a04 	vldr	s14, [r3, #16]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	7813      	ldrb	r3, [r2, #0]
 8005b2c:	f36f 0300 	bfc	r3, #0, #1
 8005b30:	7013      	strb	r3, [r2, #0]
 8005b32:	e02b      	b.n	8005b8c <PID+0x1ae>
	}else if (output_buffer < -(pid->K[SAT])){
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b3a:	eef1 7a67 	vneg.f32	s15, s15
 8005b3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b4a:	d511      	bpl.n	8005b70 <PID+0x192>
		output = -(pid->K[SAT] * pid->K[KU]);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b5c:	eef1 7a67 	vneg.f32	s15, s15
 8005b60:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 0;							/* Saturated */
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	7813      	ldrb	r3, [r2, #0]
 8005b68:	f36f 0300 	bfc	r3, #0, #1
 8005b6c:	7013      	strb	r3, [r2, #0]
 8005b6e:	e00d      	b.n	8005b8c <PID+0x1ae>
	}else {
		output = (output_buffer * pid->K[KU]);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b76:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a05 	vstr	s15, [r7, #20]
		pid->s_flag = 1;							/* Not saturated */
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	7813      	ldrb	r3, [r2, #0]
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	7013      	strb	r3, [r2, #0]
	}

	/* Output *****************************************************************/
	*pid->out_put = output;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 10) != HAL_OK;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	230a      	movs	r3, #10
 8005bb0:	2188      	movs	r1, #136	; 0x88
 8005bb2:	f006 ffa9 	bl	800cb08 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f817 	bl	8005bea <PSx_HandlerI2C>
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	665a      	str	r2, [r3, #100]	; 0x64
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 10);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	230a      	movs	r3, #10
 8005bdc:	2188      	movs	r1, #136	; 0x88
 8005bde:	f006 ff93 	bl	800cb08 <HAL_I2C_Master_Receive_DMA>
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b082      	sub	sp, #8
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	785a      	ldrb	r2, [r3, #1]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	789a      	ldrb	r2, [r3, #2]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	78db      	ldrb	r3, [r3, #3]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	791b      	ldrb	r3, [r3, #4]
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	795b      	ldrb	r3, [r3, #5]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	799b      	ldrb	r3, [r3, #6]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	79db      	ldrb	r3, [r3, #7]
 8005c32:	461a      	mov	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	7a1b      	ldrb	r3, [r3, #8]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	7a5a      	ldrb	r2, [r3, #9]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	PSxBTGetXY(psxbt);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f807 	bl	8005c60 <PSxBTGetXY>
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	0000      	movs	r0, r0
 8005c5c:	0000      	movs	r0, r0
	...

08005c60 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c74:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8005f78 <PSxBTGetXY+0x318>
 8005c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c80:	d53e      	bpl.n	8005d00 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	ee17 0a90 	vmov	r0, s15
 8005c92:	f7fa fc59 	bl	8000548 <__aeabi_f2d>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	a1b5      	add	r1, pc, #724	; (adr r1, 8005f70 <PSxBTGetXY+0x310>)
 8005c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ca0:	f7fa faf2 	bl	8000288 <__aeabi_dsub>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4619      	mov	r1, r3
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	4bb2      	ldr	r3, [pc, #712]	; (8005f7c <PSxBTGetXY+0x31c>)
 8005cb2:	f7fa fdcb 	bl	800084c <__aeabi_ddiv>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fa ff93 	bl	8000be8 <__aeabi_d2f>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005cce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd6:	d504      	bpl.n	8005ce2 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ce0:	e05d      	b.n	8005d9e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf4:	dd53      	ble.n	8005d9e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8005cfe:	e04e      	b.n	8005d9e <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	ee07 3a90 	vmov	s15, r3
 8005d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0c:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8005f88 <PSxBTGetXY+0x328>
 8005d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	dd3d      	ble.n	8005d96 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	ee17 0a90 	vmov	r0, s15
 8005d2a:	f7fa fc0d 	bl	8000548 <__aeabi_f2d>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	4992      	ldr	r1, [pc, #584]	; (8005f80 <PSxBTGetXY+0x320>)
 8005d38:	f7fa faa6 	bl	8000288 <__aeabi_dsub>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	4b8c      	ldr	r3, [pc, #560]	; (8005f7c <PSxBTGetXY+0x31c>)
 8005d4a:	f7fa fd7f 	bl	800084c <__aeabi_ddiv>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa ff47 	bl	8000be8 <__aeabi_d2f>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6e:	dd04      	ble.n	8005d7a <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f04f 0200 	mov.w	r2, #0
 8005d76:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d78:	e011      	b.n	8005d9e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8005d80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8c:	d507      	bpl.n	8005d9e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a7c      	ldr	r2, [pc, #496]	; (8005f84 <PSxBTGetXY+0x324>)
 8005d92:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d94:	e003      	b.n	8005d9e <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005f78 <PSxBTGetXY+0x318>
 8005dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db6:	d53e      	bpl.n	8005e36 <PSxBTGetXY+0x1d6>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc4:	ee17 0a90 	vmov	r0, s15
 8005dc8:	f7fa fbbe 	bl	8000548 <__aeabi_f2d>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	a167      	add	r1, pc, #412	; (adr r1, 8005f70 <PSxBTGetXY+0x310>)
 8005dd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd6:	f7fa fa57 	bl	8000288 <__aeabi_dsub>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <PSxBTGetXY+0x31c>)
 8005de8:	f7fa fd30 	bl	800084c <__aeabi_ddiv>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f7fa fef8 	bl	8000be8 <__aeabi_d2f>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005e04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0c:	d504      	bpl.n	8005e18 <PSxBTGetXY+0x1b8>
			psxbt->joyR_x = 0.0;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50
 8005e16:	e05d      	b.n	8005ed4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x > 1.0){
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2a:	dd53      	ble.n	8005ed4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = 1.0;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005e32:	651a      	str	r2, [r3, #80]	; 0x50
 8005e34:	e04e      	b.n	8005ed4 <PSxBTGetXY+0x274>
		}
	}else if(joyR_right){
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005f88 <PSxBTGetXY+0x328>
 8005e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e4e:	dd3d      	ble.n	8005ecc <PSxBTGetXY+0x26c>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/1.00;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e54:	ee07 3a90 	vmov	s15, r3
 8005e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5c:	ee17 0a90 	vmov	r0, s15
 8005e60:	f7fa fb72 	bl	8000548 <__aeabi_f2d>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	f04f 0000 	mov.w	r0, #0
 8005e6c:	4944      	ldr	r1, [pc, #272]	; (8005f80 <PSxBTGetXY+0x320>)
 8005e6e:	f7fa fa0b 	bl	8000288 <__aeabi_dsub>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4610      	mov	r0, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <PSxBTGetXY+0x31c>)
 8005e80:	f7fa fce4 	bl	800084c <__aeabi_ddiv>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	f7fa feac 	bl	8000be8 <__aeabi_d2f>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	651a      	str	r2, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005e9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	dd04      	ble.n	8005eb0 <PSxBTGetXY+0x250>
			psxbt->joyR_x = 0.0;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	651a      	str	r2, [r3, #80]	; 0x50
 8005eae:	e011      	b.n	8005ed4 <PSxBTGetXY+0x274>
		}else if(psxbt->joyR_x < -1.0){
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8005eb6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec2:	d507      	bpl.n	8005ed4 <PSxBTGetXY+0x274>
			psxbt->joyR_x = -1.0;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a2f      	ldr	r2, [pc, #188]	; (8005f84 <PSxBTGetXY+0x324>)
 8005ec8:	651a      	str	r2, [r3, #80]	; 0x50
 8005eca:	e003      	b.n	8005ed4 <PSxBTGetXY+0x274>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f04f 0200 	mov.w	r2, #0
 8005ed2:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005f78 <PSxBTGetXY+0x318>
 8005ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eec:	d54e      	bpl.n	8005f8c <PSxBTGetXY+0x32c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	ee17 0a90 	vmov	r0, s15
 8005efe:	f7fa fb23 	bl	8000548 <__aeabi_f2d>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	a11a      	add	r1, pc, #104	; (adr r1, 8005f70 <PSxBTGetXY+0x310>)
 8005f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f0c:	f7fa f9bc 	bl	8000288 <__aeabi_dsub>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <PSxBTGetXY+0x31c>)
 8005f1e:	f7fa fc95 	bl	800084c <__aeabi_ddiv>
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	f7fa fe5d 	bl	8000be8 <__aeabi_d2f>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8005f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f42:	d504      	bpl.n	8005f4e <PSxBTGetXY+0x2ee>
			psxbt->joyL_y = 0.0;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
 8005f4c:	e06d      	b.n	800602a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y > 1.0){
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8005f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f60:	dd63      	ble.n	800602a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = 1.0;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
 8005f6a:	e05e      	b.n	800602a <PSxBTGetXY+0x3ca>
 8005f6c:	f3af 8000 	nop.w
 8005f70:	00000000 	.word	0x00000000
 8005f74:	405cc000 	.word	0x405cc000
 8005f78:	42e60000 	.word	0x42e60000
 8005f7c:	40590000 	.word	0x40590000
 8005f80:	40618000 	.word	0x40618000
 8005f84:	bf800000 	.word	0xbf800000
 8005f88:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8005f88 <PSxBTGetXY+0x328>
 8005f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	dd3d      	ble.n	8006022 <PSxBTGetXY+0x3c2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb2:	ee17 0a90 	vmov	r0, s15
 8005fb6:	f7fa fac7 	bl	8000548 <__aeabi_f2d>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	f04f 0000 	mov.w	r0, #0
 8005fc2:	4981      	ldr	r1, [pc, #516]	; (80061c8 <PSxBTGetXY+0x568>)
 8005fc4:	f7fa f960 	bl	8000288 <__aeabi_dsub>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	4b7d      	ldr	r3, [pc, #500]	; (80061cc <PSxBTGetXY+0x56c>)
 8005fd6:	f7fa fc39 	bl	800084c <__aeabi_ddiv>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f7fa fe01 	bl	8000be8 <__aeabi_d2f>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8005ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	dd04      	ble.n	8006006 <PSxBTGetXY+0x3a6>
			psxbt->joyL_y = 0.0;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
 8006004:	e011      	b.n	800602a <PSxBTGetXY+0x3ca>
		}else if(psxbt->joyL_y < -1.0){
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800600c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006018:	d507      	bpl.n	800602a <PSxBTGetXY+0x3ca>
			psxbt->joyL_y = -1.0;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a6c      	ldr	r2, [pc, #432]	; (80061d0 <PSxBTGetXY+0x570>)
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
 8006020:	e003      	b.n	800602a <PSxBTGetXY+0x3ca>
		}
	}else{
		psxbt->joyL_y = 0.0;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006036:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80061d4 <PSxBTGetXY+0x574>
 800603a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800603e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006042:	d53e      	bpl.n	80060c2 <PSxBTGetXY+0x462>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006050:	ee17 0a90 	vmov	r0, s15
 8006054:	f7fa fa78 	bl	8000548 <__aeabi_f2d>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	a156      	add	r1, pc, #344	; (adr r1, 80061b8 <PSxBTGetXY+0x558>)
 800605e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006062:	f7fa f911 	bl	8000288 <__aeabi_dsub>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	4b56      	ldr	r3, [pc, #344]	; (80061cc <PSxBTGetXY+0x56c>)
 8006074:	f7fa fbea 	bl	800084c <__aeabi_ddiv>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4610      	mov	r0, r2
 800607e:	4619      	mov	r1, r3
 8006080:	f7fa fdb2 	bl	8000be8 <__aeabi_d2f>
 8006084:	4602      	mov	r2, r0
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006098:	d504      	bpl.n	80060a4 <PSxBTGetXY+0x444>
			psxbt->joyL_x = 0.0;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	659a      	str	r2, [r3, #88]	; 0x58
 80060a2:	e05d      	b.n	8006160 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x > 1.0){
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80060aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b6:	dd53      	ble.n	8006160 <PSxBTGetXY+0x500>
			psxbt->joyL_x = 1.0;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80060be:	659a      	str	r2, [r3, #88]	; 0x58
 80060c0:	e04e      	b.n	8006160 <PSxBTGetXY+0x500>
		}
	}else if(joyL_right){
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80061d8 <PSxBTGetXY+0x578>
 80060d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060da:	dd3d      	ble.n	8006158 <PSxBTGetXY+0x4f8>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/1.00;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e8:	ee17 0a90 	vmov	r0, s15
 80060ec:	f7fa fa2c 	bl	8000548 <__aeabi_f2d>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	f04f 0000 	mov.w	r0, #0
 80060f8:	4933      	ldr	r1, [pc, #204]	; (80061c8 <PSxBTGetXY+0x568>)
 80060fa:	f7fa f8c5 	bl	8000288 <__aeabi_dsub>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <PSxBTGetXY+0x56c>)
 800610c:	f7fa fb9e 	bl	800084c <__aeabi_ddiv>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	f7fa fd66 	bl	8000be8 <__aeabi_d2f>
 800611c:	4602      	mov	r2, r0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	659a      	str	r2, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	dd04      	ble.n	800613c <PSxBTGetXY+0x4dc>
			psxbt->joyL_x = 0.0;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	659a      	str	r2, [r3, #88]	; 0x58
 800613a:	e011      	b.n	8006160 <PSxBTGetXY+0x500>
		}else if(psxbt->joyL_x < -1.0){
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006142:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614e:	d507      	bpl.n	8006160 <PSxBTGetXY+0x500>
			psxbt->joyL_x = -1.0;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <PSxBTGetXY+0x570>)
 8006154:	659a      	str	r2, [r3, #88]	; 0x58
 8006156:	e003      	b.n	8006160 <PSxBTGetXY+0x500>
		}
	}else{
		psxbt->joyL_x = 0.0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006164:	4618      	mov	r0, r3
 8006166:	f7fa f9cd 	bl	8000504 <__aeabi_ui2d>
 800616a:	a315      	add	r3, pc, #84	; (adr r3, 80061c0 <PSxBTGetXY+0x560>)
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f7fa fb6c 	bl	800084c <__aeabi_ddiv>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	f7fa fd34 	bl	8000be8 <__aeabi_d2f>
 8006180:	4602      	mov	r2, r0
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	4618      	mov	r0, r3
 800618c:	f7fa f9ba 	bl	8000504 <__aeabi_ui2d>
 8006190:	a30b      	add	r3, pc, #44	; (adr r3, 80061c0 <PSxBTGetXY+0x560>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa fb59 	bl	800084c <__aeabi_ddiv>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fa fd21 	bl	8000be8 <__aeabi_d2f>
 80061a6:	4602      	mov	r2, r0
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	f3af 8000 	nop.w
 80061b8:	00000000 	.word	0x00000000
 80061bc:	405cc000 	.word	0x405cc000
 80061c0:	00000000 	.word	0x00000000
 80061c4:	406fe000 	.word	0x406fe000
 80061c8:	40618000 	.word	0x40618000
 80061cc:	40590000 	.word	0x40590000
 80061d0:	bf800000 	.word	0xbf800000
 80061d4:	42e60000 	.word	0x42e60000
 80061d8:	430c0000 	.word	0x430c0000

080061dc <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]


	rns->ins.instruction = RNS_STOP;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2203      	movs	r2, #3
 80061e8:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <RNSStop+0x8c>)
 8006214:	2211      	movs	r2, #17
 8006216:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	791a      	ldrb	r2, [r3, #4]
 800621c:	4b12      	ldr	r3, [pc, #72]	; (8006268 <RNSStop+0x8c>)
 800621e:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	2302      	movs	r3, #2
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <RNSStop+0x8c>)
 8006228:	2117      	movs	r1, #23
 800622a:	f7fc ff45 	bl	80030b8 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,&(rns->ins.ins_buffer[0]),8);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f103 0208 	add.w	r2, r3, #8
 8006238:	2308      	movs	r3, #8
 800623a:	2118      	movs	r1, #24
 800623c:	f7fc ff3c 	bl	80030b8 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,&(rns->ins.ins_buffer[2]),8);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f103 0210 	add.w	r2, r3, #16
 800624a:	2308      	movs	r3, #8
 800624c:	2119      	movs	r1, #25
 800624e:	f7fc ff33 	bl	80030b8 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8006252:	bf00      	nop
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800625a:	2b02      	cmp	r3, #2
 800625c:	d0fa      	beq.n	8006254 <RNSStop+0x78>


}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20008ac8 	.word	0x20008ac8

0800626c <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 800626c:	b580      	push	{r7, lr}
 800626e:	b08c      	sub	sp, #48	; 0x30
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800627a:	f107 0318 	add.w	r3, r7, #24
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	609a      	str	r2, [r3, #8]
 8006286:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006288:	f107 0310 	add.w	r3, r7, #16
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4a6d      	ldr	r2, [pc, #436]	; (800644c <ServoxInit+0x1e0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d106      	bne.n	80062a8 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a6c      	ldr	r2, [pc, #432]	; (8006450 <ServoxInit+0x1e4>)
 800629e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	22a7      	movs	r2, #167	; 0xa7
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	e078      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4a6a      	ldr	r2, [pc, #424]	; (8006454 <ServoxInit+0x1e8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d107      	bne.n	80062c0 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062b6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2253      	movs	r2, #83	; 0x53
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e06c      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a65      	ldr	r2, [pc, #404]	; (8006458 <ServoxInit+0x1ec>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d106      	bne.n	80062d6 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	4a64      	ldr	r2, [pc, #400]	; (800645c <ServoxInit+0x1f0>)
 80062cc:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2253      	movs	r2, #83	; 0x53
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e061      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4a61      	ldr	r2, [pc, #388]	; (8006460 <ServoxInit+0x1f4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d106      	bne.n	80062ec <ServoxInit+0x80>
			htimx->Instance = TIM4;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4a60      	ldr	r2, [pc, #384]	; (8006464 <ServoxInit+0x1f8>)
 80062e2:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2253      	movs	r2, #83	; 0x53
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	e056      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	4a5e      	ldr	r2, [pc, #376]	; (8006468 <ServoxInit+0x1fc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d106      	bne.n	8006302 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4a5d      	ldr	r2, [pc, #372]	; (800646c <ServoxInit+0x200>)
 80062f8:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2253      	movs	r2, #83	; 0x53
 80062fe:	605a      	str	r2, [r3, #4]
 8006300:	e04b      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a5a      	ldr	r2, [pc, #360]	; (8006470 <ServoxInit+0x204>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d106      	bne.n	8006318 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4a59      	ldr	r2, [pc, #356]	; (8006474 <ServoxInit+0x208>)
 800630e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	22a7      	movs	r2, #167	; 0xa7
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	e040      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4a57      	ldr	r2, [pc, #348]	; (8006478 <ServoxInit+0x20c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d106      	bne.n	800632e <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4a56      	ldr	r2, [pc, #344]	; (800647c <ServoxInit+0x210>)
 8006324:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	22a7      	movs	r2, #167	; 0xa7
 800632a:	605a      	str	r2, [r3, #4]
 800632c:	e035      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4a53      	ldr	r2, [pc, #332]	; (8006480 <ServoxInit+0x214>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d106      	bne.n	8006344 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <ServoxInit+0x218>)
 800633a:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	22a7      	movs	r2, #167	; 0xa7
 8006340:	605a      	str	r2, [r3, #4]
 8006342:	e02a      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4a50      	ldr	r2, [pc, #320]	; (8006488 <ServoxInit+0x21c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d106      	bne.n	800635a <ServoxInit+0xee>
			htimx->Instance = TIM11;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a4f      	ldr	r2, [pc, #316]	; (800648c <ServoxInit+0x220>)
 8006350:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	22a7      	movs	r2, #167	; 0xa7
 8006356:	605a      	str	r2, [r3, #4]
 8006358:	e01f      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	4a4c      	ldr	r2, [pc, #304]	; (8006490 <ServoxInit+0x224>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d106      	bne.n	8006370 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a4b      	ldr	r2, [pc, #300]	; (8006494 <ServoxInit+0x228>)
 8006366:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2253      	movs	r2, #83	; 0x53
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	e014      	b.n	800639a <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4a49      	ldr	r2, [pc, #292]	; (8006498 <ServoxInit+0x22c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d106      	bne.n	8006386 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4a48      	ldr	r2, [pc, #288]	; (800649c <ServoxInit+0x230>)
 800637c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2253      	movs	r2, #83	; 0x53
 8006382:	605a      	str	r2, [r3, #4]
 8006384:	e009      	b.n	800639a <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4a45      	ldr	r2, [pc, #276]	; (80064a0 <ServoxInit+0x234>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d105      	bne.n	800639a <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a44      	ldr	r2, [pc, #272]	; (80064a4 <ServoxInit+0x238>)
 8006392:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2253      	movs	r2, #83	; 0x53
 8006398:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80063a6:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2280      	movs	r2, #128	; 0x80
 80063b2:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80063b4:	68b8      	ldr	r0, [r7, #8]
 80063b6:	f009 fa87 	bl	800f8c8 <HAL_TIM_Base_Init>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <ServoxInit+0x158>
		  {
		    Error_Handler();
 80063c0:	f7ff f968 	bl	8005694 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c8:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	4619      	mov	r1, r3
 80063d0:	68b8      	ldr	r0, [r7, #8]
 80063d2:	f009 fd23 	bl	800fe1c <HAL_TIM_ConfigClockSource>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <ServoxInit+0x174>
		  {
		    Error_Handler();
 80063dc:	f7ff f95a 	bl	8005694 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 80063e0:	68b8      	ldr	r0, [r7, #8]
 80063e2:	f009 fae4 	bl	800f9ae <HAL_TIM_PWM_Init>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <ServoxInit+0x184>
			{
				Error_Handler();
 80063ec:	f7ff f952 	bl	8005694 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063f0:	2300      	movs	r3, #0
 80063f2:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80063f8:	f107 0310 	add.w	r3, r7, #16
 80063fc:	4619      	mov	r1, r3
 80063fe:	68b8      	ldr	r0, [r7, #8]
 8006400:	f00a f908 	bl	8010614 <HAL_TIMEx_MasterConfigSynchronization>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <ServoxInit+0x1a2>
		{
			Error_Handler();
 800640a:	f7ff f943 	bl	8005694 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800640e:	68b8      	ldr	r0, [r7, #8]
 8006410:	f009 fa85 	bl	800f91e <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8006414:	8879      	ldrh	r1, [r7, #2]
 8006416:	2301      	movs	r3, #1
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	2302      	movs	r3, #2
 800641c:	2202      	movs	r2, #2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fa fe6e 	bl	8001100 <GPIOPinsInit>

	servo->htimx = htimx;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642e:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 8006430:	887b      	ldrh	r3, [r7, #2]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f7fb f842 	bl	80014c0 <PWMChannelConfig>

	servo->currentPulse = 0;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	621a      	str	r2, [r3, #32]
}
 8006442:	bf00      	nop
 8006444:	3728      	adds	r7, #40	; 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200067ac 	.word	0x200067ac
 8006450:	40010000 	.word	0x40010000
 8006454:	200068b0 	.word	0x200068b0
 8006458:	20006560 	.word	0x20006560
 800645c:	40000400 	.word	0x40000400
 8006460:	2000639c 	.word	0x2000639c
 8006464:	40000800 	.word	0x40000800
 8006468:	20006520 	.word	0x20006520
 800646c:	40000c00 	.word	0x40000c00
 8006470:	2000635c 	.word	0x2000635c
 8006474:	40010400 	.word	0x40010400
 8006478:	200067ec 	.word	0x200067ec
 800647c:	40014000 	.word	0x40014000
 8006480:	2000647c 	.word	0x2000647c
 8006484:	40014400 	.word	0x40014400
 8006488:	200066c4 	.word	0x200066c4
 800648c:	40014800 	.word	0x40014800
 8006490:	200069d0 	.word	0x200069d0
 8006494:	40001800 	.word	0x40001800
 8006498:	20006644 	.word	0x20006644
 800649c:	40001c00 	.word	0x40001c00
 80064a0:	20006990 	.word	0x20006990
 80064a4:	40002000 	.word	0x40002000

080064a8 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d204      	bcs.n	80064c6 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695a      	ldr	r2, [r3, #20]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	621a      	str	r2, [r3, #32]
 80064c4:	e00c      	b.n	80064e0 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d904      	bls.n	80064da <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]
 80064d8:	e002      	b.n	80064e0 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <ServoSetPulse+0x4e>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6a12      	ldr	r2, [r2, #32]
 80064f2:	635a      	str	r2, [r3, #52]	; 0x34

}
 80064f4:	e01b      	b.n	800652e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d106      	bne.n	800650c <ServoSetPulse+0x64>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	6393      	str	r3, [r2, #56]	; 0x38
}
 800650a:	e010      	b.n	800652e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d106      	bne.n	8006522 <ServoSetPulse+0x7a>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006520:	e005      	b.n	800652e <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	619a      	str	r2, [r3, #24]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	441a      	add	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	429a      	cmp	r2, r3
 800657e:	d203      	bcs.n	8006588 <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d903      	bls.n	800659c <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <ServoMovePulse+0x54>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6a12      	ldr	r2, [r2, #32]
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80065b0:	e01b      	b.n	80065ea <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d106      	bne.n	80065c8 <ServoMovePulse+0x6a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065c6:	e010      	b.n	80065ea <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d106      	bne.n	80065de <ServoMovePulse+0x80>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80065dc:	e005      	b.n	80065ea <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
	...

080065f8 <SPIxInit>:
 *
 * Function Return		: None
 * Function Example		: IMU_SPI_Init(&hspix, GPIOB , GPIO_Pin_12, SPI_MODE_MASTER);
 *
 */
void SPIxInit(SPI_HandleTypeDef* hspix, GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode, int InterruptEnable){
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	80fb      	strh	r3, [r7, #6]

	IRQn_Type nvic;
	GPIOPinsInit(GPIOx_NSS, GPIO_Pin_NSS, GPIO_MODE_OUTPUT_PP, GPIO_PULLUP, GPIO_SPEED_FREQ_HIGH);
 8006608:	88f9      	ldrh	r1, [r7, #6]
 800660a:	2302      	movs	r3, #2
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2301      	movs	r3, #1
 8006610:	2201      	movs	r2, #1
 8006612:	68b8      	ldr	r0, [r7, #8]
 8006614:	f7fa fd74 	bl	8001100 <GPIOPinsInit>

	if(hspix == &hspi1){
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <SPIxInit+0xcc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d105      	bne.n	800662c <SPIxInit+0x34>
		hspix->Instance = SPI1;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4a29      	ldr	r2, [pc, #164]	; (80066c8 <SPIxInit+0xd0>)
 8006624:	601a      	str	r2, [r3, #0]
		nvic = SPI1_IRQn;
 8006626:	2323      	movs	r3, #35	; 0x23
 8006628:	75fb      	strb	r3, [r7, #23]
 800662a:	e00e      	b.n	800664a <SPIxInit+0x52>
	}else if(hspix == &hspi2){
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a27      	ldr	r2, [pc, #156]	; (80066cc <SPIxInit+0xd4>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d105      	bne.n	8006640 <SPIxInit+0x48>
		hspix->Instance = SPI2;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <SPIxInit+0xd8>)
 8006638:	601a      	str	r2, [r3, #0]
		nvic = SPI2_IRQn;
 800663a:	2324      	movs	r3, #36	; 0x24
 800663c:	75fb      	strb	r3, [r7, #23]
 800663e:	e004      	b.n	800664a <SPIxInit+0x52>
	}
	else{
		hspix->Instance = SPI3;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4a24      	ldr	r2, [pc, #144]	; (80066d4 <SPIxInit+0xdc>)
 8006644:	601a      	str	r2, [r3, #0]
		nvic = SPI3_IRQn;
 8006646:	2333      	movs	r3, #51	; 0x33
 8006648:	75fb      	strb	r3, [r7, #23]
	}

	hspix->Init.Mode = Mode;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	605a      	str	r2, [r3, #4]
	hspix->Init.Direction = SPI_DIRECTION_2LINES;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	609a      	str	r2, [r3, #8]
	hspix->Init.DataSize = SPI_DATASIZE_8BIT;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	60da      	str	r2, [r3, #12]
	hspix->Init.CLKPolarity = SPI_POLARITY_LOW;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	611a      	str	r2, [r3, #16]
	hspix->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	615a      	str	r2, [r3, #20]
//	hspix->Init.CLKPhase = SPI_PHASE_2EDGE;
	hspix->Init.NSS = SPI_NSS_SOFT ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800666e:	619a      	str	r2, [r3, #24]
	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
//	hspix->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
	hspix->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	621a      	str	r2, [r3, #32]
	hspix->Init.TIMode = SPI_TIMODE_DISABLE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
	hspix->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	629a      	str	r2, [r3, #40]	; 0x28
	hspix->Init.CRCPolynomial = 10;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	220a      	movs	r2, #10
 800668c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800668e:	480d      	ldr	r0, [pc, #52]	; (80066c4 <SPIxInit+0xcc>)
 8006690:	f008 fdb8 	bl	800f204 <HAL_SPI_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <SPIxInit+0xa6>
	{
		Error_Handler();
 800669a:	f7fe fffb 	bl	8005694 <Error_Handler>
	}

	if(InterruptEnable){
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <SPIxInit+0xc4>
		HAL_NVIC_SetPriority(nvic, SPI1_RX_IRQ_PRIO, 0);
 80066a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066a8:	2200      	movs	r2, #0
 80066aa:	210e      	movs	r1, #14
 80066ac:	4618      	mov	r0, r3
 80066ae:	f004 fed1 	bl	800b454 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80066b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f004 fee8 	bl	800b48c <HAL_NVIC_EnableIRQ>
	}

}
 80066bc:	bf00      	nop
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20008224 	.word	0x20008224
 80066c8:	40013000 	.word	0x40013000
 80066cc:	200070e0 	.word	0x200070e0
 80066d0:	40003800 	.word	0x40003800
 80066d4:	40003c00 	.word	0x40003c00

080066d8 <SPIx_DMA_TX_Init>:


void SPIx_DMA_TX_Init(SPI_HandleTypeDef* hspix, DMA_HandleTypeDef* hdma_spix,
		GPIO_TypeDef* GPIOx_NSS, uint16_t GPIO_Pin_NSS,uint32_t Mode){
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	807b      	strh	r3, [r7, #2]

	__HAL_RCC_DMA2_CLK_ENABLE();
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	4b28      	ldr	r3, [pc, #160]	; (800678c <SPIx_DMA_TX_Init+0xb4>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ee:	4a27      	ldr	r2, [pc, #156]	; (800678c <SPIx_DMA_TX_Init+0xb4>)
 80066f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4b25      	ldr	r3, [pc, #148]	; (800678c <SPIx_DMA_TX_Init+0xb4>)
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, SPI1_TX_IRQ_PRIO, 0);
 8006702:	2200      	movs	r2, #0
 8006704:	210d      	movs	r1, #13
 8006706:	2044      	movs	r0, #68	; 0x44
 8006708:	f004 fea4 	bl	800b454 <HAL_NVIC_SetPriority>
    HAL_NVIC_ClearPendingIRQ(DMA2_Stream5_IRQn);
 800670c:	2044      	movs	r0, #68	; 0x44
 800670e:	f004 fed9 	bl	800b4c4 <HAL_NVIC_ClearPendingIRQ>
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8006712:	2044      	movs	r0, #68	; 0x44
 8006714:	f004 feba 	bl	800b48c <HAL_NVIC_EnableIRQ>

	SPIxInit(hspix, GPIOx_NSS, GPIO_Pin_NSS, Mode, DISABLE);
 8006718:	887a      	ldrh	r2, [r7, #2]
 800671a:	2300      	movs	r3, #0
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff ff68 	bl	80065f8 <SPIxInit>

    hdma_spix->Instance = DMA2_Stream5;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <SPIx_DMA_TX_Init+0xb8>)
 800672c:	601a      	str	r2, [r3, #0]
    hdma_spix->Init.Channel = DMA_CHANNEL_3;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006734:	605a      	str	r2, [r3, #4]
    hdma_spix->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2240      	movs	r2, #64	; 0x40
 800673a:	609a      	str	r2, [r3, #8]
    hdma_spix->Init.PeriphInc = DMA_PINC_DISABLE;
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]
    hdma_spix->Init.MemInc = DMA_MINC_ENABLE;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006748:	611a      	str	r2, [r3, #16]
    hdma_spix->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	615a      	str	r2, [r3, #20]
    hdma_spix->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	619a      	str	r2, [r3, #24]
    hdma_spix->Init.Mode = DMA_NORMAL;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2200      	movs	r2, #0
 800675a:	61da      	str	r2, [r3, #28]
    hdma_spix->Init.Priority = DMA_PRIORITY_LOW;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2200      	movs	r2, #0
 8006760:	621a      	str	r2, [r3, #32]
    hdma_spix->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(hdma_spix) != HAL_OK)
 8006768:	68b8      	ldr	r0, [r7, #8]
 800676a:	f004 feb9 	bl	800b4e0 <HAL_DMA_Init>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <SPIx_DMA_TX_Init+0xa0>
    {
      Error_Handler();
 8006774:	f7fe ff8e 	bl	8005694 <Error_Handler>
    }

    __HAL_LINKDMA(hspix,hdmatx,*hdma_spix);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	649a      	str	r2, [r3, #72]	; 0x48
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006784:	bf00      	nop
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40023800 	.word	0x40023800
 8006790:	40026488 	.word	0x40026488

08006794 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 8006798:	4802      	ldr	r0, [pc, #8]	; (80067a4 <SPI1_IRQHandler+0x10>)
 800679a:	f008 fecb 	bl	800f534 <HAL_SPI_IRQHandler>
}
 800679e:	bf00      	nop
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20008224 	.word	0x20008224

080067a8 <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 80067ac:	4802      	ldr	r0, [pc, #8]	; (80067b8 <SPI2_IRQHandler+0x10>)
 80067ae:	f008 fec1 	bl	800f534 <HAL_SPI_IRQHandler>
}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200070e0 	.word	0x200070e0

080067bc <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 80067c0:	4802      	ldr	r0, [pc, #8]	; (80067cc <SPI3_IRQHandler+0x10>)
 80067c2:	f008 feb7 	bl	800f534 <HAL_SPI_IRQHandler>
}
 80067c6:	bf00      	nop
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000770c 	.word	0x2000770c

080067d0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(uint32_t controller_id, motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(uint32_t controller_id) = 0;

void bldc_interface_init(void(*func)(uint32_t controller_id, unsigned char *data, unsigned int len)) {
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80067d8:	4a04      	ldr	r2, [pc, #16]	; (80067ec <bldc_interface_init+0x1c>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000910 	.word	0x20000910

080067f0 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	if (!len) {
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f001 8437 	beq.w	8008070 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 8006802:	4bcd      	ldr	r3, [pc, #820]	; (8006b38 <bldc_interface_process_packet+0x348>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800680a:	4bcb      	ldr	r3, [pc, #812]	; (8006b38 <bldc_interface_process_packet+0x348>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
		return;
 8006814:	f001 bc43 	b.w	800809e <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
	int i = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	74fb      	strb	r3, [r7, #19]
	data++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3301      	adds	r3, #1
 8006832:	607b      	str	r3, [r7, #4]
	len--;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	3b01      	subs	r3, #1
 8006838:	603b      	str	r3, [r7, #0]

	switch (id) {
 800683a:	7cfb      	ldrb	r3, [r7, #19]
 800683c:	2b32      	cmp	r3, #50	; 0x32
 800683e:	f201 8419 	bhi.w	8008074 <bldc_interface_process_packet+0x1884>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <bldc_interface_process_packet+0x58>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	08006915 	.word	0x08006915
 800684c:	08008075 	.word	0x08008075
 8006850:	08008075 	.word	0x08008075
 8006854:	08008075 	.word	0x08008075
 8006858:	0800695f 	.word	0x0800695f
 800685c:	08008075 	.word	0x08008075
 8006860:	08008075 	.word	0x08008075
 8006864:	08008075 	.word	0x08008075
 8006868:	08008075 	.word	0x08008075
 800686c:	08008075 	.word	0x08008075
 8006870:	08008075 	.word	0x08008075
 8006874:	08008075 	.word	0x08008075
 8006878:	08008075 	.word	0x08008075
 800687c:	08008051 	.word	0x08008051
 8006880:	08006fd9 	.word	0x08006fd9
 8006884:	08006fd9 	.word	0x08006fd9
 8006888:	08008061 	.word	0x08008061
 800688c:	08007895 	.word	0x08007895
 8006890:	08007895 	.word	0x08007895
 8006894:	08008075 	.word	0x08008075
 8006898:	08008075 	.word	0x08008075
 800689c:	08006f59 	.word	0x08006f59
 80068a0:	08006f79 	.word	0x08006f79
 80068a4:	08008075 	.word	0x08008075
 80068a8:	08007eb9 	.word	0x08007eb9
 80068ac:	08008075 	.word	0x08008075
 80068b0:	08008075 	.word	0x08008075
 80068b4:	08008075 	.word	0x08008075
 80068b8:	08008075 	.word	0x08008075
 80068bc:	08008075 	.word	0x08008075
 80068c0:	08008075 	.word	0x08008075
 80068c4:	08007f61 	.word	0x08007f61
 80068c8:	08007fbd 	.word	0x08007fbd
 80068cc:	08008019 	.word	0x08008019
 80068d0:	08008075 	.word	0x08008075
 80068d4:	08008075 	.word	0x08008075
 80068d8:	08008075 	.word	0x08008075
 80068dc:	08008075 	.word	0x08008075
 80068e0:	08008075 	.word	0x08008075
 80068e4:	08008075 	.word	0x08008075
 80068e8:	08008075 	.word	0x08008075
 80068ec:	08008075 	.word	0x08008075
 80068f0:	08008075 	.word	0x08008075
 80068f4:	08008075 	.word	0x08008075
 80068f8:	08008075 	.word	0x08008075
 80068fc:	08008075 	.word	0x08008075
 8006900:	08008075 	.word	0x08008075
 8006904:	08008075 	.word	0x08008075
 8006908:	08008075 	.word	0x08008075
 800690c:	08008075 	.word	0x08008075
 8006910:	08006b9d 	.word	0x08006b9d
	case COMM_FW_VERSION:
		if (len == 2) {
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d117      	bne.n	800694a <bldc_interface_process_packet+0x15a>
			ind = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	60fa      	str	r2, [r7, #12]
 8006924:	461a      	mov	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4413      	add	r3, r2
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	4b83      	ldr	r3, [pc, #524]	; (8006b3c <bldc_interface_process_packet+0x34c>)
 8006930:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	60fa      	str	r2, [r7, #12]
 8006938:	461a      	mov	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4413      	add	r3, r2
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	4b7f      	ldr	r3, [pc, #508]	; (8006b40 <bldc_interface_process_packet+0x350>)
 8006944:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 8006946:	f001 bbaa 	b.w	800809e <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800694a:	4b7c      	ldr	r3, [pc, #496]	; (8006b3c <bldc_interface_process_packet+0x34c>)
 800694c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006950:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 8006952:	4b7b      	ldr	r3, [pc, #492]	; (8006b40 <bldc_interface_process_packet+0x350>)
 8006954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006958:	601a      	str	r2, [r3, #0]
		break;
 800695a:	f001 bba0 	b.w	800809e <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8006962:	f107 030c 	add.w	r3, r7, #12
 8006966:	4619      	mov	r1, r3
 8006968:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fca0 	bl	80082b2 <buffer_get_float16>
 8006972:	eef0 7a40 	vmov.f32	s15, s0
 8006976:	4b73      	ldr	r3, [pc, #460]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006978:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	4619      	mov	r1, r3
 8006982:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fc93 	bl	80082b2 <buffer_get_float16>
 800698c:	eef0 7a40 	vmov.f32	s15, s0
 8006990:	4b6c      	ldr	r3, [pc, #432]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006992:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	4619      	mov	r1, r3
 800699c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8006b48 <bldc_interface_process_packet+0x358>
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fca1 	bl	80082e8 <buffer_get_float32>
 80069a6:	eef0 7a40 	vmov.f32	s15, s0
 80069aa:	4b66      	ldr	r3, [pc, #408]	; (8006b44 <bldc_interface_process_packet+0x354>)
 80069ac:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 80069b0:	f107 030c 	add.w	r3, r7, #12
 80069b4:	4619      	mov	r1, r3
 80069b6:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8006b48 <bldc_interface_process_packet+0x358>
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fc94 	bl	80082e8 <buffer_get_float32>
 80069c0:	eef0 7a40 	vmov.f32	s15, s0
 80069c4:	4b5f      	ldr	r3, [pc, #380]	; (8006b44 <bldc_interface_process_packet+0x354>)
 80069c6:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 80069ca:	f107 030c 	add.w	r3, r7, #12
 80069ce:	4619      	mov	r1, r3
 80069d0:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006b48 <bldc_interface_process_packet+0x358>
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fc87 	bl	80082e8 <buffer_get_float32>
 80069da:	eef0 7a40 	vmov.f32	s15, s0
 80069de:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <bldc_interface_process_packet+0x354>)
 80069e0:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	4619      	mov	r1, r3
 80069ea:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8006b48 <bldc_interface_process_packet+0x358>
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 fc7a 	bl	80082e8 <buffer_get_float32>
 80069f4:	eef0 7a40 	vmov.f32	s15, s0
 80069f8:	4b52      	ldr	r3, [pc, #328]	; (8006b44 <bldc_interface_process_packet+0x354>)
 80069fa:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 80069fe:	f107 030c 	add.w	r3, r7, #12
 8006a02:	4619      	mov	r1, r3
 8006a04:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8006b4c <bldc_interface_process_packet+0x35c>
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f001 fc52 	bl	80082b2 <buffer_get_float16>
 8006a0e:	eef0 7a40 	vmov.f32	s15, s0
 8006a12:	4b4c      	ldr	r3, [pc, #304]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a14:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fc60 	bl	80082e8 <buffer_get_float32>
 8006a28:	eef0 7a40 	vmov.f32	s15, s0
 8006a2c:	4b45      	ldr	r3, [pc, #276]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a2e:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8006a32:	f107 030c 	add.w	r3, r7, #12
 8006a36:	4619      	mov	r1, r3
 8006a38:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 fc38 	bl	80082b2 <buffer_get_float16>
 8006a42:	eef0 7a40 	vmov.f32	s15, s0
 8006a46:	4b3f      	ldr	r3, [pc, #252]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a48:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8006a4c:	f107 030c 	add.w	r3, r7, #12
 8006a50:	4619      	mov	r1, r3
 8006a52:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8006b50 <bldc_interface_process_packet+0x360>
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fc46 	bl	80082e8 <buffer_get_float32>
 8006a5c:	eef0 7a40 	vmov.f32	s15, s0
 8006a60:	4b38      	ldr	r3, [pc, #224]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006a66:	f107 030c 	add.w	r3, r7, #12
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006b50 <bldc_interface_process_packet+0x360>
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f001 fc39 	bl	80082e8 <buffer_get_float32>
 8006a76:	eef0 7a40 	vmov.f32	s15, s0
 8006a7a:	4b32      	ldr	r3, [pc, #200]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a7c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8006a80:	f107 030c 	add.w	r3, r7, #12
 8006a84:	4619      	mov	r1, r3
 8006a86:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006b50 <bldc_interface_process_packet+0x360>
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fc2c 	bl	80082e8 <buffer_get_float32>
 8006a90:	eef0 7a40 	vmov.f32	s15, s0
 8006a94:	4b2b      	ldr	r3, [pc, #172]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006a96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006a9a:	f107 030c 	add.w	r3, r7, #12
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8006b50 <bldc_interface_process_packet+0x360>
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fc1f 	bl	80082e8 <buffer_get_float32>
 8006aaa:	eef0 7a40 	vmov.f32	s15, s0
 8006aae:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006ab0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8006ab4:	f107 030c 	add.w	r3, r7, #12
 8006ab8:	4619      	mov	r1, r3
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f001 fb99 	bl	80081f2 <buffer_get_int32>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006ac4:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8006ac6:	f107 030c 	add.w	r3, r7, #12
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fb90 	bl	80081f2 <buffer_get_int32>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4a1b      	ldr	r2, [pc, #108]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006ad6:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	60fa      	str	r2, [r7, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	781a      	ldrb	r2, [r3, #0]
 8006ae6:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	da0d      	bge.n	8006b10 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	4619      	mov	r1, r3
 8006afa:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006b54 <bldc_interface_process_packet+0x364>
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fbf2 	bl	80082e8 <buffer_get_float32>
 8006b04:	eef0 7a40 	vmov.f32	s15, s0
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006b0a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8006b0e:	e003      	b.n	8006b18 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	da1b      	bge.n	8006b58 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	60fa      	str	r2, [r7, #12]
 8006b26:	461a      	mov	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <bldc_interface_process_packet+0x354>)
 8006b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006b34:	e014      	b.n	8006b60 <bldc_interface_process_packet+0x370>
 8006b36:	bf00      	nop
 8006b38:	20000914 	.word	0x20000914
 8006b3c:	20000688 	.word	0x20000688
 8006b40:	2000068c 	.word	0x2000068c
 8006b44:	20000628 	.word	0x20000628
 8006b48:	42c80000 	.word	0x42c80000
 8006b4c:	447a0000 	.word	0x447a0000
 8006b50:	461c4000 	.word	0x461c4000
 8006b54:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 8006b58:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <bldc_interface_process_packet+0x39c>)
 8006b5a:	22ff      	movs	r2, #255	; 0xff
 8006b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 8006b60:	4a0b      	ldr	r2, [pc, #44]	; (8006b90 <bldc_interface_process_packet+0x3a0>)
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <bldc_interface_process_packet+0x39c>)
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	2360      	movs	r3, #96	; 0x60
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f00e fb58 	bl	8015220 <memcpy>

		if (rx_value_func) {
 8006b70:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <bldc_interface_process_packet+0x3a4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d003      	beq.n	8006b80 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <bldc_interface_process_packet+0x3a4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4803      	ldr	r0, [pc, #12]	; (8006b8c <bldc_interface_process_packet+0x39c>)
 8006b7e:	4798      	blx	r3
		}

		rx_value_complete = true;
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <bldc_interface_process_packet+0x3a8>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]

		break;
 8006b86:	f001 ba8a 	b.w	800809e <bldc_interface_process_packet+0x18ae>
 8006b8a:	bf00      	nop
 8006b8c:	20000628 	.word	0x20000628
 8006b90:	20007400 	.word	0x20007400
 8006b94:	20000918 	.word	0x20000918
 8006b98:	200085f0 	.word	0x200085f0

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 8006ba0:	f107 030c 	add.w	r3, r7, #12
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f001 fb53 	bl	8008252 <buffer_get_uint32>
 8006bac:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8006bb8:	f107 030c 	add.w	r3, r7, #12
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f001 fb75 	bl	80082b2 <buffer_get_float16>
 8006bc8:	eef0 7a40 	vmov.f32	s15, s0
 8006bcc:	4bc6      	ldr	r3, [pc, #792]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006bce:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00e      	beq.n	8006bfe <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8006be0:	f107 030c 	add.w	r3, r7, #12
 8006be4:	4619      	mov	r1, r3
 8006be6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fb61 	bl	80082b2 <buffer_get_float16>
 8006bf0:	eef0 7a40 	vmov.f32	s15, s0
 8006bf4:	4bbc      	ldr	r3, [pc, #752]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006bf6:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8006c08:	f107 030c 	add.w	r3, r7, #12
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8006eec <bldc_interface_process_packet+0x6fc>
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fb68 	bl	80082e8 <buffer_get_float32>
 8006c18:	eef0 7a40 	vmov.f32	s15, s0
 8006c1c:	4bb2      	ldr	r3, [pc, #712]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006c1e:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 8006c22:	2302      	movs	r3, #2
 8006c24:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 8006c30:	f107 030c 	add.w	r3, r7, #12
 8006c34:	4619      	mov	r1, r3
 8006c36:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8006eec <bldc_interface_process_packet+0x6fc>
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f001 fb54 	bl	80082e8 <buffer_get_float32>
 8006c40:	eef0 7a40 	vmov.f32	s15, s0
 8006c44:	4ba8      	ldr	r3, [pc, #672]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006c46:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00e      	beq.n	8006c76 <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 8006c58:	f107 030c 	add.w	r3, r7, #12
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8006eec <bldc_interface_process_packet+0x6fc>
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fb40 	bl	80082e8 <buffer_get_float32>
 8006c68:	eef0 7a40 	vmov.f32	s15, s0
 8006c6c:	4b9e      	ldr	r3, [pc, #632]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006c6e:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 8006c72:	2304      	movs	r3, #4
 8006c74:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 8006c80:	f107 030c 	add.w	r3, r7, #12
 8006c84:	4619      	mov	r1, r3
 8006c86:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006eec <bldc_interface_process_packet+0x6fc>
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fb2c 	bl	80082e8 <buffer_get_float32>
 8006c90:	eef0 7a40 	vmov.f32	s15, s0
 8006c94:	4b94      	ldr	r3, [pc, #592]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006c96:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 8006c9a:	2305      	movs	r3, #5
 8006c9c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00e      	beq.n	8006cc6 <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8006ca8:	f107 030c 	add.w	r3, r7, #12
 8006cac:	4619      	mov	r1, r3
 8006cae:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8006ef8 <bldc_interface_process_packet+0x708>
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fafd 	bl	80082b2 <buffer_get_float16>
 8006cb8:	eef0 7a40 	vmov.f32	s15, s0
 8006cbc:	4b8a      	ldr	r3, [pc, #552]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006cbe:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 8006cc2:	2306      	movs	r3, #6
 8006cc4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00e      	beq.n	8006cee <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 8006cd0:	f107 030c 	add.w	r3, r7, #12
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 fb04 	bl	80082e8 <buffer_get_float32>
 8006ce0:	eef0 7a40 	vmov.f32	s15, s0
 8006ce4:	4b80      	ldr	r3, [pc, #512]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006ce6:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 8006cea:	2307      	movs	r3, #7
 8006cec:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00e      	beq.n	8006d16 <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fad5 	bl	80082b2 <buffer_get_float16>
 8006d08:	eef0 7a40 	vmov.f32	s15, s0
 8006d0c:	4b76      	ldr	r3, [pc, #472]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006d0e:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 8006d12:	2308      	movs	r3, #8
 8006d14:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00e      	beq.n	8006d3e <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8006d20:	f107 030c 	add.w	r3, r7, #12
 8006d24:	4619      	mov	r1, r3
 8006d26:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8006ef0 <bldc_interface_process_packet+0x700>
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fadc 	bl	80082e8 <buffer_get_float32>
 8006d30:	eef0 7a40 	vmov.f32	s15, s0
 8006d34:	4b6c      	ldr	r3, [pc, #432]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006d36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 8006d3a:	2309      	movs	r3, #9
 8006d3c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006d48:	f107 030c 	add.w	r3, r7, #12
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8006ef0 <bldc_interface_process_packet+0x700>
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fac8 	bl	80082e8 <buffer_get_float32>
 8006d58:	eef0 7a40 	vmov.f32	s15, s0
 8006d5c:	4b62      	ldr	r3, [pc, #392]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006d5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 8006d62:	230a      	movs	r3, #10
 8006d64:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00e      	beq.n	8006d8e <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	4619      	mov	r1, r3
 8006d76:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8006ef0 <bldc_interface_process_packet+0x700>
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fab4 	bl	80082e8 <buffer_get_float32>
 8006d80:	eef0 7a40 	vmov.f32	s15, s0
 8006d84:	4b58      	ldr	r3, [pc, #352]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006d86:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 8006d8a:	230b      	movs	r3, #11
 8006d8c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00e      	beq.n	8006db6 <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8006ef0 <bldc_interface_process_packet+0x700>
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 faa0 	bl	80082e8 <buffer_get_float32>
 8006da8:	eef0 7a40 	vmov.f32	s15, s0
 8006dac:	4b4e      	ldr	r3, [pc, #312]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006dae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 8006db2:	230c      	movs	r3, #12
 8006db4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 8006dc0:	f107 030c 	add.w	r3, r7, #12
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fa13 	bl	80081f2 <buffer_get_int32>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	4a46      	ldr	r2, [pc, #280]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006dd0:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 8006dd2:	230d      	movs	r3, #13
 8006dd4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 8006de0:	f107 030c 	add.w	r3, r7, #12
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fa03 	bl	80081f2 <buffer_get_int32>
 8006dec:	4603      	mov	r3, r0
 8006dee:	4a3e      	ldr	r2, [pc, #248]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006df0:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 8006df2:	230e      	movs	r3, #14
 8006df4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00b      	beq.n	8006e18 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	60fa      	str	r2, [r7, #12]
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 8006e14:	230f      	movs	r3, #15
 8006e16:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00e      	beq.n	8006e40 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4619      	mov	r1, r3
 8006e28:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8006ef4 <bldc_interface_process_packet+0x704>
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 fa5b 	bl	80082e8 <buffer_get_float32>
 8006e32:	eef0 7a40 	vmov.f32	s15, s0
 8006e36:	4b2c      	ldr	r3, [pc, #176]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006e38:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	60fa      	str	r2, [r7, #12]
 8006e50:	461a      	mov	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 8006e5e:	2311      	movs	r3, #17
 8006e60:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d028      	beq.n	8006ebe <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	4619      	mov	r1, r3
 8006e72:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fa1b 	bl	80082b2 <buffer_get_float16>
 8006e7c:	eef0 7a40 	vmov.f32	s15, s0
 8006e80:	4b19      	ldr	r3, [pc, #100]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006e82:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 8006e86:	f107 030c 	add.w	r3, r7, #12
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fa0e 	bl	80082b2 <buffer_get_float16>
 8006e96:	eef0 7a40 	vmov.f32	s15, s0
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006e9c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 8006ea0:	f107 030c 	add.w	r3, r7, #12
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 fa01 	bl	80082b2 <buffer_get_float16>
 8006eb0:	eef0 7a40 	vmov.f32	s15, s0
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006eb6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 8006eba:	2312      	movs	r3, #18
 8006ebc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d019      	beq.n	8006efc <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8006ec8:	f107 030c 	add.w	r3, r7, #12
 8006ecc:	4619      	mov	r1, r3
 8006ece:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8006ef8 <bldc_interface_process_packet+0x708>
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fa08 	bl	80082e8 <buffer_get_float32>
 8006ed8:	eef0 7a40 	vmov.f32	s15, s0
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <bldc_interface_process_packet+0x6f8>)
 8006ede:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 8006ee2:	2313      	movs	r3, #19
 8006ee4:	61fb      	str	r3, [r7, #28]
 8006ee6:	e009      	b.n	8006efc <bldc_interface_process_packet+0x70c>
 8006ee8:	20000628 	.word	0x20000628
 8006eec:	42c80000 	.word	0x42c80000
 8006ef0:	461c4000 	.word	0x461c4000
 8006ef4:	49742400 	.word	0x49742400
 8006ef8:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 8006f06:	f107 030c 	add.w	r3, r7, #12
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8006ef8 <bldc_interface_process_packet+0x708>
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 f9e9 	bl	80082e8 <buffer_get_float32>
 8006f16:	eef0 7a40 	vmov.f32	s15, s0
 8006f1a:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <bldc_interface_process_packet+0x7c4>)
 8006f1c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 8006f20:	2314      	movs	r3, #20
 8006f22:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <bldc_interface_process_packet+0x7c8>)
 8006f26:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <bldc_interface_process_packet+0x7c4>)
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	2360      	movs	r3, #96	; 0x60
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f00e f976 	bl	8015220 <memcpy>

		if(rx_value_selective_print){
 8006f34:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <bldc_interface_process_packet+0x7cc>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 8006f3c:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <bldc_interface_process_packet+0x7d0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d004      	beq.n	8006f4e <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 8006f44:	4b1e      	ldr	r3, [pc, #120]	; (8006fc0 <bldc_interface_process_packet+0x7d0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	491a      	ldr	r1, [pc, #104]	; (8006fb4 <bldc_interface_process_packet+0x7c4>)
 8006f4a:	69f8      	ldr	r0, [r7, #28]
 8006f4c:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 8006f4e:	4b1d      	ldr	r3, [pc, #116]	; (8006fc4 <bldc_interface_process_packet+0x7d4>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]
		break;
 8006f54:	f001 b8a3 	b.w	800809e <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 8006f58:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <bldc_interface_process_packet+0x7d8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f001 808b 	beq.w	8008078 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4413      	add	r3, r2
 8006f68:	2200      	movs	r2, #0
 8006f6a:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8006f6c:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <bldc_interface_process_packet+0x7d8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	4798      	blx	r3
		}
		break;
 8006f74:	f001 b880 	b.w	8008078 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8006f7c:	f107 030c 	add.w	r3, r7, #12
 8006f80:	4619      	mov	r1, r3
 8006f82:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8006fcc <bldc_interface_process_packet+0x7dc>
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 f9ae 	bl	80082e8 <buffer_get_float32>
 8006f8c:	eef0 7a40 	vmov.f32	s15, s0
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <bldc_interface_process_packet+0x7e0>)
 8006f92:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8006f96:	4b0f      	ldr	r3, [pc, #60]	; (8006fd4 <bldc_interface_process_packet+0x7e4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f001 806e 	beq.w	800807c <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 8006fa0:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <bldc_interface_process_packet+0x7e4>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <bldc_interface_process_packet+0x7e0>)
 8006fa6:	edd2 7a00 	vldr	s15, [r2]
 8006faa:	eeb0 0a67 	vmov.f32	s0, s15
 8006fae:	4798      	blx	r3
		}
		break;
 8006fb0:	f001 b864 	b.w	800807c <bldc_interface_process_packet+0x188c>
 8006fb4:	20000628 	.word	0x20000628
 8006fb8:	20007400 	.word	0x20007400
 8006fbc:	20008820 	.word	0x20008820
 8006fc0:	2000091c 	.word	0x2000091c
 8006fc4:	200085f0 	.word	0x200085f0
 8006fc8:	20000920 	.word	0x20000920
 8006fcc:	47c35000 	.word	0x47c35000
 8006fd0:	20000690 	.word	0x20000690
 8006fd4:	20000924 	.word	0x20000924
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f935 	bl	8008252 <buffer_get_uint32>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	4ac5      	ldr	r2, [pc, #788]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8006fec:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	60fa      	str	r2, [r7, #12]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	4bc0      	ldr	r3, [pc, #768]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8006ffe:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	60fa      	str	r2, [r7, #12]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	781a      	ldrb	r2, [r3, #0]
 800700e:	4bbc      	ldr	r3, [pc, #752]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007010:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	60fa      	str	r2, [r7, #12]
 8007018:	461a      	mov	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	4bb7      	ldr	r3, [pc, #732]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007022:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	60fa      	str	r2, [r7, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	4bb3      	ldr	r3, [pc, #716]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007034:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4619      	mov	r1, r3
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f96d 	bl	800831c <buffer_get_float32_auto>
 8007042:	eef0 7a40 	vmov.f32	s15, s0
 8007046:	4bae      	ldr	r3, [pc, #696]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007048:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 800704c:	f107 030c 	add.w	r3, r7, #12
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f962 	bl	800831c <buffer_get_float32_auto>
 8007058:	eef0 7a40 	vmov.f32	s15, s0
 800705c:	4ba8      	ldr	r3, [pc, #672]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800705e:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8007062:	f107 030c 	add.w	r3, r7, #12
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f957 	bl	800831c <buffer_get_float32_auto>
 800706e:	eef0 7a40 	vmov.f32	s15, s0
 8007072:	4ba3      	ldr	r3, [pc, #652]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007074:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f001 f94c 	bl	800831c <buffer_get_float32_auto>
 8007084:	eef0 7a40 	vmov.f32	s15, s0
 8007088:	4b9d      	ldr	r3, [pc, #628]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800708a:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 800708e:	f107 030c 	add.w	r3, r7, #12
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f941 	bl	800831c <buffer_get_float32_auto>
 800709a:	eef0 7a40 	vmov.f32	s15, s0
 800709e:	4b98      	ldr	r3, [pc, #608]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80070a0:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 80070a4:	f107 030c 	add.w	r3, r7, #12
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f936 	bl	800831c <buffer_get_float32_auto>
 80070b0:	eef0 7a40 	vmov.f32	s15, s0
 80070b4:	4b92      	ldr	r3, [pc, #584]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80070b6:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 80070ba:	f107 030c 	add.w	r3, r7, #12
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f92b 	bl	800831c <buffer_get_float32_auto>
 80070c6:	eef0 7a40 	vmov.f32	s15, s0
 80070ca:	4b8d      	ldr	r3, [pc, #564]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80070cc:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 80070d0:	f107 030c 	add.w	r3, r7, #12
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f920 	bl	800831c <buffer_get_float32_auto>
 80070dc:	eef0 7a40 	vmov.f32	s15, s0
 80070e0:	4b87      	ldr	r3, [pc, #540]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80070e2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 80070e6:	f107 030c 	add.w	r3, r7, #12
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f915 	bl	800831c <buffer_get_float32_auto>
 80070f2:	eef0 7a40 	vmov.f32	s15, s0
 80070f6:	4b82      	ldr	r3, [pc, #520]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80070f8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 80070fc:	f107 030c 	add.w	r3, r7, #12
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f90a 	bl	800831c <buffer_get_float32_auto>
 8007108:	eef0 7a40 	vmov.f32	s15, s0
 800710c:	4b7c      	ldr	r3, [pc, #496]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800710e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8007112:	f107 030c 	add.w	r3, r7, #12
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f8ff 	bl	800831c <buffer_get_float32_auto>
 800711e:	eef0 7a40 	vmov.f32	s15, s0
 8007122:	4b77      	ldr	r3, [pc, #476]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007124:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f8f4 	bl	800831c <buffer_get_float32_auto>
 8007134:	eef0 7a40 	vmov.f32	s15, s0
 8007138:	4b71      	ldr	r3, [pc, #452]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800713a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 800713e:	f107 030c 	add.w	r3, r7, #12
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 f8e9 	bl	800831c <buffer_get_float32_auto>
 800714a:	eef0 7a40 	vmov.f32	s15, s0
 800714e:	4b6c      	ldr	r3, [pc, #432]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007150:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8007154:	f107 030c 	add.w	r3, r7, #12
 8007158:	4619      	mov	r1, r3
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 f8de 	bl	800831c <buffer_get_float32_auto>
 8007160:	eef0 7a40 	vmov.f32	s15, s0
 8007164:	4b66      	ldr	r3, [pc, #408]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007166:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	60fa      	str	r2, [r7, #12]
 8007170:	461a      	mov	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4413      	add	r3, r2
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf14      	ite	ne
 800717c:	2301      	movne	r3, #1
 800717e:	2300      	moveq	r3, #0
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4b5f      	ldr	r3, [pc, #380]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 f8c4 	bl	800831c <buffer_get_float32_auto>
 8007194:	eef0 7a40 	vmov.f32	s15, s0
 8007198:	4b59      	ldr	r3, [pc, #356]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800719a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f8b9 	bl	800831c <buffer_get_float32_auto>
 80071aa:	eef0 7a40 	vmov.f32	s15, s0
 80071ae:	4b54      	ldr	r3, [pc, #336]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80071b0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f8ae 	bl	800831c <buffer_get_float32_auto>
 80071c0:	eef0 7a40 	vmov.f32	s15, s0
 80071c4:	4b4e      	ldr	r3, [pc, #312]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80071c6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 80071ca:	f107 030c 	add.w	r3, r7, #12
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 f8a3 	bl	800831c <buffer_get_float32_auto>
 80071d6:	eef0 7a40 	vmov.f32	s15, s0
 80071da:	4b49      	ldr	r3, [pc, #292]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80071dc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 80071e0:	f107 030c 	add.w	r3, r7, #12
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f898 	bl	800831c <buffer_get_float32_auto>
 80071ec:	eef0 7a40 	vmov.f32	s15, s0
 80071f0:	4b43      	ldr	r3, [pc, #268]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80071f2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 f88d 	bl	800831c <buffer_get_float32_auto>
 8007202:	eef0 7a40 	vmov.f32	s15, s0
 8007206:	4b3e      	ldr	r3, [pc, #248]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007208:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 f882 	bl	800831c <buffer_get_float32_auto>
 8007218:	eef0 7a40 	vmov.f32	s15, s0
 800721c:	4b38      	ldr	r3, [pc, #224]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800721e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8007222:	f107 030c 	add.w	r3, r7, #12
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f877 	bl	800831c <buffer_get_float32_auto>
 800722e:	eef0 7a40 	vmov.f32	s15, s0
 8007232:	4b33      	ldr	r3, [pc, #204]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007234:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8007238:	f107 030c 	add.w	r3, r7, #12
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f86c 	bl	800831c <buffer_get_float32_auto>
 8007244:	eef0 7a40 	vmov.f32	s15, s0
 8007248:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800724a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 800724e:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	4a2b      	ldr	r2, [pc, #172]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007254:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 8007256:	4b2a      	ldr	r3, [pc, #168]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4a29      	ldr	r2, [pc, #164]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800725c:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 800725e:	4b28      	ldr	r3, [pc, #160]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	4a27      	ldr	r2, [pc, #156]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007264:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8007266:	4b26      	ldr	r3, [pc, #152]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4a25      	ldr	r2, [pc, #148]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800726c:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	4a23      	ldr	r2, [pc, #140]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007274:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8007276:	4b22      	ldr	r3, [pc, #136]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	4a21      	ldr	r2, [pc, #132]	; (8007300 <bldc_interface_process_packet+0xb10>)
 800727c:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 f849 	bl	800831c <buffer_get_float32_auto>
 800728a:	eef0 7a40 	vmov.f32	s15, s0
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <bldc_interface_process_packet+0xb10>)
 8007290:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 f83e 	bl	800831c <buffer_get_float32_auto>
 80072a0:	eef0 7a40 	vmov.f32	s15, s0
 80072a4:	4b16      	ldr	r3, [pc, #88]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80072a6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f833 	bl	800831c <buffer_get_float32_auto>
 80072b6:	eef0 7a40 	vmov.f32	s15, s0
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80072bc:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 80072c0:	f107 030c 	add.w	r3, r7, #12
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f828 	bl	800831c <buffer_get_float32_auto>
 80072cc:	eef0 7a40 	vmov.f32	s15, s0
 80072d0:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80072d2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 80072d6:	f107 030c 	add.w	r3, r7, #12
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f81d 	bl	800831c <buffer_get_float32_auto>
 80072e2:	eef0 7a40 	vmov.f32	s15, s0
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <bldc_interface_process_packet+0xb10>)
 80072e8:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f812 	bl	800831c <buffer_get_float32_auto>
 80072f8:	eef0 7a40 	vmov.f32	s15, s0
 80072fc:	e002      	b.n	8007304 <bldc_interface_process_packet+0xb14>
 80072fe:	bf00      	nop
 8007300:	20000694 	.word	0x20000694
 8007304:	4bc7      	ldr	r3, [pc, #796]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007306:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 800730a:	f107 030c 	add.w	r3, r7, #12
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 f803 	bl	800831c <buffer_get_float32_auto>
 8007316:	eef0 7a40 	vmov.f32	s15, s0
 800731a:	4bc2      	ldr	r3, [pc, #776]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800731c:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	441a      	add	r2, r3
 8007328:	4bbe      	ldr	r3, [pc, #760]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800732a:	339c      	adds	r3, #156	; 0x9c
 800732c:	6810      	ldr	r0, [r2, #0]
 800732e:	6851      	ldr	r1, [r2, #4]
 8007330:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3308      	adds	r3, #8
 8007336:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 ffec 	bl	800831c <buffer_get_float32_auto>
 8007344:	eef0 7a40 	vmov.f32	s15, s0
 8007348:	4bb6      	ldr	r3, [pc, #728]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800734a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 800734e:	f107 030c 	add.w	r3, r7, #12
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 ffe1 	bl	800831c <buffer_get_float32_auto>
 800735a:	eef0 7a40 	vmov.f32	s15, s0
 800735e:	4bb1      	ldr	r3, [pc, #708]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007360:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 ffd6 	bl	800831c <buffer_get_float32_auto>
 8007370:	eef0 7a40 	vmov.f32	s15, s0
 8007374:	4bab      	ldr	r3, [pc, #684]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007376:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800737a:	f107 030c 	add.w	r3, r7, #12
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 ffcb 	bl	800831c <buffer_get_float32_auto>
 8007386:	eef0 7a40 	vmov.f32	s15, s0
 800738a:	4ba6      	ldr	r3, [pc, #664]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800738c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 ffc0 	bl	800831c <buffer_get_float32_auto>
 800739c:	eef0 7a40 	vmov.f32	s15, s0
 80073a0:	4ba0      	ldr	r3, [pc, #640]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80073a2:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	60fa      	str	r2, [r7, #12]
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	bf14      	ite	ne
 80073b8:	2301      	movne	r3, #1
 80073ba:	2300      	moveq	r3, #0
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	4b99      	ldr	r3, [pc, #612]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80073c0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 80073c4:	f107 030c 	add.w	r3, r7, #12
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 ffa6 	bl	800831c <buffer_get_float32_auto>
 80073d0:	eef0 7a40 	vmov.f32	s15, s0
 80073d4:	4b93      	ldr	r3, [pc, #588]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80073d6:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 80073da:	f107 030c 	add.w	r3, r7, #12
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 ff9b 	bl	800831c <buffer_get_float32_auto>
 80073e6:	eef0 7a40 	vmov.f32	s15, s0
 80073ea:	4b8e      	ldr	r3, [pc, #568]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80073ec:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	60fa      	str	r2, [r7, #12]
 80073f6:	461a      	mov	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	4b89      	ldr	r3, [pc, #548]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007400:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 8007404:	f107 030c 	add.w	r3, r7, #12
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 ff86 	bl	800831c <buffer_get_float32_auto>
 8007410:	eef0 7a40 	vmov.f32	s15, s0
 8007414:	4b83      	ldr	r3, [pc, #524]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007416:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 800741a:	f107 030c 	add.w	r3, r7, #12
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 ff7b 	bl	800831c <buffer_get_float32_auto>
 8007426:	eef0 7a40 	vmov.f32	s15, s0
 800742a:	4b7e      	ldr	r3, [pc, #504]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800742c:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 8007430:	f107 030c 	add.w	r3, r7, #12
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 ff70 	bl	800831c <buffer_get_float32_auto>
 800743c:	eef0 7a40 	vmov.f32	s15, s0
 8007440:	4b78      	ldr	r3, [pc, #480]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007442:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 8007446:	f107 030c 	add.w	r3, r7, #12
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 ff65 	bl	800831c <buffer_get_float32_auto>
 8007452:	eef0 7a40 	vmov.f32	s15, s0
 8007456:	4b73      	ldr	r3, [pc, #460]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007458:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 ff5a 	bl	800831c <buffer_get_float32_auto>
 8007468:	eef0 7a40 	vmov.f32	s15, s0
 800746c:	4b6d      	ldr	r3, [pc, #436]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800746e:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	4619      	mov	r1, r3
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 ff4f 	bl	800831c <buffer_get_float32_auto>
 800747e:	eef0 7a40 	vmov.f32	s15, s0
 8007482:	4b68      	ldr	r3, [pc, #416]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007484:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 ff44 	bl	800831c <buffer_get_float32_auto>
 8007494:	eef0 7a40 	vmov.f32	s15, s0
 8007498:	4b62      	ldr	r3, [pc, #392]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800749a:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 ff39 	bl	800831c <buffer_get_float32_auto>
 80074aa:	eef0 7a40 	vmov.f32	s15, s0
 80074ae:	4b5d      	ldr	r3, [pc, #372]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80074b0:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 80074b4:	f107 030c 	add.w	r3, r7, #12
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 ff2e 	bl	800831c <buffer_get_float32_auto>
 80074c0:	eef0 7a40 	vmov.f32	s15, s0
 80074c4:	4b57      	ldr	r3, [pc, #348]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80074c6:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 ff23 	bl	800831c <buffer_get_float32_auto>
 80074d6:	eef0 7a40 	vmov.f32	s15, s0
 80074da:	4b52      	ldr	r3, [pc, #328]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80074dc:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 ff18 	bl	800831c <buffer_get_float32_auto>
 80074ec:	eef0 7a40 	vmov.f32	s15, s0
 80074f0:	4b4c      	ldr	r3, [pc, #304]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80074f2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 80074f6:	f107 030c 	add.w	r3, r7, #12
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 ff0d 	bl	800831c <buffer_get_float32_auto>
 8007502:	eef0 7a40 	vmov.f32	s15, s0
 8007506:	4b47      	ldr	r3, [pc, #284]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007508:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 800750c:	f107 030c 	add.w	r3, r7, #12
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 ff02 	bl	800831c <buffer_get_float32_auto>
 8007518:	eef0 7a40 	vmov.f32	s15, s0
 800751c:	4b41      	ldr	r3, [pc, #260]	; (8007624 <bldc_interface_process_packet+0xe34>)
 800751e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 8007522:	f107 030c 	add.w	r3, r7, #12
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fef7 	bl	800831c <buffer_get_float32_auto>
 800752e:	eef0 7a40 	vmov.f32	s15, s0
 8007532:	4b3c      	ldr	r3, [pc, #240]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007534:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	441a      	add	r2, r3
 8007540:	4b38      	ldr	r3, [pc, #224]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007542:	33fd      	adds	r3, #253	; 0xfd
 8007544:	6811      	ldr	r1, [r2, #0]
 8007546:	6852      	ldr	r2, [r2, #4]
 8007548:	6019      	str	r1, [r3, #0]
 800754a:	605a      	str	r2, [r3, #4]
		ind += 8;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3308      	adds	r3, #8
 8007550:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 8007552:	f107 030c 	add.w	r3, r7, #12
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fedf 	bl	800831c <buffer_get_float32_auto>
 800755e:	eef0 7a40 	vmov.f32	s15, s0
 8007562:	4b30      	ldr	r3, [pc, #192]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007564:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	60fa      	str	r2, [r7, #12]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2da      	uxtb	r2, r3
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007582:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	60fa      	str	r2, [r7, #12]
 800758c:	461a      	mov	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2da      	uxtb	r2, r3
 800759e:	4b21      	ldr	r3, [pc, #132]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80075a0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 80075a4:	f107 030c 	add.w	r3, r7, #12
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 feb6 	bl	800831c <buffer_get_float32_auto>
 80075b0:	eef0 7a40 	vmov.f32	s15, s0
 80075b4:	4b1b      	ldr	r3, [pc, #108]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80075b6:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	60fa      	str	r2, [r7, #12]
 80075c0:	461a      	mov	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80075d4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fe9c 	bl	800831c <buffer_get_float32_auto>
 80075e4:	eef0 7a40 	vmov.f32	s15, s0
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <bldc_interface_process_packet+0xe34>)
 80075ea:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 80075ee:	f107 030c 	add.w	r3, r7, #12
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fe91 	bl	800831c <buffer_get_float32_auto>
 80075fa:	eef0 7a40 	vmov.f32	s15, s0
 80075fe:	4b09      	ldr	r3, [pc, #36]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007600:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fe86 	bl	800831c <buffer_get_float32_auto>
 8007610:	eef0 7a40 	vmov.f32	s15, s0
 8007614:	4b03      	ldr	r3, [pc, #12]	; (8007624 <bldc_interface_process_packet+0xe34>)
 8007616:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 800761a:	f107 030c 	add.w	r3, r7, #12
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	e001      	b.n	8007628 <bldc_interface_process_packet+0xe38>
 8007624:	20000694 	.word	0x20000694
 8007628:	f000 fe78 	bl	800831c <buffer_get_float32_auto>
 800762c:	eef0 7a40 	vmov.f32	s15, s0
 8007630:	4b96      	ldr	r3, [pc, #600]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007632:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fe6d 	bl	800831c <buffer_get_float32_auto>
 8007642:	eef0 7a40 	vmov.f32	s15, s0
 8007646:	4b91      	ldr	r3, [pc, #580]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007648:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800764c:	f107 030c 	add.w	r3, r7, #12
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fe62 	bl	800831c <buffer_get_float32_auto>
 8007658:	eef0 7a40 	vmov.f32	s15, s0
 800765c:	4b8b      	ldr	r3, [pc, #556]	; (800788c <bldc_interface_process_packet+0x109c>)
 800765e:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8007662:	f107 030c 	add.w	r3, r7, #12
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fe57 	bl	800831c <buffer_get_float32_auto>
 800766e:	eef0 7a40 	vmov.f32	s15, s0
 8007672:	4b86      	ldr	r3, [pc, #536]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007674:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	60fa      	str	r2, [r7, #12]
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b7e      	ldr	r3, [pc, #504]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007692:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fe3d 	bl	800831c <buffer_get_float32_auto>
 80076a2:	eef0 7a40 	vmov.f32	s15, s0
 80076a6:	4b79      	ldr	r3, [pc, #484]	; (800788c <bldc_interface_process_packet+0x109c>)
 80076a8:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fe32 	bl	800831c <buffer_get_float32_auto>
 80076b8:	eef0 7a40 	vmov.f32	s15, s0
 80076bc:	4b73      	ldr	r3, [pc, #460]	; (800788c <bldc_interface_process_packet+0x109c>)
 80076be:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fe27 	bl	800831c <buffer_get_float32_auto>
 80076ce:	eef0 7a40 	vmov.f32	s15, s0
 80076d2:	4b6e      	ldr	r3, [pc, #440]	; (800788c <bldc_interface_process_packet+0x109c>)
 80076d4:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80076d8:	f107 030c 	add.w	r3, r7, #12
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fe1c 	bl	800831c <buffer_get_float32_auto>
 80076e4:	eef0 7a40 	vmov.f32	s15, s0
 80076e8:	4b68      	ldr	r3, [pc, #416]	; (800788c <bldc_interface_process_packet+0x109c>)
 80076ea:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 80076ee:	f107 030c 	add.w	r3, r7, #12
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fe11 	bl	800831c <buffer_get_float32_auto>
 80076fa:	eef0 7a40 	vmov.f32	s15, s0
 80076fe:	4b63      	ldr	r3, [pc, #396]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007700:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 8007704:	f107 030c 	add.w	r3, r7, #12
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fe06 	bl	800831c <buffer_get_float32_auto>
 8007710:	eef0 7a40 	vmov.f32	s15, s0
 8007714:	4b5d      	ldr	r3, [pc, #372]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007716:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 800771a:	f107 030c 	add.w	r3, r7, #12
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fdfb 	bl	800831c <buffer_get_float32_auto>
 8007726:	eef0 7a40 	vmov.f32	s15, s0
 800772a:	4b58      	ldr	r3, [pc, #352]	; (800788c <bldc_interface_process_packet+0x109c>)
 800772c:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 8007730:	f107 030c 	add.w	r3, r7, #12
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fdf0 	bl	800831c <buffer_get_float32_auto>
 800773c:	eef0 7a40 	vmov.f32	s15, s0
 8007740:	4b52      	ldr	r3, [pc, #328]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007742:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fde5 	bl	800831c <buffer_get_float32_auto>
 8007752:	eef0 7a40 	vmov.f32	s15, s0
 8007756:	4b4d      	ldr	r3, [pc, #308]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007758:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 800775c:	f107 030c 	add.w	r3, r7, #12
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fd45 	bl	80081f2 <buffer_get_int32>
 8007768:	4603      	mov	r3, r0
 800776a:	4a48      	ldr	r2, [pc, #288]	; (800788c <bldc_interface_process_packet+0x109c>)
 800776c:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8007770:	f107 030c 	add.w	r3, r7, #12
 8007774:	4619      	mov	r1, r3
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fdd0 	bl	800831c <buffer_get_float32_auto>
 800777c:	eef0 7a40 	vmov.f32	s15, s0
 8007780:	4b42      	ldr	r3, [pc, #264]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007782:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 8007786:	f107 030c 	add.w	r3, r7, #12
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fdc5 	bl	800831c <buffer_get_float32_auto>
 8007792:	eef0 7a40 	vmov.f32	s15, s0
 8007796:	4b3d      	ldr	r3, [pc, #244]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007798:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 800779c:	f107 030c 	add.w	r3, r7, #12
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fd55 	bl	8008252 <buffer_get_uint32>
 80077a8:	4603      	mov	r3, r0
 80077aa:	4a38      	ldr	r2, [pc, #224]	; (800788c <bldc_interface_process_packet+0x109c>)
 80077ac:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1c5a      	adds	r2, r3, #1
 80077b4:	60fa      	str	r2, [r7, #12]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	781a      	ldrb	r2, [r3, #0]
 80077be:	4b33      	ldr	r3, [pc, #204]	; (800788c <bldc_interface_process_packet+0x109c>)
 80077c0:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	60fa      	str	r2, [r7, #12]
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	4b2b      	ldr	r3, [pc, #172]	; (800788c <bldc_interface_process_packet+0x109c>)
 80077de:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	60fa      	str	r2, [r7, #12]
 80077e8:	461a      	mov	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	781a      	ldrb	r2, [r3, #0]
 80077f0:	4b26      	ldr	r3, [pc, #152]	; (800788c <bldc_interface_process_packet+0x109c>)
 80077f2:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	60fa      	str	r2, [r7, #12]
 80077fc:	461a      	mov	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	4b21      	ldr	r3, [pc, #132]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007808:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 800780c:	f107 030c 	add.w	r3, r7, #12
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fd82 	bl	800831c <buffer_get_float32_auto>
 8007818:	eef0 7a40 	vmov.f32	s15, s0
 800781c:	4b1b      	ldr	r3, [pc, #108]	; (800788c <bldc_interface_process_packet+0x109c>)
 800781e:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fd77 	bl	800831c <buffer_get_float32_auto>
 800782e:	eef0 7a40 	vmov.f32	s15, s0
 8007832:	4b16      	ldr	r3, [pc, #88]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007834:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 8007838:	f107 030c 	add.w	r3, r7, #12
 800783c:	4619      	mov	r1, r3
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fd6c 	bl	800831c <buffer_get_float32_auto>
 8007844:	eef0 7a40 	vmov.f32	s15, s0
 8007848:	4b10      	ldr	r3, [pc, #64]	; (800788c <bldc_interface_process_packet+0x109c>)
 800784a:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fd61 	bl	800831c <buffer_get_float32_auto>
 800785a:	eef0 7a40 	vmov.f32	s15, s0
 800785e:	4b0b      	ldr	r3, [pc, #44]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007860:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	60fa      	str	r2, [r7, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	4b06      	ldr	r3, [pc, #24]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007874:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <bldc_interface_process_packet+0x10a0>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 83ff 	beq.w	8008080 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 8007882:	4b03      	ldr	r3, [pc, #12]	; (8007890 <bldc_interface_process_packet+0x10a0>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4801      	ldr	r0, [pc, #4]	; (800788c <bldc_interface_process_packet+0x109c>)
 8007888:	4798      	blx	r3
		}
		break;
 800788a:	e3f9      	b.n	8008080 <bldc_interface_process_packet+0x1890>
 800788c:	20000694 	.word	0x20000694
 8007890:	20000928 	.word	0x20000928

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 8007898:	f107 030c 	add.w	r3, r7, #12
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fcd7 	bl	8008252 <buffer_get_uint32>
 80078a4:	4603      	mov	r3, r0
 80078a6:	4aba      	ldr	r2, [pc, #744]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80078a8:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	60fa      	str	r2, [r7, #12]
 80078b0:	461a      	mov	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	781a      	ldrb	r2, [r3, #0]
 80078b8:	4bb5      	ldr	r3, [pc, #724]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80078ba:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fcc5 	bl	8008252 <buffer_get_uint32>
 80078c8:	4603      	mov	r3, r0
 80078ca:	4ab1      	ldr	r2, [pc, #708]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80078cc:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 80078ce:	f107 030c 	add.w	r3, r7, #12
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd21 	bl	800831c <buffer_get_float32_auto>
 80078da:	eef0 7a40 	vmov.f32	s15, s0
 80078de:	4bac      	ldr	r3, [pc, #688]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80078e0:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	60fa      	str	r2, [r7, #12]
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4413      	add	r3, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf14      	ite	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2300      	moveq	r3, #0
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4ba4      	ldr	r3, [pc, #656]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80078fe:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8007900:	f107 030c 	add.w	r3, r7, #12
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc50 	bl	80081ac <buffer_get_uint16>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	4b9f      	ldr	r3, [pc, #636]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007912:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	60fa      	str	r2, [r7, #12]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4413      	add	r3, r2
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	4b9b      	ldr	r3, [pc, #620]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007924:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1c5a      	adds	r2, r3, #1
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	781a      	ldrb	r2, [r3, #0]
 8007934:	4b96      	ldr	r3, [pc, #600]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007936:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	60fa      	str	r2, [r7, #12]
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	4b92      	ldr	r3, [pc, #584]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007948:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fce3 	bl	800831c <buffer_get_float32_auto>
 8007956:	eef0 7a40 	vmov.f32	s15, s0
 800795a:	4b8d      	ldr	r3, [pc, #564]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 800795c:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007960:	f107 030c 	add.w	r3, r7, #12
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fcd8 	bl	800831c <buffer_get_float32_auto>
 800796c:	eef0 7a40 	vmov.f32	s15, s0
 8007970:	4b87      	ldr	r3, [pc, #540]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007972:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8007976:	f107 030c 	add.w	r3, r7, #12
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fccd 	bl	800831c <buffer_get_float32_auto>
 8007982:	eef0 7a40 	vmov.f32	s15, s0
 8007986:	4b82      	ldr	r3, [pc, #520]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007988:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 800798c:	f107 030c 	add.w	r3, r7, #12
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fcc2 	bl	800831c <buffer_get_float32_auto>
 8007998:	eef0 7a40 	vmov.f32	s15, s0
 800799c:	4b7c      	ldr	r3, [pc, #496]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 800799e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fcb7 	bl	800831c <buffer_get_float32_auto>
 80079ae:	eef0 7a40 	vmov.f32	s15, s0
 80079b2:	4b77      	ldr	r3, [pc, #476]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80079b4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	60fa      	str	r2, [r7, #12]
 80079be:	461a      	mov	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bf14      	ite	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	2300      	moveq	r3, #0
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	4b6f      	ldr	r3, [pc, #444]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80079d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	60fa      	str	r2, [r7, #12]
 80079dc:	461a      	mov	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bf14      	ite	ne
 80079e8:	2301      	movne	r3, #1
 80079ea:	2300      	moveq	r3, #0
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	4b68      	ldr	r3, [pc, #416]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 80079f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80079f4:	f107 030c 	add.w	r3, r7, #12
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc8e 	bl	800831c <buffer_get_float32_auto>
 8007a00:	eef0 7a40 	vmov.f32	s15, s0
 8007a04:	4b62      	ldr	r3, [pc, #392]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a06:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fc83 	bl	800831c <buffer_get_float32_auto>
 8007a16:	eef0 7a40 	vmov.f32	s15, s0
 8007a1a:	4b5d      	ldr	r3, [pc, #372]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a1c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	60fa      	str	r2, [r7, #12]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	781a      	ldrb	r2, [r3, #0]
 8007a2e:	4b58      	ldr	r3, [pc, #352]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc6e 	bl	800831c <buffer_get_float32_auto>
 8007a40:	eef0 7a40 	vmov.f32	s15, s0
 8007a44:	4b52      	ldr	r3, [pc, #328]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a46:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007a4a:	f107 030c 	add.w	r3, r7, #12
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fc63 	bl	800831c <buffer_get_float32_auto>
 8007a56:	eef0 7a40 	vmov.f32	s15, s0
 8007a5a:	4b4d      	ldr	r3, [pc, #308]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a5c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	60fa      	str	r2, [r7, #12]
 8007a66:	461a      	mov	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bf14      	ite	ne
 8007a72:	2301      	movne	r3, #1
 8007a74:	2300      	moveq	r3, #0
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	4b45      	ldr	r3, [pc, #276]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	60fa      	str	r2, [r7, #12]
 8007a84:	461a      	mov	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007a98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc3a 	bl	800831c <buffer_get_float32_auto>
 8007aa8:	eef0 7a40 	vmov.f32	s15, s0
 8007aac:	4b38      	ldr	r3, [pc, #224]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007aae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	60fa      	str	r2, [r7, #12]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	4b33      	ldr	r3, [pc, #204]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007ac2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fc25 	bl	800831c <buffer_get_float32_auto>
 8007ad2:	eef0 7a40 	vmov.f32	s15, s0
 8007ad6:	4b2e      	ldr	r3, [pc, #184]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007ad8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fc1a 	bl	800831c <buffer_get_float32_auto>
 8007ae8:	eef0 7a40 	vmov.f32	s15, s0
 8007aec:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007aee:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8007af2:	f107 030c 	add.w	r3, r7, #12
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc0f 	bl	800831c <buffer_get_float32_auto>
 8007afe:	eef0 7a40 	vmov.f32	s15, s0
 8007b02:	4b23      	ldr	r3, [pc, #140]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b04:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8007b08:	f107 030c 	add.w	r3, r7, #12
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fc04 	bl	800831c <buffer_get_float32_auto>
 8007b14:	eef0 7a40 	vmov.f32	s15, s0
 8007b18:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b1a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8007b1e:	f107 030c 	add.w	r3, r7, #12
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fbf9 	bl	800831c <buffer_get_float32_auto>
 8007b2a:	eef0 7a40 	vmov.f32	s15, s0
 8007b2e:	4b18      	ldr	r3, [pc, #96]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b30:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8007b34:	f107 030c 	add.w	r3, r7, #12
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fbee 	bl	800831c <buffer_get_float32_auto>
 8007b40:	eef0 7a40 	vmov.f32	s15, s0
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b46:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1c5a      	adds	r2, r3, #1
 8007b4e:	60fa      	str	r2, [r7, #12]
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	bf14      	ite	ne
 8007b5c:	2301      	movne	r3, #1
 8007b5e:	2300      	moveq	r3, #0
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	60fa      	str	r2, [r7, #12]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <bldc_interface_process_packet+0x13a0>)
 8007b82:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	60fa      	str	r2, [r7, #12]
 8007b8c:	e002      	b.n	8007b94 <bldc_interface_process_packet+0x13a4>
 8007b8e:	bf00      	nop
 8007b90:	2000081c 	.word	0x2000081c
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bf14      	ite	ne
 8007ba0:	2301      	movne	r3, #1
 8007ba2:	2300      	moveq	r3, #0
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	4bb7      	ldr	r3, [pc, #732]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007ba8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	60fa      	str	r2, [r7, #12]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	4baf      	ldr	r3, [pc, #700]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007bc6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	60fa      	str	r2, [r7, #12]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf14      	ite	ne
 8007bdc:	2301      	movne	r3, #1
 8007bde:	2300      	moveq	r3, #0
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	4ba8      	ldr	r3, [pc, #672]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	60fa      	str	r2, [r7, #12]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	4ba0      	ldr	r3, [pc, #640]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c02:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8007c06:	f107 030c 	add.w	r3, r7, #12
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb85 	bl	800831c <buffer_get_float32_auto>
 8007c12:	eef0 7a40 	vmov.f32	s15, s0
 8007c16:	4b9b      	ldr	r3, [pc, #620]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c18:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007c1c:	f107 030c 	add.w	r3, r7, #12
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fb7a 	bl	800831c <buffer_get_float32_auto>
 8007c28:	eef0 7a40 	vmov.f32	s15, s0
 8007c2c:	4b95      	ldr	r3, [pc, #596]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c2e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	60fa      	str	r2, [r7, #12]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	4b90      	ldr	r3, [pc, #576]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007c46:	f107 030c 	add.w	r3, r7, #12
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fb65 	bl	800831c <buffer_get_float32_auto>
 8007c52:	eef0 7a40 	vmov.f32	s15, s0
 8007c56:	4b8b      	ldr	r3, [pc, #556]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c58:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007c5c:	f107 030c 	add.w	r3, r7, #12
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb5a 	bl	800831c <buffer_get_float32_auto>
 8007c68:	eef0 7a40 	vmov.f32	s15, s0
 8007c6c:	4b85      	ldr	r3, [pc, #532]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c6e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	60fa      	str	r2, [r7, #12]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	4b7e      	ldr	r3, [pc, #504]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007c8c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	60fa      	str	r2, [r7, #12]
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf14      	ite	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	4b76      	ldr	r3, [pc, #472]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007caa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fb31 	bl	800831c <buffer_get_float32_auto>
 8007cba:	eef0 7a40 	vmov.f32	s15, s0
 8007cbe:	4b71      	ldr	r3, [pc, #452]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007cc0:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 8007cc4:	f107 030c 	add.w	r3, r7, #12
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fa6e 	bl	80081ac <buffer_get_uint16>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b6b      	ldr	r3, [pc, #428]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007cd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8007cda:	f107 030c 	add.w	r3, r7, #12
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fab6 	bl	8008252 <buffer_get_uint32>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	4a66      	ldr	r2, [pc, #408]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	60fa      	str	r2, [r7, #12]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	4b61      	ldr	r3, [pc, #388]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007cfe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8007d02:	f107 030c 	add.w	r3, r7, #12
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fb07 	bl	800831c <buffer_get_float32_auto>
 8007d0e:	eef0 7a40 	vmov.f32	s15, s0
 8007d12:	4b5c      	ldr	r3, [pc, #368]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d14:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8007d18:	f107 030c 	add.w	r3, r7, #12
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fafc 	bl	800831c <buffer_get_float32_auto>
 8007d24:	eef0 7a40 	vmov.f32	s15, s0
 8007d28:	4b56      	ldr	r3, [pc, #344]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d2a:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8007d2e:	f107 030c 	add.w	r3, r7, #12
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 faf1 	bl	800831c <buffer_get_float32_auto>
 8007d3a:	eef0 7a40 	vmov.f32	s15, s0
 8007d3e:	4b51      	ldr	r3, [pc, #324]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d40:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fae6 	bl	800831c <buffer_get_float32_auto>
 8007d50:	eef0 7a40 	vmov.f32	s15, s0
 8007d54:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d56:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8007d5a:	f107 030c 	add.w	r3, r7, #12
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fadb 	bl	800831c <buffer_get_float32_auto>
 8007d66:	eef0 7a40 	vmov.f32	s15, s0
 8007d6a:	4b46      	ldr	r3, [pc, #280]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d6c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8007d70:	f107 030c 	add.w	r3, r7, #12
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fad0 	bl	800831c <buffer_get_float32_auto>
 8007d7c:	eef0 7a40 	vmov.f32	s15, s0
 8007d80:	4b40      	ldr	r3, [pc, #256]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d82:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007d96:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	1c5a      	adds	r2, r3, #1
 8007d9e:	60fa      	str	r2, [r7, #12]
 8007da0:	461a      	mov	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4413      	add	r3, r2
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bf14      	ite	ne
 8007dac:	2301      	movne	r3, #1
 8007dae:	2300      	moveq	r3, #0
 8007db0:	b2da      	uxtb	r2, r3
 8007db2:	4b34      	ldr	r3, [pc, #208]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007db4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	60fa      	str	r2, [r7, #12]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	bf14      	ite	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	2300      	moveq	r3, #0
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007dd2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8007dd6:	f107 030c 	add.w	r3, r7, #12
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 fa9d 	bl	800831c <buffer_get_float32_auto>
 8007de2:	eef0 7a40 	vmov.f32	s15, s0
 8007de6:	4b27      	ldr	r3, [pc, #156]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007de8:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	60fa      	str	r2, [r7, #12]
 8007df2:	461a      	mov	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4413      	add	r3, r2
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	4b22      	ldr	r3, [pc, #136]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007dfc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	60fa      	str	r2, [r7, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	781a      	ldrb	r2, [r3, #0]
 8007e0e:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e10:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	60fa      	str	r2, [r7, #12]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4413      	add	r3, r2
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e24:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	60fa      	str	r2, [r7, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e38:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	60fa      	str	r2, [r7, #12]
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4413      	add	r3, r2
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e4c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	60fa      	str	r2, [r7, #12]
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e60:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	461a      	mov	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	441a      	add	r2, r3
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <bldc_interface_process_packet+0x1694>)
 8007e6e:	33c6      	adds	r3, #198	; 0xc6
 8007e70:	8811      	ldrh	r1, [r2, #0]
 8007e72:	7892      	ldrb	r2, [r2, #2]
 8007e74:	8019      	strh	r1, [r3, #0]
 8007e76:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3303      	adds	r3, #3
 8007e7c:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	e002      	b.n	8007e88 <bldc_interface_process_packet+0x1698>
 8007e82:	bf00      	nop
 8007e84:	2000081c 	.word	0x2000081c
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	60fa      	str	r2, [r7, #12]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bf14      	ite	ne
 8007e98:	2301      	movne	r3, #1
 8007e9a:	2300      	moveq	r3, #0
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4b81      	ldr	r3, [pc, #516]	; (80080a4 <bldc_interface_process_packet+0x18b4>)
 8007ea0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 8007ea4:	4b80      	ldr	r3, [pc, #512]	; (80080a8 <bldc_interface_process_packet+0x18b8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80eb 	beq.w	8008084 <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 8007eae:	4b7e      	ldr	r3, [pc, #504]	; (80080a8 <bldc_interface_process_packet+0x18b8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	487c      	ldr	r0, [pc, #496]	; (80080a4 <bldc_interface_process_packet+0x18b4>)
 8007eb4:	4798      	blx	r3
		}
		break;
 8007eb6:	e0e5      	b.n	8008084 <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8007ebc:	f107 030c 	add.w	r3, r7, #12
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80080ac <bldc_interface_process_packet+0x18bc>
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa0e 	bl	80082e8 <buffer_get_float32>
 8007ecc:	eef0 7a40 	vmov.f32	s15, s0
 8007ed0:	4b77      	ldr	r3, [pc, #476]	; (80080b0 <bldc_interface_process_packet+0x18c0>)
 8007ed2:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	4619      	mov	r1, r3
 8007edc:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80080ac <bldc_interface_process_packet+0x18bc>
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fa01 	bl	80082e8 <buffer_get_float32>
 8007ee6:	eef0 7a40 	vmov.f32	s15, s0
 8007eea:	4b72      	ldr	r3, [pc, #456]	; (80080b4 <bldc_interface_process_packet+0x18c4>)
 8007eec:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
 8007ef4:	e00f      	b.n	8007f16 <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	60fa      	str	r2, [r7, #12]
 8007efc:	461a      	mov	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b259      	sxtb	r1, r3
 8007f06:	4a6c      	ldr	r2, [pc, #432]	; (80080b8 <bldc_interface_process_packet+0x18c8>)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61bb      	str	r3, [r7, #24]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	2b07      	cmp	r3, #7
 8007f1a:	ddec      	ble.n	8007ef6 <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	60fa      	str	r2, [r7, #12]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b25a      	sxtb	r2, r3
 8007f2c:	4b63      	ldr	r3, [pc, #396]	; (80080bc <bldc_interface_process_packet+0x18cc>)
 8007f2e:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8007f30:	4b63      	ldr	r3, [pc, #396]	; (80080c0 <bldc_interface_process_packet+0x18d0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80a7 	beq.w	8008088 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8007f3a:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <bldc_interface_process_packet+0x18d0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a5c      	ldr	r2, [pc, #368]	; (80080b0 <bldc_interface_process_packet+0x18c0>)
 8007f40:	edd2 7a00 	vldr	s15, [r2]
 8007f44:	4a5b      	ldr	r2, [pc, #364]	; (80080b4 <bldc_interface_process_packet+0x18c4>)
 8007f46:	ed92 7a00 	vldr	s14, [r2]
 8007f4a:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <bldc_interface_process_packet+0x18cc>)
 8007f4c:	f992 2000 	ldrsb.w	r2, [r2]
 8007f50:	4611      	mov	r1, r2
 8007f52:	4859      	ldr	r0, [pc, #356]	; (80080b8 <bldc_interface_process_packet+0x18c8>)
 8007f54:	eef0 0a47 	vmov.f32	s1, s14
 8007f58:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5c:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8007f5e:	e093      	b.n	8008088 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8007f64:	f107 030c 	add.w	r3, r7, #12
 8007f68:	4619      	mov	r1, r3
 8007f6a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80080c4 <bldc_interface_process_packet+0x18d4>
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9ba 	bl	80082e8 <buffer_get_float32>
 8007f74:	eef0 7a40 	vmov.f32	s15, s0
 8007f78:	4b53      	ldr	r3, [pc, #332]	; (80080c8 <bldc_interface_process_packet+0x18d8>)
 8007f7a:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8007f7e:	f107 030c 	add.w	r3, r7, #12
 8007f82:	4619      	mov	r1, r3
 8007f84:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80080c4 <bldc_interface_process_packet+0x18d4>
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f9ad 	bl	80082e8 <buffer_get_float32>
 8007f8e:	eef0 7a40 	vmov.f32	s15, s0
 8007f92:	4b4e      	ldr	r3, [pc, #312]	; (80080cc <bldc_interface_process_packet+0x18dc>)
 8007f94:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8007f98:	4b4d      	ldr	r3, [pc, #308]	; (80080d0 <bldc_interface_process_packet+0x18e0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d075      	beq.n	800808c <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8007fa0:	4b4b      	ldr	r3, [pc, #300]	; (80080d0 <bldc_interface_process_packet+0x18e0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a48      	ldr	r2, [pc, #288]	; (80080c8 <bldc_interface_process_packet+0x18d8>)
 8007fa6:	edd2 7a00 	vldr	s15, [r2]
 8007faa:	4a48      	ldr	r2, [pc, #288]	; (80080cc <bldc_interface_process_packet+0x18dc>)
 8007fac:	ed92 7a00 	vldr	s14, [r2]
 8007fb0:	eef0 0a47 	vmov.f32	s1, s14
 8007fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb8:	4798      	blx	r3
		}
		break;
 8007fba:	e067      	b.n	800808c <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8007fc0:	f107 030c 	add.w	r3, r7, #12
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80080c4 <bldc_interface_process_packet+0x18d4>
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f98c 	bl	80082e8 <buffer_get_float32>
 8007fd0:	eef0 7a40 	vmov.f32	s15, s0
 8007fd4:	4b3f      	ldr	r3, [pc, #252]	; (80080d4 <bldc_interface_process_packet+0x18e4>)
 8007fd6:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8007fda:	f107 030c 	add.w	r3, r7, #12
 8007fde:	4619      	mov	r1, r3
 8007fe0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80080c4 <bldc_interface_process_packet+0x18d4>
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f97f 	bl	80082e8 <buffer_get_float32>
 8007fea:	eef0 7a40 	vmov.f32	s15, s0
 8007fee:	4b3a      	ldr	r3, [pc, #232]	; (80080d8 <bldc_interface_process_packet+0x18e8>)
 8007ff0:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8007ff4:	4b39      	ldr	r3, [pc, #228]	; (80080dc <bldc_interface_process_packet+0x18ec>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d049      	beq.n	8008090 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8007ffc:	4b37      	ldr	r3, [pc, #220]	; (80080dc <bldc_interface_process_packet+0x18ec>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a34      	ldr	r2, [pc, #208]	; (80080d4 <bldc_interface_process_packet+0x18e4>)
 8008002:	edd2 7a00 	vldr	s15, [r2]
 8008006:	4a34      	ldr	r2, [pc, #208]	; (80080d8 <bldc_interface_process_packet+0x18e8>)
 8008008:	ed92 7a00 	vldr	s14, [r2]
 800800c:	eef0 0a47 	vmov.f32	s1, s14
 8008010:	eeb0 0a67 	vmov.f32	s0, s15
 8008014:	4798      	blx	r3
		}
		break;
 8008016:	e03b      	b.n	8008090 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 800801c:	f107 030c 	add.w	r3, r7, #12
 8008020:	4619      	mov	r1, r3
 8008022:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80080c4 <bldc_interface_process_packet+0x18d4>
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f95e 	bl	80082e8 <buffer_get_float32>
 800802c:	eef0 7a40 	vmov.f32	s15, s0
 8008030:	4b2b      	ldr	r3, [pc, #172]	; (80080e0 <bldc_interface_process_packet+0x18f0>)
 8008032:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <bldc_interface_process_packet+0x18f4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d02a      	beq.n	8008094 <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 800803e:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <bldc_interface_process_packet+0x18f4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	; (80080e0 <bldc_interface_process_packet+0x18f0>)
 8008044:	edd2 7a00 	vldr	s15, [r2]
 8008048:	eeb0 0a67 	vmov.f32	s0, s15
 800804c:	4798      	blx	r3
		}
		break;
 800804e:	e021      	b.n	8008094 <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8008050:	4b25      	ldr	r3, [pc, #148]	; (80080e8 <bldc_interface_process_packet+0x18f8>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01f      	beq.n	8008098 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 8008058:	4b23      	ldr	r3, [pc, #140]	; (80080e8 <bldc_interface_process_packet+0x18f8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4798      	blx	r3
		}
		break;
 800805e:	e01b      	b.n	8008098 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8008060:	4b22      	ldr	r3, [pc, #136]	; (80080ec <bldc_interface_process_packet+0x18fc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d019      	beq.n	800809c <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 8008068:	4b20      	ldr	r3, [pc, #128]	; (80080ec <bldc_interface_process_packet+0x18fc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4798      	blx	r3
		}
		break;
 800806e:	e015      	b.n	800809c <bldc_interface_process_packet+0x18ac>
		return;
 8008070:	bf00      	nop
 8008072:	e014      	b.n	800809e <bldc_interface_process_packet+0x18ae>

	default:
		break;
 8008074:	bf00      	nop
 8008076:	e012      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008078:	bf00      	nop
 800807a:	e010      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 800807c:	bf00      	nop
 800807e:	e00e      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008080:	bf00      	nop
 8008082:	e00c      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008084:	bf00      	nop
 8008086:	e00a      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008088:	bf00      	nop
 800808a:	e008      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 800808c:	bf00      	nop
 800808e:	e006      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008090:	bf00      	nop
 8008092:	e004      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008094:	bf00      	nop
 8008096:	e002      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 8008098:	bf00      	nop
 800809a:	e000      	b.n	800809e <bldc_interface_process_packet+0x18ae>
		break;
 800809c:	bf00      	nop
	}
}
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	2000081c 	.word	0x2000081c
 80080a8:	2000092c 	.word	0x2000092c
 80080ac:	447a0000 	.word	0x447a0000
 80080b0:	200008e8 	.word	0x200008e8
 80080b4:	200008ec 	.word	0x200008ec
 80080b8:	200008f0 	.word	0x200008f0
 80080bc:	200008f8 	.word	0x200008f8
 80080c0:	20000930 	.word	0x20000930
 80080c4:	49742400 	.word	0x49742400
 80080c8:	200008fc 	.word	0x200008fc
 80080cc:	20000900 	.word	0x20000900
 80080d0:	20000934 	.word	0x20000934
 80080d4:	20000904 	.word	0x20000904
 80080d8:	20000908 	.word	0x20000908
 80080dc:	20000938 	.word	0x20000938
 80080e0:	2000090c 	.word	0x2000090c
 80080e4:	2000093c 	.word	0x2000093c
 80080e8:	20000940 	.word	0x20000940
 80080ec:	20000944 	.word	0x20000944

080080f0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	1618      	asrs	r0, r3, #24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	1c59      	adds	r1, r3, #1
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6011      	str	r1, [r2, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	b2c2      	uxtb	r2, r0
 8008112:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1418      	asrs	r0, r3, #16
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	1c59      	adds	r1, r3, #1
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	b2c2      	uxtb	r2, r0
 800812a:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	1218      	asrs	r0, r3, #8
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	1c59      	adds	r1, r3, #1
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	6011      	str	r1, [r2, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	b2c2      	uxtb	r2, r0
 8008142:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	1c59      	adds	r1, r3, #1
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6011      	str	r1, [r2, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4413      	add	r3, r2
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	b2d2      	uxtb	r2, r2
 8008158:	701a      	strb	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	461a      	mov	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	6879      	ldr	r1, [r7, #4]
 8008188:	440b      	add	r3, r1
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800818e:	4313      	orrs	r3, r2
 8008190:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	1c9a      	adds	r2, r3, #2
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]
	return res;
 800819c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3301      	adds	r3, #1
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	440b      	add	r3, r1
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80081d4:	4313      	orrs	r3, r2
 80081d6:	b21b      	sxth	r3, r3
 80081d8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	1c9a      	adds	r2, r3, #2
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	601a      	str	r2, [r3, #0]
	return res;
 80081e4:	89fb      	ldrh	r3, [r7, #14]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4413      	add	r3, r2
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	440b      	add	r3, r1
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008218:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3302      	adds	r3, #2
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	440b      	add	r3, r1
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8008228:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	3203      	adds	r2, #3
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	440a      	add	r2, r1
 8008234:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8008236:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008238:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	601a      	str	r2, [r3, #0]
	return res;
 8008244:	68fb      	ldr	r3, [r7, #12]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3301      	adds	r3, #1
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	440b      	add	r3, r1
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008278:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3302      	adds	r3, #2
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	440b      	add	r3, r1
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8008288:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	3203      	adds	r2, #3
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	440a      	add	r2, r1
 8008294:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	601a      	str	r2, [r3, #0]
	return res;
 80082a4:	68fb      	ldr	r3, [r7, #12]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80082be:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff4f 	bl	8008166 <buffer_get_int16>
 80082c8:	4603      	mov	r3, r0
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80082d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80082da:	eef0 7a66 	vmov.f32	s15, s13
}
 80082de:	eeb0 0a67 	vmov.f32	s0, s15
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80082f4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff ff7a 	bl	80081f2 <buffer_get_int32>
 80082fe:	ee07 0a90 	vmov	s15, r0
 8008302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008306:	edd7 7a02 	vldr	s15, [r7, #8]
 800830a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800830e:	eef0 7a66 	vmov.f32	s15, s13
}
 8008312:	eeb0 0a67 	vmov.f32	s0, s15
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff ff92 	bl	8008252 <buffer_get_uint32>
 800832e:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	0ddb      	lsrs	r3, r3, #23
 8008334:	b2db      	uxtb	r3, r3
 8008336:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800833e:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	bf14      	ite	ne
 800834a:	2301      	movne	r3, #1
 800834c:	2300      	moveq	r3, #0
 800834e:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <buffer_get_float32_auto+0x46>
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d021      	beq.n	80083a6 <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	ee07 3a90 	vmov	s15, r3
 8008368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836c:	ee17 0a90 	vmov	r0, s15
 8008370:	f7f8 f8ea 	bl	8000548 <__aeabi_f2d>
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <buffer_get_float32_auto+0xb4>)
 800837a:	f7f8 fa67 	bl	800084c <__aeabi_ddiv>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	f04f 0200 	mov.w	r2, #0
 800838a:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <buffer_get_float32_auto+0xb8>)
 800838c:	f7f7 ff7e 	bl	800028c <__adddf3>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4610      	mov	r0, r2
 8008396:	4619      	mov	r1, r3
 8008398:	f7f8 fc26 	bl	8000be8 <__aeabi_d2f>
 800839c:	4603      	mov	r3, r0
 800839e:	61bb      	str	r3, [r7, #24]
		e -= 126;
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	3b7e      	subs	r3, #126	; 0x7e
 80083a4:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <buffer_get_float32_auto+0x9c>
		sig = -sig;
 80083ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80083b0:	eef1 7a67 	vneg.f32	s15, s15
 80083b4:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 80083b8:	69f8      	ldr	r0, [r7, #28]
 80083ba:	ed97 0a06 	vldr	s0, [r7, #24]
 80083be:	f00d fdbf 	bl	8015f40 <ldexpf>
 80083c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80083c6:	eeb0 0a67 	vmov.f32	s0, s15
 80083ca:	3720      	adds	r7, #32
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	41700000 	.word	0x41700000
 80083d4:	3fe00000 	.word	0x3fe00000

080083d8 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	e016      	b.n	800841a <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80083ec:	897b      	ldrh	r3, [r7, #10]
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	607a      	str	r2, [r7, #4]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	404b      	eors	r3, r1
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	4a0b      	ldr	r2, [pc, #44]	; (8008430 <crc16+0x58>)
 8008402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008406:	b21a      	sxth	r2, r3
 8008408:	897b      	ldrh	r3, [r7, #10]
 800840a:	021b      	lsls	r3, r3, #8
 800840c:	b21b      	sxth	r3, r3
 800840e:	4053      	eors	r3, r2
 8008410:	b21b      	sxth	r3, r3
 8008412:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	429a      	cmp	r2, r3
 8008420:	d3e4      	bcc.n	80083ec <crc16+0x14>
	}
	return cksum;
 8008422:	897b      	ldrh	r3, [r7, #10]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	0801aa2c 	.word	0x0801aa2c

08008434 <comm_can_send_buffer>:
 * 0: Packet goes to commands_process_packet of receiver
 * 1: Packet goes to commands_send_packet of receiver --> can use to send to other board?
 * 2: Packet goes to commands_process and send function is set to null
 *    so that no reply is sent back.
 */
void comm_can_send_buffer(uint8_t controller_id, uint8_t *data, unsigned int len, uint8_t send) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b08e      	sub	sp, #56	; 0x38
 8008438:	af00      	add	r7, sp, #0
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	607a      	str	r2, [r7, #4]
 800843e:	461a      	mov	r2, r3
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]
 8008444:	4613      	mov	r3, r2
 8008446:	73bb      	strb	r3, [r7, #14]
	uint8_t send_buffer[8];

	if (len <= 6) {
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b06      	cmp	r3, #6
 800844c:	d82b      	bhi.n	80084a6 <comm_can_send_buffer+0x72>
		uint32_t ind = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	61ba      	str	r2, [r7, #24]
 8008458:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800845c:	4413      	add	r3, r2
 800845e:	221e      	movs	r2, #30
 8008460:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	61ba      	str	r2, [r7, #24]
 800846a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800846e:	4413      	add	r3, r2
 8008470:	7bba      	ldrb	r2, [r7, #14]
 8008472:	f803 2c28 	strb.w	r2, [r3, #-40]
		memcpy(send_buffer + ind, data, len);
 8008476:	f107 0210 	add.w	r2, r7, #16
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	4413      	add	r3, r2
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	4618      	mov	r0, r3
 8008484:	f00c fecc 	bl	8015220 <memcpy>
		ind += len;
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4413      	add	r3, r2
 800848e:	61bb      	str	r3, [r7, #24]
#if defined USED_CAN1
			CAN_TxMsgEID(&hcan1, controller_id |
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f107 0210 	add.w	r2, r7, #16
 800849e:	4872      	ldr	r0, [pc, #456]	; (8008668 <comm_can_send_buffer+0x234>)
 80084a0:	f7fa fe54 	bl	800314c <CAN_TxMsgEID>
#elif defined USED_CAN2
			CAN_TxMsgEID(&hcan2, controller_id |
								((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
#endif
	}
}
 80084a4:	e0dc      	b.n	8008660 <comm_can_send_buffer+0x22c>
		unsigned int end_a = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
		for (unsigned int i = 0;i < len;i += 7) {
 80084aa:	2300      	movs	r3, #0
 80084ac:	633b      	str	r3, [r7, #48]	; 0x30
 80084ae:	e03d      	b.n	800852c <comm_can_send_buffer+0xf8>
			if (i > 255) {
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	2bff      	cmp	r3, #255	; 0xff
 80084b4:	d83f      	bhi.n	8008536 <comm_can_send_buffer+0x102>
			end_a = i + 7;
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	3307      	adds	r3, #7
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
			uint8_t send_len = 7;
 80084bc:	2307      	movs	r3, #7
 80084be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			send_buffer[0] = i;
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	743b      	strb	r3, [r7, #16]
			if ((i + 7) <= len) {
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	3307      	adds	r3, #7
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d30b      	bcc.n	80084ea <comm_can_send_buffer+0xb6>
				memcpy(send_buffer + 1, data + i, send_len);
 80084d2:	f107 0310 	add.w	r3, r7, #16
 80084d6:	3301      	adds	r3, #1
 80084d8:	68b9      	ldr	r1, [r7, #8]
 80084da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084dc:	4411      	add	r1, r2
 80084de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80084e2:	4618      	mov	r0, r3
 80084e4:	f00c fe9c 	bl	8015220 <memcpy>
 80084e8:	e011      	b.n	800850e <comm_can_send_buffer+0xda>
				send_len = len - i;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				memcpy(send_buffer + 1, data + i, send_len);
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	3301      	adds	r3, #1
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008502:	4411      	add	r1, r2
 8008504:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008508:	4618      	mov	r0, r3
 800850a:	f00c fe89 	bl	8015220 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	f443 61a0 	orr.w	r1, r3, #1280	; 0x500
 8008514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008518:	3301      	adds	r3, #1
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f107 0210 	add.w	r2, r7, #16
 8008520:	4851      	ldr	r0, [pc, #324]	; (8008668 <comm_can_send_buffer+0x234>)
 8008522:	f7fa fe13 	bl	800314c <CAN_TxMsgEID>
		for (unsigned int i = 0;i < len;i += 7) {
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	3307      	adds	r3, #7
 800852a:	633b      	str	r3, [r7, #48]	; 0x30
 800852c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d3bd      	bcc.n	80084b0 <comm_can_send_buffer+0x7c>
 8008534:	e000      	b.n	8008538 <comm_can_send_buffer+0x104>
				break;
 8008536:	bf00      	nop
		for (unsigned int i = end_a;i < len;i += 6) {
 8008538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
 800853c:	e03b      	b.n	80085b6 <comm_can_send_buffer+0x182>
			uint8_t send_len = 6;
 800853e:	2306      	movs	r3, #6
 8008540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			send_buffer[0] = i >> 8;
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	0a1b      	lsrs	r3, r3, #8
 8008548:	b2db      	uxtb	r3, r3
 800854a:	743b      	strb	r3, [r7, #16]
			send_buffer[1] = i & 0xFF;
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	b2db      	uxtb	r3, r3
 8008550:	747b      	strb	r3, [r7, #17]
			if ((i + 6) <= len) {
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	3306      	adds	r3, #6
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	429a      	cmp	r2, r3
 800855a:	d30b      	bcc.n	8008574 <comm_can_send_buffer+0x140>
				memcpy(send_buffer + 2, data + i, send_len);
 800855c:	f107 0310 	add.w	r3, r7, #16
 8008560:	3302      	adds	r3, #2
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008566:	4411      	add	r1, r2
 8008568:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800856c:	4618      	mov	r0, r3
 800856e:	f00c fe57 	bl	8015220 <memcpy>
 8008572:	e011      	b.n	8008598 <comm_can_send_buffer+0x164>
				send_len = len - i;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	b2da      	uxtb	r2, r3
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	b2db      	uxtb	r3, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				memcpy(send_buffer + 2, data + i, send_len);
 8008582:	f107 0310 	add.w	r3, r7, #16
 8008586:	3302      	adds	r3, #2
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800858c:	4411      	add	r1, r2
 800858e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008592:	4618      	mov	r0, r3
 8008594:	f00c fe44 	bl	8015220 <memcpy>
			CAN_TxMsgEID(&hcan1, controller_id |
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	f443 61c0 	orr.w	r1, r3, #1536	; 0x600
 800859e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a2:	3302      	adds	r3, #2
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f107 0210 	add.w	r2, r7, #16
 80085aa:	482f      	ldr	r0, [pc, #188]	; (8008668 <comm_can_send_buffer+0x234>)
 80085ac:	f7fa fdce 	bl	800314c <CAN_TxMsgEID>
		for (unsigned int i = end_a;i < len;i += 6) {
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	3306      	adds	r3, #6
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d3bf      	bcc.n	800853e <comm_can_send_buffer+0x10a>
		uint32_t ind = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	623b      	str	r3, [r7, #32]
		send_buffer[ind++] = (uint8_t)RNS_TO_VESC;
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	623a      	str	r2, [r7, #32]
 80085c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80085cc:	4413      	add	r3, r2
 80085ce:	221e      	movs	r2, #30
 80085d0:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = send;
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	623a      	str	r2, [r7, #32]
 80085da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80085de:	4413      	add	r3, r2
 80085e0:	7bba      	ldrb	r2, [r7, #14]
 80085e2:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len >> 8;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	0a19      	lsrs	r1, r3, #8
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	623a      	str	r2, [r7, #32]
 80085f0:	b2ca      	uxtb	r2, r1
 80085f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80085f6:	440b      	add	r3, r1
 80085f8:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = len & 0xFF;
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	623a      	str	r2, [r7, #32]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800860a:	440b      	add	r3, r1
 800860c:	f803 2c28 	strb.w	r2, [r3, #-40]
		unsigned short crc = crc16(data, len);
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f7ff fee0 	bl	80083d8 <crc16>
 8008618:	4603      	mov	r3, r0
 800861a:	83fb      	strh	r3, [r7, #30]
		send_buffer[ind++] = (uint8_t)(crc >> 8);
 800861c:	8bfb      	ldrh	r3, [r7, #30]
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b299      	uxth	r1, r3
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	623a      	str	r2, [r7, #32]
 8008628:	b2ca      	uxtb	r2, r1
 800862a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800862e:	440b      	add	r3, r1
 8008630:	f803 2c28 	strb.w	r2, [r3, #-40]
		send_buffer[ind++] = (uint8_t)(crc & 0xFF);
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	623a      	str	r2, [r7, #32]
 800863a:	8bfa      	ldrh	r2, [r7, #30]
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008642:	440b      	add	r3, r1
 8008644:	f803 2c28 	strb.w	r2, [r3, #-40]
			CAN_TxMsgEID(&hcan1, controller_id |
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	f443 61e0 	orr.w	r1, r3, #1792	; 0x700
					((uint32_t)CAN_PACKET_PROCESS_RX_BUFFER << 8), send_buffer, ind++);
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	623a      	str	r2, [r7, #32]
			CAN_TxMsgEID(&hcan1, controller_id |
 8008654:	b2db      	uxtb	r3, r3
 8008656:	f107 0210 	add.w	r2, r7, #16
 800865a:	4803      	ldr	r0, [pc, #12]	; (8008668 <comm_can_send_buffer+0x234>)
 800865c:	f7fa fd76 	bl	800314c <CAN_TxMsgEID>
}
 8008660:	bf00      	nop
 8008662:	3738      	adds	r7, #56	; 0x38
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20006d74 	.word	0x20006d74
 800866c:	00000000 	.word	0x00000000

08008670 <comm_can_set_duty>:

void comm_can_set_duty(uint8_t controller_id, float duty) {
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	ed87 0a00 	vstr	s0, [r7]
 800867c:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(duty * 100000.0), &send_index);
 8008682:	6838      	ldr	r0, [r7, #0]
 8008684:	f7f7 ff60 	bl	8000548 <__aeabi_f2d>
 8008688:	a310      	add	r3, pc, #64	; (adr r3, 80086cc <comm_can_set_duty+0x5c>)
 800868a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868e:	f7f7 ffb3 	bl	80005f8 <__aeabi_dmul>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	4610      	mov	r0, r2
 8008698:	4619      	mov	r1, r3
 800869a:	f7f8 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800869e:	4601      	mov	r1, r0
 80086a0:	f107 020c 	add.w	r2, r7, #12
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff fd21 	bl	80080f0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 80086ae:	79f9      	ldrb	r1, [r7, #7]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f107 0208 	add.w	r2, r7, #8
 80086b8:	4803      	ldr	r0, [pc, #12]	; (80086c8 <comm_can_set_duty+0x58>)
 80086ba:	f7fa fd47 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_DUTY << 8), buffer, send_index);
#endif
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20006d74 	.word	0x20006d74
 80086cc:	00000000 	.word	0x00000000
 80086d0:	40f86a00 	.word	0x40f86a00

080086d4 <comm_can_set_current>:

void comm_can_set_current(uint8_t controller_id, float current) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	ed87 0a00 	vstr	s0, [r7]
 80086e0:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)(current * 1000.0), &send_index);
 80086e6:	6838      	ldr	r0, [r7, #0]
 80086e8:	f7f7 ff2e 	bl	8000548 <__aeabi_f2d>
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <comm_can_set_current+0x5c>)
 80086f2:	f7f7 ff81 	bl	80005f8 <__aeabi_dmul>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	f7f8 fa2b 	bl	8000b58 <__aeabi_d2iz>
 8008702:	4601      	mov	r1, r0
 8008704:	f107 020c 	add.w	r2, r7, #12
 8008708:	f107 0308 	add.w	r3, r7, #8
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fcef 	bl	80080f0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	4804      	ldr	r0, [pc, #16]	; (8008734 <comm_can_set_current+0x60>)
 8008722:	f7fa fd13 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT << 8), buffer, send_index);
#endif
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	408f4000 	.word	0x408f4000
 8008734:	20006d74 	.word	0x20006d74

08008738 <comm_can_set_rpm>:
				((uint32_t)CAN_PACKET_SET_CURRENT_BRAKE << 8), buffer, send_index);
#endif

}

void comm_can_set_rpm(uint8_t controller_id, float rpm) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	4603      	mov	r3, r0
 8008740:	ed87 0a00 	vstr	s0, [r7]
 8008744:	71fb      	strb	r3, [r7, #7]
	int32_t send_index = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[4];
	buffer_append_int32(buffer, (int32_t)rpm, &send_index);
 800874a:	edd7 7a00 	vldr	s15, [r7]
 800874e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008752:	f107 020c 	add.w	r2, r7, #12
 8008756:	f107 0308 	add.w	r3, r7, #8
 800875a:	ee17 1a90 	vmov	r1, s15
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fcc6 	bl	80080f0 <buffer_append_int32>
#if defined USED_CAN1
	CAN_TxMsgEID(&hcan1, controller_id |
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	f443 7140 	orr.w	r1, r3, #768	; 0x300
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	b2db      	uxtb	r3, r3
 800876e:	f107 0208 	add.w	r2, r7, #8
 8008772:	4803      	ldr	r0, [pc, #12]	; (8008780 <comm_can_set_rpm+0x48>)
 8008774:	f7fa fcea 	bl	800314c <CAN_TxMsgEID>
			((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#elif defined USED_CAN2
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_RPM << 8), buffer, send_index);
#endif
}
 8008778:	bf00      	nop
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	20006d74 	.word	0x20006d74

08008784 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b090      	sub	sp, #64	; 0x40
 8008788:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;

	Vescmsg *rxmsg_tmp;
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 800878e:	e0dd      	b.n	800894c <decode_VESC+0x1c8>
		Vescmsg rxmsg = *rxmsg_tmp;
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	1d3c      	adds	r4, r7, #4
 8008794:	461d      	mov	r5, r3
 8008796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800879a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800879c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	6023      	str	r3, [r4, #0]

		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	f040 80c6 	bne.w	8008936 <decode_VESC+0x1b2>
			uint8_t id = rxmsg.Rxmsg.ExtId & 0xFF;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	0a1b      	lsrs	r3, r3, #8
 80087b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			if (id == 255 || id == RNS_TO_VESC) {
 80087b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087bc:	2bff      	cmp	r3, #255	; 0xff
 80087be:	d004      	beq.n	80087ca <decode_VESC+0x46>
 80087c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087c4:	2b1e      	cmp	r3, #30
 80087c6:	f040 80b6 	bne.w	8008936 <decode_VESC+0x1b2>
				switch (cmd) {
 80087ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80087ce:	3b05      	subs	r3, #5
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	f200 80b2 	bhi.w	800893a <decode_VESC+0x1b6>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <decode_VESC+0x58>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	08008809 	.word	0x08008809
 80087e4:	0800883f 	.word	0x0800883f
 80087e8:	080088f7 	.word	0x080088f7
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.Rxmsg.DLC - 1);
 80087ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b5c      	ldr	r3, [pc, #368]	; (8008964 <decode_VESC+0x1e0>)
 80087f4:	18d0      	adds	r0, r2, r3
 80087f6:	1d3b      	adds	r3, r7, #4
 80087f8:	331c      	adds	r3, #28
 80087fa:	3301      	adds	r3, #1
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	3a01      	subs	r2, #1
 8008800:	4619      	mov	r1, r3
 8008802:	f00c fd0d 	bl	8015220 <memcpy>
					break;
 8008806:	e0a1      	b.n	800894c <decode_VESC+0x1c8>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 8008808:	f897 3020 	ldrb.w	r3, [r7, #32]
 800880c:	021b      	lsls	r3, r3, #8
 800880e:	62bb      	str	r3, [r7, #40]	; 0x28
					rxbuf_ind |= rxmsg.Data[1];
 8008810:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008814:	461a      	mov	r2, r3
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	4313      	orrs	r3, r2
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 800881c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008822:	f080 808c 	bcs.w	800893e <decode_VESC+0x1ba>
						memcpy(rx_buffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.Rxmsg.DLC - 2);
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	4a4e      	ldr	r2, [pc, #312]	; (8008964 <decode_VESC+0x1e0>)
 800882a:	1898      	adds	r0, r3, r2
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	331c      	adds	r3, #28
 8008830:	3302      	adds	r3, #2
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	3a02      	subs	r2, #2
 8008836:	4619      	mov	r1, r3
 8008838:	f00c fcf2 	bl	8015220 <memcpy>
					}
					break;
 800883c:	e07f      	b.n	800893e <decode_VESC+0x1ba>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	1c5a      	adds	r2, r3, #1
 8008846:	63ba      	str	r2, [r7, #56]	; 0x38
 8008848:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800884c:	4413      	add	r3, r2
 800884e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008852:	461a      	mov	r2, r3
 8008854:	4b44      	ldr	r3, [pc, #272]	; (8008968 <decode_VESC+0x1e4>)
 8008856:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	63ba      	str	r2, [r7, #56]	; 0x38
 800885e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008862:	4413      	add	r3, r2
 8008864:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008868:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 800886c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886e:	1c5a      	adds	r2, r3, #1
 8008870:	63ba      	str	r2, [r7, #56]	; 0x38
 8008872:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008876:	4413      	add	r3, r2
 8008878:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800887c:	021b      	lsls	r3, r3, #8
 800887e:	63fb      	str	r3, [r7, #60]	; 0x3c
					rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	63ba      	str	r2, [r7, #56]	; 0x38
 8008886:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800888a:	4413      	add	r3, r2
 800888c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008890:	461a      	mov	r2, r3
 8008892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008894:	4313      	orrs	r3, r2
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c

					if (rxbuf_len > RX_BUFFER_SIZE) {
 8008898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889e:	d850      	bhi.n	8008942 <decode_VESC+0x1be>
						break;
					}

					crc_high = rxmsg.Data[ind++];
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	1c5a      	adds	r2, r3, #1
 80088a4:	63ba      	str	r2, [r7, #56]	; 0x38
 80088a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80088aa:	4413      	add	r3, r2
 80088ac:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80088b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					crc_low = rxmsg.Data[ind++];
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80088ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80088be:	4413      	add	r3, r2
 80088c0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80088c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (crc16(rx_buffer, rxbuf_len)
 80088c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ca:	4826      	ldr	r0, [pc, #152]	; (8008964 <decode_VESC+0x1e0>)
 80088cc:	f7ff fd84 	bl	80083d8 <crc16>
 80088d0:	4603      	mov	r3, r0
 80088d2:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 80088d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80088d8:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 80088da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088de:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 80088e0:	4299      	cmp	r1, r3
 80088e2:	d130      	bne.n	8008946 <decode_VESC+0x1c2>
						if(commands_send==1)
 80088e4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d12c      	bne.n	8008946 <decode_VESC+0x1c2>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 80088ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088ee:	481d      	ldr	r0, [pc, #116]	; (8008964 <decode_VESC+0x1e0>)
 80088f0:	f7fd ff7e 	bl	80067f0 <bldc_interface_process_packet>
					}
					break;
 80088f4:	e027      	b.n	8008946 <decode_VESC+0x1c2>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8008900:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008904:	4413      	add	r3, r2
 8008906:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800890a:	461a      	mov	r2, r3
 800890c:	4b16      	ldr	r3, [pc, #88]	; (8008968 <decode_VESC+0x1e4>)
 800890e:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 8008910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	63ba      	str	r2, [r7, #56]	; 0x38
 8008916:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800891a:	4413      	add	r3, r2
 800891c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8008920:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					if(commands_send==1)
 8008924:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008928:	2b01      	cmp	r3, #1
 800892a:	d10e      	bne.n	800894a <decode_VESC+0x1c6>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 800892c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800892e:	480d      	ldr	r0, [pc, #52]	; (8008964 <decode_VESC+0x1e0>)
 8008930:	f7fd ff5e 	bl	80067f0 <bldc_interface_process_packet>
					break;
 8008934:	e009      	b.n	800894a <decode_VESC+0x1c6>
				default:
					break;
				}
			}
 8008936:	bf00      	nop
 8008938:	e008      	b.n	800894c <decode_VESC+0x1c8>
					break;
 800893a:	bf00      	nop
 800893c:	e006      	b.n	800894c <decode_VESC+0x1c8>
					break;
 800893e:	bf00      	nop
 8008940:	e004      	b.n	800894c <decode_VESC+0x1c8>
						break;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <decode_VESC+0x1c8>
					break;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <decode_VESC+0x1c8>
					break;
 800894a:	bf00      	nop
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 800894c:	f000 f80e 	bl	800896c <get_rx_frame>
 8008950:	6378      	str	r0, [r7, #52]	; 0x34
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008954:	2b00      	cmp	r3, #0
 8008956:	f47f af1b 	bne.w	8008790 <decode_VESC+0xc>
		}
	}
}
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	3740      	adds	r7, #64	; 0x40
 8008960:	46bd      	mov	sp, r7
 8008962:	bdb0      	pop	{r4, r5, r7, pc}
 8008964:	20000948 	.word	0x20000948
 8008968:	20000b48 	.word	0x20000b48

0800896c <get_rx_frame>:

Vescmsg *get_rx_frame(void) {
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
	if (rx_frame_read != rx_frame_write){
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <get_rx_frame+0x4c>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b11      	ldr	r3, [pc, #68]	; (80089bc <get_rx_frame+0x50>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d014      	beq.n	80089a8 <get_rx_frame+0x3c>
		Vescmsg *res = &rx_frames[rx_frame_read++];
 800897e:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <get_rx_frame+0x4c>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	1c53      	adds	r3, r2, #1
 8008984:	490c      	ldr	r1, [pc, #48]	; (80089b8 <get_rx_frame+0x4c>)
 8008986:	600b      	str	r3, [r1, #0]
 8008988:	4613      	mov	r3, r2
 800898a:	00db      	lsls	r3, r3, #3
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4a0b      	ldr	r2, [pc, #44]	; (80089c0 <get_rx_frame+0x54>)
 8008992:	4413      	add	r3, r2
 8008994:	607b      	str	r3, [r7, #4]

		if (rx_frame_read == RX_FRAMES_SIZE){
 8008996:	4b08      	ldr	r3, [pc, #32]	; (80089b8 <get_rx_frame+0x4c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b64      	cmp	r3, #100	; 0x64
 800899c:	d102      	bne.n	80089a4 <get_rx_frame+0x38>
			rx_frame_read = 0;
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <get_rx_frame+0x4c>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
		}

		return res;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	e000      	b.n	80089aa <get_rx_frame+0x3e>
	} else
		return 0;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	370c      	adds	r7, #12
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	2000195c 	.word	0x2000195c
 80089bc:	20001960 	.word	0x20001960
 80089c0:	20000b4c 	.word	0x20000b4c

080089c4 <set_rx_frames>:

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 80089c4:	b4b0      	push	{r4, r5, r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 80089cc:	4b16      	ldr	r3, [pc, #88]	; (8008a28 <set_rx_frames+0x64>)
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	1c53      	adds	r3, r2, #1
 80089d2:	4915      	ldr	r1, [pc, #84]	; (8008a28 <set_rx_frames+0x64>)
 80089d4:	600b      	str	r3, [r1, #0]
 80089d6:	4915      	ldr	r1, [pc, #84]	; (8008a2c <set_rx_frames+0x68>)
 80089d8:	4613      	mov	r3, r2
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	18ca      	adds	r2, r1, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4614      	mov	r4, r2
 80089e6:	461d      	mov	r5, r3
 80089e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 80089f4:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <set_rx_frames+0x64>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b64      	cmp	r3, #100	; 0x64
 80089fa:	d102      	bne.n	8008a02 <set_rx_frames+0x3e>
		rx_frame_write = 0;
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <set_rx_frames+0x64>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b07      	cmp	r3, #7
 8008a0e:	d002      	beq.n	8008a16 <set_rx_frames+0x52>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d101      	bne.n	8008a1a <set_rx_frames+0x56>
		return 112;
 8008a16:	2370      	movs	r3, #112	; 0x70
 8008a18:	e000      	b.n	8008a1c <set_rx_frames+0x58>
	else
		return 0;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bcb0      	pop	{r4, r5, r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	20001960 	.word	0x20001960
 8008a2c:	20000b4c 	.word	0x20000b4c

08008a30 <VESCInit>:
 * 						  wheel_diameter 	wheel diameter
 * 						  vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCInit(40000,1,0.0037,&csev);
 */
void VESCInit(float max_rpm, float pole_pairs, float wheel_diameter,uint16_t Instance, VESC_t* vesc){
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	ed87 0a05 	vstr	s0, [r7, #20]
 8008a3a:	edc7 0a04 	vstr	s1, [r7, #16]
 8008a3e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008a42:	4603      	mov	r3, r0
 8008a44:	6079      	str	r1, [r7, #4]
 8008a46:	817b      	strh	r3, [r7, #10]
	bldc_interface_init(bldc_send_packet);
 8008a48:	4809      	ldr	r0, [pc, #36]	; (8008a70 <VESCInit+0x40>)
 8008a4a:	f7fd fec1 	bl	80067d0 <bldc_interface_init>
//	bldc_interface_set_rx_value_selective_func(bldc_val_selective_received_cb);

	vesc->max_rpm = max_rpm;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	601a      	str	r2, [r3, #0]
	vesc->pole_pairs = pole_pairs;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	605a      	str	r2, [r3, #4]
	vesc->wheel_diameter = wheel_diameter;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	609a      	str	r2, [r3, #8]
	vesc->Instance = Instance;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	897a      	ldrh	r2, [r7, #10]
 8008a64:	819a      	strh	r2, [r3, #12]
}
 8008a66:	bf00      	nop
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	08008ae9 	.word	0x08008ae9

08008a74 <VESCStop>:
 * Function Remarks		: NONE
 * Function Arguments	: vesc 			pointer to a VESC data structure with VESC_t type
 * Function Return		: None
 * Function Example		: VESCStop(&csev);
 */
void VESCStop(VESC_t* vesc) {
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	if(vesc->pdc_flag) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7c1b      	ldrb	r3, [r3, #16]
 8008a80:	f003 0304 	and.w	r3, r3, #4
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <VESCStop+0x26>
		comm_can_set_duty(vesc->Instance, 0.0);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	899b      	ldrh	r3, [r3, #12]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8008ae4 <VESCStop+0x70>
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fdeb 	bl	8008670 <comm_can_set_duty>
	}

	if(vesc->rpm_flag) {
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	f003 0302 	and.w	r3, r3, #2
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d007      	beq.n	8008ab8 <VESCStop+0x44>
		comm_can_set_rpm(vesc->Instance, 0.0);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	899b      	ldrh	r3, [r3, #12]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008ae4 <VESCStop+0x70>
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7ff fe40 	bl	8008738 <comm_can_set_rpm>
	}

	if(vesc->current_flag){
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7c1b      	ldrb	r3, [r3, #16]
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d007      	beq.n	8008ad6 <VESCStop+0x62>
		comm_can_set_current(vesc->Instance, 0.0);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8008ae4 <VESCStop+0x70>
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff fdff 	bl	80086d4 <comm_can_set_current>
	}

	vesc->flags = 0;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	741a      	strb	r2, [r3, #16]
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	00000000 	.word	0x00000000

08008ae8 <bldc_send_packet>:
//	rx_value_complete = false;
	return rx_value_buf;
}

/*	Private Function	*/
void bldc_send_packet(uint8_t controller_id, uint8_t *data, unsigned int len) {
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	73fb      	strb	r3, [r7, #15]
	comm_can_send_buffer(controller_id, data, len, 0);
 8008af6:	7bf8      	ldrb	r0, [r7, #15]
 8008af8:	2300      	movs	r3, #0
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	f7ff fc99 	bl	8008434 <comm_can_send_buffer>
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008b12:	f001 fcb1 	bl	800a478 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8008b16:	f7f9 fdf5 	bl	8002704 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2302      	movs	r3, #2
 8008b20:	2201      	movs	r2, #1
 8008b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b26:	48c1      	ldr	r0, [pc, #772]	; (8008e2c <Initialize+0x320>)
 8008b28:	f7f8 faea 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2201      	movs	r2, #1
 8008b34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008b38:	48bc      	ldr	r0, [pc, #752]	; (8008e2c <Initialize+0x320>)
 8008b3a:	f7f8 fae1 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008b3e:	2301      	movs	r3, #1
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	2302      	movs	r3, #2
 8008b44:	2201      	movs	r2, #1
 8008b46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b4a:	48b8      	ldr	r0, [pc, #736]	; (8008e2c <Initialize+0x320>)
 8008b4c:	f7f8 fad8 	bl	8001100 <GPIOPinsInit>
	//	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (SPI1_MOSI_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (UART3_Tx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
	//	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008b50:	2301      	movs	r3, #1
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2302      	movs	r3, #2
 8008b56:	2200      	movs	r2, #0
 8008b58:	2180      	movs	r1, #128	; 0x80
 8008b5a:	48b5      	ldr	r0, [pc, #724]	; (8008e30 <Initialize+0x324>)
 8008b5c:	f7f8 fad0 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008b60:	2301      	movs	r3, #1
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2302      	movs	r3, #2
 8008b66:	2200      	movs	r2, #0
 8008b68:	2101      	movs	r1, #1
 8008b6a:	48b2      	ldr	r0, [pc, #712]	; (8008e34 <Initialize+0x328>)
 8008b6c:	f7f8 fac8 	bl	8001100 <GPIOPinsInit>

	//	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008b70:	2301      	movs	r3, #1
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2301      	movs	r3, #1
 8008b76:	2200      	movs	r2, #0
 8008b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008b7c:	48ad      	ldr	r0, [pc, #692]	; (8008e34 <Initialize+0x328>)
 8008b7e:	f7f8 fabf 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008b82:	2301      	movs	r3, #1
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2301      	movs	r3, #1
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008b8e:	48a9      	ldr	r0, [pc, #676]	; (8008e34 <Initialize+0x328>)
 8008b90:	f7f8 fab6 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008b94:	2301      	movs	r3, #1
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	2301      	movs	r3, #1
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008ba0:	48a4      	ldr	r0, [pc, #656]	; (8008e34 <Initialize+0x328>)
 8008ba2:	f7f8 faad 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	2301      	movs	r3, #1
 8008bac:	2200      	movs	r2, #0
 8008bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bb2:	48a0      	ldr	r0, [pc, #640]	; (8008e34 <Initialize+0x328>)
 8008bb4:	f7f8 faa4 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008bb8:	2301      	movs	r3, #1
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008bc4:	489a      	ldr	r0, [pc, #616]	; (8008e30 <Initialize+0x324>)
 8008bc6:	f7f8 fa9b 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008bca:	2301      	movs	r3, #1
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	2301      	movs	r3, #1
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008bd6:	4896      	ldr	r0, [pc, #600]	; (8008e30 <Initialize+0x324>)
 8008bd8:	f7f8 fa92 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008bdc:	2301      	movs	r3, #1
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	2301      	movs	r3, #1
 8008be2:	2200      	movs	r2, #0
 8008be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008be8:	4893      	ldr	r0, [pc, #588]	; (8008e38 <Initialize+0x32c>)
 8008bea:	f7f8 fa89 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bfa:	488f      	ldr	r0, [pc, #572]	; (8008e38 <Initialize+0x32c>)
 8008bfc:	f7f8 fa80 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c00:	2301      	movs	r3, #1
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	2301      	movs	r3, #1
 8008c06:	2200      	movs	r2, #0
 8008c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008c0c:	4887      	ldr	r0, [pc, #540]	; (8008e2c <Initialize+0x320>)
 8008c0e:	f7f8 fa77 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c12:	2301      	movs	r3, #1
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	2301      	movs	r3, #1
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c1e:	4887      	ldr	r0, [pc, #540]	; (8008e3c <Initialize+0x330>)
 8008c20:	f7f8 fa6e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c24:	2301      	movs	r3, #1
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2108      	movs	r1, #8
 8008c2e:	4882      	ldr	r0, [pc, #520]	; (8008e38 <Initialize+0x32c>)
 8008c30:	f7f8 fa66 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c34:	2301      	movs	r3, #1
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2301      	movs	r3, #1
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2110      	movs	r1, #16
 8008c3e:	487e      	ldr	r0, [pc, #504]	; (8008e38 <Initialize+0x32c>)
 8008c40:	f7f8 fa5e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c44:	2301      	movs	r3, #1
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2180      	movs	r1, #128	; 0x80
 8008c4e:	487a      	ldr	r0, [pc, #488]	; (8008e38 <Initialize+0x32c>)
 8008c50:	f7f8 fa56 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c54:	2301      	movs	r3, #1
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	2301      	movs	r3, #1
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2120      	movs	r1, #32
 8008c5e:	4874      	ldr	r0, [pc, #464]	; (8008e30 <Initialize+0x324>)
 8008c60:	f7f8 fa4e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c64:	2301      	movs	r3, #1
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2140      	movs	r1, #64	; 0x40
 8008c6e:	4870      	ldr	r0, [pc, #448]	; (8008e30 <Initialize+0x324>)
 8008c70:	f7f8 fa46 	bl	8001100 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c74:	2301      	movs	r3, #1
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	486b      	ldr	r0, [pc, #428]	; (8008e2c <Initialize+0x320>)
 8008c80:	f7f8 fa3e 	bl	8001100 <GPIOPinsInit>
	//	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c84:	2301      	movs	r3, #1
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2104      	movs	r1, #4
 8008c8e:	4867      	ldr	r0, [pc, #412]	; (8008e2c <Initialize+0x320>)
 8008c90:	f7f8 fa36 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008c94:	2301      	movs	r3, #1
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2108      	movs	r1, #8
 8008c9e:	4863      	ldr	r0, [pc, #396]	; (8008e2c <Initialize+0x320>)
 8008ca0:	f7f8 fa2e 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	2200      	movs	r2, #0
 8008cac:	2110      	movs	r1, #16
 8008cae:	485f      	ldr	r0, [pc, #380]	; (8008e2c <Initialize+0x320>)
 8008cb0:	f7f8 fa26 	bl	8001100 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	2301      	movs	r3, #1
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2120      	movs	r1, #32
 8008cbe:	485b      	ldr	r0, [pc, #364]	; (8008e2c <Initialize+0x320>)
 8008cc0:	f7f8 fa1e 	bl	8001100 <GPIOPinsInit>

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 8008cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	4b5a      	ldr	r3, [pc, #360]	; (8008e34 <Initialize+0x328>)
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	4b57      	ldr	r3, [pc, #348]	; (8008e34 <Initialize+0x328>)
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	2380      	movs	r3, #128	; 0x80
 8008cda:	4a56      	ldr	r2, [pc, #344]	; (8008e34 <Initialize+0x328>)
 8008cdc:	2101      	movs	r1, #1
 8008cde:	4858      	ldr	r0, [pc, #352]	; (8008e40 <Initialize+0x334>)
 8008ce0:	f7f8 fd7a 	bl	80017d8 <SHIFTREGInit>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ce4:	2003      	movs	r0, #3
 8008ce6:	f002 fbaa 	bl	800b43e <HAL_NVIC_SetPriorityGrouping>

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8008cea:	4b56      	ldr	r3, [pc, #344]	; (8008e44 <Initialize+0x338>)
 8008cec:	2208      	movs	r2, #8
 8008cee:	4956      	ldr	r1, [pc, #344]	; (8008e48 <Initialize+0x33c>)
 8008cf0:	4856      	ldr	r0, [pc, #344]	; (8008e4c <Initialize+0x340>)
 8008cf2:	f7fa fb0d 	bl	8003310 <I2CX_DMA_RX_Init>

	//Servo Driver
//	I2CxInit (&hi2c3,main_board_1, CLOCK_SPEED_100KHz,DISABLE);
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2104      	movs	r1, #4
 8008d08:	4851      	ldr	r0, [pc, #324]	; (8008e50 <Initialize+0x344>)
 8008d0a:	f7fa f915 	bl	8002f38 <CANxInit>

	UARTx_DMA_Rx_Init(&huart2, &hdma_usart2_rx, 115200);//Bluebee Tuning
 8008d0e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d12:	4950      	ldr	r1, [pc, #320]	; (8008e54 <Initialize+0x348>)
 8008d14:	4850      	ldr	r0, [pc, #320]	; (8008e58 <Initialize+0x34c>)
 8008d16:	f7fa f803 	bl	8002d20 <UARTx_DMA_Rx_Init>
	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
 8008d1a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d1e:	494f      	ldr	r1, [pc, #316]	; (8008e5c <Initialize+0x350>)
 8008d20:	484f      	ldr	r0, [pc, #316]	; (8008e60 <Initialize+0x354>)
 8008d22:	f7f9 fffd 	bl	8002d20 <UARTx_DMA_Rx_Init>

//	QEIInit(&htim1);
//	QEIInit(&htim4);
//	QEIInit(&htim8);

	PWMTimeBaseInit(&htim3, 2000, 35);
 8008d26:	2223      	movs	r2, #35	; 0x23
 8008d28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008d2c:	484d      	ldr	r0, [pc, #308]	; (8008e64 <Initialize+0x358>)
 8008d2e:	f7f8 fae1 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8008d32:	2301      	movs	r3, #1
 8008d34:	4a3e      	ldr	r2, [pc, #248]	; (8008e30 <Initialize+0x324>)
 8008d36:	2108      	movs	r1, #8
 8008d38:	484a      	ldr	r0, [pc, #296]	; (8008e64 <Initialize+0x358>)
 8008d3a:	f7f8 fbc1 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 8008d3e:	2302      	movs	r3, #2
 8008d40:	4a3b      	ldr	r2, [pc, #236]	; (8008e30 <Initialize+0x324>)
 8008d42:	210c      	movs	r1, #12
 8008d44:	4847      	ldr	r0, [pc, #284]	; (8008e64 <Initialize+0x358>)
 8008d46:	f7f8 fbbb 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 2000, 88);
 8008d4a:	2258      	movs	r2, #88	; 0x58
 8008d4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008d50:	4845      	ldr	r0, [pc, #276]	; (8008e68 <Initialize+0x35c>)
 8008d52:	f7f8 facf 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8008d56:	2301      	movs	r3, #1
 8008d58:	4a38      	ldr	r2, [pc, #224]	; (8008e3c <Initialize+0x330>)
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4842      	ldr	r0, [pc, #264]	; (8008e68 <Initialize+0x35c>)
 8008d5e:	f7f8 fbaf 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8008d62:	2302      	movs	r3, #2
 8008d64:	4a35      	ldr	r2, [pc, #212]	; (8008e3c <Initialize+0x330>)
 8008d66:	2104      	movs	r1, #4
 8008d68:	483f      	ldr	r0, [pc, #252]	; (8008e68 <Initialize+0x35c>)
 8008d6a:	f7f8 fba9 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8008d6e:	2304      	movs	r3, #4
 8008d70:	4a32      	ldr	r2, [pc, #200]	; (8008e3c <Initialize+0x330>)
 8008d72:	2108      	movs	r1, #8
 8008d74:	483c      	ldr	r0, [pc, #240]	; (8008e68 <Initialize+0x35c>)
 8008d76:	f7f8 fba3 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	4a2f      	ldr	r2, [pc, #188]	; (8008e3c <Initialize+0x330>)
 8008d7e:	210c      	movs	r1, #12
 8008d80:	4839      	ldr	r0, [pc, #228]	; (8008e68 <Initialize+0x35c>)
 8008d82:	f7f8 fb9d 	bl	80014c0 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 2000, 4);
 8008d86:	2204      	movs	r2, #4
 8008d88:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008d8c:	4837      	ldr	r0, [pc, #220]	; (8008e6c <Initialize+0x360>)
 8008d8e:	f7f8 fab1 	bl	80012f4 <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8008d92:	2320      	movs	r3, #32
 8008d94:	4a27      	ldr	r2, [pc, #156]	; (8008e34 <Initialize+0x328>)
 8008d96:	2100      	movs	r1, #0
 8008d98:	4834      	ldr	r0, [pc, #208]	; (8008e6c <Initialize+0x360>)
 8008d9a:	f7f8 fb91 	bl	80014c0 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	4a24      	ldr	r2, [pc, #144]	; (8008e34 <Initialize+0x328>)
 8008da2:	2104      	movs	r1, #4
 8008da4:	4831      	ldr	r0, [pc, #196]	; (8008e6c <Initialize+0x360>)
 8008da6:	f7f8 fb8b 	bl	80014c0 <PWMChannelConfig>


	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8008daa:	2380      	movs	r3, #128	; 0x80
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	2340      	movs	r3, #64	; 0x40
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	4b2f      	ldr	r3, [pc, #188]	; (8008e70 <Initialize+0x364>)
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2300      	movs	r3, #0
 8008db8:	220c      	movs	r2, #12
 8008dba:	492a      	ldr	r1, [pc, #168]	; (8008e64 <Initialize+0x358>)
 8008dbc:	482d      	ldr	r0, [pc, #180]	; (8008e74 <Initialize+0x368>)
 8008dbe:	f7f8 f915 	bl	8000fec <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	9302      	str	r3, [sp, #8]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	4b29      	ldr	r3, [pc, #164]	; (8008e70 <Initialize+0x364>)
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	4924      	ldr	r1, [pc, #144]	; (8008e64 <Initialize+0x358>)
 8008dd4:	4828      	ldr	r0, [pc, #160]	; (8008e78 <Initialize+0x36c>)
 8008dd6:	f7f8 f909 	bl	8000fec <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8008dda:	2308      	movs	r3, #8
 8008ddc:	9302      	str	r3, [sp, #8]
 8008dde:	2304      	movs	r3, #4
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <Initialize+0x364>)
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	2200      	movs	r2, #0
 8008dea:	4920      	ldr	r1, [pc, #128]	; (8008e6c <Initialize+0x360>)
 8008dec:	4823      	ldr	r0, [pc, #140]	; (8008e7c <Initialize+0x370>)
 8008dee:	f7f8 f8fd 	bl	8000fec <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 8008df2:	2302      	movs	r3, #2
 8008df4:	9302      	str	r3, [sp, #8]
 8008df6:	2301      	movs	r3, #1
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <Initialize+0x364>)
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2204      	movs	r2, #4
 8008e02:	491a      	ldr	r1, [pc, #104]	; (8008e6c <Initialize+0x360>)
 8008e04:	481e      	ldr	r0, [pc, #120]	; (8008e80 <Initialize+0x374>)
 8008e06:	f7f8 f8f1 	bl	8000fec <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 8008e0a:	2380      	movs	r3, #128	; 0x80
 8008e0c:	9302      	str	r3, [sp, #8]
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <Initialize+0x378>)
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	2300      	movs	r3, #0
 8008e18:	220c      	movs	r2, #12
 8008e1a:	4913      	ldr	r1, [pc, #76]	; (8008e68 <Initialize+0x35c>)
 8008e1c:	481a      	ldr	r0, [pc, #104]	; (8008e88 <Initialize+0x37c>)
 8008e1e:	f7f8 f8e5 	bl	8000fec <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8008e22:	2320      	movs	r3, #32
 8008e24:	9302      	str	r3, [sp, #8]
 8008e26:	2310      	movs	r3, #16
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	e02f      	b.n	8008e8c <Initialize+0x380>
 8008e2c:	40020800 	.word	0x40020800
 8008e30:	40020400 	.word	0x40020400
 8008e34:	40021000 	.word	0x40021000
 8008e38:	40020c00 	.word	0x40020c00
 8008e3c:	40020000 	.word	0x40020000
 8008e40:	20007d2c 	.word	0x20007d2c
 8008e44:	00061a80 	.word	0x00061a80
 8008e48:	200084dc 	.word	0x200084dc
 8008e4c:	20007328 	.word	0x20007328
 8008e50:	20006d74 	.word	0x20006d74
 8008e54:	200062f8 	.word	0x200062f8
 8008e58:	200068f0 	.word	0x200068f0
 8008e5c:	20006298 	.word	0x20006298
 8008e60:	20006870 	.word	0x20006870
 8008e64:	20006560 	.word	0x20006560
 8008e68:	20006520 	.word	0x20006520
 8008e6c:	200067ec 	.word	0x200067ec
 8008e70:	20007d48 	.word	0x20007d48
 8008e74:	20008788 	.word	0x20008788
 8008e78:	200076b8 	.word	0x200076b8
 8008e7c:	200073d0 	.word	0x200073d0
 8008e80:	20007df4 	.word	0x20007df4
 8008e84:	20007d44 	.word	0x20007d44
 8008e88:	20008664 	.word	0x20008664
 8008e8c:	4b1e      	ldr	r3, [pc, #120]	; (8008f08 <Initialize+0x3fc>)
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	2300      	movs	r3, #0
 8008e92:	2208      	movs	r2, #8
 8008e94:	491d      	ldr	r1, [pc, #116]	; (8008f0c <Initialize+0x400>)
 8008e96:	481e      	ldr	r0, [pc, #120]	; (8008f10 <Initialize+0x404>)
 8008e98:	f7f8 f8a8 	bl	8000fec <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 8008e9c:	2308      	movs	r3, #8
 8008e9e:	9302      	str	r3, [sp, #8]
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	4b18      	ldr	r3, [pc, #96]	; (8008f08 <Initialize+0x3fc>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	2204      	movs	r2, #4
 8008eac:	4917      	ldr	r1, [pc, #92]	; (8008f0c <Initialize+0x400>)
 8008eae:	4819      	ldr	r0, [pc, #100]	; (8008f14 <Initialize+0x408>)
 8008eb0:	f7f8 f89c 	bl	8000fec <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	9302      	str	r3, [sp, #8]
 8008eb8:	2301      	movs	r3, #1
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <Initialize+0x3fc>)
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4911      	ldr	r1, [pc, #68]	; (8008f0c <Initialize+0x400>)
 8008ec6:	4814      	ldr	r0, [pc, #80]	; (8008f18 <Initialize+0x40c>)
 8008ec8:	f7f8 f890 	bl	8000fec <BDCInit>

//	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
//	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);

	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);
 8008ecc:	4913      	ldr	r1, [pc, #76]	; (8008f1c <Initialize+0x410>)
 8008ece:	206f      	movs	r0, #111	; 0x6f
 8008ed0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8008f20 <Initialize+0x414>
 8008ed4:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8008ed8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8008f24 <Initialize+0x418>
 8008edc:	f7ff fda8 	bl	8008a30 <VESCInit>

	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);
 8008ee0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	2310      	movs	r3, #16
 8008ee8:	4a0f      	ldr	r2, [pc, #60]	; (8008f28 <Initialize+0x41c>)
 8008eea:	4910      	ldr	r1, [pc, #64]	; (8008f2c <Initialize+0x420>)
 8008eec:	4810      	ldr	r0, [pc, #64]	; (8008f30 <Initialize+0x424>)
 8008eee:	f7fd fbf3 	bl	80066d8 <SPIx_DMA_TX_Init>
	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	2201      	movs	r2, #1
 8008efa:	2140      	movs	r1, #64	; 0x40
 8008efc:	480a      	ldr	r0, [pc, #40]	; (8008f28 <Initialize+0x41c>)
 8008efe:	f7f8 f8ff 	bl	8001100 <GPIOPinsInit>
}
 8008f02:	bf00      	nop
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20007d44 	.word	0x20007d44
 8008f0c:	20006520 	.word	0x20006520
 8008f10:	20007e6c 	.word	0x20007e6c
 8008f14:	20007e90 	.word	0x20007e90
 8008f18:	20007464 	.word	0x20007464
 8008f1c:	200072b4 	.word	0x200072b4
 8008f20:	3b727bb3 	.word	0x3b727bb3
 8008f24:	46f96000 	.word	0x46f96000
 8008f28:	40020000 	.word	0x40020000
 8008f2c:	200085f4 	.word	0x200085f4
 8008f30:	20008224 	.word	0x20008224

08008f34 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
	//	led2 = !led2;
	HAL_CAN_IRQHandler(&hcan1);
 8008f38:	4802      	ldr	r0, [pc, #8]	; (8008f44 <CAN1_RX0_IRQHandler+0x10>)
 8008f3a:	f001 ff6b 	bl	800ae14 <HAL_CAN_IRQHandler>

}
 8008f3e:	bf00      	nop
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20006d74 	.word	0x20006d74

08008f48 <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 8008f4c:	4802      	ldr	r0, [pc, #8]	; (8008f58 <CAN2_RX1_IRQHandler+0x10>)
 8008f4e:	f001 ff61 	bl	800ae14 <HAL_CAN_IRQHandler>

}
 8008f52:	bf00      	nop
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20006d4c 	.word	0x20006d4c

08008f5c <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 8008f66:	79fb      	ldrb	r3, [r7, #7]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d004      	beq.n	8008f76 <CAN_PROCESS+0x1a>
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d12f      	bne.n	8008fd0 <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 8008f70:	f7ff fc08 	bl	8008784 <decode_VESC>
		break;
 8008f74:	e02c      	b.n	8008fd0 <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 8008f76:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d107      	bne.n	8008f8e <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 8008f7e:	4b16      	ldr	r3, [pc, #88]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008f80:	785a      	ldrb	r2, [r3, #1]
 8008f82:	4b16      	ldr	r3, [pc, #88]	; (8008fdc <CAN_PROCESS+0x80>)
 8008f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 8008f88:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 8008f8e:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b11      	cmp	r3, #17
 8008f94:	d11b      	bne.n	8008fce <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <CAN_PROCESS+0x84>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d117      	bne.n	8008fce <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 8008f9e:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008fa0:	785a      	ldrb	r2, [r3, #1]
 8008fa2:	4b0e      	ldr	r3, [pc, #56]	; (8008fdc <CAN_PROCESS+0x80>)
 8008fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8008fa8:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <CAN_PROCESS+0x88>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a0b      	ldr	r2, [pc, #44]	; (8008fdc <CAN_PROCESS+0x80>)
 8008fae:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 8008fb0:	4b0c      	ldr	r3, [pc, #48]	; (8008fe4 <CAN_PROCESS+0x88>)
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a09      	ldr	r2, [pc, #36]	; (8008fdc <CAN_PROCESS+0x80>)
 8008fb6:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8008fb8:	4b0b      	ldr	r3, [pc, #44]	; (8008fe8 <CAN_PROCESS+0x8c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <CAN_PROCESS+0x80>)
 8008fbe:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 8008fc0:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <CAN_PROCESS+0x8c>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a05      	ldr	r2, [pc, #20]	; (8008fdc <CAN_PROCESS+0x80>)
 8008fc6:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 8008fc8:	4b03      	ldr	r3, [pc, #12]	; (8008fd8 <CAN_PROCESS+0x7c>)
 8008fca:	2203      	movs	r2, #3
 8008fcc:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8008fce:	bf00      	nop

	}

}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	2000723c 	.word	0x2000723c
 8008fdc:	200079e0 	.word	0x200079e0
 8008fe0:	20001964 	.word	0x20001964
 8008fe4:	20008218 	.word	0x20008218
 8008fe8:	20008368 	.word	0x20008368

08008fec <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8008fec:	b5b0      	push	{r4, r5, r7, lr}
 8008fee:	b094      	sub	sp, #80	; 0x50
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
	//	led2 = !led2;
	uint8_t aData[8];
	PACKET_t source;
	if(hcan == &hcan1){
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4ab8      	ldr	r2, [pc, #736]	; (80092d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	f040 81af 	bne.w	800935c <HAL_CAN_RxFifo0MsgPendingCallback+0x370>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 8008ffe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009002:	4ab6      	ldr	r2, [pc, #728]	; (80092dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8009004:	2100      	movs	r1, #0
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 fdcc 	bl	800aba4 <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_STD)
 800900c:	4bb3      	ldr	r3, [pc, #716]	; (80092dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 819b 	bne.w	800934c <HAL_CAN_RxFifo0MsgPendingCallback+0x360>
		{
			switch(CAN1RxMessage.StdId){
 8009016:	4bb1      	ldr	r3, [pc, #708]	; (80092dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f240 724f 	movw	r2, #1871	; 0x74f
 800901e:	4293      	cmp	r3, r2
 8009020:	d028      	beq.n	8009074 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
 8009022:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 8009026:	f080 8194 	bcs.w	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800902a:	f240 52cf 	movw	r2, #1487	; 0x5cf
 800902e:	4293      	cmp	r3, r2
 8009030:	d025      	beq.n	800907e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
 8009032:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8009036:	f080 818c 	bcs.w	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800903a:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800903e:	4293      	cmp	r3, r2
 8009040:	f000 816c 	beq.w	800931c <HAL_CAN_RxFifo0MsgPendingCallback+0x330>
 8009044:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
 8009048:	f080 8183 	bcs.w	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800904c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009050:	4293      	cmp	r3, r2
 8009052:	f000 8129 	beq.w	80092a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>
 8009056:	f5b3 7f74 	cmp.w	r3, #976	; 0x3d0
 800905a:	f080 817a 	bcs.w	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 800905e:	f240 12cf 	movw	r2, #463	; 0x1cf
 8009062:	4293      	cmp	r3, r2
 8009064:	f000 80f8 	beq.w	8009258 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>
 8009068:	f240 22cf 	movw	r2, #719	; 0x2cf
 800906c:	4293      	cmp	r3, r2
 800906e:	f000 8104 	beq.w	800927a <HAL_CAN_RxFifo0MsgPendingCallback+0x28e>
 8009072:	e16e      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			case 1871:
				ILI9341_PrintLine("FaulHaber Node 79 Boot Up", &ILI9341row);
 8009074:	499a      	ldr	r1, [pc, #616]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009076:	489b      	ldr	r0, [pc, #620]	; (80092e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f8>)
 8009078:	f7fa feb0 	bl	8003ddc <ILI9341_PrintLine>
				break;
 800907c:	e169      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			case 1487:{
				Faul_t.can = 1;
 800907e:	4a9a      	ldr	r2, [pc, #616]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009080:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				//SDO Tx
				Faul_t.ODindex = *((uint16_t *)&aData[1]);
 800908c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009090:	3301      	adds	r3, #1
 8009092:	881a      	ldrh	r2, [r3, #0]
 8009094:	4b94      	ldr	r3, [pc, #592]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009096:	81da      	strh	r2, [r3, #14]
				Faul_t.ODsubindex = aData[3];
 8009098:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800909c:	4b92      	ldr	r3, [pc, #584]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800909e:	741a      	strb	r2, [r3, #16]

				if(aData[0] == 0x60){
 80090a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80090a4:	2b60      	cmp	r3, #96	; 0x60
 80090a6:	d117      	bne.n	80090d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
					//Faulhaber Response on Successful write to OD
					char temp[50];
					sprintf(temp, "%lu: SDO(tx)-WR 0x%x%x.%x", CAN1RxMessage.FilterMatchIndex, aData[2], aData[1], aData[3]);
 80090a8:	4b8c      	ldr	r3, [pc, #560]	; (80092dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80090aa:	699a      	ldr	r2, [r3, #24]
 80090ac:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80090b0:	461c      	mov	r4, r3
 80090b2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090b6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80090ba:	f107 0008 	add.w	r0, r7, #8
 80090be:	9101      	str	r1, [sp, #4]
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	4623      	mov	r3, r4
 80090c4:	4989      	ldr	r1, [pc, #548]	; (80092ec <HAL_CAN_RxFifo0MsgPendingCallback+0x300>)
 80090c6:	f00c ffd9 	bl	801607c <siprintf>
					ILI9341_PrintLine(temp, &ILI9341row);
 80090ca:	f107 0308 	add.w	r3, r7, #8
 80090ce:	4984      	ldr	r1, [pc, #528]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fa fe83 	bl	8003ddc <ILI9341_PrintLine>
					}


				}
			}
			break;
 80090d6:	e13b      	b.n	8009350 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
					sprintf(temp, "%lu: SDO(tx)-RR 0x%x%x.%x", CAN1RxMessage.FilterMatchIndex, aData[2], aData[1], aData[3]);
 80090d8:	4b80      	ldr	r3, [pc, #512]	; (80092dc <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 80090da:	699a      	ldr	r2, [r3, #24]
 80090dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80090e0:	461c      	mov	r4, r3
 80090e2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090e6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80090ea:	f107 0008 	add.w	r0, r7, #8
 80090ee:	9101      	str	r1, [sp, #4]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	4623      	mov	r3, r4
 80090f4:	497e      	ldr	r1, [pc, #504]	; (80092f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>)
 80090f6:	f00c ffc1 	bl	801607c <siprintf>
					ILI9341_PrintLine(temp, &ILI9341row);
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	4978      	ldr	r1, [pc, #480]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009100:	4618      	mov	r0, r3
 8009102:	f7fa fe6b 	bl	8003ddc <ILI9341_PrintLine>
					if(aData[0] == 0x4F){
 8009106:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800910a:	2b4f      	cmp	r3, #79	; 0x4f
 800910c:	d107      	bne.n	800911e <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
						Faul_t.num_valid = 1;
 800910e:	4b76      	ldr	r3, [pc, #472]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009110:	2201      	movs	r2, #1
 8009112:	745a      	strb	r2, [r3, #17]
						Faul_t.buffer[0] = aData[4];
 8009114:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8009118:	4b73      	ldr	r3, [pc, #460]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800911a:	749a      	strb	r2, [r3, #18]
 800911c:	e026      	b.n	800916c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x4B){
 800911e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009122:	2b4b      	cmp	r3, #75	; 0x4b
 8009124:	d107      	bne.n	8009136 <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
						Faul_t.num_valid = 2;
 8009126:	4b70      	ldr	r3, [pc, #448]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009128:	2202      	movs	r2, #2
 800912a:	745a      	strb	r2, [r3, #17]
 800912c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
						memcpy(Faul_t.buffer, &aData[4], 2);
 8009130:	4b6d      	ldr	r3, [pc, #436]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009132:	825a      	strh	r2, [r3, #18]
 8009134:	e01a      	b.n	800916c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x47){
 8009136:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800913a:	2b47      	cmp	r3, #71	; 0x47
 800913c:	d10b      	bne.n	8009156 <HAL_CAN_RxFifo0MsgPendingCallback+0x16a>
						Faul_t.num_valid = 3;
 800913e:	4b6a      	ldr	r3, [pc, #424]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009140:	2203      	movs	r2, #3
 8009142:	745a      	strb	r2, [r3, #17]
						memcpy(Faul_t.buffer, &aData[4], 3);
 8009144:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009148:	3304      	adds	r3, #4
 800914a:	2203      	movs	r2, #3
 800914c:	4619      	mov	r1, r3
 800914e:	4869      	ldr	r0, [pc, #420]	; (80092f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8009150:	f00c f866 	bl	8015220 <memcpy>
 8009154:	e00a      	b.n	800916c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
					}else if(aData[0] == 0x43){
 8009156:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800915a:	2b43      	cmp	r3, #67	; 0x43
 800915c:	d106      	bne.n	800916c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
						Faul_t.num_valid = 4;
 800915e:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009160:	2204      	movs	r2, #4
 8009162:	745a      	strb	r2, [r3, #17]
 8009164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
						memcpy(Faul_t.buffer, &aData[4], 4);
 8009166:	4a60      	ldr	r2, [pc, #384]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009168:	f8c2 3012 	str.w	r3, [r2, #18]
					switch(Faul_t.ODindex){
 800916c:	4b5e      	ldr	r3, [pc, #376]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800916e:	89db      	ldrh	r3, [r3, #14]
 8009170:	f246 027c 	movw	r2, #24700	; 0x607c
 8009174:	4293      	cmp	r3, r2
 8009176:	d029      	beq.n	80091cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>
 8009178:	f246 027c 	movw	r2, #24700	; 0x607c
 800917c:	4293      	cmp	r3, r2
 800917e:	f300 80e7 	bgt.w	8009350 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
 8009182:	f246 0264 	movw	r2, #24676	; 0x6064
 8009186:	4293      	cmp	r3, r2
 8009188:	d00d      	beq.n	80091a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ba>
 800918a:	f246 0264 	movw	r2, #24676	; 0x6064
 800918e:	4293      	cmp	r3, r2
 8009190:	f300 80de 	bgt.w	8009350 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
 8009194:	f242 3244 	movw	r2, #9028	; 0x2344
 8009198:	4293      	cmp	r3, r2
 800919a:	d02a      	beq.n	80091f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x206>
 800919c:	f246 0260 	movw	r2, #24672	; 0x6060
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d041      	beq.n	8009228 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>
			break;
 80091a4:	e0d4      	b.n	8009350 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>
						Faul_t.pos_act = *((int *)&Faul_t.buffer);
 80091a6:	4b53      	ldr	r3, [pc, #332]	; (80092f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a4f      	ldr	r2, [pc, #316]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80091ac:	6053      	str	r3, [r2, #4]
						sprintf(temp, "%s = %d", varName(Faul_t.pos_act), Faul_t.pos_act);
 80091ae:	4b4e      	ldr	r3, [pc, #312]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	f107 0008 	add.w	r0, r7, #8
 80091b6:	4a50      	ldr	r2, [pc, #320]	; (80092f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>)
 80091b8:	4950      	ldr	r1, [pc, #320]	; (80092fc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80091ba:	f00c ff5f 	bl	801607c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 80091be:	f107 0308 	add.w	r3, r7, #8
 80091c2:	4947      	ldr	r1, [pc, #284]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fa fe09 	bl	8003ddc <ILI9341_PrintLine>
						break;
 80091ca:	e044      	b.n	8009256 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						Faul_t.HomeOffset = *((int *)Faul_t.buffer);
 80091cc:	4b49      	ldr	r3, [pc, #292]	; (80092f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a45      	ldr	r2, [pc, #276]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80091d2:	6193      	str	r3, [r2, #24]
						sprintf(temp, "%s = %d", varName(Faul_t.HomeOffset), Faul_t.HomeOffset);
 80091d4:	4b44      	ldr	r3, [pc, #272]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	f107 0008 	add.w	r0, r7, #8
 80091dc:	4a48      	ldr	r2, [pc, #288]	; (8009300 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>)
 80091de:	4947      	ldr	r1, [pc, #284]	; (80092fc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 80091e0:	f00c ff4c 	bl	801607c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	493d      	ldr	r1, [pc, #244]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fa fdf6 	bl	8003ddc <ILI9341_PrintLine>
						break;
 80091f0:	e031      	b.n	8009256 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						switch(Faul_t.ODsubindex){
 80091f2:	4b3d      	ldr	r3, [pc, #244]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80091f4:	7c1b      	ldrb	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d014      	beq.n	8009224 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d12a      	bne.n	8009254 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
							Faul_t.velKp = *((uint32_t *)Faul_t.buffer);
 80091fe:	4b3d      	ldr	r3, [pc, #244]	; (80092f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a39      	ldr	r2, [pc, #228]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009204:	61d3      	str	r3, [r2, #28]
							sprintf(temp, "%s = %lu", varName(Faul_t.velKp), Faul_t.velKp);
 8009206:	4b38      	ldr	r3, [pc, #224]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f107 0008 	add.w	r0, r7, #8
 800920e:	4a3d      	ldr	r2, [pc, #244]	; (8009304 <HAL_CAN_RxFifo0MsgPendingCallback+0x318>)
 8009210:	493d      	ldr	r1, [pc, #244]	; (8009308 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>)
 8009212:	f00c ff33 	bl	801607c <siprintf>
							ILI9341_PrintLine(temp, &ILI9341row);
 8009216:	f107 0308 	add.w	r3, r7, #8
 800921a:	4931      	ldr	r1, [pc, #196]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800921c:	4618      	mov	r0, r3
 800921e:	f7fa fddd 	bl	8003ddc <ILI9341_PrintLine>
						break;
 8009222:	e017      	b.n	8009254 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
							break;
 8009224:	bf00      	nop
						break;
 8009226:	e015      	b.n	8009254 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>
						Faul_t.modeOperation = *((int8_t *)Faul_t.buffer);
 8009228:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x308>)
 800922a:	f993 2000 	ldrsb.w	r2, [r3]
 800922e:	4b2e      	ldr	r3, [pc, #184]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009230:	f883 2020 	strb.w	r2, [r3, #32]
						sprintf(temp, "%s = %d", varName(Faul_t.modeOperation), Faul_t.modeOperation);
 8009234:	4b2c      	ldr	r3, [pc, #176]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009236:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800923a:	f107 0008 	add.w	r0, r7, #8
 800923e:	4a33      	ldr	r2, [pc, #204]	; (800930c <HAL_CAN_RxFifo0MsgPendingCallback+0x320>)
 8009240:	492e      	ldr	r1, [pc, #184]	; (80092fc <HAL_CAN_RxFifo0MsgPendingCallback+0x310>)
 8009242:	f00c ff1b 	bl	801607c <siprintf>
						ILI9341_PrintLine(temp, &ILI9341row);
 8009246:	f107 0308 	add.w	r3, r7, #8
 800924a:	4925      	ldr	r1, [pc, #148]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 800924c:	4618      	mov	r0, r3
 800924e:	f7fa fdc5 	bl	8003ddc <ILI9341_PrintLine>
						break;
 8009252:	e000      	b.n	8009256 <HAL_CAN_RxFifo0MsgPendingCallback+0x26a>
						break;
 8009254:	bf00      	nop
			break;
 8009256:	e07b      	b.n	8009350 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>

			case 463:{
				//TxPDO1
				Faul_t.can = 1;
 8009258:	4a23      	ldr	r2, [pc, #140]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800925a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 8009266:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800926e:	801a      	strh	r2, [r3, #0]
				ILI9341_PrintLine("TxPDO1", &ILI9341row);
 8009270:	491b      	ldr	r1, [pc, #108]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 8009272:	4827      	ldr	r0, [pc, #156]	; (8009310 <HAL_CAN_RxFifo0MsgPendingCallback+0x324>)
 8009274:	f7fa fdb2 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 8009278:	e06b      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>

			case 719:{
				//TxPDO2
				Faul_t.can = 1;
 800927a:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800927c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 8009288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800928c:	881a      	ldrh	r2, [r3, #0]
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 8009290:	801a      	strh	r2, [r3, #0]
				Faul_t.pos_act = *((int *)&aData[2]);
 8009292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009296:	3302      	adds	r3, #2
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a13      	ldr	r2, [pc, #76]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 800929c:	6053      	str	r3, [r2, #4]
				ILI9341_PrintLine("TxPDO2", &ILI9341row);
 800929e:	4910      	ldr	r1, [pc, #64]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80092a0:	481c      	ldr	r0, [pc, #112]	; (8009314 <HAL_CAN_RxFifo0MsgPendingCallback+0x328>)
 80092a2:	f7fa fd9b 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 80092a6:	e054      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>

			case 975:{
				//TxPDO3
				Faul_t.can = 1;
 80092a8:	4a0f      	ldr	r2, [pc, #60]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092aa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 80092b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80092ba:	881a      	ldrh	r2, [r3, #0]
 80092bc:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092be:	801a      	strh	r2, [r3, #0]
				Faul_t.vel_act = *((int *)&aData[2]);
 80092c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80092c4:	3302      	adds	r3, #2
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a07      	ldr	r2, [pc, #28]	; (80092e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>)
 80092ca:	6093      	str	r3, [r2, #8]
				ILI9341_PrintLine("TxPDO3", &ILI9341row);
 80092cc:	4904      	ldr	r1, [pc, #16]	; (80092e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>)
 80092ce:	4812      	ldr	r0, [pc, #72]	; (8009318 <HAL_CAN_RxFifo0MsgPendingCallback+0x32c>)
 80092d0:	f7fa fd84 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 80092d4:	e03d      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
 80092d6:	bf00      	nop
 80092d8:	20006d74 	.word	0x20006d74
 80092dc:	20006d9c 	.word	0x20006d9c
 80092e0:	2000702c 	.word	0x2000702c
 80092e4:	08019c7c 	.word	0x08019c7c
 80092e8:	2000827c 	.word	0x2000827c
 80092ec:	08019c98 	.word	0x08019c98
 80092f0:	08019cb4 	.word	0x08019cb4
 80092f4:	2000828e 	.word	0x2000828e
 80092f8:	08019cd0 	.word	0x08019cd0
 80092fc:	08019ce0 	.word	0x08019ce0
 8009300:	08019ce8 	.word	0x08019ce8
 8009304:	08019cfc 	.word	0x08019cfc
 8009308:	08019d0c 	.word	0x08019d0c
 800930c:	08019d18 	.word	0x08019d18
 8009310:	08019d30 	.word	0x08019d30
 8009314:	08019d38 	.word	0x08019d38
 8009318:	08019d40 	.word	0x08019d40

			case 1231:{
				//TxPDO4
				Faul_t.can = 1;
 800931c:	4a48      	ldr	r2, [pc, #288]	; (8009440 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 800931e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
				Faul_t.statusword = *((uint16_t *)aData);
 800932a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800932e:	881a      	ldrh	r2, [r3, #0]
 8009330:	4b43      	ldr	r3, [pc, #268]	; (8009440 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8009332:	801a      	strh	r2, [r3, #0]
				Faul_t.tor_act = *((int *)&aData[2]);
 8009334:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009338:	3302      	adds	r3, #2
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	b21a      	sxth	r2, r3
 800933e:	4b40      	ldr	r3, [pc, #256]	; (8009440 <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8009340:	819a      	strh	r2, [r3, #12]
				ILI9341_PrintLine("TxPDO4", &ILI9341row);
 8009342:	4940      	ldr	r1, [pc, #256]	; (8009444 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8009344:	4840      	ldr	r0, [pc, #256]	; (8009448 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8009346:	f7fa fd49 	bl	8003ddc <ILI9341_PrintLine>
			}
			break;
 800934a:	e002      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			}
		}
 800934c:	bf00      	nop
 800934e:	e000      	b.n	8009352 <HAL_CAN_RxFifo0MsgPendingCallback+0x366>
			break;
 8009350:	bf00      	nop
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009352:	2102      	movs	r1, #2
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fd37 	bl	800adc8 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 800935a:	e06c      	b.n	8009436 <HAL_CAN_RxFifo0MsgPendingCallback+0x44a>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 800935c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009360:	4a3a      	ldr	r2, [pc, #232]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 fc1d 	bl	800aba4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800936a:	4b38      	ldr	r3, [pc, #224]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b04      	cmp	r3, #4
 8009370:	d118      	bne.n	80093a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x3b8>
			vescmsg.Rxmsg = CAN2RxMessage;
 8009372:	4a37      	ldr	r2, [pc, #220]	; (8009450 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009374:	4b35      	ldr	r3, [pc, #212]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8009376:	4614      	mov	r4, r2
 8009378:	461d      	mov	r5, r3
 800937a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800937c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800937e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009386:	4b32      	ldr	r3, [pc, #200]	; (8009450 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009388:	331c      	adds	r3, #28
 800938a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800938e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009392:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009396:	482e      	ldr	r0, [pc, #184]	; (8009450 <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8009398:	f7ff fb14 	bl	80089c4 <set_rx_frames>
			source = VESC_PACKET;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093a2:	e03f      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
			source = RNS_PACKET;
 80093a4:	2300      	movs	r3, #0
 80093a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			switch(CAN1RxMessage.StdId){
 80093aa:	4b2a      	ldr	r3, [pc, #168]	; (8009454 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3b14      	subs	r3, #20
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	d836      	bhi.n	8009422 <HAL_CAN_RxFifo0MsgPendingCallback+0x436>
 80093b4:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>)
 80093b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	080093e1 	.word	0x080093e1
 80093c0:	080093f9 	.word	0x080093f9
 80093c4:	0800940b 	.word	0x0800940b
 80093c8:	08009423 	.word	0x08009423
 80093cc:	08009423 	.word	0x08009423
 80093d0:	08009423 	.word	0x08009423
 80093d4:	08009423 	.word	0x08009423
 80093d8:	08009423 	.word	0x08009423
 80093dc:	08009423 	.word	0x08009423
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 80093e0:	4b1a      	ldr	r3, [pc, #104]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80093e8:	4619      	mov	r1, r3
 80093ea:	481b      	ldr	r0, [pc, #108]	; (8009458 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 80093ec:	f00b ff18 	bl	8015220 <memcpy>
				buf2_flag = 0;
 80093f0:	4b1a      	ldr	r3, [pc, #104]	; (800945c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
				break;
 80093f6:	e015      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009400:	4619      	mov	r1, r3
 8009402:	4817      	ldr	r0, [pc, #92]	; (8009460 <HAL_CAN_RxFifo0MsgPendingCallback+0x474>)
 8009404:	f00b ff0c 	bl	8015220 <memcpy>
				break;
 8009408:	e00c      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800940a:	4b10      	ldr	r3, [pc, #64]	; (800944c <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 800940c:	691a      	ldr	r2, [r3, #16]
 800940e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009412:	4619      	mov	r1, r3
 8009414:	4813      	ldr	r0, [pc, #76]	; (8009464 <HAL_CAN_RxFifo0MsgPendingCallback+0x478>)
 8009416:	f00b ff03 	bl	8015220 <memcpy>
				buf2_flag = 1;
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
				break;
 8009420:	e000      	b.n	8009424 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>
				break;
 8009422:	bf00      	nop
		CAN_PROCESS(source);
 8009424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fd97 	bl	8008f5c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800942e:	2110      	movs	r1, #16
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fcc9 	bl	800adc8 <HAL_CAN_ActivateNotification>
}
 8009436:	bf00      	nop
 8009438:	3748      	adds	r7, #72	; 0x48
 800943a:	46bd      	mov	sp, r7
 800943c:	bdb0      	pop	{r4, r5, r7, pc}
 800943e:	bf00      	nop
 8009440:	2000827c 	.word	0x2000827c
 8009444:	2000702c 	.word	0x2000702c
 8009448:	08019d48 	.word	0x08019d48
 800944c:	20006d08 	.word	0x20006d08
 8009450:	20007e44 	.word	0x20007e44
 8009454:	20006d9c 	.word	0x20006d9c
 8009458:	2000723c 	.word	0x2000723c
 800945c:	20001964 	.word	0x20001964
 8009460:	20008218 	.word	0x20008218
 8009464:	20008368 	.word	0x20008368

08009468 <HAL_CAN_RxFifo1MsgPendingCallback>:
//	}
//}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8009468:	b5b0      	push	{r4, r5, r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a6d      	ldr	r2, [pc, #436]	; (8009628 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d16a      	bne.n	800954e <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 8009478:	f107 030c 	add.w	r3, r7, #12
 800947c:	4a6b      	ldr	r2, [pc, #428]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800947e:	2101      	movs	r1, #1
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f001 fb8f 	bl	800aba4 <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 8009486:	4b69      	ldr	r3, [pc, #420]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b04      	cmp	r3, #4
 800948c:	d117      	bne.n	80094be <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 800948e:	4a68      	ldr	r2, [pc, #416]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009490:	4b66      	ldr	r3, [pc, #408]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009492:	4614      	mov	r4, r2
 8009494:	461d      	mov	r5, r3
 8009496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800949a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800949e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80094a2:	4b63      	ldr	r3, [pc, #396]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80094a4:	331c      	adds	r3, #28
 80094a6:	f107 020c 	add.w	r2, r7, #12
 80094aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80094ae:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80094b2:	485f      	ldr	r0, [pc, #380]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80094b4:	f7ff fa86 	bl	80089c4 <set_rx_frames>
			source = VESC_PACKET;
 80094b8:	2301      	movs	r3, #1
 80094ba:	75fb      	strb	r3, [r7, #23]
 80094bc:	e03e      	b.n	800953c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 80094c2:	4b5c      	ldr	r3, [pc, #368]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b14      	subs	r3, #20
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d836      	bhi.n	800953a <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 80094cc:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80094ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d2:	bf00      	nop
 80094d4:	080094f9 	.word	0x080094f9
 80094d8:	08009511 	.word	0x08009511
 80094dc:	08009523 	.word	0x08009523
 80094e0:	0800953b 	.word	0x0800953b
 80094e4:	0800953b 	.word	0x0800953b
 80094e8:	0800953b 	.word	0x0800953b
 80094ec:	0800953b 	.word	0x0800953b
 80094f0:	0800953b 	.word	0x0800953b
 80094f4:	0800953b 	.word	0x0800953b
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 80094f8:	4b4c      	ldr	r3, [pc, #304]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	f107 030c 	add.w	r3, r7, #12
 8009500:	4619      	mov	r1, r3
 8009502:	484d      	ldr	r0, [pc, #308]	; (8009638 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8009504:	f00b fe8c 	bl	8015220 <memcpy>
				buf2_flag = 0;
 8009508:	4b4c      	ldr	r3, [pc, #304]	; (800963c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]

				break;
 800950e:	e015      	b.n	800953c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8009510:	4b46      	ldr	r3, [pc, #280]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009512:	691a      	ldr	r2, [r3, #16]
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	4619      	mov	r1, r3
 800951a:	4849      	ldr	r0, [pc, #292]	; (8009640 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800951c:	f00b fe80 	bl	8015220 <memcpy>

				break;
 8009520:	e00c      	b.n	800953c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 8009522:	4b42      	ldr	r3, [pc, #264]	; (800962c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009524:	691a      	ldr	r2, [r3, #16]
 8009526:	f107 030c 	add.w	r3, r7, #12
 800952a:	4619      	mov	r1, r3
 800952c:	4845      	ldr	r0, [pc, #276]	; (8009644 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800952e:	f00b fe77 	bl	8015220 <memcpy>
				buf2_flag = 1;
 8009532:	4b42      	ldr	r3, [pc, #264]	; (800963c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009534:	2201      	movs	r2, #1
 8009536:	701a      	strb	r2, [r3, #0]
				break;
 8009538:	e000      	b.n	800953c <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 800953a:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fd0c 	bl	8008f5c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009544:	2102      	movs	r1, #2
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f001 fc3e 	bl	800adc8 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 800954c:	e068      	b.n	8009620 <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4a38      	ldr	r2, [pc, #224]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009554:	2101      	movs	r1, #1
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 fb24 	bl	800aba4 <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 800955c:	4b35      	ldr	r3, [pc, #212]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	2b04      	cmp	r3, #4
 8009562:	d117      	bne.n	8009594 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 8009564:	4a32      	ldr	r2, [pc, #200]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 8009566:	4b33      	ldr	r3, [pc, #204]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009568:	4614      	mov	r4, r2
 800956a:	461d      	mov	r5, r3
 800956c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800956e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8009578:	4b2d      	ldr	r3, [pc, #180]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800957a:	331c      	adds	r3, #28
 800957c:	f107 020c 	add.w	r2, r7, #12
 8009580:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009584:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8009588:	4829      	ldr	r0, [pc, #164]	; (8009630 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 800958a:	f7ff fa1b 	bl	80089c4 <set_rx_frames>
			source = VESC_PACKET;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
 8009592:	e03d      	b.n	8009610 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 8009598:	4b26      	ldr	r3, [pc, #152]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3b14      	subs	r3, #20
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d835      	bhi.n	800960e <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 80095a2:	a201      	add	r2, pc, #4	; (adr r2, 80095a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80095a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a8:	080095cd 	.word	0x080095cd
 80095ac:	080095e5 	.word	0x080095e5
 80095b0:	080095f7 	.word	0x080095f7
 80095b4:	0800960f 	.word	0x0800960f
 80095b8:	0800960f 	.word	0x0800960f
 80095bc:	0800960f 	.word	0x0800960f
 80095c0:	0800960f 	.word	0x0800960f
 80095c4:	0800960f 	.word	0x0800960f
 80095c8:	0800960f 	.word	0x0800960f
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 80095cc:	4b19      	ldr	r3, [pc, #100]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80095ce:	691a      	ldr	r2, [r3, #16]
 80095d0:	f107 030c 	add.w	r3, r7, #12
 80095d4:	4619      	mov	r1, r3
 80095d6:	4818      	ldr	r0, [pc, #96]	; (8009638 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 80095d8:	f00b fe22 	bl	8015220 <memcpy>
				buf2_flag = 0;
 80095dc:	4b17      	ldr	r3, [pc, #92]	; (800963c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]
				break;
 80095e2:	e015      	b.n	8009610 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 80095e4:	4b13      	ldr	r3, [pc, #76]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80095e6:	691a      	ldr	r2, [r3, #16]
 80095e8:	f107 030c 	add.w	r3, r7, #12
 80095ec:	4619      	mov	r1, r3
 80095ee:	4814      	ldr	r0, [pc, #80]	; (8009640 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 80095f0:	f00b fe16 	bl	8015220 <memcpy>
				break;
 80095f4:	e00c      	b.n	8009610 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 80095f6:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	4619      	mov	r1, r3
 8009600:	4810      	ldr	r0, [pc, #64]	; (8009644 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 8009602:	f00b fe0d 	bl	8015220 <memcpy>
				buf2_flag = 1;
 8009606:	4b0d      	ldr	r3, [pc, #52]	; (800963c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009608:	2201      	movs	r2, #1
 800960a:	701a      	strb	r2, [r3, #0]
				break;
 800960c:	e000      	b.n	8009610 <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 800960e:	bf00      	nop
		CAN_PROCESS(source);
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	4618      	mov	r0, r3
 8009614:	f7ff fca2 	bl	8008f5c <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8009618:	2110      	movs	r1, #16
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f001 fbd4 	bl	800adc8 <HAL_CAN_ActivateNotification>
}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bdb0      	pop	{r4, r5, r7, pc}
 8009628:	20006d74 	.word	0x20006d74
 800962c:	20006d9c 	.word	0x20006d9c
 8009630:	20007e44 	.word	0x20007e44
 8009634:	20006d08 	.word	0x20006d08
 8009638:	2000723c 	.word	0x2000723c
 800963c:	20001964 	.word	0x20001964
 8009640:	20008218 	.word	0x20008218
 8009644:	20008368 	.word	0x20008368

08009648 <set>:
/*********************************************/

#include "common.h"
#include "math.h"

void set(void) {
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af02      	add	r7, sp, #8

	Initialize();
 800964e:	f7ff fa5d 	bl	8008b0c <Initialize>
	PSxInitDMA(&ps4,&hi2c1);
 8009652:	490f      	ldr	r1, [pc, #60]	; (8009690 <set+0x48>)
 8009654:	480f      	ldr	r0, [pc, #60]	; (8009694 <set+0x4c>)
 8009656:	f7fc fab5 	bl	8005bc4 <PSxInitDMA>
	TIMxInit(&htim6, 20000, 84);
 800965a:	2254      	movs	r2, #84	; 0x54
 800965c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8009660:	480d      	ldr	r0, [pc, #52]	; (8009698 <set+0x50>)
 8009662:	f7f9 f8bb 	bl	80027dc <TIMxInit>
//	RNS_config(&hcan1);

	ServoxInit(&servo, &htim1, IP2_PIN, TIM_CHANNEL_3);//YAW
 8009666:	2308      	movs	r3, #8
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800966e:	4a0b      	ldr	r2, [pc, #44]	; (800969c <set+0x54>)
 8009670:	490b      	ldr	r1, [pc, #44]	; (80096a0 <set+0x58>)
 8009672:	480c      	ldr	r0, [pc, #48]	; (80096a4 <set+0x5c>)
 8009674:	f7fc fdfa 	bl	800626c <ServoxInit>
	ServoxInit(&servo1, &htim1, IP3_PIN, TIM_CHANNEL_4);//PITCH
 8009678:	230c      	movs	r3, #12
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009680:	4a06      	ldr	r2, [pc, #24]	; (800969c <set+0x54>)
 8009682:	4907      	ldr	r1, [pc, #28]	; (80096a0 <set+0x58>)
 8009684:	4808      	ldr	r0, [pc, #32]	; (80096a8 <set+0x60>)
 8009686:	f7fc fdf1 	bl	800626c <ServoxInit>
}
 800968a:	bf00      	nop
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20007328 	.word	0x20007328
 8009694:	20008540 	.word	0x20008540
 8009698:	2000676c 	.word	0x2000676c
 800969c:	40021000 	.word	0x40021000
 80096a0:	200067ac 	.word	0x200067ac
 80096a4:	20007da4 	.word	0x20007da4
 80096a8:	20007e1c 	.word	0x20007e1c

080096ac <jetsonHandler>:
}
void jetsonInit(UART_HandleTypeDef *huart){
	HAL_UART_Receive_DMA(huart, &jetson.header, 1);
}

void jetsonHandler(UART_HandleTypeDef* huartx){
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	if(jetson.header == 0x88 && imgproc[LAST_BYTE] == 0){
 80096b4:	4b1f      	ldr	r3, [pc, #124]	; (8009734 <jetsonHandler+0x88>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b88      	cmp	r3, #136	; 0x88
 80096ba:	d109      	bne.n	80096d0 <jetsonHandler+0x24>
 80096bc:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <jetsonHandler+0x8c>)
 80096be:	7b5b      	ldrb	r3, [r3, #13]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d105      	bne.n	80096d0 <jetsonHandler+0x24>
		HAL_UART_Receive_DMA(huartx, imgproc, TOTAL_BYTES);
 80096c4:	220e      	movs	r2, #14
 80096c6:	491c      	ldr	r1, [pc, #112]	; (8009738 <jetsonHandler+0x8c>)
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f007 f919 	bl	8010900 <HAL_UART_Receive_DMA>
 80096ce:	e02c      	b.n	800972a <jetsonHandler+0x7e>
	}else if(jetson.header == 0x88 && imgproc[LAST_BYTE] == 0x99){
 80096d0:	4b18      	ldr	r3, [pc, #96]	; (8009734 <jetsonHandler+0x88>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b88      	cmp	r3, #136	; 0x88
 80096d6:	d11f      	bne.n	8009718 <jetsonHandler+0x6c>
 80096d8:	4b17      	ldr	r3, [pc, #92]	; (8009738 <jetsonHandler+0x8c>)
 80096da:	7b5b      	ldrb	r3, [r3, #13]
 80096dc:	2b99      	cmp	r3, #153	; 0x99
 80096de:	d11b      	bne.n	8009718 <jetsonHandler+0x6c>
		jetson.x_pixel = *((int *)(imgproc));
 80096e0:	4b15      	ldr	r3, [pc, #84]	; (8009738 <jetsonHandler+0x8c>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a13      	ldr	r2, [pc, #76]	; (8009734 <jetsonHandler+0x88>)
 80096e6:	6053      	str	r3, [r2, #4]
		jetson.y_pixel = *((int *)(&imgproc[4]));
 80096e8:	4b14      	ldr	r3, [pc, #80]	; (800973c <jetsonHandler+0x90>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a11      	ldr	r2, [pc, #68]	; (8009734 <jetsonHandler+0x88>)
 80096ee:	6093      	str	r3, [r2, #8]
		jetson.state = imgproc[8];
 80096f0:	4b11      	ldr	r3, [pc, #68]	; (8009738 <jetsonHandler+0x8c>)
 80096f2:	7a1a      	ldrb	r2, [r3, #8]
 80096f4:	4b0f      	ldr	r3, [pc, #60]	; (8009734 <jetsonHandler+0x88>)
 80096f6:	741a      	strb	r2, [r3, #16]
		jetson.area = *((float *)(&imgproc[9]));
 80096f8:	4b11      	ldr	r3, [pc, #68]	; (8009740 <jetsonHandler+0x94>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a0d      	ldr	r2, [pc, #52]	; (8009734 <jetsonHandler+0x88>)
 80096fe:	60d3      	str	r3, [r2, #12]
		imgproc[LAST_BYTE] = 0;
 8009700:	4b0d      	ldr	r3, [pc, #52]	; (8009738 <jetsonHandler+0x8c>)
 8009702:	2200      	movs	r2, #0
 8009704:	735a      	strb	r2, [r3, #13]
		HAL_UART_Receive_DMA(huartx, &jetson.header, 1);
 8009706:	2201      	movs	r2, #1
 8009708:	490a      	ldr	r1, [pc, #40]	; (8009734 <jetsonHandler+0x88>)
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f007 f8f8 	bl	8010900 <HAL_UART_Receive_DMA>
		jetson.timeout = 0;
 8009710:	4b08      	ldr	r3, [pc, #32]	; (8009734 <jetsonHandler+0x88>)
 8009712:	2200      	movs	r2, #0
 8009714:	615a      	str	r2, [r3, #20]
 8009716:	e008      	b.n	800972a <jetsonHandler+0x7e>
	}else{
		imgproc[LAST_BYTE] = 0;
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <jetsonHandler+0x8c>)
 800971a:	2200      	movs	r2, #0
 800971c:	735a      	strb	r2, [r3, #13]
		HAL_UART_Receive_DMA(huartx, &jetson.header, 1);
 800971e:	2201      	movs	r2, #1
 8009720:	4904      	ldr	r1, [pc, #16]	; (8009734 <jetsonHandler+0x88>)
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f007 f8ec 	bl	8010900 <HAL_UART_Receive_DMA>
	}
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200089fc 	.word	0x200089fc
 8009738:	20008a1c 	.word	0x20008a1c
 800973c:	20008a20 	.word	0x20008a20
 8009740:	20008a25 	.word	0x20008a25

08009744 <tunePending>:
		{"yawDelay", &yawDelay, 0, 0},
		{"pitchDelay", &pitchDelay, 0, 0},
		{"Area", &jetson.area, 0, 0},

};
void tunePending(UART_HandleTypeDef* huartx){
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(huartx, (uint8_t *)&tuneCommand, 1);
 800974c:	2201      	movs	r2, #1
 800974e:	4904      	ldr	r1, [pc, #16]	; (8009760 <tunePending+0x1c>)
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f007 f8d5 	bl	8010900 <HAL_UART_Receive_DMA>
}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	20008984 	.word	0x20008984

08009764 <tuneInit>:
void tuneInit(UART_HandleTypeDef* huartx){
 8009764:	b580      	push	{r7, lr}
 8009766:	b0a0      	sub	sp, #128	; 0x80
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
//[NUM_INT_TUNE][NUM_FLOAT_TUNE]
//[0x52][0x01][strlen][str...][*curValue...][min ...][max ...][0x31][0x40] format of INT
//[0x14][0x01][strlen][str...][*curValue...][minF...][maxF...][0x20][0x00] format of FLOAT

	uint8_t numVar[2] = {NUM_INT_TUNE, NUM_FLOAT_TUNE};
 800976c:	f641 031c 	movw	r3, #6172	; 0x181c
 8009770:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	HAL_UART_Transmit(huartx, numVar, 2, 10);
 8009774:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8009778:	230a      	movs	r3, #10
 800977a:	2202      	movs	r2, #2
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f007 f826 	bl	80107ce <HAL_UART_Transmit>
	uint8_t sendBuf[100];
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009782:	2300      	movs	r3, #0
 8009784:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009786:	e06b      	b.n	8009860 <tuneInit+0xfc>
		sendBuf[0] = 0x52;
 8009788:	2352      	movs	r3, #82	; 0x52
 800978a:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 800978c:	2301      	movs	r3, #1
 800978e:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(TUNE_INT_LIST[i].varName);
 8009790:	4a71      	ldr	r2, [pc, #452]	; (8009958 <tuneInit+0x1f4>)
 8009792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009794:	011b      	lsls	r3, r3, #4
 8009796:	4413      	add	r3, r2
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f7f6 fd18 	bl	80001d0 <strlen>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		sendBuf[2] = strLen;
 80097a6:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80097aa:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 1+1+1+strLen+4+4+4+1+1;
 80097ac:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80097b0:	3311      	adds	r3, #17
 80097b2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 80097b6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80097ba:	3b02      	subs	r3, #2
 80097bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80097c0:	4413      	add	r3, r2
 80097c2:	2231      	movs	r2, #49	; 0x31
 80097c4:	f803 2c74 	strb.w	r2, [r3, #-116]
 80097c8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80097cc:	3b01      	subs	r3, #1
 80097ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80097d2:	4413      	add	r3, r2
 80097d4:	2240      	movs	r2, #64	; 0x40
 80097d6:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], TUNE_INT_LIST[i].varName, strLen);
 80097da:	4a5f      	ldr	r2, [pc, #380]	; (8009958 <tuneInit+0x1f4>)
 80097dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	4413      	add	r3, r2
 80097e2:	6819      	ldr	r1, [r3, #0]
 80097e4:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80097e8:	f107 030c 	add.w	r3, r7, #12
 80097ec:	3303      	adds	r3, #3
 80097ee:	4618      	mov	r0, r3
 80097f0:	f00b fd16 	bl	8015220 <memcpy>
		memcpy(&sendBuf[3+strLen], TUNE_INT_LIST[i].ptr, 4);
 80097f4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80097f8:	3303      	adds	r3, #3
 80097fa:	f107 020c 	add.w	r2, r7, #12
 80097fe:	4413      	add	r3, r2
 8009800:	4955      	ldr	r1, [pc, #340]	; (8009958 <tuneInit+0x1f4>)
 8009802:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009804:	0112      	lsls	r2, r2, #4
 8009806:	440a      	add	r2, r1
 8009808:	3204      	adds	r2, #4
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	6812      	ldr	r2, [r2, #0]
 800980e:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &TUNE_INT_LIST[i].min, 4);
 8009810:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8009814:	3307      	adds	r3, #7
 8009816:	f107 020c 	add.w	r2, r7, #12
 800981a:	4413      	add	r3, r2
 800981c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800981e:	0112      	lsls	r2, r2, #4
 8009820:	3208      	adds	r2, #8
 8009822:	494d      	ldr	r1, [pc, #308]	; (8009958 <tuneInit+0x1f4>)
 8009824:	440a      	add	r2, r1
 8009826:	6812      	ldr	r2, [r2, #0]
 8009828:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &TUNE_INT_LIST[i].max, 4);
 800982a:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800982e:	330b      	adds	r3, #11
 8009830:	f107 020c 	add.w	r2, r7, #12
 8009834:	4413      	add	r3, r2
 8009836:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009838:	0112      	lsls	r2, r2, #4
 800983a:	3208      	adds	r2, #8
 800983c:	4946      	ldr	r1, [pc, #280]	; (8009958 <tuneInit+0x1f4>)
 800983e:	440a      	add	r2, r1
 8009840:	3204      	adds	r2, #4
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 1000);
 8009846:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800984a:	b29a      	uxth	r2, r3
 800984c:	f107 010c 	add.w	r1, r7, #12
 8009850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f006 ffba 	bl	80107ce <HAL_UART_Transmit>
	for(int i=0; i<NUM_INT_TUNE; i++){
 800985a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800985c:	3301      	adds	r3, #1
 800985e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009860:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009862:	2b1b      	cmp	r3, #27
 8009864:	dd90      	ble.n	8009788 <tuneInit+0x24>
	}

	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009866:	2300      	movs	r3, #0
 8009868:	67bb      	str	r3, [r7, #120]	; 0x78
 800986a:	e06a      	b.n	8009942 <tuneInit+0x1de>
		sendBuf[0] = 0x14;
 800986c:	2314      	movs	r3, #20
 800986e:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 8009870:	2301      	movs	r3, #1
 8009872:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(TUNE_FLOAT_LIST[i].varName);
 8009874:	4a39      	ldr	r2, [pc, #228]	; (800995c <tuneInit+0x1f8>)
 8009876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	4413      	add	r3, r2
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f7f6 fca6 	bl	80001d0 <strlen>
 8009884:	4603      	mov	r3, r0
 8009886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		sendBuf[2] = strLen;
 800988a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800988e:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 3+strLen+4+4+4+1+1;
 8009890:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009894:	3311      	adds	r3, #17
 8009896:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800989a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800989e:	3b02      	subs	r3, #2
 80098a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80098a4:	4413      	add	r3, r2
 80098a6:	2220      	movs	r2, #32
 80098a8:	f803 2c74 	strb.w	r2, [r3, #-116]
 80098ac:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80098b0:	3b01      	subs	r3, #1
 80098b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80098b6:	4413      	add	r3, r2
 80098b8:	2200      	movs	r2, #0
 80098ba:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], TUNE_FLOAT_LIST[i].varName, strLen);
 80098be:	4a27      	ldr	r2, [pc, #156]	; (800995c <tuneInit+0x1f8>)
 80098c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	4413      	add	r3, r2
 80098c6:	6819      	ldr	r1, [r3, #0]
 80098c8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	3303      	adds	r3, #3
 80098d2:	4618      	mov	r0, r3
 80098d4:	f00b fca4 	bl	8015220 <memcpy>
		memcpy(&sendBuf[3+strLen], TUNE_FLOAT_LIST[i].ptr, 4);
 80098d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80098dc:	3303      	adds	r3, #3
 80098de:	f107 020c 	add.w	r2, r7, #12
 80098e2:	4413      	add	r3, r2
 80098e4:	491d      	ldr	r1, [pc, #116]	; (800995c <tuneInit+0x1f8>)
 80098e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098e8:	0112      	lsls	r2, r2, #4
 80098ea:	440a      	add	r2, r1
 80098ec:	3204      	adds	r2, #4
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	6812      	ldr	r2, [r2, #0]
 80098f2:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &TUNE_FLOAT_LIST[i].min, 4);
 80098f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80098f8:	3307      	adds	r3, #7
 80098fa:	f107 020c 	add.w	r2, r7, #12
 80098fe:	4413      	add	r3, r2
 8009900:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009902:	0112      	lsls	r2, r2, #4
 8009904:	3208      	adds	r2, #8
 8009906:	4915      	ldr	r1, [pc, #84]	; (800995c <tuneInit+0x1f8>)
 8009908:	440a      	add	r2, r1
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &TUNE_FLOAT_LIST[i].max, 4);
 800990e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8009912:	330b      	adds	r3, #11
 8009914:	f107 020c 	add.w	r2, r7, #12
 8009918:	4413      	add	r3, r2
 800991a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800991c:	0112      	lsls	r2, r2, #4
 800991e:	3208      	adds	r2, #8
 8009920:	490e      	ldr	r1, [pc, #56]	; (800995c <tuneInit+0x1f8>)
 8009922:	440a      	add	r2, r1
 8009924:	3204      	adds	r2, #4
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 800992a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800992e:	b29a      	uxth	r2, r3
 8009930:	f107 010c 	add.w	r1, r7, #12
 8009934:	2364      	movs	r3, #100	; 0x64
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f006 ff49 	bl	80107ce <HAL_UART_Transmit>
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 800993c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800993e:	3301      	adds	r3, #1
 8009940:	67bb      	str	r3, [r7, #120]	; 0x78
 8009942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009944:	2b17      	cmp	r3, #23
 8009946:	dd91      	ble.n	800986c <tuneInit+0x108>
	}
	tunePending(huartx);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fefb 	bl	8009744 <tunePending>
}
 800994e:	bf00      	nop
 8009950:	3780      	adds	r7, #128	; 0x80
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	2000000c 	.word	0x2000000c
 800995c:	200001cc 	.word	0x200001cc

08009960 <tuneUpdate>:

void tuneUpdate(UART_HandleTypeDef* huartx){
 8009960:	b5b0      	push	{r4, r5, r7, lr}
 8009962:	b08a      	sub	sp, #40	; 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
//[0x52][0x01][index][*curValue...][0x31][0x40] format of INT
//[0x14][0x01][index][*curValue...][0x20][0x00] format of FLOAT

	for(int i=0; i<NUM_INT_TUNE; i++){
 8009968:	2300      	movs	r3, #0
 800996a:	623b      	str	r3, [r7, #32]
 800996c:	e050      	b.n	8009a10 <tuneUpdate+0xb0>
 800996e:	466b      	mov	r3, sp
 8009970:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 8009972:	2309      	movs	r3, #9
 8009974:	613b      	str	r3, [r7, #16]
		uint8_t sendBuf[len];
 8009976:	693c      	ldr	r4, [r7, #16]
 8009978:	1e63      	subs	r3, r4, #1
 800997a:	60fb      	str	r3, [r7, #12]
 800997c:	4623      	mov	r3, r4
 800997e:	4618      	mov	r0, r3
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	00cb      	lsls	r3, r1, #3
 800998e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009992:	00c2      	lsls	r2, r0, #3
 8009994:	4623      	mov	r3, r4
 8009996:	4618      	mov	r0, r3
 8009998:	f04f 0100 	mov.w	r1, #0
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	00cb      	lsls	r3, r1, #3
 80099a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80099aa:	00c2      	lsls	r2, r0, #3
 80099ac:	4623      	mov	r3, r4
 80099ae:	3307      	adds	r3, #7
 80099b0:	08db      	lsrs	r3, r3, #3
 80099b2:	00db      	lsls	r3, r3, #3
 80099b4:	ebad 0d03 	sub.w	sp, sp, r3
 80099b8:	466b      	mov	r3, sp
 80099ba:	3300      	adds	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
		sendBuf[0] = 0x52; sendBuf[1] = 0x01; sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2252      	movs	r2, #82	; 0x52
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2201      	movs	r2, #1
 80099c8:	705a      	strb	r2, [r3, #1]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	3b02      	subs	r3, #2
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	2131      	movs	r1, #49	; 0x31
 80099d2:	54d1      	strb	r1, [r2, r3]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	2140      	movs	r1, #64	; 0x40
 80099dc:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 80099de:	6a3b      	ldr	r3, [r7, #32]
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], TUNE_INT_LIST[i].ptr, 4);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	3303      	adds	r3, #3
 80099ea:	493a      	ldr	r1, [pc, #232]	; (8009ad4 <tuneUpdate+0x174>)
 80099ec:	6a3a      	ldr	r2, [r7, #32]
 80099ee:	0112      	lsls	r2, r2, #4
 80099f0:	440a      	add	r2, r1
 80099f2:	3204      	adds	r2, #4
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	2364      	movs	r3, #100	; 0x64
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f006 fee3 	bl	80107ce <HAL_UART_Transmit>
 8009a08:	46ad      	mov	sp, r5
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009a0a:	6a3b      	ldr	r3, [r7, #32]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	623b      	str	r3, [r7, #32]
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b1b      	cmp	r3, #27
 8009a14:	ddab      	ble.n	800996e <tuneUpdate+0xe>
	}

	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009a16:	2300      	movs	r3, #0
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
 8009a1a:	e050      	b.n	8009abe <tuneUpdate+0x15e>
 8009a1c:	466b      	mov	r3, sp
 8009a1e:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 8009a20:	2309      	movs	r3, #9
 8009a22:	61fb      	str	r3, [r7, #28]
		uint8_t sendBuf[len];
 8009a24:	69fc      	ldr	r4, [r7, #28]
 8009a26:	1e63      	subs	r3, r4, #1
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f04f 0100 	mov.w	r1, #0
 8009a32:	f04f 0200 	mov.w	r2, #0
 8009a36:	f04f 0300 	mov.w	r3, #0
 8009a3a:	00cb      	lsls	r3, r1, #3
 8009a3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009a40:	00c2      	lsls	r2, r0, #3
 8009a42:	4623      	mov	r3, r4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f04f 0100 	mov.w	r1, #0
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	00cb      	lsls	r3, r1, #3
 8009a54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009a58:	00c2      	lsls	r2, r0, #3
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	3307      	adds	r3, #7
 8009a5e:	08db      	lsrs	r3, r3, #3
 8009a60:	00db      	lsls	r3, r3, #3
 8009a62:	ebad 0d03 	sub.w	sp, sp, r3
 8009a66:	466b      	mov	r3, sp
 8009a68:	3300      	adds	r3, #0
 8009a6a:	617b      	str	r3, [r7, #20]
		sendBuf[0] = 0x14; sendBuf[1] = 0x01; sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2214      	movs	r2, #20
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2201      	movs	r2, #1
 8009a76:	705a      	strb	r2, [r3, #1]
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	3b02      	subs	r3, #2
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	2120      	movs	r1, #32
 8009a80:	54d1      	strb	r1, [r2, r3]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], TUNE_FLOAT_LIST[i].ptr, 4);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	3303      	adds	r3, #3
 8009a98:	490f      	ldr	r1, [pc, #60]	; (8009ad8 <tuneUpdate+0x178>)
 8009a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9c:	0112      	lsls	r2, r2, #4
 8009a9e:	440a      	add	r2, r1
 8009aa0:	3204      	adds	r2, #4
 8009aa2:	6812      	ldr	r2, [r2, #0]
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(huartx, sendBuf, len, 100);
 8009aa8:	6979      	ldr	r1, [r7, #20]
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	2364      	movs	r3, #100	; 0x64
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f006 fe8c 	bl	80107ce <HAL_UART_Transmit>
 8009ab6:	46ad      	mov	sp, r5
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	3301      	adds	r3, #1
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	2b17      	cmp	r3, #23
 8009ac2:	ddab      	ble.n	8009a1c <tuneUpdate+0xbc>
	}

	tunePending(huartx);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fe3d 	bl	8009744 <tunePending>
}
 8009aca:	bf00      	nop
 8009acc:	3728      	adds	r7, #40	; 0x28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	2000000c 	.word	0x2000000c
 8009ad8:	200001cc 	.word	0x200001cc

08009adc <tuneEdit>:

void tuneEdit(UART_HandleTypeDef* huartx){
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
//[0x52][0x01][index][editValue...][0x31][0x40] format of INT
//[0x14][0x01][index][editValue...][0x20][0x00] format of FLOAT
//[0x88][0x77] terminate, back to tune pending
	static uint8_t state = 0;

	switch(state){
 8009ae4:	4b47      	ldr	r3, [pc, #284]	; (8009c04 <tuneEdit+0x128>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	f200 8087 	bhi.w	8009bfc <tuneEdit+0x120>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <tuneEdit+0x18>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b17 	.word	0x08009b17
 8009afc:	08009b53 	.word	0x08009b53
 8009b00:	08009b95 	.word	0x08009b95
	case 0://When first received tuneCommand == 'e'
		HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009b04:	2201      	movs	r2, #1
 8009b06:	4940      	ldr	r1, [pc, #256]	; (8009c08 <tuneEdit+0x12c>)
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f006 fef9 	bl	8010900 <HAL_UART_Receive_DMA>
		state = 1;
 8009b0e:	4b3d      	ldr	r3, [pc, #244]	; (8009c04 <tuneEdit+0x128>)
 8009b10:	2201      	movs	r2, #1
 8009b12:	701a      	strb	r2, [r3, #0]
		break;
 8009b14:	e072      	b.n	8009bfc <tuneEdit+0x120>
	case 1:
		if(tuneHeader == 0x52 || tuneHeader == 0x14 || tuneHeader == 0x88){
 8009b16:	4b3c      	ldr	r3, [pc, #240]	; (8009c08 <tuneEdit+0x12c>)
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	2b52      	cmp	r3, #82	; 0x52
 8009b1c:	d007      	beq.n	8009b2e <tuneEdit+0x52>
 8009b1e:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <tuneEdit+0x12c>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b14      	cmp	r3, #20
 8009b24:	d003      	beq.n	8009b2e <tuneEdit+0x52>
 8009b26:	4b38      	ldr	r3, [pc, #224]	; (8009c08 <tuneEdit+0x12c>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b88      	cmp	r3, #136	; 0x88
 8009b2c:	d108      	bne.n	8009b40 <tuneEdit+0x64>
			state = 2;
 8009b2e:	4b35      	ldr	r3, [pc, #212]	; (8009c04 <tuneEdit+0x128>)
 8009b30:	2202      	movs	r2, #2
 8009b32:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(huartx, &tuneHeader1, 1);
 8009b34:	2201      	movs	r2, #1
 8009b36:	4935      	ldr	r1, [pc, #212]	; (8009c0c <tuneEdit+0x130>)
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f006 fee1 	bl	8010900 <HAL_UART_Receive_DMA>
		}
		else{
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
			state = 1;
		}
		break;
 8009b3e:	e05d      	b.n	8009bfc <tuneEdit+0x120>
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009b40:	2201      	movs	r2, #1
 8009b42:	4931      	ldr	r1, [pc, #196]	; (8009c08 <tuneEdit+0x12c>)
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f006 fedb 	bl	8010900 <HAL_UART_Receive_DMA>
			state = 1;
 8009b4a:	4b2e      	ldr	r3, [pc, #184]	; (8009c04 <tuneEdit+0x128>)
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	701a      	strb	r2, [r3, #0]
		break;
 8009b50:	e054      	b.n	8009bfc <tuneEdit+0x120>
	case 2:
		if(tuneHeader1 == 0x01){
 8009b52:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <tuneEdit+0x130>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d108      	bne.n	8009b6c <tuneEdit+0x90>
			HAL_UART_Receive_DMA(huartx, tuneBuffer, 7);
 8009b5a:	2207      	movs	r2, #7
 8009b5c:	492c      	ldr	r1, [pc, #176]	; (8009c10 <tuneEdit+0x134>)
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f006 fece 	bl	8010900 <HAL_UART_Receive_DMA>
			state = 3;
 8009b64:	4b27      	ldr	r3, [pc, #156]	; (8009c04 <tuneEdit+0x128>)
 8009b66:	2203      	movs	r2, #3
 8009b68:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
			state = 1;
		}
		break;
 8009b6a:	e047      	b.n	8009bfc <tuneEdit+0x120>
		else if(tuneHeader1 == 0x77){
 8009b6c:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <tuneEdit+0x130>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b77      	cmp	r3, #119	; 0x77
 8009b72:	d106      	bne.n	8009b82 <tuneEdit+0xa6>
			tunePending(huartx);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fde5 	bl	8009744 <tunePending>
			state = 0;
 8009b7a:	4b22      	ldr	r3, [pc, #136]	; (8009c04 <tuneEdit+0x128>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
		break;
 8009b80:	e03c      	b.n	8009bfc <tuneEdit+0x120>
			HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009b82:	2201      	movs	r2, #1
 8009b84:	4920      	ldr	r1, [pc, #128]	; (8009c08 <tuneEdit+0x12c>)
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f006 feba 	bl	8010900 <HAL_UART_Receive_DMA>
			state = 1;
 8009b8c:	4b1d      	ldr	r3, [pc, #116]	; (8009c04 <tuneEdit+0x128>)
 8009b8e:	2201      	movs	r2, #1
 8009b90:	701a      	strb	r2, [r3, #0]
		break;
 8009b92:	e033      	b.n	8009bfc <tuneEdit+0x120>
	case 3:
		if(tuneBuffer[5] == 0x31 && tuneBuffer[6] == 0x40){
 8009b94:	4b1e      	ldr	r3, [pc, #120]	; (8009c10 <tuneEdit+0x134>)
 8009b96:	795b      	ldrb	r3, [r3, #5]
 8009b98:	2b31      	cmp	r3, #49	; 0x31
 8009b9a:	d10d      	bne.n	8009bb8 <tuneEdit+0xdc>
 8009b9c:	4b1c      	ldr	r3, [pc, #112]	; (8009c10 <tuneEdit+0x134>)
 8009b9e:	799b      	ldrb	r3, [r3, #6]
 8009ba0:	2b40      	cmp	r3, #64	; 0x40
 8009ba2:	d109      	bne.n	8009bb8 <tuneEdit+0xdc>
			*(TUNE_INT_LIST[tuneBuffer[0]].ptr) = *((int *)&tuneBuffer[1]);
 8009ba4:	4a1b      	ldr	r2, [pc, #108]	; (8009c14 <tuneEdit+0x138>)
 8009ba6:	4b1a      	ldr	r3, [pc, #104]	; (8009c10 <tuneEdit+0x134>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	491b      	ldr	r1, [pc, #108]	; (8009c18 <tuneEdit+0x13c>)
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	440b      	add	r3, r1
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	601a      	str	r2, [r3, #0]
		}

		if(tuneBuffer[5] == 0x20 && tuneBuffer[6] == 0x00){
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <tuneEdit+0x134>)
 8009bba:	795b      	ldrb	r3, [r3, #5]
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	d10d      	bne.n	8009bdc <tuneEdit+0x100>
 8009bc0:	4b13      	ldr	r3, [pc, #76]	; (8009c10 <tuneEdit+0x134>)
 8009bc2:	799b      	ldrb	r3, [r3, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d109      	bne.n	8009bdc <tuneEdit+0x100>
			*(TUNE_FLOAT_LIST[tuneBuffer[0]].ptr) = *((float *)&tuneBuffer[1]);
 8009bc8:	4a12      	ldr	r2, [pc, #72]	; (8009c14 <tuneEdit+0x138>)
 8009bca:	4b11      	ldr	r3, [pc, #68]	; (8009c10 <tuneEdit+0x134>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	4913      	ldr	r1, [pc, #76]	; (8009c1c <tuneEdit+0x140>)
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	440b      	add	r3, r1
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6812      	ldr	r2, [r2, #0]
 8009bda:	601a      	str	r2, [r3, #0]
		}
		tuneBuffer[5] = tuneBuffer[6] = 0;
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <tuneEdit+0x134>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	719a      	strb	r2, [r3, #6]
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <tuneEdit+0x134>)
 8009be4:	799a      	ldrb	r2, [r3, #6]
 8009be6:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <tuneEdit+0x134>)
 8009be8:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_DMA(huartx, &tuneHeader, 1);
 8009bea:	2201      	movs	r2, #1
 8009bec:	4906      	ldr	r1, [pc, #24]	; (8009c08 <tuneEdit+0x12c>)
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f006 fe86 	bl	8010900 <HAL_UART_Receive_DMA>
		state = 1;
 8009bf4:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <tuneEdit+0x128>)
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	701a      	strb	r2, [r3, #0]
		break;
 8009bfa:	bf00      	nop
	}
}
 8009bfc:	bf00      	nop
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20001965 	.word	0x20001965
 8009c08:	20008998 	.word	0x20008998
 8009c0c:	200089e0 	.word	0x200089e0
 8009c10:	200088a8 	.word	0x200088a8
 8009c14:	200088a9 	.word	0x200088a9
 8009c18:	2000000c 	.word	0x2000000c
 8009c1c:	200001cc 	.word	0x200001cc

08009c20 <tuneWrite>:

uint32_t tuneWrite(uint32_t Address, uint32_t size){
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b08a      	sub	sp, #40	; 0x28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
	uint32_t success=0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	627b      	str	r3, [r7, #36]	; 0x24
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 8009c2e:	f002 f8b5 	bl	800bd9c <HAL_FLASH_Unlock>
	uint32_t StartSector;
	if(Address == SECTOR6){
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a40      	ldr	r2, [pc, #256]	; (8009d38 <tuneWrite+0x118>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d102      	bne.n	8009c40 <tuneWrite+0x20>
		StartSector = FLASH_SECTOR_6;
 8009c3a:	2306      	movs	r3, #6
 8009c3c:	623b      	str	r3, [r7, #32]
 8009c3e:	e005      	b.n	8009c4c <tuneWrite+0x2c>
	}else if(Address == SECTOR7){
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3e      	ldr	r2, [pc, #248]	; (8009d3c <tuneWrite+0x11c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d101      	bne.n	8009c4c <tuneWrite+0x2c>
		StartSector = FLASH_SECTOR_7;
 8009c48:	2307      	movs	r3, #7
 8009c4a:	623b      	str	r3, [r7, #32]
	}
	uint32_t EndSectorAddress = Address + size;
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	4413      	add	r3, r2
 8009c52:	617b      	str	r3, [r7, #20]
	uint32_t EndSector = GetSector(EndSectorAddress);
 8009c54:	6978      	ldr	r0, [r7, #20]
 8009c56:	f7f9 fad7 	bl	8003208 <GetSector>
 8009c5a:	6138      	str	r0, [r7, #16]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8009c5c:	4b38      	ldr	r3, [pc, #224]	; (8009d40 <tuneWrite+0x120>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8009c62:	4b37      	ldr	r3, [pc, #220]	; (8009d40 <tuneWrite+0x120>)
 8009c64:	2202      	movs	r2, #2
 8009c66:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = StartSector;
 8009c68:	4a35      	ldr	r2, [pc, #212]	; (8009d40 <tuneWrite+0x120>)
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a32      	ldr	r2, [pc, #200]	; (8009d40 <tuneWrite+0x120>)
 8009c78:	60d3      	str	r3, [r2, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8009c7a:	f107 030c 	add.w	r3, r7, #12
 8009c7e:	4619      	mov	r1, r3
 8009c80:	482f      	ldr	r0, [pc, #188]	; (8009d40 <tuneWrite+0x120>)
 8009c82:	f002 f9f9 	bl	800c078 <HAL_FLASHEx_Erase>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <tuneWrite+0x74>
	{
		return HAL_FLASH_GetError ();
 8009c8c:	f002 f8b8 	bl	800be00 <HAL_FLASH_GetError>
 8009c90:	4603      	mov	r3, r0
 8009c92:	e04d      	b.n	8009d30 <tuneWrite+0x110>
	}
	if(Address == SECTOR6){
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a28      	ldr	r2, [pc, #160]	; (8009d38 <tuneWrite+0x118>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d120      	bne.n	8009cde <tuneWrite+0xbe>
		for(int i=0; i<NUM_INT_TUNE; i++){
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	e019      	b.n	8009cd6 <tuneWrite+0xb6>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *(TUNE_INT_LIST[i].ptr))==HAL_OK){
 8009ca2:	4a28      	ldr	r2, [pc, #160]	; (8009d44 <tuneWrite+0x124>)
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	2002      	movs	r0, #2
 8009cba:	f002 f81b 	bl	800bcf4 <HAL_FLASH_Program>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d102      	bne.n	8009cca <tuneWrite+0xaa>
				success ++;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
			}
			Address += 4;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	607b      	str	r3, [r7, #4]
		for(int i=0; i<NUM_INT_TUNE; i++){
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61fb      	str	r3, [r7, #28]
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	2b1b      	cmp	r3, #27
 8009cda:	dde2      	ble.n	8009ca2 <tuneWrite+0x82>
 8009cdc:	e025      	b.n	8009d2a <tuneWrite+0x10a>
		}
	}else if(Address == SECTOR7){
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <tuneWrite+0x11c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d121      	bne.n	8009d2a <tuneWrite+0x10a>
		for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	e01b      	b.n	8009d24 <tuneWrite+0x104>
			uint32_t temp;
			memcpy(&temp, TUNE_FLOAT_LIST[i].ptr, 4);
 8009cec:	4a16      	ldr	r2, [pc, #88]	; (8009d48 <tuneWrite+0x128>)
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60bb      	str	r3, [r7, #8]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp)==HAL_OK){
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	2002      	movs	r0, #2
 8009d08:	f001 fff4 	bl	800bcf4 <HAL_FLASH_Program>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d102      	bne.n	8009d18 <tuneWrite+0xf8>
				success ++;
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	3301      	adds	r3, #1
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24
			}
			Address += 4;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	607b      	str	r3, [r7, #4]
		for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	3301      	adds	r3, #1
 8009d22:	61bb      	str	r3, [r7, #24]
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b17      	cmp	r3, #23
 8009d28:	dde0      	ble.n	8009cec <tuneWrite+0xcc>
		}
	}
	HAL_FLASH_Lock();
 8009d2a:	f002 f859 	bl	800bde0 <HAL_FLASH_Lock>
	return success;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3728      	adds	r7, #40	; 0x28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	08040000 	.word	0x08040000
 8009d3c:	08060004 	.word	0x08060004
 8009d40:	20001968 	.word	0x20001968
 8009d44:	2000000c 	.word	0x2000000c
 8009d48:	200001cc 	.word	0x200001cc

08009d4c <tuneRead>:

void tuneRead(void){
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
	uint32_t Address = SECTOR6;
 8009d52:	4b1a      	ldr	r3, [pc, #104]	; (8009dbc <tuneRead+0x70>)
 8009d54:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009d56:	2300      	movs	r3, #0
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	e00e      	b.n	8009d7a <tuneRead+0x2e>
		memcpy(TUNE_INT_LIST[i].ptr, (__IO uint32_t *)Address, 4);
 8009d5c:	4a18      	ldr	r2, [pc, #96]	; (8009dc0 <tuneRead+0x74>)
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	011b      	lsls	r3, r3, #4
 8009d62:	4413      	add	r3, r2
 8009d64:	3304      	adds	r3, #4
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	6812      	ldr	r2, [r2, #0]
 8009d6c:	601a      	str	r2, [r3, #0]
		Address += 4;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	3304      	adds	r3, #4
 8009d72:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_INT_TUNE; i++){
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	3301      	adds	r3, #1
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b1b      	cmp	r3, #27
 8009d7e:	dded      	ble.n	8009d5c <tuneRead+0x10>
	}

	Address = SECTOR7;
 8009d80:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <tuneRead+0x78>)
 8009d82:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009d84:	2300      	movs	r3, #0
 8009d86:	607b      	str	r3, [r7, #4]
 8009d88:	e00e      	b.n	8009da8 <tuneRead+0x5c>
		memcpy(TUNE_FLOAT_LIST[i].ptr, (__IO uint32_t *)Address, 4);
 8009d8a:	4a0f      	ldr	r2, [pc, #60]	; (8009dc8 <tuneRead+0x7c>)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	4413      	add	r3, r2
 8009d92:	3304      	adds	r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	601a      	str	r2, [r3, #0]
		Address += 4;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<NUM_FLOAT_TUNE; i++){
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3301      	adds	r3, #1
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b17      	cmp	r3, #23
 8009dac:	dded      	ble.n	8009d8a <tuneRead+0x3e>
	}
}
 8009dae:	bf00      	nop
 8009db0:	bf00      	nop
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	08040000 	.word	0x08040000
 8009dc0:	2000000c 	.word	0x2000000c
 8009dc4:	08060004 	.word	0x08060004
 8009dc8:	200001cc 	.word	0x200001cc

08009dcc <ILI9341_Init_List>:
		}
		Navi();
	}
}

void ILI9341_Init_List(void){
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af02      	add	r7, sp, #8
	ILI9341row = 5;
 8009dd2:	4b23      	ldr	r3, [pc, #140]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009dd4:	2205      	movs	r2, #5
 8009dd6:	601a      	str	r2, [r3, #0]

	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009dd8:	2300      	movs	r3, #0
 8009dda:	607b      	str	r3, [r7, #4]
 8009ddc:	e018      	b.n	8009e10 <ILI9341_Init_List+0x44>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdIntList[i].varName, 2);
 8009dde:	4b20      	ldr	r3, [pc, #128]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4619      	mov	r1, r3
 8009de4:	4a1f      	ldr	r2, [pc, #124]	; (8009e64 <ILI9341_Init_List+0x98>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	4413      	add	r3, r2
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2202      	movs	r2, #2
 8009df0:	9201      	str	r2, [sp, #4]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dfa:	2005      	movs	r0, #5
 8009dfc:	f7f9 fdd6 	bl	80039ac <ILI9341_Draw_String>
		ILI9341row += 15;
 8009e00:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	330f      	adds	r3, #15
 8009e06:	4a16      	ldr	r2, [pc, #88]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009e08:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	607b      	str	r3, [r7, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b07      	cmp	r3, #7
 8009e14:	dde3      	ble.n	8009dde <ILI9341_Init_List+0x12>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8009e16:	2300      	movs	r3, #0
 8009e18:	603b      	str	r3, [r7, #0]
 8009e1a:	e018      	b.n	8009e4e <ILI9341_Init_List+0x82>
		ILI9341_Draw_String(5, ILI9341row, WHITE, BLACK, lcdFloatList[i].varName, 2);
 8009e1c:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4619      	mov	r1, r3
 8009e22:	4a11      	ldr	r2, [pc, #68]	; (8009e68 <ILI9341_Init_List+0x9c>)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	4413      	add	r3, r2
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	9201      	str	r2, [sp, #4]
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e38:	2005      	movs	r0, #5
 8009e3a:	f7f9 fdb7 	bl	80039ac <ILI9341_Draw_String>
		ILI9341row += 15;
 8009e3e:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	330f      	adds	r3, #15
 8009e44:	4a06      	ldr	r2, [pc, #24]	; (8009e60 <ILI9341_Init_List+0x94>)
 8009e46:	6013      	str	r3, [r2, #0]
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	603b      	str	r3, [r7, #0]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	dde3      	ble.n	8009e1c <ILI9341_Init_List+0x50>
	}
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	2000702c 	.word	0x2000702c
 8009e64:	2000034c 	.word	0x2000034c
 8009e68:	200003cc 	.word	0x200003cc

08009e6c <ILI9341_Update_List>:

void ILI9341_Update_List(void){
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b09e      	sub	sp, #120	; 0x78
 8009e70:	af02      	add	r7, sp, #8
	int updateRow=5;
 8009e72:	2305      	movs	r3, #5
 8009e74:	66fb      	str	r3, [r7, #108]	; 0x6c
	char lcdData[100];
	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009e76:	2300      	movs	r3, #0
 8009e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e7a:	e01c      	b.n	8009eb6 <ILI9341_Update_List+0x4a>
		sprintf(lcdData, "%8d", *(lcdIntList[i].ptr));
 8009e7c:	4a25      	ldr	r2, [pc, #148]	; (8009f14 <ILI9341_Update_List+0xa8>)
 8009e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	4413      	add	r3, r2
 8009e84:	3304      	adds	r3, #4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4922      	ldr	r1, [pc, #136]	; (8009f18 <ILI9341_Update_List+0xac>)
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f00c f8f4 	bl	801607c <siprintf>
		ILI9341_Draw_String(110, updateRow, WHITE, BLACK, lcdData, 2);
 8009e94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009e96:	2302      	movs	r3, #2
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	9300      	str	r3, [sp, #0]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ea4:	206e      	movs	r0, #110	; 0x6e
 8009ea6:	f7f9 fd81 	bl	80039ac <ILI9341_Draw_String>
		updateRow += 15;
 8009eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eac:	330f      	adds	r3, #15
 8009eae:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(int i=0; i<NUM_INT_UPDATE; i++){
 8009eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009eb8:	2b07      	cmp	r3, #7
 8009eba:	dddf      	ble.n	8009e7c <ILI9341_Update_List+0x10>
	}

	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8009ec0:	e020      	b.n	8009f04 <ILI9341_Update_List+0x98>
		sprintf(lcdData, "%8.3f", *(lcdFloatList[i].ptr));
 8009ec2:	4a16      	ldr	r2, [pc, #88]	; (8009f1c <ILI9341_Update_List+0xb0>)
 8009ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	4413      	add	r3, r2
 8009eca:	3304      	adds	r3, #4
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f6 fb39 	bl	8000548 <__aeabi_f2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4638      	mov	r0, r7
 8009edc:	4910      	ldr	r1, [pc, #64]	; (8009f20 <ILI9341_Update_List+0xb4>)
 8009ede:	f00c f8cd 	bl	801607c <siprintf>
		ILI9341_Draw_String(110, updateRow, WHITE, BLACK, lcdData, 2);
 8009ee2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	463b      	mov	r3, r7
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	2300      	movs	r3, #0
 8009eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ef2:	206e      	movs	r0, #110	; 0x6e
 8009ef4:	f7f9 fd5a 	bl	80039ac <ILI9341_Draw_String>
		updateRow += 15;
 8009ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009efa:	330f      	adds	r3, #15
 8009efc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for(int i=0; i<NUM_FLOAT_UPDATE; i++){
 8009efe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f00:	3301      	adds	r3, #1
 8009f02:	667b      	str	r3, [r7, #100]	; 0x64
 8009f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	dddb      	ble.n	8009ec2 <ILI9341_Update_List+0x56>
	}
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	3770      	adds	r7, #112	; 0x70
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000034c 	.word	0x2000034c
 8009f18:	0801a140 	.word	0x0801a140
 8009f1c:	200003cc 	.word	0x200003cc
 8009f20:	0801a144 	.word	0x0801a144

08009f24 <DMA1_Stream0_IRQHandler>:
#include "dma.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 8009f28:	4802      	ldr	r0, [pc, #8]	; (8009f34 <DMA1_Stream0_IRQHandler+0x10>)
 8009f2a:	f001 fc5f 	bl	800b7ec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 8009f2e:	bf00      	nop
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200084dc 	.word	0x200084dc

08009f38 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 8009f3c:	4802      	ldr	r0, [pc, #8]	; (8009f48 <DMA1_Stream3_IRQHandler+0x10>)
 8009f3e:	f001 fc55 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009f42:	bf00      	nop
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20006e3c 	.word	0x20006e3c

08009f4c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8009f50:	4802      	ldr	r0, [pc, #8]	; (8009f5c <DMA1_Stream2_IRQHandler+0x10>)
 8009f52:	f001 fc4b 	bl	800b7ec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 8009f56:	bf00      	nop
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20006298 	.word	0x20006298

08009f60 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009f64:	4802      	ldr	r0, [pc, #8]	; (8009f70 <DMA1_Stream1_IRQHandler+0x10>)
 8009f66:	f001 fc41 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009f6a:	bf00      	nop
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	200063dc 	.word	0x200063dc

08009f74 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8009f78:	4802      	ldr	r0, [pc, #8]	; (8009f84 <DMA1_Stream4_IRQHandler+0x10>)
 8009f7a:	f001 fc37 	bl	800b7ec <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 8009f7e:	bf00      	nop
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20006a50 	.word	0x20006a50

08009f88 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009f8c:	4802      	ldr	r0, [pc, #8]	; (8009f98 <DMA1_Stream5_IRQHandler+0x10>)
 8009f8e:	f001 fc2d 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009f92:	bf00      	nop
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200062f8 	.word	0x200062f8

08009f9c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009fa0:	4802      	ldr	r0, [pc, #8]	; (8009fac <DMA1_Stream6_IRQHandler+0x10>)
 8009fa2:	f001 fc23 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200065e4 	.word	0x200065e4

08009fb0 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8009fb4:	4802      	ldr	r0, [pc, #8]	; (8009fc0 <DMA1_Stream7_IRQHandler+0x10>)
 8009fb6:	f001 fc19 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009fba:	bf00      	nop
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20006ab0 	.word	0x20006ab0

08009fc4 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc1);
 8009fc8:	4802      	ldr	r0, [pc, #8]	; (8009fd4 <DMA2_Stream0_IRQHandler+0x10>)
 8009fca:	f001 fc0f 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009fce:	bf00      	nop
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20006c48 	.word	0x20006c48

08009fd8 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 8009fdc:	4802      	ldr	r0, [pc, #8]	; (8009fe8 <DMA2_Stream1_IRQHandler+0x10>)
 8009fde:	f001 fc05 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009fe2:	bf00      	nop
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20006b58 	.word	0x20006b58

08009fec <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009ff0:	4802      	ldr	r0, [pc, #8]	; (8009ffc <DMA2_Stream2_IRQHandler+0x10>)
 8009ff2:	f001 fbfb 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 8009ff6:	bf00      	nop
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	2000847c 	.word	0x2000847c

0800a000 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800a004:	4802      	ldr	r0, [pc, #8]	; (800a010 <DMA2_Stream3_IRQHandler+0x10>)
 800a006:	f001 fbf1 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 800a00a:	bf00      	nop
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20006ca8 	.word	0x20006ca8

0800a014 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800a018:	4802      	ldr	r0, [pc, #8]	; (800a024 <DMA2_Stream5_IRQHandler+0x10>)
 800a01a:	f001 fbe7 	bl	800b7ec <HAL_DMA_IRQHandler>
}
 800a01e:	bf00      	nop
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	200085f4 	.word	0x200085f4

0800a028 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800a028:	b480      	push	{r7}
 800a02a:	af00      	add	r7, sp, #0

}
 800a02c:	bf00      	nop
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800a036:	b480      	push	{r7}
 800a038:	af00      	add	r7, sp, #0

}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0

	while(1){
 800a048:	e7fe      	b.n	800a048 <MemManage_Handler+0x4>

0800a04a <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800a04a:	b480      	push	{r7}
 800a04c:	af00      	add	r7, sp, #0

}
 800a04e:	bf00      	nop
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0

}
 800a05c:	bf00      	nop
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800a066:	b480      	push	{r7}
 800a068:	af00      	add	r7, sp, #0

}
 800a06a:	bf00      	nop
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
		BIOS_QEI1.signbit -= 1;
	}
	htim1.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim1);
 800a078:	4803      	ldr	r0, [pc, #12]	; (800a088 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a07a:	f005 fd01 	bl	800fa80 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim10);
 800a07e:	4803      	ldr	r0, [pc, #12]	; (800a08c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800a080:	f005 fcfe 	bl	800fa80 <HAL_TIM_IRQHandler>
	return;
 800a084:	bf00      	nop
}
 800a086:	bd80      	pop	{r7, pc}
 800a088:	200067ac 	.word	0x200067ac
 800a08c:	2000647c 	.word	0x2000647c

0800a090 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
	}
	htim4.Instance -> SR = 0;
	QEIDelay(100);

#else
	HAL_TIM_IRQHandler(&htim4);
 800a094:	4802      	ldr	r0, [pc, #8]	; (800a0a0 <TIM4_IRQHandler+0x10>)
 800a096:	f005 fcf3 	bl	800fa80 <HAL_TIM_IRQHandler>

	return;
 800a09a:	bf00      	nop
#endif

}
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000639c 	.word	0x2000639c

0800a0a4 <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800a0a8:	4803      	ldr	r0, [pc, #12]	; (800a0b8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800a0aa:	f005 fce9 	bl	800fa80 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800a0ae:	4803      	ldr	r0, [pc, #12]	; (800a0bc <TIM8_UP_TIM13_IRQHandler+0x18>)
 800a0b0:	f005 fce6 	bl	800fa80 <HAL_TIM_IRQHandler>
	return;
 800a0b4:	bf00      	nop
}
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	2000635c 	.word	0x2000635c
 800a0bc:	20006644 	.word	0x20006644

0800a0c0 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800a0c4:	4802      	ldr	r0, [pc, #8]	; (800a0d0 <TIM2_IRQHandler+0x10>)
 800a0c6:	f005 fcdb 	bl	800fa80 <HAL_TIM_IRQHandler>
}
 800a0ca:	bf00      	nop
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200068b0 	.word	0x200068b0

0800a0d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d12a      	bne.n	800a13c <HAL_TIM_PeriodElapsedCallback+0x68>
		HAL_IncTick();
 800a0e6:	f000 f9e9 	bl	800a4bc <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800a0ea:	4816      	ldr	r0, [pc, #88]	; (800a144 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a0ec:	f7f7 fbb5 	bl	800185a <SHIFTREGShift>
		counter++;
 800a0f0:	4b15      	ldr	r3, [pc, #84]	; (800a148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	4a14      	ldr	r2, [pc, #80]	; (800a148 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800a0f8:	6013      	str	r3, [r2, #0]
		jetson.update ++;
 800a0fa:	4b14      	ldr	r3, [pc, #80]	; (800a14c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	3301      	adds	r3, #1
 800a100:	4a12      	ldr	r2, [pc, #72]	; (800a14c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a102:	6193      	str	r3, [r2, #24]
		if(sys.pid){
 800a104:	4b12      	ldr	r3, [pc, #72]	; (800a150 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_TIM_PeriodElapsedCallback+0x46>
			PID(&Pid_Camera);
 800a112:	4810      	ldr	r0, [pc, #64]	; (800a154 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a114:	f7fb fc63 	bl	80059de <PID>
 800a118:	e002      	b.n	800a120 <HAL_TIM_PeriodElapsedCallback+0x4c>
		}
		else{
			PIDDelayInit(&Pid_Camera);
 800a11a:	480e      	ldr	r0, [pc, #56]	; (800a154 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800a11c:	f7fb fc41 	bl	80059a2 <PIDDelayInit>
		}

		if(sys.pidPitch){
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d003      	beq.n	800a136 <HAL_TIM_PeriodElapsedCallback+0x62>
			PID(&Pid_Camera_Pitch);
 800a12e:	480a      	ldr	r0, [pc, #40]	; (800a158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800a130:	f7fb fc55 	bl	80059de <PID>
		}else{
			PIDDelayInit(&Pid_Camera_Pitch);
		}
	}
}
 800a134:	e002      	b.n	800a13c <HAL_TIM_PeriodElapsedCallback+0x68>
			PIDDelayInit(&Pid_Camera_Pitch);
 800a136:	4808      	ldr	r0, [pc, #32]	; (800a158 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800a138:	f7fb fc33 	bl	80059a2 <PIDDelayInit>
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	20007d2c 	.word	0x20007d2c
 800a148:	20007e68 	.word	0x20007e68
 800a14c:	200089fc 	.word	0x200089fc
 800a150:	2000893c 	.word	0x2000893c
 800a154:	200088b0 	.word	0x200088b0
 800a158:	20008a38 	.word	0x20008a38

0800a15c <HAL_I2C_MasterRxCpltCallback>:
//}


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	PSxConnectDMA(&ps4);
 800a164:	4803      	ldr	r0, [pc, #12]	; (800a174 <HAL_I2C_MasterRxCpltCallback+0x18>)
 800a166:	f7fb fd1b 	bl	8005ba0 <PSxConnectDMA>
}
 800a16a:	bf00      	nop
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	20008540 	.word	0x20008540

0800a178 <I2C1_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C1.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C1_ER_IRQHandler(void){
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0

	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800a17c:	480a      	ldr	r0, [pc, #40]	; (800a1a8 <I2C1_ER_IRQHandler+0x30>)
 800a17e:	f001 fa5d 	bl	800b63c <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800a182:	480a      	ldr	r0, [pc, #40]	; (800a1ac <I2C1_ER_IRQHandler+0x34>)
 800a184:	f002 fc90 	bl	800caa8 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800a188:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <I2C1_ER_IRQHandler+0x38>)
 800a18a:	2208      	movs	r2, #8
 800a18c:	4906      	ldr	r1, [pc, #24]	; (800a1a8 <I2C1_ER_IRQHandler+0x30>)
 800a18e:	4807      	ldr	r0, [pc, #28]	; (800a1ac <I2C1_ER_IRQHandler+0x34>)
 800a190:	f7f9 f8be 	bl	8003310 <I2CX_DMA_RX_Init>

	HAL_I2C_ER_IRQHandler(&hi2c1);
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <I2C1_ER_IRQHandler+0x34>)
 800a196:	f002 ff3a 	bl	800d00e <HAL_I2C_ER_IRQHandler>

	PSxInitDMA(&ps4, &hi2c1);
 800a19a:	4904      	ldr	r1, [pc, #16]	; (800a1ac <I2C1_ER_IRQHandler+0x34>)
 800a19c:	4805      	ldr	r0, [pc, #20]	; (800a1b4 <I2C1_ER_IRQHandler+0x3c>)
 800a19e:	f7fb fd11 	bl	8005bc4 <PSxInitDMA>

}
 800a1a2:	bf00      	nop
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200084dc 	.word	0x200084dc
 800a1ac:	20007328 	.word	0x20007328
 800a1b0:	00061a80 	.word	0x00061a80
 800a1b4:	20008540 	.word	0x20008540

0800a1b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08c      	sub	sp, #48	; 0x30
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	201c      	movs	r0, #28
 800a1ce:	f001 f941 	bl	800b454 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a1d2:	201c      	movs	r0, #28
 800a1d4:	f001 f95a 	bl	800b48c <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800a1d8:	2300      	movs	r3, #0
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	4b20      	ldr	r3, [pc, #128]	; (800a260 <HAL_InitTick+0xa8>)
 800a1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <HAL_InitTick+0xa8>)
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	6413      	str	r3, [r2, #64]	; 0x40
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <HAL_InitTick+0xa8>)
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
 800a1f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a1f4:	f107 0210 	add.w	r2, r7, #16
 800a1f8:	f107 0314 	add.w	r3, r7, #20
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f004 ffce 	bl	800f1a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a204:	f004 ffa4 	bl	800f150 <HAL_RCC_GetPCLK1Freq>
 800a208:	4603      	mov	r3, r0
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	4a14      	ldr	r2, [pc, #80]	; (800a264 <HAL_InitTick+0xac>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	0c9b      	lsrs	r3, r3, #18
 800a218:	3b01      	subs	r3, #1
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800a21c:	4b12      	ldr	r3, [pc, #72]	; (800a268 <HAL_InitTick+0xb0>)
 800a21e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a222:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800a224:	4b10      	ldr	r3, [pc, #64]	; (800a268 <HAL_InitTick+0xb0>)
 800a226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a22a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800a22c:	4a0e      	ldr	r2, [pc, #56]	; (800a268 <HAL_InitTick+0xb0>)
 800a22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a230:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800a232:	4b0d      	ldr	r3, [pc, #52]	; (800a268 <HAL_InitTick+0xb0>)
 800a234:	2200      	movs	r2, #0
 800a236:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a238:	4b0b      	ldr	r3, [pc, #44]	; (800a268 <HAL_InitTick+0xb0>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800a23e:	480a      	ldr	r0, [pc, #40]	; (800a268 <HAL_InitTick+0xb0>)
 800a240:	f005 fb42 	bl	800f8c8 <HAL_TIM_Base_Init>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d104      	bne.n	800a254 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800a24a:	4807      	ldr	r0, [pc, #28]	; (800a268 <HAL_InitTick+0xb0>)
 800a24c:	f005 fb8b 	bl	800f966 <HAL_TIM_Base_Start_IT>
 800a250:	4603      	mov	r3, r0
 800a252:	e000      	b.n	800a256 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
}
 800a256:	4618      	mov	r0, r3
 800a258:	3730      	adds	r7, #48	; 0x30
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	40023800 	.word	0x40023800
 800a264:	431bde83 	.word	0x431bde83
 800a268:	200068b0 	.word	0x200068b0

0800a26c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a26c:	b480      	push	{r7}
 800a26e:	af00      	add	r7, sp, #0
	return 1;
 800a270:	2301      	movs	r3, #1
}
 800a272:	4618      	mov	r0, r3
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <_kill>:

int _kill(int pid, int sig)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a286:	f00a ffa1 	bl	80151cc <__errno>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2216      	movs	r2, #22
 800a28e:	601a      	str	r2, [r3, #0]
	return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a294:	4618      	mov	r0, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <_exit>:

void _exit (int status)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a2a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ffe7 	bl	800a27c <_kill>
	while (1) {}		/* Make sure we hang here */
 800a2ae:	e7fe      	b.n	800a2ae <_exit+0x12>

0800a2b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
 800a2c0:	e00a      	b.n	800a2d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a2c2:	f3af 8000 	nop.w
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	60ba      	str	r2, [r7, #8]
 800a2ce:	b2ca      	uxtb	r2, r1
 800a2d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	617b      	str	r3, [r7, #20]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	dbf0      	blt.n	800a2c2 <_read+0x12>
	}

return len;
 800a2e0:	687b      	ldr	r3, [r7, #4]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	e009      	b.n	800a310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	60ba      	str	r2, [r7, #8]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	4618      	mov	r0, r3
 800a306:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	3301      	adds	r3, #1
 800a30e:	617b      	str	r3, [r7, #20]
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	dbf1      	blt.n	800a2fc <_write+0x12>
	}
	return len;
 800a318:	687b      	ldr	r3, [r7, #4]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3718      	adds	r7, #24
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <_close>:

int _close(int file)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
	return -1;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a34a:	605a      	str	r2, [r3, #4]
	return 0;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <_isatty>:

int _isatty(int file)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
	return 1;
 800a362:	2301      	movs	r3, #1
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
	return 0;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
	...

0800a38c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a394:	4a14      	ldr	r2, [pc, #80]	; (800a3e8 <_sbrk+0x5c>)
 800a396:	4b15      	ldr	r3, [pc, #84]	; (800a3ec <_sbrk+0x60>)
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a3a0:	4b13      	ldr	r3, [pc, #76]	; (800a3f0 <_sbrk+0x64>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a3a8:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <_sbrk+0x64>)
 800a3aa:	4a12      	ldr	r2, [pc, #72]	; (800a3f4 <_sbrk+0x68>)
 800a3ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a3ae:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <_sbrk+0x64>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d207      	bcs.n	800a3cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a3bc:	f00a ff06 	bl	80151cc <__errno>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	220c      	movs	r2, #12
 800a3c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3ca:	e009      	b.n	800a3e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a3cc:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <_sbrk+0x64>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a3d2:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <_sbrk+0x64>)
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4413      	add	r3, r2
 800a3da:	4a05      	ldr	r2, [pc, #20]	; (800a3f0 <_sbrk+0x64>)
 800a3dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a3de:	68fb      	ldr	r3, [r7, #12]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	20020000 	.word	0x20020000
 800a3ec:	00000400 	.word	0x00000400
 800a3f0:	2000197c 	.word	0x2000197c
 800a3f4:	20008b40 	.word	0x20008b40

0800a3f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <SystemInit+0x28>)
 800a3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a402:	4a07      	ldr	r2, [pc, #28]	; (800a420 <SystemInit+0x28>)
 800a404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <SystemInit+0x28>)
 800a40e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a412:	609a      	str	r2, [r3, #8]
#endif
}
 800a414:	bf00      	nop
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	e000ed00 	.word	0xe000ed00

0800a424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a45c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a428:	480d      	ldr	r0, [pc, #52]	; (800a460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a42a:	490e      	ldr	r1, [pc, #56]	; (800a464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a42c:	4a0e      	ldr	r2, [pc, #56]	; (800a468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a42e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a430:	e002      	b.n	800a438 <LoopCopyDataInit>

0800a432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a436:	3304      	adds	r3, #4

0800a438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a43a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a43c:	d3f9      	bcc.n	800a432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a43e:	4a0b      	ldr	r2, [pc, #44]	; (800a46c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a440:	4c0b      	ldr	r4, [pc, #44]	; (800a470 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a442:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a444:	e001      	b.n	800a44a <LoopFillZerobss>

0800a446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a448:	3204      	adds	r2, #4

0800a44a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a44a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a44c:	d3fb      	bcc.n	800a446 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a44e:	f7ff ffd3 	bl	800a3f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a452:	f00a fec1 	bl	80151d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a456:	f7f9 fcff 	bl	8003e58 <main>
  bx  lr    
 800a45a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a45c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a464:	20000600 	.word	0x20000600
  ldr r2, =_sidata
 800a468:	0801b114 	.word	0x0801b114
  ldr r2, =_sbss
 800a46c:	20000600 	.word	0x20000600
  ldr r4, =_ebss
 800a470:	20008b40 	.word	0x20008b40

0800a474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a474:	e7fe      	b.n	800a474 <ADC_IRQHandler>
	...

0800a478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a47c:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <HAL_Init+0x40>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <HAL_Init+0x40>)
 800a482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a488:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <HAL_Init+0x40>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a0a      	ldr	r2, [pc, #40]	; (800a4b8 <HAL_Init+0x40>)
 800a48e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <HAL_Init+0x40>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a07      	ldr	r2, [pc, #28]	; (800a4b8 <HAL_Init+0x40>)
 800a49a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a49e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4a0:	2003      	movs	r0, #3
 800a4a2:	f000 ffcc 	bl	800b43e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f7ff fe86 	bl	800a1b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a4ac:	f7f7 fa3c 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	40023c00 	.word	0x40023c00

0800a4bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <HAL_IncTick+0x20>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4b06      	ldr	r3, [pc, #24]	; (800a4e0 <HAL_IncTick+0x24>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	4a04      	ldr	r2, [pc, #16]	; (800a4e0 <HAL_IncTick+0x24>)
 800a4ce:	6013      	str	r3, [r2, #0]
}
 800a4d0:	bf00      	nop
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	20000424 	.word	0x20000424
 800a4e0:	20008acc 	.word	0x20008acc

0800a4e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
  return uwTick;
 800a4e8:	4b03      	ldr	r3, [pc, #12]	; (800a4f8 <HAL_GetTick+0x14>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	20008acc 	.word	0x20008acc

0800a4fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a504:	f7ff ffee 	bl	800a4e4 <HAL_GetTick>
 800a508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a514:	d005      	beq.n	800a522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <HAL_Delay+0x44>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a522:	bf00      	nop
 800a524:	f7ff ffde 	bl	800a4e4 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	429a      	cmp	r2, r3
 800a532:	d8f7      	bhi.n	800a524 <HAL_Delay+0x28>
  {
  }
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000424 	.word	0x20000424

0800a544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e0ed      	b.n	800a732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f7f7 fa0c 	bl	8001980 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f022 0202 	bic.w	r2, r2, #2
 800a576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a578:	f7ff ffb4 	bl	800a4e4 <HAL_GetTick>
 800a57c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a57e:	e012      	b.n	800a5a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a580:	f7ff ffb0 	bl	800a4e4 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	2b0a      	cmp	r3, #10
 800a58c:	d90b      	bls.n	800a5a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2205      	movs	r2, #5
 800a59e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e0c5      	b.n	800a732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f003 0302 	and.w	r3, r3, #2
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e5      	bne.n	800a580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0201 	orr.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a5c4:	f7ff ff8e 	bl	800a4e4 <HAL_GetTick>
 800a5c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a5ca:	e012      	b.n	800a5f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a5cc:	f7ff ff8a 	bl	800a4e4 <HAL_GetTick>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2b0a      	cmp	r3, #10
 800a5d8:	d90b      	bls.n	800a5f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2205      	movs	r2, #5
 800a5ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e09f      	b.n	800a732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0e5      	beq.n	800a5cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	7e1b      	ldrb	r3, [r3, #24]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d108      	bne.n	800a61a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a616:	601a      	str	r2, [r3, #0]
 800a618:	e007      	b.n	800a62a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	7e5b      	ldrb	r3, [r3, #25]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d108      	bne.n	800a644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a640:	601a      	str	r2, [r3, #0]
 800a642:	e007      	b.n	800a654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7e9b      	ldrb	r3, [r3, #26]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d108      	bne.n	800a66e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0220 	orr.w	r2, r2, #32
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	e007      	b.n	800a67e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f022 0220 	bic.w	r2, r2, #32
 800a67c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	7edb      	ldrb	r3, [r3, #27]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d108      	bne.n	800a698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f022 0210 	bic.w	r2, r2, #16
 800a694:	601a      	str	r2, [r3, #0]
 800a696:	e007      	b.n	800a6a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0210 	orr.w	r2, r2, #16
 800a6a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	7f1b      	ldrb	r3, [r3, #28]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d108      	bne.n	800a6c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0208 	orr.w	r2, r2, #8
 800a6be:	601a      	str	r2, [r3, #0]
 800a6c0:	e007      	b.n	800a6d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 0208 	bic.w	r2, r2, #8
 800a6d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7f5b      	ldrb	r3, [r3, #29]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d108      	bne.n	800a6ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0204 	orr.w	r2, r2, #4
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	e007      	b.n	800a6fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0204 	bic.w	r2, r2, #4
 800a6fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689a      	ldr	r2, [r3, #8]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	431a      	orrs	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	ea42 0103 	orr.w	r1, r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	1e5a      	subs	r2, r3, #1
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	430a      	orrs	r2, r1
 800a720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b087      	sub	sp, #28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a752:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a754:	7cfb      	ldrb	r3, [r7, #19]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d003      	beq.n	800a762 <HAL_CAN_ConfigFilter+0x26>
 800a75a:	7cfb      	ldrb	r3, [r7, #19]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	f040 80be 	bne.w	800a8de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a762:	4b65      	ldr	r3, [pc, #404]	; (800a8f8 <HAL_CAN_ConfigFilter+0x1bc>)
 800a764:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a76c:	f043 0201 	orr.w	r2, r3, #1
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a77c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	431a      	orrs	r2, r3
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	f003 031f 	and.w	r3, r3, #31
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	43db      	mvns	r3, r3
 800a7b4:	401a      	ands	r2, r3
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	69db      	ldr	r3, [r3, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d123      	bne.n	800a80c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	43db      	mvns	r3, r3
 800a7ce:	401a      	ands	r2, r3
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a7e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	3248      	adds	r2, #72	; 0x48
 800a7ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a800:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a802:	6979      	ldr	r1, [r7, #20]
 800a804:	3348      	adds	r3, #72	; 0x48
 800a806:	00db      	lsls	r3, r3, #3
 800a808:	440b      	add	r3, r1
 800a80a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d122      	bne.n	800a85a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	431a      	orrs	r2, r3
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a834:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	3248      	adds	r2, #72	; 0x48
 800a83a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a84e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a850:	6979      	ldr	r1, [r7, #20]
 800a852:	3348      	adds	r3, #72	; 0x48
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	440b      	add	r3, r1
 800a858:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	43db      	mvns	r3, r3
 800a86c:	401a      	ands	r2, r3
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800a874:	e007      	b.n	800a886 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	431a      	orrs	r2, r3
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	43db      	mvns	r3, r3
 800a898:	401a      	ands	r2, r3
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a8a0:	e007      	b.n	800a8b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d107      	bne.n	800a8ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	431a      	orrs	r2, r3
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a8d0:	f023 0201 	bic.w	r2, r3, #1
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e006      	b.n	800a8ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
  }
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	371c      	adds	r7, #28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40006400 	.word	0x40006400

0800a8fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d12e      	bne.n	800a96e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2202      	movs	r2, #2
 800a914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0201 	bic.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a928:	f7ff fddc 	bl	800a4e4 <HAL_GetTick>
 800a92c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a92e:	e012      	b.n	800a956 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a930:	f7ff fdd8 	bl	800a4e4 <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b0a      	cmp	r3, #10
 800a93c:	d90b      	bls.n	800a956 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2205      	movs	r2, #5
 800a94e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e012      	b.n	800a97c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	e006      	b.n	800a97c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
  }
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800a984:	b480      	push	{r7}
 800a986:	b089      	sub	sp, #36	; 0x24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
 800a990:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a998:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800a9a2:	7ffb      	ldrb	r3, [r7, #31]
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d003      	beq.n	800a9b0 <HAL_CAN_AddTxMessage+0x2c>
 800a9a8:	7ffb      	ldrb	r3, [r7, #31]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	f040 80b8 	bne.w	800ab20 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d105      	bne.n	800a9d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80a0 	beq.w	800ab10 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	0e1b      	lsrs	r3, r3, #24
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d907      	bls.n	800a9f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e09e      	b.n	800ab2e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	409a      	lsls	r2, r3
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	6809      	ldr	r1, [r1, #0]
 800aa10:	431a      	orrs	r2, r3
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	3318      	adds	r3, #24
 800aa16:	011b      	lsls	r3, r3, #4
 800aa18:	440b      	add	r3, r1
 800aa1a:	601a      	str	r2, [r3, #0]
 800aa1c:	e00f      	b.n	800aa3e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa28:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800aa32:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3318      	adds	r3, #24
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	440b      	add	r3, r1
 800aa3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6819      	ldr	r1, [r3, #0]
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	691a      	ldr	r2, [r3, #16]
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	3318      	adds	r3, #24
 800aa4a:	011b      	lsls	r3, r3, #4
 800aa4c:	440b      	add	r3, r1
 800aa4e:	3304      	adds	r3, #4
 800aa50:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	7d1b      	ldrb	r3, [r3, #20]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d111      	bne.n	800aa7e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	3318      	adds	r3, #24
 800aa62:	011b      	lsls	r3, r3, #4
 800aa64:	4413      	add	r3, r2
 800aa66:	3304      	adds	r3, #4
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	6811      	ldr	r1, [r2, #0]
 800aa6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	3318      	adds	r3, #24
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	440b      	add	r3, r1
 800aa7a:	3304      	adds	r3, #4
 800aa7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3307      	adds	r3, #7
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	061a      	lsls	r2, r3, #24
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3306      	adds	r3, #6
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3305      	adds	r3, #5
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	3204      	adds	r2, #4
 800aa9e:	7812      	ldrb	r2, [r2, #0]
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	6811      	ldr	r1, [r2, #0]
 800aaa6:	ea43 0200 	orr.w	r2, r3, r0
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	440b      	add	r3, r1
 800aab0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800aab4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3303      	adds	r3, #3
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	061a      	lsls	r2, r3, #24
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3302      	adds	r3, #2
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	041b      	lsls	r3, r3, #16
 800aac6:	431a      	orrs	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	3301      	adds	r3, #1
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	021b      	lsls	r3, r3, #8
 800aad0:	4313      	orrs	r3, r2
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	7812      	ldrb	r2, [r2, #0]
 800aad6:	4610      	mov	r0, r2
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	6811      	ldr	r1, [r2, #0]
 800aadc:	ea43 0200 	orr.w	r2, r3, r0
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	440b      	add	r3, r1
 800aae6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800aaea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	3318      	adds	r3, #24
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	4413      	add	r3, r2
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	6811      	ldr	r1, [r2, #0]
 800aafe:	f043 0201 	orr.w	r2, r3, #1
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	3318      	adds	r3, #24
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	440b      	add	r3, r1
 800ab0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e00e      	b.n	800ab2e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e006      	b.n	800ab2e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3724      	adds	r7, #36	; 0x24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab4c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800ab4e:	7afb      	ldrb	r3, [r7, #11]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d002      	beq.n	800ab5a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d11d      	bne.n	800ab96 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3301      	adds	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800ab96:	68fb      	ldr	r3, [r7, #12]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abb8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d003      	beq.n	800abc8 <HAL_CAN_GetRxMessage+0x24>
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	f040 80f3 	bne.w	800adae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10e      	bne.n	800abec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d116      	bne.n	800ac0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e0e7      	b.n	800adbc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d107      	bne.n	800ac0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e0d8      	b.n	800adbc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	331b      	adds	r3, #27
 800ac12:	011b      	lsls	r3, r3, #4
 800ac14:	4413      	add	r3, r2
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0204 	and.w	r2, r3, #4
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10c      	bne.n	800ac42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	331b      	adds	r3, #27
 800ac30:	011b      	lsls	r3, r3, #4
 800ac32:	4413      	add	r3, r2
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	0d5b      	lsrs	r3, r3, #21
 800ac38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e00b      	b.n	800ac5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	331b      	adds	r3, #27
 800ac4a:	011b      	lsls	r3, r3, #4
 800ac4c:	4413      	add	r3, r2
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	08db      	lsrs	r3, r3, #3
 800ac52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	331b      	adds	r3, #27
 800ac62:	011b      	lsls	r3, r3, #4
 800ac64:	4413      	add	r3, r2
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0202 	and.w	r2, r3, #2
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	331b      	adds	r3, #27
 800ac78:	011b      	lsls	r3, r3, #4
 800ac7a:	4413      	add	r3, r2
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 020f 	and.w	r2, r3, #15
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	331b      	adds	r3, #27
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	4413      	add	r3, r2
 800ac94:	3304      	adds	r3, #4
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	0a1b      	lsrs	r3, r3, #8
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	331b      	adds	r3, #27
 800aca8:	011b      	lsls	r3, r3, #4
 800acaa:	4413      	add	r3, r2
 800acac:	3304      	adds	r3, #4
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	0c1b      	lsrs	r3, r3, #16
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	011b      	lsls	r3, r3, #4
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	0a1a      	lsrs	r2, r3, #8
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	3301      	adds	r3, #1
 800ace4:	b2d2      	uxtb	r2, r2
 800ace6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	0c1a      	lsrs	r2, r3, #16
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	3302      	adds	r3, #2
 800acfe:	b2d2      	uxtb	r2, r2
 800ad00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	0e1a      	lsrs	r2, r3, #24
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	3303      	adds	r3, #3
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681a      	ldr	r2, [r3, #0]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	4413      	add	r3, r2
 800ad26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	0a1a      	lsrs	r2, r3, #8
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	3305      	adds	r3, #5
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	011b      	lsls	r3, r3, #4
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	0c1a      	lsrs	r2, r3, #16
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	3306      	adds	r3, #6
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	011b      	lsls	r3, r3, #4
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	0e1a      	lsrs	r2, r3, #24
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	3307      	adds	r3, #7
 800ad7e:	b2d2      	uxtb	r2, r2
 800ad80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d108      	bne.n	800ad9a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f042 0220 	orr.w	r2, r2, #32
 800ad96:	60da      	str	r2, [r3, #12]
 800ad98:	e007      	b.n	800adaa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	691a      	ldr	r2, [r3, #16]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f042 0220 	orr.w	r2, r2, #32
 800ada8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800adaa:	2300      	movs	r3, #0
 800adac:	e006      	b.n	800adbc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
  }
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800add8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d002      	beq.n	800ade6 <HAL_CAN_ActivateNotification+0x1e>
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d109      	bne.n	800adfa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6959      	ldr	r1, [r3, #20]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	430a      	orrs	r2, r1
 800adf4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	e006      	b.n	800ae08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
  }
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68db      	ldr	r3, [r3, #12]
 800ae3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d07c      	beq.n	800af54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d023      	beq.n	800aeac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	f003 0302 	and.w	r3, r3, #2
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d003      	beq.n	800ae7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f983 	bl	800b182 <HAL_CAN_TxMailbox0CompleteCallback>
 800ae7c:	e016      	b.n	800aeac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d004      	beq.n	800ae92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae90:	e00c      	b.n	800aeac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	f003 0308 	and.w	r3, r3, #8
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d004      	beq.n	800aea6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aea2:	627b      	str	r3, [r7, #36]	; 0x24
 800aea4:	e002      	b.n	800aeac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f989 	bl	800b1be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d024      	beq.n	800af00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aebe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f963 	bl	800b196 <HAL_CAN_TxMailbox1CompleteCallback>
 800aed0:	e016      	b.n	800af00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d004      	beq.n	800aee6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
 800aee4:	e00c      	b.n	800af00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
 800aef8:	e002      	b.n	800af00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f969 	bl	800b1d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d024      	beq.n	800af54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800af12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f943 	bl	800b1aa <HAL_CAN_TxMailbox2CompleteCallback>
 800af24:	e016      	b.n	800af54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
 800af38:	e00c      	b.n	800af54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
 800af4c:	e002      	b.n	800af54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f949 	bl	800b1e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00c      	beq.n	800af78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	f003 0310 	and.w	r3, r3, #16
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2210      	movs	r2, #16
 800af76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00b      	beq.n	800af9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f003 0308 	and.w	r3, r3, #8
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d006      	beq.n	800af9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2208      	movs	r2, #8
 800af92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f930 	bl	800b1fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800af9a:	6a3b      	ldr	r3, [r7, #32]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d009      	beq.n	800afb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d002      	beq.n	800afb8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7fe f81a 	bl	8008fec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800afb8:	6a3b      	ldr	r3, [r7, #32]
 800afba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00c      	beq.n	800afdc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f003 0310 	and.w	r3, r3, #16
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d007      	beq.n	800afdc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2210      	movs	r2, #16
 800afda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	f003 0320 	and.w	r3, r3, #32
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f003 0308 	and.w	r3, r3, #8
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2208      	movs	r2, #8
 800aff6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f908 	bl	800b20e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	f003 0310 	and.w	r3, r3, #16
 800b004:	2b00      	cmp	r3, #0
 800b006:	d009      	beq.n	800b01c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7fe fa26 	bl	8009468 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b01c:	6a3b      	ldr	r3, [r7, #32]
 800b01e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00b      	beq.n	800b03e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	f003 0310 	and.w	r3, r3, #16
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d006      	beq.n	800b03e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2210      	movs	r2, #16
 800b036:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f8f2 	bl	800b222 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00b      	beq.n	800b060 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d006      	beq.n	800b060 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2208      	movs	r2, #8
 800b058:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f8eb 	bl	800b236 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d07b      	beq.n	800b162 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d072      	beq.n	800b15a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b074:	6a3b      	ldr	r3, [r7, #32]
 800b076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d008      	beq.n	800b090 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b084:	2b00      	cmp	r3, #0
 800b086:	d003      	beq.n	800b090 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	f043 0301 	orr.w	r3, r3, #1
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b096:	2b00      	cmp	r3, #0
 800b098:	d008      	beq.n	800b0ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	f043 0302 	orr.w	r3, r3, #2
 800b0aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c2:	f043 0304 	orr.w	r3, r3, #4
 800b0c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d043      	beq.n	800b15a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d03e      	beq.n	800b15a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0e2:	2b60      	cmp	r3, #96	; 0x60
 800b0e4:	d02b      	beq.n	800b13e <HAL_CAN_IRQHandler+0x32a>
 800b0e6:	2b60      	cmp	r3, #96	; 0x60
 800b0e8:	d82e      	bhi.n	800b148 <HAL_CAN_IRQHandler+0x334>
 800b0ea:	2b50      	cmp	r3, #80	; 0x50
 800b0ec:	d022      	beq.n	800b134 <HAL_CAN_IRQHandler+0x320>
 800b0ee:	2b50      	cmp	r3, #80	; 0x50
 800b0f0:	d82a      	bhi.n	800b148 <HAL_CAN_IRQHandler+0x334>
 800b0f2:	2b40      	cmp	r3, #64	; 0x40
 800b0f4:	d019      	beq.n	800b12a <HAL_CAN_IRQHandler+0x316>
 800b0f6:	2b40      	cmp	r3, #64	; 0x40
 800b0f8:	d826      	bhi.n	800b148 <HAL_CAN_IRQHandler+0x334>
 800b0fa:	2b30      	cmp	r3, #48	; 0x30
 800b0fc:	d010      	beq.n	800b120 <HAL_CAN_IRQHandler+0x30c>
 800b0fe:	2b30      	cmp	r3, #48	; 0x30
 800b100:	d822      	bhi.n	800b148 <HAL_CAN_IRQHandler+0x334>
 800b102:	2b10      	cmp	r3, #16
 800b104:	d002      	beq.n	800b10c <HAL_CAN_IRQHandler+0x2f8>
 800b106:	2b20      	cmp	r3, #32
 800b108:	d005      	beq.n	800b116 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b10a:	e01d      	b.n	800b148 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	f043 0308 	orr.w	r3, r3, #8
 800b112:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b114:	e019      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	f043 0310 	orr.w	r3, r3, #16
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b11e:	e014      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	f043 0320 	orr.w	r3, r3, #32
 800b126:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b128:	e00f      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b130:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b132:	e00a      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b13c:	e005      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b144:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b146:	e000      	b.n	800b14a <HAL_CAN_IRQHandler+0x336>
            break;
 800b148:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	699a      	ldr	r2, [r3, #24]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b158:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2204      	movs	r2, #4
 800b160:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d008      	beq.n	800b17a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	431a      	orrs	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f868 	bl	800b24a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b17a:	bf00      	nop
 800b17c:	3728      	adds	r7, #40	; 0x28
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b18a:	bf00      	nop
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b196:	b480      	push	{r7}
 800b198:	b083      	sub	sp, #12
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b19e:	bf00      	nop
 800b1a0:	370c      	adds	r7, #12
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b083      	sub	sp, #12
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b083      	sub	sp, #12
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
	...

0800b260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b260:	b480      	push	{r7}
 800b262:	b085      	sub	sp, #20
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f003 0307 	and.w	r3, r3, #7
 800b26e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b270:	4b0c      	ldr	r3, [pc, #48]	; (800b2a4 <__NVIC_SetPriorityGrouping+0x44>)
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b27c:	4013      	ands	r3, r2
 800b27e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b28c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b292:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <__NVIC_SetPriorityGrouping+0x44>)
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	60d3      	str	r3, [r2, #12]
}
 800b298:	bf00      	nop
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr
 800b2a4:	e000ed00 	.word	0xe000ed00

0800b2a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b2ac:	4b04      	ldr	r3, [pc, #16]	; (800b2c0 <__NVIC_GetPriorityGrouping+0x18>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	0a1b      	lsrs	r3, r3, #8
 800b2b2:	f003 0307 	and.w	r3, r3, #7
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr
 800b2c0:	e000ed00 	.word	0xe000ed00

0800b2c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b2ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	db0b      	blt.n	800b2ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	f003 021f 	and.w	r2, r3, #31
 800b2dc:	4907      	ldr	r1, [pc, #28]	; (800b2fc <__NVIC_EnableIRQ+0x38>)
 800b2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2e2:	095b      	lsrs	r3, r3, #5
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	fa00 f202 	lsl.w	r2, r0, r2
 800b2ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b2ee:	bf00      	nop
 800b2f0:	370c      	adds	r7, #12
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	e000e100 	.word	0xe000e100

0800b300 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	4603      	mov	r3, r0
 800b308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b30a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	db12      	blt.n	800b338 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	f003 021f 	and.w	r2, r3, #31
 800b318:	490a      	ldr	r1, [pc, #40]	; (800b344 <__NVIC_DisableIRQ+0x44>)
 800b31a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b31e:	095b      	lsrs	r3, r3, #5
 800b320:	2001      	movs	r0, #1
 800b322:	fa00 f202 	lsl.w	r2, r0, r2
 800b326:	3320      	adds	r3, #32
 800b328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b32c:	f3bf 8f4f 	dsb	sy
}
 800b330:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b332:	f3bf 8f6f 	isb	sy
}
 800b336:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	e000e100 	.word	0xe000e100

0800b348 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b356:	2b00      	cmp	r3, #0
 800b358:	db0c      	blt.n	800b374 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	f003 021f 	and.w	r2, r3, #31
 800b360:	4907      	ldr	r1, [pc, #28]	; (800b380 <__NVIC_ClearPendingIRQ+0x38>)
 800b362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b366:	095b      	lsrs	r3, r3, #5
 800b368:	2001      	movs	r0, #1
 800b36a:	fa00 f202 	lsl.w	r2, r0, r2
 800b36e:	3360      	adds	r3, #96	; 0x60
 800b370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	e000e100 	.word	0xe000e100

0800b384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	4603      	mov	r3, r0
 800b38c:	6039      	str	r1, [r7, #0]
 800b38e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b394:	2b00      	cmp	r3, #0
 800b396:	db0a      	blt.n	800b3ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	490c      	ldr	r1, [pc, #48]	; (800b3d0 <__NVIC_SetPriority+0x4c>)
 800b39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3a2:	0112      	lsls	r2, r2, #4
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	440b      	add	r3, r1
 800b3a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b3ac:	e00a      	b.n	800b3c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	4908      	ldr	r1, [pc, #32]	; (800b3d4 <__NVIC_SetPriority+0x50>)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	f003 030f 	and.w	r3, r3, #15
 800b3ba:	3b04      	subs	r3, #4
 800b3bc:	0112      	lsls	r2, r2, #4
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	761a      	strb	r2, [r3, #24]
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	e000e100 	.word	0xe000e100
 800b3d4:	e000ed00 	.word	0xe000ed00

0800b3d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b089      	sub	sp, #36	; 0x24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f003 0307 	and.w	r3, r3, #7
 800b3ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	f1c3 0307 	rsb	r3, r3, #7
 800b3f2:	2b04      	cmp	r3, #4
 800b3f4:	bf28      	it	cs
 800b3f6:	2304      	movcs	r3, #4
 800b3f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	3304      	adds	r3, #4
 800b3fe:	2b06      	cmp	r3, #6
 800b400:	d902      	bls.n	800b408 <NVIC_EncodePriority+0x30>
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	3b03      	subs	r3, #3
 800b406:	e000      	b.n	800b40a <NVIC_EncodePriority+0x32>
 800b408:	2300      	movs	r3, #0
 800b40a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	fa02 f303 	lsl.w	r3, r2, r3
 800b416:	43da      	mvns	r2, r3
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	401a      	ands	r2, r3
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	fa01 f303 	lsl.w	r3, r1, r3
 800b42a:	43d9      	mvns	r1, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b430:	4313      	orrs	r3, r2
         );
}
 800b432:	4618      	mov	r0, r3
 800b434:	3724      	adds	r7, #36	; 0x24
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b082      	sub	sp, #8
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7ff ff0a 	bl	800b260 <__NVIC_SetPriorityGrouping>
}
 800b44c:	bf00      	nop
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	60b9      	str	r1, [r7, #8]
 800b45e:	607a      	str	r2, [r7, #4]
 800b460:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b466:	f7ff ff1f 	bl	800b2a8 <__NVIC_GetPriorityGrouping>
 800b46a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	68b9      	ldr	r1, [r7, #8]
 800b470:	6978      	ldr	r0, [r7, #20]
 800b472:	f7ff ffb1 	bl	800b3d8 <NVIC_EncodePriority>
 800b476:	4602      	mov	r2, r0
 800b478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b47c:	4611      	mov	r1, r2
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ff80 	bl	800b384 <__NVIC_SetPriority>
}
 800b484:	bf00      	nop
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7ff ff12 	bl	800b2c4 <__NVIC_EnableIRQ>
}
 800b4a0:	bf00      	nop
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7ff ff22 	bl	800b300 <__NVIC_DisableIRQ>
}
 800b4bc:	bf00      	nop
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800b4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff ff38 	bl	800b348 <__NVIC_ClearPendingIRQ>
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b4ec:	f7fe fffa 	bl	800a4e4 <HAL_GetTick>
 800b4f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d101      	bne.n	800b4fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e099      	b.n	800b630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2202      	movs	r2, #2
 800b508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0201 	bic.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b51c:	e00f      	b.n	800b53e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b51e:	f7fe ffe1 	bl	800a4e4 <HAL_GetTick>
 800b522:	4602      	mov	r2, r0
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	2b05      	cmp	r3, #5
 800b52a:	d908      	bls.n	800b53e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2220      	movs	r2, #32
 800b530:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2203      	movs	r2, #3
 800b536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e078      	b.n	800b630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1e8      	bne.n	800b51e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	4b38      	ldr	r3, [pc, #224]	; (800b638 <HAL_DMA_Init+0x158>)
 800b558:	4013      	ands	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b56a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a1b      	ldr	r3, [r3, #32]
 800b588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b594:	2b04      	cmp	r3, #4
 800b596:	d107      	bne.n	800b5a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f023 0307 	bic.w	r3, r3, #7
 800b5be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	697a      	ldr	r2, [r7, #20]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	2b04      	cmp	r3, #4
 800b5d0:	d117      	bne.n	800b602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00e      	beq.n	800b602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fb09 	bl	800bbfc <DMA_CheckFifoParam>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d008      	beq.n	800b602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2240      	movs	r2, #64	; 0x40
 800b5f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b5fe:	2301      	movs	r3, #1
 800b600:	e016      	b.n	800b630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 fac0 	bl	800bb90 <DMA_CalcBaseAndBitshift>
 800b610:	4603      	mov	r3, r0
 800b612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b618:	223f      	movs	r2, #63	; 0x3f
 800b61a:	409a      	lsls	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	f010803f 	.word	0xf010803f

0800b63c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e050      	b.n	800b6f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b02      	cmp	r3, #2
 800b658:	d101      	bne.n	800b65e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b65a:	2302      	movs	r3, #2
 800b65c:	e048      	b.n	800b6f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f022 0201 	bic.w	r2, r2, #1
 800b66c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2200      	movs	r2, #0
 800b67c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2200      	movs	r2, #0
 800b684:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2200      	movs	r2, #0
 800b68c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2200      	movs	r2, #0
 800b694:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2221      	movs	r2, #33	; 0x21
 800b69c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fa76 	bl	800bb90 <DMA_CalcBaseAndBitshift>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d0:	223f      	movs	r2, #63	; 0x3f
 800b6d2:	409a      	lsls	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b70e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <HAL_DMA_Start_IT+0x26>
 800b71a:	2302      	movs	r3, #2
 800b71c:	e040      	b.n	800b7a0 <HAL_DMA_Start_IT+0xa8>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d12f      	bne.n	800b792 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2202      	movs	r2, #2
 800b736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2200      	movs	r2, #0
 800b73e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f000 f9f4 	bl	800bb34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b750:	223f      	movs	r2, #63	; 0x3f
 800b752:	409a      	lsls	r2, r3
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f042 0216 	orr.w	r2, r2, #22
 800b766:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d007      	beq.n	800b780 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0208 	orr.w	r2, r2, #8
 800b77e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f042 0201 	orr.w	r2, r2, #1
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	e005      	b.n	800b79e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
 800b79c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	d004      	beq.n	800b7c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2280      	movs	r2, #128	; 0x80
 800b7c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e00c      	b.n	800b7e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0201 	bic.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7f8:	4b92      	ldr	r3, [pc, #584]	; (800ba44 <HAL_DMA_IRQHandler+0x258>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a92      	ldr	r2, [pc, #584]	; (800ba48 <HAL_DMA_IRQHandler+0x25c>)
 800b7fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b802:	0a9b      	lsrs	r3, r3, #10
 800b804:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b80a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b816:	2208      	movs	r2, #8
 800b818:	409a      	lsls	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4013      	ands	r3, r2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d01a      	beq.n	800b858 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 0304 	and.w	r3, r3, #4
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d013      	beq.n	800b858 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f022 0204 	bic.w	r2, r2, #4
 800b83e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b844:	2208      	movs	r2, #8
 800b846:	409a      	lsls	r2, r3
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b850:	f043 0201 	orr.w	r2, r3, #1
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b85c:	2201      	movs	r2, #1
 800b85e:	409a      	lsls	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4013      	ands	r3, r2
 800b864:	2b00      	cmp	r3, #0
 800b866:	d012      	beq.n	800b88e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00b      	beq.n	800b88e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b87a:	2201      	movs	r2, #1
 800b87c:	409a      	lsls	r2, r3
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b886:	f043 0202 	orr.w	r2, r3, #2
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b892:	2204      	movs	r2, #4
 800b894:	409a      	lsls	r2, r3
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4013      	ands	r3, r2
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d012      	beq.n	800b8c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0302 	and.w	r3, r3, #2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00b      	beq.n	800b8c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	409a      	lsls	r2, r3
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8bc:	f043 0204 	orr.w	r2, r3, #4
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8c8:	2210      	movs	r2, #16
 800b8ca:	409a      	lsls	r2, r3
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4013      	ands	r3, r2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d043      	beq.n	800b95c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 0308 	and.w	r3, r3, #8
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d03c      	beq.n	800b95c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8e6:	2210      	movs	r2, #16
 800b8e8:	409a      	lsls	r2, r3
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d018      	beq.n	800b92e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d108      	bne.n	800b91c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d024      	beq.n	800b95c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
 800b91a:	e01f      	b.n	800b95c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01b      	beq.n	800b95c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	4798      	blx	r3
 800b92c:	e016      	b.n	800b95c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d107      	bne.n	800b94c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f022 0208 	bic.w	r2, r2, #8
 800b94a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b960:	2220      	movs	r2, #32
 800b962:	409a      	lsls	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4013      	ands	r3, r2
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 808e 	beq.w	800ba8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 0310 	and.w	r3, r3, #16
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 8086 	beq.w	800ba8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b982:	2220      	movs	r2, #32
 800b984:	409a      	lsls	r2, r3
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b05      	cmp	r3, #5
 800b994:	d136      	bne.n	800ba04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f022 0216 	bic.w	r2, r2, #22
 800b9a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695a      	ldr	r2, [r3, #20]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d103      	bne.n	800b9c6 <HAL_DMA_IRQHandler+0x1da>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 0208 	bic.w	r2, r2, #8
 800b9d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9da:	223f      	movs	r2, #63	; 0x3f
 800b9dc:	409a      	lsls	r2, r3
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d07d      	beq.n	800baf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	4798      	blx	r3
        }
        return;
 800ba02:	e078      	b.n	800baf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d01c      	beq.n	800ba4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d108      	bne.n	800ba32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d030      	beq.n	800ba8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	4798      	blx	r3
 800ba30:	e02b      	b.n	800ba8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d027      	beq.n	800ba8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
 800ba42:	e022      	b.n	800ba8a <HAL_DMA_IRQHandler+0x29e>
 800ba44:	2000041c 	.word	0x2000041c
 800ba48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10f      	bne.n	800ba7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f022 0210 	bic.w	r2, r2, #16
 800ba68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d003      	beq.n	800ba8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d032      	beq.n	800baf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d022      	beq.n	800bae4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2205      	movs	r2, #5
 800baa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f022 0201 	bic.w	r2, r2, #1
 800bab4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	3301      	adds	r3, #1
 800baba:	60bb      	str	r3, [r7, #8]
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d307      	bcc.n	800bad2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1f2      	bne.n	800bab6 <HAL_DMA_IRQHandler+0x2ca>
 800bad0:	e000      	b.n	800bad4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bad2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	4798      	blx	r3
 800baf4:	e000      	b.n	800baf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 800baf6:	bf00      	nop
    }
  }
}
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop

0800bb00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb0e:	b2db      	uxtb	r3, r3
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	2b40      	cmp	r3, #64	; 0x40
 800bb60:	d108      	bne.n	800bb74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb72:	e007      	b.n	800bb84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	60da      	str	r2, [r3, #12]
}
 800bb84:	bf00      	nop
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	3b10      	subs	r3, #16
 800bba0:	4a14      	ldr	r2, [pc, #80]	; (800bbf4 <DMA_CalcBaseAndBitshift+0x64>)
 800bba2:	fba2 2303 	umull	r2, r3, r2, r3
 800bba6:	091b      	lsrs	r3, r3, #4
 800bba8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bbaa:	4a13      	ldr	r2, [pc, #76]	; (800bbf8 <DMA_CalcBaseAndBitshift+0x68>)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d909      	bls.n	800bbd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbc6:	f023 0303 	bic.w	r3, r3, #3
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	659a      	str	r2, [r3, #88]	; 0x58
 800bbd0:	e007      	b.n	800bbe2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bbda:	f023 0303 	bic.w	r3, r3, #3
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	aaaaaaab 	.word	0xaaaaaaab
 800bbf8:	0801ac44 	.word	0x0801ac44

0800bbfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc04:	2300      	movs	r3, #0
 800bc06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d11f      	bne.n	800bc56 <DMA_CheckFifoParam+0x5a>
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2b03      	cmp	r3, #3
 800bc1a:	d856      	bhi.n	800bcca <DMA_CheckFifoParam+0xce>
 800bc1c:	a201      	add	r2, pc, #4	; (adr r2, 800bc24 <DMA_CheckFifoParam+0x28>)
 800bc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc22:	bf00      	nop
 800bc24:	0800bc35 	.word	0x0800bc35
 800bc28:	0800bc47 	.word	0x0800bc47
 800bc2c:	0800bc35 	.word	0x0800bc35
 800bc30:	0800bccb 	.word	0x0800bccb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d046      	beq.n	800bcce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc44:	e043      	b.n	800bcce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc4e:	d140      	bne.n	800bcd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc54:	e03d      	b.n	800bcd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5e:	d121      	bne.n	800bca4 <DMA_CheckFifoParam+0xa8>
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2b03      	cmp	r3, #3
 800bc64:	d837      	bhi.n	800bcd6 <DMA_CheckFifoParam+0xda>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <DMA_CheckFifoParam+0x70>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc83 	.word	0x0800bc83
 800bc74:	0800bc7d 	.word	0x0800bc7d
 800bc78:	0800bc95 	.word	0x0800bc95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc80:	e030      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d025      	beq.n	800bcda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc92:	e022      	b.n	800bcda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc9c:	d11f      	bne.n	800bcde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bca2:	e01c      	b.n	800bcde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d903      	bls.n	800bcb2 <DMA_CheckFifoParam+0xb6>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d003      	beq.n	800bcb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bcb0:	e018      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	73fb      	strb	r3, [r7, #15]
      break;
 800bcb6:	e015      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00e      	beq.n	800bce2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc8:	e00b      	b.n	800bce2 <DMA_CheckFifoParam+0xe6>
      break;
 800bcca:	bf00      	nop
 800bccc:	e00a      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcce:	bf00      	nop
 800bcd0:	e008      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcd2:	bf00      	nop
 800bcd4:	e006      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcd6:	bf00      	nop
 800bcd8:	e004      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;
 800bcda:	bf00      	nop
 800bcdc:	e002      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;   
 800bcde:	bf00      	nop
 800bce0:	e000      	b.n	800bce4 <DMA_CheckFifoParam+0xe8>
      break;
 800bce2:	bf00      	nop
    }
  } 
  
  return status; 
 800bce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop

0800bcf4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bd06:	4b23      	ldr	r3, [pc, #140]	; (800bd94 <HAL_FLASH_Program+0xa0>)
 800bd08:	7e1b      	ldrb	r3, [r3, #24]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d101      	bne.n	800bd12 <HAL_FLASH_Program+0x1e>
 800bd0e:	2302      	movs	r3, #2
 800bd10:	e03b      	b.n	800bd8a <HAL_FLASH_Program+0x96>
 800bd12:	4b20      	ldr	r3, [pc, #128]	; (800bd94 <HAL_FLASH_Program+0xa0>)
 800bd14:	2201      	movs	r2, #1
 800bd16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bd18:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd1c:	f000 f87c 	bl	800be18 <FLASH_WaitForLastOperation>
 800bd20:	4603      	mov	r3, r0
 800bd22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d12b      	bne.n	800bd82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d105      	bne.n	800bd3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800bd30:	783b      	ldrb	r3, [r7, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	f000 f927 	bl	800bf88 <FLASH_Program_Byte>
 800bd3a:	e016      	b.n	800bd6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d105      	bne.n	800bd4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800bd42:	883b      	ldrh	r3, [r7, #0]
 800bd44:	4619      	mov	r1, r3
 800bd46:	68b8      	ldr	r0, [r7, #8]
 800bd48:	f000 f8fa 	bl	800bf40 <FLASH_Program_HalfWord>
 800bd4c:	e00d      	b.n	800bd6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d105      	bne.n	800bd60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	4619      	mov	r1, r3
 800bd58:	68b8      	ldr	r0, [r7, #8]
 800bd5a:	f000 f8cf 	bl	800befc <FLASH_Program_Word>
 800bd5e:	e004      	b.n	800bd6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800bd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd64:	68b8      	ldr	r0, [r7, #8]
 800bd66:	f000 f897 	bl	800be98 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bd6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bd6e:	f000 f853 	bl	800be18 <FLASH_WaitForLastOperation>
 800bd72:	4603      	mov	r3, r0
 800bd74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800bd76:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <HAL_FLASH_Program+0xa4>)
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <HAL_FLASH_Program+0xa4>)
 800bd7c:	f023 0301 	bic.w	r3, r3, #1
 800bd80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bd82:	4b04      	ldr	r3, [pc, #16]	; (800bd94 <HAL_FLASH_Program+0xa0>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	761a      	strb	r2, [r3, #24]
  
  return status;
 800bd88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20008ad0 	.word	0x20008ad0
 800bd98:	40023c00 	.word	0x40023c00

0800bd9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bda6:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <HAL_FLASH_Unlock+0x38>)
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da0b      	bge.n	800bdc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800bdae:	4b09      	ldr	r3, [pc, #36]	; (800bdd4 <HAL_FLASH_Unlock+0x38>)
 800bdb0:	4a09      	ldr	r2, [pc, #36]	; (800bdd8 <HAL_FLASH_Unlock+0x3c>)
 800bdb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800bdb4:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <HAL_FLASH_Unlock+0x38>)
 800bdb6:	4a09      	ldr	r2, [pc, #36]	; (800bddc <HAL_FLASH_Unlock+0x40>)
 800bdb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800bdba:	4b06      	ldr	r3, [pc, #24]	; (800bdd4 <HAL_FLASH_Unlock+0x38>)
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da01      	bge.n	800bdc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	370c      	adds	r7, #12
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	40023c00 	.word	0x40023c00
 800bdd8:	45670123 	.word	0x45670123
 800bddc:	cdef89ab 	.word	0xcdef89ab

0800bde0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <HAL_FLASH_Lock+0x1c>)
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	4a04      	ldr	r2, [pc, #16]	; (800bdfc <HAL_FLASH_Lock+0x1c>)
 800bdea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	40023c00 	.word	0x40023c00

0800be00 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800be04:	4b03      	ldr	r3, [pc, #12]	; (800be14 <HAL_FLASH_GetError+0x14>)
 800be06:	69db      	ldr	r3, [r3, #28]
}  
 800be08:	4618      	mov	r0, r3
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20008ad0 	.word	0x20008ad0

0800be18 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800be24:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <FLASH_WaitForLastOperation+0x78>)
 800be26:	2200      	movs	r2, #0
 800be28:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800be2a:	f7fe fb5b 	bl	800a4e4 <HAL_GetTick>
 800be2e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800be30:	e010      	b.n	800be54 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be38:	d00c      	beq.n	800be54 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d007      	beq.n	800be50 <FLASH_WaitForLastOperation+0x38>
 800be40:	f7fe fb50 	bl	800a4e4 <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d201      	bcs.n	800be54 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e019      	b.n	800be88 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800be54:	4b0f      	ldr	r3, [pc, #60]	; (800be94 <FLASH_WaitForLastOperation+0x7c>)
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e8      	bne.n	800be32 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800be60:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <FLASH_WaitForLastOperation+0x7c>)
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800be6c:	4b09      	ldr	r3, [pc, #36]	; (800be94 <FLASH_WaitForLastOperation+0x7c>)
 800be6e:	2201      	movs	r2, #1
 800be70:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800be72:	4b08      	ldr	r3, [pc, #32]	; (800be94 <FLASH_WaitForLastOperation+0x7c>)
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800be7e:	f000 f8a5 	bl	800bfcc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800be86:	2300      	movs	r3, #0
  
}  
 800be88:	4618      	mov	r0, r3
 800be8a:	3710      	adds	r7, #16
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	20008ad0 	.word	0x20008ad0
 800be94:	40023c00 	.word	0x40023c00

0800be98 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bea4:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	4a13      	ldr	r2, [pc, #76]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800beaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800beb0:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	4a10      	ldr	r2, [pc, #64]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800beb6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800beba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	4a0d      	ldr	r2, [pc, #52]	; (800bef8 <FLASH_Program_DoubleWord+0x60>)
 800bec2:	f043 0301 	orr.w	r3, r3, #1
 800bec6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800bece:	f3bf 8f6f 	isb	sy
}
 800bed2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800bed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bed8:	f04f 0200 	mov.w	r2, #0
 800bedc:	f04f 0300 	mov.w	r3, #0
 800bee0:	000a      	movs	r2, r1
 800bee2:	2300      	movs	r3, #0
 800bee4:	68f9      	ldr	r1, [r7, #12]
 800bee6:	3104      	adds	r1, #4
 800bee8:	4613      	mov	r3, r2
 800beea:	600b      	str	r3, [r1, #0]
}
 800beec:	bf00      	nop
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr
 800bef8:	40023c00 	.word	0x40023c00

0800befc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf06:	4b0d      	ldr	r3, [pc, #52]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	4a0c      	ldr	r2, [pc, #48]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf10:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800bf12:	4b0a      	ldr	r3, [pc, #40]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	4a09      	ldr	r2, [pc, #36]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bf1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bf1e:	4b07      	ldr	r3, [pc, #28]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	4a06      	ldr	r2, [pc, #24]	; (800bf3c <FLASH_Program_Word+0x40>)
 800bf24:	f043 0301 	orr.w	r3, r3, #1
 800bf28:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	601a      	str	r2, [r3, #0]
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr
 800bf3c:	40023c00 	.word	0x40023c00

0800bf40 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf4c:	4b0d      	ldr	r3, [pc, #52]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	4a0c      	ldr	r2, [pc, #48]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	4a09      	ldr	r2, [pc, #36]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bf64:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	4a06      	ldr	r2, [pc, #24]	; (800bf84 <FLASH_Program_HalfWord+0x44>)
 800bf6a:	f043 0301 	orr.w	r3, r3, #1
 800bf6e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	887a      	ldrh	r2, [r7, #2]
 800bf74:	801a      	strh	r2, [r3, #0]
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	40023c00 	.word	0x40023c00

0800bf88 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800bf94:	4b0c      	ldr	r3, [pc, #48]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	4a0b      	ldr	r2, [pc, #44]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bf9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bfa2:	4a09      	ldr	r2, [pc, #36]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bfa4:	691b      	ldr	r3, [r3, #16]
 800bfa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800bfa8:	4b07      	ldr	r3, [pc, #28]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	4a06      	ldr	r2, [pc, #24]	; (800bfc8 <FLASH_Program_Byte+0x40>)
 800bfae:	f043 0301 	orr.w	r3, r3, #1
 800bfb2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	78fa      	ldrb	r2, [r7, #3]
 800bfb8:	701a      	strb	r2, [r3, #0]
}
 800bfba:	bf00      	nop
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr
 800bfc6:	bf00      	nop
 800bfc8:	40023c00 	.word	0x40023c00

0800bfcc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800bfcc:	b480      	push	{r7}
 800bfce:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800bfd0:	4b27      	ldr	r3, [pc, #156]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f003 0310 	and.w	r3, r3, #16
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d008      	beq.n	800bfee <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800bfdc:	4b25      	ldr	r3, [pc, #148]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800bfde:	69db      	ldr	r3, [r3, #28]
 800bfe0:	f043 0310 	orr.w	r3, r3, #16
 800bfe4:	4a23      	ldr	r2, [pc, #140]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800bfe6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800bfe8:	4b21      	ldr	r3, [pc, #132]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800bfea:	2210      	movs	r2, #16
 800bfec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800bfee:	4b20      	ldr	r3, [pc, #128]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d008      	beq.n	800c00c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800bffa:	4b1e      	ldr	r3, [pc, #120]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	f043 0308 	orr.w	r3, r3, #8
 800c002:	4a1c      	ldr	r2, [pc, #112]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c004:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800c006:	4b1a      	ldr	r3, [pc, #104]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c008:	2220      	movs	r2, #32
 800c00a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800c00c:	4b18      	ldr	r3, [pc, #96]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c014:	2b00      	cmp	r3, #0
 800c016:	d008      	beq.n	800c02a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800c018:	4b16      	ldr	r3, [pc, #88]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	f043 0304 	orr.w	r3, r3, #4
 800c020:	4a14      	ldr	r2, [pc, #80]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c022:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800c024:	4b12      	ldr	r3, [pc, #72]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c026:	2240      	movs	r2, #64	; 0x40
 800c028:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800c02a:	4b11      	ldr	r3, [pc, #68]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800c036:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	f043 0302 	orr.w	r3, r3, #2
 800c03e:	4a0d      	ldr	r2, [pc, #52]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c040:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800c042:	4b0b      	ldr	r3, [pc, #44]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c044:	2280      	movs	r2, #128	; 0x80
 800c046:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800c048:	4b09      	ldr	r3, [pc, #36]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c04a:	68db      	ldr	r3, [r3, #12]
 800c04c:	f003 0302 	and.w	r3, r3, #2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d008      	beq.n	800c066 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800c054:	4b07      	ldr	r3, [pc, #28]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	f043 0320 	orr.w	r3, r3, #32
 800c05c:	4a05      	ldr	r2, [pc, #20]	; (800c074 <FLASH_SetErrorCode+0xa8>)
 800c05e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800c060:	4b03      	ldr	r3, [pc, #12]	; (800c070 <FLASH_SetErrorCode+0xa4>)
 800c062:	2202      	movs	r2, #2
 800c064:	60da      	str	r2, [r3, #12]
  }
}
 800c066:	bf00      	nop
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	40023c00 	.word	0x40023c00
 800c074:	20008ad0 	.word	0x20008ad0

0800c078 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800c086:	2300      	movs	r3, #0
 800c088:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c08a:	4b31      	ldr	r3, [pc, #196]	; (800c150 <HAL_FLASHEx_Erase+0xd8>)
 800c08c:	7e1b      	ldrb	r3, [r3, #24]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d101      	bne.n	800c096 <HAL_FLASHEx_Erase+0x1e>
 800c092:	2302      	movs	r3, #2
 800c094:	e058      	b.n	800c148 <HAL_FLASHEx_Erase+0xd0>
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <HAL_FLASHEx_Erase+0xd8>)
 800c098:	2201      	movs	r2, #1
 800c09a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c09c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c0a0:	f7ff feba 	bl	800be18 <FLASH_WaitForLastOperation>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d148      	bne.n	800c140 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c0b4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b01      	cmp	r3, #1
 800c0bc:	d115      	bne.n	800c0ea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4610      	mov	r0, r2
 800c0cc:	f000 f844 	bl	800c158 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c0d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c0d4:	f7ff fea0 	bl	800be18 <FLASH_WaitForLastOperation>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <HAL_FLASHEx_Erase+0xdc>)
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	4a1c      	ldr	r2, [pc, #112]	; (800c154 <HAL_FLASHEx_Erase+0xdc>)
 800c0e2:	f023 0304 	bic.w	r3, r3, #4
 800c0e6:	6113      	str	r3, [r2, #16]
 800c0e8:	e028      	b.n	800c13c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	60bb      	str	r3, [r7, #8]
 800c0f0:	e01c      	b.n	800c12c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	691b      	ldr	r3, [r3, #16]
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	68b8      	ldr	r0, [r7, #8]
 800c0fc:	f000 f850 	bl	800c1a0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c100:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c104:	f7ff fe88 	bl	800be18 <FLASH_WaitForLastOperation>
 800c108:	4603      	mov	r3, r0
 800c10a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800c10c:	4b11      	ldr	r3, [pc, #68]	; (800c154 <HAL_FLASHEx_Erase+0xdc>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	4a10      	ldr	r2, [pc, #64]	; (800c154 <HAL_FLASHEx_Erase+0xdc>)
 800c112:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800c116:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	601a      	str	r2, [r3, #0]
          break;
 800c124:	e00a      	b.n	800c13c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	3301      	adds	r3, #1
 800c12a:	60bb      	str	r3, [r7, #8]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68da      	ldr	r2, [r3, #12]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	4413      	add	r3, r2
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d3da      	bcc.n	800c0f2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800c13c:	f000 f878 	bl	800c230 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c140:	4b03      	ldr	r3, [pc, #12]	; (800c150 <HAL_FLASHEx_Erase+0xd8>)
 800c142:	2200      	movs	r2, #0
 800c144:	761a      	strb	r2, [r3, #24]

  return status;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20008ad0 	.word	0x20008ad0
 800c154:	40023c00 	.word	0x40023c00

0800c158 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	4603      	mov	r3, r0
 800c160:	6039      	str	r1, [r7, #0]
 800c162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <FLASH_MassErase+0x44>)
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	4a0c      	ldr	r2, [pc, #48]	; (800c19c <FLASH_MassErase+0x44>)
 800c16a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c16e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <FLASH_MassErase+0x44>)
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	4a09      	ldr	r2, [pc, #36]	; (800c19c <FLASH_MassErase+0x44>)
 800c176:	f043 0304 	orr.w	r3, r3, #4
 800c17a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <FLASH_MassErase+0x44>)
 800c17e:	691a      	ldr	r2, [r3, #16]
 800c180:	79fb      	ldrb	r3, [r7, #7]
 800c182:	021b      	lsls	r3, r3, #8
 800c184:	4313      	orrs	r3, r2
 800c186:	4a05      	ldr	r2, [pc, #20]	; (800c19c <FLASH_MassErase+0x44>)
 800c188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c18c:	6113      	str	r3, [r2, #16]
}
 800c18e:	bf00      	nop
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	40023c00 	.word	0x40023c00

0800c1a0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d102      	bne.n	800c1bc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	e010      	b.n	800c1de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d103      	bne.n	800c1ca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c1c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	e009      	b.n	800c1de <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800c1ca:	78fb      	ldrb	r3, [r7, #3]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d103      	bne.n	800c1d8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1d4:	60fb      	str	r3, [r7, #12]
 800c1d6:	e002      	b.n	800c1de <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c1d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1dc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800c1de:	4b13      	ldr	r3, [pc, #76]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	4a12      	ldr	r2, [pc, #72]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800c1ea:	4b10      	ldr	r3, [pc, #64]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1ec:	691a      	ldr	r2, [r3, #16]
 800c1ee:	490f      	ldr	r1, [pc, #60]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	4a0c      	ldr	r2, [pc, #48]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c1fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c200:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800c202:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c204:	691a      	ldr	r2, [r3, #16]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	4313      	orrs	r3, r2
 800c20c:	4a07      	ldr	r2, [pc, #28]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c20e:	f043 0302 	orr.w	r3, r3, #2
 800c212:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c216:	691b      	ldr	r3, [r3, #16]
 800c218:	4a04      	ldr	r2, [pc, #16]	; (800c22c <FLASH_Erase_Sector+0x8c>)
 800c21a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c21e:	6113      	str	r3, [r2, #16]
}
 800c220:	bf00      	nop
 800c222:	3714      	adds	r7, #20
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	40023c00 	.word	0x40023c00

0800c230 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800c234:	4b20      	ldr	r3, [pc, #128]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d017      	beq.n	800c270 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c240:	4b1d      	ldr	r3, [pc, #116]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4a1c      	ldr	r2, [pc, #112]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c246:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c24a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c24c:	4b1a      	ldr	r3, [pc, #104]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a19      	ldr	r2, [pc, #100]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c256:	6013      	str	r3, [r2, #0]
 800c258:	4b17      	ldr	r3, [pc, #92]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a16      	ldr	r2, [pc, #88]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c25e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c262:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c264:	4b14      	ldr	r3, [pc, #80]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a13      	ldr	r2, [pc, #76]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c26a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c26e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800c270:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d017      	beq.n	800c2ac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800c27c:	4b0e      	ldr	r3, [pc, #56]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a0d      	ldr	r2, [pc, #52]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c286:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a0a      	ldr	r2, [pc, #40]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c28e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	4b08      	ldr	r3, [pc, #32]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a07      	ldr	r2, [pc, #28]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c29a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c29e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c2a0:	4b05      	ldr	r3, [pc, #20]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a04      	ldr	r2, [pc, #16]	; (800c2b8 <FLASH_FlushCaches+0x88>)
 800c2a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2aa:	6013      	str	r3, [r2, #0]
  }
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	40023c00 	.word	0x40023c00

0800c2bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b089      	sub	sp, #36	; 0x24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e16b      	b.n	800c5b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c2d8:	2201      	movs	r2, #1
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	f040 815a 	bne.w	800c5aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d00b      	beq.n	800c316 <HAL_GPIO_Init+0x5a>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	2b02      	cmp	r3, #2
 800c304:	d007      	beq.n	800c316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c30a:	2b11      	cmp	r3, #17
 800c30c:	d003      	beq.n	800c316 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	2b12      	cmp	r3, #18
 800c314:	d130      	bne.n	800c378 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	2203      	movs	r2, #3
 800c322:	fa02 f303 	lsl.w	r3, r2, r3
 800c326:	43db      	mvns	r3, r3
 800c328:	69ba      	ldr	r2, [r7, #24]
 800c32a:	4013      	ands	r3, r2
 800c32c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	005b      	lsls	r3, r3, #1
 800c336:	fa02 f303 	lsl.w	r3, r2, r3
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	685b      	ldr	r3, [r3, #4]
 800c34a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c34c:	2201      	movs	r2, #1
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	fa02 f303 	lsl.w	r3, r2, r3
 800c354:	43db      	mvns	r3, r3
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	4013      	ands	r3, r2
 800c35a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	091b      	lsrs	r3, r3, #4
 800c362:	f003 0201 	and.w	r2, r3, #1
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	69ba      	ldr	r2, [r7, #24]
 800c36e:	4313      	orrs	r3, r2
 800c370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	005b      	lsls	r3, r3, #1
 800c382:	2203      	movs	r2, #3
 800c384:	fa02 f303 	lsl.w	r3, r2, r3
 800c388:	43db      	mvns	r3, r3
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	4013      	ands	r3, r2
 800c38e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	fa02 f303 	lsl.w	r3, r2, r3
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d003      	beq.n	800c3b8 <HAL_GPIO_Init+0xfc>
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	2b12      	cmp	r3, #18
 800c3b6:	d123      	bne.n	800c400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	08da      	lsrs	r2, r3, #3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3208      	adds	r2, #8
 800c3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	220f      	movs	r2, #15
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	691a      	ldr	r2, [r3, #16]
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	08da      	lsrs	r2, r3, #3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3208      	adds	r2, #8
 800c3fa:	69b9      	ldr	r1, [r7, #24]
 800c3fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	2203      	movs	r2, #3
 800c40c:	fa02 f303 	lsl.w	r3, r2, r3
 800c410:	43db      	mvns	r3, r3
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	4013      	ands	r3, r2
 800c416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f003 0203 	and.w	r2, r3, #3
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	fa02 f303 	lsl.w	r3, r2, r3
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80b4 	beq.w	800c5aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	4b60      	ldr	r3, [pc, #384]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44a:	4a5f      	ldr	r2, [pc, #380]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c44c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c450:	6453      	str	r3, [r2, #68]	; 0x44
 800c452:	4b5d      	ldr	r3, [pc, #372]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c45e:	4a5b      	ldr	r2, [pc, #364]	; (800c5cc <HAL_GPIO_Init+0x310>)
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	089b      	lsrs	r3, r3, #2
 800c464:	3302      	adds	r3, #2
 800c466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	220f      	movs	r2, #15
 800c476:	fa02 f303 	lsl.w	r3, r2, r3
 800c47a:	43db      	mvns	r3, r3
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	4013      	ands	r3, r2
 800c480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a52      	ldr	r2, [pc, #328]	; (800c5d0 <HAL_GPIO_Init+0x314>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d02b      	beq.n	800c4e2 <HAL_GPIO_Init+0x226>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a51      	ldr	r2, [pc, #324]	; (800c5d4 <HAL_GPIO_Init+0x318>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d025      	beq.n	800c4de <HAL_GPIO_Init+0x222>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a50      	ldr	r2, [pc, #320]	; (800c5d8 <HAL_GPIO_Init+0x31c>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d01f      	beq.n	800c4da <HAL_GPIO_Init+0x21e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a4f      	ldr	r2, [pc, #316]	; (800c5dc <HAL_GPIO_Init+0x320>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d019      	beq.n	800c4d6 <HAL_GPIO_Init+0x21a>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a4e      	ldr	r2, [pc, #312]	; (800c5e0 <HAL_GPIO_Init+0x324>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d013      	beq.n	800c4d2 <HAL_GPIO_Init+0x216>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a4d      	ldr	r2, [pc, #308]	; (800c5e4 <HAL_GPIO_Init+0x328>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00d      	beq.n	800c4ce <HAL_GPIO_Init+0x212>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a4c      	ldr	r2, [pc, #304]	; (800c5e8 <HAL_GPIO_Init+0x32c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <HAL_GPIO_Init+0x20e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a4b      	ldr	r2, [pc, #300]	; (800c5ec <HAL_GPIO_Init+0x330>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d101      	bne.n	800c4c6 <HAL_GPIO_Init+0x20a>
 800c4c2:	2307      	movs	r3, #7
 800c4c4:	e00e      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4c6:	2308      	movs	r3, #8
 800c4c8:	e00c      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4ca:	2306      	movs	r3, #6
 800c4cc:	e00a      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4ce:	2305      	movs	r3, #5
 800c4d0:	e008      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4d2:	2304      	movs	r3, #4
 800c4d4:	e006      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e004      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e002      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	f002 0203 	and.w	r2, r2, #3
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	4093      	lsls	r3, r2
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c4f4:	4935      	ldr	r1, [pc, #212]	; (800c5cc <HAL_GPIO_Init+0x310>)
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	089b      	lsrs	r3, r3, #2
 800c4fa:	3302      	adds	r3, #2
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c502:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	43db      	mvns	r3, r3
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	4013      	ands	r3, r2
 800c510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	4313      	orrs	r3, r2
 800c524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c526:	4a32      	ldr	r2, [pc, #200]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c52c:	4b30      	ldr	r3, [pc, #192]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	43db      	mvns	r3, r3
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	4013      	ands	r3, r2
 800c53a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c550:	4a27      	ldr	r2, [pc, #156]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c556:	4b26      	ldr	r3, [pc, #152]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	43db      	mvns	r3, r3
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	4013      	ands	r3, r2
 800c564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	4313      	orrs	r3, r2
 800c578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c57a:	4a1d      	ldr	r2, [pc, #116]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c580:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	43db      	mvns	r3, r3
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	4013      	ands	r3, r2
 800c58e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c5a4:	4a12      	ldr	r2, [pc, #72]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	61fb      	str	r3, [r7, #28]
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b0f      	cmp	r3, #15
 800c5b4:	f67f ae90 	bls.w	800c2d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c5b8:	bf00      	nop
 800c5ba:	bf00      	nop
 800c5bc:	3724      	adds	r7, #36	; 0x24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	40023800 	.word	0x40023800
 800c5cc:	40013800 	.word	0x40013800
 800c5d0:	40020000 	.word	0x40020000
 800c5d4:	40020400 	.word	0x40020400
 800c5d8:	40020800 	.word	0x40020800
 800c5dc:	40020c00 	.word	0x40020c00
 800c5e0:	40021000 	.word	0x40021000
 800c5e4:	40021400 	.word	0x40021400
 800c5e8:	40021800 	.word	0x40021800
 800c5ec:	40021c00 	.word	0x40021c00
 800c5f0:	40013c00 	.word	0x40013c00

0800c5f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c606:	2300      	movs	r3, #0
 800c608:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c60a:	2300      	movs	r3, #0
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	e0cd      	b.n	800c7ac <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c610:	2201      	movs	r2, #1
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	fa02 f303 	lsl.w	r3, r2, r3
 800c618:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	4013      	ands	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	429a      	cmp	r2, r3
 800c628:	f040 80bd 	bne.w	800c7a6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c62c:	4a65      	ldr	r2, [pc, #404]	; (800c7c4 <HAL_GPIO_DeInit+0x1d0>)
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	089b      	lsrs	r3, r3, #2
 800c632:	3302      	adds	r3, #2
 800c634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c638:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f003 0303 	and.w	r3, r3, #3
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	220f      	movs	r2, #15
 800c644:	fa02 f303 	lsl.w	r3, r2, r3
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	4013      	ands	r3, r2
 800c64c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a5d      	ldr	r2, [pc, #372]	; (800c7c8 <HAL_GPIO_DeInit+0x1d4>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d02b      	beq.n	800c6ae <HAL_GPIO_DeInit+0xba>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a5c      	ldr	r2, [pc, #368]	; (800c7cc <HAL_GPIO_DeInit+0x1d8>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d025      	beq.n	800c6aa <HAL_GPIO_DeInit+0xb6>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a5b      	ldr	r2, [pc, #364]	; (800c7d0 <HAL_GPIO_DeInit+0x1dc>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d01f      	beq.n	800c6a6 <HAL_GPIO_DeInit+0xb2>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a5a      	ldr	r2, [pc, #360]	; (800c7d4 <HAL_GPIO_DeInit+0x1e0>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d019      	beq.n	800c6a2 <HAL_GPIO_DeInit+0xae>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a59      	ldr	r2, [pc, #356]	; (800c7d8 <HAL_GPIO_DeInit+0x1e4>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d013      	beq.n	800c69e <HAL_GPIO_DeInit+0xaa>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a58      	ldr	r2, [pc, #352]	; (800c7dc <HAL_GPIO_DeInit+0x1e8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d00d      	beq.n	800c69a <HAL_GPIO_DeInit+0xa6>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a57      	ldr	r2, [pc, #348]	; (800c7e0 <HAL_GPIO_DeInit+0x1ec>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d007      	beq.n	800c696 <HAL_GPIO_DeInit+0xa2>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a56      	ldr	r2, [pc, #344]	; (800c7e4 <HAL_GPIO_DeInit+0x1f0>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d101      	bne.n	800c692 <HAL_GPIO_DeInit+0x9e>
 800c68e:	2307      	movs	r3, #7
 800c690:	e00e      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c692:	2308      	movs	r3, #8
 800c694:	e00c      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c696:	2306      	movs	r3, #6
 800c698:	e00a      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c69a:	2305      	movs	r3, #5
 800c69c:	e008      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c69e:	2304      	movs	r3, #4
 800c6a0:	e006      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	e004      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c6a6:	2302      	movs	r3, #2
 800c6a8:	e002      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e000      	b.n	800c6b0 <HAL_GPIO_DeInit+0xbc>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	f002 0203 	and.w	r2, r2, #3
 800c6b6:	0092      	lsls	r2, r2, #2
 800c6b8:	4093      	lsls	r3, r2
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d132      	bne.n	800c726 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c6c0:	4b49      	ldr	r3, [pc, #292]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	43db      	mvns	r3, r3
 800c6c8:	4947      	ldr	r1, [pc, #284]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c6ce:	4b46      	ldr	r3, [pc, #280]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	43db      	mvns	r3, r3
 800c6d6:	4944      	ldr	r1, [pc, #272]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c6dc:	4b42      	ldr	r3, [pc, #264]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	43db      	mvns	r3, r3
 800c6e4:	4940      	ldr	r1, [pc, #256]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c6ea:	4b3f      	ldr	r3, [pc, #252]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6ec:	68da      	ldr	r2, [r3, #12]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	43db      	mvns	r3, r3
 800c6f2:	493d      	ldr	r1, [pc, #244]	; (800c7e8 <HAL_GPIO_DeInit+0x1f4>)
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f003 0303 	and.w	r3, r3, #3
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	220f      	movs	r2, #15
 800c702:	fa02 f303 	lsl.w	r3, r2, r3
 800c706:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c708:	4a2e      	ldr	r2, [pc, #184]	; (800c7c4 <HAL_GPIO_DeInit+0x1d0>)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	089b      	lsrs	r3, r3, #2
 800c70e:	3302      	adds	r3, #2
 800c710:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	43da      	mvns	r2, r3
 800c718:	482a      	ldr	r0, [pc, #168]	; (800c7c4 <HAL_GPIO_DeInit+0x1d0>)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	089b      	lsrs	r3, r3, #2
 800c71e:	400a      	ands	r2, r1
 800c720:	3302      	adds	r3, #2
 800c722:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	2103      	movs	r1, #3
 800c730:	fa01 f303 	lsl.w	r3, r1, r3
 800c734:	43db      	mvns	r3, r3
 800c736:	401a      	ands	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	08da      	lsrs	r2, r3, #3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3208      	adds	r2, #8
 800c744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f003 0307 	and.w	r3, r3, #7
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	220f      	movs	r2, #15
 800c752:	fa02 f303 	lsl.w	r3, r2, r3
 800c756:	43db      	mvns	r3, r3
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	08d2      	lsrs	r2, r2, #3
 800c75c:	4019      	ands	r1, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3208      	adds	r2, #8
 800c762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	005b      	lsls	r3, r3, #1
 800c76e:	2103      	movs	r1, #3
 800c770:	fa01 f303 	lsl.w	r3, r1, r3
 800c774:	43db      	mvns	r3, r3
 800c776:	401a      	ands	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	2101      	movs	r1, #1
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	fa01 f303 	lsl.w	r3, r1, r3
 800c788:	43db      	mvns	r3, r3
 800c78a:	401a      	ands	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689a      	ldr	r2, [r3, #8]
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	005b      	lsls	r3, r3, #1
 800c798:	2103      	movs	r1, #3
 800c79a:	fa01 f303 	lsl.w	r3, r1, r3
 800c79e:	43db      	mvns	r3, r3
 800c7a0:	401a      	ands	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	2b0f      	cmp	r3, #15
 800c7b0:	f67f af2e 	bls.w	800c610 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	40013800 	.word	0x40013800
 800c7c8:	40020000 	.word	0x40020000
 800c7cc:	40020400 	.word	0x40020400
 800c7d0:	40020800 	.word	0x40020800
 800c7d4:	40020c00 	.word	0x40020c00
 800c7d8:	40021000 	.word	0x40021000
 800c7dc:	40021400 	.word	0x40021400
 800c7e0:	40021800 	.word	0x40021800
 800c7e4:	40021c00 	.word	0x40021c00
 800c7e8:	40013c00 	.word	0x40013c00

0800c7ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	807b      	strh	r3, [r7, #2]
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c7fc:	787b      	ldrb	r3, [r7, #1]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c802:	887a      	ldrh	r2, [r7, #2]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c808:	e003      	b.n	800c812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c80a:	887b      	ldrh	r3, [r7, #2]
 800c80c:	041a      	lsls	r2, r3, #16
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	619a      	str	r2, [r3, #24]
}
 800c812:	bf00      	nop
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
	...

0800c820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c82e:	2301      	movs	r3, #1
 800c830:	e12b      	b.n	800ca8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d106      	bne.n	800c84c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7f5 f93a 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2224      	movs	r2, #36	; 0x24
 800c850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f022 0201 	bic.w	r2, r2, #1
 800c862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c884:	f002 fc64 	bl	800f150 <HAL_RCC_GetPCLK1Freq>
 800c888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	4a81      	ldr	r2, [pc, #516]	; (800ca94 <HAL_I2C_Init+0x274>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d807      	bhi.n	800c8a4 <HAL_I2C_Init+0x84>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	4a80      	ldr	r2, [pc, #512]	; (800ca98 <HAL_I2C_Init+0x278>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	bf94      	ite	ls
 800c89c:	2301      	movls	r3, #1
 800c89e:	2300      	movhi	r3, #0
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	e006      	b.n	800c8b2 <HAL_I2C_Init+0x92>
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	4a7d      	ldr	r2, [pc, #500]	; (800ca9c <HAL_I2C_Init+0x27c>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	bf94      	ite	ls
 800c8ac:	2301      	movls	r3, #1
 800c8ae:	2300      	movhi	r3, #0
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e0e7      	b.n	800ca8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	4a78      	ldr	r2, [pc, #480]	; (800caa0 <HAL_I2C_Init+0x280>)
 800c8be:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c2:	0c9b      	lsrs	r3, r3, #18
 800c8c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	430a      	orrs	r2, r1
 800c8d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	4a6a      	ldr	r2, [pc, #424]	; (800ca94 <HAL_I2C_Init+0x274>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d802      	bhi.n	800c8f4 <HAL_I2C_Init+0xd4>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	e009      	b.n	800c908 <HAL_I2C_Init+0xe8>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c8fa:	fb02 f303 	mul.w	r3, r2, r3
 800c8fe:	4a69      	ldr	r2, [pc, #420]	; (800caa4 <HAL_I2C_Init+0x284>)
 800c900:	fba2 2303 	umull	r2, r3, r2, r3
 800c904:	099b      	lsrs	r3, r3, #6
 800c906:	3301      	adds	r3, #1
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	6812      	ldr	r2, [r2, #0]
 800c90c:	430b      	orrs	r3, r1
 800c90e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c91a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	495c      	ldr	r1, [pc, #368]	; (800ca94 <HAL_I2C_Init+0x274>)
 800c924:	428b      	cmp	r3, r1
 800c926:	d819      	bhi.n	800c95c <HAL_I2C_Init+0x13c>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	1e59      	subs	r1, r3, #1
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	fbb1 f3f3 	udiv	r3, r1, r3
 800c936:	1c59      	adds	r1, r3, #1
 800c938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c93c:	400b      	ands	r3, r1
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00a      	beq.n	800c958 <HAL_I2C_Init+0x138>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	1e59      	subs	r1, r3, #1
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c950:	3301      	adds	r3, #1
 800c952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c956:	e051      	b.n	800c9fc <HAL_I2C_Init+0x1dc>
 800c958:	2304      	movs	r3, #4
 800c95a:	e04f      	b.n	800c9fc <HAL_I2C_Init+0x1dc>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d111      	bne.n	800c988 <HAL_I2C_Init+0x168>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	1e58      	subs	r0, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6859      	ldr	r1, [r3, #4]
 800c96c:	460b      	mov	r3, r1
 800c96e:	005b      	lsls	r3, r3, #1
 800c970:	440b      	add	r3, r1
 800c972:	fbb0 f3f3 	udiv	r3, r0, r3
 800c976:	3301      	adds	r3, #1
 800c978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	bf0c      	ite	eq
 800c980:	2301      	moveq	r3, #1
 800c982:	2300      	movne	r3, #0
 800c984:	b2db      	uxtb	r3, r3
 800c986:	e012      	b.n	800c9ae <HAL_I2C_Init+0x18e>
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	1e58      	subs	r0, r3, #1
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6859      	ldr	r1, [r3, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	440b      	add	r3, r1
 800c996:	0099      	lsls	r1, r3, #2
 800c998:	440b      	add	r3, r1
 800c99a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c99e:	3301      	adds	r3, #1
 800c9a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	bf0c      	ite	eq
 800c9a8:	2301      	moveq	r3, #1
 800c9aa:	2300      	movne	r3, #0
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <HAL_I2C_Init+0x196>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e022      	b.n	800c9fc <HAL_I2C_Init+0x1dc>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10e      	bne.n	800c9dc <HAL_I2C_Init+0x1bc>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	1e58      	subs	r0, r3, #1
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6859      	ldr	r1, [r3, #4]
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	005b      	lsls	r3, r3, #1
 800c9ca:	440b      	add	r3, r1
 800c9cc:	fbb0 f3f3 	udiv	r3, r0, r3
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9da:	e00f      	b.n	800c9fc <HAL_I2C_Init+0x1dc>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	1e58      	subs	r0, r3, #1
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6859      	ldr	r1, [r3, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	440b      	add	r3, r1
 800c9ea:	0099      	lsls	r1, r3, #2
 800c9ec:	440b      	add	r3, r1
 800c9ee:	fbb0 f3f3 	udiv	r3, r0, r3
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	6809      	ldr	r1, [r1, #0]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	69da      	ldr	r2, [r3, #28]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	430a      	orrs	r2, r1
 800ca1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ca2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	6911      	ldr	r1, [r2, #16]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	68d2      	ldr	r2, [r2, #12]
 800ca36:	4311      	orrs	r1, r2
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	6812      	ldr	r2, [r2, #0]
 800ca3c:	430b      	orrs	r3, r1
 800ca3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695a      	ldr	r2, [r3, #20]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	431a      	orrs	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	430a      	orrs	r2, r1
 800ca5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f042 0201 	orr.w	r2, r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2220      	movs	r2, #32
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	000186a0 	.word	0x000186a0
 800ca98:	001e847f 	.word	0x001e847f
 800ca9c:	003d08ff 	.word	0x003d08ff
 800caa0:	431bde83 	.word	0x431bde83
 800caa4:	10624dd3 	.word	0x10624dd3

0800caa8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e021      	b.n	800cafe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2224      	movs	r2, #36	; 0x24
 800cabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f022 0201 	bic.w	r2, r2, #1
 800cad0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7f5 f8ca 	bl	8001c6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2200      	movs	r2, #0
 800caea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	461a      	mov	r2, r3
 800cb14:	460b      	mov	r3, r1
 800cb16:	817b      	strh	r3, [r7, #10]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b20      	cmp	r3, #32
 800cb2a:	f040 80f4 	bne.w	800cd16 <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cb2e:	4b7c      	ldr	r3, [pc, #496]	; (800cd20 <HAL_I2C_Master_Receive_DMA+0x218>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	08db      	lsrs	r3, r3, #3
 800cb34:	4a7b      	ldr	r2, [pc, #492]	; (800cd24 <HAL_I2C_Master_Receive_DMA+0x21c>)
 800cb36:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3a:	0a1a      	lsrs	r2, r3, #8
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	009a      	lsls	r2, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d116      	bne.n	800cb82 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6e:	f043 0220 	orr.w	r2, r3, #32
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e0ca      	b.n	800cd18 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	699b      	ldr	r3, [r3, #24]
 800cb88:	f003 0302 	and.w	r3, r3, #2
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d0db      	beq.n	800cb48 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d101      	bne.n	800cb9e <HAL_I2C_Master_Receive_DMA+0x96>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	e0bc      	b.n	800cd18 <HAL_I2C_Master_Receive_DMA+0x210>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0301 	and.w	r3, r3, #1
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d007      	beq.n	800cbc4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f042 0201 	orr.w	r2, r2, #1
 800cbc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2222      	movs	r2, #34	; 0x22
 800cbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2210      	movs	r2, #16
 800cbe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	893a      	ldrh	r2, [r7, #8]
 800cbf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4a49      	ldr	r2, [pc, #292]	; (800cd28 <HAL_I2C_Master_Receive_DMA+0x220>)
 800cc04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cc06:	897a      	ldrh	r2, [r7, #10]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d062      	beq.n	800ccda <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc18:	4a44      	ldr	r2, [pc, #272]	; (800cd2c <HAL_I2C_Master_Receive_DMA+0x224>)
 800cc1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc20:	4a43      	ldr	r2, [pc, #268]	; (800cd30 <HAL_I2C_Master_Receive_DMA+0x228>)
 800cc22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc28:	2200      	movs	r2, #0
 800cc2a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc30:	2200      	movs	r2, #0
 800cc32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc38:	2200      	movs	r2, #0
 800cc3a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc40:	2200      	movs	r2, #0
 800cc42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3310      	adds	r3, #16
 800cc4e:	4619      	mov	r1, r3
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc54:	461a      	mov	r2, r3
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc5a:	f7fe fd4d 	bl	800b6f8 <HAL_DMA_Start_IT>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800cc62:	7dfb      	ldrb	r3, [r7, #23]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d124      	bne.n	800ccb2 <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc76:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc86:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cc9e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccae:	605a      	str	r2, [r3, #4]
 800ccb0:	e02f      	b.n	800cd12 <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2220      	movs	r2, #32
 800ccb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc6:	f043 0210 	orr.w	r2, r3, #16
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e01e      	b.n	800cd18 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cce8:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccf8:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	685a      	ldr	r2, [r3, #4]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cd10:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	e000      	b.n	800cd18 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800cd16:	2302      	movs	r3, #2
  }
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3718      	adds	r7, #24
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	2000041c 	.word	0x2000041c
 800cd24:	14f8b589 	.word	0x14f8b589
 800cd28:	ffff0000 	.word	0xffff0000
 800cd2c:	0800e4a1 	.word	0x0800e4a1
 800cd30:	0800e64b 	.word	0x0800e64b

0800cd34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cd54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	2b10      	cmp	r3, #16
 800cd62:	d003      	beq.n	800cd6c <HAL_I2C_EV_IRQHandler+0x38>
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	2b40      	cmp	r3, #64	; 0x40
 800cd68:	f040 80bd 	bne.w	800cee6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	699b      	ldr	r3, [r3, #24]
 800cd72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10d      	bne.n	800cda2 <HAL_I2C_EV_IRQHandler+0x6e>
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cd8c:	d003      	beq.n	800cd96 <HAL_I2C_EV_IRQHandler+0x62>
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cd94:	d101      	bne.n	800cd9a <HAL_I2C_EV_IRQHandler+0x66>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <HAL_I2C_EV_IRQHandler+0x68>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	f000 812e 	beq.w	800cffe <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00c      	beq.n	800cdc6 <HAL_I2C_EV_IRQHandler+0x92>
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	0a5b      	lsrs	r3, r3, #9
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d006      	beq.n	800cdc6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f001 fd5d 	bl	800e878 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fd58 	bl	800d874 <I2C_Master_SB>
 800cdc4:	e08e      	b.n	800cee4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	08db      	lsrs	r3, r3, #3
 800cdca:	f003 0301 	and.w	r3, r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d009      	beq.n	800cde6 <HAL_I2C_EV_IRQHandler+0xb2>
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	0a5b      	lsrs	r3, r3, #9
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d003      	beq.n	800cde6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fdce 	bl	800d980 <I2C_Master_ADD10>
 800cde4:	e07e      	b.n	800cee4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	085b      	lsrs	r3, r3, #1
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d009      	beq.n	800ce06 <HAL_I2C_EV_IRQHandler+0xd2>
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	0a5b      	lsrs	r3, r3, #9
 800cdf6:	f003 0301 	and.w	r3, r3, #1
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fde8 	bl	800d9d4 <I2C_Master_ADDR>
 800ce04:	e06e      	b.n	800cee4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	089b      	lsrs	r3, r3, #2
 800ce0a:	f003 0301 	and.w	r3, r3, #1
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d037      	beq.n	800ce82 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce20:	f000 80ef 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	09db      	lsrs	r3, r3, #7
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00f      	beq.n	800ce50 <HAL_I2C_EV_IRQHandler+0x11c>
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	0a9b      	lsrs	r3, r3, #10
 800ce34:	f003 0301 	and.w	r3, r3, #1
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d009      	beq.n	800ce50 <HAL_I2C_EV_IRQHandler+0x11c>
 800ce3c:	69fb      	ldr	r3, [r7, #28]
 800ce3e:	089b      	lsrs	r3, r3, #2
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d103      	bne.n	800ce50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f9e5 	bl	800d218 <I2C_MasterTransmit_TXE>
 800ce4e:	e049      	b.n	800cee4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	089b      	lsrs	r3, r3, #2
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f000 80d2 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	0a5b      	lsrs	r3, r3, #9
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 80cb 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800ce6c:	7bfb      	ldrb	r3, [r7, #15]
 800ce6e:	2b10      	cmp	r3, #16
 800ce70:	d103      	bne.n	800ce7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fa6c 	bl	800d350 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce78:	e0c3      	b.n	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fad0 	bl	800d420 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ce80:	e0bf      	b.n	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce90:	f000 80b7 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	099b      	lsrs	r3, r3, #6
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00f      	beq.n	800cec0 <HAL_I2C_EV_IRQHandler+0x18c>
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	0a9b      	lsrs	r3, r3, #10
 800cea4:	f003 0301 	and.w	r3, r3, #1
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d009      	beq.n	800cec0 <HAL_I2C_EV_IRQHandler+0x18c>
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	089b      	lsrs	r3, r3, #2
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d103      	bne.n	800cec0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fb40 	bl	800d53e <I2C_MasterReceive_RXNE>
 800cebe:	e011      	b.n	800cee4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	089b      	lsrs	r3, r3, #2
 800cec4:	f003 0301 	and.w	r3, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 809a 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	0a5b      	lsrs	r3, r3, #9
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f000 8093 	beq.w	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fbdf 	bl	800d6a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cee2:	e08e      	b.n	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
 800cee4:	e08d      	b.n	800d002 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	61fb      	str	r3, [r7, #28]
 800cef6:	e007      	b.n	800cf08 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	699b      	ldr	r3, [r3, #24]
 800cefe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	085b      	lsrs	r3, r3, #1
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d012      	beq.n	800cf3a <HAL_I2C_EV_IRQHandler+0x206>
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	0a5b      	lsrs	r3, r3, #9
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00c      	beq.n	800cf3a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d003      	beq.n	800cf30 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800cf30:	69b9      	ldr	r1, [r7, #24]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 ff9d 	bl	800de72 <I2C_Slave_ADDR>
 800cf38:	e066      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	091b      	lsrs	r3, r3, #4
 800cf3e:	f003 0301 	and.w	r3, r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d009      	beq.n	800cf5a <HAL_I2C_EV_IRQHandler+0x226>
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	0a5b      	lsrs	r3, r3, #9
 800cf4a:	f003 0301 	and.w	r3, r3, #1
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d003      	beq.n	800cf5a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 ffd2 	bl	800defc <I2C_Slave_STOPF>
 800cf58:	e056      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf5a:	7bbb      	ldrb	r3, [r7, #14]
 800cf5c:	2b21      	cmp	r3, #33	; 0x21
 800cf5e:	d002      	beq.n	800cf66 <HAL_I2C_EV_IRQHandler+0x232>
 800cf60:	7bbb      	ldrb	r3, [r7, #14]
 800cf62:	2b29      	cmp	r3, #41	; 0x29
 800cf64:	d125      	bne.n	800cfb2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	09db      	lsrs	r3, r3, #7
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00f      	beq.n	800cf92 <HAL_I2C_EV_IRQHandler+0x25e>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	0a9b      	lsrs	r3, r3, #10
 800cf76:	f003 0301 	and.w	r3, r3, #1
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d009      	beq.n	800cf92 <HAL_I2C_EV_IRQHandler+0x25e>
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	089b      	lsrs	r3, r3, #2
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d103      	bne.n	800cf92 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 feb3 	bl	800dcf6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cf90:	e039      	b.n	800d006 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	089b      	lsrs	r3, r3, #2
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d033      	beq.n	800d006 <HAL_I2C_EV_IRQHandler+0x2d2>
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	0a5b      	lsrs	r3, r3, #9
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d02d      	beq.n	800d006 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fee0 	bl	800dd70 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfb0:	e029      	b.n	800d006 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	099b      	lsrs	r3, r3, #6
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00f      	beq.n	800cfde <HAL_I2C_EV_IRQHandler+0x2aa>
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	0a9b      	lsrs	r3, r3, #10
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d009      	beq.n	800cfde <HAL_I2C_EV_IRQHandler+0x2aa>
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	089b      	lsrs	r3, r3, #2
 800cfce:	f003 0301 	and.w	r3, r3, #1
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 feeb 	bl	800ddb2 <I2C_SlaveReceive_RXNE>
 800cfdc:	e014      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	089b      	lsrs	r3, r3, #2
 800cfe2:	f003 0301 	and.w	r3, r3, #1
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00e      	beq.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	0a5b      	lsrs	r3, r3, #9
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d008      	beq.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 ff19 	bl	800de2e <I2C_SlaveReceive_BTF>
 800cffc:	e004      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800cffe:	bf00      	nop
 800d000:	e002      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800d002:	bf00      	nop
 800d004:	e000      	b.n	800d008 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800d006:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800d008:	3720      	adds	r7, #32
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b08a      	sub	sp, #40	; 0x28
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800d026:	2300      	movs	r3, #0
 800d028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d030:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d032:	6a3b      	ldr	r3, [r7, #32]
 800d034:	0a1b      	lsrs	r3, r3, #8
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <HAL_I2C_ER_IRQHandler+0x4e>
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	0a1b      	lsrs	r3, r3, #8
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b00      	cmp	r3, #0
 800d048:	d008      	beq.n	800d05c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	f043 0301 	orr.w	r3, r3, #1
 800d050:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d05a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d05c:	6a3b      	ldr	r3, [r7, #32]
 800d05e:	0a5b      	lsrs	r3, r3, #9
 800d060:	f003 0301 	and.w	r3, r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00e      	beq.n	800d086 <HAL_I2C_ER_IRQHandler+0x78>
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	0a1b      	lsrs	r3, r3, #8
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d008      	beq.n	800d086 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800d074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d076:	f043 0302 	orr.w	r3, r3, #2
 800d07a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800d084:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	0a9b      	lsrs	r3, r3, #10
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d03f      	beq.n	800d112 <HAL_I2C_ER_IRQHandler+0x104>
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	0a1b      	lsrs	r3, r3, #8
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d039      	beq.n	800d112 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800d09e:	7efb      	ldrb	r3, [r7, #27]
 800d0a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800d0b8:	7ebb      	ldrb	r3, [r7, #26]
 800d0ba:	2b20      	cmp	r3, #32
 800d0bc:	d112      	bne.n	800d0e4 <HAL_I2C_ER_IRQHandler+0xd6>
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10f      	bne.n	800d0e4 <HAL_I2C_ER_IRQHandler+0xd6>
 800d0c4:	7cfb      	ldrb	r3, [r7, #19]
 800d0c6:	2b21      	cmp	r3, #33	; 0x21
 800d0c8:	d008      	beq.n	800d0dc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800d0ca:	7cfb      	ldrb	r3, [r7, #19]
 800d0cc:	2b29      	cmp	r3, #41	; 0x29
 800d0ce:	d005      	beq.n	800d0dc <HAL_I2C_ER_IRQHandler+0xce>
 800d0d0:	7cfb      	ldrb	r3, [r7, #19]
 800d0d2:	2b28      	cmp	r3, #40	; 0x28
 800d0d4:	d106      	bne.n	800d0e4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b21      	cmp	r3, #33	; 0x21
 800d0da:	d103      	bne.n	800d0e4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f001 f83d 	bl	800e15c <I2C_Slave_AF>
 800d0e2:	e016      	b.n	800d112 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d0ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f0:	f043 0304 	orr.w	r3, r3, #4
 800d0f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800d0f6:	7efb      	ldrb	r3, [r7, #27]
 800d0f8:	2b10      	cmp	r3, #16
 800d0fa:	d002      	beq.n	800d102 <HAL_I2C_ER_IRQHandler+0xf4>
 800d0fc:	7efb      	ldrb	r3, [r7, #27]
 800d0fe:	2b40      	cmp	r3, #64	; 0x40
 800d100:	d107      	bne.n	800d112 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d110:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800d112:	6a3b      	ldr	r3, [r7, #32]
 800d114:	0adb      	lsrs	r3, r3, #11
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00e      	beq.n	800d13c <HAL_I2C_ER_IRQHandler+0x12e>
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	0a1b      	lsrs	r3, r3, #8
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d008      	beq.n	800d13c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12c:	f043 0308 	orr.w	r3, r3, #8
 800d130:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800d13a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d008      	beq.n	800d154 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	431a      	orrs	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f001 f874 	bl	800e23c <I2C_ITError>
  }
}
 800d154:	bf00      	nop
 800d156:	3728      	adds	r7, #40	; 0x28
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	70fb      	strb	r3, [r7, #3]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d1a8:	bf00      	nop
 800d1aa:	370c      	adds	r7, #12
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800d1bc:	bf00      	nop
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d226:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d22e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d234:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d150      	bne.n	800d2e0 <I2C_MasterTransmit_TXE+0xc8>
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	2b21      	cmp	r3, #33	; 0x21
 800d242:	d14d      	bne.n	800d2e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b08      	cmp	r3, #8
 800d248:	d01d      	beq.n	800d286 <I2C_MasterTransmit_TXE+0x6e>
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d01a      	beq.n	800d286 <I2C_MasterTransmit_TXE+0x6e>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d256:	d016      	beq.n	800d286 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685a      	ldr	r2, [r3, #4]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d266:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2211      	movs	r2, #17
 800d26c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2220      	movs	r2, #32
 800d27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f7ff ff6c 	bl	800d15c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d284:	e060      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	685a      	ldr	r2, [r3, #4]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d294:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b40      	cmp	r3, #64	; 0x40
 800d2be:	d107      	bne.n	800d2d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff ff7d 	bl	800d1c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2ce:	e03b      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff ff3f 	bl	800d15c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d2de:	e033      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
 800d2e2:	2b21      	cmp	r3, #33	; 0x21
 800d2e4:	d005      	beq.n	800d2f2 <I2C_MasterTransmit_TXE+0xda>
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	2b40      	cmp	r3, #64	; 0x40
 800d2ea:	d12d      	bne.n	800d348 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800d2ec:	7bfb      	ldrb	r3, [r7, #15]
 800d2ee:	2b22      	cmp	r3, #34	; 0x22
 800d2f0:	d12a      	bne.n	800d348 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d108      	bne.n	800d30e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d30a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800d30c:	e01c      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b40      	cmp	r3, #64	; 0x40
 800d318:	d103      	bne.n	800d322 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f880 	bl	800d420 <I2C_MemoryTransmit_TXE_BTF>
}
 800d320:	e012      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d326:	781a      	ldrb	r2, [r3, #0]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d332:	1c5a      	adds	r2, r3, #1
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	3b01      	subs	r3, #1
 800d340:	b29a      	uxth	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d346:	e7ff      	b.n	800d348 <I2C_MasterTransmit_TXE+0x130>
 800d348:	bf00      	nop
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b21      	cmp	r3, #33	; 0x21
 800d368:	d156      	bne.n	800d418 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d36e:	b29b      	uxth	r3, r3
 800d370:	2b00      	cmp	r3, #0
 800d372:	d012      	beq.n	800d39a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d378:	781a      	ldrb	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d38e:	b29b      	uxth	r3, r3
 800d390:	3b01      	subs	r3, #1
 800d392:	b29a      	uxth	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800d398:	e03e      	b.n	800d418 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b08      	cmp	r3, #8
 800d39e:	d01d      	beq.n	800d3dc <I2C_MasterTransmit_BTF+0x8c>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2b20      	cmp	r3, #32
 800d3a4:	d01a      	beq.n	800d3dc <I2C_MasterTransmit_BTF+0x8c>
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d3ac:	d016      	beq.n	800d3dc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	685a      	ldr	r2, [r3, #4]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3bc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2211      	movs	r2, #17
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2220      	movs	r2, #32
 800d3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff fec1 	bl	800d15c <HAL_I2C_MasterTxCpltCallback>
}
 800d3da:	e01d      	b.n	800d418 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d3ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3fa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2220      	movs	r2, #32
 800d406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff fea2 	bl	800d15c <HAL_I2C_MasterTxCpltCallback>
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d42e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d434:	2b00      	cmp	r3, #0
 800d436:	d11d      	bne.n	800d474 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d10b      	bne.n	800d458 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d444:	b2da      	uxtb	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d450:	1c9a      	adds	r2, r3, #2
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800d456:	e06e      	b.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	121b      	asrs	r3, r3, #8
 800d460:	b2da      	uxtb	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d46c:	1c5a      	adds	r2, r3, #1
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d472:	e060      	b.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d10b      	bne.n	800d494 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d480:	b2da      	uxtb	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d492:	e050      	b.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d498:	2b02      	cmp	r3, #2
 800d49a:	d14c      	bne.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	2b22      	cmp	r3, #34	; 0x22
 800d4a0:	d108      	bne.n	800d4b4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4b0:	601a      	str	r2, [r3, #0]
}
 800d4b2:	e040      	b.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d015      	beq.n	800d4ea <I2C_MemoryTransmit_TXE_BTF+0xca>
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	2b21      	cmp	r3, #33	; 0x21
 800d4c2:	d112      	bne.n	800d4ea <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	781a      	ldrb	r2, [r3, #0]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d4:	1c5a      	adds	r2, r3, #1
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d4e8:	e025      	b.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d120      	bne.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800d4f4:	7bfb      	ldrb	r3, [r7, #15]
 800d4f6:	2b21      	cmp	r3, #33	; 0x21
 800d4f8:	d11d      	bne.n	800d536 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d508:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d518:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2220      	movs	r2, #32
 800d524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff fe49 	bl	800d1c8 <HAL_I2C_MemTxCpltCallback>
}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b084      	sub	sp, #16
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b22      	cmp	r3, #34	; 0x22
 800d550:	f040 80a2 	bne.w	800d698 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d558:	b29b      	uxth	r3, r3
 800d55a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b03      	cmp	r3, #3
 800d560:	d921      	bls.n	800d5a6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	691a      	ldr	r2, [r3, #16]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d56c:	b2d2      	uxtb	r2, r2
 800d56e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	1c5a      	adds	r2, r3, #1
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d57e:	b29b      	uxth	r3, r3
 800d580:	3b01      	subs	r3, #1
 800d582:	b29a      	uxth	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d58c:	b29b      	uxth	r3, r3
 800d58e:	2b03      	cmp	r3, #3
 800d590:	f040 8082 	bne.w	800d698 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	685a      	ldr	r2, [r3, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5a2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800d5a4:	e078      	b.n	800d698 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d074      	beq.n	800d698 <I2C_MasterReceive_RXNE+0x15a>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	d002      	beq.n	800d5ba <I2C_MasterReceive_RXNE+0x7c>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d16e      	bne.n	800d698 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 f92a 	bl	800e814 <I2C_WaitOnSTOPRequestThroughIT>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d142      	bne.n	800d64c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	685a      	ldr	r2, [r3, #4]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d5e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	691a      	ldr	r2, [r3, #16]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f0:	b2d2      	uxtb	r2, r2
 800d5f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f8:	1c5a      	adds	r2, r3, #1
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d602:	b29b      	uxth	r3, r3
 800d604:	3b01      	subs	r3, #1
 800d606:	b29a      	uxth	r2, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2220      	movs	r2, #32
 800d610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d61a:	b2db      	uxtb	r3, r3
 800d61c:	2b40      	cmp	r3, #64	; 0x40
 800d61e:	d10a      	bne.n	800d636 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff fdd4 	bl	800d1dc <HAL_I2C_MemRxCpltCallback>
}
 800d634:	e030      	b.n	800d698 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2212      	movs	r2, #18
 800d642:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7fc fd89 	bl	800a15c <HAL_I2C_MasterRxCpltCallback>
}
 800d64a:	e025      	b.n	800d698 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d65a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	691a      	ldr	r2, [r3, #16]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d666:	b2d2      	uxtb	r2, r2
 800d668:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d678:	b29b      	uxth	r3, r3
 800d67a:	3b01      	subs	r3, #1
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2220      	movs	r2, #32
 800d686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fdac 	bl	800d1f0 <HAL_I2C_ErrorCallback>
}
 800d698:	bf00      	nop
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	d11b      	bne.n	800d6f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	691a      	ldr	r2, [r3, #16]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800d6ee:	e0bd      	b.n	800d86c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d129      	bne.n	800d74e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685a      	ldr	r2, [r3, #4]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d708:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b04      	cmp	r3, #4
 800d70e:	d00a      	beq.n	800d726 <I2C_MasterReceive_BTF+0x86>
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b02      	cmp	r3, #2
 800d714:	d007      	beq.n	800d726 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d724:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	691a      	ldr	r2, [r3, #16]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d730:	b2d2      	uxtb	r2, r2
 800d732:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d742:	b29b      	uxth	r3, r3
 800d744:	3b01      	subs	r3, #1
 800d746:	b29a      	uxth	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d74c:	e08e      	b.n	800d86c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d752:	b29b      	uxth	r3, r3
 800d754:	2b02      	cmp	r3, #2
 800d756:	d176      	bne.n	800d846 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d002      	beq.n	800d764 <I2C_MasterReceive_BTF+0xc4>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2b10      	cmp	r3, #16
 800d762:	d108      	bne.n	800d776 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	e019      	b.n	800d7aa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b04      	cmp	r3, #4
 800d77a:	d002      	beq.n	800d782 <I2C_MasterReceive_BTF+0xe2>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d108      	bne.n	800d794 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	e00a      	b.n	800d7aa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b10      	cmp	r3, #16
 800d798:	d007      	beq.n	800d7aa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	681a      	ldr	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	691a      	ldr	r2, [r3, #16]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b4:	b2d2      	uxtb	r2, r2
 800d7b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	691a      	ldr	r2, [r3, #16]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7da:	b2d2      	uxtb	r2, r2
 800d7dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d804:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2220      	movs	r2, #32
 800d80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b40      	cmp	r3, #64	; 0x40
 800d818:	d10a      	bne.n	800d830 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f7ff fcd7 	bl	800d1dc <HAL_I2C_MemRxCpltCallback>
}
 800d82e:	e01d      	b.n	800d86c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2212      	movs	r2, #18
 800d83c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7fc fc8c 	bl	800a15c <HAL_I2C_MasterRxCpltCallback>
}
 800d844:	e012      	b.n	800d86c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d850:	b2d2      	uxtb	r2, r2
 800d852:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d858:	1c5a      	adds	r2, r3, #1
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d862:	b29b      	uxth	r3, r3
 800d864:	3b01      	subs	r3, #1
 800d866:	b29a      	uxth	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800d86c:	bf00      	nop
 800d86e:	3710      	adds	r7, #16
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b40      	cmp	r3, #64	; 0x40
 800d886:	d117      	bne.n	800d8b8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d109      	bne.n	800d8a4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d894:	b2db      	uxtb	r3, r3
 800d896:	461a      	mov	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d8a0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800d8a2:	e067      	b.n	800d974 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	f043 0301 	orr.w	r3, r3, #1
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	611a      	str	r2, [r3, #16]
}
 800d8b6:	e05d      	b.n	800d974 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d8c0:	d133      	bne.n	800d92a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b21      	cmp	r3, #33	; 0x21
 800d8cc:	d109      	bne.n	800d8e2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d8de:	611a      	str	r2, [r3, #16]
 800d8e0:	e008      	b.n	800d8f4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f043 0301 	orr.w	r3, r3, #1
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d004      	beq.n	800d906 <I2C_Master_SB+0x92>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d108      	bne.n	800d918 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d032      	beq.n	800d974 <I2C_Master_SB+0x100>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d914:	2b00      	cmp	r3, #0
 800d916:	d02d      	beq.n	800d974 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	685a      	ldr	r2, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d926:	605a      	str	r2, [r3, #4]
}
 800d928:	e024      	b.n	800d974 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10e      	bne.n	800d950 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d936:	b29b      	uxth	r3, r3
 800d938:	11db      	asrs	r3, r3, #7
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	f003 0306 	and.w	r3, r3, #6
 800d940:	b2db      	uxtb	r3, r3
 800d942:	f063 030f 	orn	r3, r3, #15
 800d946:	b2da      	uxtb	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	611a      	str	r2, [r3, #16]
}
 800d94e:	e011      	b.n	800d974 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d954:	2b01      	cmp	r3, #1
 800d956:	d10d      	bne.n	800d974 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	11db      	asrs	r3, r3, #7
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 0306 	and.w	r3, r3, #6
 800d966:	b2db      	uxtb	r3, r3
 800d968:	f063 030e 	orn	r3, r3, #14
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	611a      	str	r2, [r3, #16]
}
 800d974:	bf00      	nop
 800d976:	370c      	adds	r7, #12
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d103      	bne.n	800d9a4 <I2C_Master_ADD10+0x24>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d011      	beq.n	800d9c8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d104      	bne.n	800d9b8 <I2C_Master_ADD10+0x38>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d007      	beq.n	800d9c8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	685a      	ldr	r2, [r3, #4]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9c6:	605a      	str	r2, [r3, #4]
    }
  }
}
 800d9c8:	bf00      	nop
 800d9ca:	370c      	adds	r7, #12
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b091      	sub	sp, #68	; 0x44
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b22      	cmp	r3, #34	; 0x22
 800d9fc:	f040 8169 	bne.w	800dcd2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10f      	bne.n	800da28 <I2C_Master_ADDR+0x54>
 800da08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da0c:	2b40      	cmp	r3, #64	; 0x40
 800da0e:	d10b      	bne.n	800da28 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da10:	2300      	movs	r3, #0
 800da12:	633b      	str	r3, [r7, #48]	; 0x30
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	695b      	ldr	r3, [r3, #20]
 800da1a:	633b      	str	r3, [r7, #48]	; 0x30
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	633b      	str	r3, [r7, #48]	; 0x30
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	e160      	b.n	800dcea <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d11d      	bne.n	800da6c <I2C_Master_ADDR+0x98>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800da38:	d118      	bne.n	800da6c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da3a:	2300      	movs	r3, #0
 800da3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da5e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da64:	1c5a      	adds	r2, r3, #1
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	651a      	str	r2, [r3, #80]	; 0x50
 800da6a:	e13e      	b.n	800dcea <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da70:	b29b      	uxth	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d113      	bne.n	800da9e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800da76:	2300      	movs	r3, #0
 800da78:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	62bb      	str	r3, [r7, #40]	; 0x28
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	699b      	ldr	r3, [r3, #24]
 800da88:	62bb      	str	r3, [r7, #40]	; 0x28
 800da8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da9a:	601a      	str	r2, [r3, #0]
 800da9c:	e115      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	f040 808a 	bne.w	800dbbe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800daaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dab0:	d137      	bne.n	800db22 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dac0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dacc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dad0:	d113      	bne.n	800dafa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dae0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dae2:	2300      	movs	r3, #0
 800dae4:	627b      	str	r3, [r7, #36]	; 0x24
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	695b      	ldr	r3, [r3, #20]
 800daec:	627b      	str	r3, [r7, #36]	; 0x24
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	627b      	str	r3, [r7, #36]	; 0x24
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	e0e7      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dafa:	2300      	movs	r3, #0
 800dafc:	623b      	str	r3, [r7, #32]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	623b      	str	r3, [r7, #32]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	623b      	str	r3, [r7, #32]
 800db0e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	e0d3      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800db22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db24:	2b08      	cmp	r3, #8
 800db26:	d02e      	beq.n	800db86 <I2C_Master_ADDR+0x1b2>
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	2b20      	cmp	r3, #32
 800db2c:	d02b      	beq.n	800db86 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800db2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db30:	2b12      	cmp	r3, #18
 800db32:	d102      	bne.n	800db3a <I2C_Master_ADDR+0x166>
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	2b01      	cmp	r3, #1
 800db38:	d125      	bne.n	800db86 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800db3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d00e      	beq.n	800db5e <I2C_Master_ADDR+0x18a>
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	2b02      	cmp	r3, #2
 800db44:	d00b      	beq.n	800db5e <I2C_Master_ADDR+0x18a>
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	2b10      	cmp	r3, #16
 800db4a:	d008      	beq.n	800db5e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	e007      	b.n	800db6e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db6e:	2300      	movs	r3, #0
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	699b      	ldr	r3, [r3, #24]
 800db80:	61fb      	str	r3, [r7, #28]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	e0a1      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db96:	2300      	movs	r3, #0
 800db98:	61bb      	str	r3, [r7, #24]
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	695b      	ldr	r3, [r3, #20]
 800dba0:	61bb      	str	r3, [r7, #24]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	61bb      	str	r3, [r7, #24]
 800dbaa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	e085      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d14d      	bne.n	800dc64 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d016      	beq.n	800dbfc <I2C_Master_ADDR+0x228>
 800dbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d013      	beq.n	800dbfc <I2C_Master_ADDR+0x228>
 800dbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd6:	2b10      	cmp	r3, #16
 800dbd8:	d010      	beq.n	800dbfc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbe8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	e007      	b.n	800dc0c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	681a      	ldr	r2, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc0a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc1a:	d117      	bne.n	800dc4c <I2C_Master_ADDR+0x278>
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc22:	d00b      	beq.n	800dc3c <I2C_Master_ADDR+0x268>
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d008      	beq.n	800dc3c <I2C_Master_ADDR+0x268>
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	2b08      	cmp	r3, #8
 800dc2e:	d005      	beq.n	800dc3c <I2C_Master_ADDR+0x268>
 800dc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc32:	2b10      	cmp	r3, #16
 800dc34:	d002      	beq.n	800dc3c <I2C_Master_ADDR+0x268>
 800dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc38:	2b20      	cmp	r3, #32
 800dc3a:	d107      	bne.n	800dc4c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	617b      	str	r3, [r7, #20]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	695b      	ldr	r3, [r3, #20]
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	e032      	b.n	800dcca <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc72:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dc7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dc82:	d117      	bne.n	800dcb4 <I2C_Master_ADDR+0x2e0>
 800dc84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc8a:	d00b      	beq.n	800dca4 <I2C_Master_ADDR+0x2d0>
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d008      	beq.n	800dca4 <I2C_Master_ADDR+0x2d0>
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	2b08      	cmp	r3, #8
 800dc96:	d005      	beq.n	800dca4 <I2C_Master_ADDR+0x2d0>
 800dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9a:	2b10      	cmp	r3, #16
 800dc9c:	d002      	beq.n	800dca4 <I2C_Master_ADDR+0x2d0>
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	2b20      	cmp	r3, #32
 800dca2:	d107      	bne.n	800dcb4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	685a      	ldr	r2, [r3, #4]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dcb2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	613b      	str	r3, [r7, #16]
 800dcc8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2200      	movs	r2, #0
 800dcce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800dcd0:	e00b      	b.n	800dcea <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60fb      	str	r3, [r7, #12]
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	695b      	ldr	r3, [r3, #20]
 800dcdc:	60fb      	str	r3, [r7, #12]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	699b      	ldr	r3, [r3, #24]
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	68fb      	ldr	r3, [r7, #12]
}
 800dce8:	e7ff      	b.n	800dcea <I2C_Master_ADDR+0x316>
 800dcea:	bf00      	nop
 800dcec:	3744      	adds	r7, #68	; 0x44
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d02b      	beq.n	800dd68 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	781a      	ldrb	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d114      	bne.n	800dd68 <I2C_SlaveTransmit_TXE+0x72>
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	2b29      	cmp	r3, #41	; 0x29
 800dd42:	d111      	bne.n	800dd68 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685a      	ldr	r2, [r3, #4]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2221      	movs	r2, #33	; 0x21
 800dd58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2228      	movs	r2, #40	; 0x28
 800dd5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff fa04 	bl	800d170 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d011      	beq.n	800dda6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	781a      	ldrb	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	3b01      	subs	r3, #1
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr

0800ddb2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddc0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d02c      	beq.n	800de26 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	691a      	ldr	r2, [r3, #16]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	3b01      	subs	r3, #1
 800ddec:	b29a      	uxth	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d114      	bne.n	800de26 <I2C_SlaveReceive_RXNE+0x74>
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	2b2a      	cmp	r3, #42	; 0x2a
 800de00:	d111      	bne.n	800de26 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2222      	movs	r2, #34	; 0x22
 800de16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2228      	movs	r2, #40	; 0x28
 800de1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff f9af 	bl	800d184 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800de26:	bf00      	nop
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800de2e:	b480      	push	{r7}
 800de30:	b083      	sub	sp, #12
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d012      	beq.n	800de66 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	691a      	ldr	r2, [r3, #16]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4a:	b2d2      	uxtb	r2, r2
 800de4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	3b01      	subs	r3, #1
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800de66:	bf00      	nop
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b084      	sub	sp, #16
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800de7c:	2300      	movs	r3, #0
 800de7e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de86:	b2db      	uxtb	r3, r3
 800de88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800de8c:	2b28      	cmp	r3, #40	; 0x28
 800de8e:	d127      	bne.n	800dee0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de9e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	089b      	lsrs	r3, r3, #2
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800deac:	2301      	movs	r3, #1
 800deae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	09db      	lsrs	r3, r3, #7
 800deb4:	f003 0301 	and.w	r3, r3, #1
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d103      	bne.n	800dec4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	81bb      	strh	r3, [r7, #12]
 800dec2:	e002      	b.n	800deca <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800ded2:	89ba      	ldrh	r2, [r7, #12]
 800ded4:	7bfb      	ldrb	r3, [r7, #15]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7ff f95d 	bl	800d198 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800dede:	e008      	b.n	800def2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f06f 0202 	mvn.w	r2, #2
 800dee8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800def2:	bf00      	nop
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
	...

0800defc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df0a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800df1a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800df1c:	2300      	movs	r3, #0
 800df1e:	60bb      	str	r3, [r7, #8]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	695b      	ldr	r3, [r3, #20]
 800df26:	60bb      	str	r3, [r7, #8]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f042 0201 	orr.w	r2, r2, #1
 800df36:	601a      	str	r2, [r3, #0]
 800df38:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df48:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df58:	d172      	bne.n	800e040 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800df5a:	7bfb      	ldrb	r3, [r7, #15]
 800df5c:	2b22      	cmp	r3, #34	; 0x22
 800df5e:	d002      	beq.n	800df66 <I2C_Slave_STOPF+0x6a>
 800df60:	7bfb      	ldrb	r3, [r7, #15]
 800df62:	2b2a      	cmp	r3, #42	; 0x2a
 800df64:	d135      	bne.n	800dfd2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df78:	b29b      	uxth	r3, r3
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d005      	beq.n	800df8a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df82:	f043 0204 	orr.w	r2, r3, #4
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df98:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fd fdae 	bl	800bb00 <HAL_DMA_GetState>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d049      	beq.n	800e03e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	4a69      	ldr	r2, [pc, #420]	; (800e154 <I2C_Slave_STOPF+0x258>)
 800dfb0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7fd fbf6 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d03d      	beq.n	800e03e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dfd0:	e035      	b.n	800e03e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d005      	beq.n	800dff6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfee:	f043 0204 	orr.w	r2, r3, #4
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	685a      	ldr	r2, [r3, #4]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e004:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7fd fd78 	bl	800bb00 <HAL_DMA_GetState>
 800e010:	4603      	mov	r3, r0
 800e012:	2b01      	cmp	r3, #1
 800e014:	d014      	beq.n	800e040 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e01a:	4a4e      	ldr	r2, [pc, #312]	; (800e154 <I2C_Slave_STOPF+0x258>)
 800e01c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e022:	4618      	mov	r0, r3
 800e024:	f7fd fbc0 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d008      	beq.n	800e040 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e038:	4610      	mov	r0, r2
 800e03a:	4798      	blx	r3
 800e03c:	e000      	b.n	800e040 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e03e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e044:	b29b      	uxth	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d03e      	beq.n	800e0c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	695b      	ldr	r3, [r3, #20]
 800e050:	f003 0304 	and.w	r3, r3, #4
 800e054:	2b04      	cmp	r3, #4
 800e056:	d112      	bne.n	800e07e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	691a      	ldr	r2, [r3, #16]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e062:	b2d2      	uxtb	r2, r2
 800e064:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e074:	b29b      	uxth	r3, r3
 800e076:	3b01      	subs	r3, #1
 800e078:	b29a      	uxth	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e088:	2b40      	cmp	r3, #64	; 0x40
 800e08a:	d112      	bne.n	800e0b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	691a      	ldr	r2, [r3, #16]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d005      	beq.n	800e0c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c0:	f043 0204 	orr.w	r2, r3, #4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d003      	beq.n	800e0d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f8b3 	bl	800e23c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800e0d6:	e039      	b.n	800e14c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	2b2a      	cmp	r3, #42	; 0x2a
 800e0dc:	d109      	bne.n	800e0f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2228      	movs	r2, #40	; 0x28
 800e0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7ff f849 	bl	800d184 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	2b28      	cmp	r3, #40	; 0x28
 800e0fc:	d111      	bne.n	800e122 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	4a15      	ldr	r2, [pc, #84]	; (800e158 <I2C_Slave_STOPF+0x25c>)
 800e102:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2220      	movs	r2, #32
 800e10e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2200      	movs	r2, #0
 800e116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff f84a 	bl	800d1b4 <HAL_I2C_ListenCpltCallback>
}
 800e120:	e014      	b.n	800e14c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e126:	2b22      	cmp	r3, #34	; 0x22
 800e128:	d002      	beq.n	800e130 <I2C_Slave_STOPF+0x234>
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	2b22      	cmp	r3, #34	; 0x22
 800e12e:	d10d      	bne.n	800e14c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2220      	movs	r2, #32
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7ff f81c 	bl	800d184 <HAL_I2C_SlaveRxCpltCallback>
}
 800e14c:	bf00      	nop
 800e14e:	3710      	adds	r7, #16
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}
 800e154:	0800e6c5 	.word	0x0800e6c5
 800e158:	ffff0000 	.word	0xffff0000

0800e15c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e16a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e170:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2b08      	cmp	r3, #8
 800e176:	d002      	beq.n	800e17e <I2C_Slave_AF+0x22>
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	2b20      	cmp	r3, #32
 800e17c:	d129      	bne.n	800e1d2 <I2C_Slave_AF+0x76>
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	2b28      	cmp	r3, #40	; 0x28
 800e182:	d126      	bne.n	800e1d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a2c      	ldr	r2, [pc, #176]	; (800e238 <I2C_Slave_AF+0xdc>)
 800e188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	685a      	ldr	r2, [r3, #4]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e198:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e1a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2220      	movs	r2, #32
 800e1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7fe fff2 	bl	800d1b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800e1d0:	e02e      	b.n	800e230 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
 800e1d4:	2b21      	cmp	r3, #33	; 0x21
 800e1d6:	d126      	bne.n	800e226 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	4a17      	ldr	r2, [pc, #92]	; (800e238 <I2C_Slave_AF+0xdc>)
 800e1dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2221      	movs	r2, #33	; 0x21
 800e1e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2220      	movs	r2, #32
 800e1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e202:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e20c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e21c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7fe ffa6 	bl	800d170 <HAL_I2C_SlaveTxCpltCallback>
}
 800e224:	e004      	b.n	800e230 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e22e:	615a      	str	r2, [r3, #20]
}
 800e230:	bf00      	nop
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	ffff0000 	.word	0xffff0000

0800e23c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e24a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e252:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800e254:	7bbb      	ldrb	r3, [r7, #14]
 800e256:	2b10      	cmp	r3, #16
 800e258:	d002      	beq.n	800e260 <I2C_ITError+0x24>
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b40      	cmp	r3, #64	; 0x40
 800e25e:	d10a      	bne.n	800e276 <I2C_ITError+0x3a>
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	2b22      	cmp	r3, #34	; 0x22
 800e264:	d107      	bne.n	800e276 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e274:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e276:	7bfb      	ldrb	r3, [r7, #15]
 800e278:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e27c:	2b28      	cmp	r3, #40	; 0x28
 800e27e:	d107      	bne.n	800e290 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2228      	movs	r2, #40	; 0x28
 800e28a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e28e:	e015      	b.n	800e2bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e29a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e29e:	d00a      	beq.n	800e2b6 <I2C_ITError+0x7a>
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	2b60      	cmp	r3, #96	; 0x60
 800e2a4:	d007      	beq.n	800e2b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2ca:	d162      	bne.n	800e392 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e2da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d020      	beq.n	800e32c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ee:	4a6a      	ldr	r2, [pc, #424]	; (800e498 <I2C_ITError+0x25c>)
 800e2f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fd fa56 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 8089 	beq.w	800e416 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f022 0201 	bic.w	r2, r2, #1
 800e312:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2220      	movs	r2, #32
 800e318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e326:	4610      	mov	r0, r2
 800e328:	4798      	blx	r3
 800e32a:	e074      	b.n	800e416 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e330:	4a59      	ldr	r2, [pc, #356]	; (800e498 <I2C_ITError+0x25c>)
 800e332:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fd fa35 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d068      	beq.n	800e416 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e34e:	2b40      	cmp	r3, #64	; 0x40
 800e350:	d10b      	bne.n	800e36a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	691a      	ldr	r2, [r3, #16]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35c:	b2d2      	uxtb	r2, r2
 800e35e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	1c5a      	adds	r2, r3, #1
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f022 0201 	bic.w	r2, r2, #1
 800e378:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2220      	movs	r2, #32
 800e37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e38c:	4610      	mov	r0, r2
 800e38e:	4798      	blx	r3
 800e390:	e041      	b.n	800e416 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b60      	cmp	r3, #96	; 0x60
 800e39c:	d125      	bne.n	800e3ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2220      	movs	r2, #32
 800e3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b6:	2b40      	cmp	r3, #64	; 0x40
 800e3b8:	d10b      	bne.n	800e3d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	691a      	ldr	r2, [r3, #16]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c4:	b2d2      	uxtb	r2, r2
 800e3c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f022 0201 	bic.w	r2, r2, #1
 800e3e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f7fe ff0e 	bl	800d204 <HAL_I2C_AbortCpltCallback>
 800e3e8:	e015      	b.n	800e416 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	695b      	ldr	r3, [r3, #20]
 800e3f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f4:	2b40      	cmp	r3, #64	; 0x40
 800e3f6:	d10b      	bne.n	800e410 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	691a      	ldr	r2, [r3, #16]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	1c5a      	adds	r2, r3, #1
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7fe feed 	bl	800d1f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e41a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10e      	bne.n	800e444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800e436:	2b00      	cmp	r3, #0
 800e438:	d104      	bne.n	800e444 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800e440:	2b00      	cmp	r3, #0
 800e442:	d007      	beq.n	800e454 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e452:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e45a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e460:	f003 0304 	and.w	r3, r3, #4
 800e464:	2b04      	cmp	r3, #4
 800e466:	d113      	bne.n	800e490 <I2C_ITError+0x254>
 800e468:	7bfb      	ldrb	r3, [r7, #15]
 800e46a:	2b28      	cmp	r3, #40	; 0x28
 800e46c:	d110      	bne.n	800e490 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4a0a      	ldr	r2, [pc, #40]	; (800e49c <I2C_ITError+0x260>)
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2220      	movs	r2, #32
 800e47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f7fe fe92 	bl	800d1b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e490:	bf00      	nop
 800e492:	3710      	adds	r7, #16
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	0800e6c5 	.word	0x0800e6c5
 800e49c:	ffff0000 	.word	0xffff0000

0800e4a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e4bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	685a      	ldr	r2, [r3, #4]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e4d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d003      	beq.n	800e4e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d003      	beq.n	800e4f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800e4f4:	7cfb      	ldrb	r3, [r7, #19]
 800e4f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800e4fa:	2b21      	cmp	r3, #33	; 0x21
 800e4fc:	d007      	beq.n	800e50e <I2C_DMAXferCplt+0x6e>
 800e4fe:	7cfb      	ldrb	r3, [r7, #19]
 800e500:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800e504:	2b22      	cmp	r3, #34	; 0x22
 800e506:	d131      	bne.n	800e56c <I2C_DMAXferCplt+0xcc>
 800e508:	7cbb      	ldrb	r3, [r7, #18]
 800e50a:	2b20      	cmp	r3, #32
 800e50c:	d12e      	bne.n	800e56c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	685a      	ldr	r2, [r3, #4]
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e51c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2200      	movs	r2, #0
 800e522:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e524:	7cfb      	ldrb	r3, [r7, #19]
 800e526:	2b29      	cmp	r3, #41	; 0x29
 800e528:	d10a      	bne.n	800e540 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2221      	movs	r2, #33	; 0x21
 800e52e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2228      	movs	r2, #40	; 0x28
 800e534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e538:	6978      	ldr	r0, [r7, #20]
 800e53a:	f7fe fe19 	bl	800d170 <HAL_I2C_SlaveTxCpltCallback>
 800e53e:	e00c      	b.n	800e55a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e540:	7cfb      	ldrb	r3, [r7, #19]
 800e542:	2b2a      	cmp	r3, #42	; 0x2a
 800e544:	d109      	bne.n	800e55a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	2222      	movs	r2, #34	; 0x22
 800e54a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2228      	movs	r2, #40	; 0x28
 800e550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e554:	6978      	ldr	r0, [r7, #20]
 800e556:	f7fe fe15 	bl	800d184 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	685a      	ldr	r2, [r3, #4]
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e568:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800e56a:	e06a      	b.n	800e642 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b00      	cmp	r3, #0
 800e576:	d064      	beq.n	800e642 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d107      	bne.n	800e592 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e590:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e5a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e5a8:	d009      	beq.n	800e5be <I2C_DMAXferCplt+0x11e>
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d006      	beq.n	800e5be <I2C_DMAXferCplt+0x11e>
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e5b6:	d002      	beq.n	800e5be <I2C_DMAXferCplt+0x11e>
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2b20      	cmp	r3, #32
 800e5bc:	d107      	bne.n	800e5ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e5dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800e5fc:	6978      	ldr	r0, [r7, #20]
 800e5fe:	f7fe fdf7 	bl	800d1f0 <HAL_I2C_ErrorCallback>
}
 800e602:	e01e      	b.n	800e642 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2220      	movs	r2, #32
 800e608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b40      	cmp	r3, #64	; 0x40
 800e616:	d10a      	bne.n	800e62e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2200      	movs	r2, #0
 800e624:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800e626:	6978      	ldr	r0, [r7, #20]
 800e628:	f7fe fdd8 	bl	800d1dc <HAL_I2C_MemRxCpltCallback>
}
 800e62c:	e009      	b.n	800e642 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2212      	movs	r2, #18
 800e63a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800e63c:	6978      	ldr	r0, [r7, #20]
 800e63e:	f7fb fd8d 	bl	800a15c <HAL_I2C_MasterRxCpltCallback>
}
 800e642:	bf00      	nop
 800e644:	3718      	adds	r7, #24
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e656:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e664:	2200      	movs	r2, #0
 800e666:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e674:	2200      	movs	r2, #0
 800e676:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7fd fa4f 	bl	800bb1c <HAL_DMA_GetError>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b02      	cmp	r3, #2
 800e682:	d01b      	beq.n	800e6bc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e692:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2220      	movs	r2, #32
 800e69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ae:	f043 0210 	orr.w	r2, r3, #16
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f7fe fd9a 	bl	800d1f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800e6de:	4b4b      	ldr	r3, [pc, #300]	; (800e80c <I2C_DMAAbort+0x148>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	08db      	lsrs	r3, r3, #3
 800e6e4:	4a4a      	ldr	r2, [pc, #296]	; (800e810 <I2C_DMAAbort+0x14c>)
 800e6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ea:	0a1a      	lsrs	r2, r3, #8
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	4413      	add	r3, r2
 800e6f2:	00da      	lsls	r2, r3, #3
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d106      	bne.n	800e70c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e702:	f043 0220 	orr.w	r2, r3, #32
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800e70a:	e00a      	b.n	800e722 <I2C_DMAAbort+0x5e>
    }
    count--;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	3b01      	subs	r3, #1
 800e710:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e720:	d0ea      	beq.n	800e6f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e72e:	2200      	movs	r2, #0
 800e730:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e736:	2b00      	cmp	r3, #0
 800e738:	d003      	beq.n	800e742 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73e:	2200      	movs	r2, #0
 800e740:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e750:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2200      	movs	r2, #0
 800e756:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d003      	beq.n	800e768 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e764:	2200      	movs	r2, #0
 800e766:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d003      	beq.n	800e778 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e774:	2200      	movs	r2, #0
 800e776:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f022 0201 	bic.w	r2, r2, #1
 800e786:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b60      	cmp	r3, #96	; 0x60
 800e792:	d10e      	bne.n	800e7b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e794:	697b      	ldr	r3, [r7, #20]
 800e796:	2220      	movs	r2, #32
 800e798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e7aa:	6978      	ldr	r0, [r7, #20]
 800e7ac:	f7fe fd2a 	bl	800d204 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e7b0:	e027      	b.n	800e802 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e7b2:	7cfb      	ldrb	r3, [r7, #19]
 800e7b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e7b8:	2b28      	cmp	r3, #40	; 0x28
 800e7ba:	d117      	bne.n	800e7ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f042 0201 	orr.w	r2, r2, #1
 800e7ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	2228      	movs	r2, #40	; 0x28
 800e7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e7ea:	e007      	b.n	800e7fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	2220      	movs	r2, #32
 800e7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800e7fc:	6978      	ldr	r0, [r7, #20]
 800e7fe:	f7fe fcf7 	bl	800d1f0 <HAL_I2C_ErrorCallback>
}
 800e802:	bf00      	nop
 800e804:	3718      	adds	r7, #24
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	2000041c 	.word	0x2000041c
 800e810:	14f8b589 	.word	0x14f8b589

0800e814 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e81c:	2300      	movs	r3, #0
 800e81e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800e820:	4b13      	ldr	r3, [pc, #76]	; (800e870 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	08db      	lsrs	r3, r3, #3
 800e826:	4a13      	ldr	r2, [pc, #76]	; (800e874 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800e828:	fba2 2303 	umull	r2, r3, r2, r3
 800e82c:	0a1a      	lsrs	r2, r3, #8
 800e82e:	4613      	mov	r3, r2
 800e830:	009b      	lsls	r3, r3, #2
 800e832:	4413      	add	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	3b01      	subs	r3, #1
 800e83a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d107      	bne.n	800e852 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e846:	f043 0220 	orr.w	r2, r3, #32
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	e008      	b.n	800e864 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e85c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e860:	d0e9      	beq.n	800e836 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr
 800e870:	2000041c 	.word	0x2000041c
 800e874:	14f8b589 	.word	0x14f8b589

0800e878 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e884:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e888:	d103      	bne.n	800e892 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800e890:	e007      	b.n	800e8a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e896:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e89a:	d102      	bne.n	800e8a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2208      	movs	r2, #8
 800e8a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e8a2:	bf00      	nop
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr
	...

0800e8b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d101      	bne.n	800e8c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e25b      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f003 0301 	and.w	r3, r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d075      	beq.n	800e9ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e8ce:	4ba3      	ldr	r3, [pc, #652]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	f003 030c 	and.w	r3, r3, #12
 800e8d6:	2b04      	cmp	r3, #4
 800e8d8:	d00c      	beq.n	800e8f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8da:	4ba0      	ldr	r3, [pc, #640]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e8e2:	2b08      	cmp	r3, #8
 800e8e4:	d112      	bne.n	800e90c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e8e6:	4b9d      	ldr	r3, [pc, #628]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8f2:	d10b      	bne.n	800e90c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8f4:	4b99      	ldr	r3, [pc, #612]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d05b      	beq.n	800e9b8 <HAL_RCC_OscConfig+0x108>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d157      	bne.n	800e9b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e236      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e914:	d106      	bne.n	800e924 <HAL_RCC_OscConfig+0x74>
 800e916:	4b91      	ldr	r3, [pc, #580]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a90      	ldr	r2, [pc, #576]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e91c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e920:	6013      	str	r3, [r2, #0]
 800e922:	e01d      	b.n	800e960 <HAL_RCC_OscConfig+0xb0>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e92c:	d10c      	bne.n	800e948 <HAL_RCC_OscConfig+0x98>
 800e92e:	4b8b      	ldr	r3, [pc, #556]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a8a      	ldr	r2, [pc, #552]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e938:	6013      	str	r3, [r2, #0]
 800e93a:	4b88      	ldr	r3, [pc, #544]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4a87      	ldr	r2, [pc, #540]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e944:	6013      	str	r3, [r2, #0]
 800e946:	e00b      	b.n	800e960 <HAL_RCC_OscConfig+0xb0>
 800e948:	4b84      	ldr	r3, [pc, #528]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a83      	ldr	r2, [pc, #524]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e94e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	4b81      	ldr	r3, [pc, #516]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a80      	ldr	r2, [pc, #512]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e95a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e95e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d013      	beq.n	800e990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e968:	f7fb fdbc 	bl	800a4e4 <HAL_GetTick>
 800e96c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e96e:	e008      	b.n	800e982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e970:	f7fb fdb8 	bl	800a4e4 <HAL_GetTick>
 800e974:	4602      	mov	r2, r0
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2b64      	cmp	r3, #100	; 0x64
 800e97c:	d901      	bls.n	800e982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e97e:	2303      	movs	r3, #3
 800e980:	e1fb      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e982:	4b76      	ldr	r3, [pc, #472]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d0f0      	beq.n	800e970 <HAL_RCC_OscConfig+0xc0>
 800e98e:	e014      	b.n	800e9ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e990:	f7fb fda8 	bl	800a4e4 <HAL_GetTick>
 800e994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e996:	e008      	b.n	800e9aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e998:	f7fb fda4 	bl	800a4e4 <HAL_GetTick>
 800e99c:	4602      	mov	r2, r0
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	1ad3      	subs	r3, r2, r3
 800e9a2:	2b64      	cmp	r3, #100	; 0x64
 800e9a4:	d901      	bls.n	800e9aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	e1e7      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e9aa:	4b6c      	ldr	r3, [pc, #432]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d1f0      	bne.n	800e998 <HAL_RCC_OscConfig+0xe8>
 800e9b6:	e000      	b.n	800e9ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f003 0302 	and.w	r3, r3, #2
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d063      	beq.n	800ea8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e9c6:	4b65      	ldr	r3, [pc, #404]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f003 030c 	and.w	r3, r3, #12
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00b      	beq.n	800e9ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9d2:	4b62      	ldr	r3, [pc, #392]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e9da:	2b08      	cmp	r3, #8
 800e9dc:	d11c      	bne.n	800ea18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e9de:	4b5f      	ldr	r3, [pc, #380]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e9e0:	685b      	ldr	r3, [r3, #4]
 800e9e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d116      	bne.n	800ea18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e9ea:	4b5c      	ldr	r3, [pc, #368]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 0302 	and.w	r3, r3, #2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d005      	beq.n	800ea02 <HAL_RCC_OscConfig+0x152>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d001      	beq.n	800ea02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e1bb      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea02:	4b56      	ldr	r3, [pc, #344]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	691b      	ldr	r3, [r3, #16]
 800ea0e:	00db      	lsls	r3, r3, #3
 800ea10:	4952      	ldr	r1, [pc, #328]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea12:	4313      	orrs	r3, r2
 800ea14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea16:	e03a      	b.n	800ea8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d020      	beq.n	800ea62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea20:	4b4f      	ldr	r3, [pc, #316]	; (800eb60 <HAL_RCC_OscConfig+0x2b0>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea26:	f7fb fd5d 	bl	800a4e4 <HAL_GetTick>
 800ea2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea2c:	e008      	b.n	800ea40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea2e:	f7fb fd59 	bl	800a4e4 <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d901      	bls.n	800ea40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	e19c      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ea40:	4b46      	ldr	r3, [pc, #280]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f003 0302 	and.w	r3, r3, #2
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d0f0      	beq.n	800ea2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea4c:	4b43      	ldr	r3, [pc, #268]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	4940      	ldr	r1, [pc, #256]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	600b      	str	r3, [r1, #0]
 800ea60:	e015      	b.n	800ea8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea62:	4b3f      	ldr	r3, [pc, #252]	; (800eb60 <HAL_RCC_OscConfig+0x2b0>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea68:	f7fb fd3c 	bl	800a4e4 <HAL_GetTick>
 800ea6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea6e:	e008      	b.n	800ea82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea70:	f7fb fd38 	bl	800a4e4 <HAL_GetTick>
 800ea74:	4602      	mov	r2, r0
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	1ad3      	subs	r3, r2, r3
 800ea7a:	2b02      	cmp	r3, #2
 800ea7c:	d901      	bls.n	800ea82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ea7e:	2303      	movs	r3, #3
 800ea80:	e17b      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ea82:	4b36      	ldr	r3, [pc, #216]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 0302 	and.w	r3, r3, #2
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1f0      	bne.n	800ea70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f003 0308 	and.w	r3, r3, #8
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d030      	beq.n	800eafc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	695b      	ldr	r3, [r3, #20]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d016      	beq.n	800ead0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eaa2:	4b30      	ldr	r3, [pc, #192]	; (800eb64 <HAL_RCC_OscConfig+0x2b4>)
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eaa8:	f7fb fd1c 	bl	800a4e4 <HAL_GetTick>
 800eaac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eaae:	e008      	b.n	800eac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eab0:	f7fb fd18 	bl	800a4e4 <HAL_GetTick>
 800eab4:	4602      	mov	r2, r0
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	2b02      	cmp	r3, #2
 800eabc:	d901      	bls.n	800eac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eabe:	2303      	movs	r3, #3
 800eac0:	e15b      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eac2:	4b26      	ldr	r3, [pc, #152]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac6:	f003 0302 	and.w	r3, r3, #2
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d0f0      	beq.n	800eab0 <HAL_RCC_OscConfig+0x200>
 800eace:	e015      	b.n	800eafc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ead0:	4b24      	ldr	r3, [pc, #144]	; (800eb64 <HAL_RCC_OscConfig+0x2b4>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ead6:	f7fb fd05 	bl	800a4e4 <HAL_GetTick>
 800eada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eadc:	e008      	b.n	800eaf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eade:	f7fb fd01 	bl	800a4e4 <HAL_GetTick>
 800eae2:	4602      	mov	r2, r0
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	2b02      	cmp	r3, #2
 800eaea:	d901      	bls.n	800eaf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800eaec:	2303      	movs	r3, #3
 800eaee:	e144      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eaf0:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eaf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaf4:	f003 0302 	and.w	r3, r3, #2
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d1f0      	bne.n	800eade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f003 0304 	and.w	r3, r3, #4
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 80a0 	beq.w	800ec4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb0e:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10f      	bne.n	800eb3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	60bb      	str	r3, [r7, #8]
 800eb1e:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb22:	4a0e      	ldr	r2, [pc, #56]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eb24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb28:	6413      	str	r3, [r2, #64]	; 0x40
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <HAL_RCC_OscConfig+0x2ac>)
 800eb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb32:	60bb      	str	r3, [r7, #8]
 800eb34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eb36:	2301      	movs	r3, #1
 800eb38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <HAL_RCC_OscConfig+0x2b8>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d121      	bne.n	800eb8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eb46:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <HAL_RCC_OscConfig+0x2b8>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a07      	ldr	r2, [pc, #28]	; (800eb68 <HAL_RCC_OscConfig+0x2b8>)
 800eb4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eb52:	f7fb fcc7 	bl	800a4e4 <HAL_GetTick>
 800eb56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb58:	e011      	b.n	800eb7e <HAL_RCC_OscConfig+0x2ce>
 800eb5a:	bf00      	nop
 800eb5c:	40023800 	.word	0x40023800
 800eb60:	42470000 	.word	0x42470000
 800eb64:	42470e80 	.word	0x42470e80
 800eb68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb6c:	f7fb fcba 	bl	800a4e4 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d901      	bls.n	800eb7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e0fd      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eb7e:	4b81      	ldr	r3, [pc, #516]	; (800ed84 <HAL_RCC_OscConfig+0x4d4>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d0f0      	beq.n	800eb6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d106      	bne.n	800eba0 <HAL_RCC_OscConfig+0x2f0>
 800eb92:	4b7d      	ldr	r3, [pc, #500]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800eb94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb96:	4a7c      	ldr	r2, [pc, #496]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800eb98:	f043 0301 	orr.w	r3, r3, #1
 800eb9c:	6713      	str	r3, [r2, #112]	; 0x70
 800eb9e:	e01c      	b.n	800ebda <HAL_RCC_OscConfig+0x32a>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	2b05      	cmp	r3, #5
 800eba6:	d10c      	bne.n	800ebc2 <HAL_RCC_OscConfig+0x312>
 800eba8:	4b77      	ldr	r3, [pc, #476]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebac:	4a76      	ldr	r2, [pc, #472]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebae:	f043 0304 	orr.w	r3, r3, #4
 800ebb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ebb4:	4b74      	ldr	r3, [pc, #464]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb8:	4a73      	ldr	r2, [pc, #460]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebba:	f043 0301 	orr.w	r3, r3, #1
 800ebbe:	6713      	str	r3, [r2, #112]	; 0x70
 800ebc0:	e00b      	b.n	800ebda <HAL_RCC_OscConfig+0x32a>
 800ebc2:	4b71      	ldr	r3, [pc, #452]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc6:	4a70      	ldr	r2, [pc, #448]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebc8:	f023 0301 	bic.w	r3, r3, #1
 800ebcc:	6713      	str	r3, [r2, #112]	; 0x70
 800ebce:	4b6e      	ldr	r3, [pc, #440]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebd2:	4a6d      	ldr	r2, [pc, #436]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ebd4:	f023 0304 	bic.w	r3, r3, #4
 800ebd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d015      	beq.n	800ec0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebe2:	f7fb fc7f 	bl	800a4e4 <HAL_GetTick>
 800ebe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ebe8:	e00a      	b.n	800ec00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ebea:	f7fb fc7b 	bl	800a4e4 <HAL_GetTick>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d901      	bls.n	800ec00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	e0bc      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec00:	4b61      	ldr	r3, [pc, #388]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec04:	f003 0302 	and.w	r3, r3, #2
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d0ee      	beq.n	800ebea <HAL_RCC_OscConfig+0x33a>
 800ec0c:	e014      	b.n	800ec38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec0e:	f7fb fc69 	bl	800a4e4 <HAL_GetTick>
 800ec12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec14:	e00a      	b.n	800ec2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec16:	f7fb fc65 	bl	800a4e4 <HAL_GetTick>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d901      	bls.n	800ec2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e0a6      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec2c:	4b56      	ldr	r3, [pc, #344]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec30:	f003 0302 	and.w	r3, r3, #2
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1ee      	bne.n	800ec16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ec38:	7dfb      	ldrb	r3, [r7, #23]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d105      	bne.n	800ec4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec3e:	4b52      	ldr	r3, [pc, #328]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec42:	4a51      	ldr	r2, [pc, #324]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ec48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f000 8092 	beq.w	800ed78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ec54:	4b4c      	ldr	r3, [pc, #304]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	f003 030c 	and.w	r3, r3, #12
 800ec5c:	2b08      	cmp	r3, #8
 800ec5e:	d05c      	beq.n	800ed1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d141      	bne.n	800ecec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec68:	4b48      	ldr	r3, [pc, #288]	; (800ed8c <HAL_RCC_OscConfig+0x4dc>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec6e:	f7fb fc39 	bl	800a4e4 <HAL_GetTick>
 800ec72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec74:	e008      	b.n	800ec88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec76:	f7fb fc35 	bl	800a4e4 <HAL_GetTick>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	2b02      	cmp	r3, #2
 800ec82:	d901      	bls.n	800ec88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e078      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ec88:	4b3f      	ldr	r3, [pc, #252]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d1f0      	bne.n	800ec76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	69da      	ldr	r2, [r3, #28]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6a1b      	ldr	r3, [r3, #32]
 800ec9c:	431a      	orrs	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca2:	019b      	lsls	r3, r3, #6
 800eca4:	431a      	orrs	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecaa:	085b      	lsrs	r3, r3, #1
 800ecac:	3b01      	subs	r3, #1
 800ecae:	041b      	lsls	r3, r3, #16
 800ecb0:	431a      	orrs	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb6:	061b      	lsls	r3, r3, #24
 800ecb8:	4933      	ldr	r1, [pc, #204]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ecbe:	4b33      	ldr	r3, [pc, #204]	; (800ed8c <HAL_RCC_OscConfig+0x4dc>)
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecc4:	f7fb fc0e 	bl	800a4e4 <HAL_GetTick>
 800ecc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecca:	e008      	b.n	800ecde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eccc:	f7fb fc0a 	bl	800a4e4 <HAL_GetTick>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d901      	bls.n	800ecde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	e04d      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ecde:	4b2a      	ldr	r3, [pc, #168]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d0f0      	beq.n	800eccc <HAL_RCC_OscConfig+0x41c>
 800ecea:	e045      	b.n	800ed78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecec:	4b27      	ldr	r3, [pc, #156]	; (800ed8c <HAL_RCC_OscConfig+0x4dc>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecf2:	f7fb fbf7 	bl	800a4e4 <HAL_GetTick>
 800ecf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecf8:	e008      	b.n	800ed0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ecfa:	f7fb fbf3 	bl	800a4e4 <HAL_GetTick>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d901      	bls.n	800ed0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800ed08:	2303      	movs	r3, #3
 800ed0a:	e036      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed0c:	4b1e      	ldr	r3, [pc, #120]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d1f0      	bne.n	800ecfa <HAL_RCC_OscConfig+0x44a>
 800ed18:	e02e      	b.n	800ed78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	2b01      	cmp	r3, #1
 800ed20:	d101      	bne.n	800ed26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800ed22:	2301      	movs	r3, #1
 800ed24:	e029      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ed26:	4b18      	ldr	r3, [pc, #96]	; (800ed88 <HAL_RCC_OscConfig+0x4d8>)
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	69db      	ldr	r3, [r3, #28]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d11c      	bne.n	800ed74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d115      	bne.n	800ed74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ed4e:	4013      	ands	r3, r2
 800ed50:	687a      	ldr	r2, [r7, #4]
 800ed52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d10d      	bne.n	800ed74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d106      	bne.n	800ed74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d001      	beq.n	800ed78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800ed74:	2301      	movs	r3, #1
 800ed76:	e000      	b.n	800ed7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3718      	adds	r7, #24
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop
 800ed84:	40007000 	.word	0x40007000
 800ed88:	40023800 	.word	0x40023800
 800ed8c:	42470060 	.word	0x42470060

0800ed90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d101      	bne.n	800eda4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e0cc      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eda4:	4b68      	ldr	r3, [pc, #416]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f003 030f 	and.w	r3, r3, #15
 800edac:	683a      	ldr	r2, [r7, #0]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d90c      	bls.n	800edcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800edb2:	4b65      	ldr	r3, [pc, #404]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	b2d2      	uxtb	r2, r2
 800edb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800edba:	4b63      	ldr	r3, [pc, #396]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 030f 	and.w	r3, r3, #15
 800edc2:	683a      	ldr	r2, [r7, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d001      	beq.n	800edcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800edc8:	2301      	movs	r3, #1
 800edca:	e0b8      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f003 0302 	and.w	r3, r3, #2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d020      	beq.n	800ee1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d005      	beq.n	800edf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ede4:	4b59      	ldr	r3, [pc, #356]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	4a58      	ldr	r2, [pc, #352]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800edea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800edee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f003 0308 	and.w	r3, r3, #8
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d005      	beq.n	800ee08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800edfc:	4b53      	ldr	r3, [pc, #332]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	4a52      	ldr	r2, [pc, #328]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ee06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee08:	4b50      	ldr	r3, [pc, #320]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	494d      	ldr	r1, [pc, #308]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f003 0301 	and.w	r3, r3, #1
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d044      	beq.n	800eeb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d107      	bne.n	800ee3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee2e:	4b47      	ldr	r3, [pc, #284]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d119      	bne.n	800ee6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e07f      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	2b02      	cmp	r3, #2
 800ee44:	d003      	beq.n	800ee4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	d107      	bne.n	800ee5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ee4e:	4b3f      	ldr	r3, [pc, #252]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d109      	bne.n	800ee6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	e06f      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee5e:	4b3b      	ldr	r3, [pc, #236]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f003 0302 	and.w	r3, r3, #2
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d101      	bne.n	800ee6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e067      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ee6e:	4b37      	ldr	r3, [pc, #220]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	f023 0203 	bic.w	r2, r3, #3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	4934      	ldr	r1, [pc, #208]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ee80:	f7fb fb30 	bl	800a4e4 <HAL_GetTick>
 800ee84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee86:	e00a      	b.n	800ee9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ee88:	f7fb fb2c 	bl	800a4e4 <HAL_GetTick>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d901      	bls.n	800ee9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e04f      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ee9e:	4b2b      	ldr	r3, [pc, #172]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f003 020c 	and.w	r2, r3, #12
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	685b      	ldr	r3, [r3, #4]
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d1eb      	bne.n	800ee88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800eeb0:	4b25      	ldr	r3, [pc, #148]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f003 030f 	and.w	r3, r3, #15
 800eeb8:	683a      	ldr	r2, [r7, #0]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d20c      	bcs.n	800eed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eebe:	4b22      	ldr	r3, [pc, #136]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	b2d2      	uxtb	r2, r2
 800eec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800eec6:	4b20      	ldr	r3, [pc, #128]	; (800ef48 <HAL_RCC_ClockConfig+0x1b8>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f003 030f 	and.w	r3, r3, #15
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d001      	beq.n	800eed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800eed4:	2301      	movs	r3, #1
 800eed6:	e032      	b.n	800ef3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f003 0304 	and.w	r3, r3, #4
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d008      	beq.n	800eef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800eee4:	4b19      	ldr	r3, [pc, #100]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800eee6:	689b      	ldr	r3, [r3, #8]
 800eee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	4916      	ldr	r1, [pc, #88]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800eef2:	4313      	orrs	r3, r2
 800eef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f003 0308 	and.w	r3, r3, #8
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d009      	beq.n	800ef16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ef02:	4b12      	ldr	r3, [pc, #72]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	691b      	ldr	r3, [r3, #16]
 800ef0e:	00db      	lsls	r3, r3, #3
 800ef10:	490e      	ldr	r1, [pc, #56]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ef12:	4313      	orrs	r3, r2
 800ef14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ef16:	f000 f82d 	bl	800ef74 <HAL_RCC_GetSysClockFreq>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	4b0b      	ldr	r3, [pc, #44]	; (800ef4c <HAL_RCC_ClockConfig+0x1bc>)
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	091b      	lsrs	r3, r3, #4
 800ef22:	f003 030f 	and.w	r3, r3, #15
 800ef26:	490a      	ldr	r1, [pc, #40]	; (800ef50 <HAL_RCC_ClockConfig+0x1c0>)
 800ef28:	5ccb      	ldrb	r3, [r1, r3]
 800ef2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef2e:	4a09      	ldr	r2, [pc, #36]	; (800ef54 <HAL_RCC_ClockConfig+0x1c4>)
 800ef30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ef32:	4b09      	ldr	r3, [pc, #36]	; (800ef58 <HAL_RCC_ClockConfig+0x1c8>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fb f93e 	bl	800a1b8 <HAL_InitTick>

  return HAL_OK;
 800ef3c:	2300      	movs	r3, #0
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3710      	adds	r7, #16
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	40023c00 	.word	0x40023c00
 800ef4c:	40023800 	.word	0x40023800
 800ef50:	0801ac2c 	.word	0x0801ac2c
 800ef54:	2000041c 	.word	0x2000041c
 800ef58:	20000420 	.word	0x20000420

0800ef5c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800ef60:	4b03      	ldr	r3, [pc, #12]	; (800ef70 <HAL_RCC_EnableCSS+0x14>)
 800ef62:	2201      	movs	r2, #1
 800ef64:	601a      	str	r2, [r3, #0]
}
 800ef66:	bf00      	nop
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	4247004c 	.word	0x4247004c

0800ef74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ef74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ef78:	b084      	sub	sp, #16
 800ef7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	607b      	str	r3, [r7, #4]
 800ef80:	2300      	movs	r3, #0
 800ef82:	60fb      	str	r3, [r7, #12]
 800ef84:	2300      	movs	r3, #0
 800ef86:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ef8c:	4b67      	ldr	r3, [pc, #412]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	f003 030c 	and.w	r3, r3, #12
 800ef94:	2b08      	cmp	r3, #8
 800ef96:	d00d      	beq.n	800efb4 <HAL_RCC_GetSysClockFreq+0x40>
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	f200 80bd 	bhi.w	800f118 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <HAL_RCC_GetSysClockFreq+0x34>
 800efa2:	2b04      	cmp	r3, #4
 800efa4:	d003      	beq.n	800efae <HAL_RCC_GetSysClockFreq+0x3a>
 800efa6:	e0b7      	b.n	800f118 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800efa8:	4b61      	ldr	r3, [pc, #388]	; (800f130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800efaa:	60bb      	str	r3, [r7, #8]
       break;
 800efac:	e0b7      	b.n	800f11e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800efae:	4b61      	ldr	r3, [pc, #388]	; (800f134 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800efb0:	60bb      	str	r3, [r7, #8]
      break;
 800efb2:	e0b4      	b.n	800f11e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800efb4:	4b5d      	ldr	r3, [pc, #372]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800efbc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800efbe:	4b5b      	ldr	r3, [pc, #364]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d04d      	beq.n	800f066 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800efca:	4b58      	ldr	r3, [pc, #352]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	099b      	lsrs	r3, r3, #6
 800efd0:	461a      	mov	r2, r3
 800efd2:	f04f 0300 	mov.w	r3, #0
 800efd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 800efda:	f04f 0100 	mov.w	r1, #0
 800efde:	ea02 0800 	and.w	r8, r2, r0
 800efe2:	ea03 0901 	and.w	r9, r3, r1
 800efe6:	4640      	mov	r0, r8
 800efe8:	4649      	mov	r1, r9
 800efea:	f04f 0200 	mov.w	r2, #0
 800efee:	f04f 0300 	mov.w	r3, #0
 800eff2:	014b      	lsls	r3, r1, #5
 800eff4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800eff8:	0142      	lsls	r2, r0, #5
 800effa:	4610      	mov	r0, r2
 800effc:	4619      	mov	r1, r3
 800effe:	ebb0 0008 	subs.w	r0, r0, r8
 800f002:	eb61 0109 	sbc.w	r1, r1, r9
 800f006:	f04f 0200 	mov.w	r2, #0
 800f00a:	f04f 0300 	mov.w	r3, #0
 800f00e:	018b      	lsls	r3, r1, #6
 800f010:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f014:	0182      	lsls	r2, r0, #6
 800f016:	1a12      	subs	r2, r2, r0
 800f018:	eb63 0301 	sbc.w	r3, r3, r1
 800f01c:	f04f 0000 	mov.w	r0, #0
 800f020:	f04f 0100 	mov.w	r1, #0
 800f024:	00d9      	lsls	r1, r3, #3
 800f026:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f02a:	00d0      	lsls	r0, r2, #3
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	eb12 0208 	adds.w	r2, r2, r8
 800f034:	eb43 0309 	adc.w	r3, r3, r9
 800f038:	f04f 0000 	mov.w	r0, #0
 800f03c:	f04f 0100 	mov.w	r1, #0
 800f040:	0259      	lsls	r1, r3, #9
 800f042:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800f046:	0250      	lsls	r0, r2, #9
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4610      	mov	r0, r2
 800f04e:	4619      	mov	r1, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	461a      	mov	r2, r3
 800f054:	f04f 0300 	mov.w	r3, #0
 800f058:	f7f1 fe16 	bl	8000c88 <__aeabi_uldivmod>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4613      	mov	r3, r2
 800f062:	60fb      	str	r3, [r7, #12]
 800f064:	e04a      	b.n	800f0fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f066:	4b31      	ldr	r3, [pc, #196]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	099b      	lsrs	r3, r3, #6
 800f06c:	461a      	mov	r2, r3
 800f06e:	f04f 0300 	mov.w	r3, #0
 800f072:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f076:	f04f 0100 	mov.w	r1, #0
 800f07a:	ea02 0400 	and.w	r4, r2, r0
 800f07e:	ea03 0501 	and.w	r5, r3, r1
 800f082:	4620      	mov	r0, r4
 800f084:	4629      	mov	r1, r5
 800f086:	f04f 0200 	mov.w	r2, #0
 800f08a:	f04f 0300 	mov.w	r3, #0
 800f08e:	014b      	lsls	r3, r1, #5
 800f090:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f094:	0142      	lsls	r2, r0, #5
 800f096:	4610      	mov	r0, r2
 800f098:	4619      	mov	r1, r3
 800f09a:	1b00      	subs	r0, r0, r4
 800f09c:	eb61 0105 	sbc.w	r1, r1, r5
 800f0a0:	f04f 0200 	mov.w	r2, #0
 800f0a4:	f04f 0300 	mov.w	r3, #0
 800f0a8:	018b      	lsls	r3, r1, #6
 800f0aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f0ae:	0182      	lsls	r2, r0, #6
 800f0b0:	1a12      	subs	r2, r2, r0
 800f0b2:	eb63 0301 	sbc.w	r3, r3, r1
 800f0b6:	f04f 0000 	mov.w	r0, #0
 800f0ba:	f04f 0100 	mov.w	r1, #0
 800f0be:	00d9      	lsls	r1, r3, #3
 800f0c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f0c4:	00d0      	lsls	r0, r2, #3
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	1912      	adds	r2, r2, r4
 800f0cc:	eb45 0303 	adc.w	r3, r5, r3
 800f0d0:	f04f 0000 	mov.w	r0, #0
 800f0d4:	f04f 0100 	mov.w	r1, #0
 800f0d8:	0299      	lsls	r1, r3, #10
 800f0da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f0de:	0290      	lsls	r0, r2, #10
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	f04f 0300 	mov.w	r3, #0
 800f0f0:	f7f1 fdca 	bl	8000c88 <__aeabi_uldivmod>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f0fc:	4b0b      	ldr	r3, [pc, #44]	; (800f12c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	0c1b      	lsrs	r3, r3, #16
 800f102:	f003 0303 	and.w	r3, r3, #3
 800f106:	3301      	adds	r3, #1
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	fbb2 f3f3 	udiv	r3, r2, r3
 800f114:	60bb      	str	r3, [r7, #8]
      break;
 800f116:	e002      	b.n	800f11e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f11a:	60bb      	str	r3, [r7, #8]
      break;
 800f11c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f11e:	68bb      	ldr	r3, [r7, #8]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3710      	adds	r7, #16
 800f124:	46bd      	mov	sp, r7
 800f126:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f12a:	bf00      	nop
 800f12c:	40023800 	.word	0x40023800
 800f130:	00f42400 	.word	0x00f42400
 800f134:	007a1200 	.word	0x007a1200

0800f138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f138:	b480      	push	{r7}
 800f13a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f13c:	4b03      	ldr	r3, [pc, #12]	; (800f14c <HAL_RCC_GetHCLKFreq+0x14>)
 800f13e:	681b      	ldr	r3, [r3, #0]
}
 800f140:	4618      	mov	r0, r3
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr
 800f14a:	bf00      	nop
 800f14c:	2000041c 	.word	0x2000041c

0800f150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f154:	f7ff fff0 	bl	800f138 <HAL_RCC_GetHCLKFreq>
 800f158:	4602      	mov	r2, r0
 800f15a:	4b05      	ldr	r3, [pc, #20]	; (800f170 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	0a9b      	lsrs	r3, r3, #10
 800f160:	f003 0307 	and.w	r3, r3, #7
 800f164:	4903      	ldr	r1, [pc, #12]	; (800f174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f166:	5ccb      	ldrb	r3, [r1, r3]
 800f168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	40023800 	.word	0x40023800
 800f174:	0801ac3c 	.word	0x0801ac3c

0800f178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f17c:	f7ff ffdc 	bl	800f138 <HAL_RCC_GetHCLKFreq>
 800f180:	4602      	mov	r2, r0
 800f182:	4b05      	ldr	r3, [pc, #20]	; (800f198 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f184:	689b      	ldr	r3, [r3, #8]
 800f186:	0b5b      	lsrs	r3, r3, #13
 800f188:	f003 0307 	and.w	r3, r3, #7
 800f18c:	4903      	ldr	r1, [pc, #12]	; (800f19c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f18e:	5ccb      	ldrb	r3, [r1, r3]
 800f190:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f194:	4618      	mov	r0, r3
 800f196:	bd80      	pop	{r7, pc}
 800f198:	40023800 	.word	0x40023800
 800f19c:	0801ac3c 	.word	0x0801ac3c

0800f1a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b083      	sub	sp, #12
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	220f      	movs	r2, #15
 800f1ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f1b0:	4b12      	ldr	r3, [pc, #72]	; (800f1fc <HAL_RCC_GetClockConfig+0x5c>)
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f003 0203 	and.w	r2, r3, #3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <HAL_RCC_GetClockConfig+0x5c>)
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f1c8:	4b0c      	ldr	r3, [pc, #48]	; (800f1fc <HAL_RCC_GetClockConfig+0x5c>)
 800f1ca:	689b      	ldr	r3, [r3, #8]
 800f1cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f1d4:	4b09      	ldr	r3, [pc, #36]	; (800f1fc <HAL_RCC_GetClockConfig+0x5c>)
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	08db      	lsrs	r3, r3, #3
 800f1da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f1e2:	4b07      	ldr	r3, [pc, #28]	; (800f200 <HAL_RCC_GetClockConfig+0x60>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f003 020f 	and.w	r2, r3, #15
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	601a      	str	r2, [r3, #0]
}
 800f1ee:	bf00      	nop
 800f1f0:	370c      	adds	r7, #12
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	40023800 	.word	0x40023800
 800f200:	40023c00 	.word	0x40023c00

0800f204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f212:	2301      	movs	r3, #1
 800f214:	e056      	b.n	800f2c4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f222:	b2db      	uxtb	r3, r3
 800f224:	2b00      	cmp	r3, #0
 800f226:	d106      	bne.n	800f236 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f7f3 f977 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2202      	movs	r2, #2
 800f23a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f24c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	431a      	orrs	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	431a      	orrs	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	691b      	ldr	r3, [r3, #16]
 800f262:	431a      	orrs	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	431a      	orrs	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f272:	431a      	orrs	r2, r3
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	69db      	ldr	r3, [r3, #28]
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	ea42 0103 	orr.w	r1, r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	699b      	ldr	r3, [r3, #24]
 800f292:	0c1b      	lsrs	r3, r3, #16
 800f294:	f003 0104 	and.w	r1, r3, #4
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	430a      	orrs	r2, r1
 800f2a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	69da      	ldr	r2, [r3, #28]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f2b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f2e6:	2b01      	cmp	r3, #1
 800f2e8:	d101      	bne.n	800f2ee <HAL_SPI_Transmit+0x22>
 800f2ea:	2302      	movs	r3, #2
 800f2ec:	e11e      	b.n	800f52c <HAL_SPI_Transmit+0x260>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2f6:	f7fb f8f5 	bl	800a4e4 <HAL_GetTick>
 800f2fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d002      	beq.n	800f312 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800f30c:	2302      	movs	r3, #2
 800f30e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f310:	e103      	b.n	800f51a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800f312:	68bb      	ldr	r3, [r7, #8]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <HAL_SPI_Transmit+0x52>
 800f318:	88fb      	ldrh	r3, [r7, #6]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d102      	bne.n	800f324 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800f31e:	2301      	movs	r3, #1
 800f320:	77fb      	strb	r3, [r7, #31]
    goto error;
 800f322:	e0fa      	b.n	800f51a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2203      	movs	r2, #3
 800f328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	68ba      	ldr	r2, [r7, #8]
 800f336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	88fa      	ldrh	r2, [r7, #6]
 800f33c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	88fa      	ldrh	r2, [r7, #6]
 800f342:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	2200      	movs	r2, #0
 800f348:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2200      	movs	r2, #0
 800f34e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f36a:	d107      	bne.n	800f37c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f37a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f386:	2b40      	cmp	r3, #64	; 0x40
 800f388:	d007      	beq.n	800f39a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f3a2:	d14b      	bne.n	800f43c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <HAL_SPI_Transmit+0xe6>
 800f3ac:	8afb      	ldrh	r3, [r7, #22]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d13e      	bne.n	800f430 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3b6:	881a      	ldrh	r2, [r3, #0]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c2:	1c9a      	adds	r2, r3, #2
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	b29a      	uxth	r2, r3
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f3d6:	e02b      	b.n	800f430 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	f003 0302 	and.w	r3, r3, #2
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d112      	bne.n	800f40c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ea:	881a      	ldrh	r2, [r3, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3f6:	1c9a      	adds	r2, r3, #2
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f400:	b29b      	uxth	r3, r3
 800f402:	3b01      	subs	r3, #1
 800f404:	b29a      	uxth	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	86da      	strh	r2, [r3, #54]	; 0x36
 800f40a:	e011      	b.n	800f430 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f40c:	f7fb f86a 	bl	800a4e4 <HAL_GetTick>
 800f410:	4602      	mov	r2, r0
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	683a      	ldr	r2, [r7, #0]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d803      	bhi.n	800f424 <HAL_SPI_Transmit+0x158>
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f422:	d102      	bne.n	800f42a <HAL_SPI_Transmit+0x15e>
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d102      	bne.n	800f430 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800f42a:	2303      	movs	r3, #3
 800f42c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f42e:	e074      	b.n	800f51a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f434:	b29b      	uxth	r3, r3
 800f436:	2b00      	cmp	r3, #0
 800f438:	d1ce      	bne.n	800f3d8 <HAL_SPI_Transmit+0x10c>
 800f43a:	e04c      	b.n	800f4d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <HAL_SPI_Transmit+0x17e>
 800f444:	8afb      	ldrh	r3, [r7, #22]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d140      	bne.n	800f4cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	330c      	adds	r3, #12
 800f454:	7812      	ldrb	r2, [r2, #0]
 800f456:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f466:	b29b      	uxth	r3, r3
 800f468:	3b01      	subs	r3, #1
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f470:	e02c      	b.n	800f4cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f003 0302 	and.w	r3, r3, #2
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	d113      	bne.n	800f4a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	330c      	adds	r3, #12
 800f48a:	7812      	ldrb	r2, [r2, #0]
 800f48c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f492:	1c5a      	adds	r2, r3, #1
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	86da      	strh	r2, [r3, #54]	; 0x36
 800f4a6:	e011      	b.n	800f4cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4a8:	f7fb f81c 	bl	800a4e4 <HAL_GetTick>
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	1ad3      	subs	r3, r2, r3
 800f4b2:	683a      	ldr	r2, [r7, #0]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d803      	bhi.n	800f4c0 <HAL_SPI_Transmit+0x1f4>
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4be:	d102      	bne.n	800f4c6 <HAL_SPI_Transmit+0x1fa>
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d102      	bne.n	800f4cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800f4c6:	2303      	movs	r3, #3
 800f4c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800f4ca:	e026      	b.n	800f51a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1cd      	bne.n	800f472 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f4d6:	69ba      	ldr	r2, [r7, #24]
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f000 f9b2 	bl	800f844 <SPI_EndRxTxTransaction>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	2220      	movs	r2, #32
 800f4ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d10a      	bne.n	800f50a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	613b      	str	r3, [r7, #16]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	613b      	str	r3, [r7, #16]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	613b      	str	r3, [r7, #16]
 800f508:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d002      	beq.n	800f518 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800f512:	2301      	movs	r3, #1
 800f514:	77fb      	strb	r3, [r7, #31]
 800f516:	e000      	b.n	800f51a <HAL_SPI_Transmit+0x24e>
  }

error:
 800f518:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2200      	movs	r2, #0
 800f526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800f52a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3720      	adds	r7, #32
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	099b      	lsrs	r3, r3, #6
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10f      	bne.n	800f578 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00a      	beq.n	800f578 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	099b      	lsrs	r3, r3, #6
 800f566:	f003 0301 	and.w	r3, r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d004      	beq.n	800f578 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	4798      	blx	r3
    return;
 800f576:	e0d7      	b.n	800f728 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	085b      	lsrs	r3, r3, #1
 800f57c:	f003 0301 	and.w	r3, r3, #1
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <HAL_SPI_IRQHandler+0x66>
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	09db      	lsrs	r3, r3, #7
 800f588:	f003 0301 	and.w	r3, r3, #1
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d004      	beq.n	800f59a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	4798      	blx	r3
    return;
 800f598:	e0c6      	b.n	800f728 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	095b      	lsrs	r3, r3, #5
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d10c      	bne.n	800f5c0 <HAL_SPI_IRQHandler+0x8c>
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	099b      	lsrs	r3, r3, #6
 800f5aa:	f003 0301 	and.w	r3, r3, #1
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d106      	bne.n	800f5c0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	0a1b      	lsrs	r3, r3, #8
 800f5b6:	f003 0301 	and.w	r3, r3, #1
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 80b4 	beq.w	800f728 <HAL_SPI_IRQHandler+0x1f4>
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	095b      	lsrs	r3, r3, #5
 800f5c4:	f003 0301 	and.w	r3, r3, #1
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80ad 	beq.w	800f728 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	099b      	lsrs	r3, r3, #6
 800f5d2:	f003 0301 	and.w	r3, r3, #1
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d023      	beq.n	800f622 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b03      	cmp	r3, #3
 800f5e4:	d011      	beq.n	800f60a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5ea:	f043 0204 	orr.w	r2, r3, #4
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	617b      	str	r3, [r7, #20]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	617b      	str	r3, [r7, #20]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	689b      	ldr	r3, [r3, #8]
 800f604:	617b      	str	r3, [r7, #20]
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	e00b      	b.n	800f622 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f60a:	2300      	movs	r3, #0
 800f60c:	613b      	str	r3, [r7, #16]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	613b      	str	r3, [r7, #16]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	689b      	ldr	r3, [r3, #8]
 800f61c:	613b      	str	r3, [r7, #16]
 800f61e:	693b      	ldr	r3, [r7, #16]
        return;
 800f620:	e082      	b.n	800f728 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	095b      	lsrs	r3, r3, #5
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d014      	beq.n	800f658 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f632:	f043 0201 	orr.w	r2, r3, #1
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f63a:	2300      	movs	r3, #0
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f654:	601a      	str	r2, [r3, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	0a1b      	lsrs	r3, r3, #8
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d00c      	beq.n	800f67e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f668:	f043 0208 	orr.w	r2, r3, #8
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f670:	2300      	movs	r3, #0
 800f672:	60bb      	str	r3, [r7, #8]
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	60bb      	str	r3, [r7, #8]
 800f67c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f682:	2b00      	cmp	r3, #0
 800f684:	d04f      	beq.n	800f726 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f694:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f69e:	69fb      	ldr	r3, [r7, #28]
 800f6a0:	f003 0302 	and.w	r3, r3, #2
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d104      	bne.n	800f6b2 <HAL_SPI_IRQHandler+0x17e>
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	f003 0301 	and.w	r3, r3, #1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d034      	beq.n	800f71c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	685a      	ldr	r2, [r3, #4]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f022 0203 	bic.w	r2, r2, #3
 800f6c0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d011      	beq.n	800f6ee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6ce:	4a18      	ldr	r2, [pc, #96]	; (800f730 <HAL_SPI_IRQHandler+0x1fc>)
 800f6d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fc f866 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d005      	beq.n	800f6ee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d016      	beq.n	800f724 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f6fa:	4a0d      	ldr	r2, [pc, #52]	; (800f730 <HAL_SPI_IRQHandler+0x1fc>)
 800f6fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f702:	4618      	mov	r0, r3
 800f704:	f7fc f850 	bl	800b7a8 <HAL_DMA_Abort_IT>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800f71a:	e003      	b.n	800f724 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f809 	bl	800f734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f722:	e000      	b.n	800f726 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f724:	bf00      	nop
    return;
 800f726:	bf00      	nop
  }
}
 800f728:	3720      	adds	r7, #32
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	0800f749 	.word	0x0800f749

0800f734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f754:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2200      	movs	r2, #0
 800f75a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2200      	movs	r2, #0
 800f760:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	f7ff ffe6 	bl	800f734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f768:	bf00      	nop
 800f76a:	3710      	adds	r7, #16
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	603b      	str	r3, [r7, #0]
 800f77c:	4613      	mov	r3, r2
 800f77e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f780:	e04c      	b.n	800f81c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f788:	d048      	beq.n	800f81c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f78a:	f7fa feab 	bl	800a4e4 <HAL_GetTick>
 800f78e:	4602      	mov	r2, r0
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	429a      	cmp	r2, r3
 800f798:	d902      	bls.n	800f7a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d13d      	bne.n	800f81c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7b8:	d111      	bne.n	800f7de <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7c2:	d004      	beq.n	800f7ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7cc:	d107      	bne.n	800f7de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7e6:	d10f      	bne.n	800f808 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7f6:	601a      	str	r2, [r3, #0]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681a      	ldr	r2, [r3, #0]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f806:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f818:	2303      	movs	r3, #3
 800f81a:	e00f      	b.n	800f83c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	689a      	ldr	r2, [r3, #8]
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	4013      	ands	r3, r2
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	429a      	cmp	r2, r3
 800f82a:	bf0c      	ite	eq
 800f82c:	2301      	moveq	r3, #1
 800f82e:	2300      	movne	r3, #0
 800f830:	b2db      	uxtb	r3, r3
 800f832:	461a      	mov	r2, r3
 800f834:	79fb      	ldrb	r3, [r7, #7]
 800f836:	429a      	cmp	r2, r3
 800f838:	d1a3      	bne.n	800f782 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af02      	add	r7, sp, #8
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f850:	4b1b      	ldr	r3, [pc, #108]	; (800f8c0 <SPI_EndRxTxTransaction+0x7c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a1b      	ldr	r2, [pc, #108]	; (800f8c4 <SPI_EndRxTxTransaction+0x80>)
 800f856:	fba2 2303 	umull	r2, r3, r2, r3
 800f85a:	0d5b      	lsrs	r3, r3, #21
 800f85c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f860:	fb02 f303 	mul.w	r3, r2, r3
 800f864:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f86e:	d112      	bne.n	800f896 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	2200      	movs	r2, #0
 800f878:	2180      	movs	r1, #128	; 0x80
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7ff ff78 	bl	800f770 <SPI_WaitFlagStateUntilTimeout>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d016      	beq.n	800f8b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88a:	f043 0220 	orr.w	r2, r3, #32
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f892:	2303      	movs	r3, #3
 800f894:	e00f      	b.n	800f8b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00a      	beq.n	800f8b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ac:	2b80      	cmp	r3, #128	; 0x80
 800f8ae:	d0f2      	beq.n	800f896 <SPI_EndRxTxTransaction+0x52>
 800f8b0:	e000      	b.n	800f8b4 <SPI_EndRxTxTransaction+0x70>
        break;
 800f8b2:	bf00      	nop
  }

  return HAL_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	2000041c 	.word	0x2000041c
 800f8c4:	165e9f81 	.word	0x165e9f81

0800f8c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d101      	bne.n	800f8da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e01d      	b.n	800f916 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d106      	bne.n	800f8f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f7f2 fb64 	bl	8001fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2202      	movs	r2, #2
 800f8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3304      	adds	r3, #4
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f000 fb74 	bl	800fff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2201      	movs	r2, #1
 800f910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f91e:	b480      	push	{r7}
 800f920:	b085      	sub	sp, #20
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2202      	movs	r2, #2
 800f92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	f003 0307 	and.w	r3, r3, #7
 800f938:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2b06      	cmp	r3, #6
 800f93e:	d007      	beq.n	800f950 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f042 0201 	orr.w	r2, r2, #1
 800f94e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2201      	movs	r2, #1
 800f954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr

0800f966 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f966:	b480      	push	{r7}
 800f968:	b085      	sub	sp, #20
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	68da      	ldr	r2, [r3, #12]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f042 0201 	orr.w	r2, r2, #1
 800f97c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	f003 0307 	and.w	r3, r3, #7
 800f988:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2b06      	cmp	r3, #6
 800f98e:	d007      	beq.n	800f9a0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f042 0201 	orr.w	r2, r2, #1
 800f99e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b082      	sub	sp, #8
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d101      	bne.n	800f9c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f9bc:	2301      	movs	r3, #1
 800f9be:	e01d      	b.n	800f9fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d106      	bne.n	800f9da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f7f2 f9b3 	bl	8001d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2202      	movs	r2, #2
 800f9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681a      	ldr	r2, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f000 fb01 	bl	800fff4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2201      	movs	r2, #1
 800f9f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2201      	movs	r2, #1
 800fa14:	6839      	ldr	r1, [r7, #0]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 fdd6 	bl	80105c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	4a15      	ldr	r2, [pc, #84]	; (800fa78 <HAL_TIM_PWM_Start+0x74>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d004      	beq.n	800fa30 <HAL_TIM_PWM_Start+0x2c>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a14      	ldr	r2, [pc, #80]	; (800fa7c <HAL_TIM_PWM_Start+0x78>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d101      	bne.n	800fa34 <HAL_TIM_PWM_Start+0x30>
 800fa30:	2301      	movs	r3, #1
 800fa32:	e000      	b.n	800fa36 <HAL_TIM_PWM_Start+0x32>
 800fa34:	2300      	movs	r3, #0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d007      	beq.n	800fa4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fa48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f003 0307 	and.w	r3, r3, #7
 800fa54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2b06      	cmp	r3, #6
 800fa5a:	d007      	beq.n	800fa6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f042 0201 	orr.w	r2, r2, #1
 800fa6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa6c:	2300      	movs	r3, #0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	40010000 	.word	0x40010000
 800fa7c:	40010400 	.word	0x40010400

0800fa80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	691b      	ldr	r3, [r3, #16]
 800fa8e:	f003 0302 	and.w	r3, r3, #2
 800fa92:	2b02      	cmp	r3, #2
 800fa94:	d122      	bne.n	800fadc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	f003 0302 	and.w	r3, r3, #2
 800faa0:	2b02      	cmp	r3, #2
 800faa2:	d11b      	bne.n	800fadc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f06f 0202 	mvn.w	r2, #2
 800faac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2201      	movs	r2, #1
 800fab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	f003 0303 	and.w	r3, r3, #3
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d003      	beq.n	800faca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fa78 	bl	800ffb8 <HAL_TIM_IC_CaptureCallback>
 800fac8:	e005      	b.n	800fad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 fa6a 	bl	800ffa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 fa7b 	bl	800ffcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	691b      	ldr	r3, [r3, #16]
 800fae2:	f003 0304 	and.w	r3, r3, #4
 800fae6:	2b04      	cmp	r3, #4
 800fae8:	d122      	bne.n	800fb30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	f003 0304 	and.w	r3, r3, #4
 800faf4:	2b04      	cmp	r3, #4
 800faf6:	d11b      	bne.n	800fb30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f06f 0204 	mvn.w	r2, #4
 800fb00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2202      	movs	r2, #2
 800fb06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 fa4e 	bl	800ffb8 <HAL_TIM_IC_CaptureCallback>
 800fb1c:	e005      	b.n	800fb2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f000 fa40 	bl	800ffa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 fa51 	bl	800ffcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	691b      	ldr	r3, [r3, #16]
 800fb36:	f003 0308 	and.w	r3, r3, #8
 800fb3a:	2b08      	cmp	r3, #8
 800fb3c:	d122      	bne.n	800fb84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	f003 0308 	and.w	r3, r3, #8
 800fb48:	2b08      	cmp	r3, #8
 800fb4a:	d11b      	bne.n	800fb84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f06f 0208 	mvn.w	r2, #8
 800fb54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2204      	movs	r2, #4
 800fb5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	69db      	ldr	r3, [r3, #28]
 800fb62:	f003 0303 	and.w	r3, r3, #3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d003      	beq.n	800fb72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa24 	bl	800ffb8 <HAL_TIM_IC_CaptureCallback>
 800fb70:	e005      	b.n	800fb7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f000 fa16 	bl	800ffa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fa27 	bl	800ffcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	691b      	ldr	r3, [r3, #16]
 800fb8a:	f003 0310 	and.w	r3, r3, #16
 800fb8e:	2b10      	cmp	r3, #16
 800fb90:	d122      	bne.n	800fbd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	f003 0310 	and.w	r3, r3, #16
 800fb9c:	2b10      	cmp	r3, #16
 800fb9e:	d11b      	bne.n	800fbd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	f06f 0210 	mvn.w	r2, #16
 800fba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2208      	movs	r2, #8
 800fbae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	69db      	ldr	r3, [r3, #28]
 800fbb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d003      	beq.n	800fbc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f9fa 	bl	800ffb8 <HAL_TIM_IC_CaptureCallback>
 800fbc4:	e005      	b.n	800fbd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f9ec 	bl	800ffa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 f9fd 	bl	800ffcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	691b      	ldr	r3, [r3, #16]
 800fbde:	f003 0301 	and.w	r3, r3, #1
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	d10e      	bne.n	800fc04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	f003 0301 	and.w	r3, r3, #1
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d107      	bne.n	800fc04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f06f 0201 	mvn.w	r2, #1
 800fbfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7fa fa68 	bl	800a0d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc0e:	2b80      	cmp	r3, #128	; 0x80
 800fc10:	d10e      	bne.n	800fc30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc1c:	2b80      	cmp	r3, #128	; 0x80
 800fc1e:	d107      	bne.n	800fc30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fd78 	bl	8010720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc3a:	2b40      	cmp	r3, #64	; 0x40
 800fc3c:	d10e      	bne.n	800fc5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc48:	2b40      	cmp	r3, #64	; 0x40
 800fc4a:	d107      	bne.n	800fc5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 f9c2 	bl	800ffe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	691b      	ldr	r3, [r3, #16]
 800fc62:	f003 0320 	and.w	r3, r3, #32
 800fc66:	2b20      	cmp	r3, #32
 800fc68:	d10e      	bne.n	800fc88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	f003 0320 	and.w	r3, r3, #32
 800fc74:	2b20      	cmp	r3, #32
 800fc76:	d107      	bne.n	800fc88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f06f 0220 	mvn.w	r2, #32
 800fc80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fd42 	bl	801070c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fc88:	bf00      	nop
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d101      	bne.n	800fcaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800fca6:	2302      	movs	r3, #2
 800fca8:	e0b4      	b.n	800fe14 <HAL_TIM_PWM_ConfigChannel+0x184>
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2201      	movs	r2, #1
 800fcae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2b0c      	cmp	r3, #12
 800fcbe:	f200 809f 	bhi.w	800fe00 <HAL_TIM_PWM_ConfigChannel+0x170>
 800fcc2:	a201      	add	r2, pc, #4	; (adr r2, 800fcc8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800fcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc8:	0800fcfd 	.word	0x0800fcfd
 800fccc:	0800fe01 	.word	0x0800fe01
 800fcd0:	0800fe01 	.word	0x0800fe01
 800fcd4:	0800fe01 	.word	0x0800fe01
 800fcd8:	0800fd3d 	.word	0x0800fd3d
 800fcdc:	0800fe01 	.word	0x0800fe01
 800fce0:	0800fe01 	.word	0x0800fe01
 800fce4:	0800fe01 	.word	0x0800fe01
 800fce8:	0800fd7f 	.word	0x0800fd7f
 800fcec:	0800fe01 	.word	0x0800fe01
 800fcf0:	0800fe01 	.word	0x0800fe01
 800fcf4:	0800fe01 	.word	0x0800fe01
 800fcf8:	0800fdbf 	.word	0x0800fdbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	68b9      	ldr	r1, [r7, #8]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f000 fa16 	bl	8010134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	699a      	ldr	r2, [r3, #24]
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	f042 0208 	orr.w	r2, r2, #8
 800fd16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	699a      	ldr	r2, [r3, #24]
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f022 0204 	bic.w	r2, r2, #4
 800fd26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	6999      	ldr	r1, [r3, #24]
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	691a      	ldr	r2, [r3, #16]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	430a      	orrs	r2, r1
 800fd38:	619a      	str	r2, [r3, #24]
      break;
 800fd3a:	e062      	b.n	800fe02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68b9      	ldr	r1, [r7, #8]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f000 fa66 	bl	8010214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	699a      	ldr	r2, [r3, #24]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	699a      	ldr	r2, [r3, #24]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	6999      	ldr	r1, [r3, #24]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	021a      	lsls	r2, r3, #8
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	430a      	orrs	r2, r1
 800fd7a:	619a      	str	r2, [r3, #24]
      break;
 800fd7c:	e041      	b.n	800fe02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68b9      	ldr	r1, [r7, #8]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f000 fabb 	bl	8010300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	69da      	ldr	r2, [r3, #28]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f042 0208 	orr.w	r2, r2, #8
 800fd98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	69da      	ldr	r2, [r3, #28]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f022 0204 	bic.w	r2, r2, #4
 800fda8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	69d9      	ldr	r1, [r3, #28]
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	691a      	ldr	r2, [r3, #16]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	430a      	orrs	r2, r1
 800fdba:	61da      	str	r2, [r3, #28]
      break;
 800fdbc:	e021      	b.n	800fe02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	68b9      	ldr	r1, [r7, #8]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 fb0f 	bl	80103e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	69da      	ldr	r2, [r3, #28]
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fdd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	69da      	ldr	r2, [r3, #28]
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fde8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	69d9      	ldr	r1, [r3, #28]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	021a      	lsls	r2, r3, #8
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	61da      	str	r2, [r3, #28]
      break;
 800fdfe:	e000      	b.n	800fe02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800fe00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2201      	movs	r2, #1
 800fe06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe12:	2300      	movs	r3, #0
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d101      	bne.n	800fe34 <HAL_TIM_ConfigClockSource+0x18>
 800fe30:	2302      	movs	r3, #2
 800fe32:	e0b3      	b.n	800ff9c <HAL_TIM_ConfigClockSource+0x180>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2202      	movs	r2, #2
 800fe40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fe52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe6c:	d03e      	beq.n	800feec <HAL_TIM_ConfigClockSource+0xd0>
 800fe6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fe72:	f200 8087 	bhi.w	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fe76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe7a:	f000 8085 	beq.w	800ff88 <HAL_TIM_ConfigClockSource+0x16c>
 800fe7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe82:	d87f      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fe84:	2b70      	cmp	r3, #112	; 0x70
 800fe86:	d01a      	beq.n	800febe <HAL_TIM_ConfigClockSource+0xa2>
 800fe88:	2b70      	cmp	r3, #112	; 0x70
 800fe8a:	d87b      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fe8c:	2b60      	cmp	r3, #96	; 0x60
 800fe8e:	d050      	beq.n	800ff32 <HAL_TIM_ConfigClockSource+0x116>
 800fe90:	2b60      	cmp	r3, #96	; 0x60
 800fe92:	d877      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fe94:	2b50      	cmp	r3, #80	; 0x50
 800fe96:	d03c      	beq.n	800ff12 <HAL_TIM_ConfigClockSource+0xf6>
 800fe98:	2b50      	cmp	r3, #80	; 0x50
 800fe9a:	d873      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fe9c:	2b40      	cmp	r3, #64	; 0x40
 800fe9e:	d058      	beq.n	800ff52 <HAL_TIM_ConfigClockSource+0x136>
 800fea0:	2b40      	cmp	r3, #64	; 0x40
 800fea2:	d86f      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800fea4:	2b30      	cmp	r3, #48	; 0x30
 800fea6:	d064      	beq.n	800ff72 <HAL_TIM_ConfigClockSource+0x156>
 800fea8:	2b30      	cmp	r3, #48	; 0x30
 800feaa:	d86b      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800feac:	2b20      	cmp	r3, #32
 800feae:	d060      	beq.n	800ff72 <HAL_TIM_ConfigClockSource+0x156>
 800feb0:	2b20      	cmp	r3, #32
 800feb2:	d867      	bhi.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d05c      	beq.n	800ff72 <HAL_TIM_ConfigClockSource+0x156>
 800feb8:	2b10      	cmp	r3, #16
 800feba:	d05a      	beq.n	800ff72 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800febc:	e062      	b.n	800ff84 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6818      	ldr	r0, [r3, #0]
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	6899      	ldr	r1, [r3, #8]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	685a      	ldr	r2, [r3, #4]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	f000 fb5b 	bl	8010588 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	689b      	ldr	r3, [r3, #8]
 800fed8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800fee0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	609a      	str	r2, [r3, #8]
      break;
 800feea:	e04e      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6818      	ldr	r0, [r3, #0]
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	6899      	ldr	r1, [r3, #8]
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	685a      	ldr	r2, [r3, #4]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	f000 fb44 	bl	8010588 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	689a      	ldr	r2, [r3, #8]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ff0e:	609a      	str	r2, [r3, #8]
      break;
 800ff10:	e03b      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6818      	ldr	r0, [r3, #0]
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	6859      	ldr	r1, [r3, #4]
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	f000 fab8 	bl	8010494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2150      	movs	r1, #80	; 0x50
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f000 fb11 	bl	8010552 <TIM_ITRx_SetConfig>
      break;
 800ff30:	e02b      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6818      	ldr	r0, [r3, #0]
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	6859      	ldr	r1, [r3, #4]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	461a      	mov	r2, r3
 800ff40:	f000 fad7 	bl	80104f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2160      	movs	r1, #96	; 0x60
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 fb01 	bl	8010552 <TIM_ITRx_SetConfig>
      break;
 800ff50:	e01b      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6818      	ldr	r0, [r3, #0]
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	6859      	ldr	r1, [r3, #4]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	f000 fa98 	bl	8010494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2140      	movs	r1, #64	; 0x40
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f000 faf1 	bl	8010552 <TIM_ITRx_SetConfig>
      break;
 800ff70:	e00b      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681a      	ldr	r2, [r3, #0]
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	f000 fae8 	bl	8010552 <TIM_ITRx_SetConfig>
      break;
 800ff82:	e002      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ff84:	bf00      	nop
 800ff86:	e000      	b.n	800ff8a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ff88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b083      	sub	sp, #12
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ffac:	bf00      	nop
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr

0800ffb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b083      	sub	sp, #12
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ffd4:	bf00      	nop
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr

0800ffe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ffe0:	b480      	push	{r7}
 800ffe2:	b083      	sub	sp, #12
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr

0800fff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b085      	sub	sp, #20
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a40      	ldr	r2, [pc, #256]	; (8010108 <TIM_Base_SetConfig+0x114>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d013      	beq.n	8010034 <TIM_Base_SetConfig+0x40>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010012:	d00f      	beq.n	8010034 <TIM_Base_SetConfig+0x40>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a3d      	ldr	r2, [pc, #244]	; (801010c <TIM_Base_SetConfig+0x118>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d00b      	beq.n	8010034 <TIM_Base_SetConfig+0x40>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	4a3c      	ldr	r2, [pc, #240]	; (8010110 <TIM_Base_SetConfig+0x11c>)
 8010020:	4293      	cmp	r3, r2
 8010022:	d007      	beq.n	8010034 <TIM_Base_SetConfig+0x40>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	4a3b      	ldr	r2, [pc, #236]	; (8010114 <TIM_Base_SetConfig+0x120>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d003      	beq.n	8010034 <TIM_Base_SetConfig+0x40>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	4a3a      	ldr	r2, [pc, #232]	; (8010118 <TIM_Base_SetConfig+0x124>)
 8010030:	4293      	cmp	r3, r2
 8010032:	d108      	bne.n	8010046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801003a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	685b      	ldr	r3, [r3, #4]
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	4313      	orrs	r3, r2
 8010044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a2f      	ldr	r2, [pc, #188]	; (8010108 <TIM_Base_SetConfig+0x114>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d02b      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010054:	d027      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a2c      	ldr	r2, [pc, #176]	; (801010c <TIM_Base_SetConfig+0x118>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d023      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a2b      	ldr	r2, [pc, #172]	; (8010110 <TIM_Base_SetConfig+0x11c>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d01f      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a2a      	ldr	r2, [pc, #168]	; (8010114 <TIM_Base_SetConfig+0x120>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d01b      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4a29      	ldr	r2, [pc, #164]	; (8010118 <TIM_Base_SetConfig+0x124>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d017      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	4a28      	ldr	r2, [pc, #160]	; (801011c <TIM_Base_SetConfig+0x128>)
 801007a:	4293      	cmp	r3, r2
 801007c:	d013      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4a27      	ldr	r2, [pc, #156]	; (8010120 <TIM_Base_SetConfig+0x12c>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d00f      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	4a26      	ldr	r2, [pc, #152]	; (8010124 <TIM_Base_SetConfig+0x130>)
 801008a:	4293      	cmp	r3, r2
 801008c:	d00b      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	4a25      	ldr	r2, [pc, #148]	; (8010128 <TIM_Base_SetConfig+0x134>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d007      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	4a24      	ldr	r2, [pc, #144]	; (801012c <TIM_Base_SetConfig+0x138>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d003      	beq.n	80100a6 <TIM_Base_SetConfig+0xb2>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4a23      	ldr	r2, [pc, #140]	; (8010130 <TIM_Base_SetConfig+0x13c>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d108      	bne.n	80100b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	68db      	ldr	r3, [r3, #12]
 80100b2:	68fa      	ldr	r2, [r7, #12]
 80100b4:	4313      	orrs	r3, r2
 80100b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	695b      	ldr	r3, [r3, #20]
 80100c2:	4313      	orrs	r3, r2
 80100c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	689a      	ldr	r2, [r3, #8]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	4a0a      	ldr	r2, [pc, #40]	; (8010108 <TIM_Base_SetConfig+0x114>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d003      	beq.n	80100ec <TIM_Base_SetConfig+0xf8>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	4a0c      	ldr	r2, [pc, #48]	; (8010118 <TIM_Base_SetConfig+0x124>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d103      	bne.n	80100f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	691a      	ldr	r2, [r3, #16]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2201      	movs	r2, #1
 80100f8:	615a      	str	r2, [r3, #20]
}
 80100fa:	bf00      	nop
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	40010000 	.word	0x40010000
 801010c:	40000400 	.word	0x40000400
 8010110:	40000800 	.word	0x40000800
 8010114:	40000c00 	.word	0x40000c00
 8010118:	40010400 	.word	0x40010400
 801011c:	40014000 	.word	0x40014000
 8010120:	40014400 	.word	0x40014400
 8010124:	40014800 	.word	0x40014800
 8010128:	40001800 	.word	0x40001800
 801012c:	40001c00 	.word	0x40001c00
 8010130:	40002000 	.word	0x40002000

08010134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010134:	b480      	push	{r7}
 8010136:	b087      	sub	sp, #28
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6a1b      	ldr	r3, [r3, #32]
 8010142:	f023 0201 	bic.w	r2, r3, #1
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	699b      	ldr	r3, [r3, #24]
 801015a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f023 0303 	bic.w	r3, r3, #3
 801016a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	4313      	orrs	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	f023 0302 	bic.w	r3, r3, #2
 801017c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	697a      	ldr	r2, [r7, #20]
 8010184:	4313      	orrs	r3, r2
 8010186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4a20      	ldr	r2, [pc, #128]	; (801020c <TIM_OC1_SetConfig+0xd8>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d003      	beq.n	8010198 <TIM_OC1_SetConfig+0x64>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4a1f      	ldr	r2, [pc, #124]	; (8010210 <TIM_OC1_SetConfig+0xdc>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d10c      	bne.n	80101b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	f023 0308 	bic.w	r3, r3, #8
 801019e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	697a      	ldr	r2, [r7, #20]
 80101a6:	4313      	orrs	r3, r2
 80101a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	f023 0304 	bic.w	r3, r3, #4
 80101b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4a15      	ldr	r2, [pc, #84]	; (801020c <TIM_OC1_SetConfig+0xd8>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d003      	beq.n	80101c2 <TIM_OC1_SetConfig+0x8e>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	4a14      	ldr	r2, [pc, #80]	; (8010210 <TIM_OC1_SetConfig+0xdc>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d111      	bne.n	80101e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	693a      	ldr	r2, [r7, #16]
 80101d8:	4313      	orrs	r3, r2
 80101da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	699b      	ldr	r3, [r3, #24]
 80101e0:	693a      	ldr	r2, [r7, #16]
 80101e2:	4313      	orrs	r3, r2
 80101e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	693a      	ldr	r2, [r7, #16]
 80101ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	685a      	ldr	r2, [r3, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	697a      	ldr	r2, [r7, #20]
 80101fe:	621a      	str	r2, [r3, #32]
}
 8010200:	bf00      	nop
 8010202:	371c      	adds	r7, #28
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr
 801020c:	40010000 	.word	0x40010000
 8010210:	40010400 	.word	0x40010400

08010214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010214:	b480      	push	{r7}
 8010216:	b087      	sub	sp, #28
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6a1b      	ldr	r3, [r3, #32]
 8010222:	f023 0210 	bic.w	r2, r3, #16
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a1b      	ldr	r3, [r3, #32]
 801022e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	699b      	ldr	r3, [r3, #24]
 801023a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801024a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	021b      	lsls	r3, r3, #8
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	4313      	orrs	r3, r2
 8010256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	f023 0320 	bic.w	r3, r3, #32
 801025e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	011b      	lsls	r3, r3, #4
 8010266:	697a      	ldr	r2, [r7, #20]
 8010268:	4313      	orrs	r3, r2
 801026a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4a22      	ldr	r2, [pc, #136]	; (80102f8 <TIM_OC2_SetConfig+0xe4>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d003      	beq.n	801027c <TIM_OC2_SetConfig+0x68>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a21      	ldr	r2, [pc, #132]	; (80102fc <TIM_OC2_SetConfig+0xe8>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d10d      	bne.n	8010298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	011b      	lsls	r3, r3, #4
 801028a:	697a      	ldr	r2, [r7, #20]
 801028c:	4313      	orrs	r3, r2
 801028e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	4a17      	ldr	r2, [pc, #92]	; (80102f8 <TIM_OC2_SetConfig+0xe4>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d003      	beq.n	80102a8 <TIM_OC2_SetConfig+0x94>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	4a16      	ldr	r2, [pc, #88]	; (80102fc <TIM_OC2_SetConfig+0xe8>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d113      	bne.n	80102d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80102ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80102b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	695b      	ldr	r3, [r3, #20]
 80102bc:	009b      	lsls	r3, r3, #2
 80102be:	693a      	ldr	r2, [r7, #16]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	699b      	ldr	r3, [r3, #24]
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	693a      	ldr	r2, [r7, #16]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	685a      	ldr	r2, [r3, #4]
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	621a      	str	r2, [r3, #32]
}
 80102ea:	bf00      	nop
 80102ec:	371c      	adds	r7, #28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr
 80102f6:	bf00      	nop
 80102f8:	40010000 	.word	0x40010000
 80102fc:	40010400 	.word	0x40010400

08010300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010300:	b480      	push	{r7}
 8010302:	b087      	sub	sp, #28
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
 8010308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	6a1b      	ldr	r3, [r3, #32]
 801030e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a1b      	ldr	r3, [r3, #32]
 801031a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	685b      	ldr	r3, [r3, #4]
 8010320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	69db      	ldr	r3, [r3, #28]
 8010326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801032e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	f023 0303 	bic.w	r3, r3, #3
 8010336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	4313      	orrs	r3, r2
 8010340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	021b      	lsls	r3, r3, #8
 8010350:	697a      	ldr	r2, [r7, #20]
 8010352:	4313      	orrs	r3, r2
 8010354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4a21      	ldr	r2, [pc, #132]	; (80103e0 <TIM_OC3_SetConfig+0xe0>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d003      	beq.n	8010366 <TIM_OC3_SetConfig+0x66>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a20      	ldr	r2, [pc, #128]	; (80103e4 <TIM_OC3_SetConfig+0xe4>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d10d      	bne.n	8010382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801036c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	021b      	lsls	r3, r3, #8
 8010374:	697a      	ldr	r2, [r7, #20]
 8010376:	4313      	orrs	r3, r2
 8010378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	4a16      	ldr	r2, [pc, #88]	; (80103e0 <TIM_OC3_SetConfig+0xe0>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d003      	beq.n	8010392 <TIM_OC3_SetConfig+0x92>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	4a15      	ldr	r2, [pc, #84]	; (80103e4 <TIM_OC3_SetConfig+0xe4>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d113      	bne.n	80103ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80103a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	011b      	lsls	r3, r3, #4
 80103a8:	693a      	ldr	r2, [r7, #16]
 80103aa:	4313      	orrs	r3, r2
 80103ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	011b      	lsls	r3, r3, #4
 80103b4:	693a      	ldr	r2, [r7, #16]
 80103b6:	4313      	orrs	r3, r2
 80103b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	693a      	ldr	r2, [r7, #16]
 80103be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	68fa      	ldr	r2, [r7, #12]
 80103c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	685a      	ldr	r2, [r3, #4]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	697a      	ldr	r2, [r7, #20]
 80103d2:	621a      	str	r2, [r3, #32]
}
 80103d4:	bf00      	nop
 80103d6:	371c      	adds	r7, #28
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr
 80103e0:	40010000 	.word	0x40010000
 80103e4:	40010400 	.word	0x40010400

080103e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b087      	sub	sp, #28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6a1b      	ldr	r3, [r3, #32]
 8010402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	69db      	ldr	r3, [r3, #28]
 801040e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801041e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	021b      	lsls	r3, r3, #8
 8010426:	68fa      	ldr	r2, [r7, #12]
 8010428:	4313      	orrs	r3, r2
 801042a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	031b      	lsls	r3, r3, #12
 801043a:	693a      	ldr	r2, [r7, #16]
 801043c:	4313      	orrs	r3, r2
 801043e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	4a12      	ldr	r2, [pc, #72]	; (801048c <TIM_OC4_SetConfig+0xa4>)
 8010444:	4293      	cmp	r3, r2
 8010446:	d003      	beq.n	8010450 <TIM_OC4_SetConfig+0x68>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	4a11      	ldr	r2, [pc, #68]	; (8010490 <TIM_OC4_SetConfig+0xa8>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d109      	bne.n	8010464 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	695b      	ldr	r3, [r3, #20]
 801045c:	019b      	lsls	r3, r3, #6
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	4313      	orrs	r3, r2
 8010462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	697a      	ldr	r2, [r7, #20]
 8010468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	685a      	ldr	r2, [r3, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	693a      	ldr	r2, [r7, #16]
 801047c:	621a      	str	r2, [r3, #32]
}
 801047e:	bf00      	nop
 8010480:	371c      	adds	r7, #28
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	40010000 	.word	0x40010000
 8010490:	40010400 	.word	0x40010400

08010494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010494:	b480      	push	{r7}
 8010496:	b087      	sub	sp, #28
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	f023 0201 	bic.w	r2, r3, #1
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	699b      	ldr	r3, [r3, #24]
 80104b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80104be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	011b      	lsls	r3, r3, #4
 80104c4:	693a      	ldr	r2, [r7, #16]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	f023 030a 	bic.w	r3, r3, #10
 80104d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	697a      	ldr	r2, [r7, #20]
 80104e4:	621a      	str	r2, [r3, #32]
}
 80104e6:	bf00      	nop
 80104e8:	371c      	adds	r7, #28
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104f2:	b480      	push	{r7}
 80104f4:	b087      	sub	sp, #28
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	60f8      	str	r0, [r7, #12]
 80104fa:	60b9      	str	r1, [r7, #8]
 80104fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6a1b      	ldr	r3, [r3, #32]
 8010502:	f023 0210 	bic.w	r2, r3, #16
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	699b      	ldr	r3, [r3, #24]
 801050e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6a1b      	ldr	r3, [r3, #32]
 8010514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801051c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	031b      	lsls	r3, r3, #12
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	4313      	orrs	r3, r2
 8010526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801052e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	011b      	lsls	r3, r3, #4
 8010534:	693a      	ldr	r2, [r7, #16]
 8010536:	4313      	orrs	r3, r2
 8010538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	693a      	ldr	r2, [r7, #16]
 8010544:	621a      	str	r2, [r3, #32]
}
 8010546:	bf00      	nop
 8010548:	371c      	adds	r7, #28
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010552:	b480      	push	{r7}
 8010554:	b085      	sub	sp, #20
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
 801055a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	689b      	ldr	r3, [r3, #8]
 8010560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801056a:	683a      	ldr	r2, [r7, #0]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	4313      	orrs	r3, r2
 8010570:	f043 0307 	orr.w	r3, r3, #7
 8010574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	609a      	str	r2, [r3, #8]
}
 801057c:	bf00      	nop
 801057e:	3714      	adds	r7, #20
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010588:	b480      	push	{r7}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	689b      	ldr	r3, [r3, #8]
 801059a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80105a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	021a      	lsls	r2, r3, #8
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	431a      	orrs	r2, r3
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	4313      	orrs	r3, r2
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	697a      	ldr	r2, [r7, #20]
 80105ba:	609a      	str	r2, [r3, #8]
}
 80105bc:	bf00      	nop
 80105be:	371c      	adds	r7, #28
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b087      	sub	sp, #28
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	f003 031f 	and.w	r3, r3, #31
 80105da:	2201      	movs	r2, #1
 80105dc:	fa02 f303 	lsl.w	r3, r2, r3
 80105e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6a1a      	ldr	r2, [r3, #32]
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	43db      	mvns	r3, r3
 80105ea:	401a      	ands	r2, r3
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	6a1a      	ldr	r2, [r3, #32]
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	f003 031f 	and.w	r3, r3, #31
 80105fa:	6879      	ldr	r1, [r7, #4]
 80105fc:	fa01 f303 	lsl.w	r3, r1, r3
 8010600:	431a      	orrs	r2, r3
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	621a      	str	r2, [r3, #32]
}
 8010606:	bf00      	nop
 8010608:	371c      	adds	r7, #28
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr
	...

08010614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010624:	2b01      	cmp	r3, #1
 8010626:	d101      	bne.n	801062c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010628:	2302      	movs	r3, #2
 801062a:	e05a      	b.n	80106e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2202      	movs	r2, #2
 8010638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	68fa      	ldr	r2, [r7, #12]
 801065a:	4313      	orrs	r3, r2
 801065c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a21      	ldr	r2, [pc, #132]	; (80106f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d022      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010678:	d01d      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4a1d      	ldr	r2, [pc, #116]	; (80106f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d018      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a1b      	ldr	r2, [pc, #108]	; (80106f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d013      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	4a1a      	ldr	r2, [pc, #104]	; (80106fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d00e      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a18      	ldr	r2, [pc, #96]	; (8010700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d009      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	4a17      	ldr	r2, [pc, #92]	; (8010704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d004      	beq.n	80106b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a15      	ldr	r2, [pc, #84]	; (8010708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d10c      	bne.n	80106d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	68ba      	ldr	r2, [r7, #8]
 80106c4:	4313      	orrs	r3, r2
 80106c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80106e0:	2300      	movs	r3, #0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop
 80106f0:	40010000 	.word	0x40010000
 80106f4:	40000400 	.word	0x40000400
 80106f8:	40000800 	.word	0x40000800
 80106fc:	40000c00 	.word	0x40000c00
 8010700:	40010400 	.word	0x40010400
 8010704:	40014000 	.word	0x40014000
 8010708:	40001800 	.word	0x40001800

0801070c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010720:	b480      	push	{r7}
 8010722:	b083      	sub	sp, #12
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010728:	bf00      	nop
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d101      	bne.n	8010746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	e03f      	b.n	80107c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801074c:	b2db      	uxtb	r3, r3
 801074e:	2b00      	cmp	r3, #0
 8010750:	d106      	bne.n	8010760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2200      	movs	r2, #0
 8010756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f7f1 fd6c 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2224      	movs	r2, #36	; 0x24
 8010764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	68da      	ldr	r2, [r3, #12]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 fc6d 	bl	8011058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	691a      	ldr	r2, [r3, #16]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801078c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	695a      	ldr	r2, [r3, #20]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801079c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	68da      	ldr	r2, [r3, #12]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80107ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2220      	movs	r2, #32
 80107b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2220      	movs	r2, #32
 80107c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3708      	adds	r7, #8
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b088      	sub	sp, #32
 80107d2:	af02      	add	r7, sp, #8
 80107d4:	60f8      	str	r0, [r7, #12]
 80107d6:	60b9      	str	r1, [r7, #8]
 80107d8:	603b      	str	r3, [r7, #0]
 80107da:	4613      	mov	r3, r2
 80107dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b20      	cmp	r3, #32
 80107ec:	f040 8083 	bne.w	80108f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <HAL_UART_Transmit+0x2e>
 80107f6:	88fb      	ldrh	r3, [r7, #6]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80107fc:	2301      	movs	r3, #1
 80107fe:	e07b      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010806:	2b01      	cmp	r3, #1
 8010808:	d101      	bne.n	801080e <HAL_UART_Transmit+0x40>
 801080a:	2302      	movs	r3, #2
 801080c:	e074      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2201      	movs	r2, #1
 8010812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2200      	movs	r2, #0
 801081a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2221      	movs	r2, #33	; 0x21
 8010820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8010824:	f7f9 fe5e 	bl	800a4e4 <HAL_GetTick>
 8010828:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	88fa      	ldrh	r2, [r7, #6]
 801082e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	88fa      	ldrh	r2, [r7, #6]
 8010834:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2200      	movs	r2, #0
 801083a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801083e:	e042      	b.n	80108c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010844:	b29b      	uxth	r3, r3
 8010846:	3b01      	subs	r3, #1
 8010848:	b29a      	uxth	r2, r3
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010856:	d122      	bne.n	801089e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	2200      	movs	r2, #0
 8010860:	2180      	movs	r1, #128	; 0x80
 8010862:	68f8      	ldr	r0, [r7, #12]
 8010864:	f000 fa76 	bl	8010d54 <UART_WaitOnFlagUntilTimeout>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d001      	beq.n	8010872 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801086e:	2303      	movs	r3, #3
 8010870:	e042      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	881b      	ldrh	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010884:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	691b      	ldr	r3, [r3, #16]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d103      	bne.n	8010896 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	3302      	adds	r3, #2
 8010892:	60bb      	str	r3, [r7, #8]
 8010894:	e017      	b.n	80108c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	3301      	adds	r3, #1
 801089a:	60bb      	str	r3, [r7, #8]
 801089c:	e013      	b.n	80108c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2200      	movs	r2, #0
 80108a6:	2180      	movs	r1, #128	; 0x80
 80108a8:	68f8      	ldr	r0, [r7, #12]
 80108aa:	f000 fa53 	bl	8010d54 <UART_WaitOnFlagUntilTimeout>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d001      	beq.n	80108b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80108b4:	2303      	movs	r3, #3
 80108b6:	e01f      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	1c5a      	adds	r2, r3, #1
 80108bc:	60ba      	str	r2, [r7, #8]
 80108be:	781a      	ldrb	r2, [r3, #0]
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1b7      	bne.n	8010840 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	2200      	movs	r2, #0
 80108d8:	2140      	movs	r1, #64	; 0x40
 80108da:	68f8      	ldr	r0, [r7, #12]
 80108dc:	f000 fa3a 	bl	8010d54 <UART_WaitOnFlagUntilTimeout>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80108e6:	2303      	movs	r3, #3
 80108e8:	e006      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2220      	movs	r2, #32
 80108ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80108f2:	2300      	movs	r3, #0
 80108f4:	e000      	b.n	80108f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80108f6:	2302      	movs	r3, #2
  }
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3718      	adds	r7, #24
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b086      	sub	sp, #24
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	4613      	mov	r3, r2
 801090c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b20      	cmp	r3, #32
 8010918:	d166      	bne.n	80109e8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <HAL_UART_Receive_DMA+0x26>
 8010920:	88fb      	ldrh	r3, [r7, #6]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d101      	bne.n	801092a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010926:	2301      	movs	r3, #1
 8010928:	e05f      	b.n	80109ea <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010930:	2b01      	cmp	r3, #1
 8010932:	d101      	bne.n	8010938 <HAL_UART_Receive_DMA+0x38>
 8010934:	2302      	movs	r3, #2
 8010936:	e058      	b.n	80109ea <HAL_UART_Receive_DMA+0xea>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2201      	movs	r2, #1
 801093c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	88fa      	ldrh	r2, [r7, #6]
 801094a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2200      	movs	r2, #0
 8010950:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	2222      	movs	r2, #34	; 0x22
 8010956:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801095e:	4a25      	ldr	r2, [pc, #148]	; (80109f4 <HAL_UART_Receive_DMA+0xf4>)
 8010960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010966:	4a24      	ldr	r2, [pc, #144]	; (80109f8 <HAL_UART_Receive_DMA+0xf8>)
 8010968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096e:	4a23      	ldr	r2, [pc, #140]	; (80109fc <HAL_UART_Receive_DMA+0xfc>)
 8010970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010976:	2200      	movs	r2, #0
 8010978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801097a:	f107 0308 	add.w	r3, r7, #8
 801097e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	3304      	adds	r3, #4
 801098a:	4619      	mov	r1, r3
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	88fb      	ldrh	r3, [r7, #6]
 8010992:	f7fa feb1 	bl	800b6f8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8010996:	2300      	movs	r3, #0
 8010998:	613b      	str	r3, [r7, #16]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	613b      	str	r3, [r7, #16]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	613b      	str	r3, [r7, #16]
 80109aa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	68da      	ldr	r2, [r3, #12]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	695a      	ldr	r2, [r3, #20]
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f042 0201 	orr.w	r2, r2, #1
 80109d2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	695a      	ldr	r2, [r3, #20]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80109e2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	e000      	b.n	80109ea <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80109e8:	2302      	movs	r3, #2
  }
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3718      	adds	r7, #24
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	08010c3d 	.word	0x08010c3d
 80109f8:	08010ca5 	.word	0x08010ca5
 80109fc:	08010cc1 	.word	0x08010cc1

08010a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b088      	sub	sp, #32
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	695b      	ldr	r3, [r3, #20]
 8010a1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010a20:	2300      	movs	r3, #0
 8010a22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010a24:	2300      	movs	r3, #0
 8010a26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	f003 030f 	and.w	r3, r3, #15
 8010a2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d10d      	bne.n	8010a52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010a36:	69fb      	ldr	r3, [r7, #28]
 8010a38:	f003 0320 	and.w	r3, r3, #32
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d008      	beq.n	8010a52 <HAL_UART_IRQHandler+0x52>
 8010a40:	69bb      	ldr	r3, [r7, #24]
 8010a42:	f003 0320 	and.w	r3, r3, #32
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d003      	beq.n	8010a52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fa82 	bl	8010f54 <UART_Receive_IT>
      return;
 8010a50:	e0d0      	b.n	8010bf4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 80b0 	beq.w	8010bba <HAL_UART_IRQHandler+0x1ba>
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	f003 0301 	and.w	r3, r3, #1
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d105      	bne.n	8010a70 <HAL_UART_IRQHandler+0x70>
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	f000 80a5 	beq.w	8010bba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010a70:	69fb      	ldr	r3, [r7, #28]
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00a      	beq.n	8010a90 <HAL_UART_IRQHandler+0x90>
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d005      	beq.n	8010a90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a88:	f043 0201 	orr.w	r2, r3, #1
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	f003 0304 	and.w	r3, r3, #4
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00a      	beq.n	8010ab0 <HAL_UART_IRQHandler+0xb0>
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	f003 0301 	and.w	r3, r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d005      	beq.n	8010ab0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aa8:	f043 0202 	orr.w	r2, r3, #2
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	f003 0302 	and.w	r3, r3, #2
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d00a      	beq.n	8010ad0 <HAL_UART_IRQHandler+0xd0>
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d005      	beq.n	8010ad0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ac8:	f043 0204 	orr.w	r2, r3, #4
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	f003 0308 	and.w	r3, r3, #8
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d00f      	beq.n	8010afa <HAL_UART_IRQHandler+0xfa>
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	f003 0320 	and.w	r3, r3, #32
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d104      	bne.n	8010aee <HAL_UART_IRQHandler+0xee>
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	f003 0301 	and.w	r3, r3, #1
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d005      	beq.n	8010afa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010af2:	f043 0208 	orr.w	r2, r3, #8
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d077      	beq.n	8010bf2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	f003 0320 	and.w	r3, r3, #32
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d007      	beq.n	8010b1c <HAL_UART_IRQHandler+0x11c>
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	f003 0320 	and.w	r3, r3, #32
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f000 fa1c 	bl	8010f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	695b      	ldr	r3, [r3, #20]
 8010b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b26:	2b40      	cmp	r3, #64	; 0x40
 8010b28:	bf0c      	ite	eq
 8010b2a:	2301      	moveq	r3, #1
 8010b2c:	2300      	movne	r3, #0
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b36:	f003 0308 	and.w	r3, r3, #8
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d102      	bne.n	8010b44 <HAL_UART_IRQHandler+0x144>
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d031      	beq.n	8010ba8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f965 	bl	8010e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	695b      	ldr	r3, [r3, #20]
 8010b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b54:	2b40      	cmp	r3, #64	; 0x40
 8010b56:	d123      	bne.n	8010ba0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	695a      	ldr	r2, [r3, #20]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d013      	beq.n	8010b98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b74:	4a21      	ldr	r2, [pc, #132]	; (8010bfc <HAL_UART_IRQHandler+0x1fc>)
 8010b76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7fa fe13 	bl	800b7a8 <HAL_DMA_Abort_IT>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d016      	beq.n	8010bb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010b92:	4610      	mov	r0, r2
 8010b94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b96:	e00e      	b.n	8010bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 f845 	bl	8010c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010b9e:	e00a      	b.n	8010bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f000 f841 	bl	8010c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ba6:	e006      	b.n	8010bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 f83d 	bl	8010c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8010bb4:	e01d      	b.n	8010bf2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010bb6:	bf00      	nop
    return;
 8010bb8:	e01b      	b.n	8010bf2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d008      	beq.n	8010bd6 <HAL_UART_IRQHandler+0x1d6>
 8010bc4:	69bb      	ldr	r3, [r7, #24]
 8010bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d003      	beq.n	8010bd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f000 f952 	bl	8010e78 <UART_Transmit_IT>
    return;
 8010bd4:	e00e      	b.n	8010bf4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d009      	beq.n	8010bf4 <HAL_UART_IRQHandler+0x1f4>
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d004      	beq.n	8010bf4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f99a 	bl	8010f24 <UART_EndTransmit_IT>
    return;
 8010bf0:	e000      	b.n	8010bf4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8010bf2:	bf00      	nop
  }
}
 8010bf4:	3720      	adds	r7, #32
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	08010e51 	.word	0x08010e51

08010c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8010c08:	bf00      	nop
 8010c0a:	370c      	adds	r7, #12
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8010c1c:	bf00      	nop
 8010c1e:	370c      	adds	r7, #12
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b083      	sub	sp, #12
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8010c30:	bf00      	nop
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c48:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d11e      	bne.n	8010c96 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	68da      	ldr	r2, [r3, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c6c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	695a      	ldr	r2, [r3, #20]
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f022 0201 	bic.w	r2, r2, #1
 8010c7c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	695a      	ldr	r2, [r3, #20]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c8c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2220      	movs	r2, #32
 8010c92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f7f4 fcd6 	bl	8005648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010c9c:	bf00      	nop
 8010c9e:	3710      	adds	r7, #16
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f7ff ffae 	bl	8010c14 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cb8:	bf00      	nop
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	695b      	ldr	r3, [r3, #20]
 8010cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cdc:	2b80      	cmp	r3, #128	; 0x80
 8010cde:	bf0c      	ite	eq
 8010ce0:	2301      	moveq	r3, #1
 8010ce2:	2300      	movne	r3, #0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010cee:	b2db      	uxtb	r3, r3
 8010cf0:	2b21      	cmp	r3, #33	; 0x21
 8010cf2:	d108      	bne.n	8010d06 <UART_DMAError+0x46>
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d005      	beq.n	8010d06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8010d00:	68b8      	ldr	r0, [r7, #8]
 8010d02:	f000 f871 	bl	8010de8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	695b      	ldr	r3, [r3, #20]
 8010d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d10:	2b40      	cmp	r3, #64	; 0x40
 8010d12:	bf0c      	ite	eq
 8010d14:	2301      	moveq	r3, #1
 8010d16:	2300      	movne	r3, #0
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b22      	cmp	r3, #34	; 0x22
 8010d26:	d108      	bne.n	8010d3a <UART_DMAError+0x7a>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d005      	beq.n	8010d3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	2200      	movs	r2, #0
 8010d32:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8010d34:	68b8      	ldr	r0, [r7, #8]
 8010d36:	f000 f86d 	bl	8010e14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d3e:	f043 0210 	orr.w	r2, r3, #16
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d46:	68b8      	ldr	r0, [r7, #8]
 8010d48:	f7ff ff6e 	bl	8010c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d4c:	bf00      	nop
 8010d4e:	3710      	adds	r7, #16
 8010d50:	46bd      	mov	sp, r7
 8010d52:	bd80      	pop	{r7, pc}

08010d54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	603b      	str	r3, [r7, #0]
 8010d60:	4613      	mov	r3, r2
 8010d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d64:	e02c      	b.n	8010dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d6c:	d028      	beq.n	8010dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8010d6e:	69bb      	ldr	r3, [r7, #24]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d007      	beq.n	8010d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8010d74:	f7f9 fbb6 	bl	800a4e4 <HAL_GetTick>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	683b      	ldr	r3, [r7, #0]
 8010d7c:	1ad3      	subs	r3, r2, r3
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	d21d      	bcs.n	8010dc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010d92:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	695a      	ldr	r2, [r3, #20]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f022 0201 	bic.w	r2, r2, #1
 8010da2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	2220      	movs	r2, #32
 8010da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2220      	movs	r2, #32
 8010db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2200      	movs	r2, #0
 8010db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	e00f      	b.n	8010de0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	4013      	ands	r3, r2
 8010dca:	68ba      	ldr	r2, [r7, #8]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	bf0c      	ite	eq
 8010dd0:	2301      	moveq	r3, #1
 8010dd2:	2300      	movne	r3, #0
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	79fb      	ldrb	r3, [r7, #7]
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d0c3      	beq.n	8010d66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010dde:	2300      	movs	r3, #0
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}

08010de8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010dfe:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2220      	movs	r2, #32
 8010e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8010e08:	bf00      	nop
 8010e0a:	370c      	adds	r7, #12
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	68da      	ldr	r2, [r3, #12]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	695a      	ldr	r2, [r3, #20]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	f022 0201 	bic.w	r2, r2, #1
 8010e3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2220      	movs	r2, #32
 8010e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010e44:	bf00      	nop
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr

08010e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2200      	movs	r2, #0
 8010e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2200      	movs	r2, #0
 8010e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	f7ff fedc 	bl	8010c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e70:	bf00      	nop
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	2b21      	cmp	r3, #33	; 0x21
 8010e8a:	d144      	bne.n	8010f16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	689b      	ldr	r3, [r3, #8]
 8010e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e94:	d11a      	bne.n	8010ecc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6a1b      	ldr	r3, [r3, #32]
 8010e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	881b      	ldrh	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010eaa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	691b      	ldr	r3, [r3, #16]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d105      	bne.n	8010ec0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a1b      	ldr	r3, [r3, #32]
 8010eb8:	1c9a      	adds	r2, r3, #2
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	621a      	str	r2, [r3, #32]
 8010ebe:	e00e      	b.n	8010ede <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6a1b      	ldr	r3, [r3, #32]
 8010ec4:	1c5a      	adds	r2, r3, #1
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	621a      	str	r2, [r3, #32]
 8010eca:	e008      	b.n	8010ede <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6a1b      	ldr	r3, [r3, #32]
 8010ed0:	1c59      	adds	r1, r3, #1
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	6211      	str	r1, [r2, #32]
 8010ed6:	781a      	ldrb	r2, [r3, #0]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	3b01      	subs	r3, #1
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	4619      	mov	r1, r3
 8010eec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d10f      	bne.n	8010f12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	68da      	ldr	r2, [r3, #12]
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	68da      	ldr	r2, [r3, #12]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010f12:	2300      	movs	r3, #0
 8010f14:	e000      	b.n	8010f18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8010f16:	2302      	movs	r3, #2
  }
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3714      	adds	r7, #20
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2220      	movs	r2, #32
 8010f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f7ff fe5b 	bl	8010c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010f4a:	2300      	movs	r3, #0
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b22      	cmp	r3, #34	; 0x22
 8010f66:	d171      	bne.n	801104c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f70:	d123      	bne.n	8010fba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f76:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10e      	bne.n	8010f9e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	685b      	ldr	r3, [r3, #4]
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f96:	1c9a      	adds	r2, r3, #2
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8010f9c:	e029      	b.n	8010ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	b2db      	uxtb	r3, r3
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8010fb8:	e01b      	b.n	8010ff2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10a      	bne.n	8010fd8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6858      	ldr	r0, [r3, #4]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fcc:	1c59      	adds	r1, r3, #1
 8010fce:	687a      	ldr	r2, [r7, #4]
 8010fd0:	6291      	str	r1, [r2, #40]	; 0x28
 8010fd2:	b2c2      	uxtb	r2, r0
 8010fd4:	701a      	strb	r2, [r3, #0]
 8010fd6:	e00c      	b.n	8010ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fe4:	1c58      	adds	r0, r3, #1
 8010fe6:	6879      	ldr	r1, [r7, #4]
 8010fe8:	6288      	str	r0, [r1, #40]	; 0x28
 8010fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010fee:	b2d2      	uxtb	r2, r2
 8010ff0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	4619      	mov	r1, r3
 8011000:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011002:	2b00      	cmp	r3, #0
 8011004:	d120      	bne.n	8011048 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	68da      	ldr	r2, [r3, #12]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f022 0220 	bic.w	r2, r2, #32
 8011014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	68da      	ldr	r2, [r3, #12]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011024:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	695a      	ldr	r2, [r3, #20]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f022 0201 	bic.w	r2, r2, #1
 8011034:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2220      	movs	r2, #32
 801103a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7f4 fb02 	bl	8005648 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8011044:	2300      	movs	r3, #0
 8011046:	e002      	b.n	801104e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	e000      	b.n	801104e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 801104c:	2302      	movs	r3, #2
  }
}
 801104e:	4618      	mov	r0, r3
 8011050:	3710      	adds	r7, #16
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}
	...

08011058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105c:	b0bd      	sub	sp, #244	; 0xf4
 801105e:	af00      	add	r7, sp, #0
 8011060:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8011070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011074:	68d9      	ldr	r1, [r3, #12]
 8011076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	ea40 0301 	orr.w	r3, r0, r1
 8011080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8011082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011086:	689a      	ldr	r2, [r3, #8]
 8011088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801108c:	691b      	ldr	r3, [r3, #16]
 801108e:	431a      	orrs	r2, r3
 8011090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	431a      	orrs	r2, r3
 8011098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801109c:	69db      	ldr	r3, [r3, #28]
 801109e:	4313      	orrs	r3, r2
 80110a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80110a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80110b0:	f021 010c 	bic.w	r1, r1, #12
 80110b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110be:	430b      	orrs	r3, r1
 80110c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80110c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80110ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110d2:	6999      	ldr	r1, [r3, #24]
 80110d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	ea40 0301 	orr.w	r3, r0, r1
 80110de:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110e4:	69db      	ldr	r3, [r3, #28]
 80110e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110ea:	f040 81a5 	bne.w	8011438 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80110ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	4bcd      	ldr	r3, [pc, #820]	; (801142c <UART_SetConfig+0x3d4>)
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d006      	beq.n	8011108 <UART_SetConfig+0xb0>
 80110fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	4bcb      	ldr	r3, [pc, #812]	; (8011430 <UART_SetConfig+0x3d8>)
 8011102:	429a      	cmp	r2, r3
 8011104:	f040 80cb 	bne.w	801129e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011108:	f7fe f836 	bl	800f178 <HAL_RCC_GetPCLK2Freq>
 801110c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011110:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011114:	461c      	mov	r4, r3
 8011116:	f04f 0500 	mov.w	r5, #0
 801111a:	4622      	mov	r2, r4
 801111c:	462b      	mov	r3, r5
 801111e:	1891      	adds	r1, r2, r2
 8011120:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8011124:	415b      	adcs	r3, r3
 8011126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801112a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 801112e:	1912      	adds	r2, r2, r4
 8011130:	eb45 0303 	adc.w	r3, r5, r3
 8011134:	f04f 0000 	mov.w	r0, #0
 8011138:	f04f 0100 	mov.w	r1, #0
 801113c:	00d9      	lsls	r1, r3, #3
 801113e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011142:	00d0      	lsls	r0, r2, #3
 8011144:	4602      	mov	r2, r0
 8011146:	460b      	mov	r3, r1
 8011148:	1911      	adds	r1, r2, r4
 801114a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 801114e:	416b      	adcs	r3, r5
 8011150:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	461a      	mov	r2, r3
 801115c:	f04f 0300 	mov.w	r3, #0
 8011160:	1891      	adds	r1, r2, r2
 8011162:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8011166:	415b      	adcs	r3, r3
 8011168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801116c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8011170:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8011174:	f7ef fd88 	bl	8000c88 <__aeabi_uldivmod>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	4bad      	ldr	r3, [pc, #692]	; (8011434 <UART_SetConfig+0x3dc>)
 801117e:	fba3 2302 	umull	r2, r3, r3, r2
 8011182:	095b      	lsrs	r3, r3, #5
 8011184:	011e      	lsls	r6, r3, #4
 8011186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801118a:	461c      	mov	r4, r3
 801118c:	f04f 0500 	mov.w	r5, #0
 8011190:	4622      	mov	r2, r4
 8011192:	462b      	mov	r3, r5
 8011194:	1891      	adds	r1, r2, r2
 8011196:	67b9      	str	r1, [r7, #120]	; 0x78
 8011198:	415b      	adcs	r3, r3
 801119a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801119c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80111a0:	1912      	adds	r2, r2, r4
 80111a2:	eb45 0303 	adc.w	r3, r5, r3
 80111a6:	f04f 0000 	mov.w	r0, #0
 80111aa:	f04f 0100 	mov.w	r1, #0
 80111ae:	00d9      	lsls	r1, r3, #3
 80111b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80111b4:	00d0      	lsls	r0, r2, #3
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	1911      	adds	r1, r2, r4
 80111bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80111c0:	416b      	adcs	r3, r5
 80111c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80111c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	461a      	mov	r2, r3
 80111ce:	f04f 0300 	mov.w	r3, #0
 80111d2:	1891      	adds	r1, r2, r2
 80111d4:	6739      	str	r1, [r7, #112]	; 0x70
 80111d6:	415b      	adcs	r3, r3
 80111d8:	677b      	str	r3, [r7, #116]	; 0x74
 80111da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80111de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80111e2:	f7ef fd51 	bl	8000c88 <__aeabi_uldivmod>
 80111e6:	4602      	mov	r2, r0
 80111e8:	460b      	mov	r3, r1
 80111ea:	4b92      	ldr	r3, [pc, #584]	; (8011434 <UART_SetConfig+0x3dc>)
 80111ec:	fba3 1302 	umull	r1, r3, r3, r2
 80111f0:	095b      	lsrs	r3, r3, #5
 80111f2:	2164      	movs	r1, #100	; 0x64
 80111f4:	fb01 f303 	mul.w	r3, r1, r3
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	00db      	lsls	r3, r3, #3
 80111fc:	3332      	adds	r3, #50	; 0x32
 80111fe:	4a8d      	ldr	r2, [pc, #564]	; (8011434 <UART_SetConfig+0x3dc>)
 8011200:	fba2 2303 	umull	r2, r3, r2, r3
 8011204:	095b      	lsrs	r3, r3, #5
 8011206:	005b      	lsls	r3, r3, #1
 8011208:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801120c:	441e      	add	r6, r3
 801120e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011212:	4618      	mov	r0, r3
 8011214:	f04f 0100 	mov.w	r1, #0
 8011218:	4602      	mov	r2, r0
 801121a:	460b      	mov	r3, r1
 801121c:	1894      	adds	r4, r2, r2
 801121e:	66bc      	str	r4, [r7, #104]	; 0x68
 8011220:	415b      	adcs	r3, r3
 8011222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011224:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8011228:	1812      	adds	r2, r2, r0
 801122a:	eb41 0303 	adc.w	r3, r1, r3
 801122e:	f04f 0400 	mov.w	r4, #0
 8011232:	f04f 0500 	mov.w	r5, #0
 8011236:	00dd      	lsls	r5, r3, #3
 8011238:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801123c:	00d4      	lsls	r4, r2, #3
 801123e:	4622      	mov	r2, r4
 8011240:	462b      	mov	r3, r5
 8011242:	1814      	adds	r4, r2, r0
 8011244:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8011248:	414b      	adcs	r3, r1
 801124a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801124e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	461a      	mov	r2, r3
 8011256:	f04f 0300 	mov.w	r3, #0
 801125a:	1891      	adds	r1, r2, r2
 801125c:	6639      	str	r1, [r7, #96]	; 0x60
 801125e:	415b      	adcs	r3, r3
 8011260:	667b      	str	r3, [r7, #100]	; 0x64
 8011262:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8011266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801126a:	f7ef fd0d 	bl	8000c88 <__aeabi_uldivmod>
 801126e:	4602      	mov	r2, r0
 8011270:	460b      	mov	r3, r1
 8011272:	4b70      	ldr	r3, [pc, #448]	; (8011434 <UART_SetConfig+0x3dc>)
 8011274:	fba3 1302 	umull	r1, r3, r3, r2
 8011278:	095b      	lsrs	r3, r3, #5
 801127a:	2164      	movs	r1, #100	; 0x64
 801127c:	fb01 f303 	mul.w	r3, r1, r3
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	3332      	adds	r3, #50	; 0x32
 8011286:	4a6b      	ldr	r2, [pc, #428]	; (8011434 <UART_SetConfig+0x3dc>)
 8011288:	fba2 2303 	umull	r2, r3, r2, r3
 801128c:	095b      	lsrs	r3, r3, #5
 801128e:	f003 0207 	and.w	r2, r3, #7
 8011292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4432      	add	r2, r6
 801129a:	609a      	str	r2, [r3, #8]
 801129c:	e26d      	b.n	801177a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801129e:	f7fd ff57 	bl	800f150 <HAL_RCC_GetPCLK1Freq>
 80112a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80112a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80112aa:	461c      	mov	r4, r3
 80112ac:	f04f 0500 	mov.w	r5, #0
 80112b0:	4622      	mov	r2, r4
 80112b2:	462b      	mov	r3, r5
 80112b4:	1891      	adds	r1, r2, r2
 80112b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80112b8:	415b      	adcs	r3, r3
 80112ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80112bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80112c0:	1912      	adds	r2, r2, r4
 80112c2:	eb45 0303 	adc.w	r3, r5, r3
 80112c6:	f04f 0000 	mov.w	r0, #0
 80112ca:	f04f 0100 	mov.w	r1, #0
 80112ce:	00d9      	lsls	r1, r3, #3
 80112d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80112d4:	00d0      	lsls	r0, r2, #3
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	1911      	adds	r1, r2, r4
 80112dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80112e0:	416b      	adcs	r3, r5
 80112e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80112e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112ea:	685b      	ldr	r3, [r3, #4]
 80112ec:	461a      	mov	r2, r3
 80112ee:	f04f 0300 	mov.w	r3, #0
 80112f2:	1891      	adds	r1, r2, r2
 80112f4:	6539      	str	r1, [r7, #80]	; 0x50
 80112f6:	415b      	adcs	r3, r3
 80112f8:	657b      	str	r3, [r7, #84]	; 0x54
 80112fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80112fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8011302:	f7ef fcc1 	bl	8000c88 <__aeabi_uldivmod>
 8011306:	4602      	mov	r2, r0
 8011308:	460b      	mov	r3, r1
 801130a:	4b4a      	ldr	r3, [pc, #296]	; (8011434 <UART_SetConfig+0x3dc>)
 801130c:	fba3 2302 	umull	r2, r3, r3, r2
 8011310:	095b      	lsrs	r3, r3, #5
 8011312:	011e      	lsls	r6, r3, #4
 8011314:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011318:	461c      	mov	r4, r3
 801131a:	f04f 0500 	mov.w	r5, #0
 801131e:	4622      	mov	r2, r4
 8011320:	462b      	mov	r3, r5
 8011322:	1891      	adds	r1, r2, r2
 8011324:	64b9      	str	r1, [r7, #72]	; 0x48
 8011326:	415b      	adcs	r3, r3
 8011328:	64fb      	str	r3, [r7, #76]	; 0x4c
 801132a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801132e:	1912      	adds	r2, r2, r4
 8011330:	eb45 0303 	adc.w	r3, r5, r3
 8011334:	f04f 0000 	mov.w	r0, #0
 8011338:	f04f 0100 	mov.w	r1, #0
 801133c:	00d9      	lsls	r1, r3, #3
 801133e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011342:	00d0      	lsls	r0, r2, #3
 8011344:	4602      	mov	r2, r0
 8011346:	460b      	mov	r3, r1
 8011348:	1911      	adds	r1, r2, r4
 801134a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 801134e:	416b      	adcs	r3, r5
 8011350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	461a      	mov	r2, r3
 801135c:	f04f 0300 	mov.w	r3, #0
 8011360:	1891      	adds	r1, r2, r2
 8011362:	6439      	str	r1, [r7, #64]	; 0x40
 8011364:	415b      	adcs	r3, r3
 8011366:	647b      	str	r3, [r7, #68]	; 0x44
 8011368:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801136c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8011370:	f7ef fc8a 	bl	8000c88 <__aeabi_uldivmod>
 8011374:	4602      	mov	r2, r0
 8011376:	460b      	mov	r3, r1
 8011378:	4b2e      	ldr	r3, [pc, #184]	; (8011434 <UART_SetConfig+0x3dc>)
 801137a:	fba3 1302 	umull	r1, r3, r3, r2
 801137e:	095b      	lsrs	r3, r3, #5
 8011380:	2164      	movs	r1, #100	; 0x64
 8011382:	fb01 f303 	mul.w	r3, r1, r3
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	3332      	adds	r3, #50	; 0x32
 801138c:	4a29      	ldr	r2, [pc, #164]	; (8011434 <UART_SetConfig+0x3dc>)
 801138e:	fba2 2303 	umull	r2, r3, r2, r3
 8011392:	095b      	lsrs	r3, r3, #5
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801139a:	441e      	add	r6, r3
 801139c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113a0:	4618      	mov	r0, r3
 80113a2:	f04f 0100 	mov.w	r1, #0
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	1894      	adds	r4, r2, r2
 80113ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80113ae:	415b      	adcs	r3, r3
 80113b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80113b6:	1812      	adds	r2, r2, r0
 80113b8:	eb41 0303 	adc.w	r3, r1, r3
 80113bc:	f04f 0400 	mov.w	r4, #0
 80113c0:	f04f 0500 	mov.w	r5, #0
 80113c4:	00dd      	lsls	r5, r3, #3
 80113c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80113ca:	00d4      	lsls	r4, r2, #3
 80113cc:	4622      	mov	r2, r4
 80113ce:	462b      	mov	r3, r5
 80113d0:	1814      	adds	r4, r2, r0
 80113d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80113d6:	414b      	adcs	r3, r1
 80113d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80113dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	461a      	mov	r2, r3
 80113e4:	f04f 0300 	mov.w	r3, #0
 80113e8:	1891      	adds	r1, r2, r2
 80113ea:	6339      	str	r1, [r7, #48]	; 0x30
 80113ec:	415b      	adcs	r3, r3
 80113ee:	637b      	str	r3, [r7, #52]	; 0x34
 80113f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80113f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80113f8:	f7ef fc46 	bl	8000c88 <__aeabi_uldivmod>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4b0c      	ldr	r3, [pc, #48]	; (8011434 <UART_SetConfig+0x3dc>)
 8011402:	fba3 1302 	umull	r1, r3, r3, r2
 8011406:	095b      	lsrs	r3, r3, #5
 8011408:	2164      	movs	r1, #100	; 0x64
 801140a:	fb01 f303 	mul.w	r3, r1, r3
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	00db      	lsls	r3, r3, #3
 8011412:	3332      	adds	r3, #50	; 0x32
 8011414:	4a07      	ldr	r2, [pc, #28]	; (8011434 <UART_SetConfig+0x3dc>)
 8011416:	fba2 2303 	umull	r2, r3, r2, r3
 801141a:	095b      	lsrs	r3, r3, #5
 801141c:	f003 0207 	and.w	r2, r3, #7
 8011420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4432      	add	r2, r6
 8011428:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801142a:	e1a6      	b.n	801177a <UART_SetConfig+0x722>
 801142c:	40011000 	.word	0x40011000
 8011430:	40011400 	.word	0x40011400
 8011434:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	4bd1      	ldr	r3, [pc, #836]	; (8011784 <UART_SetConfig+0x72c>)
 8011440:	429a      	cmp	r2, r3
 8011442:	d006      	beq.n	8011452 <UART_SetConfig+0x3fa>
 8011444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	4bcf      	ldr	r3, [pc, #828]	; (8011788 <UART_SetConfig+0x730>)
 801144c:	429a      	cmp	r2, r3
 801144e:	f040 80ca 	bne.w	80115e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8011452:	f7fd fe91 	bl	800f178 <HAL_RCC_GetPCLK2Freq>
 8011456:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801145a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801145e:	461c      	mov	r4, r3
 8011460:	f04f 0500 	mov.w	r5, #0
 8011464:	4622      	mov	r2, r4
 8011466:	462b      	mov	r3, r5
 8011468:	1891      	adds	r1, r2, r2
 801146a:	62b9      	str	r1, [r7, #40]	; 0x28
 801146c:	415b      	adcs	r3, r3
 801146e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011474:	1912      	adds	r2, r2, r4
 8011476:	eb45 0303 	adc.w	r3, r5, r3
 801147a:	f04f 0000 	mov.w	r0, #0
 801147e:	f04f 0100 	mov.w	r1, #0
 8011482:	00d9      	lsls	r1, r3, #3
 8011484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011488:	00d0      	lsls	r0, r2, #3
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	eb12 0a04 	adds.w	sl, r2, r4
 8011492:	eb43 0b05 	adc.w	fp, r3, r5
 8011496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4618      	mov	r0, r3
 801149e:	f04f 0100 	mov.w	r1, #0
 80114a2:	f04f 0200 	mov.w	r2, #0
 80114a6:	f04f 0300 	mov.w	r3, #0
 80114aa:	008b      	lsls	r3, r1, #2
 80114ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80114b0:	0082      	lsls	r2, r0, #2
 80114b2:	4650      	mov	r0, sl
 80114b4:	4659      	mov	r1, fp
 80114b6:	f7ef fbe7 	bl	8000c88 <__aeabi_uldivmod>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	4bb3      	ldr	r3, [pc, #716]	; (801178c <UART_SetConfig+0x734>)
 80114c0:	fba3 2302 	umull	r2, r3, r3, r2
 80114c4:	095b      	lsrs	r3, r3, #5
 80114c6:	011e      	lsls	r6, r3, #4
 80114c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80114cc:	4618      	mov	r0, r3
 80114ce:	f04f 0100 	mov.w	r1, #0
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	1894      	adds	r4, r2, r2
 80114d8:	623c      	str	r4, [r7, #32]
 80114da:	415b      	adcs	r3, r3
 80114dc:	627b      	str	r3, [r7, #36]	; 0x24
 80114de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80114e2:	1812      	adds	r2, r2, r0
 80114e4:	eb41 0303 	adc.w	r3, r1, r3
 80114e8:	f04f 0400 	mov.w	r4, #0
 80114ec:	f04f 0500 	mov.w	r5, #0
 80114f0:	00dd      	lsls	r5, r3, #3
 80114f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80114f6:	00d4      	lsls	r4, r2, #3
 80114f8:	4622      	mov	r2, r4
 80114fa:	462b      	mov	r3, r5
 80114fc:	1814      	adds	r4, r2, r0
 80114fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8011502:	414b      	adcs	r3, r1
 8011504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	4618      	mov	r0, r3
 8011510:	f04f 0100 	mov.w	r1, #0
 8011514:	f04f 0200 	mov.w	r2, #0
 8011518:	f04f 0300 	mov.w	r3, #0
 801151c:	008b      	lsls	r3, r1, #2
 801151e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011522:	0082      	lsls	r2, r0, #2
 8011524:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8011528:	f7ef fbae 	bl	8000c88 <__aeabi_uldivmod>
 801152c:	4602      	mov	r2, r0
 801152e:	460b      	mov	r3, r1
 8011530:	4b96      	ldr	r3, [pc, #600]	; (801178c <UART_SetConfig+0x734>)
 8011532:	fba3 1302 	umull	r1, r3, r3, r2
 8011536:	095b      	lsrs	r3, r3, #5
 8011538:	2164      	movs	r1, #100	; 0x64
 801153a:	fb01 f303 	mul.w	r3, r1, r3
 801153e:	1ad3      	subs	r3, r2, r3
 8011540:	011b      	lsls	r3, r3, #4
 8011542:	3332      	adds	r3, #50	; 0x32
 8011544:	4a91      	ldr	r2, [pc, #580]	; (801178c <UART_SetConfig+0x734>)
 8011546:	fba2 2303 	umull	r2, r3, r2, r3
 801154a:	095b      	lsrs	r3, r3, #5
 801154c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011550:	441e      	add	r6, r3
 8011552:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011556:	4618      	mov	r0, r3
 8011558:	f04f 0100 	mov.w	r1, #0
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	1894      	adds	r4, r2, r2
 8011562:	61bc      	str	r4, [r7, #24]
 8011564:	415b      	adcs	r3, r3
 8011566:	61fb      	str	r3, [r7, #28]
 8011568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801156c:	1812      	adds	r2, r2, r0
 801156e:	eb41 0303 	adc.w	r3, r1, r3
 8011572:	f04f 0400 	mov.w	r4, #0
 8011576:	f04f 0500 	mov.w	r5, #0
 801157a:	00dd      	lsls	r5, r3, #3
 801157c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011580:	00d4      	lsls	r4, r2, #3
 8011582:	4622      	mov	r2, r4
 8011584:	462b      	mov	r3, r5
 8011586:	1814      	adds	r4, r2, r0
 8011588:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 801158c:	414b      	adcs	r3, r1
 801158e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	4618      	mov	r0, r3
 801159a:	f04f 0100 	mov.w	r1, #0
 801159e:	f04f 0200 	mov.w	r2, #0
 80115a2:	f04f 0300 	mov.w	r3, #0
 80115a6:	008b      	lsls	r3, r1, #2
 80115a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80115ac:	0082      	lsls	r2, r0, #2
 80115ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80115b2:	f7ef fb69 	bl	8000c88 <__aeabi_uldivmod>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4b74      	ldr	r3, [pc, #464]	; (801178c <UART_SetConfig+0x734>)
 80115bc:	fba3 1302 	umull	r1, r3, r3, r2
 80115c0:	095b      	lsrs	r3, r3, #5
 80115c2:	2164      	movs	r1, #100	; 0x64
 80115c4:	fb01 f303 	mul.w	r3, r1, r3
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	011b      	lsls	r3, r3, #4
 80115cc:	3332      	adds	r3, #50	; 0x32
 80115ce:	4a6f      	ldr	r2, [pc, #444]	; (801178c <UART_SetConfig+0x734>)
 80115d0:	fba2 2303 	umull	r2, r3, r2, r3
 80115d4:	095b      	lsrs	r3, r3, #5
 80115d6:	f003 020f 	and.w	r2, r3, #15
 80115da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4432      	add	r2, r6
 80115e2:	609a      	str	r2, [r3, #8]
 80115e4:	e0c9      	b.n	801177a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80115e6:	f7fd fdb3 	bl	800f150 <HAL_RCC_GetPCLK1Freq>
 80115ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80115ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80115f2:	461c      	mov	r4, r3
 80115f4:	f04f 0500 	mov.w	r5, #0
 80115f8:	4622      	mov	r2, r4
 80115fa:	462b      	mov	r3, r5
 80115fc:	1891      	adds	r1, r2, r2
 80115fe:	6139      	str	r1, [r7, #16]
 8011600:	415b      	adcs	r3, r3
 8011602:	617b      	str	r3, [r7, #20]
 8011604:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011608:	1912      	adds	r2, r2, r4
 801160a:	eb45 0303 	adc.w	r3, r5, r3
 801160e:	f04f 0000 	mov.w	r0, #0
 8011612:	f04f 0100 	mov.w	r1, #0
 8011616:	00d9      	lsls	r1, r3, #3
 8011618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801161c:	00d0      	lsls	r0, r2, #3
 801161e:	4602      	mov	r2, r0
 8011620:	460b      	mov	r3, r1
 8011622:	eb12 0804 	adds.w	r8, r2, r4
 8011626:	eb43 0905 	adc.w	r9, r3, r5
 801162a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801162e:	685b      	ldr	r3, [r3, #4]
 8011630:	4618      	mov	r0, r3
 8011632:	f04f 0100 	mov.w	r1, #0
 8011636:	f04f 0200 	mov.w	r2, #0
 801163a:	f04f 0300 	mov.w	r3, #0
 801163e:	008b      	lsls	r3, r1, #2
 8011640:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011644:	0082      	lsls	r2, r0, #2
 8011646:	4640      	mov	r0, r8
 8011648:	4649      	mov	r1, r9
 801164a:	f7ef fb1d 	bl	8000c88 <__aeabi_uldivmod>
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	4b4e      	ldr	r3, [pc, #312]	; (801178c <UART_SetConfig+0x734>)
 8011654:	fba3 2302 	umull	r2, r3, r3, r2
 8011658:	095b      	lsrs	r3, r3, #5
 801165a:	011e      	lsls	r6, r3, #4
 801165c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011660:	4618      	mov	r0, r3
 8011662:	f04f 0100 	mov.w	r1, #0
 8011666:	4602      	mov	r2, r0
 8011668:	460b      	mov	r3, r1
 801166a:	1894      	adds	r4, r2, r2
 801166c:	60bc      	str	r4, [r7, #8]
 801166e:	415b      	adcs	r3, r3
 8011670:	60fb      	str	r3, [r7, #12]
 8011672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011676:	1812      	adds	r2, r2, r0
 8011678:	eb41 0303 	adc.w	r3, r1, r3
 801167c:	f04f 0400 	mov.w	r4, #0
 8011680:	f04f 0500 	mov.w	r5, #0
 8011684:	00dd      	lsls	r5, r3, #3
 8011686:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801168a:	00d4      	lsls	r4, r2, #3
 801168c:	4622      	mov	r2, r4
 801168e:	462b      	mov	r3, r5
 8011690:	1814      	adds	r4, r2, r0
 8011692:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8011696:	414b      	adcs	r3, r1
 8011698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801169c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f04f 0100 	mov.w	r1, #0
 80116a8:	f04f 0200 	mov.w	r2, #0
 80116ac:	f04f 0300 	mov.w	r3, #0
 80116b0:	008b      	lsls	r3, r1, #2
 80116b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80116b6:	0082      	lsls	r2, r0, #2
 80116b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80116bc:	f7ef fae4 	bl	8000c88 <__aeabi_uldivmod>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4b31      	ldr	r3, [pc, #196]	; (801178c <UART_SetConfig+0x734>)
 80116c6:	fba3 1302 	umull	r1, r3, r3, r2
 80116ca:	095b      	lsrs	r3, r3, #5
 80116cc:	2164      	movs	r1, #100	; 0x64
 80116ce:	fb01 f303 	mul.w	r3, r1, r3
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	011b      	lsls	r3, r3, #4
 80116d6:	3332      	adds	r3, #50	; 0x32
 80116d8:	4a2c      	ldr	r2, [pc, #176]	; (801178c <UART_SetConfig+0x734>)
 80116da:	fba2 2303 	umull	r2, r3, r2, r3
 80116de:	095b      	lsrs	r3, r3, #5
 80116e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116e4:	441e      	add	r6, r3
 80116e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80116ea:	4618      	mov	r0, r3
 80116ec:	f04f 0100 	mov.w	r1, #0
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	1894      	adds	r4, r2, r2
 80116f6:	603c      	str	r4, [r7, #0]
 80116f8:	415b      	adcs	r3, r3
 80116fa:	607b      	str	r3, [r7, #4]
 80116fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011700:	1812      	adds	r2, r2, r0
 8011702:	eb41 0303 	adc.w	r3, r1, r3
 8011706:	f04f 0400 	mov.w	r4, #0
 801170a:	f04f 0500 	mov.w	r5, #0
 801170e:	00dd      	lsls	r5, r3, #3
 8011710:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8011714:	00d4      	lsls	r4, r2, #3
 8011716:	4622      	mov	r2, r4
 8011718:	462b      	mov	r3, r5
 801171a:	1814      	adds	r4, r2, r0
 801171c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8011720:	414b      	adcs	r3, r1
 8011722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	4618      	mov	r0, r3
 801172e:	f04f 0100 	mov.w	r1, #0
 8011732:	f04f 0200 	mov.w	r2, #0
 8011736:	f04f 0300 	mov.w	r3, #0
 801173a:	008b      	lsls	r3, r1, #2
 801173c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8011740:	0082      	lsls	r2, r0, #2
 8011742:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011746:	f7ef fa9f 	bl	8000c88 <__aeabi_uldivmod>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	4b0f      	ldr	r3, [pc, #60]	; (801178c <UART_SetConfig+0x734>)
 8011750:	fba3 1302 	umull	r1, r3, r3, r2
 8011754:	095b      	lsrs	r3, r3, #5
 8011756:	2164      	movs	r1, #100	; 0x64
 8011758:	fb01 f303 	mul.w	r3, r1, r3
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	3332      	adds	r3, #50	; 0x32
 8011762:	4a0a      	ldr	r2, [pc, #40]	; (801178c <UART_SetConfig+0x734>)
 8011764:	fba2 2303 	umull	r2, r3, r2, r3
 8011768:	095b      	lsrs	r3, r3, #5
 801176a:	f003 020f 	and.w	r2, r3, #15
 801176e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4432      	add	r2, r6
 8011776:	609a      	str	r2, [r3, #8]
}
 8011778:	e7ff      	b.n	801177a <UART_SetConfig+0x722>
 801177a:	bf00      	nop
 801177c:	37f4      	adds	r7, #244	; 0xf4
 801177e:	46bd      	mov	sp, r7
 8011780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011784:	40011000 	.word	0x40011000
 8011788:	40011400 	.word	0x40011400
 801178c:	51eb851f 	.word	0x51eb851f

08011790 <__NVIC_SetPriority>:
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	4603      	mov	r3, r0
 8011798:	6039      	str	r1, [r7, #0]
 801179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	db0a      	blt.n	80117ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	490c      	ldr	r1, [pc, #48]	; (80117dc <__NVIC_SetPriority+0x4c>)
 80117aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80117ae:	0112      	lsls	r2, r2, #4
 80117b0:	b2d2      	uxtb	r2, r2
 80117b2:	440b      	add	r3, r1
 80117b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80117b8:	e00a      	b.n	80117d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	b2da      	uxtb	r2, r3
 80117be:	4908      	ldr	r1, [pc, #32]	; (80117e0 <__NVIC_SetPriority+0x50>)
 80117c0:	79fb      	ldrb	r3, [r7, #7]
 80117c2:	f003 030f 	and.w	r3, r3, #15
 80117c6:	3b04      	subs	r3, #4
 80117c8:	0112      	lsls	r2, r2, #4
 80117ca:	b2d2      	uxtb	r2, r2
 80117cc:	440b      	add	r3, r1
 80117ce:	761a      	strb	r2, [r3, #24]
}
 80117d0:	bf00      	nop
 80117d2:	370c      	adds	r7, #12
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr
 80117dc:	e000e100 	.word	0xe000e100
 80117e0:	e000ed00 	.word	0xe000ed00

080117e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80117e4:	b580      	push	{r7, lr}
 80117e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80117e8:	4b05      	ldr	r3, [pc, #20]	; (8011800 <SysTick_Handler+0x1c>)
 80117ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80117ec:	f002 fb8c 	bl	8013f08 <xTaskGetSchedulerState>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d001      	beq.n	80117fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80117f6:	f003 fa6f 	bl	8014cd8 <xPortSysTickHandler>
  }
}
 80117fa:	bf00      	nop
 80117fc:	bd80      	pop	{r7, pc}
 80117fe:	bf00      	nop
 8011800:	e000e010 	.word	0xe000e010

08011804 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011804:	b580      	push	{r7, lr}
 8011806:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011808:	2100      	movs	r1, #0
 801180a:	f06f 0004 	mvn.w	r0, #4
 801180e:	f7ff ffbf 	bl	8011790 <__NVIC_SetPriority>
#endif
}
 8011812:	bf00      	nop
 8011814:	bd80      	pop	{r7, pc}
	...

08011818 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011818:	b480      	push	{r7}
 801181a:	b083      	sub	sp, #12
 801181c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801181e:	f3ef 8305 	mrs	r3, IPSR
 8011822:	603b      	str	r3, [r7, #0]
  return(result);
 8011824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011826:	2b00      	cmp	r3, #0
 8011828:	d003      	beq.n	8011832 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801182a:	f06f 0305 	mvn.w	r3, #5
 801182e:	607b      	str	r3, [r7, #4]
 8011830:	e00c      	b.n	801184c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011832:	4b0a      	ldr	r3, [pc, #40]	; (801185c <osKernelInitialize+0x44>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d105      	bne.n	8011846 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801183a:	4b08      	ldr	r3, [pc, #32]	; (801185c <osKernelInitialize+0x44>)
 801183c:	2201      	movs	r2, #1
 801183e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011840:	2300      	movs	r3, #0
 8011842:	607b      	str	r3, [r7, #4]
 8011844:	e002      	b.n	801184c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801184a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801184c:	687b      	ldr	r3, [r7, #4]
}
 801184e:	4618      	mov	r0, r3
 8011850:	370c      	adds	r7, #12
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	20001980 	.word	0x20001980

08011860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011866:	f3ef 8305 	mrs	r3, IPSR
 801186a:	603b      	str	r3, [r7, #0]
  return(result);
 801186c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801186e:	2b00      	cmp	r3, #0
 8011870:	d003      	beq.n	801187a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011872:	f06f 0305 	mvn.w	r3, #5
 8011876:	607b      	str	r3, [r7, #4]
 8011878:	e010      	b.n	801189c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801187a:	4b0b      	ldr	r3, [pc, #44]	; (80118a8 <osKernelStart+0x48>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b01      	cmp	r3, #1
 8011880:	d109      	bne.n	8011896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011882:	f7ff ffbf 	bl	8011804 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011886:	4b08      	ldr	r3, [pc, #32]	; (80118a8 <osKernelStart+0x48>)
 8011888:	2202      	movs	r2, #2
 801188a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801188c:	f001 fef4 	bl	8013678 <vTaskStartScheduler>
      stat = osOK;
 8011890:	2300      	movs	r3, #0
 8011892:	607b      	str	r3, [r7, #4]
 8011894:	e002      	b.n	801189c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801189a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801189c:	687b      	ldr	r3, [r7, #4]
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3708      	adds	r7, #8
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}
 80118a6:	bf00      	nop
 80118a8:	20001980 	.word	0x20001980

080118ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b08e      	sub	sp, #56	; 0x38
 80118b0:	af04      	add	r7, sp, #16
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80118b8:	2300      	movs	r3, #0
 80118ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118bc:	f3ef 8305 	mrs	r3, IPSR
 80118c0:	617b      	str	r3, [r7, #20]
  return(result);
 80118c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d17e      	bne.n	80119c6 <osThreadNew+0x11a>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d07b      	beq.n	80119c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80118ce:	2380      	movs	r3, #128	; 0x80
 80118d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80118d2:	2318      	movs	r3, #24
 80118d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80118da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d045      	beq.n	8011972 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d002      	beq.n	80118f4 <osThreadNew+0x48>
        name = attr->name;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d008      	beq.n	801191a <osThreadNew+0x6e>
 8011908:	69fb      	ldr	r3, [r7, #28]
 801190a:	2b38      	cmp	r3, #56	; 0x38
 801190c:	d805      	bhi.n	801191a <osThreadNew+0x6e>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f003 0301 	and.w	r3, r3, #1
 8011916:	2b00      	cmp	r3, #0
 8011918:	d001      	beq.n	801191e <osThreadNew+0x72>
        return (NULL);
 801191a:	2300      	movs	r3, #0
 801191c:	e054      	b.n	80119c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	695b      	ldr	r3, [r3, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d003      	beq.n	801192e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	695b      	ldr	r3, [r3, #20]
 801192a:	089b      	lsrs	r3, r3, #2
 801192c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d00e      	beq.n	8011954 <osThreadNew+0xa8>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	2b5b      	cmp	r3, #91	; 0x5b
 801193c:	d90a      	bls.n	8011954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011942:	2b00      	cmp	r3, #0
 8011944:	d006      	beq.n	8011954 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	695b      	ldr	r3, [r3, #20]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d002      	beq.n	8011954 <osThreadNew+0xa8>
        mem = 1;
 801194e:	2301      	movs	r3, #1
 8011950:	61bb      	str	r3, [r7, #24]
 8011952:	e010      	b.n	8011976 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	689b      	ldr	r3, [r3, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d10c      	bne.n	8011976 <osThreadNew+0xca>
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d108      	bne.n	8011976 <osThreadNew+0xca>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d104      	bne.n	8011976 <osThreadNew+0xca>
          mem = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	61bb      	str	r3, [r7, #24]
 8011970:	e001      	b.n	8011976 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011972:	2300      	movs	r3, #0
 8011974:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d110      	bne.n	801199e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011984:	9202      	str	r2, [sp, #8]
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	9300      	str	r3, [sp, #0]
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	6a3a      	ldr	r2, [r7, #32]
 8011990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f001 fabc 	bl	8012f10 <xTaskCreateStatic>
 8011998:	4603      	mov	r3, r0
 801199a:	613b      	str	r3, [r7, #16]
 801199c:	e013      	b.n	80119c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801199e:	69bb      	ldr	r3, [r7, #24]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d110      	bne.n	80119c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80119a4:	6a3b      	ldr	r3, [r7, #32]
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	f107 0310 	add.w	r3, r7, #16
 80119ac:	9301      	str	r3, [sp, #4]
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	9300      	str	r3, [sp, #0]
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80119b6:	68f8      	ldr	r0, [r7, #12]
 80119b8:	f001 fb07 	bl	8012fca <xTaskCreate>
 80119bc:	4603      	mov	r3, r0
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d001      	beq.n	80119c6 <osThreadNew+0x11a>
            hTask = NULL;
 80119c2:	2300      	movs	r3, #0
 80119c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80119c6:	693b      	ldr	r3, [r7, #16]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3728      	adds	r7, #40	; 0x28
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119dc:	f3ef 8305 	mrs	r3, IPSR
 80119e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80119e2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d003      	beq.n	80119f0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80119e8:	f06f 0305 	mvn.w	r3, #5
 80119ec:	617b      	str	r3, [r7, #20]
 80119ee:	e00b      	b.n	8011a08 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80119f0:	693b      	ldr	r3, [r7, #16]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d103      	bne.n	80119fe <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80119f6:	f06f 0303 	mvn.w	r3, #3
 80119fa:	617b      	str	r3, [r7, #20]
 80119fc:	e004      	b.n	8011a08 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80119fe:	2300      	movs	r3, #0
 8011a00:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8011a02:	6938      	ldr	r0, [r7, #16]
 8011a04:	f001 fd32 	bl	801346c <vTaskSuspend>
  }

  return (stat);
 8011a08:	697b      	ldr	r3, [r7, #20]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3718      	adds	r7, #24
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b086      	sub	sp, #24
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a1e:	f3ef 8305 	mrs	r3, IPSR
 8011a22:	60fb      	str	r3, [r7, #12]
  return(result);
 8011a24:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <osThreadResume+0x20>
    stat = osErrorISR;
 8011a2a:	f06f 0305 	mvn.w	r3, #5
 8011a2e:	617b      	str	r3, [r7, #20]
 8011a30:	e00b      	b.n	8011a4a <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d103      	bne.n	8011a40 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8011a38:	f06f 0303 	mvn.w	r3, #3
 8011a3c:	617b      	str	r3, [r7, #20]
 8011a3e:	e004      	b.n	8011a4a <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8011a40:	2300      	movs	r3, #0
 8011a42:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8011a44:	6938      	ldr	r0, [r7, #16]
 8011a46:	f001 fdb9 	bl	80135bc <vTaskResume>
  }

  return (stat);
 8011a4a:	697b      	ldr	r3, [r7, #20]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3718      	adds	r7, #24
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b086      	sub	sp, #24
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011a60:	f3ef 8305 	mrs	r3, IPSR
 8011a64:	60bb      	str	r3, [r7, #8]
  return(result);
 8011a66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d003      	beq.n	8011a74 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011a6c:	f06f 0305 	mvn.w	r3, #5
 8011a70:	617b      	str	r3, [r7, #20]
 8011a72:	e017      	b.n	8011aa4 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d103      	bne.n	8011a82 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011a7a:	f06f 0303 	mvn.w	r3, #3
 8011a7e:	617b      	str	r3, [r7, #20]
 8011a80:	e010      	b.n	8011aa4 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8011a82:	6938      	ldr	r0, [r7, #16]
 8011a84:	f001 fc8c 	bl	80133a0 <eTaskGetState>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
 8011a8e:	2b04      	cmp	r3, #4
 8011a90:	d005      	beq.n	8011a9e <osThreadTerminate+0x4a>
      stat = osOK;
 8011a92:	2300      	movs	r3, #0
 8011a94:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011a96:	6938      	ldr	r0, [r7, #16]
 8011a98:	f001 fbdc 	bl	8013254 <vTaskDelete>
 8011a9c:	e002      	b.n	8011aa4 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011a9e:	f06f 0302 	mvn.w	r3, #2
 8011aa2:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011aa4:	697b      	ldr	r3, [r7, #20]
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3718      	adds	r7, #24
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}

08011aae <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011aae:	b580      	push	{r7, lr}
 8011ab0:	b084      	sub	sp, #16
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ab6:	f3ef 8305 	mrs	r3, IPSR
 8011aba:	60bb      	str	r3, [r7, #8]
  return(result);
 8011abc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d003      	beq.n	8011aca <osDelay+0x1c>
    stat = osErrorISR;
 8011ac2:	f06f 0305 	mvn.w	r3, #5
 8011ac6:	60fb      	str	r3, [r7, #12]
 8011ac8:	e007      	b.n	8011ada <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011aca:	2300      	movs	r3, #0
 8011acc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d002      	beq.n	8011ada <osDelay+0x2c>
      vTaskDelay(ticks);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f001 fc2f 	bl	8013338 <vTaskDelay>
    }
  }

  return (stat);
 8011ada:	68fb      	ldr	r3, [r7, #12]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3710      	adds	r7, #16
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b08a      	sub	sp, #40	; 0x28
 8011ae8:	af02      	add	r7, sp, #8
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011af0:	2300      	movs	r3, #0
 8011af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011af4:	f3ef 8305 	mrs	r3, IPSR
 8011af8:	613b      	str	r3, [r7, #16]
  return(result);
 8011afa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d175      	bne.n	8011bec <osSemaphoreNew+0x108>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d072      	beq.n	8011bec <osSemaphoreNew+0x108>
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d86e      	bhi.n	8011bec <osSemaphoreNew+0x108>
    mem = -1;
 8011b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d015      	beq.n	8011b46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	689b      	ldr	r3, [r3, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d006      	beq.n	8011b30 <osSemaphoreNew+0x4c>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	2b4f      	cmp	r3, #79	; 0x4f
 8011b28:	d902      	bls.n	8011b30 <osSemaphoreNew+0x4c>
        mem = 1;
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	61bb      	str	r3, [r7, #24]
 8011b2e:	e00c      	b.n	8011b4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d108      	bne.n	8011b4a <osSemaphoreNew+0x66>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d104      	bne.n	8011b4a <osSemaphoreNew+0x66>
          mem = 0;
 8011b40:	2300      	movs	r3, #0
 8011b42:	61bb      	str	r3, [r7, #24]
 8011b44:	e001      	b.n	8011b4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011b46:	2300      	movs	r3, #0
 8011b48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b50:	d04c      	beq.n	8011bec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d128      	bne.n	8011baa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	2b01      	cmp	r3, #1
 8011b5c:	d10a      	bne.n	8011b74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	2203      	movs	r2, #3
 8011b64:	9200      	str	r2, [sp, #0]
 8011b66:	2200      	movs	r2, #0
 8011b68:	2100      	movs	r1, #0
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	f000 fa2a 	bl	8011fc4 <xQueueGenericCreateStatic>
 8011b70:	61f8      	str	r0, [r7, #28]
 8011b72:	e005      	b.n	8011b80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011b74:	2203      	movs	r2, #3
 8011b76:	2100      	movs	r1, #0
 8011b78:	2001      	movs	r0, #1
 8011b7a:	f000 fa9b 	bl	80120b4 <xQueueGenericCreate>
 8011b7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d022      	beq.n	8011bcc <osSemaphoreNew+0xe8>
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d01f      	beq.n	8011bcc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	2200      	movs	r2, #0
 8011b90:	2100      	movs	r1, #0
 8011b92:	69f8      	ldr	r0, [r7, #28]
 8011b94:	f000 fb56 	bl	8012244 <xQueueGenericSend>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	2b01      	cmp	r3, #1
 8011b9c:	d016      	beq.n	8011bcc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011b9e:	69f8      	ldr	r0, [r7, #28]
 8011ba0:	f000 ffe2 	bl	8012b68 <vQueueDelete>
            hSemaphore = NULL;
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	61fb      	str	r3, [r7, #28]
 8011ba8:	e010      	b.n	8011bcc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d108      	bne.n	8011bc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f000 fad8 	bl	801216e <xQueueCreateCountingSemaphoreStatic>
 8011bbe:	61f8      	str	r0, [r7, #28]
 8011bc0:	e004      	b.n	8011bcc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011bc2:	68b9      	ldr	r1, [r7, #8]
 8011bc4:	68f8      	ldr	r0, [r7, #12]
 8011bc6:	f000 fb09 	bl	80121dc <xQueueCreateCountingSemaphore>
 8011bca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00c      	beq.n	8011bec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d003      	beq.n	8011be0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	617b      	str	r3, [r7, #20]
 8011bde:	e001      	b.n	8011be4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011be0:	2300      	movs	r3, #0
 8011be2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011be4:	6979      	ldr	r1, [r7, #20]
 8011be6:	69f8      	ldr	r0, [r7, #28]
 8011be8:	f001 f90a 	bl	8012e00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011bec:	69fb      	ldr	r3, [r7, #28]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3720      	adds	r7, #32
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
	...

08011bf8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b086      	sub	sp, #24
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011c06:	2300      	movs	r3, #0
 8011c08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011c10:	f06f 0303 	mvn.w	r3, #3
 8011c14:	617b      	str	r3, [r7, #20]
 8011c16:	e039      	b.n	8011c8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c18:	f3ef 8305 	mrs	r3, IPSR
 8011c1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d022      	beq.n	8011c6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d003      	beq.n	8011c32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011c2a:	f06f 0303 	mvn.w	r3, #3
 8011c2e:	617b      	str	r3, [r7, #20]
 8011c30:	e02c      	b.n	8011c8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011c32:	2300      	movs	r3, #0
 8011c34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011c36:	f107 0308 	add.w	r3, r7, #8
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	2100      	movs	r1, #0
 8011c3e:	6938      	ldr	r0, [r7, #16]
 8011c40:	f000 ff12 	bl	8012a68 <xQueueReceiveFromISR>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b01      	cmp	r3, #1
 8011c48:	d003      	beq.n	8011c52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011c4a:	f06f 0302 	mvn.w	r3, #2
 8011c4e:	617b      	str	r3, [r7, #20]
 8011c50:	e01c      	b.n	8011c8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d019      	beq.n	8011c8c <osSemaphoreAcquire+0x94>
 8011c58:	4b0f      	ldr	r3, [pc, #60]	; (8011c98 <osSemaphoreAcquire+0xa0>)
 8011c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c5e:	601a      	str	r2, [r3, #0]
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	e010      	b.n	8011c8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011c6a:	6839      	ldr	r1, [r7, #0]
 8011c6c:	6938      	ldr	r0, [r7, #16]
 8011c6e:	f000 fdef 	bl	8012850 <xQueueSemaphoreTake>
 8011c72:	4603      	mov	r3, r0
 8011c74:	2b01      	cmp	r3, #1
 8011c76:	d009      	beq.n	8011c8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d003      	beq.n	8011c86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011c7e:	f06f 0301 	mvn.w	r3, #1
 8011c82:	617b      	str	r3, [r7, #20]
 8011c84:	e002      	b.n	8011c8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011c86:	f06f 0302 	mvn.w	r3, #2
 8011c8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011c8c:	697b      	ldr	r3, [r7, #20]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3718      	adds	r7, #24
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	e000ed04 	.word	0xe000ed04

08011c9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d103      	bne.n	8011cba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011cb2:	f06f 0303 	mvn.w	r3, #3
 8011cb6:	617b      	str	r3, [r7, #20]
 8011cb8:	e02c      	b.n	8011d14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cba:	f3ef 8305 	mrs	r3, IPSR
 8011cbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01a      	beq.n	8011cfc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011cca:	f107 0308 	add.w	r3, r7, #8
 8011cce:	4619      	mov	r1, r3
 8011cd0:	6938      	ldr	r0, [r7, #16]
 8011cd2:	f000 fc50 	bl	8012576 <xQueueGiveFromISR>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d003      	beq.n	8011ce4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011cdc:	f06f 0302 	mvn.w	r3, #2
 8011ce0:	617b      	str	r3, [r7, #20]
 8011ce2:	e017      	b.n	8011d14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d014      	beq.n	8011d14 <osSemaphoreRelease+0x78>
 8011cea:	4b0d      	ldr	r3, [pc, #52]	; (8011d20 <osSemaphoreRelease+0x84>)
 8011cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	f3bf 8f4f 	dsb	sy
 8011cf6:	f3bf 8f6f 	isb	sy
 8011cfa:	e00b      	b.n	8011d14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	2200      	movs	r2, #0
 8011d00:	2100      	movs	r1, #0
 8011d02:	6938      	ldr	r0, [r7, #16]
 8011d04:	f000 fa9e 	bl	8012244 <xQueueGenericSend>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d002      	beq.n	8011d14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011d0e:	f06f 0302 	mvn.w	r3, #2
 8011d12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011d14:	697b      	ldr	r3, [r7, #20]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3718      	adds	r7, #24
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	e000ed04 	.word	0xe000ed04

08011d24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011d24:	b480      	push	{r7}
 8011d26:	b085      	sub	sp, #20
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	60f8      	str	r0, [r7, #12]
 8011d2c:	60b9      	str	r1, [r7, #8]
 8011d2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4a07      	ldr	r2, [pc, #28]	; (8011d50 <vApplicationGetIdleTaskMemory+0x2c>)
 8011d34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	4a06      	ldr	r2, [pc, #24]	; (8011d54 <vApplicationGetIdleTaskMemory+0x30>)
 8011d3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2280      	movs	r2, #128	; 0x80
 8011d40:	601a      	str	r2, [r3, #0]
}
 8011d42:	bf00      	nop
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop
 8011d50:	20001984 	.word	0x20001984
 8011d54:	200019e0 	.word	0x200019e0

08011d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	4a07      	ldr	r2, [pc, #28]	; (8011d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8011d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	4a06      	ldr	r2, [pc, #24]	; (8011d88 <vApplicationGetTimerTaskMemory+0x30>)
 8011d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011d76:	601a      	str	r2, [r3, #0]
}
 8011d78:	bf00      	nop
 8011d7a:	3714      	adds	r7, #20
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr
 8011d84:	20001be0 	.word	0x20001be0
 8011d88:	20001c3c 	.word	0x20001c3c

08011d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b083      	sub	sp, #12
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f103 0208 	add.w	r2, r3, #8
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f103 0208 	add.w	r2, r3, #8
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f103 0208 	add.w	r2, r3, #8
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011dda:	bf00      	nop
 8011ddc:	370c      	adds	r7, #12
 8011dde:	46bd      	mov	sp, r7
 8011de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de4:	4770      	bx	lr

08011de6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011de6:	b480      	push	{r7}
 8011de8:	b085      	sub	sp, #20
 8011dea:	af00      	add	r7, sp, #0
 8011dec:	6078      	str	r0, [r7, #4]
 8011dee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	685b      	ldr	r3, [r3, #4]
 8011df4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	689a      	ldr	r2, [r3, #8]
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	689b      	ldr	r3, [r3, #8]
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	1c5a      	adds	r2, r3, #1
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	601a      	str	r2, [r3, #0]
}
 8011e22:	bf00      	nop
 8011e24:	3714      	adds	r7, #20
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e2e:	b480      	push	{r7}
 8011e30:	b085      	sub	sp, #20
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
 8011e36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e44:	d103      	bne.n	8011e4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	60fb      	str	r3, [r7, #12]
 8011e4c:	e00c      	b.n	8011e68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	3308      	adds	r3, #8
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	e002      	b.n	8011e5c <vListInsert+0x2e>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	60fb      	str	r3, [r7, #12]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68ba      	ldr	r2, [r7, #8]
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d2f6      	bcs.n	8011e56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	685a      	ldr	r2, [r3, #4]
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	683a      	ldr	r2, [r7, #0]
 8011e76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	68fa      	ldr	r2, [r7, #12]
 8011e7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	683a      	ldr	r2, [r7, #0]
 8011e82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	1c5a      	adds	r2, r3, #1
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	601a      	str	r2, [r3, #0]
}
 8011e94:	bf00      	nop
 8011e96:	3714      	adds	r7, #20
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr

08011ea0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b085      	sub	sp, #20
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	691b      	ldr	r3, [r3, #16]
 8011eac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	6892      	ldr	r2, [r2, #8]
 8011eb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	689b      	ldr	r3, [r3, #8]
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	6852      	ldr	r2, [r2, #4]
 8011ec0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d103      	bne.n	8011ed4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	689a      	ldr	r2, [r3, #8]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	1e5a      	subs	r2, r3, #1
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3714      	adds	r7, #20
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d10a      	bne.n	8011f1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f0c:	f383 8811 	msr	BASEPRI, r3
 8011f10:	f3bf 8f6f 	isb	sy
 8011f14:	f3bf 8f4f 	dsb	sy
 8011f18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011f1a:	bf00      	nop
 8011f1c:	e7fe      	b.n	8011f1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011f1e:	f002 fe49 	bl	8014bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681a      	ldr	r2, [r3, #0]
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f2a:	68f9      	ldr	r1, [r7, #12]
 8011f2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f2e:	fb01 f303 	mul.w	r3, r1, r3
 8011f32:	441a      	add	r2, r3
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681a      	ldr	r2, [r3, #0]
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	68f9      	ldr	r1, [r7, #12]
 8011f52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f54:	fb01 f303 	mul.w	r3, r1, r3
 8011f58:	441a      	add	r2, r3
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	22ff      	movs	r2, #255	; 0xff
 8011f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	22ff      	movs	r2, #255	; 0xff
 8011f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d114      	bne.n	8011f9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	691b      	ldr	r3, [r3, #16]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d01a      	beq.n	8011fb2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3310      	adds	r3, #16
 8011f80:	4618      	mov	r0, r3
 8011f82:	f001 fe03 	bl	8013b8c <xTaskRemoveFromEventList>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d012      	beq.n	8011fb2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011f8c:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <xQueueGenericReset+0xcc>)
 8011f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f92:	601a      	str	r2, [r3, #0]
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	f3bf 8f6f 	isb	sy
 8011f9c:	e009      	b.n	8011fb2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	3310      	adds	r3, #16
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7ff fef2 	bl	8011d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	3324      	adds	r3, #36	; 0x24
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7ff feed 	bl	8011d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011fb2:	f002 fe2f 	bl	8014c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011fb6:	2301      	movs	r3, #1
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}
 8011fc0:	e000ed04 	.word	0xe000ed04

08011fc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b08e      	sub	sp, #56	; 0x38
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10a      	bne.n	8011fee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fdc:	f383 8811 	msr	BASEPRI, r3
 8011fe0:	f3bf 8f6f 	isb	sy
 8011fe4:	f3bf 8f4f 	dsb	sy
 8011fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011fea:	bf00      	nop
 8011fec:	e7fe      	b.n	8011fec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10a      	bne.n	801200a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012006:	bf00      	nop
 8012008:	e7fe      	b.n	8012008 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <xQueueGenericCreateStatic+0x52>
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d001      	beq.n	801201a <xQueueGenericCreateStatic+0x56>
 8012016:	2301      	movs	r3, #1
 8012018:	e000      	b.n	801201c <xQueueGenericCreateStatic+0x58>
 801201a:	2300      	movs	r3, #0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	623b      	str	r3, [r7, #32]
}
 8012032:	bf00      	nop
 8012034:	e7fe      	b.n	8012034 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d102      	bne.n	8012042 <xQueueGenericCreateStatic+0x7e>
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <xQueueGenericCreateStatic+0x82>
 8012042:	2301      	movs	r3, #1
 8012044:	e000      	b.n	8012048 <xQueueGenericCreateStatic+0x84>
 8012046:	2300      	movs	r3, #0
 8012048:	2b00      	cmp	r3, #0
 801204a:	d10a      	bne.n	8012062 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012050:	f383 8811 	msr	BASEPRI, r3
 8012054:	f3bf 8f6f 	isb	sy
 8012058:	f3bf 8f4f 	dsb	sy
 801205c:	61fb      	str	r3, [r7, #28]
}
 801205e:	bf00      	nop
 8012060:	e7fe      	b.n	8012060 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012062:	2350      	movs	r3, #80	; 0x50
 8012064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	2b50      	cmp	r3, #80	; 0x50
 801206a:	d00a      	beq.n	8012082 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801206c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012070:	f383 8811 	msr	BASEPRI, r3
 8012074:	f3bf 8f6f 	isb	sy
 8012078:	f3bf 8f4f 	dsb	sy
 801207c:	61bb      	str	r3, [r7, #24]
}
 801207e:	bf00      	nop
 8012080:	e7fe      	b.n	8012080 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012082:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00d      	beq.n	80120aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012090:	2201      	movs	r2, #1
 8012092:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012096:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	4613      	mov	r3, r2
 80120a0:	687a      	ldr	r2, [r7, #4]
 80120a2:	68b9      	ldr	r1, [r7, #8]
 80120a4:	68f8      	ldr	r0, [r7, #12]
 80120a6:	f000 f83f 	bl	8012128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3730      	adds	r7, #48	; 0x30
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b08a      	sub	sp, #40	; 0x28
 80120b8:	af02      	add	r7, sp, #8
 80120ba:	60f8      	str	r0, [r7, #12]
 80120bc:	60b9      	str	r1, [r7, #8]
 80120be:	4613      	mov	r3, r2
 80120c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d10a      	bne.n	80120de <xQueueGenericCreate+0x2a>
	__asm volatile
 80120c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120cc:	f383 8811 	msr	BASEPRI, r3
 80120d0:	f3bf 8f6f 	isb	sy
 80120d4:	f3bf 8f4f 	dsb	sy
 80120d8:	613b      	str	r3, [r7, #16]
}
 80120da:	bf00      	nop
 80120dc:	e7fe      	b.n	80120dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	fb02 f303 	mul.w	r3, r2, r3
 80120e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	3350      	adds	r3, #80	; 0x50
 80120ec:	4618      	mov	r0, r3
 80120ee:	f002 fe83 	bl	8014df8 <pvPortMalloc>
 80120f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d011      	beq.n	801211e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	3350      	adds	r3, #80	; 0x50
 8012102:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	2200      	movs	r2, #0
 8012108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801210c:	79fa      	ldrb	r2, [r7, #7]
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	9300      	str	r3, [sp, #0]
 8012112:	4613      	mov	r3, r2
 8012114:	697a      	ldr	r2, [r7, #20]
 8012116:	68b9      	ldr	r1, [r7, #8]
 8012118:	68f8      	ldr	r0, [r7, #12]
 801211a:	f000 f805 	bl	8012128 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801211e:	69bb      	ldr	r3, [r7, #24]
	}
 8012120:	4618      	mov	r0, r3
 8012122:	3720      	adds	r7, #32
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d103      	bne.n	8012144 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	601a      	str	r2, [r3, #0]
 8012142:	e002      	b.n	801214a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	68fa      	ldr	r2, [r7, #12]
 801214e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012150:	69bb      	ldr	r3, [r7, #24]
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012156:	2101      	movs	r1, #1
 8012158:	69b8      	ldr	r0, [r7, #24]
 801215a:	f7ff fecb 	bl	8011ef4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	78fa      	ldrb	r2, [r7, #3]
 8012162:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012166:	bf00      	nop
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801216e:	b580      	push	{r7, lr}
 8012170:	b08a      	sub	sp, #40	; 0x28
 8012172:	af02      	add	r7, sp, #8
 8012174:	60f8      	str	r0, [r7, #12]
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10a      	bne.n	8012196 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	f383 8811 	msr	BASEPRI, r3
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	61bb      	str	r3, [r7, #24]
}
 8012192:	bf00      	nop
 8012194:	e7fe      	b.n	8012194 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012196:	68ba      	ldr	r2, [r7, #8]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	429a      	cmp	r2, r3
 801219c:	d90a      	bls.n	80121b4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801219e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a2:	f383 8811 	msr	BASEPRI, r3
 80121a6:	f3bf 8f6f 	isb	sy
 80121aa:	f3bf 8f4f 	dsb	sy
 80121ae:	617b      	str	r3, [r7, #20]
}
 80121b0:	bf00      	nop
 80121b2:	e7fe      	b.n	80121b2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80121b4:	2302      	movs	r3, #2
 80121b6:	9300      	str	r3, [sp, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2200      	movs	r2, #0
 80121bc:	2100      	movs	r1, #0
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f7ff ff00 	bl	8011fc4 <xQueueGenericCreateStatic>
 80121c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80121c6:	69fb      	ldr	r3, [r7, #28]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	68ba      	ldr	r2, [r7, #8]
 80121d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80121d2:	69fb      	ldr	r3, [r7, #28]
	}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3720      	adds	r7, #32
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}

080121dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b086      	sub	sp, #24
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10a      	bne.n	8012202 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80121ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f0:	f383 8811 	msr	BASEPRI, r3
 80121f4:	f3bf 8f6f 	isb	sy
 80121f8:	f3bf 8f4f 	dsb	sy
 80121fc:	613b      	str	r3, [r7, #16]
}
 80121fe:	bf00      	nop
 8012200:	e7fe      	b.n	8012200 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012202:	683a      	ldr	r2, [r7, #0]
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	429a      	cmp	r2, r3
 8012208:	d90a      	bls.n	8012220 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220e:	f383 8811 	msr	BASEPRI, r3
 8012212:	f3bf 8f6f 	isb	sy
 8012216:	f3bf 8f4f 	dsb	sy
 801221a:	60fb      	str	r3, [r7, #12]
}
 801221c:	bf00      	nop
 801221e:	e7fe      	b.n	801221e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012220:	2202      	movs	r2, #2
 8012222:	2100      	movs	r1, #0
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7ff ff45 	bl	80120b4 <xQueueGenericCreate>
 801222a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d002      	beq.n	8012238 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	683a      	ldr	r2, [r7, #0]
 8012236:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012238:	697b      	ldr	r3, [r7, #20]
	}
 801223a:	4618      	mov	r0, r3
 801223c:	3718      	adds	r7, #24
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
	...

08012244 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b08e      	sub	sp, #56	; 0x38
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
 8012250:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012252:	2300      	movs	r3, #0
 8012254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225c:	2b00      	cmp	r3, #0
 801225e:	d10a      	bne.n	8012276 <xQueueGenericSend+0x32>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012272:	bf00      	nop
 8012274:	e7fe      	b.n	8012274 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d103      	bne.n	8012284 <xQueueGenericSend+0x40>
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <xQueueGenericSend+0x44>
 8012284:	2301      	movs	r3, #1
 8012286:	e000      	b.n	801228a <xQueueGenericSend+0x46>
 8012288:	2300      	movs	r3, #0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d10a      	bne.n	80122a4 <xQueueGenericSend+0x60>
	__asm volatile
 801228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012292:	f383 8811 	msr	BASEPRI, r3
 8012296:	f3bf 8f6f 	isb	sy
 801229a:	f3bf 8f4f 	dsb	sy
 801229e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80122a0:	bf00      	nop
 80122a2:	e7fe      	b.n	80122a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	d103      	bne.n	80122b2 <xQueueGenericSend+0x6e>
 80122aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d101      	bne.n	80122b6 <xQueueGenericSend+0x72>
 80122b2:	2301      	movs	r3, #1
 80122b4:	e000      	b.n	80122b8 <xQueueGenericSend+0x74>
 80122b6:	2300      	movs	r3, #0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10a      	bne.n	80122d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80122bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	623b      	str	r3, [r7, #32]
}
 80122ce:	bf00      	nop
 80122d0:	e7fe      	b.n	80122d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122d2:	f001 fe19 	bl	8013f08 <xTaskGetSchedulerState>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d102      	bne.n	80122e2 <xQueueGenericSend+0x9e>
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d101      	bne.n	80122e6 <xQueueGenericSend+0xa2>
 80122e2:	2301      	movs	r3, #1
 80122e4:	e000      	b.n	80122e8 <xQueueGenericSend+0xa4>
 80122e6:	2300      	movs	r3, #0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10a      	bne.n	8012302 <xQueueGenericSend+0xbe>
	__asm volatile
 80122ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f0:	f383 8811 	msr	BASEPRI, r3
 80122f4:	f3bf 8f6f 	isb	sy
 80122f8:	f3bf 8f4f 	dsb	sy
 80122fc:	61fb      	str	r3, [r7, #28]
}
 80122fe:	bf00      	nop
 8012300:	e7fe      	b.n	8012300 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012302:	f002 fc57 	bl	8014bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801230e:	429a      	cmp	r2, r3
 8012310:	d302      	bcc.n	8012318 <xQueueGenericSend+0xd4>
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	2b02      	cmp	r3, #2
 8012316:	d129      	bne.n	801236c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012318:	683a      	ldr	r2, [r7, #0]
 801231a:	68b9      	ldr	r1, [r7, #8]
 801231c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801231e:	f000 fc5e 	bl	8012bde <prvCopyDataToQueue>
 8012322:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012328:	2b00      	cmp	r3, #0
 801232a:	d010      	beq.n	801234e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801232c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801232e:	3324      	adds	r3, #36	; 0x24
 8012330:	4618      	mov	r0, r3
 8012332:	f001 fc2b 	bl	8013b8c <xTaskRemoveFromEventList>
 8012336:	4603      	mov	r3, r0
 8012338:	2b00      	cmp	r3, #0
 801233a:	d013      	beq.n	8012364 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801233c:	4b3f      	ldr	r3, [pc, #252]	; (801243c <xQueueGenericSend+0x1f8>)
 801233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012342:	601a      	str	r2, [r3, #0]
 8012344:	f3bf 8f4f 	dsb	sy
 8012348:	f3bf 8f6f 	isb	sy
 801234c:	e00a      	b.n	8012364 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	2b00      	cmp	r3, #0
 8012352:	d007      	beq.n	8012364 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012354:	4b39      	ldr	r3, [pc, #228]	; (801243c <xQueueGenericSend+0x1f8>)
 8012356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801235a:	601a      	str	r2, [r3, #0]
 801235c:	f3bf 8f4f 	dsb	sy
 8012360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012364:	f002 fc56 	bl	8014c14 <vPortExitCritical>
				return pdPASS;
 8012368:	2301      	movs	r3, #1
 801236a:	e063      	b.n	8012434 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d103      	bne.n	801237a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012372:	f002 fc4f 	bl	8014c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012376:	2300      	movs	r3, #0
 8012378:	e05c      	b.n	8012434 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801237c:	2b00      	cmp	r3, #0
 801237e:	d106      	bne.n	801238e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012380:	f107 0314 	add.w	r3, r7, #20
 8012384:	4618      	mov	r0, r3
 8012386:	f001 fc65 	bl	8013c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801238a:	2301      	movs	r3, #1
 801238c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801238e:	f002 fc41 	bl	8014c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012392:	f001 f9d7 	bl	8013744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012396:	f002 fc0d 	bl	8014bb4 <vPortEnterCritical>
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80123a0:	b25b      	sxtb	r3, r3
 80123a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123a6:	d103      	bne.n	80123b0 <xQueueGenericSend+0x16c>
 80123a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123aa:	2200      	movs	r2, #0
 80123ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80123b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123b6:	b25b      	sxtb	r3, r3
 80123b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123bc:	d103      	bne.n	80123c6 <xQueueGenericSend+0x182>
 80123be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c0:	2200      	movs	r2, #0
 80123c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80123c6:	f002 fc25 	bl	8014c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123ca:	1d3a      	adds	r2, r7, #4
 80123cc:	f107 0314 	add.w	r3, r7, #20
 80123d0:	4611      	mov	r1, r2
 80123d2:	4618      	mov	r0, r3
 80123d4:	f001 fc54 	bl	8013c80 <xTaskCheckForTimeOut>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d124      	bne.n	8012428 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80123de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123e0:	f000 fcf5 	bl	8012dce <prvIsQueueFull>
 80123e4:	4603      	mov	r3, r0
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d018      	beq.n	801241c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	3310      	adds	r3, #16
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	4611      	mov	r1, r2
 80123f2:	4618      	mov	r0, r3
 80123f4:	f001 fb7a 	bl	8013aec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123fa:	f000 fc80 	bl	8012cfe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123fe:	f001 f9af 	bl	8013760 <xTaskResumeAll>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	f47f af7c 	bne.w	8012302 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801240a:	4b0c      	ldr	r3, [pc, #48]	; (801243c <xQueueGenericSend+0x1f8>)
 801240c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012410:	601a      	str	r2, [r3, #0]
 8012412:	f3bf 8f4f 	dsb	sy
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	e772      	b.n	8012302 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801241c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801241e:	f000 fc6e 	bl	8012cfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012422:	f001 f99d 	bl	8013760 <xTaskResumeAll>
 8012426:	e76c      	b.n	8012302 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801242a:	f000 fc68 	bl	8012cfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801242e:	f001 f997 	bl	8013760 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012434:	4618      	mov	r0, r3
 8012436:	3738      	adds	r7, #56	; 0x38
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	e000ed04 	.word	0xe000ed04

08012440 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b090      	sub	sp, #64	; 0x40
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	607a      	str	r2, [r7, #4]
 801244c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012454:	2b00      	cmp	r3, #0
 8012456:	d10a      	bne.n	801246e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245c:	f383 8811 	msr	BASEPRI, r3
 8012460:	f3bf 8f6f 	isb	sy
 8012464:	f3bf 8f4f 	dsb	sy
 8012468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801246a:	bf00      	nop
 801246c:	e7fe      	b.n	801246c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d103      	bne.n	801247c <xQueueGenericSendFromISR+0x3c>
 8012474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012478:	2b00      	cmp	r3, #0
 801247a:	d101      	bne.n	8012480 <xQueueGenericSendFromISR+0x40>
 801247c:	2301      	movs	r3, #1
 801247e:	e000      	b.n	8012482 <xQueueGenericSendFromISR+0x42>
 8012480:	2300      	movs	r3, #0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d10a      	bne.n	801249c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
 8012496:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012498:	bf00      	nop
 801249a:	e7fe      	b.n	801249a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	2b02      	cmp	r3, #2
 80124a0:	d103      	bne.n	80124aa <xQueueGenericSendFromISR+0x6a>
 80124a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a6:	2b01      	cmp	r3, #1
 80124a8:	d101      	bne.n	80124ae <xQueueGenericSendFromISR+0x6e>
 80124aa:	2301      	movs	r3, #1
 80124ac:	e000      	b.n	80124b0 <xQueueGenericSendFromISR+0x70>
 80124ae:	2300      	movs	r3, #0
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10a      	bne.n	80124ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80124b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b8:	f383 8811 	msr	BASEPRI, r3
 80124bc:	f3bf 8f6f 	isb	sy
 80124c0:	f3bf 8f4f 	dsb	sy
 80124c4:	623b      	str	r3, [r7, #32]
}
 80124c6:	bf00      	nop
 80124c8:	e7fe      	b.n	80124c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124ca:	f002 fc55 	bl	8014d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80124ce:	f3ef 8211 	mrs	r2, BASEPRI
 80124d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d6:	f383 8811 	msr	BASEPRI, r3
 80124da:	f3bf 8f6f 	isb	sy
 80124de:	f3bf 8f4f 	dsb	sy
 80124e2:	61fa      	str	r2, [r7, #28]
 80124e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80124e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d302      	bcc.n	80124fc <xQueueGenericSendFromISR+0xbc>
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d12f      	bne.n	801255c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801250a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801250c:	683a      	ldr	r2, [r7, #0]
 801250e:	68b9      	ldr	r1, [r7, #8]
 8012510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012512:	f000 fb64 	bl	8012bde <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012516:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801251a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801251e:	d112      	bne.n	8012546 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012524:	2b00      	cmp	r3, #0
 8012526:	d016      	beq.n	8012556 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	3324      	adds	r3, #36	; 0x24
 801252c:	4618      	mov	r0, r3
 801252e:	f001 fb2d 	bl	8013b8c <xTaskRemoveFromEventList>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d00e      	beq.n	8012556 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2201      	movs	r2, #1
 8012542:	601a      	str	r2, [r3, #0]
 8012544:	e007      	b.n	8012556 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012546:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801254a:	3301      	adds	r3, #1
 801254c:	b2db      	uxtb	r3, r3
 801254e:	b25a      	sxtb	r2, r3
 8012550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012556:	2301      	movs	r3, #1
 8012558:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801255a:	e001      	b.n	8012560 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801255c:	2300      	movs	r3, #0
 801255e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012562:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801256a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801256c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801256e:	4618      	mov	r0, r3
 8012570:	3740      	adds	r7, #64	; 0x40
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012576:	b580      	push	{r7, lr}
 8012578:	b08e      	sub	sp, #56	; 0x38
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012586:	2b00      	cmp	r3, #0
 8012588:	d10a      	bne.n	80125a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801258a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258e:	f383 8811 	msr	BASEPRI, r3
 8012592:	f3bf 8f6f 	isb	sy
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	623b      	str	r3, [r7, #32]
}
 801259c:	bf00      	nop
 801259e:	e7fe      	b.n	801259e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80125a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00a      	beq.n	80125be <xQueueGiveFromISR+0x48>
	__asm volatile
 80125a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ac:	f383 8811 	msr	BASEPRI, r3
 80125b0:	f3bf 8f6f 	isb	sy
 80125b4:	f3bf 8f4f 	dsb	sy
 80125b8:	61fb      	str	r3, [r7, #28]
}
 80125ba:	bf00      	nop
 80125bc:	e7fe      	b.n	80125bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80125be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d103      	bne.n	80125ce <xQueueGiveFromISR+0x58>
 80125c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c8:	689b      	ldr	r3, [r3, #8]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d101      	bne.n	80125d2 <xQueueGiveFromISR+0x5c>
 80125ce:	2301      	movs	r3, #1
 80125d0:	e000      	b.n	80125d4 <xQueueGiveFromISR+0x5e>
 80125d2:	2300      	movs	r3, #0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10a      	bne.n	80125ee <xQueueGiveFromISR+0x78>
	__asm volatile
 80125d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125dc:	f383 8811 	msr	BASEPRI, r3
 80125e0:	f3bf 8f6f 	isb	sy
 80125e4:	f3bf 8f4f 	dsb	sy
 80125e8:	61bb      	str	r3, [r7, #24]
}
 80125ea:	bf00      	nop
 80125ec:	e7fe      	b.n	80125ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125ee:	f002 fbc3 	bl	8014d78 <vPortValidateInterruptPriority>
	__asm volatile
 80125f2:	f3ef 8211 	mrs	r2, BASEPRI
 80125f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125fa:	f383 8811 	msr	BASEPRI, r3
 80125fe:	f3bf 8f6f 	isb	sy
 8012602:	f3bf 8f4f 	dsb	sy
 8012606:	617a      	str	r2, [r7, #20]
 8012608:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801260a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801260c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012612:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801261a:	429a      	cmp	r2, r3
 801261c:	d22b      	bcs.n	8012676 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262a:	1c5a      	adds	r2, r3, #1
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012638:	d112      	bne.n	8012660 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263e:	2b00      	cmp	r3, #0
 8012640:	d016      	beq.n	8012670 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012644:	3324      	adds	r3, #36	; 0x24
 8012646:	4618      	mov	r0, r3
 8012648:	f001 faa0 	bl	8013b8c <xTaskRemoveFromEventList>
 801264c:	4603      	mov	r3, r0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d00e      	beq.n	8012670 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00b      	beq.n	8012670 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	2201      	movs	r2, #1
 801265c:	601a      	str	r2, [r3, #0]
 801265e:	e007      	b.n	8012670 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012664:	3301      	adds	r3, #1
 8012666:	b2db      	uxtb	r3, r3
 8012668:	b25a      	sxtb	r2, r3
 801266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012670:	2301      	movs	r3, #1
 8012672:	637b      	str	r3, [r7, #52]	; 0x34
 8012674:	e001      	b.n	801267a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012676:	2300      	movs	r3, #0
 8012678:	637b      	str	r3, [r7, #52]	; 0x34
 801267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	f383 8811 	msr	BASEPRI, r3
}
 8012684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012688:	4618      	mov	r0, r3
 801268a:	3738      	adds	r7, #56	; 0x38
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b08c      	sub	sp, #48	; 0x30
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801269c:	2300      	movs	r3, #0
 801269e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80126a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d10a      	bne.n	80126c0 <xQueueReceive+0x30>
	__asm volatile
 80126aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ae:	f383 8811 	msr	BASEPRI, r3
 80126b2:	f3bf 8f6f 	isb	sy
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	623b      	str	r3, [r7, #32]
}
 80126bc:	bf00      	nop
 80126be:	e7fe      	b.n	80126be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d103      	bne.n	80126ce <xQueueReceive+0x3e>
 80126c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d101      	bne.n	80126d2 <xQueueReceive+0x42>
 80126ce:	2301      	movs	r3, #1
 80126d0:	e000      	b.n	80126d4 <xQueueReceive+0x44>
 80126d2:	2300      	movs	r3, #0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d10a      	bne.n	80126ee <xQueueReceive+0x5e>
	__asm volatile
 80126d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126dc:	f383 8811 	msr	BASEPRI, r3
 80126e0:	f3bf 8f6f 	isb	sy
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	61fb      	str	r3, [r7, #28]
}
 80126ea:	bf00      	nop
 80126ec:	e7fe      	b.n	80126ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126ee:	f001 fc0b 	bl	8013f08 <xTaskGetSchedulerState>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <xQueueReceive+0x6e>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d101      	bne.n	8012702 <xQueueReceive+0x72>
 80126fe:	2301      	movs	r3, #1
 8012700:	e000      	b.n	8012704 <xQueueReceive+0x74>
 8012702:	2300      	movs	r3, #0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10a      	bne.n	801271e <xQueueReceive+0x8e>
	__asm volatile
 8012708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	61bb      	str	r3, [r7, #24]
}
 801271a:	bf00      	nop
 801271c:	e7fe      	b.n	801271c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801271e:	f002 fa49 	bl	8014bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	2b00      	cmp	r3, #0
 801272c:	d01f      	beq.n	801276e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801272e:	68b9      	ldr	r1, [r7, #8]
 8012730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012732:	f000 fabe 	bl	8012cb2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012738:	1e5a      	subs	r2, r3, #1
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012740:	691b      	ldr	r3, [r3, #16]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d00f      	beq.n	8012766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012748:	3310      	adds	r3, #16
 801274a:	4618      	mov	r0, r3
 801274c:	f001 fa1e 	bl	8013b8c <xTaskRemoveFromEventList>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d007      	beq.n	8012766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012756:	4b3d      	ldr	r3, [pc, #244]	; (801284c <xQueueReceive+0x1bc>)
 8012758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801275c:	601a      	str	r2, [r3, #0]
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012766:	f002 fa55 	bl	8014c14 <vPortExitCritical>
				return pdPASS;
 801276a:	2301      	movs	r3, #1
 801276c:	e069      	b.n	8012842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d103      	bne.n	801277c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012774:	f002 fa4e 	bl	8014c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012778:	2300      	movs	r3, #0
 801277a:	e062      	b.n	8012842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012782:	f107 0310 	add.w	r3, r7, #16
 8012786:	4618      	mov	r0, r3
 8012788:	f001 fa64 	bl	8013c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801278c:	2301      	movs	r3, #1
 801278e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012790:	f002 fa40 	bl	8014c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012794:	f000 ffd6 	bl	8013744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012798:	f002 fa0c 	bl	8014bb4 <vPortEnterCritical>
 801279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801279e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80127a2:	b25b      	sxtb	r3, r3
 80127a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127a8:	d103      	bne.n	80127b2 <xQueueReceive+0x122>
 80127aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ac:	2200      	movs	r2, #0
 80127ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127b8:	b25b      	sxtb	r3, r3
 80127ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127be:	d103      	bne.n	80127c8 <xQueueReceive+0x138>
 80127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c2:	2200      	movs	r2, #0
 80127c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127c8:	f002 fa24 	bl	8014c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127cc:	1d3a      	adds	r2, r7, #4
 80127ce:	f107 0310 	add.w	r3, r7, #16
 80127d2:	4611      	mov	r1, r2
 80127d4:	4618      	mov	r0, r3
 80127d6:	f001 fa53 	bl	8013c80 <xTaskCheckForTimeOut>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d123      	bne.n	8012828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127e2:	f000 fade 	bl	8012da2 <prvIsQueueEmpty>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d017      	beq.n	801281c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ee:	3324      	adds	r3, #36	; 0x24
 80127f0:	687a      	ldr	r2, [r7, #4]
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f001 f979 	bl	8013aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127fc:	f000 fa7f 	bl	8012cfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012800:	f000 ffae 	bl	8013760 <xTaskResumeAll>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d189      	bne.n	801271e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801280a:	4b10      	ldr	r3, [pc, #64]	; (801284c <xQueueReceive+0x1bc>)
 801280c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012810:	601a      	str	r2, [r3, #0]
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	e780      	b.n	801271e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801281c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801281e:	f000 fa6e 	bl	8012cfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012822:	f000 ff9d 	bl	8013760 <xTaskResumeAll>
 8012826:	e77a      	b.n	801271e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801282a:	f000 fa68 	bl	8012cfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801282e:	f000 ff97 	bl	8013760 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012834:	f000 fab5 	bl	8012da2 <prvIsQueueEmpty>
 8012838:	4603      	mov	r3, r0
 801283a:	2b00      	cmp	r3, #0
 801283c:	f43f af6f 	beq.w	801271e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012842:	4618      	mov	r0, r3
 8012844:	3730      	adds	r7, #48	; 0x30
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	e000ed04 	.word	0xe000ed04

08012850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b08e      	sub	sp, #56	; 0x38
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801285a:	2300      	movs	r3, #0
 801285c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012862:	2300      	movs	r3, #0
 8012864:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d10a      	bne.n	8012882 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012870:	f383 8811 	msr	BASEPRI, r3
 8012874:	f3bf 8f6f 	isb	sy
 8012878:	f3bf 8f4f 	dsb	sy
 801287c:	623b      	str	r3, [r7, #32]
}
 801287e:	bf00      	nop
 8012880:	e7fe      	b.n	8012880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012886:	2b00      	cmp	r3, #0
 8012888:	d00a      	beq.n	80128a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801288e:	f383 8811 	msr	BASEPRI, r3
 8012892:	f3bf 8f6f 	isb	sy
 8012896:	f3bf 8f4f 	dsb	sy
 801289a:	61fb      	str	r3, [r7, #28]
}
 801289c:	bf00      	nop
 801289e:	e7fe      	b.n	801289e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80128a0:	f001 fb32 	bl	8013f08 <xTaskGetSchedulerState>
 80128a4:	4603      	mov	r3, r0
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d102      	bne.n	80128b0 <xQueueSemaphoreTake+0x60>
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d101      	bne.n	80128b4 <xQueueSemaphoreTake+0x64>
 80128b0:	2301      	movs	r3, #1
 80128b2:	e000      	b.n	80128b6 <xQueueSemaphoreTake+0x66>
 80128b4:	2300      	movs	r3, #0
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d10a      	bne.n	80128d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80128ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128be:	f383 8811 	msr	BASEPRI, r3
 80128c2:	f3bf 8f6f 	isb	sy
 80128c6:	f3bf 8f4f 	dsb	sy
 80128ca:	61bb      	str	r3, [r7, #24]
}
 80128cc:	bf00      	nop
 80128ce:	e7fe      	b.n	80128ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128d0:	f002 f970 	bl	8014bb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80128da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d024      	beq.n	801292a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80128e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e2:	1e5a      	subs	r2, r3, #1
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d104      	bne.n	80128fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80128f0:	f001 fc80 	bl	80141f4 <pvTaskIncrementMutexHeldCount>
 80128f4:	4602      	mov	r2, r0
 80128f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00f      	beq.n	8012922 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012904:	3310      	adds	r3, #16
 8012906:	4618      	mov	r0, r3
 8012908:	f001 f940 	bl	8013b8c <xTaskRemoveFromEventList>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d007      	beq.n	8012922 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012912:	4b54      	ldr	r3, [pc, #336]	; (8012a64 <xQueueSemaphoreTake+0x214>)
 8012914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012918:	601a      	str	r2, [r3, #0]
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012922:	f002 f977 	bl	8014c14 <vPortExitCritical>
				return pdPASS;
 8012926:	2301      	movs	r3, #1
 8012928:	e097      	b.n	8012a5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d111      	bne.n	8012954 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00a      	beq.n	801294c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293a:	f383 8811 	msr	BASEPRI, r3
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f3bf 8f4f 	dsb	sy
 8012946:	617b      	str	r3, [r7, #20]
}
 8012948:	bf00      	nop
 801294a:	e7fe      	b.n	801294a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801294c:	f002 f962 	bl	8014c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012950:	2300      	movs	r3, #0
 8012952:	e082      	b.n	8012a5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012956:	2b00      	cmp	r3, #0
 8012958:	d106      	bne.n	8012968 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801295a:	f107 030c 	add.w	r3, r7, #12
 801295e:	4618      	mov	r0, r3
 8012960:	f001 f978 	bl	8013c54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012964:	2301      	movs	r3, #1
 8012966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012968:	f002 f954 	bl	8014c14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801296c:	f000 feea 	bl	8013744 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012970:	f002 f920 	bl	8014bb4 <vPortEnterCritical>
 8012974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801297a:	b25b      	sxtb	r3, r3
 801297c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012980:	d103      	bne.n	801298a <xQueueSemaphoreTake+0x13a>
 8012982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012984:	2200      	movs	r2, #0
 8012986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012990:	b25b      	sxtb	r3, r3
 8012992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012996:	d103      	bne.n	80129a0 <xQueueSemaphoreTake+0x150>
 8012998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299a:	2200      	movs	r2, #0
 801299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129a0:	f002 f938 	bl	8014c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80129a4:	463a      	mov	r2, r7
 80129a6:	f107 030c 	add.w	r3, r7, #12
 80129aa:	4611      	mov	r1, r2
 80129ac:	4618      	mov	r0, r3
 80129ae:	f001 f967 	bl	8013c80 <xTaskCheckForTimeOut>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d132      	bne.n	8012a1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129ba:	f000 f9f2 	bl	8012da2 <prvIsQueueEmpty>
 80129be:	4603      	mov	r3, r0
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d026      	beq.n	8012a12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80129cc:	f002 f8f2 	bl	8014bb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80129d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d2:	689b      	ldr	r3, [r3, #8]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f001 fab5 	bl	8013f44 <xTaskPriorityInherit>
 80129da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80129dc:	f002 f91a 	bl	8014c14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80129e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e2:	3324      	adds	r3, #36	; 0x24
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	4611      	mov	r1, r2
 80129e8:	4618      	mov	r0, r3
 80129ea:	f001 f87f 	bl	8013aec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80129ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129f0:	f000 f985 	bl	8012cfe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129f4:	f000 feb4 	bl	8013760 <xTaskResumeAll>
 80129f8:	4603      	mov	r3, r0
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f47f af68 	bne.w	80128d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012a00:	4b18      	ldr	r3, [pc, #96]	; (8012a64 <xQueueSemaphoreTake+0x214>)
 8012a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a06:	601a      	str	r2, [r3, #0]
 8012a08:	f3bf 8f4f 	dsb	sy
 8012a0c:	f3bf 8f6f 	isb	sy
 8012a10:	e75e      	b.n	80128d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a14:	f000 f973 	bl	8012cfe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012a18:	f000 fea2 	bl	8013760 <xTaskResumeAll>
 8012a1c:	e758      	b.n	80128d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a20:	f000 f96d 	bl	8012cfe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012a24:	f000 fe9c 	bl	8013760 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a2a:	f000 f9ba 	bl	8012da2 <prvIsQueueEmpty>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f43f af4d 	beq.w	80128d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d00d      	beq.n	8012a58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012a3c:	f002 f8ba 	bl	8014bb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a42:	f000 f8b4 	bl	8012bae <prvGetDisinheritPriorityAfterTimeout>
 8012a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f001 fb4e 	bl	80140f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012a54:	f002 f8de 	bl	8014c14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3738      	adds	r7, #56	; 0x38
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	e000ed04 	.word	0xe000ed04

08012a68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b08e      	sub	sp, #56	; 0x38
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	60f8      	str	r0, [r7, #12]
 8012a70:	60b9      	str	r1, [r7, #8]
 8012a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d10a      	bne.n	8012a94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a82:	f383 8811 	msr	BASEPRI, r3
 8012a86:	f3bf 8f6f 	isb	sy
 8012a8a:	f3bf 8f4f 	dsb	sy
 8012a8e:	623b      	str	r3, [r7, #32]
}
 8012a90:	bf00      	nop
 8012a92:	e7fe      	b.n	8012a92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d103      	bne.n	8012aa2 <xQueueReceiveFromISR+0x3a>
 8012a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d101      	bne.n	8012aa6 <xQueueReceiveFromISR+0x3e>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <xQueueReceiveFromISR+0x40>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d10a      	bne.n	8012ac2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab0:	f383 8811 	msr	BASEPRI, r3
 8012ab4:	f3bf 8f6f 	isb	sy
 8012ab8:	f3bf 8f4f 	dsb	sy
 8012abc:	61fb      	str	r3, [r7, #28]
}
 8012abe:	bf00      	nop
 8012ac0:	e7fe      	b.n	8012ac0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ac2:	f002 f959 	bl	8014d78 <vPortValidateInterruptPriority>
	__asm volatile
 8012ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8012aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ace:	f383 8811 	msr	BASEPRI, r3
 8012ad2:	f3bf 8f6f 	isb	sy
 8012ad6:	f3bf 8f4f 	dsb	sy
 8012ada:	61ba      	str	r2, [r7, #24]
 8012adc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d02f      	beq.n	8012b4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012af8:	68b9      	ldr	r1, [r7, #8]
 8012afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012afc:	f000 f8d9 	bl	8012cb2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b02:	1e5a      	subs	r2, r3, #1
 8012b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012b08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b10:	d112      	bne.n	8012b38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d016      	beq.n	8012b48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b1c:	3310      	adds	r3, #16
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f001 f834 	bl	8013b8c <xTaskRemoveFromEventList>
 8012b24:	4603      	mov	r3, r0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d00e      	beq.n	8012b48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00b      	beq.n	8012b48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	601a      	str	r2, [r3, #0]
 8012b36:	e007      	b.n	8012b48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	b2db      	uxtb	r3, r3
 8012b40:	b25a      	sxtb	r2, r3
 8012b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8012b4c:	e001      	b.n	8012b52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	637b      	str	r3, [r7, #52]	; 0x34
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	f383 8811 	msr	BASEPRI, r3
}
 8012b5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3738      	adds	r7, #56	; 0x38
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10a      	bne.n	8012b90 <vQueueDelete+0x28>
	__asm volatile
 8012b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b7e:	f383 8811 	msr	BASEPRI, r3
 8012b82:	f3bf 8f6f 	isb	sy
 8012b86:	f3bf 8f4f 	dsb	sy
 8012b8a:	60bb      	str	r3, [r7, #8]
}
 8012b8c:	bf00      	nop
 8012b8e:	e7fe      	b.n	8012b8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f000 f95f 	bl	8012e54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d102      	bne.n	8012ba6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012ba0:	68f8      	ldr	r0, [r7, #12]
 8012ba2:	f002 f9f5 	bl	8014f90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012ba6:	bf00      	nop
 8012ba8:	3710      	adds	r7, #16
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}

08012bae <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012bae:	b480      	push	{r7}
 8012bb0:	b085      	sub	sp, #20
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d006      	beq.n	8012bcc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012bc8:	60fb      	str	r3, [r7, #12]
 8012bca:	e001      	b.n	8012bd0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012bd0:	68fb      	ldr	r3, [r7, #12]
	}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b086      	sub	sp, #24
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	60b9      	str	r1, [r7, #8]
 8012be8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012bea:	2300      	movs	r3, #0
 8012bec:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bf2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10d      	bne.n	8012c18 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d14d      	bne.n	8012ca0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f001 fa03 	bl	8014014 <xTaskPriorityDisinherit>
 8012c0e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2200      	movs	r2, #0
 8012c14:	609a      	str	r2, [r3, #8]
 8012c16:	e043      	b.n	8012ca0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d119      	bne.n	8012c52 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6858      	ldr	r0, [r3, #4]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c26:	461a      	mov	r2, r3
 8012c28:	68b9      	ldr	r1, [r7, #8]
 8012c2a:	f002 faf9 	bl	8015220 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	685a      	ldr	r2, [r3, #4]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c36:	441a      	add	r2, r3
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	685a      	ldr	r2, [r3, #4]
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	689b      	ldr	r3, [r3, #8]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d32b      	bcc.n	8012ca0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	605a      	str	r2, [r3, #4]
 8012c50:	e026      	b.n	8012ca0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	68d8      	ldr	r0, [r3, #12]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	68b9      	ldr	r1, [r7, #8]
 8012c5e:	f002 fadf 	bl	8015220 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	68da      	ldr	r2, [r3, #12]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c6a:	425b      	negs	r3, r3
 8012c6c:	441a      	add	r2, r3
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	68da      	ldr	r2, [r3, #12]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d207      	bcs.n	8012c8e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	689a      	ldr	r2, [r3, #8]
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c86:	425b      	negs	r3, r3
 8012c88:	441a      	add	r2, r3
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2b02      	cmp	r3, #2
 8012c92:	d105      	bne.n	8012ca0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d002      	beq.n	8012ca0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	1c5a      	adds	r2, r3, #1
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012ca8:	697b      	ldr	r3, [r7, #20]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3718      	adds	r7, #24
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}

08012cb2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b082      	sub	sp, #8
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
 8012cba:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d018      	beq.n	8012cf6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	68da      	ldr	r2, [r3, #12]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ccc:	441a      	add	r2, r3
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	68da      	ldr	r2, [r3, #12]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	689b      	ldr	r3, [r3, #8]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d303      	bcc.n	8012ce6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681a      	ldr	r2, [r3, #0]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	68d9      	ldr	r1, [r3, #12]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cee:	461a      	mov	r2, r3
 8012cf0:	6838      	ldr	r0, [r7, #0]
 8012cf2:	f002 fa95 	bl	8015220 <memcpy>
	}
}
 8012cf6:	bf00      	nop
 8012cf8:	3708      	adds	r7, #8
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b084      	sub	sp, #16
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012d06:	f001 ff55 	bl	8014bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d10:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d12:	e011      	b.n	8012d38 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d012      	beq.n	8012d42 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	3324      	adds	r3, #36	; 0x24
 8012d20:	4618      	mov	r0, r3
 8012d22:	f000 ff33 	bl	8013b8c <xTaskRemoveFromEventList>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d001      	beq.n	8012d30 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012d2c:	f001 f80a 	bl	8013d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012d30:	7bfb      	ldrb	r3, [r7, #15]
 8012d32:	3b01      	subs	r3, #1
 8012d34:	b2db      	uxtb	r3, r3
 8012d36:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	dce9      	bgt.n	8012d14 <prvUnlockQueue+0x16>
 8012d40:	e000      	b.n	8012d44 <prvUnlockQueue+0x46>
					break;
 8012d42:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	22ff      	movs	r2, #255	; 0xff
 8012d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012d4c:	f001 ff62 	bl	8014c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012d50:	f001 ff30 	bl	8014bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d5a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d5c:	e011      	b.n	8012d82 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	691b      	ldr	r3, [r3, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d012      	beq.n	8012d8c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	3310      	adds	r3, #16
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 ff0e 	bl	8013b8c <xTaskRemoveFromEventList>
 8012d70:	4603      	mov	r3, r0
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d001      	beq.n	8012d7a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012d76:	f000 ffe5 	bl	8013d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012d7a:	7bbb      	ldrb	r3, [r7, #14]
 8012d7c:	3b01      	subs	r3, #1
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	dce9      	bgt.n	8012d5e <prvUnlockQueue+0x60>
 8012d8a:	e000      	b.n	8012d8e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012d8c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	22ff      	movs	r2, #255	; 0xff
 8012d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012d96:	f001 ff3d 	bl	8014c14 <vPortExitCritical>
}
 8012d9a:	bf00      	nop
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b084      	sub	sp, #16
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012daa:	f001 ff03 	bl	8014bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d102      	bne.n	8012dbc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012db6:	2301      	movs	r3, #1
 8012db8:	60fb      	str	r3, [r7, #12]
 8012dba:	e001      	b.n	8012dc0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012dc0:	f001 ff28 	bl	8014c14 <vPortExitCritical>

	return xReturn;
 8012dc4:	68fb      	ldr	r3, [r7, #12]
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}

08012dce <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012dce:	b580      	push	{r7, lr}
 8012dd0:	b084      	sub	sp, #16
 8012dd2:	af00      	add	r7, sp, #0
 8012dd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012dd6:	f001 feed 	bl	8014bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d102      	bne.n	8012dec <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012de6:	2301      	movs	r3, #1
 8012de8:	60fb      	str	r3, [r7, #12]
 8012dea:	e001      	b.n	8012df0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012dec:	2300      	movs	r3, #0
 8012dee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012df0:	f001 ff10 	bl	8014c14 <vPortExitCritical>

	return xReturn;
 8012df4:	68fb      	ldr	r3, [r7, #12]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
	...

08012e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012e00:	b480      	push	{r7}
 8012e02:	b085      	sub	sp, #20
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
 8012e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	60fb      	str	r3, [r7, #12]
 8012e0e:	e014      	b.n	8012e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012e10:	4a0f      	ldr	r2, [pc, #60]	; (8012e50 <vQueueAddToRegistry+0x50>)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d10b      	bne.n	8012e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012e1c:	490c      	ldr	r1, [pc, #48]	; (8012e50 <vQueueAddToRegistry+0x50>)
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	683a      	ldr	r2, [r7, #0]
 8012e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012e26:	4a0a      	ldr	r2, [pc, #40]	; (8012e50 <vQueueAddToRegistry+0x50>)
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	00db      	lsls	r3, r3, #3
 8012e2c:	4413      	add	r3, r2
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012e32:	e006      	b.n	8012e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	3301      	adds	r3, #1
 8012e38:	60fb      	str	r3, [r7, #12]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	2b07      	cmp	r3, #7
 8012e3e:	d9e7      	bls.n	8012e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012e40:	bf00      	nop
 8012e42:	bf00      	nop
 8012e44:	3714      	adds	r7, #20
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	20008af0 	.word	0x20008af0

08012e54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012e54:	b480      	push	{r7}
 8012e56:	b085      	sub	sp, #20
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	60fb      	str	r3, [r7, #12]
 8012e60:	e016      	b.n	8012e90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012e62:	4a10      	ldr	r2, [pc, #64]	; (8012ea4 <vQueueUnregisterQueue+0x50>)
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	4413      	add	r3, r2
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d10b      	bne.n	8012e8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012e72:	4a0c      	ldr	r2, [pc, #48]	; (8012ea4 <vQueueUnregisterQueue+0x50>)
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2100      	movs	r1, #0
 8012e78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012e7c:	4a09      	ldr	r2, [pc, #36]	; (8012ea4 <vQueueUnregisterQueue+0x50>)
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	00db      	lsls	r3, r3, #3
 8012e82:	4413      	add	r3, r2
 8012e84:	2200      	movs	r2, #0
 8012e86:	605a      	str	r2, [r3, #4]
				break;
 8012e88:	e006      	b.n	8012e98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	60fb      	str	r3, [r7, #12]
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2b07      	cmp	r3, #7
 8012e94:	d9e5      	bls.n	8012e62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012e96:	bf00      	nop
 8012e98:	bf00      	nop
 8012e9a:	3714      	adds	r7, #20
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea2:	4770      	bx	lr
 8012ea4:	20008af0 	.word	0x20008af0

08012ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b086      	sub	sp, #24
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012eb8:	f001 fe7c 	bl	8014bb4 <vPortEnterCritical>
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ec2:	b25b      	sxtb	r3, r3
 8012ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ec8:	d103      	bne.n	8012ed2 <vQueueWaitForMessageRestricted+0x2a>
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ed8:	b25b      	sxtb	r3, r3
 8012eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012ede:	d103      	bne.n	8012ee8 <vQueueWaitForMessageRestricted+0x40>
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ee8:	f001 fe94 	bl	8014c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d106      	bne.n	8012f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	3324      	adds	r3, #36	; 0x24
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	68b9      	ldr	r1, [r7, #8]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 fe19 	bl	8013b34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012f02:	6978      	ldr	r0, [r7, #20]
 8012f04:	f7ff fefb 	bl	8012cfe <prvUnlockQueue>
	}
 8012f08:	bf00      	nop
 8012f0a:	3718      	adds	r7, #24
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08e      	sub	sp, #56	; 0x38
 8012f14:	af04      	add	r7, sp, #16
 8012f16:	60f8      	str	r0, [r7, #12]
 8012f18:	60b9      	str	r1, [r7, #8]
 8012f1a:	607a      	str	r2, [r7, #4]
 8012f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	623b      	str	r3, [r7, #32]
}
 8012f36:	bf00      	nop
 8012f38:	e7fe      	b.n	8012f38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d10a      	bne.n	8012f56 <xTaskCreateStatic+0x46>
	__asm volatile
 8012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f44:	f383 8811 	msr	BASEPRI, r3
 8012f48:	f3bf 8f6f 	isb	sy
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	61fb      	str	r3, [r7, #28]
}
 8012f52:	bf00      	nop
 8012f54:	e7fe      	b.n	8012f54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012f56:	235c      	movs	r3, #92	; 0x5c
 8012f58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	2b5c      	cmp	r3, #92	; 0x5c
 8012f5e:	d00a      	beq.n	8012f76 <xTaskCreateStatic+0x66>
	__asm volatile
 8012f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f64:	f383 8811 	msr	BASEPRI, r3
 8012f68:	f3bf 8f6f 	isb	sy
 8012f6c:	f3bf 8f4f 	dsb	sy
 8012f70:	61bb      	str	r3, [r7, #24]
}
 8012f72:	bf00      	nop
 8012f74:	e7fe      	b.n	8012f74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012f76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d01e      	beq.n	8012fbc <xTaskCreateStatic+0xac>
 8012f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d01b      	beq.n	8012fbc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f90:	2202      	movs	r2, #2
 8012f92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012f96:	2300      	movs	r3, #0
 8012f98:	9303      	str	r3, [sp, #12]
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	f107 0314 	add.w	r3, r7, #20
 8012fa2:	9301      	str	r3, [sp, #4]
 8012fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa6:	9300      	str	r3, [sp, #0]
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	68b9      	ldr	r1, [r7, #8]
 8012fae:	68f8      	ldr	r0, [r7, #12]
 8012fb0:	f000 f850 	bl	8013054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fb6:	f000 f8dd 	bl	8013174 <prvAddNewTaskToReadyList>
 8012fba:	e001      	b.n	8012fc0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012fc0:	697b      	ldr	r3, [r7, #20]
	}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3728      	adds	r7, #40	; 0x28
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b08c      	sub	sp, #48	; 0x30
 8012fce:	af04      	add	r7, sp, #16
 8012fd0:	60f8      	str	r0, [r7, #12]
 8012fd2:	60b9      	str	r1, [r7, #8]
 8012fd4:	603b      	str	r3, [r7, #0]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012fda:	88fb      	ldrh	r3, [r7, #6]
 8012fdc:	009b      	lsls	r3, r3, #2
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f001 ff0a 	bl	8014df8 <pvPortMalloc>
 8012fe4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d00e      	beq.n	801300a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012fec:	205c      	movs	r0, #92	; 0x5c
 8012fee:	f001 ff03 	bl	8014df8 <pvPortMalloc>
 8012ff2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012ff4:	69fb      	ldr	r3, [r7, #28]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d003      	beq.n	8013002 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	697a      	ldr	r2, [r7, #20]
 8012ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8013000:	e005      	b.n	801300e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013002:	6978      	ldr	r0, [r7, #20]
 8013004:	f001 ffc4 	bl	8014f90 <vPortFree>
 8013008:	e001      	b.n	801300e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801300a:	2300      	movs	r3, #0
 801300c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d017      	beq.n	8013044 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013014:	69fb      	ldr	r3, [r7, #28]
 8013016:	2200      	movs	r2, #0
 8013018:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801301c:	88fa      	ldrh	r2, [r7, #6]
 801301e:	2300      	movs	r3, #0
 8013020:	9303      	str	r3, [sp, #12]
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	9302      	str	r3, [sp, #8]
 8013026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013028:	9301      	str	r3, [sp, #4]
 801302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302c:	9300      	str	r3, [sp, #0]
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	68b9      	ldr	r1, [r7, #8]
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f000 f80e 	bl	8013054 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013038:	69f8      	ldr	r0, [r7, #28]
 801303a:	f000 f89b 	bl	8013174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801303e:	2301      	movs	r3, #1
 8013040:	61bb      	str	r3, [r7, #24]
 8013042:	e002      	b.n	801304a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013048:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801304a:	69bb      	ldr	r3, [r7, #24]
	}
 801304c:	4618      	mov	r0, r3
 801304e:	3720      	adds	r7, #32
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b088      	sub	sp, #32
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	60b9      	str	r1, [r7, #8]
 801305e:	607a      	str	r2, [r7, #4]
 8013060:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013064:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	461a      	mov	r2, r3
 801306c:	21a5      	movs	r1, #165	; 0xa5
 801306e:	f002 f8e5 	bl	801523c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801307c:	3b01      	subs	r3, #1
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4413      	add	r3, r2
 8013082:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	f023 0307 	bic.w	r3, r3, #7
 801308a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	f003 0307 	and.w	r3, r3, #7
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00a      	beq.n	80130ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8013096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	617b      	str	r3, [r7, #20]
}
 80130a8:	bf00      	nop
 80130aa:	e7fe      	b.n	80130aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80130ac:	68bb      	ldr	r3, [r7, #8]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d01f      	beq.n	80130f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130b2:	2300      	movs	r3, #0
 80130b4:	61fb      	str	r3, [r7, #28]
 80130b6:	e012      	b.n	80130de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	4413      	add	r3, r2
 80130be:	7819      	ldrb	r1, [r3, #0]
 80130c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	4413      	add	r3, r2
 80130c6:	3334      	adds	r3, #52	; 0x34
 80130c8:	460a      	mov	r2, r1
 80130ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80130cc:	68ba      	ldr	r2, [r7, #8]
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	4413      	add	r3, r2
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d006      	beq.n	80130e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	3301      	adds	r3, #1
 80130dc:	61fb      	str	r3, [r7, #28]
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	2b0f      	cmp	r3, #15
 80130e2:	d9e9      	bls.n	80130b8 <prvInitialiseNewTask+0x64>
 80130e4:	e000      	b.n	80130e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80130e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80130e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ea:	2200      	movs	r2, #0
 80130ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80130f0:	e003      	b.n	80130fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80130f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f4:	2200      	movs	r2, #0
 80130f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80130fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fc:	2b37      	cmp	r3, #55	; 0x37
 80130fe:	d901      	bls.n	8013104 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013100:	2337      	movs	r3, #55	; 0x37
 8013102:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013108:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801310e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013112:	2200      	movs	r2, #0
 8013114:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013118:	3304      	adds	r3, #4
 801311a:	4618      	mov	r0, r3
 801311c:	f7fe fe56 	bl	8011dcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013122:	3318      	adds	r3, #24
 8013124:	4618      	mov	r0, r3
 8013126:	f7fe fe51 	bl	8011dcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801312e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801313e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013142:	2200      	movs	r2, #0
 8013144:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013148:	2200      	movs	r2, #0
 801314a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801314e:	683a      	ldr	r2, [r7, #0]
 8013150:	68f9      	ldr	r1, [r7, #12]
 8013152:	69b8      	ldr	r0, [r7, #24]
 8013154:	f001 fc04 	bl	8014960 <pxPortInitialiseStack>
 8013158:	4602      	mov	r2, r0
 801315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013160:	2b00      	cmp	r3, #0
 8013162:	d002      	beq.n	801316a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801316a:	bf00      	nop
 801316c:	3720      	adds	r7, #32
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
	...

08013174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801317c:	f001 fd1a 	bl	8014bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013180:	4b2d      	ldr	r3, [pc, #180]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	3301      	adds	r3, #1
 8013186:	4a2c      	ldr	r2, [pc, #176]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 8013188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801318a:	4b2c      	ldr	r3, [pc, #176]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d109      	bne.n	80131a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013192:	4a2a      	ldr	r2, [pc, #168]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013198:	4b27      	ldr	r3, [pc, #156]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d110      	bne.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80131a0:	f000 fdf4 	bl	8013d8c <prvInitialiseTaskLists>
 80131a4:	e00d      	b.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80131a6:	4b26      	ldr	r3, [pc, #152]	; (8013240 <prvAddNewTaskToReadyList+0xcc>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d109      	bne.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80131ae:	4b23      	ldr	r3, [pc, #140]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d802      	bhi.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80131bc:	4a1f      	ldr	r2, [pc, #124]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80131c2:	4b20      	ldr	r3, [pc, #128]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	3301      	adds	r3, #1
 80131c8:	4a1e      	ldr	r2, [pc, #120]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80131cc:	4b1d      	ldr	r3, [pc, #116]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131d8:	4b1b      	ldr	r3, [pc, #108]	; (8013248 <prvAddNewTaskToReadyList+0xd4>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d903      	bls.n	80131e8 <prvAddNewTaskToReadyList+0x74>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e4:	4a18      	ldr	r2, [pc, #96]	; (8013248 <prvAddNewTaskToReadyList+0xd4>)
 80131e6:	6013      	str	r3, [r2, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131ec:	4613      	mov	r3, r2
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4413      	add	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4a15      	ldr	r2, [pc, #84]	; (801324c <prvAddNewTaskToReadyList+0xd8>)
 80131f6:	441a      	add	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3304      	adds	r3, #4
 80131fc:	4619      	mov	r1, r3
 80131fe:	4610      	mov	r0, r2
 8013200:	f7fe fdf1 	bl	8011de6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013204:	f001 fd06 	bl	8014c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013208:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <prvAddNewTaskToReadyList+0xcc>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00e      	beq.n	801322e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013210:	4b0a      	ldr	r3, [pc, #40]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321a:	429a      	cmp	r2, r3
 801321c:	d207      	bcs.n	801322e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801321e:	4b0c      	ldr	r3, [pc, #48]	; (8013250 <prvAddNewTaskToReadyList+0xdc>)
 8013220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013224:	601a      	str	r2, [r3, #0]
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801322e:	bf00      	nop
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	20002510 	.word	0x20002510
 801323c:	2000203c 	.word	0x2000203c
 8013240:	2000251c 	.word	0x2000251c
 8013244:	2000252c 	.word	0x2000252c
 8013248:	20002518 	.word	0x20002518
 801324c:	20002040 	.word	0x20002040
 8013250:	e000ed04 	.word	0xe000ed04

08013254 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801325c:	f001 fcaa 	bl	8014bb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d102      	bne.n	801326c <vTaskDelete+0x18>
 8013266:	4b2c      	ldr	r3, [pc, #176]	; (8013318 <vTaskDelete+0xc4>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	e000      	b.n	801326e <vTaskDelete+0x1a>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	3304      	adds	r3, #4
 8013274:	4618      	mov	r0, r3
 8013276:	f7fe fe13 	bl	8011ea0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801327e:	2b00      	cmp	r3, #0
 8013280:	d004      	beq.n	801328c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	3318      	adds	r3, #24
 8013286:	4618      	mov	r0, r3
 8013288:	f7fe fe0a 	bl	8011ea0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801328c:	4b23      	ldr	r3, [pc, #140]	; (801331c <vTaskDelete+0xc8>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	3301      	adds	r3, #1
 8013292:	4a22      	ldr	r2, [pc, #136]	; (801331c <vTaskDelete+0xc8>)
 8013294:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013296:	4b20      	ldr	r3, [pc, #128]	; (8013318 <vTaskDelete+0xc4>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	68fa      	ldr	r2, [r7, #12]
 801329c:	429a      	cmp	r2, r3
 801329e:	d10b      	bne.n	80132b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	3304      	adds	r3, #4
 80132a4:	4619      	mov	r1, r3
 80132a6:	481e      	ldr	r0, [pc, #120]	; (8013320 <vTaskDelete+0xcc>)
 80132a8:	f7fe fd9d 	bl	8011de6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80132ac:	4b1d      	ldr	r3, [pc, #116]	; (8013324 <vTaskDelete+0xd0>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3301      	adds	r3, #1
 80132b2:	4a1c      	ldr	r2, [pc, #112]	; (8013324 <vTaskDelete+0xd0>)
 80132b4:	6013      	str	r3, [r2, #0]
 80132b6:	e009      	b.n	80132cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80132b8:	4b1b      	ldr	r3, [pc, #108]	; (8013328 <vTaskDelete+0xd4>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	3b01      	subs	r3, #1
 80132be:	4a1a      	ldr	r2, [pc, #104]	; (8013328 <vTaskDelete+0xd4>)
 80132c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f000 fdd0 	bl	8013e68 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80132c8:	f000 fdfe 	bl	8013ec8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80132cc:	f001 fca2 	bl	8014c14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80132d0:	4b16      	ldr	r3, [pc, #88]	; (801332c <vTaskDelete+0xd8>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d01b      	beq.n	8013310 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80132d8:	4b0f      	ldr	r3, [pc, #60]	; (8013318 <vTaskDelete+0xc4>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d116      	bne.n	8013310 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80132e2:	4b13      	ldr	r3, [pc, #76]	; (8013330 <vTaskDelete+0xdc>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00a      	beq.n	8013300 <vTaskDelete+0xac>
	__asm volatile
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	60bb      	str	r3, [r7, #8]
}
 80132fc:	bf00      	nop
 80132fe:	e7fe      	b.n	80132fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8013300:	4b0c      	ldr	r3, [pc, #48]	; (8013334 <vTaskDelete+0xe0>)
 8013302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013306:	601a      	str	r2, [r3, #0]
 8013308:	f3bf 8f4f 	dsb	sy
 801330c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013310:	bf00      	nop
 8013312:	3710      	adds	r7, #16
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	2000203c 	.word	0x2000203c
 801331c:	2000252c 	.word	0x2000252c
 8013320:	200024e4 	.word	0x200024e4
 8013324:	200024f8 	.word	0x200024f8
 8013328:	20002510 	.word	0x20002510
 801332c:	2000251c 	.word	0x2000251c
 8013330:	20002538 	.word	0x20002538
 8013334:	e000ed04 	.word	0xe000ed04

08013338 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013340:	2300      	movs	r3, #0
 8013342:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d017      	beq.n	801337a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801334a:	4b13      	ldr	r3, [pc, #76]	; (8013398 <vTaskDelay+0x60>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00a      	beq.n	8013368 <vTaskDelay+0x30>
	__asm volatile
 8013352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013356:	f383 8811 	msr	BASEPRI, r3
 801335a:	f3bf 8f6f 	isb	sy
 801335e:	f3bf 8f4f 	dsb	sy
 8013362:	60bb      	str	r3, [r7, #8]
}
 8013364:	bf00      	nop
 8013366:	e7fe      	b.n	8013366 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013368:	f000 f9ec 	bl	8013744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801336c:	2100      	movs	r1, #0
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 ff54 	bl	801421c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013374:	f000 f9f4 	bl	8013760 <xTaskResumeAll>
 8013378:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d107      	bne.n	8013390 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013380:	4b06      	ldr	r3, [pc, #24]	; (801339c <vTaskDelay+0x64>)
 8013382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013386:	601a      	str	r2, [r3, #0]
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013390:	bf00      	nop
 8013392:	3710      	adds	r7, #16
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	20002538 	.word	0x20002538
 801339c:	e000ed04 	.word	0xe000ed04

080133a0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d10a      	bne.n	80133c8 <eTaskGetState+0x28>
	__asm volatile
 80133b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b6:	f383 8811 	msr	BASEPRI, r3
 80133ba:	f3bf 8f6f 	isb	sy
 80133be:	f3bf 8f4f 	dsb	sy
 80133c2:	60bb      	str	r3, [r7, #8]
}
 80133c4:	bf00      	nop
 80133c6:	e7fe      	b.n	80133c6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80133c8:	4b23      	ldr	r3, [pc, #140]	; (8013458 <eTaskGetState+0xb8>)
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	69ba      	ldr	r2, [r7, #24]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d102      	bne.n	80133d8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80133d2:	2300      	movs	r3, #0
 80133d4:	77fb      	strb	r3, [r7, #31]
 80133d6:	e03a      	b.n	801344e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80133d8:	f001 fbec 	bl	8014bb4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	695b      	ldr	r3, [r3, #20]
 80133e0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80133e2:	4b1e      	ldr	r3, [pc, #120]	; (801345c <eTaskGetState+0xbc>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80133e8:	4b1d      	ldr	r3, [pc, #116]	; (8013460 <eTaskGetState+0xc0>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80133ee:	f001 fc11 	bl	8014c14 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80133f2:	697a      	ldr	r2, [r7, #20]
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d003      	beq.n	8013402 <eTaskGetState+0x62>
 80133fa:	697a      	ldr	r2, [r7, #20]
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	429a      	cmp	r2, r3
 8013400:	d102      	bne.n	8013408 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013402:	2302      	movs	r3, #2
 8013404:	77fb      	strb	r3, [r7, #31]
 8013406:	e022      	b.n	801344e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	4a16      	ldr	r2, [pc, #88]	; (8013464 <eTaskGetState+0xc4>)
 801340c:	4293      	cmp	r3, r2
 801340e:	d112      	bne.n	8013436 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013410:	69bb      	ldr	r3, [r7, #24]
 8013412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013414:	2b00      	cmp	r3, #0
 8013416:	d10b      	bne.n	8013430 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801341e:	b2db      	uxtb	r3, r3
 8013420:	2b01      	cmp	r3, #1
 8013422:	d102      	bne.n	801342a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013424:	2302      	movs	r3, #2
 8013426:	77fb      	strb	r3, [r7, #31]
 8013428:	e011      	b.n	801344e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801342a:	2303      	movs	r3, #3
 801342c:	77fb      	strb	r3, [r7, #31]
 801342e:	e00e      	b.n	801344e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013430:	2302      	movs	r3, #2
 8013432:	77fb      	strb	r3, [r7, #31]
 8013434:	e00b      	b.n	801344e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	4a0b      	ldr	r2, [pc, #44]	; (8013468 <eTaskGetState+0xc8>)
 801343a:	4293      	cmp	r3, r2
 801343c:	d002      	beq.n	8013444 <eTaskGetState+0xa4>
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d102      	bne.n	801344a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013444:	2304      	movs	r3, #4
 8013446:	77fb      	strb	r3, [r7, #31]
 8013448:	e001      	b.n	801344e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801344a:	2301      	movs	r3, #1
 801344c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801344e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013450:	4618      	mov	r0, r3
 8013452:	3720      	adds	r7, #32
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	2000203c 	.word	0x2000203c
 801345c:	200024c8 	.word	0x200024c8
 8013460:	200024cc 	.word	0x200024cc
 8013464:	200024fc 	.word	0x200024fc
 8013468:	200024e4 	.word	0x200024e4

0801346c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801346c:	b580      	push	{r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013474:	f001 fb9e 	bl	8014bb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d102      	bne.n	8013484 <vTaskSuspend+0x18>
 801347e:	4b30      	ldr	r3, [pc, #192]	; (8013540 <vTaskSuspend+0xd4>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	e000      	b.n	8013486 <vTaskSuspend+0x1a>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	3304      	adds	r3, #4
 801348c:	4618      	mov	r0, r3
 801348e:	f7fe fd07 	bl	8011ea0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013496:	2b00      	cmp	r3, #0
 8013498:	d004      	beq.n	80134a4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	3318      	adds	r3, #24
 801349e:	4618      	mov	r0, r3
 80134a0:	f7fe fcfe 	bl	8011ea0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	3304      	adds	r3, #4
 80134a8:	4619      	mov	r1, r3
 80134aa:	4826      	ldr	r0, [pc, #152]	; (8013544 <vTaskSuspend+0xd8>)
 80134ac:	f7fe fc9b 	bl	8011de6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d103      	bne.n	80134c4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2200      	movs	r2, #0
 80134c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80134c4:	f001 fba6 	bl	8014c14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80134c8:	4b1f      	ldr	r3, [pc, #124]	; (8013548 <vTaskSuspend+0xdc>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d005      	beq.n	80134dc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80134d0:	f001 fb70 	bl	8014bb4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80134d4:	f000 fcf8 	bl	8013ec8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80134d8:	f001 fb9c 	bl	8014c14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80134dc:	4b18      	ldr	r3, [pc, #96]	; (8013540 <vTaskSuspend+0xd4>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d127      	bne.n	8013536 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80134e6:	4b18      	ldr	r3, [pc, #96]	; (8013548 <vTaskSuspend+0xdc>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d017      	beq.n	801351e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80134ee:	4b17      	ldr	r3, [pc, #92]	; (801354c <vTaskSuspend+0xe0>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00a      	beq.n	801350c <vTaskSuspend+0xa0>
	__asm volatile
 80134f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fa:	f383 8811 	msr	BASEPRI, r3
 80134fe:	f3bf 8f6f 	isb	sy
 8013502:	f3bf 8f4f 	dsb	sy
 8013506:	60bb      	str	r3, [r7, #8]
}
 8013508:	bf00      	nop
 801350a:	e7fe      	b.n	801350a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801350c:	4b10      	ldr	r3, [pc, #64]	; (8013550 <vTaskSuspend+0xe4>)
 801350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013512:	601a      	str	r2, [r3, #0]
 8013514:	f3bf 8f4f 	dsb	sy
 8013518:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801351c:	e00b      	b.n	8013536 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801351e:	4b09      	ldr	r3, [pc, #36]	; (8013544 <vTaskSuspend+0xd8>)
 8013520:	681a      	ldr	r2, [r3, #0]
 8013522:	4b0c      	ldr	r3, [pc, #48]	; (8013554 <vTaskSuspend+0xe8>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	429a      	cmp	r2, r3
 8013528:	d103      	bne.n	8013532 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801352a:	4b05      	ldr	r3, [pc, #20]	; (8013540 <vTaskSuspend+0xd4>)
 801352c:	2200      	movs	r2, #0
 801352e:	601a      	str	r2, [r3, #0]
	}
 8013530:	e001      	b.n	8013536 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8013532:	f000 fa7d 	bl	8013a30 <vTaskSwitchContext>
	}
 8013536:	bf00      	nop
 8013538:	3710      	adds	r7, #16
 801353a:	46bd      	mov	sp, r7
 801353c:	bd80      	pop	{r7, pc}
 801353e:	bf00      	nop
 8013540:	2000203c 	.word	0x2000203c
 8013544:	200024fc 	.word	0x200024fc
 8013548:	2000251c 	.word	0x2000251c
 801354c:	20002538 	.word	0x20002538
 8013550:	e000ed04 	.word	0xe000ed04
 8013554:	20002510 	.word	0x20002510

08013558 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013558:	b480      	push	{r7}
 801355a:	b087      	sub	sp, #28
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013560:	2300      	movs	r3, #0
 8013562:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d10a      	bne.n	8013584 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	60fb      	str	r3, [r7, #12]
}
 8013580:	bf00      	nop
 8013582:	e7fe      	b.n	8013582 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	695b      	ldr	r3, [r3, #20]
 8013588:	4a0a      	ldr	r2, [pc, #40]	; (80135b4 <prvTaskIsTaskSuspended+0x5c>)
 801358a:	4293      	cmp	r3, r2
 801358c:	d10a      	bne.n	80135a4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013592:	4a09      	ldr	r2, [pc, #36]	; (80135b8 <prvTaskIsTaskSuspended+0x60>)
 8013594:	4293      	cmp	r3, r2
 8013596:	d005      	beq.n	80135a4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801359c:	2b00      	cmp	r3, #0
 801359e:	d101      	bne.n	80135a4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80135a0:	2301      	movs	r3, #1
 80135a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135a4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80135a6:	4618      	mov	r0, r3
 80135a8:	371c      	adds	r7, #28
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	200024fc 	.word	0x200024fc
 80135b8:	200024d0 	.word	0x200024d0

080135bc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d10a      	bne.n	80135e4 <vTaskResume+0x28>
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	60bb      	str	r3, [r7, #8]
}
 80135e0:	bf00      	nop
 80135e2:	e7fe      	b.n	80135e2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80135e4:	4b20      	ldr	r3, [pc, #128]	; (8013668 <vTaskResume+0xac>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d038      	beq.n	8013660 <vTaskResume+0xa4>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d035      	beq.n	8013660 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80135f4:	f001 fade 	bl	8014bb4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f7ff ffad 	bl	8013558 <prvTaskIsTaskSuspended>
 80135fe:	4603      	mov	r3, r0
 8013600:	2b00      	cmp	r3, #0
 8013602:	d02b      	beq.n	801365c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	3304      	adds	r3, #4
 8013608:	4618      	mov	r0, r3
 801360a:	f7fe fc49 	bl	8011ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013612:	4b16      	ldr	r3, [pc, #88]	; (801366c <vTaskResume+0xb0>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	429a      	cmp	r2, r3
 8013618:	d903      	bls.n	8013622 <vTaskResume+0x66>
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361e:	4a13      	ldr	r2, [pc, #76]	; (801366c <vTaskResume+0xb0>)
 8013620:	6013      	str	r3, [r2, #0]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013626:	4613      	mov	r3, r2
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	4413      	add	r3, r2
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	4a10      	ldr	r2, [pc, #64]	; (8013670 <vTaskResume+0xb4>)
 8013630:	441a      	add	r2, r3
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	3304      	adds	r3, #4
 8013636:	4619      	mov	r1, r3
 8013638:	4610      	mov	r0, r2
 801363a:	f7fe fbd4 	bl	8011de6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013642:	4b09      	ldr	r3, [pc, #36]	; (8013668 <vTaskResume+0xac>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013648:	429a      	cmp	r2, r3
 801364a:	d307      	bcc.n	801365c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801364c:	4b09      	ldr	r3, [pc, #36]	; (8013674 <vTaskResume+0xb8>)
 801364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013652:	601a      	str	r2, [r3, #0]
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801365c:	f001 fada 	bl	8014c14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013660:	bf00      	nop
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	2000203c 	.word	0x2000203c
 801366c:	20002518 	.word	0x20002518
 8013670:	20002040 	.word	0x20002040
 8013674:	e000ed04 	.word	0xe000ed04

08013678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b08a      	sub	sp, #40	; 0x28
 801367c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801367e:	2300      	movs	r3, #0
 8013680:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013682:	2300      	movs	r3, #0
 8013684:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013686:	463a      	mov	r2, r7
 8013688:	1d39      	adds	r1, r7, #4
 801368a:	f107 0308 	add.w	r3, r7, #8
 801368e:	4618      	mov	r0, r3
 8013690:	f7fe fb48 	bl	8011d24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013694:	6839      	ldr	r1, [r7, #0]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	68ba      	ldr	r2, [r7, #8]
 801369a:	9202      	str	r2, [sp, #8]
 801369c:	9301      	str	r3, [sp, #4]
 801369e:	2300      	movs	r3, #0
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	2300      	movs	r3, #0
 80136a4:	460a      	mov	r2, r1
 80136a6:	4921      	ldr	r1, [pc, #132]	; (801372c <vTaskStartScheduler+0xb4>)
 80136a8:	4821      	ldr	r0, [pc, #132]	; (8013730 <vTaskStartScheduler+0xb8>)
 80136aa:	f7ff fc31 	bl	8012f10 <xTaskCreateStatic>
 80136ae:	4603      	mov	r3, r0
 80136b0:	4a20      	ldr	r2, [pc, #128]	; (8013734 <vTaskStartScheduler+0xbc>)
 80136b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80136b4:	4b1f      	ldr	r3, [pc, #124]	; (8013734 <vTaskStartScheduler+0xbc>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d002      	beq.n	80136c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80136bc:	2301      	movs	r3, #1
 80136be:	617b      	str	r3, [r7, #20]
 80136c0:	e001      	b.n	80136c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80136c2:	2300      	movs	r3, #0
 80136c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	d102      	bne.n	80136d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80136cc:	f000 fdfa 	bl	80142c4 <xTimerCreateTimerTask>
 80136d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	d116      	bne.n	8013706 <vTaskStartScheduler+0x8e>
	__asm volatile
 80136d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136dc:	f383 8811 	msr	BASEPRI, r3
 80136e0:	f3bf 8f6f 	isb	sy
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	613b      	str	r3, [r7, #16]
}
 80136ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80136ec:	4b12      	ldr	r3, [pc, #72]	; (8013738 <vTaskStartScheduler+0xc0>)
 80136ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80136f4:	4b11      	ldr	r3, [pc, #68]	; (801373c <vTaskStartScheduler+0xc4>)
 80136f6:	2201      	movs	r2, #1
 80136f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80136fa:	4b11      	ldr	r3, [pc, #68]	; (8013740 <vTaskStartScheduler+0xc8>)
 80136fc:	2200      	movs	r2, #0
 80136fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013700:	f001 f9b6 	bl	8014a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013704:	e00e      	b.n	8013724 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801370c:	d10a      	bne.n	8013724 <vTaskStartScheduler+0xac>
	__asm volatile
 801370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013712:	f383 8811 	msr	BASEPRI, r3
 8013716:	f3bf 8f6f 	isb	sy
 801371a:	f3bf 8f4f 	dsb	sy
 801371e:	60fb      	str	r3, [r7, #12]
}
 8013720:	bf00      	nop
 8013722:	e7fe      	b.n	8013722 <vTaskStartScheduler+0xaa>
}
 8013724:	bf00      	nop
 8013726:	3718      	adds	r7, #24
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}
 801372c:	0801a14c 	.word	0x0801a14c
 8013730:	08013d5d 	.word	0x08013d5d
 8013734:	20002534 	.word	0x20002534
 8013738:	20002530 	.word	0x20002530
 801373c:	2000251c 	.word	0x2000251c
 8013740:	20002514 	.word	0x20002514

08013744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013744:	b480      	push	{r7}
 8013746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013748:	4b04      	ldr	r3, [pc, #16]	; (801375c <vTaskSuspendAll+0x18>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	3301      	adds	r3, #1
 801374e:	4a03      	ldr	r2, [pc, #12]	; (801375c <vTaskSuspendAll+0x18>)
 8013750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013752:	bf00      	nop
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr
 801375c:	20002538 	.word	0x20002538

08013760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013766:	2300      	movs	r3, #0
 8013768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801376a:	2300      	movs	r3, #0
 801376c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801376e:	4b42      	ldr	r3, [pc, #264]	; (8013878 <xTaskResumeAll+0x118>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d10a      	bne.n	801378c <xTaskResumeAll+0x2c>
	__asm volatile
 8013776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377a:	f383 8811 	msr	BASEPRI, r3
 801377e:	f3bf 8f6f 	isb	sy
 8013782:	f3bf 8f4f 	dsb	sy
 8013786:	603b      	str	r3, [r7, #0]
}
 8013788:	bf00      	nop
 801378a:	e7fe      	b.n	801378a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801378c:	f001 fa12 	bl	8014bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013790:	4b39      	ldr	r3, [pc, #228]	; (8013878 <xTaskResumeAll+0x118>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	3b01      	subs	r3, #1
 8013796:	4a38      	ldr	r2, [pc, #224]	; (8013878 <xTaskResumeAll+0x118>)
 8013798:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801379a:	4b37      	ldr	r3, [pc, #220]	; (8013878 <xTaskResumeAll+0x118>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d162      	bne.n	8013868 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80137a2:	4b36      	ldr	r3, [pc, #216]	; (801387c <xTaskResumeAll+0x11c>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d05e      	beq.n	8013868 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80137aa:	e02f      	b.n	801380c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ac:	4b34      	ldr	r3, [pc, #208]	; (8013880 <xTaskResumeAll+0x120>)
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3318      	adds	r3, #24
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe fb71 	bl	8011ea0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	3304      	adds	r3, #4
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fe fb6c 	bl	8011ea0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137cc:	4b2d      	ldr	r3, [pc, #180]	; (8013884 <xTaskResumeAll+0x124>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d903      	bls.n	80137dc <xTaskResumeAll+0x7c>
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d8:	4a2a      	ldr	r2, [pc, #168]	; (8013884 <xTaskResumeAll+0x124>)
 80137da:	6013      	str	r3, [r2, #0]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e0:	4613      	mov	r3, r2
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	4413      	add	r3, r2
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	4a27      	ldr	r2, [pc, #156]	; (8013888 <xTaskResumeAll+0x128>)
 80137ea:	441a      	add	r2, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	3304      	adds	r3, #4
 80137f0:	4619      	mov	r1, r3
 80137f2:	4610      	mov	r0, r2
 80137f4:	f7fe faf7 	bl	8011de6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fc:	4b23      	ldr	r3, [pc, #140]	; (801388c <xTaskResumeAll+0x12c>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013802:	429a      	cmp	r2, r3
 8013804:	d302      	bcc.n	801380c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013806:	4b22      	ldr	r3, [pc, #136]	; (8013890 <xTaskResumeAll+0x130>)
 8013808:	2201      	movs	r2, #1
 801380a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801380c:	4b1c      	ldr	r3, [pc, #112]	; (8013880 <xTaskResumeAll+0x120>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d1cb      	bne.n	80137ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801381a:	f000 fb55 	bl	8013ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801381e:	4b1d      	ldr	r3, [pc, #116]	; (8013894 <xTaskResumeAll+0x134>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d010      	beq.n	801384c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801382a:	f000 f847 	bl	80138bc <xTaskIncrementTick>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013834:	4b16      	ldr	r3, [pc, #88]	; (8013890 <xTaskResumeAll+0x130>)
 8013836:	2201      	movs	r2, #1
 8013838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	3b01      	subs	r3, #1
 801383e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d1f1      	bne.n	801382a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013846:	4b13      	ldr	r3, [pc, #76]	; (8013894 <xTaskResumeAll+0x134>)
 8013848:	2200      	movs	r2, #0
 801384a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801384c:	4b10      	ldr	r3, [pc, #64]	; (8013890 <xTaskResumeAll+0x130>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d009      	beq.n	8013868 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013854:	2301      	movs	r3, #1
 8013856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013858:	4b0f      	ldr	r3, [pc, #60]	; (8013898 <xTaskResumeAll+0x138>)
 801385a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	f3bf 8f4f 	dsb	sy
 8013864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013868:	f001 f9d4 	bl	8014c14 <vPortExitCritical>

	return xAlreadyYielded;
 801386c:	68bb      	ldr	r3, [r7, #8]
}
 801386e:	4618      	mov	r0, r3
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}
 8013876:	bf00      	nop
 8013878:	20002538 	.word	0x20002538
 801387c:	20002510 	.word	0x20002510
 8013880:	200024d0 	.word	0x200024d0
 8013884:	20002518 	.word	0x20002518
 8013888:	20002040 	.word	0x20002040
 801388c:	2000203c 	.word	0x2000203c
 8013890:	20002524 	.word	0x20002524
 8013894:	20002520 	.word	0x20002520
 8013898:	e000ed04 	.word	0xe000ed04

0801389c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801389c:	b480      	push	{r7}
 801389e:	b083      	sub	sp, #12
 80138a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80138a2:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <xTaskGetTickCount+0x1c>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80138a8:	687b      	ldr	r3, [r7, #4]
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	370c      	adds	r7, #12
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	20002514 	.word	0x20002514

080138bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b086      	sub	sp, #24
 80138c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80138c2:	2300      	movs	r3, #0
 80138c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138c6:	4b4f      	ldr	r3, [pc, #316]	; (8013a04 <xTaskIncrementTick+0x148>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f040 808f 	bne.w	80139ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80138d0:	4b4d      	ldr	r3, [pc, #308]	; (8013a08 <xTaskIncrementTick+0x14c>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	3301      	adds	r3, #1
 80138d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80138d8:	4a4b      	ldr	r2, [pc, #300]	; (8013a08 <xTaskIncrementTick+0x14c>)
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d120      	bne.n	8013926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80138e4:	4b49      	ldr	r3, [pc, #292]	; (8013a0c <xTaskIncrementTick+0x150>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d00a      	beq.n	8013904 <xTaskIncrementTick+0x48>
	__asm volatile
 80138ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f2:	f383 8811 	msr	BASEPRI, r3
 80138f6:	f3bf 8f6f 	isb	sy
 80138fa:	f3bf 8f4f 	dsb	sy
 80138fe:	603b      	str	r3, [r7, #0]
}
 8013900:	bf00      	nop
 8013902:	e7fe      	b.n	8013902 <xTaskIncrementTick+0x46>
 8013904:	4b41      	ldr	r3, [pc, #260]	; (8013a0c <xTaskIncrementTick+0x150>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	60fb      	str	r3, [r7, #12]
 801390a:	4b41      	ldr	r3, [pc, #260]	; (8013a10 <xTaskIncrementTick+0x154>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	4a3f      	ldr	r2, [pc, #252]	; (8013a0c <xTaskIncrementTick+0x150>)
 8013910:	6013      	str	r3, [r2, #0]
 8013912:	4a3f      	ldr	r2, [pc, #252]	; (8013a10 <xTaskIncrementTick+0x154>)
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	6013      	str	r3, [r2, #0]
 8013918:	4b3e      	ldr	r3, [pc, #248]	; (8013a14 <xTaskIncrementTick+0x158>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	3301      	adds	r3, #1
 801391e:	4a3d      	ldr	r2, [pc, #244]	; (8013a14 <xTaskIncrementTick+0x158>)
 8013920:	6013      	str	r3, [r2, #0]
 8013922:	f000 fad1 	bl	8013ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013926:	4b3c      	ldr	r3, [pc, #240]	; (8013a18 <xTaskIncrementTick+0x15c>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	693a      	ldr	r2, [r7, #16]
 801392c:	429a      	cmp	r2, r3
 801392e:	d349      	bcc.n	80139c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013930:	4b36      	ldr	r3, [pc, #216]	; (8013a0c <xTaskIncrementTick+0x150>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d104      	bne.n	8013944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801393a:	4b37      	ldr	r3, [pc, #220]	; (8013a18 <xTaskIncrementTick+0x15c>)
 801393c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013940:	601a      	str	r2, [r3, #0]
					break;
 8013942:	e03f      	b.n	80139c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013944:	4b31      	ldr	r3, [pc, #196]	; (8013a0c <xTaskIncrementTick+0x150>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	68db      	ldr	r3, [r3, #12]
 801394c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	429a      	cmp	r2, r3
 801395a:	d203      	bcs.n	8013964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801395c:	4a2e      	ldr	r2, [pc, #184]	; (8013a18 <xTaskIncrementTick+0x15c>)
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013962:	e02f      	b.n	80139c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	3304      	adds	r3, #4
 8013968:	4618      	mov	r0, r3
 801396a:	f7fe fa99 	bl	8011ea0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013972:	2b00      	cmp	r3, #0
 8013974:	d004      	beq.n	8013980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	3318      	adds	r3, #24
 801397a:	4618      	mov	r0, r3
 801397c:	f7fe fa90 	bl	8011ea0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013984:	4b25      	ldr	r3, [pc, #148]	; (8013a1c <xTaskIncrementTick+0x160>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	429a      	cmp	r2, r3
 801398a:	d903      	bls.n	8013994 <xTaskIncrementTick+0xd8>
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013990:	4a22      	ldr	r2, [pc, #136]	; (8013a1c <xTaskIncrementTick+0x160>)
 8013992:	6013      	str	r3, [r2, #0]
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013998:	4613      	mov	r3, r2
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	4413      	add	r3, r2
 801399e:	009b      	lsls	r3, r3, #2
 80139a0:	4a1f      	ldr	r2, [pc, #124]	; (8013a20 <xTaskIncrementTick+0x164>)
 80139a2:	441a      	add	r2, r3
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	3304      	adds	r3, #4
 80139a8:	4619      	mov	r1, r3
 80139aa:	4610      	mov	r0, r2
 80139ac:	f7fe fa1b 	bl	8011de6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139b4:	4b1b      	ldr	r3, [pc, #108]	; (8013a24 <xTaskIncrementTick+0x168>)
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ba:	429a      	cmp	r2, r3
 80139bc:	d3b8      	bcc.n	8013930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80139be:	2301      	movs	r3, #1
 80139c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80139c2:	e7b5      	b.n	8013930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80139c4:	4b17      	ldr	r3, [pc, #92]	; (8013a24 <xTaskIncrementTick+0x168>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ca:	4915      	ldr	r1, [pc, #84]	; (8013a20 <xTaskIncrementTick+0x164>)
 80139cc:	4613      	mov	r3, r2
 80139ce:	009b      	lsls	r3, r3, #2
 80139d0:	4413      	add	r3, r2
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	440b      	add	r3, r1
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d901      	bls.n	80139e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80139dc:	2301      	movs	r3, #1
 80139de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80139e0:	4b11      	ldr	r3, [pc, #68]	; (8013a28 <xTaskIncrementTick+0x16c>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d007      	beq.n	80139f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80139e8:	2301      	movs	r3, #1
 80139ea:	617b      	str	r3, [r7, #20]
 80139ec:	e004      	b.n	80139f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80139ee:	4b0f      	ldr	r3, [pc, #60]	; (8013a2c <xTaskIncrementTick+0x170>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	3301      	adds	r3, #1
 80139f4:	4a0d      	ldr	r2, [pc, #52]	; (8013a2c <xTaskIncrementTick+0x170>)
 80139f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80139f8:	697b      	ldr	r3, [r7, #20]
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3718      	adds	r7, #24
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
 8013a02:	bf00      	nop
 8013a04:	20002538 	.word	0x20002538
 8013a08:	20002514 	.word	0x20002514
 8013a0c:	200024c8 	.word	0x200024c8
 8013a10:	200024cc 	.word	0x200024cc
 8013a14:	20002528 	.word	0x20002528
 8013a18:	20002530 	.word	0x20002530
 8013a1c:	20002518 	.word	0x20002518
 8013a20:	20002040 	.word	0x20002040
 8013a24:	2000203c 	.word	0x2000203c
 8013a28:	20002524 	.word	0x20002524
 8013a2c:	20002520 	.word	0x20002520

08013a30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013a30:	b480      	push	{r7}
 8013a32:	b085      	sub	sp, #20
 8013a34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013a36:	4b28      	ldr	r3, [pc, #160]	; (8013ad8 <vTaskSwitchContext+0xa8>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d003      	beq.n	8013a46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013a3e:	4b27      	ldr	r3, [pc, #156]	; (8013adc <vTaskSwitchContext+0xac>)
 8013a40:	2201      	movs	r2, #1
 8013a42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013a44:	e041      	b.n	8013aca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8013a46:	4b25      	ldr	r3, [pc, #148]	; (8013adc <vTaskSwitchContext+0xac>)
 8013a48:	2200      	movs	r2, #0
 8013a4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a4c:	4b24      	ldr	r3, [pc, #144]	; (8013ae0 <vTaskSwitchContext+0xb0>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	60fb      	str	r3, [r7, #12]
 8013a52:	e010      	b.n	8013a76 <vTaskSwitchContext+0x46>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d10a      	bne.n	8013a70 <vTaskSwitchContext+0x40>
	__asm volatile
 8013a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5e:	f383 8811 	msr	BASEPRI, r3
 8013a62:	f3bf 8f6f 	isb	sy
 8013a66:	f3bf 8f4f 	dsb	sy
 8013a6a:	607b      	str	r3, [r7, #4]
}
 8013a6c:	bf00      	nop
 8013a6e:	e7fe      	b.n	8013a6e <vTaskSwitchContext+0x3e>
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	3b01      	subs	r3, #1
 8013a74:	60fb      	str	r3, [r7, #12]
 8013a76:	491b      	ldr	r1, [pc, #108]	; (8013ae4 <vTaskSwitchContext+0xb4>)
 8013a78:	68fa      	ldr	r2, [r7, #12]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	009b      	lsls	r3, r3, #2
 8013a7e:	4413      	add	r3, r2
 8013a80:	009b      	lsls	r3, r3, #2
 8013a82:	440b      	add	r3, r1
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d0e4      	beq.n	8013a54 <vTaskSwitchContext+0x24>
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	4413      	add	r3, r2
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	4a13      	ldr	r2, [pc, #76]	; (8013ae4 <vTaskSwitchContext+0xb4>)
 8013a96:	4413      	add	r3, r2
 8013a98:	60bb      	str	r3, [r7, #8]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	685a      	ldr	r2, [r3, #4]
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	605a      	str	r2, [r3, #4]
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	685a      	ldr	r2, [r3, #4]
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	3308      	adds	r3, #8
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d104      	bne.n	8013aba <vTaskSwitchContext+0x8a>
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	685a      	ldr	r2, [r3, #4]
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	605a      	str	r2, [r3, #4]
 8013aba:	68bb      	ldr	r3, [r7, #8]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	4a09      	ldr	r2, [pc, #36]	; (8013ae8 <vTaskSwitchContext+0xb8>)
 8013ac2:	6013      	str	r3, [r2, #0]
 8013ac4:	4a06      	ldr	r2, [pc, #24]	; (8013ae0 <vTaskSwitchContext+0xb0>)
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	6013      	str	r3, [r2, #0]
}
 8013aca:	bf00      	nop
 8013acc:	3714      	adds	r7, #20
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	20002538 	.word	0x20002538
 8013adc:	20002524 	.word	0x20002524
 8013ae0:	20002518 	.word	0x20002518
 8013ae4:	20002040 	.word	0x20002040
 8013ae8:	2000203c 	.word	0x2000203c

08013aec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d10a      	bne.n	8013b12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b00:	f383 8811 	msr	BASEPRI, r3
 8013b04:	f3bf 8f6f 	isb	sy
 8013b08:	f3bf 8f4f 	dsb	sy
 8013b0c:	60fb      	str	r3, [r7, #12]
}
 8013b0e:	bf00      	nop
 8013b10:	e7fe      	b.n	8013b10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b12:	4b07      	ldr	r3, [pc, #28]	; (8013b30 <vTaskPlaceOnEventList+0x44>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	3318      	adds	r3, #24
 8013b18:	4619      	mov	r1, r3
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7fe f987 	bl	8011e2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013b20:	2101      	movs	r1, #1
 8013b22:	6838      	ldr	r0, [r7, #0]
 8013b24:	f000 fb7a 	bl	801421c <prvAddCurrentTaskToDelayedList>
}
 8013b28:	bf00      	nop
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	2000203c 	.word	0x2000203c

08013b34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b086      	sub	sp, #24
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d10a      	bne.n	8013b5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b4a:	f383 8811 	msr	BASEPRI, r3
 8013b4e:	f3bf 8f6f 	isb	sy
 8013b52:	f3bf 8f4f 	dsb	sy
 8013b56:	617b      	str	r3, [r7, #20]
}
 8013b58:	bf00      	nop
 8013b5a:	e7fe      	b.n	8013b5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013b5c:	4b0a      	ldr	r3, [pc, #40]	; (8013b88 <vTaskPlaceOnEventListRestricted+0x54>)
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	3318      	adds	r3, #24
 8013b62:	4619      	mov	r1, r3
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f7fe f93e 	bl	8011de6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d002      	beq.n	8013b76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013b76:	6879      	ldr	r1, [r7, #4]
 8013b78:	68b8      	ldr	r0, [r7, #8]
 8013b7a:	f000 fb4f 	bl	801421c <prvAddCurrentTaskToDelayedList>
	}
 8013b7e:	bf00      	nop
 8013b80:	3718      	adds	r7, #24
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	2000203c 	.word	0x2000203c

08013b8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b086      	sub	sp, #24
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d10a      	bne.n	8013bb8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba6:	f383 8811 	msr	BASEPRI, r3
 8013baa:	f3bf 8f6f 	isb	sy
 8013bae:	f3bf 8f4f 	dsb	sy
 8013bb2:	60fb      	str	r3, [r7, #12]
}
 8013bb4:	bf00      	nop
 8013bb6:	e7fe      	b.n	8013bb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	3318      	adds	r3, #24
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f7fe f96f 	bl	8011ea0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013bc2:	4b1e      	ldr	r3, [pc, #120]	; (8013c3c <xTaskRemoveFromEventList+0xb0>)
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d11d      	bne.n	8013c06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	3304      	adds	r3, #4
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fe f966 	bl	8011ea0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd8:	4b19      	ldr	r3, [pc, #100]	; (8013c40 <xTaskRemoveFromEventList+0xb4>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d903      	bls.n	8013be8 <xTaskRemoveFromEventList+0x5c>
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	4a16      	ldr	r2, [pc, #88]	; (8013c40 <xTaskRemoveFromEventList+0xb4>)
 8013be6:	6013      	str	r3, [r2, #0]
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bec:	4613      	mov	r3, r2
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	4413      	add	r3, r2
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4a13      	ldr	r2, [pc, #76]	; (8013c44 <xTaskRemoveFromEventList+0xb8>)
 8013bf6:	441a      	add	r2, r3
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	3304      	adds	r3, #4
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	4610      	mov	r0, r2
 8013c00:	f7fe f8f1 	bl	8011de6 <vListInsertEnd>
 8013c04:	e005      	b.n	8013c12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	3318      	adds	r3, #24
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	480e      	ldr	r0, [pc, #56]	; (8013c48 <xTaskRemoveFromEventList+0xbc>)
 8013c0e:	f7fe f8ea 	bl	8011de6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c16:	4b0d      	ldr	r3, [pc, #52]	; (8013c4c <xTaskRemoveFromEventList+0xc0>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d905      	bls.n	8013c2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013c20:	2301      	movs	r3, #1
 8013c22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013c24:	4b0a      	ldr	r3, [pc, #40]	; (8013c50 <xTaskRemoveFromEventList+0xc4>)
 8013c26:	2201      	movs	r2, #1
 8013c28:	601a      	str	r2, [r3, #0]
 8013c2a:	e001      	b.n	8013c30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013c30:	697b      	ldr	r3, [r7, #20]
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	3718      	adds	r7, #24
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}
 8013c3a:	bf00      	nop
 8013c3c:	20002538 	.word	0x20002538
 8013c40:	20002518 	.word	0x20002518
 8013c44:	20002040 	.word	0x20002040
 8013c48:	200024d0 	.word	0x200024d0
 8013c4c:	2000203c 	.word	0x2000203c
 8013c50:	20002524 	.word	0x20002524

08013c54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013c5c:	4b06      	ldr	r3, [pc, #24]	; (8013c78 <vTaskInternalSetTimeOutState+0x24>)
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013c64:	4b05      	ldr	r3, [pc, #20]	; (8013c7c <vTaskInternalSetTimeOutState+0x28>)
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	605a      	str	r2, [r3, #4]
}
 8013c6c:	bf00      	nop
 8013c6e:	370c      	adds	r7, #12
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr
 8013c78:	20002528 	.word	0x20002528
 8013c7c:	20002514 	.word	0x20002514

08013c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b088      	sub	sp, #32
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d10a      	bne.n	8013ca6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c94:	f383 8811 	msr	BASEPRI, r3
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	613b      	str	r3, [r7, #16]
}
 8013ca2:	bf00      	nop
 8013ca4:	e7fe      	b.n	8013ca4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d10a      	bne.n	8013cc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	60fb      	str	r3, [r7, #12]
}
 8013cbe:	bf00      	nop
 8013cc0:	e7fe      	b.n	8013cc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013cc2:	f000 ff77 	bl	8014bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013cc6:	4b1d      	ldr	r3, [pc, #116]	; (8013d3c <xTaskCheckForTimeOut+0xbc>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	69ba      	ldr	r2, [r7, #24]
 8013cd2:	1ad3      	subs	r3, r2, r3
 8013cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cde:	d102      	bne.n	8013ce6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	61fb      	str	r3, [r7, #28]
 8013ce4:	e023      	b.n	8013d2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	4b15      	ldr	r3, [pc, #84]	; (8013d40 <xTaskCheckForTimeOut+0xc0>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d007      	beq.n	8013d02 <xTaskCheckForTimeOut+0x82>
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	69ba      	ldr	r2, [r7, #24]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d302      	bcc.n	8013d02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	61fb      	str	r3, [r7, #28]
 8013d00:	e015      	b.n	8013d2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d20b      	bcs.n	8013d24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	1ad2      	subs	r2, r2, r3
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7ff ff9b 	bl	8013c54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	61fb      	str	r3, [r7, #28]
 8013d22:	e004      	b.n	8013d2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013d2e:	f000 ff71 	bl	8014c14 <vPortExitCritical>

	return xReturn;
 8013d32:	69fb      	ldr	r3, [r7, #28]
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3720      	adds	r7, #32
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	20002514 	.word	0x20002514
 8013d40:	20002528 	.word	0x20002528

08013d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013d44:	b480      	push	{r7}
 8013d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013d48:	4b03      	ldr	r3, [pc, #12]	; (8013d58 <vTaskMissedYield+0x14>)
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	601a      	str	r2, [r3, #0]
}
 8013d4e:	bf00      	nop
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr
 8013d58:	20002524 	.word	0x20002524

08013d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013d64:	f000 f852 	bl	8013e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013d68:	4b06      	ldr	r3, [pc, #24]	; (8013d84 <prvIdleTask+0x28>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d9f9      	bls.n	8013d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013d70:	4b05      	ldr	r3, [pc, #20]	; (8013d88 <prvIdleTask+0x2c>)
 8013d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d76:	601a      	str	r2, [r3, #0]
 8013d78:	f3bf 8f4f 	dsb	sy
 8013d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013d80:	e7f0      	b.n	8013d64 <prvIdleTask+0x8>
 8013d82:	bf00      	nop
 8013d84:	20002040 	.word	0x20002040
 8013d88:	e000ed04 	.word	0xe000ed04

08013d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013d92:	2300      	movs	r3, #0
 8013d94:	607b      	str	r3, [r7, #4]
 8013d96:	e00c      	b.n	8013db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013d98:	687a      	ldr	r2, [r7, #4]
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	4413      	add	r3, r2
 8013da0:	009b      	lsls	r3, r3, #2
 8013da2:	4a12      	ldr	r2, [pc, #72]	; (8013dec <prvInitialiseTaskLists+0x60>)
 8013da4:	4413      	add	r3, r2
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7fd fff0 	bl	8011d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3301      	adds	r3, #1
 8013db0:	607b      	str	r3, [r7, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2b37      	cmp	r3, #55	; 0x37
 8013db6:	d9ef      	bls.n	8013d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013db8:	480d      	ldr	r0, [pc, #52]	; (8013df0 <prvInitialiseTaskLists+0x64>)
 8013dba:	f7fd ffe7 	bl	8011d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013dbe:	480d      	ldr	r0, [pc, #52]	; (8013df4 <prvInitialiseTaskLists+0x68>)
 8013dc0:	f7fd ffe4 	bl	8011d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013dc4:	480c      	ldr	r0, [pc, #48]	; (8013df8 <prvInitialiseTaskLists+0x6c>)
 8013dc6:	f7fd ffe1 	bl	8011d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013dca:	480c      	ldr	r0, [pc, #48]	; (8013dfc <prvInitialiseTaskLists+0x70>)
 8013dcc:	f7fd ffde 	bl	8011d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013dd0:	480b      	ldr	r0, [pc, #44]	; (8013e00 <prvInitialiseTaskLists+0x74>)
 8013dd2:	f7fd ffdb 	bl	8011d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013dd6:	4b0b      	ldr	r3, [pc, #44]	; (8013e04 <prvInitialiseTaskLists+0x78>)
 8013dd8:	4a05      	ldr	r2, [pc, #20]	; (8013df0 <prvInitialiseTaskLists+0x64>)
 8013dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013ddc:	4b0a      	ldr	r3, [pc, #40]	; (8013e08 <prvInitialiseTaskLists+0x7c>)
 8013dde:	4a05      	ldr	r2, [pc, #20]	; (8013df4 <prvInitialiseTaskLists+0x68>)
 8013de0:	601a      	str	r2, [r3, #0]
}
 8013de2:	bf00      	nop
 8013de4:	3708      	adds	r7, #8
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	20002040 	.word	0x20002040
 8013df0:	200024a0 	.word	0x200024a0
 8013df4:	200024b4 	.word	0x200024b4
 8013df8:	200024d0 	.word	0x200024d0
 8013dfc:	200024e4 	.word	0x200024e4
 8013e00:	200024fc 	.word	0x200024fc
 8013e04:	200024c8 	.word	0x200024c8
 8013e08:	200024cc 	.word	0x200024cc

08013e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e12:	e019      	b.n	8013e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013e14:	f000 fece 	bl	8014bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e18:	4b10      	ldr	r3, [pc, #64]	; (8013e5c <prvCheckTasksWaitingTermination+0x50>)
 8013e1a:	68db      	ldr	r3, [r3, #12]
 8013e1c:	68db      	ldr	r3, [r3, #12]
 8013e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	3304      	adds	r3, #4
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7fe f83b 	bl	8011ea0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013e2a:	4b0d      	ldr	r3, [pc, #52]	; (8013e60 <prvCheckTasksWaitingTermination+0x54>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	3b01      	subs	r3, #1
 8013e30:	4a0b      	ldr	r2, [pc, #44]	; (8013e60 <prvCheckTasksWaitingTermination+0x54>)
 8013e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013e34:	4b0b      	ldr	r3, [pc, #44]	; (8013e64 <prvCheckTasksWaitingTermination+0x58>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	3b01      	subs	r3, #1
 8013e3a:	4a0a      	ldr	r2, [pc, #40]	; (8013e64 <prvCheckTasksWaitingTermination+0x58>)
 8013e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013e3e:	f000 fee9 	bl	8014c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 f810 	bl	8013e68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013e48:	4b06      	ldr	r3, [pc, #24]	; (8013e64 <prvCheckTasksWaitingTermination+0x58>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d1e1      	bne.n	8013e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013e50:	bf00      	nop
 8013e52:	bf00      	nop
 8013e54:	3708      	adds	r7, #8
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	200024e4 	.word	0x200024e4
 8013e60:	20002510 	.word	0x20002510
 8013e64:	200024f8 	.word	0x200024f8

08013e68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d108      	bne.n	8013e8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f001 f886 	bl	8014f90 <vPortFree>
				vPortFree( pxTCB );
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f001 f883 	bl	8014f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013e8a:	e018      	b.n	8013ebe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d103      	bne.n	8013e9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 f87a 	bl	8014f90 <vPortFree>
	}
 8013e9c:	e00f      	b.n	8013ebe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013ea4:	2b02      	cmp	r3, #2
 8013ea6:	d00a      	beq.n	8013ebe <prvDeleteTCB+0x56>
	__asm volatile
 8013ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	60fb      	str	r3, [r7, #12]
}
 8013eba:	bf00      	nop
 8013ebc:	e7fe      	b.n	8013ebc <prvDeleteTCB+0x54>
	}
 8013ebe:	bf00      	nop
 8013ec0:	3710      	adds	r7, #16
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
	...

08013ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013ec8:	b480      	push	{r7}
 8013eca:	b083      	sub	sp, #12
 8013ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ece:	4b0c      	ldr	r3, [pc, #48]	; (8013f00 <prvResetNextTaskUnblockTime+0x38>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d104      	bne.n	8013ee2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013ed8:	4b0a      	ldr	r3, [pc, #40]	; (8013f04 <prvResetNextTaskUnblockTime+0x3c>)
 8013eda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ede:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013ee0:	e008      	b.n	8013ef4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ee2:	4b07      	ldr	r3, [pc, #28]	; (8013f00 <prvResetNextTaskUnblockTime+0x38>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	68db      	ldr	r3, [r3, #12]
 8013ee8:	68db      	ldr	r3, [r3, #12]
 8013eea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	4a04      	ldr	r2, [pc, #16]	; (8013f04 <prvResetNextTaskUnblockTime+0x3c>)
 8013ef2:	6013      	str	r3, [r2, #0]
}
 8013ef4:	bf00      	nop
 8013ef6:	370c      	adds	r7, #12
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr
 8013f00:	200024c8 	.word	0x200024c8
 8013f04:	20002530 	.word	0x20002530

08013f08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013f08:	b480      	push	{r7}
 8013f0a:	b083      	sub	sp, #12
 8013f0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013f0e:	4b0b      	ldr	r3, [pc, #44]	; (8013f3c <xTaskGetSchedulerState+0x34>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d102      	bne.n	8013f1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013f16:	2301      	movs	r3, #1
 8013f18:	607b      	str	r3, [r7, #4]
 8013f1a:	e008      	b.n	8013f2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f1c:	4b08      	ldr	r3, [pc, #32]	; (8013f40 <xTaskGetSchedulerState+0x38>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d102      	bne.n	8013f2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013f24:	2302      	movs	r3, #2
 8013f26:	607b      	str	r3, [r7, #4]
 8013f28:	e001      	b.n	8013f2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013f2e:	687b      	ldr	r3, [r7, #4]
	}
 8013f30:	4618      	mov	r0, r3
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr
 8013f3c:	2000251c 	.word	0x2000251c
 8013f40:	20002538 	.word	0x20002538

08013f44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013f50:	2300      	movs	r3, #0
 8013f52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d051      	beq.n	8013ffe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f5e:	4b2a      	ldr	r3, [pc, #168]	; (8014008 <xTaskPriorityInherit+0xc4>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f64:	429a      	cmp	r2, r3
 8013f66:	d241      	bcs.n	8013fec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	699b      	ldr	r3, [r3, #24]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	db06      	blt.n	8013f7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f70:	4b25      	ldr	r3, [pc, #148]	; (8014008 <xTaskPriorityInherit+0xc4>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	6959      	ldr	r1, [r3, #20]
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f86:	4613      	mov	r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	4413      	add	r3, r2
 8013f8c:	009b      	lsls	r3, r3, #2
 8013f8e:	4a1f      	ldr	r2, [pc, #124]	; (801400c <xTaskPriorityInherit+0xc8>)
 8013f90:	4413      	add	r3, r2
 8013f92:	4299      	cmp	r1, r3
 8013f94:	d122      	bne.n	8013fdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	3304      	adds	r3, #4
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fd ff80 	bl	8011ea0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013fa0:	4b19      	ldr	r3, [pc, #100]	; (8014008 <xTaskPriorityInherit+0xc4>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fa6:	68bb      	ldr	r3, [r7, #8]
 8013fa8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fae:	4b18      	ldr	r3, [pc, #96]	; (8014010 <xTaskPriorityInherit+0xcc>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d903      	bls.n	8013fbe <xTaskPriorityInherit+0x7a>
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fba:	4a15      	ldr	r2, [pc, #84]	; (8014010 <xTaskPriorityInherit+0xcc>)
 8013fbc:	6013      	str	r3, [r2, #0]
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	009b      	lsls	r3, r3, #2
 8013fc6:	4413      	add	r3, r2
 8013fc8:	009b      	lsls	r3, r3, #2
 8013fca:	4a10      	ldr	r2, [pc, #64]	; (801400c <xTaskPriorityInherit+0xc8>)
 8013fcc:	441a      	add	r2, r3
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	3304      	adds	r3, #4
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	f7fd ff06 	bl	8011de6 <vListInsertEnd>
 8013fda:	e004      	b.n	8013fe6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013fdc:	4b0a      	ldr	r3, [pc, #40]	; (8014008 <xTaskPriorityInherit+0xc4>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	60fb      	str	r3, [r7, #12]
 8013fea:	e008      	b.n	8013ffe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013ff0:	4b05      	ldr	r3, [pc, #20]	; (8014008 <xTaskPriorityInherit+0xc4>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	d201      	bcs.n	8013ffe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
	}
 8014000:	4618      	mov	r0, r3
 8014002:	3710      	adds	r7, #16
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	2000203c 	.word	0x2000203c
 801400c:	20002040 	.word	0x20002040
 8014010:	20002518 	.word	0x20002518

08014014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014014:	b580      	push	{r7, lr}
 8014016:	b086      	sub	sp, #24
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014020:	2300      	movs	r3, #0
 8014022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d056      	beq.n	80140d8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801402a:	4b2e      	ldr	r3, [pc, #184]	; (80140e4 <xTaskPriorityDisinherit+0xd0>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	693a      	ldr	r2, [r7, #16]
 8014030:	429a      	cmp	r2, r3
 8014032:	d00a      	beq.n	801404a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014038:	f383 8811 	msr	BASEPRI, r3
 801403c:	f3bf 8f6f 	isb	sy
 8014040:	f3bf 8f4f 	dsb	sy
 8014044:	60fb      	str	r3, [r7, #12]
}
 8014046:	bf00      	nop
 8014048:	e7fe      	b.n	8014048 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801404e:	2b00      	cmp	r3, #0
 8014050:	d10a      	bne.n	8014068 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	60bb      	str	r3, [r7, #8]
}
 8014064:	bf00      	nop
 8014066:	e7fe      	b.n	8014066 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801406c:	1e5a      	subs	r2, r3, #1
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014076:	693b      	ldr	r3, [r7, #16]
 8014078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801407a:	429a      	cmp	r2, r3
 801407c:	d02c      	beq.n	80140d8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801407e:	693b      	ldr	r3, [r7, #16]
 8014080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014082:	2b00      	cmp	r3, #0
 8014084:	d128      	bne.n	80140d8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	3304      	adds	r3, #4
 801408a:	4618      	mov	r0, r3
 801408c:	f7fd ff08 	bl	8011ea0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801409c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80140a0:	693b      	ldr	r3, [r7, #16]
 80140a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80140a4:	693b      	ldr	r3, [r7, #16]
 80140a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a8:	4b0f      	ldr	r3, [pc, #60]	; (80140e8 <xTaskPriorityDisinherit+0xd4>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d903      	bls.n	80140b8 <xTaskPriorityDisinherit+0xa4>
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140b4:	4a0c      	ldr	r2, [pc, #48]	; (80140e8 <xTaskPriorityDisinherit+0xd4>)
 80140b6:	6013      	str	r3, [r2, #0]
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140bc:	4613      	mov	r3, r2
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	4413      	add	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4a09      	ldr	r2, [pc, #36]	; (80140ec <xTaskPriorityDisinherit+0xd8>)
 80140c6:	441a      	add	r2, r3
 80140c8:	693b      	ldr	r3, [r7, #16]
 80140ca:	3304      	adds	r3, #4
 80140cc:	4619      	mov	r1, r3
 80140ce:	4610      	mov	r0, r2
 80140d0:	f7fd fe89 	bl	8011de6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80140d4:	2301      	movs	r3, #1
 80140d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80140d8:	697b      	ldr	r3, [r7, #20]
	}
 80140da:	4618      	mov	r0, r3
 80140dc:	3718      	adds	r7, #24
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	2000203c 	.word	0x2000203c
 80140e8:	20002518 	.word	0x20002518
 80140ec:	20002040 	.word	0x20002040

080140f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b088      	sub	sp, #32
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80140fe:	2301      	movs	r3, #1
 8014100:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d06a      	beq.n	80141de <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801410c:	2b00      	cmp	r3, #0
 801410e:	d10a      	bne.n	8014126 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8014110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014114:	f383 8811 	msr	BASEPRI, r3
 8014118:	f3bf 8f6f 	isb	sy
 801411c:	f3bf 8f4f 	dsb	sy
 8014120:	60fb      	str	r3, [r7, #12]
}
 8014122:	bf00      	nop
 8014124:	e7fe      	b.n	8014124 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801412a:	683a      	ldr	r2, [r7, #0]
 801412c:	429a      	cmp	r2, r3
 801412e:	d902      	bls.n	8014136 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	61fb      	str	r3, [r7, #28]
 8014134:	e002      	b.n	801413c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014136:	69bb      	ldr	r3, [r7, #24]
 8014138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801413a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801413c:	69bb      	ldr	r3, [r7, #24]
 801413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014140:	69fa      	ldr	r2, [r7, #28]
 8014142:	429a      	cmp	r2, r3
 8014144:	d04b      	beq.n	80141de <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014146:	69bb      	ldr	r3, [r7, #24]
 8014148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801414a:	697a      	ldr	r2, [r7, #20]
 801414c:	429a      	cmp	r2, r3
 801414e:	d146      	bne.n	80141de <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014150:	4b25      	ldr	r3, [pc, #148]	; (80141e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	69ba      	ldr	r2, [r7, #24]
 8014156:	429a      	cmp	r2, r3
 8014158:	d10a      	bne.n	8014170 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801415e:	f383 8811 	msr	BASEPRI, r3
 8014162:	f3bf 8f6f 	isb	sy
 8014166:	f3bf 8f4f 	dsb	sy
 801416a:	60bb      	str	r3, [r7, #8]
}
 801416c:	bf00      	nop
 801416e:	e7fe      	b.n	801416e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014170:	69bb      	ldr	r3, [r7, #24]
 8014172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014174:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014176:	69bb      	ldr	r3, [r7, #24]
 8014178:	69fa      	ldr	r2, [r7, #28]
 801417a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	699b      	ldr	r3, [r3, #24]
 8014180:	2b00      	cmp	r3, #0
 8014182:	db04      	blt.n	801418e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	6959      	ldr	r1, [r3, #20]
 8014192:	693a      	ldr	r2, [r7, #16]
 8014194:	4613      	mov	r3, r2
 8014196:	009b      	lsls	r3, r3, #2
 8014198:	4413      	add	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4a13      	ldr	r2, [pc, #76]	; (80141ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801419e:	4413      	add	r3, r2
 80141a0:	4299      	cmp	r1, r3
 80141a2:	d11c      	bne.n	80141de <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80141a4:	69bb      	ldr	r3, [r7, #24]
 80141a6:	3304      	adds	r3, #4
 80141a8:	4618      	mov	r0, r3
 80141aa:	f7fd fe79 	bl	8011ea0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b2:	4b0f      	ldr	r3, [pc, #60]	; (80141f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d903      	bls.n	80141c2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80141ba:	69bb      	ldr	r3, [r7, #24]
 80141bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141be:	4a0c      	ldr	r2, [pc, #48]	; (80141f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80141c0:	6013      	str	r3, [r2, #0]
 80141c2:	69bb      	ldr	r3, [r7, #24]
 80141c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141c6:	4613      	mov	r3, r2
 80141c8:	009b      	lsls	r3, r3, #2
 80141ca:	4413      	add	r3, r2
 80141cc:	009b      	lsls	r3, r3, #2
 80141ce:	4a07      	ldr	r2, [pc, #28]	; (80141ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80141d0:	441a      	add	r2, r3
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	3304      	adds	r3, #4
 80141d6:	4619      	mov	r1, r3
 80141d8:	4610      	mov	r0, r2
 80141da:	f7fd fe04 	bl	8011de6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80141de:	bf00      	nop
 80141e0:	3720      	adds	r7, #32
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	bf00      	nop
 80141e8:	2000203c 	.word	0x2000203c
 80141ec:	20002040 	.word	0x20002040
 80141f0:	20002518 	.word	0x20002518

080141f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80141f4:	b480      	push	{r7}
 80141f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80141f8:	4b07      	ldr	r3, [pc, #28]	; (8014218 <pvTaskIncrementMutexHeldCount+0x24>)
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d004      	beq.n	801420a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014200:	4b05      	ldr	r3, [pc, #20]	; (8014218 <pvTaskIncrementMutexHeldCount+0x24>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014206:	3201      	adds	r2, #1
 8014208:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801420a:	4b03      	ldr	r3, [pc, #12]	; (8014218 <pvTaskIncrementMutexHeldCount+0x24>)
 801420c:	681b      	ldr	r3, [r3, #0]
	}
 801420e:	4618      	mov	r0, r3
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr
 8014218:	2000203c 	.word	0x2000203c

0801421c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014226:	4b21      	ldr	r3, [pc, #132]	; (80142ac <prvAddCurrentTaskToDelayedList+0x90>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801422c:	4b20      	ldr	r3, [pc, #128]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	3304      	adds	r3, #4
 8014232:	4618      	mov	r0, r3
 8014234:	f7fd fe34 	bl	8011ea0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801423e:	d10a      	bne.n	8014256 <prvAddCurrentTaskToDelayedList+0x3a>
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d007      	beq.n	8014256 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014246:	4b1a      	ldr	r3, [pc, #104]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	3304      	adds	r3, #4
 801424c:	4619      	mov	r1, r3
 801424e:	4819      	ldr	r0, [pc, #100]	; (80142b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8014250:	f7fd fdc9 	bl	8011de6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014254:	e026      	b.n	80142a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014256:	68fa      	ldr	r2, [r7, #12]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	4413      	add	r3, r2
 801425c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801425e:	4b14      	ldr	r3, [pc, #80]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	68ba      	ldr	r2, [r7, #8]
 8014264:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014266:	68ba      	ldr	r2, [r7, #8]
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	429a      	cmp	r2, r3
 801426c:	d209      	bcs.n	8014282 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801426e:	4b12      	ldr	r3, [pc, #72]	; (80142b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014270:	681a      	ldr	r2, [r3, #0]
 8014272:	4b0f      	ldr	r3, [pc, #60]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	3304      	adds	r3, #4
 8014278:	4619      	mov	r1, r3
 801427a:	4610      	mov	r0, r2
 801427c:	f7fd fdd7 	bl	8011e2e <vListInsert>
}
 8014280:	e010      	b.n	80142a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014282:	4b0e      	ldr	r3, [pc, #56]	; (80142bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	4b0a      	ldr	r3, [pc, #40]	; (80142b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3304      	adds	r3, #4
 801428c:	4619      	mov	r1, r3
 801428e:	4610      	mov	r0, r2
 8014290:	f7fd fdcd 	bl	8011e2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014294:	4b0a      	ldr	r3, [pc, #40]	; (80142c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	68ba      	ldr	r2, [r7, #8]
 801429a:	429a      	cmp	r2, r3
 801429c:	d202      	bcs.n	80142a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801429e:	4a08      	ldr	r2, [pc, #32]	; (80142c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	6013      	str	r3, [r2, #0]
}
 80142a4:	bf00      	nop
 80142a6:	3710      	adds	r7, #16
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	20002514 	.word	0x20002514
 80142b0:	2000203c 	.word	0x2000203c
 80142b4:	200024fc 	.word	0x200024fc
 80142b8:	200024cc 	.word	0x200024cc
 80142bc:	200024c8 	.word	0x200024c8
 80142c0:	20002530 	.word	0x20002530

080142c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b08a      	sub	sp, #40	; 0x28
 80142c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80142ca:	2300      	movs	r3, #0
 80142cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80142ce:	f000 fb07 	bl	80148e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80142d2:	4b1c      	ldr	r3, [pc, #112]	; (8014344 <xTimerCreateTimerTask+0x80>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d021      	beq.n	801431e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80142da:	2300      	movs	r3, #0
 80142dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80142de:	2300      	movs	r3, #0
 80142e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80142e2:	1d3a      	adds	r2, r7, #4
 80142e4:	f107 0108 	add.w	r1, r7, #8
 80142e8:	f107 030c 	add.w	r3, r7, #12
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fd fd33 	bl	8011d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80142f2:	6879      	ldr	r1, [r7, #4]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	9202      	str	r2, [sp, #8]
 80142fa:	9301      	str	r3, [sp, #4]
 80142fc:	2302      	movs	r3, #2
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	2300      	movs	r3, #0
 8014302:	460a      	mov	r2, r1
 8014304:	4910      	ldr	r1, [pc, #64]	; (8014348 <xTimerCreateTimerTask+0x84>)
 8014306:	4811      	ldr	r0, [pc, #68]	; (801434c <xTimerCreateTimerTask+0x88>)
 8014308:	f7fe fe02 	bl	8012f10 <xTaskCreateStatic>
 801430c:	4603      	mov	r3, r0
 801430e:	4a10      	ldr	r2, [pc, #64]	; (8014350 <xTimerCreateTimerTask+0x8c>)
 8014310:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014312:	4b0f      	ldr	r3, [pc, #60]	; (8014350 <xTimerCreateTimerTask+0x8c>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d001      	beq.n	801431e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801431a:	2301      	movs	r3, #1
 801431c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d10a      	bne.n	801433a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014328:	f383 8811 	msr	BASEPRI, r3
 801432c:	f3bf 8f6f 	isb	sy
 8014330:	f3bf 8f4f 	dsb	sy
 8014334:	613b      	str	r3, [r7, #16]
}
 8014336:	bf00      	nop
 8014338:	e7fe      	b.n	8014338 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801433a:	697b      	ldr	r3, [r7, #20]
}
 801433c:	4618      	mov	r0, r3
 801433e:	3718      	adds	r7, #24
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	2000256c 	.word	0x2000256c
 8014348:	0801a154 	.word	0x0801a154
 801434c:	08014489 	.word	0x08014489
 8014350:	20002570 	.word	0x20002570

08014354 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b08a      	sub	sp, #40	; 0x28
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	607a      	str	r2, [r7, #4]
 8014360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014362:	2300      	movs	r3, #0
 8014364:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10a      	bne.n	8014382 <xTimerGenericCommand+0x2e>
	__asm volatile
 801436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014370:	f383 8811 	msr	BASEPRI, r3
 8014374:	f3bf 8f6f 	isb	sy
 8014378:	f3bf 8f4f 	dsb	sy
 801437c:	623b      	str	r3, [r7, #32]
}
 801437e:	bf00      	nop
 8014380:	e7fe      	b.n	8014380 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014382:	4b1a      	ldr	r3, [pc, #104]	; (80143ec <xTimerGenericCommand+0x98>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d02a      	beq.n	80143e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	2b05      	cmp	r3, #5
 801439a:	dc18      	bgt.n	80143ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801439c:	f7ff fdb4 	bl	8013f08 <xTaskGetSchedulerState>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b02      	cmp	r3, #2
 80143a4:	d109      	bne.n	80143ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80143a6:	4b11      	ldr	r3, [pc, #68]	; (80143ec <xTimerGenericCommand+0x98>)
 80143a8:	6818      	ldr	r0, [r3, #0]
 80143aa:	f107 0110 	add.w	r1, r7, #16
 80143ae:	2300      	movs	r3, #0
 80143b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143b2:	f7fd ff47 	bl	8012244 <xQueueGenericSend>
 80143b6:	6278      	str	r0, [r7, #36]	; 0x24
 80143b8:	e012      	b.n	80143e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80143ba:	4b0c      	ldr	r3, [pc, #48]	; (80143ec <xTimerGenericCommand+0x98>)
 80143bc:	6818      	ldr	r0, [r3, #0]
 80143be:	f107 0110 	add.w	r1, r7, #16
 80143c2:	2300      	movs	r3, #0
 80143c4:	2200      	movs	r2, #0
 80143c6:	f7fd ff3d 	bl	8012244 <xQueueGenericSend>
 80143ca:	6278      	str	r0, [r7, #36]	; 0x24
 80143cc:	e008      	b.n	80143e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80143ce:	4b07      	ldr	r3, [pc, #28]	; (80143ec <xTimerGenericCommand+0x98>)
 80143d0:	6818      	ldr	r0, [r3, #0]
 80143d2:	f107 0110 	add.w	r1, r7, #16
 80143d6:	2300      	movs	r3, #0
 80143d8:	683a      	ldr	r2, [r7, #0]
 80143da:	f7fe f831 	bl	8012440 <xQueueGenericSendFromISR>
 80143de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80143e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3728      	adds	r7, #40	; 0x28
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	2000256c 	.word	0x2000256c

080143f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b088      	sub	sp, #32
 80143f4:	af02      	add	r7, sp, #8
 80143f6:	6078      	str	r0, [r7, #4]
 80143f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143fa:	4b22      	ldr	r3, [pc, #136]	; (8014484 <prvProcessExpiredTimer+0x94>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	68db      	ldr	r3, [r3, #12]
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	3304      	adds	r3, #4
 8014408:	4618      	mov	r0, r3
 801440a:	f7fd fd49 	bl	8011ea0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014414:	f003 0304 	and.w	r3, r3, #4
 8014418:	2b00      	cmp	r3, #0
 801441a:	d022      	beq.n	8014462 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801441c:	697b      	ldr	r3, [r7, #20]
 801441e:	699a      	ldr	r2, [r3, #24]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	18d1      	adds	r1, r2, r3
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	683a      	ldr	r2, [r7, #0]
 8014428:	6978      	ldr	r0, [r7, #20]
 801442a:	f000 f8d1 	bl	80145d0 <prvInsertTimerInActiveList>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d01f      	beq.n	8014474 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014434:	2300      	movs	r3, #0
 8014436:	9300      	str	r3, [sp, #0]
 8014438:	2300      	movs	r3, #0
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	2100      	movs	r1, #0
 801443e:	6978      	ldr	r0, [r7, #20]
 8014440:	f7ff ff88 	bl	8014354 <xTimerGenericCommand>
 8014444:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014446:	693b      	ldr	r3, [r7, #16]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d113      	bne.n	8014474 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801444c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014450:	f383 8811 	msr	BASEPRI, r3
 8014454:	f3bf 8f6f 	isb	sy
 8014458:	f3bf 8f4f 	dsb	sy
 801445c:	60fb      	str	r3, [r7, #12]
}
 801445e:	bf00      	nop
 8014460:	e7fe      	b.n	8014460 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014468:	f023 0301 	bic.w	r3, r3, #1
 801446c:	b2da      	uxtb	r2, r3
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	6a1b      	ldr	r3, [r3, #32]
 8014478:	6978      	ldr	r0, [r7, #20]
 801447a:	4798      	blx	r3
}
 801447c:	bf00      	nop
 801447e:	3718      	adds	r7, #24
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	20002564 	.word	0x20002564

08014488 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014490:	f107 0308 	add.w	r3, r7, #8
 8014494:	4618      	mov	r0, r3
 8014496:	f000 f857 	bl	8014548 <prvGetNextExpireTime>
 801449a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	4619      	mov	r1, r3
 80144a0:	68f8      	ldr	r0, [r7, #12]
 80144a2:	f000 f803 	bl	80144ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80144a6:	f000 f8d5 	bl	8014654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80144aa:	e7f1      	b.n	8014490 <prvTimerTask+0x8>

080144ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80144b6:	f7ff f945 	bl	8013744 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80144ba:	f107 0308 	add.w	r3, r7, #8
 80144be:	4618      	mov	r0, r3
 80144c0:	f000 f866 	bl	8014590 <prvSampleTimeNow>
 80144c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80144c6:	68bb      	ldr	r3, [r7, #8]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d130      	bne.n	801452e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d10a      	bne.n	80144e8 <prvProcessTimerOrBlockTask+0x3c>
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d806      	bhi.n	80144e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80144da:	f7ff f941 	bl	8013760 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80144de:	68f9      	ldr	r1, [r7, #12]
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7ff ff85 	bl	80143f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80144e6:	e024      	b.n	8014532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d008      	beq.n	8014500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80144ee:	4b13      	ldr	r3, [pc, #76]	; (801453c <prvProcessTimerOrBlockTask+0x90>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d101      	bne.n	80144fc <prvProcessTimerOrBlockTask+0x50>
 80144f8:	2301      	movs	r3, #1
 80144fa:	e000      	b.n	80144fe <prvProcessTimerOrBlockTask+0x52>
 80144fc:	2300      	movs	r3, #0
 80144fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014500:	4b0f      	ldr	r3, [pc, #60]	; (8014540 <prvProcessTimerOrBlockTask+0x94>)
 8014502:	6818      	ldr	r0, [r3, #0]
 8014504:	687a      	ldr	r2, [r7, #4]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	4619      	mov	r1, r3
 801450e:	f7fe fccb 	bl	8012ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014512:	f7ff f925 	bl	8013760 <xTaskResumeAll>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d10a      	bne.n	8014532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801451c:	4b09      	ldr	r3, [pc, #36]	; (8014544 <prvProcessTimerOrBlockTask+0x98>)
 801451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014522:	601a      	str	r2, [r3, #0]
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	f3bf 8f6f 	isb	sy
}
 801452c:	e001      	b.n	8014532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801452e:	f7ff f917 	bl	8013760 <xTaskResumeAll>
}
 8014532:	bf00      	nop
 8014534:	3710      	adds	r7, #16
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}
 801453a:	bf00      	nop
 801453c:	20002568 	.word	0x20002568
 8014540:	2000256c 	.word	0x2000256c
 8014544:	e000ed04 	.word	0xe000ed04

08014548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014548:	b480      	push	{r7}
 801454a:	b085      	sub	sp, #20
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014550:	4b0e      	ldr	r3, [pc, #56]	; (801458c <prvGetNextExpireTime+0x44>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d101      	bne.n	801455e <prvGetNextExpireTime+0x16>
 801455a:	2201      	movs	r2, #1
 801455c:	e000      	b.n	8014560 <prvGetNextExpireTime+0x18>
 801455e:	2200      	movs	r2, #0
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d105      	bne.n	8014578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801456c:	4b07      	ldr	r3, [pc, #28]	; (801458c <prvGetNextExpireTime+0x44>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	60fb      	str	r3, [r7, #12]
 8014576:	e001      	b.n	801457c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014578:	2300      	movs	r3, #0
 801457a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801457c:	68fb      	ldr	r3, [r7, #12]
}
 801457e:	4618      	mov	r0, r3
 8014580:	3714      	adds	r7, #20
 8014582:	46bd      	mov	sp, r7
 8014584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	20002564 	.word	0x20002564

08014590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b084      	sub	sp, #16
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014598:	f7ff f980 	bl	801389c <xTaskGetTickCount>
 801459c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801459e:	4b0b      	ldr	r3, [pc, #44]	; (80145cc <prvSampleTimeNow+0x3c>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	68fa      	ldr	r2, [r7, #12]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d205      	bcs.n	80145b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80145a8:	f000 f936 	bl	8014818 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2201      	movs	r2, #1
 80145b0:	601a      	str	r2, [r3, #0]
 80145b2:	e002      	b.n	80145ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80145ba:	4a04      	ldr	r2, [pc, #16]	; (80145cc <prvSampleTimeNow+0x3c>)
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80145c0:	68fb      	ldr	r3, [r7, #12]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}
 80145ca:	bf00      	nop
 80145cc:	20002574 	.word	0x20002574

080145d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b086      	sub	sp, #24
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
 80145dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80145de:	2300      	movs	r3, #0
 80145e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	68fa      	ldr	r2, [r7, #12]
 80145ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d812      	bhi.n	801461c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	1ad2      	subs	r2, r2, r3
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	699b      	ldr	r3, [r3, #24]
 8014600:	429a      	cmp	r2, r3
 8014602:	d302      	bcc.n	801460a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014604:	2301      	movs	r3, #1
 8014606:	617b      	str	r3, [r7, #20]
 8014608:	e01b      	b.n	8014642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801460a:	4b10      	ldr	r3, [pc, #64]	; (801464c <prvInsertTimerInActiveList+0x7c>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	3304      	adds	r3, #4
 8014612:	4619      	mov	r1, r3
 8014614:	4610      	mov	r0, r2
 8014616:	f7fd fc0a 	bl	8011e2e <vListInsert>
 801461a:	e012      	b.n	8014642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	429a      	cmp	r2, r3
 8014622:	d206      	bcs.n	8014632 <prvInsertTimerInActiveList+0x62>
 8014624:	68ba      	ldr	r2, [r7, #8]
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	429a      	cmp	r2, r3
 801462a:	d302      	bcc.n	8014632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801462c:	2301      	movs	r3, #1
 801462e:	617b      	str	r3, [r7, #20]
 8014630:	e007      	b.n	8014642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014632:	4b07      	ldr	r3, [pc, #28]	; (8014650 <prvInsertTimerInActiveList+0x80>)
 8014634:	681a      	ldr	r2, [r3, #0]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	3304      	adds	r3, #4
 801463a:	4619      	mov	r1, r3
 801463c:	4610      	mov	r0, r2
 801463e:	f7fd fbf6 	bl	8011e2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014642:	697b      	ldr	r3, [r7, #20]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3718      	adds	r7, #24
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	20002568 	.word	0x20002568
 8014650:	20002564 	.word	0x20002564

08014654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b08e      	sub	sp, #56	; 0x38
 8014658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801465a:	e0ca      	b.n	80147f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2b00      	cmp	r3, #0
 8014660:	da18      	bge.n	8014694 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014662:	1d3b      	adds	r3, r7, #4
 8014664:	3304      	adds	r3, #4
 8014666:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466a:	2b00      	cmp	r3, #0
 801466c:	d10a      	bne.n	8014684 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	f3bf 8f6f 	isb	sy
 801467a:	f3bf 8f4f 	dsb	sy
 801467e:	61fb      	str	r3, [r7, #28]
}
 8014680:	bf00      	nop
 8014682:	e7fe      	b.n	8014682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801468a:	6850      	ldr	r0, [r2, #4]
 801468c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801468e:	6892      	ldr	r2, [r2, #8]
 8014690:	4611      	mov	r1, r2
 8014692:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2b00      	cmp	r3, #0
 8014698:	f2c0 80aa 	blt.w	80147f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80146a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a2:	695b      	ldr	r3, [r3, #20]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d004      	beq.n	80146b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80146a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146aa:	3304      	adds	r3, #4
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7fd fbf7 	bl	8011ea0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80146b2:	463b      	mov	r3, r7
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7ff ff6b 	bl	8014590 <prvSampleTimeNow>
 80146ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b09      	cmp	r3, #9
 80146c0:	f200 8097 	bhi.w	80147f2 <prvProcessReceivedCommands+0x19e>
 80146c4:	a201      	add	r2, pc, #4	; (adr r2, 80146cc <prvProcessReceivedCommands+0x78>)
 80146c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146ca:	bf00      	nop
 80146cc:	080146f5 	.word	0x080146f5
 80146d0:	080146f5 	.word	0x080146f5
 80146d4:	080146f5 	.word	0x080146f5
 80146d8:	08014769 	.word	0x08014769
 80146dc:	0801477d 	.word	0x0801477d
 80146e0:	080147c7 	.word	0x080147c7
 80146e4:	080146f5 	.word	0x080146f5
 80146e8:	080146f5 	.word	0x080146f5
 80146ec:	08014769 	.word	0x08014769
 80146f0:	0801477d 	.word	0x0801477d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80146f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146fa:	f043 0301 	orr.w	r3, r3, #1
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014702:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014706:	68ba      	ldr	r2, [r7, #8]
 8014708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470a:	699b      	ldr	r3, [r3, #24]
 801470c:	18d1      	adds	r1, r2, r3
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014712:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014714:	f7ff ff5c 	bl	80145d0 <prvInsertTimerInActiveList>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	d069      	beq.n	80147f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014720:	6a1b      	ldr	r3, [r3, #32]
 8014722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801472c:	f003 0304 	and.w	r3, r3, #4
 8014730:	2b00      	cmp	r3, #0
 8014732:	d05e      	beq.n	80147f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014738:	699b      	ldr	r3, [r3, #24]
 801473a:	441a      	add	r2, r3
 801473c:	2300      	movs	r3, #0
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	2300      	movs	r3, #0
 8014742:	2100      	movs	r1, #0
 8014744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014746:	f7ff fe05 	bl	8014354 <xTimerGenericCommand>
 801474a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801474c:	6a3b      	ldr	r3, [r7, #32]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d14f      	bne.n	80147f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014756:	f383 8811 	msr	BASEPRI, r3
 801475a:	f3bf 8f6f 	isb	sy
 801475e:	f3bf 8f4f 	dsb	sy
 8014762:	61bb      	str	r3, [r7, #24]
}
 8014764:	bf00      	nop
 8014766:	e7fe      	b.n	8014766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801476e:	f023 0301 	bic.w	r3, r3, #1
 8014772:	b2da      	uxtb	r2, r3
 8014774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801477a:	e03a      	b.n	80147f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014782:	f043 0301 	orr.w	r3, r3, #1
 8014786:	b2da      	uxtb	r2, r3
 8014788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801478a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801478e:	68ba      	ldr	r2, [r7, #8]
 8014790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014796:	699b      	ldr	r3, [r3, #24]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d10a      	bne.n	80147b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a0:	f383 8811 	msr	BASEPRI, r3
 80147a4:	f3bf 8f6f 	isb	sy
 80147a8:	f3bf 8f4f 	dsb	sy
 80147ac:	617b      	str	r3, [r7, #20]
}
 80147ae:	bf00      	nop
 80147b0:	e7fe      	b.n	80147b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80147b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b4:	699a      	ldr	r2, [r3, #24]
 80147b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b8:	18d1      	adds	r1, r2, r3
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147c0:	f7ff ff06 	bl	80145d0 <prvInsertTimerInActiveList>
					break;
 80147c4:	e015      	b.n	80147f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80147c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147cc:	f003 0302 	and.w	r3, r3, #2
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d103      	bne.n	80147dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80147d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147d6:	f000 fbdb 	bl	8014f90 <vPortFree>
 80147da:	e00a      	b.n	80147f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80147dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80147e2:	f023 0301 	bic.w	r3, r3, #1
 80147e6:	b2da      	uxtb	r2, r3
 80147e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80147ee:	e000      	b.n	80147f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80147f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80147f2:	4b08      	ldr	r3, [pc, #32]	; (8014814 <prvProcessReceivedCommands+0x1c0>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	1d39      	adds	r1, r7, #4
 80147f8:	2200      	movs	r2, #0
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fd ff48 	bl	8012690 <xQueueReceive>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	f47f af2a 	bne.w	801465c <prvProcessReceivedCommands+0x8>
	}
}
 8014808:	bf00      	nop
 801480a:	bf00      	nop
 801480c:	3730      	adds	r7, #48	; 0x30
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	2000256c 	.word	0x2000256c

08014818 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b088      	sub	sp, #32
 801481c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801481e:	e048      	b.n	80148b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014820:	4b2d      	ldr	r3, [pc, #180]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	68db      	ldr	r3, [r3, #12]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801482a:	4b2b      	ldr	r3, [pc, #172]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	68db      	ldr	r3, [r3, #12]
 8014830:	68db      	ldr	r3, [r3, #12]
 8014832:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	3304      	adds	r3, #4
 8014838:	4618      	mov	r0, r3
 801483a:	f7fd fb31 	bl	8011ea0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	6a1b      	ldr	r3, [r3, #32]
 8014842:	68f8      	ldr	r0, [r7, #12]
 8014844:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801484c:	f003 0304 	and.w	r3, r3, #4
 8014850:	2b00      	cmp	r3, #0
 8014852:	d02e      	beq.n	80148b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	699b      	ldr	r3, [r3, #24]
 8014858:	693a      	ldr	r2, [r7, #16]
 801485a:	4413      	add	r3, r2
 801485c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	429a      	cmp	r2, r3
 8014864:	d90e      	bls.n	8014884 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	68ba      	ldr	r2, [r7, #8]
 801486a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014872:	4b19      	ldr	r3, [pc, #100]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 8014874:	681a      	ldr	r2, [r3, #0]
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3304      	adds	r3, #4
 801487a:	4619      	mov	r1, r3
 801487c:	4610      	mov	r0, r2
 801487e:	f7fd fad6 	bl	8011e2e <vListInsert>
 8014882:	e016      	b.n	80148b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014884:	2300      	movs	r3, #0
 8014886:	9300      	str	r3, [sp, #0]
 8014888:	2300      	movs	r3, #0
 801488a:	693a      	ldr	r2, [r7, #16]
 801488c:	2100      	movs	r1, #0
 801488e:	68f8      	ldr	r0, [r7, #12]
 8014890:	f7ff fd60 	bl	8014354 <xTimerGenericCommand>
 8014894:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d10a      	bne.n	80148b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	f383 8811 	msr	BASEPRI, r3
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	603b      	str	r3, [r7, #0]
}
 80148ae:	bf00      	nop
 80148b0:	e7fe      	b.n	80148b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80148b2:	4b09      	ldr	r3, [pc, #36]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d1b1      	bne.n	8014820 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80148bc:	4b06      	ldr	r3, [pc, #24]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80148c2:	4b06      	ldr	r3, [pc, #24]	; (80148dc <prvSwitchTimerLists+0xc4>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4a04      	ldr	r2, [pc, #16]	; (80148d8 <prvSwitchTimerLists+0xc0>)
 80148c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80148ca:	4a04      	ldr	r2, [pc, #16]	; (80148dc <prvSwitchTimerLists+0xc4>)
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	6013      	str	r3, [r2, #0]
}
 80148d0:	bf00      	nop
 80148d2:	3718      	adds	r7, #24
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd80      	pop	{r7, pc}
 80148d8:	20002564 	.word	0x20002564
 80148dc:	20002568 	.word	0x20002568

080148e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80148e6:	f000 f965 	bl	8014bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80148ea:	4b15      	ldr	r3, [pc, #84]	; (8014940 <prvCheckForValidListAndQueue+0x60>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d120      	bne.n	8014934 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80148f2:	4814      	ldr	r0, [pc, #80]	; (8014944 <prvCheckForValidListAndQueue+0x64>)
 80148f4:	f7fd fa4a 	bl	8011d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80148f8:	4813      	ldr	r0, [pc, #76]	; (8014948 <prvCheckForValidListAndQueue+0x68>)
 80148fa:	f7fd fa47 	bl	8011d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80148fe:	4b13      	ldr	r3, [pc, #76]	; (801494c <prvCheckForValidListAndQueue+0x6c>)
 8014900:	4a10      	ldr	r2, [pc, #64]	; (8014944 <prvCheckForValidListAndQueue+0x64>)
 8014902:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014904:	4b12      	ldr	r3, [pc, #72]	; (8014950 <prvCheckForValidListAndQueue+0x70>)
 8014906:	4a10      	ldr	r2, [pc, #64]	; (8014948 <prvCheckForValidListAndQueue+0x68>)
 8014908:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801490a:	2300      	movs	r3, #0
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	4b11      	ldr	r3, [pc, #68]	; (8014954 <prvCheckForValidListAndQueue+0x74>)
 8014910:	4a11      	ldr	r2, [pc, #68]	; (8014958 <prvCheckForValidListAndQueue+0x78>)
 8014912:	2110      	movs	r1, #16
 8014914:	200a      	movs	r0, #10
 8014916:	f7fd fb55 	bl	8011fc4 <xQueueGenericCreateStatic>
 801491a:	4603      	mov	r3, r0
 801491c:	4a08      	ldr	r2, [pc, #32]	; (8014940 <prvCheckForValidListAndQueue+0x60>)
 801491e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014920:	4b07      	ldr	r3, [pc, #28]	; (8014940 <prvCheckForValidListAndQueue+0x60>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d005      	beq.n	8014934 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014928:	4b05      	ldr	r3, [pc, #20]	; (8014940 <prvCheckForValidListAndQueue+0x60>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	490b      	ldr	r1, [pc, #44]	; (801495c <prvCheckForValidListAndQueue+0x7c>)
 801492e:	4618      	mov	r0, r3
 8014930:	f7fe fa66 	bl	8012e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014934:	f000 f96e 	bl	8014c14 <vPortExitCritical>
}
 8014938:	bf00      	nop
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	2000256c 	.word	0x2000256c
 8014944:	2000253c 	.word	0x2000253c
 8014948:	20002550 	.word	0x20002550
 801494c:	20002564 	.word	0x20002564
 8014950:	20002568 	.word	0x20002568
 8014954:	20002618 	.word	0x20002618
 8014958:	20002578 	.word	0x20002578
 801495c:	0801a15c 	.word	0x0801a15c

08014960 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014960:	b480      	push	{r7}
 8014962:	b085      	sub	sp, #20
 8014964:	af00      	add	r7, sp, #0
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	3b04      	subs	r3, #4
 8014970:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	3b04      	subs	r3, #4
 801497e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	f023 0201 	bic.w	r2, r3, #1
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	3b04      	subs	r3, #4
 801498e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014990:	4a0c      	ldr	r2, [pc, #48]	; (80149c4 <pxPortInitialiseStack+0x64>)
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	3b14      	subs	r3, #20
 801499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3b04      	subs	r3, #4
 80149a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	f06f 0202 	mvn.w	r2, #2
 80149ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	3b20      	subs	r3, #32
 80149b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80149b6:	68fb      	ldr	r3, [r7, #12]
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	3714      	adds	r7, #20
 80149bc:	46bd      	mov	sp, r7
 80149be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c2:	4770      	bx	lr
 80149c4:	080149c9 	.word	0x080149c9

080149c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80149c8:	b480      	push	{r7}
 80149ca:	b085      	sub	sp, #20
 80149cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80149ce:	2300      	movs	r3, #0
 80149d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80149d2:	4b12      	ldr	r3, [pc, #72]	; (8014a1c <prvTaskExitError+0x54>)
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149da:	d00a      	beq.n	80149f2 <prvTaskExitError+0x2a>
	__asm volatile
 80149dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e0:	f383 8811 	msr	BASEPRI, r3
 80149e4:	f3bf 8f6f 	isb	sy
 80149e8:	f3bf 8f4f 	dsb	sy
 80149ec:	60fb      	str	r3, [r7, #12]
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <prvTaskExitError+0x28>
	__asm volatile
 80149f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149f6:	f383 8811 	msr	BASEPRI, r3
 80149fa:	f3bf 8f6f 	isb	sy
 80149fe:	f3bf 8f4f 	dsb	sy
 8014a02:	60bb      	str	r3, [r7, #8]
}
 8014a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014a06:	bf00      	nop
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d0fc      	beq.n	8014a08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014a0e:	bf00      	nop
 8014a10:	bf00      	nop
 8014a12:	3714      	adds	r7, #20
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr
 8014a1c:	20000428 	.word	0x20000428

08014a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014a20:	4b07      	ldr	r3, [pc, #28]	; (8014a40 <pxCurrentTCBConst2>)
 8014a22:	6819      	ldr	r1, [r3, #0]
 8014a24:	6808      	ldr	r0, [r1, #0]
 8014a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2a:	f380 8809 	msr	PSP, r0
 8014a2e:	f3bf 8f6f 	isb	sy
 8014a32:	f04f 0000 	mov.w	r0, #0
 8014a36:	f380 8811 	msr	BASEPRI, r0
 8014a3a:	4770      	bx	lr
 8014a3c:	f3af 8000 	nop.w

08014a40 <pxCurrentTCBConst2>:
 8014a40:	2000203c 	.word	0x2000203c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014a44:	bf00      	nop
 8014a46:	bf00      	nop

08014a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014a48:	4808      	ldr	r0, [pc, #32]	; (8014a6c <prvPortStartFirstTask+0x24>)
 8014a4a:	6800      	ldr	r0, [r0, #0]
 8014a4c:	6800      	ldr	r0, [r0, #0]
 8014a4e:	f380 8808 	msr	MSP, r0
 8014a52:	f04f 0000 	mov.w	r0, #0
 8014a56:	f380 8814 	msr	CONTROL, r0
 8014a5a:	b662      	cpsie	i
 8014a5c:	b661      	cpsie	f
 8014a5e:	f3bf 8f4f 	dsb	sy
 8014a62:	f3bf 8f6f 	isb	sy
 8014a66:	df00      	svc	0
 8014a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014a6a:	bf00      	nop
 8014a6c:	e000ed08 	.word	0xe000ed08

08014a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b086      	sub	sp, #24
 8014a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014a76:	4b46      	ldr	r3, [pc, #280]	; (8014b90 <xPortStartScheduler+0x120>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	4a46      	ldr	r2, [pc, #280]	; (8014b94 <xPortStartScheduler+0x124>)
 8014a7c:	4293      	cmp	r3, r2
 8014a7e:	d10a      	bne.n	8014a96 <xPortStartScheduler+0x26>
	__asm volatile
 8014a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	613b      	str	r3, [r7, #16]
}
 8014a92:	bf00      	nop
 8014a94:	e7fe      	b.n	8014a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014a96:	4b3e      	ldr	r3, [pc, #248]	; (8014b90 <xPortStartScheduler+0x120>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	4a3f      	ldr	r2, [pc, #252]	; (8014b98 <xPortStartScheduler+0x128>)
 8014a9c:	4293      	cmp	r3, r2
 8014a9e:	d10a      	bne.n	8014ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8014aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	60fb      	str	r3, [r7, #12]
}
 8014ab2:	bf00      	nop
 8014ab4:	e7fe      	b.n	8014ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014ab6:	4b39      	ldr	r3, [pc, #228]	; (8014b9c <xPortStartScheduler+0x12c>)
 8014ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	22ff      	movs	r2, #255	; 0xff
 8014ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	781b      	ldrb	r3, [r3, #0]
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014ad0:	78fb      	ldrb	r3, [r7, #3]
 8014ad2:	b2db      	uxtb	r3, r3
 8014ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014ad8:	b2da      	uxtb	r2, r3
 8014ada:	4b31      	ldr	r3, [pc, #196]	; (8014ba0 <xPortStartScheduler+0x130>)
 8014adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014ade:	4b31      	ldr	r3, [pc, #196]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014ae0:	2207      	movs	r2, #7
 8014ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014ae4:	e009      	b.n	8014afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014ae6:	4b2f      	ldr	r3, [pc, #188]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	3b01      	subs	r3, #1
 8014aec:	4a2d      	ldr	r2, [pc, #180]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014af0:	78fb      	ldrb	r3, [r7, #3]
 8014af2:	b2db      	uxtb	r3, r3
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	b2db      	uxtb	r3, r3
 8014af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014afa:	78fb      	ldrb	r3, [r7, #3]
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b02:	2b80      	cmp	r3, #128	; 0x80
 8014b04:	d0ef      	beq.n	8014ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014b06:	4b27      	ldr	r3, [pc, #156]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f1c3 0307 	rsb	r3, r3, #7
 8014b0e:	2b04      	cmp	r3, #4
 8014b10:	d00a      	beq.n	8014b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8014b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b16:	f383 8811 	msr	BASEPRI, r3
 8014b1a:	f3bf 8f6f 	isb	sy
 8014b1e:	f3bf 8f4f 	dsb	sy
 8014b22:	60bb      	str	r3, [r7, #8]
}
 8014b24:	bf00      	nop
 8014b26:	e7fe      	b.n	8014b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014b28:	4b1e      	ldr	r3, [pc, #120]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	021b      	lsls	r3, r3, #8
 8014b2e:	4a1d      	ldr	r2, [pc, #116]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014b32:	4b1c      	ldr	r3, [pc, #112]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014b3a:	4a1a      	ldr	r2, [pc, #104]	; (8014ba4 <xPortStartScheduler+0x134>)
 8014b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014b46:	4b18      	ldr	r3, [pc, #96]	; (8014ba8 <xPortStartScheduler+0x138>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a17      	ldr	r2, [pc, #92]	; (8014ba8 <xPortStartScheduler+0x138>)
 8014b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014b52:	4b15      	ldr	r3, [pc, #84]	; (8014ba8 <xPortStartScheduler+0x138>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4a14      	ldr	r2, [pc, #80]	; (8014ba8 <xPortStartScheduler+0x138>)
 8014b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014b5e:	f000 f8dd 	bl	8014d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014b62:	4b12      	ldr	r3, [pc, #72]	; (8014bac <xPortStartScheduler+0x13c>)
 8014b64:	2200      	movs	r2, #0
 8014b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014b68:	f000 f8fc 	bl	8014d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014b6c:	4b10      	ldr	r3, [pc, #64]	; (8014bb0 <xPortStartScheduler+0x140>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	4a0f      	ldr	r2, [pc, #60]	; (8014bb0 <xPortStartScheduler+0x140>)
 8014b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014b78:	f7ff ff66 	bl	8014a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014b7c:	f7fe ff58 	bl	8013a30 <vTaskSwitchContext>
	prvTaskExitError();
 8014b80:	f7ff ff22 	bl	80149c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014b84:	2300      	movs	r3, #0
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3718      	adds	r7, #24
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}
 8014b8e:	bf00      	nop
 8014b90:	e000ed00 	.word	0xe000ed00
 8014b94:	410fc271 	.word	0x410fc271
 8014b98:	410fc270 	.word	0x410fc270
 8014b9c:	e000e400 	.word	0xe000e400
 8014ba0:	20002668 	.word	0x20002668
 8014ba4:	2000266c 	.word	0x2000266c
 8014ba8:	e000ed20 	.word	0xe000ed20
 8014bac:	20000428 	.word	0x20000428
 8014bb0:	e000ef34 	.word	0xe000ef34

08014bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8014bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bbe:	f383 8811 	msr	BASEPRI, r3
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	f3bf 8f4f 	dsb	sy
 8014bca:	607b      	str	r3, [r7, #4]
}
 8014bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014bce:	4b0f      	ldr	r3, [pc, #60]	; (8014c0c <vPortEnterCritical+0x58>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	4a0d      	ldr	r2, [pc, #52]	; (8014c0c <vPortEnterCritical+0x58>)
 8014bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014bd8:	4b0c      	ldr	r3, [pc, #48]	; (8014c0c <vPortEnterCritical+0x58>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d10f      	bne.n	8014c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014be0:	4b0b      	ldr	r3, [pc, #44]	; (8014c10 <vPortEnterCritical+0x5c>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d00a      	beq.n	8014c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	f383 8811 	msr	BASEPRI, r3
 8014bf2:	f3bf 8f6f 	isb	sy
 8014bf6:	f3bf 8f4f 	dsb	sy
 8014bfa:	603b      	str	r3, [r7, #0]
}
 8014bfc:	bf00      	nop
 8014bfe:	e7fe      	b.n	8014bfe <vPortEnterCritical+0x4a>
	}
}
 8014c00:	bf00      	nop
 8014c02:	370c      	adds	r7, #12
 8014c04:	46bd      	mov	sp, r7
 8014c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0a:	4770      	bx	lr
 8014c0c:	20000428 	.word	0x20000428
 8014c10:	e000ed04 	.word	0xe000ed04

08014c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014c14:	b480      	push	{r7}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014c1a:	4b12      	ldr	r3, [pc, #72]	; (8014c64 <vPortExitCritical+0x50>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d10a      	bne.n	8014c38 <vPortExitCritical+0x24>
	__asm volatile
 8014c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c26:	f383 8811 	msr	BASEPRI, r3
 8014c2a:	f3bf 8f6f 	isb	sy
 8014c2e:	f3bf 8f4f 	dsb	sy
 8014c32:	607b      	str	r3, [r7, #4]
}
 8014c34:	bf00      	nop
 8014c36:	e7fe      	b.n	8014c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014c38:	4b0a      	ldr	r3, [pc, #40]	; (8014c64 <vPortExitCritical+0x50>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	4a09      	ldr	r2, [pc, #36]	; (8014c64 <vPortExitCritical+0x50>)
 8014c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014c42:	4b08      	ldr	r3, [pc, #32]	; (8014c64 <vPortExitCritical+0x50>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d105      	bne.n	8014c56 <vPortExitCritical+0x42>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	f383 8811 	msr	BASEPRI, r3
}
 8014c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014c56:	bf00      	nop
 8014c58:	370c      	adds	r7, #12
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c60:	4770      	bx	lr
 8014c62:	bf00      	nop
 8014c64:	20000428 	.word	0x20000428
	...

08014c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014c70:	f3ef 8009 	mrs	r0, PSP
 8014c74:	f3bf 8f6f 	isb	sy
 8014c78:	4b15      	ldr	r3, [pc, #84]	; (8014cd0 <pxCurrentTCBConst>)
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	f01e 0f10 	tst.w	lr, #16
 8014c80:	bf08      	it	eq
 8014c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8a:	6010      	str	r0, [r2, #0]
 8014c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014c94:	f380 8811 	msr	BASEPRI, r0
 8014c98:	f3bf 8f4f 	dsb	sy
 8014c9c:	f3bf 8f6f 	isb	sy
 8014ca0:	f7fe fec6 	bl	8013a30 <vTaskSwitchContext>
 8014ca4:	f04f 0000 	mov.w	r0, #0
 8014ca8:	f380 8811 	msr	BASEPRI, r0
 8014cac:	bc09      	pop	{r0, r3}
 8014cae:	6819      	ldr	r1, [r3, #0]
 8014cb0:	6808      	ldr	r0, [r1, #0]
 8014cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cb6:	f01e 0f10 	tst.w	lr, #16
 8014cba:	bf08      	it	eq
 8014cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014cc0:	f380 8809 	msr	PSP, r0
 8014cc4:	f3bf 8f6f 	isb	sy
 8014cc8:	4770      	bx	lr
 8014cca:	bf00      	nop
 8014ccc:	f3af 8000 	nop.w

08014cd0 <pxCurrentTCBConst>:
 8014cd0:	2000203c 	.word	0x2000203c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014cd4:	bf00      	nop
 8014cd6:	bf00      	nop

08014cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8014cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ce2:	f383 8811 	msr	BASEPRI, r3
 8014ce6:	f3bf 8f6f 	isb	sy
 8014cea:	f3bf 8f4f 	dsb	sy
 8014cee:	607b      	str	r3, [r7, #4]
}
 8014cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014cf2:	f7fe fde3 	bl	80138bc <xTaskIncrementTick>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d003      	beq.n	8014d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014cfc:	4b06      	ldr	r3, [pc, #24]	; (8014d18 <xPortSysTickHandler+0x40>)
 8014cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d02:	601a      	str	r2, [r3, #0]
 8014d04:	2300      	movs	r3, #0
 8014d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	f383 8811 	msr	BASEPRI, r3
}
 8014d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014d10:	bf00      	nop
 8014d12:	3708      	adds	r7, #8
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	e000ed04 	.word	0xe000ed04

08014d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014d1c:	b480      	push	{r7}
 8014d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014d20:	4b0b      	ldr	r3, [pc, #44]	; (8014d50 <vPortSetupTimerInterrupt+0x34>)
 8014d22:	2200      	movs	r2, #0
 8014d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014d26:	4b0b      	ldr	r3, [pc, #44]	; (8014d54 <vPortSetupTimerInterrupt+0x38>)
 8014d28:	2200      	movs	r2, #0
 8014d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014d2c:	4b0a      	ldr	r3, [pc, #40]	; (8014d58 <vPortSetupTimerInterrupt+0x3c>)
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	4a0a      	ldr	r2, [pc, #40]	; (8014d5c <vPortSetupTimerInterrupt+0x40>)
 8014d32:	fba2 2303 	umull	r2, r3, r2, r3
 8014d36:	099b      	lsrs	r3, r3, #6
 8014d38:	4a09      	ldr	r2, [pc, #36]	; (8014d60 <vPortSetupTimerInterrupt+0x44>)
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014d3e:	4b04      	ldr	r3, [pc, #16]	; (8014d50 <vPortSetupTimerInterrupt+0x34>)
 8014d40:	2207      	movs	r2, #7
 8014d42:	601a      	str	r2, [r3, #0]
}
 8014d44:	bf00      	nop
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	e000e010 	.word	0xe000e010
 8014d54:	e000e018 	.word	0xe000e018
 8014d58:	2000041c 	.word	0x2000041c
 8014d5c:	10624dd3 	.word	0x10624dd3
 8014d60:	e000e014 	.word	0xe000e014

08014d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014d74 <vPortEnableVFP+0x10>
 8014d68:	6801      	ldr	r1, [r0, #0]
 8014d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014d6e:	6001      	str	r1, [r0, #0]
 8014d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014d72:	bf00      	nop
 8014d74:	e000ed88 	.word	0xe000ed88

08014d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014d78:	b480      	push	{r7}
 8014d7a:	b085      	sub	sp, #20
 8014d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014d7e:	f3ef 8305 	mrs	r3, IPSR
 8014d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2b0f      	cmp	r3, #15
 8014d88:	d914      	bls.n	8014db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014d8a:	4a17      	ldr	r2, [pc, #92]	; (8014de8 <vPortValidateInterruptPriority+0x70>)
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	4413      	add	r3, r2
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014d94:	4b15      	ldr	r3, [pc, #84]	; (8014dec <vPortValidateInterruptPriority+0x74>)
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	7afa      	ldrb	r2, [r7, #11]
 8014d9a:	429a      	cmp	r2, r3
 8014d9c:	d20a      	bcs.n	8014db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	607b      	str	r3, [r7, #4]
}
 8014db0:	bf00      	nop
 8014db2:	e7fe      	b.n	8014db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014db4:	4b0e      	ldr	r3, [pc, #56]	; (8014df0 <vPortValidateInterruptPriority+0x78>)
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014dbc:	4b0d      	ldr	r3, [pc, #52]	; (8014df4 <vPortValidateInterruptPriority+0x7c>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d90a      	bls.n	8014dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	603b      	str	r3, [r7, #0]
}
 8014dd6:	bf00      	nop
 8014dd8:	e7fe      	b.n	8014dd8 <vPortValidateInterruptPriority+0x60>
	}
 8014dda:	bf00      	nop
 8014ddc:	3714      	adds	r7, #20
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop
 8014de8:	e000e3f0 	.word	0xe000e3f0
 8014dec:	20002668 	.word	0x20002668
 8014df0:	e000ed0c 	.word	0xe000ed0c
 8014df4:	2000266c 	.word	0x2000266c

08014df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b08a      	sub	sp, #40	; 0x28
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014e00:	2300      	movs	r3, #0
 8014e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014e04:	f7fe fc9e 	bl	8013744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014e08:	4b5b      	ldr	r3, [pc, #364]	; (8014f78 <pvPortMalloc+0x180>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d101      	bne.n	8014e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014e10:	f000 f920 	bl	8015054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014e14:	4b59      	ldr	r3, [pc, #356]	; (8014f7c <pvPortMalloc+0x184>)
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	4013      	ands	r3, r2
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f040 8093 	bne.w	8014f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d01d      	beq.n	8014e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014e28:	2208      	movs	r2, #8
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f003 0307 	and.w	r3, r3, #7
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d014      	beq.n	8014e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f023 0307 	bic.w	r3, r3, #7
 8014e40:	3308      	adds	r3, #8
 8014e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f003 0307 	and.w	r3, r3, #7
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d00a      	beq.n	8014e64 <pvPortMalloc+0x6c>
	__asm volatile
 8014e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e52:	f383 8811 	msr	BASEPRI, r3
 8014e56:	f3bf 8f6f 	isb	sy
 8014e5a:	f3bf 8f4f 	dsb	sy
 8014e5e:	617b      	str	r3, [r7, #20]
}
 8014e60:	bf00      	nop
 8014e62:	e7fe      	b.n	8014e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d06e      	beq.n	8014f48 <pvPortMalloc+0x150>
 8014e6a:	4b45      	ldr	r3, [pc, #276]	; (8014f80 <pvPortMalloc+0x188>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d869      	bhi.n	8014f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014e74:	4b43      	ldr	r3, [pc, #268]	; (8014f84 <pvPortMalloc+0x18c>)
 8014e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014e78:	4b42      	ldr	r3, [pc, #264]	; (8014f84 <pvPortMalloc+0x18c>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e7e:	e004      	b.n	8014e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d903      	bls.n	8014e9c <pvPortMalloc+0xa4>
 8014e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d1f1      	bne.n	8014e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014e9c:	4b36      	ldr	r3, [pc, #216]	; (8014f78 <pvPortMalloc+0x180>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	d050      	beq.n	8014f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ea6:	6a3b      	ldr	r3, [r7, #32]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2208      	movs	r2, #8
 8014eac:	4413      	add	r3, r2
 8014eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	6a3b      	ldr	r3, [r7, #32]
 8014eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eba:	685a      	ldr	r2, [r3, #4]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	1ad2      	subs	r2, r2, r3
 8014ec0:	2308      	movs	r3, #8
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	429a      	cmp	r2, r3
 8014ec6:	d91f      	bls.n	8014f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	4413      	add	r3, r2
 8014ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	f003 0307 	and.w	r3, r3, #7
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d00a      	beq.n	8014ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8014eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ede:	f383 8811 	msr	BASEPRI, r3
 8014ee2:	f3bf 8f6f 	isb	sy
 8014ee6:	f3bf 8f4f 	dsb	sy
 8014eea:	613b      	str	r3, [r7, #16]
}
 8014eec:	bf00      	nop
 8014eee:	e7fe      	b.n	8014eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	1ad2      	subs	r2, r2, r3
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014f02:	69b8      	ldr	r0, [r7, #24]
 8014f04:	f000 f908 	bl	8015118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014f08:	4b1d      	ldr	r3, [pc, #116]	; (8014f80 <pvPortMalloc+0x188>)
 8014f0a:	681a      	ldr	r2, [r3, #0]
 8014f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	1ad3      	subs	r3, r2, r3
 8014f12:	4a1b      	ldr	r2, [pc, #108]	; (8014f80 <pvPortMalloc+0x188>)
 8014f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014f16:	4b1a      	ldr	r3, [pc, #104]	; (8014f80 <pvPortMalloc+0x188>)
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	4b1b      	ldr	r3, [pc, #108]	; (8014f88 <pvPortMalloc+0x190>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d203      	bcs.n	8014f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014f22:	4b17      	ldr	r3, [pc, #92]	; (8014f80 <pvPortMalloc+0x188>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4a18      	ldr	r2, [pc, #96]	; (8014f88 <pvPortMalloc+0x190>)
 8014f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2c:	685a      	ldr	r2, [r3, #4]
 8014f2e:	4b13      	ldr	r3, [pc, #76]	; (8014f7c <pvPortMalloc+0x184>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	431a      	orrs	r2, r3
 8014f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014f3e:	4b13      	ldr	r3, [pc, #76]	; (8014f8c <pvPortMalloc+0x194>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	3301      	adds	r3, #1
 8014f44:	4a11      	ldr	r2, [pc, #68]	; (8014f8c <pvPortMalloc+0x194>)
 8014f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014f48:	f7fe fc0a 	bl	8013760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014f4c:	69fb      	ldr	r3, [r7, #28]
 8014f4e:	f003 0307 	and.w	r3, r3, #7
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d00a      	beq.n	8014f6c <pvPortMalloc+0x174>
	__asm volatile
 8014f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5a:	f383 8811 	msr	BASEPRI, r3
 8014f5e:	f3bf 8f6f 	isb	sy
 8014f62:	f3bf 8f4f 	dsb	sy
 8014f66:	60fb      	str	r3, [r7, #12]
}
 8014f68:	bf00      	nop
 8014f6a:	e7fe      	b.n	8014f6a <pvPortMalloc+0x172>
	return pvReturn;
 8014f6c:	69fb      	ldr	r3, [r7, #28]
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3728      	adds	r7, #40	; 0x28
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	20006278 	.word	0x20006278
 8014f7c:	2000628c 	.word	0x2000628c
 8014f80:	2000627c 	.word	0x2000627c
 8014f84:	20006270 	.word	0x20006270
 8014f88:	20006280 	.word	0x20006280
 8014f8c:	20006284 	.word	0x20006284

08014f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b086      	sub	sp, #24
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d04d      	beq.n	801503e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014fa2:	2308      	movs	r3, #8
 8014fa4:	425b      	negs	r3, r3
 8014fa6:	697a      	ldr	r2, [r7, #20]
 8014fa8:	4413      	add	r3, r2
 8014faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014fac:	697b      	ldr	r3, [r7, #20]
 8014fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	685a      	ldr	r2, [r3, #4]
 8014fb4:	4b24      	ldr	r3, [pc, #144]	; (8015048 <vPortFree+0xb8>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	4013      	ands	r3, r2
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d10a      	bne.n	8014fd4 <vPortFree+0x44>
	__asm volatile
 8014fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc2:	f383 8811 	msr	BASEPRI, r3
 8014fc6:	f3bf 8f6f 	isb	sy
 8014fca:	f3bf 8f4f 	dsb	sy
 8014fce:	60fb      	str	r3, [r7, #12]
}
 8014fd0:	bf00      	nop
 8014fd2:	e7fe      	b.n	8014fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d00a      	beq.n	8014ff2 <vPortFree+0x62>
	__asm volatile
 8014fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe0:	f383 8811 	msr	BASEPRI, r3
 8014fe4:	f3bf 8f6f 	isb	sy
 8014fe8:	f3bf 8f4f 	dsb	sy
 8014fec:	60bb      	str	r3, [r7, #8]
}
 8014fee:	bf00      	nop
 8014ff0:	e7fe      	b.n	8014ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	685a      	ldr	r2, [r3, #4]
 8014ff6:	4b14      	ldr	r3, [pc, #80]	; (8015048 <vPortFree+0xb8>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4013      	ands	r3, r2
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d01e      	beq.n	801503e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d11a      	bne.n	801503e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	685a      	ldr	r2, [r3, #4]
 801500c:	4b0e      	ldr	r3, [pc, #56]	; (8015048 <vPortFree+0xb8>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	43db      	mvns	r3, r3
 8015012:	401a      	ands	r2, r3
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015018:	f7fe fb94 	bl	8013744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	685a      	ldr	r2, [r3, #4]
 8015020:	4b0a      	ldr	r3, [pc, #40]	; (801504c <vPortFree+0xbc>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	4413      	add	r3, r2
 8015026:	4a09      	ldr	r2, [pc, #36]	; (801504c <vPortFree+0xbc>)
 8015028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801502a:	6938      	ldr	r0, [r7, #16]
 801502c:	f000 f874 	bl	8015118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015030:	4b07      	ldr	r3, [pc, #28]	; (8015050 <vPortFree+0xc0>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	3301      	adds	r3, #1
 8015036:	4a06      	ldr	r2, [pc, #24]	; (8015050 <vPortFree+0xc0>)
 8015038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801503a:	f7fe fb91 	bl	8013760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801503e:	bf00      	nop
 8015040:	3718      	adds	r7, #24
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}
 8015046:	bf00      	nop
 8015048:	2000628c 	.word	0x2000628c
 801504c:	2000627c 	.word	0x2000627c
 8015050:	20006288 	.word	0x20006288

08015054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015054:	b480      	push	{r7}
 8015056:	b085      	sub	sp, #20
 8015058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801505a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801505e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015060:	4b27      	ldr	r3, [pc, #156]	; (8015100 <prvHeapInit+0xac>)
 8015062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	f003 0307 	and.w	r3, r3, #7
 801506a:	2b00      	cmp	r3, #0
 801506c:	d00c      	beq.n	8015088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	3307      	adds	r3, #7
 8015072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f023 0307 	bic.w	r3, r3, #7
 801507a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801507c:	68ba      	ldr	r2, [r7, #8]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	4a1f      	ldr	r2, [pc, #124]	; (8015100 <prvHeapInit+0xac>)
 8015084:	4413      	add	r3, r2
 8015086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801508c:	4a1d      	ldr	r2, [pc, #116]	; (8015104 <prvHeapInit+0xb0>)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015092:	4b1c      	ldr	r3, [pc, #112]	; (8015104 <prvHeapInit+0xb0>)
 8015094:	2200      	movs	r2, #0
 8015096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	68ba      	ldr	r2, [r7, #8]
 801509c:	4413      	add	r3, r2
 801509e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80150a0:	2208      	movs	r2, #8
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	1a9b      	subs	r3, r3, r2
 80150a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f023 0307 	bic.w	r3, r3, #7
 80150ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	4a15      	ldr	r2, [pc, #84]	; (8015108 <prvHeapInit+0xb4>)
 80150b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80150b6:	4b14      	ldr	r3, [pc, #80]	; (8015108 <prvHeapInit+0xb4>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	2200      	movs	r2, #0
 80150bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80150be:	4b12      	ldr	r3, [pc, #72]	; (8015108 <prvHeapInit+0xb4>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	2200      	movs	r2, #0
 80150c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	1ad2      	subs	r2, r2, r3
 80150d0:	683b      	ldr	r3, [r7, #0]
 80150d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80150d4:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <prvHeapInit+0xb4>)
 80150d6:	681a      	ldr	r2, [r3, #0]
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	4a0a      	ldr	r2, [pc, #40]	; (801510c <prvHeapInit+0xb8>)
 80150e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	4a09      	ldr	r2, [pc, #36]	; (8015110 <prvHeapInit+0xbc>)
 80150ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80150ec:	4b09      	ldr	r3, [pc, #36]	; (8015114 <prvHeapInit+0xc0>)
 80150ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80150f2:	601a      	str	r2, [r3, #0]
}
 80150f4:	bf00      	nop
 80150f6:	3714      	adds	r7, #20
 80150f8:	46bd      	mov	sp, r7
 80150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fe:	4770      	bx	lr
 8015100:	20002670 	.word	0x20002670
 8015104:	20006270 	.word	0x20006270
 8015108:	20006278 	.word	0x20006278
 801510c:	20006280 	.word	0x20006280
 8015110:	2000627c 	.word	0x2000627c
 8015114:	2000628c 	.word	0x2000628c

08015118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015118:	b480      	push	{r7}
 801511a:	b085      	sub	sp, #20
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015120:	4b28      	ldr	r3, [pc, #160]	; (80151c4 <prvInsertBlockIntoFreeList+0xac>)
 8015122:	60fb      	str	r3, [r7, #12]
 8015124:	e002      	b.n	801512c <prvInsertBlockIntoFreeList+0x14>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	60fb      	str	r3, [r7, #12]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	687a      	ldr	r2, [r7, #4]
 8015132:	429a      	cmp	r2, r3
 8015134:	d8f7      	bhi.n	8015126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015136:	68fb      	ldr	r3, [r7, #12]
 8015138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	68ba      	ldr	r2, [r7, #8]
 8015140:	4413      	add	r3, r2
 8015142:	687a      	ldr	r2, [r7, #4]
 8015144:	429a      	cmp	r2, r3
 8015146:	d108      	bne.n	801515a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	685a      	ldr	r2, [r3, #4]
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	685b      	ldr	r3, [r3, #4]
 8015150:	441a      	add	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	68ba      	ldr	r2, [r7, #8]
 8015164:	441a      	add	r2, r3
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	429a      	cmp	r2, r3
 801516c:	d118      	bne.n	80151a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	681a      	ldr	r2, [r3, #0]
 8015172:	4b15      	ldr	r3, [pc, #84]	; (80151c8 <prvInsertBlockIntoFreeList+0xb0>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	429a      	cmp	r2, r3
 8015178:	d00d      	beq.n	8015196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	685a      	ldr	r2, [r3, #4]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	685b      	ldr	r3, [r3, #4]
 8015184:	441a      	add	r2, r3
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	601a      	str	r2, [r3, #0]
 8015194:	e008      	b.n	80151a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015196:	4b0c      	ldr	r3, [pc, #48]	; (80151c8 <prvInsertBlockIntoFreeList+0xb0>)
 8015198:	681a      	ldr	r2, [r3, #0]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	e003      	b.n	80151a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80151a8:	68fa      	ldr	r2, [r7, #12]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d002      	beq.n	80151b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80151b6:	bf00      	nop
 80151b8:	3714      	adds	r7, #20
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop
 80151c4:	20006270 	.word	0x20006270
 80151c8:	20006278 	.word	0x20006278

080151cc <__errno>:
 80151cc:	4b01      	ldr	r3, [pc, #4]	; (80151d4 <__errno+0x8>)
 80151ce:	6818      	ldr	r0, [r3, #0]
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop
 80151d4:	2000042c 	.word	0x2000042c

080151d8 <__libc_init_array>:
 80151d8:	b570      	push	{r4, r5, r6, lr}
 80151da:	4d0d      	ldr	r5, [pc, #52]	; (8015210 <__libc_init_array+0x38>)
 80151dc:	4c0d      	ldr	r4, [pc, #52]	; (8015214 <__libc_init_array+0x3c>)
 80151de:	1b64      	subs	r4, r4, r5
 80151e0:	10a4      	asrs	r4, r4, #2
 80151e2:	2600      	movs	r6, #0
 80151e4:	42a6      	cmp	r6, r4
 80151e6:	d109      	bne.n	80151fc <__libc_init_array+0x24>
 80151e8:	4d0b      	ldr	r5, [pc, #44]	; (8015218 <__libc_init_array+0x40>)
 80151ea:	4c0c      	ldr	r4, [pc, #48]	; (801521c <__libc_init_array+0x44>)
 80151ec:	f004 fcea 	bl	8019bc4 <_init>
 80151f0:	1b64      	subs	r4, r4, r5
 80151f2:	10a4      	asrs	r4, r4, #2
 80151f4:	2600      	movs	r6, #0
 80151f6:	42a6      	cmp	r6, r4
 80151f8:	d105      	bne.n	8015206 <__libc_init_array+0x2e>
 80151fa:	bd70      	pop	{r4, r5, r6, pc}
 80151fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015200:	4798      	blx	r3
 8015202:	3601      	adds	r6, #1
 8015204:	e7ee      	b.n	80151e4 <__libc_init_array+0xc>
 8015206:	f855 3b04 	ldr.w	r3, [r5], #4
 801520a:	4798      	blx	r3
 801520c:	3601      	adds	r6, #1
 801520e:	e7f2      	b.n	80151f6 <__libc_init_array+0x1e>
 8015210:	0801b10c 	.word	0x0801b10c
 8015214:	0801b10c 	.word	0x0801b10c
 8015218:	0801b10c 	.word	0x0801b10c
 801521c:	0801b110 	.word	0x0801b110

08015220 <memcpy>:
 8015220:	440a      	add	r2, r1
 8015222:	4291      	cmp	r1, r2
 8015224:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015228:	d100      	bne.n	801522c <memcpy+0xc>
 801522a:	4770      	bx	lr
 801522c:	b510      	push	{r4, lr}
 801522e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015236:	4291      	cmp	r1, r2
 8015238:	d1f9      	bne.n	801522e <memcpy+0xe>
 801523a:	bd10      	pop	{r4, pc}

0801523c <memset>:
 801523c:	4402      	add	r2, r0
 801523e:	4603      	mov	r3, r0
 8015240:	4293      	cmp	r3, r2
 8015242:	d100      	bne.n	8015246 <memset+0xa>
 8015244:	4770      	bx	lr
 8015246:	f803 1b01 	strb.w	r1, [r3], #1
 801524a:	e7f9      	b.n	8015240 <memset+0x4>

0801524c <__cvt>:
 801524c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015250:	ec55 4b10 	vmov	r4, r5, d0
 8015254:	2d00      	cmp	r5, #0
 8015256:	460e      	mov	r6, r1
 8015258:	4619      	mov	r1, r3
 801525a:	462b      	mov	r3, r5
 801525c:	bfbb      	ittet	lt
 801525e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015262:	461d      	movlt	r5, r3
 8015264:	2300      	movge	r3, #0
 8015266:	232d      	movlt	r3, #45	; 0x2d
 8015268:	700b      	strb	r3, [r1, #0]
 801526a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801526c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015270:	4691      	mov	r9, r2
 8015272:	f023 0820 	bic.w	r8, r3, #32
 8015276:	bfbc      	itt	lt
 8015278:	4622      	movlt	r2, r4
 801527a:	4614      	movlt	r4, r2
 801527c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015280:	d005      	beq.n	801528e <__cvt+0x42>
 8015282:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015286:	d100      	bne.n	801528a <__cvt+0x3e>
 8015288:	3601      	adds	r6, #1
 801528a:	2102      	movs	r1, #2
 801528c:	e000      	b.n	8015290 <__cvt+0x44>
 801528e:	2103      	movs	r1, #3
 8015290:	ab03      	add	r3, sp, #12
 8015292:	9301      	str	r3, [sp, #4]
 8015294:	ab02      	add	r3, sp, #8
 8015296:	9300      	str	r3, [sp, #0]
 8015298:	ec45 4b10 	vmov	d0, r4, r5
 801529c:	4653      	mov	r3, sl
 801529e:	4632      	mov	r2, r6
 80152a0:	f001 feb2 	bl	8017008 <_dtoa_r>
 80152a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80152a8:	4607      	mov	r7, r0
 80152aa:	d102      	bne.n	80152b2 <__cvt+0x66>
 80152ac:	f019 0f01 	tst.w	r9, #1
 80152b0:	d022      	beq.n	80152f8 <__cvt+0xac>
 80152b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80152b6:	eb07 0906 	add.w	r9, r7, r6
 80152ba:	d110      	bne.n	80152de <__cvt+0x92>
 80152bc:	783b      	ldrb	r3, [r7, #0]
 80152be:	2b30      	cmp	r3, #48	; 0x30
 80152c0:	d10a      	bne.n	80152d8 <__cvt+0x8c>
 80152c2:	2200      	movs	r2, #0
 80152c4:	2300      	movs	r3, #0
 80152c6:	4620      	mov	r0, r4
 80152c8:	4629      	mov	r1, r5
 80152ca:	f7eb fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80152ce:	b918      	cbnz	r0, 80152d8 <__cvt+0x8c>
 80152d0:	f1c6 0601 	rsb	r6, r6, #1
 80152d4:	f8ca 6000 	str.w	r6, [sl]
 80152d8:	f8da 3000 	ldr.w	r3, [sl]
 80152dc:	4499      	add	r9, r3
 80152de:	2200      	movs	r2, #0
 80152e0:	2300      	movs	r3, #0
 80152e2:	4620      	mov	r0, r4
 80152e4:	4629      	mov	r1, r5
 80152e6:	f7eb fbef 	bl	8000ac8 <__aeabi_dcmpeq>
 80152ea:	b108      	cbz	r0, 80152f0 <__cvt+0xa4>
 80152ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80152f0:	2230      	movs	r2, #48	; 0x30
 80152f2:	9b03      	ldr	r3, [sp, #12]
 80152f4:	454b      	cmp	r3, r9
 80152f6:	d307      	bcc.n	8015308 <__cvt+0xbc>
 80152f8:	9b03      	ldr	r3, [sp, #12]
 80152fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152fc:	1bdb      	subs	r3, r3, r7
 80152fe:	4638      	mov	r0, r7
 8015300:	6013      	str	r3, [r2, #0]
 8015302:	b004      	add	sp, #16
 8015304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015308:	1c59      	adds	r1, r3, #1
 801530a:	9103      	str	r1, [sp, #12]
 801530c:	701a      	strb	r2, [r3, #0]
 801530e:	e7f0      	b.n	80152f2 <__cvt+0xa6>

08015310 <__exponent>:
 8015310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015312:	4603      	mov	r3, r0
 8015314:	2900      	cmp	r1, #0
 8015316:	bfb8      	it	lt
 8015318:	4249      	neglt	r1, r1
 801531a:	f803 2b02 	strb.w	r2, [r3], #2
 801531e:	bfb4      	ite	lt
 8015320:	222d      	movlt	r2, #45	; 0x2d
 8015322:	222b      	movge	r2, #43	; 0x2b
 8015324:	2909      	cmp	r1, #9
 8015326:	7042      	strb	r2, [r0, #1]
 8015328:	dd2a      	ble.n	8015380 <__exponent+0x70>
 801532a:	f10d 0407 	add.w	r4, sp, #7
 801532e:	46a4      	mov	ip, r4
 8015330:	270a      	movs	r7, #10
 8015332:	46a6      	mov	lr, r4
 8015334:	460a      	mov	r2, r1
 8015336:	fb91 f6f7 	sdiv	r6, r1, r7
 801533a:	fb07 1516 	mls	r5, r7, r6, r1
 801533e:	3530      	adds	r5, #48	; 0x30
 8015340:	2a63      	cmp	r2, #99	; 0x63
 8015342:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8015346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801534a:	4631      	mov	r1, r6
 801534c:	dcf1      	bgt.n	8015332 <__exponent+0x22>
 801534e:	3130      	adds	r1, #48	; 0x30
 8015350:	f1ae 0502 	sub.w	r5, lr, #2
 8015354:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015358:	1c44      	adds	r4, r0, #1
 801535a:	4629      	mov	r1, r5
 801535c:	4561      	cmp	r1, ip
 801535e:	d30a      	bcc.n	8015376 <__exponent+0x66>
 8015360:	f10d 0209 	add.w	r2, sp, #9
 8015364:	eba2 020e 	sub.w	r2, r2, lr
 8015368:	4565      	cmp	r5, ip
 801536a:	bf88      	it	hi
 801536c:	2200      	movhi	r2, #0
 801536e:	4413      	add	r3, r2
 8015370:	1a18      	subs	r0, r3, r0
 8015372:	b003      	add	sp, #12
 8015374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015376:	f811 2b01 	ldrb.w	r2, [r1], #1
 801537a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801537e:	e7ed      	b.n	801535c <__exponent+0x4c>
 8015380:	2330      	movs	r3, #48	; 0x30
 8015382:	3130      	adds	r1, #48	; 0x30
 8015384:	7083      	strb	r3, [r0, #2]
 8015386:	70c1      	strb	r1, [r0, #3]
 8015388:	1d03      	adds	r3, r0, #4
 801538a:	e7f1      	b.n	8015370 <__exponent+0x60>

0801538c <_printf_float>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	ed2d 8b02 	vpush	{d8}
 8015394:	b08d      	sub	sp, #52	; 0x34
 8015396:	460c      	mov	r4, r1
 8015398:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801539c:	4616      	mov	r6, r2
 801539e:	461f      	mov	r7, r3
 80153a0:	4605      	mov	r5, r0
 80153a2:	f002 ff8d 	bl	80182c0 <_localeconv_r>
 80153a6:	f8d0 a000 	ldr.w	sl, [r0]
 80153aa:	4650      	mov	r0, sl
 80153ac:	f7ea ff10 	bl	80001d0 <strlen>
 80153b0:	2300      	movs	r3, #0
 80153b2:	930a      	str	r3, [sp, #40]	; 0x28
 80153b4:	6823      	ldr	r3, [r4, #0]
 80153b6:	9305      	str	r3, [sp, #20]
 80153b8:	f8d8 3000 	ldr.w	r3, [r8]
 80153bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80153c0:	3307      	adds	r3, #7
 80153c2:	f023 0307 	bic.w	r3, r3, #7
 80153c6:	f103 0208 	add.w	r2, r3, #8
 80153ca:	f8c8 2000 	str.w	r2, [r8]
 80153ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80153d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80153da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80153de:	9307      	str	r3, [sp, #28]
 80153e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80153e4:	ee08 0a10 	vmov	s16, r0
 80153e8:	4b9f      	ldr	r3, [pc, #636]	; (8015668 <_printf_float+0x2dc>)
 80153ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153f2:	f7eb fb9b 	bl	8000b2c <__aeabi_dcmpun>
 80153f6:	bb88      	cbnz	r0, 801545c <_printf_float+0xd0>
 80153f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153fc:	4b9a      	ldr	r3, [pc, #616]	; (8015668 <_printf_float+0x2dc>)
 80153fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015402:	f7eb fb75 	bl	8000af0 <__aeabi_dcmple>
 8015406:	bb48      	cbnz	r0, 801545c <_printf_float+0xd0>
 8015408:	2200      	movs	r2, #0
 801540a:	2300      	movs	r3, #0
 801540c:	4640      	mov	r0, r8
 801540e:	4649      	mov	r1, r9
 8015410:	f7eb fb64 	bl	8000adc <__aeabi_dcmplt>
 8015414:	b110      	cbz	r0, 801541c <_printf_float+0x90>
 8015416:	232d      	movs	r3, #45	; 0x2d
 8015418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801541c:	4b93      	ldr	r3, [pc, #588]	; (801566c <_printf_float+0x2e0>)
 801541e:	4894      	ldr	r0, [pc, #592]	; (8015670 <_printf_float+0x2e4>)
 8015420:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015424:	bf94      	ite	ls
 8015426:	4698      	movls	r8, r3
 8015428:	4680      	movhi	r8, r0
 801542a:	2303      	movs	r3, #3
 801542c:	6123      	str	r3, [r4, #16]
 801542e:	9b05      	ldr	r3, [sp, #20]
 8015430:	f023 0204 	bic.w	r2, r3, #4
 8015434:	6022      	str	r2, [r4, #0]
 8015436:	f04f 0900 	mov.w	r9, #0
 801543a:	9700      	str	r7, [sp, #0]
 801543c:	4633      	mov	r3, r6
 801543e:	aa0b      	add	r2, sp, #44	; 0x2c
 8015440:	4621      	mov	r1, r4
 8015442:	4628      	mov	r0, r5
 8015444:	f000 f9d8 	bl	80157f8 <_printf_common>
 8015448:	3001      	adds	r0, #1
 801544a:	f040 8090 	bne.w	801556e <_printf_float+0x1e2>
 801544e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015452:	b00d      	add	sp, #52	; 0x34
 8015454:	ecbd 8b02 	vpop	{d8}
 8015458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801545c:	4642      	mov	r2, r8
 801545e:	464b      	mov	r3, r9
 8015460:	4640      	mov	r0, r8
 8015462:	4649      	mov	r1, r9
 8015464:	f7eb fb62 	bl	8000b2c <__aeabi_dcmpun>
 8015468:	b140      	cbz	r0, 801547c <_printf_float+0xf0>
 801546a:	464b      	mov	r3, r9
 801546c:	2b00      	cmp	r3, #0
 801546e:	bfbc      	itt	lt
 8015470:	232d      	movlt	r3, #45	; 0x2d
 8015472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015476:	487f      	ldr	r0, [pc, #508]	; (8015674 <_printf_float+0x2e8>)
 8015478:	4b7f      	ldr	r3, [pc, #508]	; (8015678 <_printf_float+0x2ec>)
 801547a:	e7d1      	b.n	8015420 <_printf_float+0x94>
 801547c:	6863      	ldr	r3, [r4, #4]
 801547e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015482:	9206      	str	r2, [sp, #24]
 8015484:	1c5a      	adds	r2, r3, #1
 8015486:	d13f      	bne.n	8015508 <_printf_float+0x17c>
 8015488:	2306      	movs	r3, #6
 801548a:	6063      	str	r3, [r4, #4]
 801548c:	9b05      	ldr	r3, [sp, #20]
 801548e:	6861      	ldr	r1, [r4, #4]
 8015490:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015494:	2300      	movs	r3, #0
 8015496:	9303      	str	r3, [sp, #12]
 8015498:	ab0a      	add	r3, sp, #40	; 0x28
 801549a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801549e:	ab09      	add	r3, sp, #36	; 0x24
 80154a0:	ec49 8b10 	vmov	d0, r8, r9
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	6022      	str	r2, [r4, #0]
 80154a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154ac:	4628      	mov	r0, r5
 80154ae:	f7ff fecd 	bl	801524c <__cvt>
 80154b2:	9b06      	ldr	r3, [sp, #24]
 80154b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154b6:	2b47      	cmp	r3, #71	; 0x47
 80154b8:	4680      	mov	r8, r0
 80154ba:	d108      	bne.n	80154ce <_printf_float+0x142>
 80154bc:	1cc8      	adds	r0, r1, #3
 80154be:	db02      	blt.n	80154c6 <_printf_float+0x13a>
 80154c0:	6863      	ldr	r3, [r4, #4]
 80154c2:	4299      	cmp	r1, r3
 80154c4:	dd41      	ble.n	801554a <_printf_float+0x1be>
 80154c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80154ca:	fa5f fb8b 	uxtb.w	fp, fp
 80154ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80154d2:	d820      	bhi.n	8015516 <_printf_float+0x18a>
 80154d4:	3901      	subs	r1, #1
 80154d6:	465a      	mov	r2, fp
 80154d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154dc:	9109      	str	r1, [sp, #36]	; 0x24
 80154de:	f7ff ff17 	bl	8015310 <__exponent>
 80154e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154e4:	1813      	adds	r3, r2, r0
 80154e6:	2a01      	cmp	r2, #1
 80154e8:	4681      	mov	r9, r0
 80154ea:	6123      	str	r3, [r4, #16]
 80154ec:	dc02      	bgt.n	80154f4 <_printf_float+0x168>
 80154ee:	6822      	ldr	r2, [r4, #0]
 80154f0:	07d2      	lsls	r2, r2, #31
 80154f2:	d501      	bpl.n	80154f8 <_printf_float+0x16c>
 80154f4:	3301      	adds	r3, #1
 80154f6:	6123      	str	r3, [r4, #16]
 80154f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d09c      	beq.n	801543a <_printf_float+0xae>
 8015500:	232d      	movs	r3, #45	; 0x2d
 8015502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015506:	e798      	b.n	801543a <_printf_float+0xae>
 8015508:	9a06      	ldr	r2, [sp, #24]
 801550a:	2a47      	cmp	r2, #71	; 0x47
 801550c:	d1be      	bne.n	801548c <_printf_float+0x100>
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1bc      	bne.n	801548c <_printf_float+0x100>
 8015512:	2301      	movs	r3, #1
 8015514:	e7b9      	b.n	801548a <_printf_float+0xfe>
 8015516:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801551a:	d118      	bne.n	801554e <_printf_float+0x1c2>
 801551c:	2900      	cmp	r1, #0
 801551e:	6863      	ldr	r3, [r4, #4]
 8015520:	dd0b      	ble.n	801553a <_printf_float+0x1ae>
 8015522:	6121      	str	r1, [r4, #16]
 8015524:	b913      	cbnz	r3, 801552c <_printf_float+0x1a0>
 8015526:	6822      	ldr	r2, [r4, #0]
 8015528:	07d0      	lsls	r0, r2, #31
 801552a:	d502      	bpl.n	8015532 <_printf_float+0x1a6>
 801552c:	3301      	adds	r3, #1
 801552e:	440b      	add	r3, r1
 8015530:	6123      	str	r3, [r4, #16]
 8015532:	65a1      	str	r1, [r4, #88]	; 0x58
 8015534:	f04f 0900 	mov.w	r9, #0
 8015538:	e7de      	b.n	80154f8 <_printf_float+0x16c>
 801553a:	b913      	cbnz	r3, 8015542 <_printf_float+0x1b6>
 801553c:	6822      	ldr	r2, [r4, #0]
 801553e:	07d2      	lsls	r2, r2, #31
 8015540:	d501      	bpl.n	8015546 <_printf_float+0x1ba>
 8015542:	3302      	adds	r3, #2
 8015544:	e7f4      	b.n	8015530 <_printf_float+0x1a4>
 8015546:	2301      	movs	r3, #1
 8015548:	e7f2      	b.n	8015530 <_printf_float+0x1a4>
 801554a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015550:	4299      	cmp	r1, r3
 8015552:	db05      	blt.n	8015560 <_printf_float+0x1d4>
 8015554:	6823      	ldr	r3, [r4, #0]
 8015556:	6121      	str	r1, [r4, #16]
 8015558:	07d8      	lsls	r0, r3, #31
 801555a:	d5ea      	bpl.n	8015532 <_printf_float+0x1a6>
 801555c:	1c4b      	adds	r3, r1, #1
 801555e:	e7e7      	b.n	8015530 <_printf_float+0x1a4>
 8015560:	2900      	cmp	r1, #0
 8015562:	bfd4      	ite	le
 8015564:	f1c1 0202 	rsble	r2, r1, #2
 8015568:	2201      	movgt	r2, #1
 801556a:	4413      	add	r3, r2
 801556c:	e7e0      	b.n	8015530 <_printf_float+0x1a4>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	055a      	lsls	r2, r3, #21
 8015572:	d407      	bmi.n	8015584 <_printf_float+0x1f8>
 8015574:	6923      	ldr	r3, [r4, #16]
 8015576:	4642      	mov	r2, r8
 8015578:	4631      	mov	r1, r6
 801557a:	4628      	mov	r0, r5
 801557c:	47b8      	blx	r7
 801557e:	3001      	adds	r0, #1
 8015580:	d12c      	bne.n	80155dc <_printf_float+0x250>
 8015582:	e764      	b.n	801544e <_printf_float+0xc2>
 8015584:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015588:	f240 80e0 	bls.w	801574c <_printf_float+0x3c0>
 801558c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015590:	2200      	movs	r2, #0
 8015592:	2300      	movs	r3, #0
 8015594:	f7eb fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 8015598:	2800      	cmp	r0, #0
 801559a:	d034      	beq.n	8015606 <_printf_float+0x27a>
 801559c:	4a37      	ldr	r2, [pc, #220]	; (801567c <_printf_float+0x2f0>)
 801559e:	2301      	movs	r3, #1
 80155a0:	4631      	mov	r1, r6
 80155a2:	4628      	mov	r0, r5
 80155a4:	47b8      	blx	r7
 80155a6:	3001      	adds	r0, #1
 80155a8:	f43f af51 	beq.w	801544e <_printf_float+0xc2>
 80155ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155b0:	429a      	cmp	r2, r3
 80155b2:	db02      	blt.n	80155ba <_printf_float+0x22e>
 80155b4:	6823      	ldr	r3, [r4, #0]
 80155b6:	07d8      	lsls	r0, r3, #31
 80155b8:	d510      	bpl.n	80155dc <_printf_float+0x250>
 80155ba:	ee18 3a10 	vmov	r3, s16
 80155be:	4652      	mov	r2, sl
 80155c0:	4631      	mov	r1, r6
 80155c2:	4628      	mov	r0, r5
 80155c4:	47b8      	blx	r7
 80155c6:	3001      	adds	r0, #1
 80155c8:	f43f af41 	beq.w	801544e <_printf_float+0xc2>
 80155cc:	f04f 0800 	mov.w	r8, #0
 80155d0:	f104 091a 	add.w	r9, r4, #26
 80155d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155d6:	3b01      	subs	r3, #1
 80155d8:	4543      	cmp	r3, r8
 80155da:	dc09      	bgt.n	80155f0 <_printf_float+0x264>
 80155dc:	6823      	ldr	r3, [r4, #0]
 80155de:	079b      	lsls	r3, r3, #30
 80155e0:	f100 8105 	bmi.w	80157ee <_printf_float+0x462>
 80155e4:	68e0      	ldr	r0, [r4, #12]
 80155e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155e8:	4298      	cmp	r0, r3
 80155ea:	bfb8      	it	lt
 80155ec:	4618      	movlt	r0, r3
 80155ee:	e730      	b.n	8015452 <_printf_float+0xc6>
 80155f0:	2301      	movs	r3, #1
 80155f2:	464a      	mov	r2, r9
 80155f4:	4631      	mov	r1, r6
 80155f6:	4628      	mov	r0, r5
 80155f8:	47b8      	blx	r7
 80155fa:	3001      	adds	r0, #1
 80155fc:	f43f af27 	beq.w	801544e <_printf_float+0xc2>
 8015600:	f108 0801 	add.w	r8, r8, #1
 8015604:	e7e6      	b.n	80155d4 <_printf_float+0x248>
 8015606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015608:	2b00      	cmp	r3, #0
 801560a:	dc39      	bgt.n	8015680 <_printf_float+0x2f4>
 801560c:	4a1b      	ldr	r2, [pc, #108]	; (801567c <_printf_float+0x2f0>)
 801560e:	2301      	movs	r3, #1
 8015610:	4631      	mov	r1, r6
 8015612:	4628      	mov	r0, r5
 8015614:	47b8      	blx	r7
 8015616:	3001      	adds	r0, #1
 8015618:	f43f af19 	beq.w	801544e <_printf_float+0xc2>
 801561c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015620:	4313      	orrs	r3, r2
 8015622:	d102      	bne.n	801562a <_printf_float+0x29e>
 8015624:	6823      	ldr	r3, [r4, #0]
 8015626:	07d9      	lsls	r1, r3, #31
 8015628:	d5d8      	bpl.n	80155dc <_printf_float+0x250>
 801562a:	ee18 3a10 	vmov	r3, s16
 801562e:	4652      	mov	r2, sl
 8015630:	4631      	mov	r1, r6
 8015632:	4628      	mov	r0, r5
 8015634:	47b8      	blx	r7
 8015636:	3001      	adds	r0, #1
 8015638:	f43f af09 	beq.w	801544e <_printf_float+0xc2>
 801563c:	f04f 0900 	mov.w	r9, #0
 8015640:	f104 0a1a 	add.w	sl, r4, #26
 8015644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015646:	425b      	negs	r3, r3
 8015648:	454b      	cmp	r3, r9
 801564a:	dc01      	bgt.n	8015650 <_printf_float+0x2c4>
 801564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801564e:	e792      	b.n	8015576 <_printf_float+0x1ea>
 8015650:	2301      	movs	r3, #1
 8015652:	4652      	mov	r2, sl
 8015654:	4631      	mov	r1, r6
 8015656:	4628      	mov	r0, r5
 8015658:	47b8      	blx	r7
 801565a:	3001      	adds	r0, #1
 801565c:	f43f aef7 	beq.w	801544e <_printf_float+0xc2>
 8015660:	f109 0901 	add.w	r9, r9, #1
 8015664:	e7ee      	b.n	8015644 <_printf_float+0x2b8>
 8015666:	bf00      	nop
 8015668:	7fefffff 	.word	0x7fefffff
 801566c:	0801ac50 	.word	0x0801ac50
 8015670:	0801ac54 	.word	0x0801ac54
 8015674:	0801ac5c 	.word	0x0801ac5c
 8015678:	0801ac58 	.word	0x0801ac58
 801567c:	0801ac60 	.word	0x0801ac60
 8015680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015684:	429a      	cmp	r2, r3
 8015686:	bfa8      	it	ge
 8015688:	461a      	movge	r2, r3
 801568a:	2a00      	cmp	r2, #0
 801568c:	4691      	mov	r9, r2
 801568e:	dc37      	bgt.n	8015700 <_printf_float+0x374>
 8015690:	f04f 0b00 	mov.w	fp, #0
 8015694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015698:	f104 021a 	add.w	r2, r4, #26
 801569c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801569e:	9305      	str	r3, [sp, #20]
 80156a0:	eba3 0309 	sub.w	r3, r3, r9
 80156a4:	455b      	cmp	r3, fp
 80156a6:	dc33      	bgt.n	8015710 <_printf_float+0x384>
 80156a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156ac:	429a      	cmp	r2, r3
 80156ae:	db3b      	blt.n	8015728 <_printf_float+0x39c>
 80156b0:	6823      	ldr	r3, [r4, #0]
 80156b2:	07da      	lsls	r2, r3, #31
 80156b4:	d438      	bmi.n	8015728 <_printf_float+0x39c>
 80156b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156b8:	9b05      	ldr	r3, [sp, #20]
 80156ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	eba2 0901 	sub.w	r9, r2, r1
 80156c2:	4599      	cmp	r9, r3
 80156c4:	bfa8      	it	ge
 80156c6:	4699      	movge	r9, r3
 80156c8:	f1b9 0f00 	cmp.w	r9, #0
 80156cc:	dc35      	bgt.n	801573a <_printf_float+0x3ae>
 80156ce:	f04f 0800 	mov.w	r8, #0
 80156d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156d6:	f104 0a1a 	add.w	sl, r4, #26
 80156da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156de:	1a9b      	subs	r3, r3, r2
 80156e0:	eba3 0309 	sub.w	r3, r3, r9
 80156e4:	4543      	cmp	r3, r8
 80156e6:	f77f af79 	ble.w	80155dc <_printf_float+0x250>
 80156ea:	2301      	movs	r3, #1
 80156ec:	4652      	mov	r2, sl
 80156ee:	4631      	mov	r1, r6
 80156f0:	4628      	mov	r0, r5
 80156f2:	47b8      	blx	r7
 80156f4:	3001      	adds	r0, #1
 80156f6:	f43f aeaa 	beq.w	801544e <_printf_float+0xc2>
 80156fa:	f108 0801 	add.w	r8, r8, #1
 80156fe:	e7ec      	b.n	80156da <_printf_float+0x34e>
 8015700:	4613      	mov	r3, r2
 8015702:	4631      	mov	r1, r6
 8015704:	4642      	mov	r2, r8
 8015706:	4628      	mov	r0, r5
 8015708:	47b8      	blx	r7
 801570a:	3001      	adds	r0, #1
 801570c:	d1c0      	bne.n	8015690 <_printf_float+0x304>
 801570e:	e69e      	b.n	801544e <_printf_float+0xc2>
 8015710:	2301      	movs	r3, #1
 8015712:	4631      	mov	r1, r6
 8015714:	4628      	mov	r0, r5
 8015716:	9205      	str	r2, [sp, #20]
 8015718:	47b8      	blx	r7
 801571a:	3001      	adds	r0, #1
 801571c:	f43f ae97 	beq.w	801544e <_printf_float+0xc2>
 8015720:	9a05      	ldr	r2, [sp, #20]
 8015722:	f10b 0b01 	add.w	fp, fp, #1
 8015726:	e7b9      	b.n	801569c <_printf_float+0x310>
 8015728:	ee18 3a10 	vmov	r3, s16
 801572c:	4652      	mov	r2, sl
 801572e:	4631      	mov	r1, r6
 8015730:	4628      	mov	r0, r5
 8015732:	47b8      	blx	r7
 8015734:	3001      	adds	r0, #1
 8015736:	d1be      	bne.n	80156b6 <_printf_float+0x32a>
 8015738:	e689      	b.n	801544e <_printf_float+0xc2>
 801573a:	9a05      	ldr	r2, [sp, #20]
 801573c:	464b      	mov	r3, r9
 801573e:	4442      	add	r2, r8
 8015740:	4631      	mov	r1, r6
 8015742:	4628      	mov	r0, r5
 8015744:	47b8      	blx	r7
 8015746:	3001      	adds	r0, #1
 8015748:	d1c1      	bne.n	80156ce <_printf_float+0x342>
 801574a:	e680      	b.n	801544e <_printf_float+0xc2>
 801574c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801574e:	2a01      	cmp	r2, #1
 8015750:	dc01      	bgt.n	8015756 <_printf_float+0x3ca>
 8015752:	07db      	lsls	r3, r3, #31
 8015754:	d538      	bpl.n	80157c8 <_printf_float+0x43c>
 8015756:	2301      	movs	r3, #1
 8015758:	4642      	mov	r2, r8
 801575a:	4631      	mov	r1, r6
 801575c:	4628      	mov	r0, r5
 801575e:	47b8      	blx	r7
 8015760:	3001      	adds	r0, #1
 8015762:	f43f ae74 	beq.w	801544e <_printf_float+0xc2>
 8015766:	ee18 3a10 	vmov	r3, s16
 801576a:	4652      	mov	r2, sl
 801576c:	4631      	mov	r1, r6
 801576e:	4628      	mov	r0, r5
 8015770:	47b8      	blx	r7
 8015772:	3001      	adds	r0, #1
 8015774:	f43f ae6b 	beq.w	801544e <_printf_float+0xc2>
 8015778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801577c:	2200      	movs	r2, #0
 801577e:	2300      	movs	r3, #0
 8015780:	f7eb f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8015784:	b9d8      	cbnz	r0, 80157be <_printf_float+0x432>
 8015786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015788:	f108 0201 	add.w	r2, r8, #1
 801578c:	3b01      	subs	r3, #1
 801578e:	4631      	mov	r1, r6
 8015790:	4628      	mov	r0, r5
 8015792:	47b8      	blx	r7
 8015794:	3001      	adds	r0, #1
 8015796:	d10e      	bne.n	80157b6 <_printf_float+0x42a>
 8015798:	e659      	b.n	801544e <_printf_float+0xc2>
 801579a:	2301      	movs	r3, #1
 801579c:	4652      	mov	r2, sl
 801579e:	4631      	mov	r1, r6
 80157a0:	4628      	mov	r0, r5
 80157a2:	47b8      	blx	r7
 80157a4:	3001      	adds	r0, #1
 80157a6:	f43f ae52 	beq.w	801544e <_printf_float+0xc2>
 80157aa:	f108 0801 	add.w	r8, r8, #1
 80157ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157b0:	3b01      	subs	r3, #1
 80157b2:	4543      	cmp	r3, r8
 80157b4:	dcf1      	bgt.n	801579a <_printf_float+0x40e>
 80157b6:	464b      	mov	r3, r9
 80157b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80157bc:	e6dc      	b.n	8015578 <_printf_float+0x1ec>
 80157be:	f04f 0800 	mov.w	r8, #0
 80157c2:	f104 0a1a 	add.w	sl, r4, #26
 80157c6:	e7f2      	b.n	80157ae <_printf_float+0x422>
 80157c8:	2301      	movs	r3, #1
 80157ca:	4642      	mov	r2, r8
 80157cc:	e7df      	b.n	801578e <_printf_float+0x402>
 80157ce:	2301      	movs	r3, #1
 80157d0:	464a      	mov	r2, r9
 80157d2:	4631      	mov	r1, r6
 80157d4:	4628      	mov	r0, r5
 80157d6:	47b8      	blx	r7
 80157d8:	3001      	adds	r0, #1
 80157da:	f43f ae38 	beq.w	801544e <_printf_float+0xc2>
 80157de:	f108 0801 	add.w	r8, r8, #1
 80157e2:	68e3      	ldr	r3, [r4, #12]
 80157e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80157e6:	1a5b      	subs	r3, r3, r1
 80157e8:	4543      	cmp	r3, r8
 80157ea:	dcf0      	bgt.n	80157ce <_printf_float+0x442>
 80157ec:	e6fa      	b.n	80155e4 <_printf_float+0x258>
 80157ee:	f04f 0800 	mov.w	r8, #0
 80157f2:	f104 0919 	add.w	r9, r4, #25
 80157f6:	e7f4      	b.n	80157e2 <_printf_float+0x456>

080157f8 <_printf_common>:
 80157f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157fc:	4616      	mov	r6, r2
 80157fe:	4699      	mov	r9, r3
 8015800:	688a      	ldr	r2, [r1, #8]
 8015802:	690b      	ldr	r3, [r1, #16]
 8015804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015808:	4293      	cmp	r3, r2
 801580a:	bfb8      	it	lt
 801580c:	4613      	movlt	r3, r2
 801580e:	6033      	str	r3, [r6, #0]
 8015810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015814:	4607      	mov	r7, r0
 8015816:	460c      	mov	r4, r1
 8015818:	b10a      	cbz	r2, 801581e <_printf_common+0x26>
 801581a:	3301      	adds	r3, #1
 801581c:	6033      	str	r3, [r6, #0]
 801581e:	6823      	ldr	r3, [r4, #0]
 8015820:	0699      	lsls	r1, r3, #26
 8015822:	bf42      	ittt	mi
 8015824:	6833      	ldrmi	r3, [r6, #0]
 8015826:	3302      	addmi	r3, #2
 8015828:	6033      	strmi	r3, [r6, #0]
 801582a:	6825      	ldr	r5, [r4, #0]
 801582c:	f015 0506 	ands.w	r5, r5, #6
 8015830:	d106      	bne.n	8015840 <_printf_common+0x48>
 8015832:	f104 0a19 	add.w	sl, r4, #25
 8015836:	68e3      	ldr	r3, [r4, #12]
 8015838:	6832      	ldr	r2, [r6, #0]
 801583a:	1a9b      	subs	r3, r3, r2
 801583c:	42ab      	cmp	r3, r5
 801583e:	dc26      	bgt.n	801588e <_printf_common+0x96>
 8015840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015844:	1e13      	subs	r3, r2, #0
 8015846:	6822      	ldr	r2, [r4, #0]
 8015848:	bf18      	it	ne
 801584a:	2301      	movne	r3, #1
 801584c:	0692      	lsls	r2, r2, #26
 801584e:	d42b      	bmi.n	80158a8 <_printf_common+0xb0>
 8015850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015854:	4649      	mov	r1, r9
 8015856:	4638      	mov	r0, r7
 8015858:	47c0      	blx	r8
 801585a:	3001      	adds	r0, #1
 801585c:	d01e      	beq.n	801589c <_printf_common+0xa4>
 801585e:	6823      	ldr	r3, [r4, #0]
 8015860:	68e5      	ldr	r5, [r4, #12]
 8015862:	6832      	ldr	r2, [r6, #0]
 8015864:	f003 0306 	and.w	r3, r3, #6
 8015868:	2b04      	cmp	r3, #4
 801586a:	bf08      	it	eq
 801586c:	1aad      	subeq	r5, r5, r2
 801586e:	68a3      	ldr	r3, [r4, #8]
 8015870:	6922      	ldr	r2, [r4, #16]
 8015872:	bf0c      	ite	eq
 8015874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015878:	2500      	movne	r5, #0
 801587a:	4293      	cmp	r3, r2
 801587c:	bfc4      	itt	gt
 801587e:	1a9b      	subgt	r3, r3, r2
 8015880:	18ed      	addgt	r5, r5, r3
 8015882:	2600      	movs	r6, #0
 8015884:	341a      	adds	r4, #26
 8015886:	42b5      	cmp	r5, r6
 8015888:	d11a      	bne.n	80158c0 <_printf_common+0xc8>
 801588a:	2000      	movs	r0, #0
 801588c:	e008      	b.n	80158a0 <_printf_common+0xa8>
 801588e:	2301      	movs	r3, #1
 8015890:	4652      	mov	r2, sl
 8015892:	4649      	mov	r1, r9
 8015894:	4638      	mov	r0, r7
 8015896:	47c0      	blx	r8
 8015898:	3001      	adds	r0, #1
 801589a:	d103      	bne.n	80158a4 <_printf_common+0xac>
 801589c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80158a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158a4:	3501      	adds	r5, #1
 80158a6:	e7c6      	b.n	8015836 <_printf_common+0x3e>
 80158a8:	18e1      	adds	r1, r4, r3
 80158aa:	1c5a      	adds	r2, r3, #1
 80158ac:	2030      	movs	r0, #48	; 0x30
 80158ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80158b2:	4422      	add	r2, r4
 80158b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80158b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80158bc:	3302      	adds	r3, #2
 80158be:	e7c7      	b.n	8015850 <_printf_common+0x58>
 80158c0:	2301      	movs	r3, #1
 80158c2:	4622      	mov	r2, r4
 80158c4:	4649      	mov	r1, r9
 80158c6:	4638      	mov	r0, r7
 80158c8:	47c0      	blx	r8
 80158ca:	3001      	adds	r0, #1
 80158cc:	d0e6      	beq.n	801589c <_printf_common+0xa4>
 80158ce:	3601      	adds	r6, #1
 80158d0:	e7d9      	b.n	8015886 <_printf_common+0x8e>
	...

080158d4 <_printf_i>:
 80158d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158d8:	460c      	mov	r4, r1
 80158da:	4691      	mov	r9, r2
 80158dc:	7e27      	ldrb	r7, [r4, #24]
 80158de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80158e0:	2f78      	cmp	r7, #120	; 0x78
 80158e2:	4680      	mov	r8, r0
 80158e4:	469a      	mov	sl, r3
 80158e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80158ea:	d807      	bhi.n	80158fc <_printf_i+0x28>
 80158ec:	2f62      	cmp	r7, #98	; 0x62
 80158ee:	d80a      	bhi.n	8015906 <_printf_i+0x32>
 80158f0:	2f00      	cmp	r7, #0
 80158f2:	f000 80d8 	beq.w	8015aa6 <_printf_i+0x1d2>
 80158f6:	2f58      	cmp	r7, #88	; 0x58
 80158f8:	f000 80a3 	beq.w	8015a42 <_printf_i+0x16e>
 80158fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015904:	e03a      	b.n	801597c <_printf_i+0xa8>
 8015906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801590a:	2b15      	cmp	r3, #21
 801590c:	d8f6      	bhi.n	80158fc <_printf_i+0x28>
 801590e:	a001      	add	r0, pc, #4	; (adr r0, 8015914 <_printf_i+0x40>)
 8015910:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015914:	0801596d 	.word	0x0801596d
 8015918:	08015981 	.word	0x08015981
 801591c:	080158fd 	.word	0x080158fd
 8015920:	080158fd 	.word	0x080158fd
 8015924:	080158fd 	.word	0x080158fd
 8015928:	080158fd 	.word	0x080158fd
 801592c:	08015981 	.word	0x08015981
 8015930:	080158fd 	.word	0x080158fd
 8015934:	080158fd 	.word	0x080158fd
 8015938:	080158fd 	.word	0x080158fd
 801593c:	080158fd 	.word	0x080158fd
 8015940:	08015a8d 	.word	0x08015a8d
 8015944:	080159b1 	.word	0x080159b1
 8015948:	08015a6f 	.word	0x08015a6f
 801594c:	080158fd 	.word	0x080158fd
 8015950:	080158fd 	.word	0x080158fd
 8015954:	08015aaf 	.word	0x08015aaf
 8015958:	080158fd 	.word	0x080158fd
 801595c:	080159b1 	.word	0x080159b1
 8015960:	080158fd 	.word	0x080158fd
 8015964:	080158fd 	.word	0x080158fd
 8015968:	08015a77 	.word	0x08015a77
 801596c:	680b      	ldr	r3, [r1, #0]
 801596e:	1d1a      	adds	r2, r3, #4
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	600a      	str	r2, [r1, #0]
 8015974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801597c:	2301      	movs	r3, #1
 801597e:	e0a3      	b.n	8015ac8 <_printf_i+0x1f4>
 8015980:	6825      	ldr	r5, [r4, #0]
 8015982:	6808      	ldr	r0, [r1, #0]
 8015984:	062e      	lsls	r6, r5, #24
 8015986:	f100 0304 	add.w	r3, r0, #4
 801598a:	d50a      	bpl.n	80159a2 <_printf_i+0xce>
 801598c:	6805      	ldr	r5, [r0, #0]
 801598e:	600b      	str	r3, [r1, #0]
 8015990:	2d00      	cmp	r5, #0
 8015992:	da03      	bge.n	801599c <_printf_i+0xc8>
 8015994:	232d      	movs	r3, #45	; 0x2d
 8015996:	426d      	negs	r5, r5
 8015998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801599c:	485e      	ldr	r0, [pc, #376]	; (8015b18 <_printf_i+0x244>)
 801599e:	230a      	movs	r3, #10
 80159a0:	e019      	b.n	80159d6 <_printf_i+0x102>
 80159a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80159a6:	6805      	ldr	r5, [r0, #0]
 80159a8:	600b      	str	r3, [r1, #0]
 80159aa:	bf18      	it	ne
 80159ac:	b22d      	sxthne	r5, r5
 80159ae:	e7ef      	b.n	8015990 <_printf_i+0xbc>
 80159b0:	680b      	ldr	r3, [r1, #0]
 80159b2:	6825      	ldr	r5, [r4, #0]
 80159b4:	1d18      	adds	r0, r3, #4
 80159b6:	6008      	str	r0, [r1, #0]
 80159b8:	0628      	lsls	r0, r5, #24
 80159ba:	d501      	bpl.n	80159c0 <_printf_i+0xec>
 80159bc:	681d      	ldr	r5, [r3, #0]
 80159be:	e002      	b.n	80159c6 <_printf_i+0xf2>
 80159c0:	0669      	lsls	r1, r5, #25
 80159c2:	d5fb      	bpl.n	80159bc <_printf_i+0xe8>
 80159c4:	881d      	ldrh	r5, [r3, #0]
 80159c6:	4854      	ldr	r0, [pc, #336]	; (8015b18 <_printf_i+0x244>)
 80159c8:	2f6f      	cmp	r7, #111	; 0x6f
 80159ca:	bf0c      	ite	eq
 80159cc:	2308      	moveq	r3, #8
 80159ce:	230a      	movne	r3, #10
 80159d0:	2100      	movs	r1, #0
 80159d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159d6:	6866      	ldr	r6, [r4, #4]
 80159d8:	60a6      	str	r6, [r4, #8]
 80159da:	2e00      	cmp	r6, #0
 80159dc:	bfa2      	ittt	ge
 80159de:	6821      	ldrge	r1, [r4, #0]
 80159e0:	f021 0104 	bicge.w	r1, r1, #4
 80159e4:	6021      	strge	r1, [r4, #0]
 80159e6:	b90d      	cbnz	r5, 80159ec <_printf_i+0x118>
 80159e8:	2e00      	cmp	r6, #0
 80159ea:	d04d      	beq.n	8015a88 <_printf_i+0x1b4>
 80159ec:	4616      	mov	r6, r2
 80159ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80159f2:	fb03 5711 	mls	r7, r3, r1, r5
 80159f6:	5dc7      	ldrb	r7, [r0, r7]
 80159f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80159fc:	462f      	mov	r7, r5
 80159fe:	42bb      	cmp	r3, r7
 8015a00:	460d      	mov	r5, r1
 8015a02:	d9f4      	bls.n	80159ee <_printf_i+0x11a>
 8015a04:	2b08      	cmp	r3, #8
 8015a06:	d10b      	bne.n	8015a20 <_printf_i+0x14c>
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	07df      	lsls	r7, r3, #31
 8015a0c:	d508      	bpl.n	8015a20 <_printf_i+0x14c>
 8015a0e:	6923      	ldr	r3, [r4, #16]
 8015a10:	6861      	ldr	r1, [r4, #4]
 8015a12:	4299      	cmp	r1, r3
 8015a14:	bfde      	ittt	le
 8015a16:	2330      	movle	r3, #48	; 0x30
 8015a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015a1c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8015a20:	1b92      	subs	r2, r2, r6
 8015a22:	6122      	str	r2, [r4, #16]
 8015a24:	f8cd a000 	str.w	sl, [sp]
 8015a28:	464b      	mov	r3, r9
 8015a2a:	aa03      	add	r2, sp, #12
 8015a2c:	4621      	mov	r1, r4
 8015a2e:	4640      	mov	r0, r8
 8015a30:	f7ff fee2 	bl	80157f8 <_printf_common>
 8015a34:	3001      	adds	r0, #1
 8015a36:	d14c      	bne.n	8015ad2 <_printf_i+0x1fe>
 8015a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a3c:	b004      	add	sp, #16
 8015a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a42:	4835      	ldr	r0, [pc, #212]	; (8015b18 <_printf_i+0x244>)
 8015a44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015a48:	6823      	ldr	r3, [r4, #0]
 8015a4a:	680e      	ldr	r6, [r1, #0]
 8015a4c:	061f      	lsls	r7, r3, #24
 8015a4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015a52:	600e      	str	r6, [r1, #0]
 8015a54:	d514      	bpl.n	8015a80 <_printf_i+0x1ac>
 8015a56:	07d9      	lsls	r1, r3, #31
 8015a58:	bf44      	itt	mi
 8015a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8015a5e:	6023      	strmi	r3, [r4, #0]
 8015a60:	b91d      	cbnz	r5, 8015a6a <_printf_i+0x196>
 8015a62:	6823      	ldr	r3, [r4, #0]
 8015a64:	f023 0320 	bic.w	r3, r3, #32
 8015a68:	6023      	str	r3, [r4, #0]
 8015a6a:	2310      	movs	r3, #16
 8015a6c:	e7b0      	b.n	80159d0 <_printf_i+0xfc>
 8015a6e:	6823      	ldr	r3, [r4, #0]
 8015a70:	f043 0320 	orr.w	r3, r3, #32
 8015a74:	6023      	str	r3, [r4, #0]
 8015a76:	2378      	movs	r3, #120	; 0x78
 8015a78:	4828      	ldr	r0, [pc, #160]	; (8015b1c <_printf_i+0x248>)
 8015a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a7e:	e7e3      	b.n	8015a48 <_printf_i+0x174>
 8015a80:	065e      	lsls	r6, r3, #25
 8015a82:	bf48      	it	mi
 8015a84:	b2ad      	uxthmi	r5, r5
 8015a86:	e7e6      	b.n	8015a56 <_printf_i+0x182>
 8015a88:	4616      	mov	r6, r2
 8015a8a:	e7bb      	b.n	8015a04 <_printf_i+0x130>
 8015a8c:	680b      	ldr	r3, [r1, #0]
 8015a8e:	6826      	ldr	r6, [r4, #0]
 8015a90:	6960      	ldr	r0, [r4, #20]
 8015a92:	1d1d      	adds	r5, r3, #4
 8015a94:	600d      	str	r5, [r1, #0]
 8015a96:	0635      	lsls	r5, r6, #24
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	d501      	bpl.n	8015aa0 <_printf_i+0x1cc>
 8015a9c:	6018      	str	r0, [r3, #0]
 8015a9e:	e002      	b.n	8015aa6 <_printf_i+0x1d2>
 8015aa0:	0671      	lsls	r1, r6, #25
 8015aa2:	d5fb      	bpl.n	8015a9c <_printf_i+0x1c8>
 8015aa4:	8018      	strh	r0, [r3, #0]
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	6123      	str	r3, [r4, #16]
 8015aaa:	4616      	mov	r6, r2
 8015aac:	e7ba      	b.n	8015a24 <_printf_i+0x150>
 8015aae:	680b      	ldr	r3, [r1, #0]
 8015ab0:	1d1a      	adds	r2, r3, #4
 8015ab2:	600a      	str	r2, [r1, #0]
 8015ab4:	681e      	ldr	r6, [r3, #0]
 8015ab6:	6862      	ldr	r2, [r4, #4]
 8015ab8:	2100      	movs	r1, #0
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7ea fb90 	bl	80001e0 <memchr>
 8015ac0:	b108      	cbz	r0, 8015ac6 <_printf_i+0x1f2>
 8015ac2:	1b80      	subs	r0, r0, r6
 8015ac4:	6060      	str	r0, [r4, #4]
 8015ac6:	6863      	ldr	r3, [r4, #4]
 8015ac8:	6123      	str	r3, [r4, #16]
 8015aca:	2300      	movs	r3, #0
 8015acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ad0:	e7a8      	b.n	8015a24 <_printf_i+0x150>
 8015ad2:	6923      	ldr	r3, [r4, #16]
 8015ad4:	4632      	mov	r2, r6
 8015ad6:	4649      	mov	r1, r9
 8015ad8:	4640      	mov	r0, r8
 8015ada:	47d0      	blx	sl
 8015adc:	3001      	adds	r0, #1
 8015ade:	d0ab      	beq.n	8015a38 <_printf_i+0x164>
 8015ae0:	6823      	ldr	r3, [r4, #0]
 8015ae2:	079b      	lsls	r3, r3, #30
 8015ae4:	d413      	bmi.n	8015b0e <_printf_i+0x23a>
 8015ae6:	68e0      	ldr	r0, [r4, #12]
 8015ae8:	9b03      	ldr	r3, [sp, #12]
 8015aea:	4298      	cmp	r0, r3
 8015aec:	bfb8      	it	lt
 8015aee:	4618      	movlt	r0, r3
 8015af0:	e7a4      	b.n	8015a3c <_printf_i+0x168>
 8015af2:	2301      	movs	r3, #1
 8015af4:	4632      	mov	r2, r6
 8015af6:	4649      	mov	r1, r9
 8015af8:	4640      	mov	r0, r8
 8015afa:	47d0      	blx	sl
 8015afc:	3001      	adds	r0, #1
 8015afe:	d09b      	beq.n	8015a38 <_printf_i+0x164>
 8015b00:	3501      	adds	r5, #1
 8015b02:	68e3      	ldr	r3, [r4, #12]
 8015b04:	9903      	ldr	r1, [sp, #12]
 8015b06:	1a5b      	subs	r3, r3, r1
 8015b08:	42ab      	cmp	r3, r5
 8015b0a:	dcf2      	bgt.n	8015af2 <_printf_i+0x21e>
 8015b0c:	e7eb      	b.n	8015ae6 <_printf_i+0x212>
 8015b0e:	2500      	movs	r5, #0
 8015b10:	f104 0619 	add.w	r6, r4, #25
 8015b14:	e7f5      	b.n	8015b02 <_printf_i+0x22e>
 8015b16:	bf00      	nop
 8015b18:	0801ac62 	.word	0x0801ac62
 8015b1c:	0801ac73 	.word	0x0801ac73

08015b20 <_scanf_float>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	b087      	sub	sp, #28
 8015b26:	4617      	mov	r7, r2
 8015b28:	9303      	str	r3, [sp, #12]
 8015b2a:	688b      	ldr	r3, [r1, #8]
 8015b2c:	1e5a      	subs	r2, r3, #1
 8015b2e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b32:	bf83      	ittte	hi
 8015b34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015b38:	195b      	addhi	r3, r3, r5
 8015b3a:	9302      	strhi	r3, [sp, #8]
 8015b3c:	2300      	movls	r3, #0
 8015b3e:	bf86      	itte	hi
 8015b40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b44:	608b      	strhi	r3, [r1, #8]
 8015b46:	9302      	strls	r3, [sp, #8]
 8015b48:	680b      	ldr	r3, [r1, #0]
 8015b4a:	468b      	mov	fp, r1
 8015b4c:	2500      	movs	r5, #0
 8015b4e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015b52:	f84b 3b1c 	str.w	r3, [fp], #28
 8015b56:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015b5a:	4680      	mov	r8, r0
 8015b5c:	460c      	mov	r4, r1
 8015b5e:	465e      	mov	r6, fp
 8015b60:	46aa      	mov	sl, r5
 8015b62:	46a9      	mov	r9, r5
 8015b64:	9501      	str	r5, [sp, #4]
 8015b66:	68a2      	ldr	r2, [r4, #8]
 8015b68:	b152      	cbz	r2, 8015b80 <_scanf_float+0x60>
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	2b4e      	cmp	r3, #78	; 0x4e
 8015b70:	d864      	bhi.n	8015c3c <_scanf_float+0x11c>
 8015b72:	2b40      	cmp	r3, #64	; 0x40
 8015b74:	d83c      	bhi.n	8015bf0 <_scanf_float+0xd0>
 8015b76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015b7a:	b2c8      	uxtb	r0, r1
 8015b7c:	280e      	cmp	r0, #14
 8015b7e:	d93a      	bls.n	8015bf6 <_scanf_float+0xd6>
 8015b80:	f1b9 0f00 	cmp.w	r9, #0
 8015b84:	d003      	beq.n	8015b8e <_scanf_float+0x6e>
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015b8c:	6023      	str	r3, [r4, #0]
 8015b8e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015b92:	f1ba 0f01 	cmp.w	sl, #1
 8015b96:	f200 8113 	bhi.w	8015dc0 <_scanf_float+0x2a0>
 8015b9a:	455e      	cmp	r6, fp
 8015b9c:	f200 8105 	bhi.w	8015daa <_scanf_float+0x28a>
 8015ba0:	2501      	movs	r5, #1
 8015ba2:	4628      	mov	r0, r5
 8015ba4:	b007      	add	sp, #28
 8015ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015baa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015bae:	2a0d      	cmp	r2, #13
 8015bb0:	d8e6      	bhi.n	8015b80 <_scanf_float+0x60>
 8015bb2:	a101      	add	r1, pc, #4	; (adr r1, 8015bb8 <_scanf_float+0x98>)
 8015bb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015bb8:	08015cf7 	.word	0x08015cf7
 8015bbc:	08015b81 	.word	0x08015b81
 8015bc0:	08015b81 	.word	0x08015b81
 8015bc4:	08015b81 	.word	0x08015b81
 8015bc8:	08015d57 	.word	0x08015d57
 8015bcc:	08015d2f 	.word	0x08015d2f
 8015bd0:	08015b81 	.word	0x08015b81
 8015bd4:	08015b81 	.word	0x08015b81
 8015bd8:	08015d05 	.word	0x08015d05
 8015bdc:	08015b81 	.word	0x08015b81
 8015be0:	08015b81 	.word	0x08015b81
 8015be4:	08015b81 	.word	0x08015b81
 8015be8:	08015b81 	.word	0x08015b81
 8015bec:	08015cbd 	.word	0x08015cbd
 8015bf0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015bf4:	e7db      	b.n	8015bae <_scanf_float+0x8e>
 8015bf6:	290e      	cmp	r1, #14
 8015bf8:	d8c2      	bhi.n	8015b80 <_scanf_float+0x60>
 8015bfa:	a001      	add	r0, pc, #4	; (adr r0, 8015c00 <_scanf_float+0xe0>)
 8015bfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015c00:	08015caf 	.word	0x08015caf
 8015c04:	08015b81 	.word	0x08015b81
 8015c08:	08015caf 	.word	0x08015caf
 8015c0c:	08015d43 	.word	0x08015d43
 8015c10:	08015b81 	.word	0x08015b81
 8015c14:	08015c5d 	.word	0x08015c5d
 8015c18:	08015c99 	.word	0x08015c99
 8015c1c:	08015c99 	.word	0x08015c99
 8015c20:	08015c99 	.word	0x08015c99
 8015c24:	08015c99 	.word	0x08015c99
 8015c28:	08015c99 	.word	0x08015c99
 8015c2c:	08015c99 	.word	0x08015c99
 8015c30:	08015c99 	.word	0x08015c99
 8015c34:	08015c99 	.word	0x08015c99
 8015c38:	08015c99 	.word	0x08015c99
 8015c3c:	2b6e      	cmp	r3, #110	; 0x6e
 8015c3e:	d809      	bhi.n	8015c54 <_scanf_float+0x134>
 8015c40:	2b60      	cmp	r3, #96	; 0x60
 8015c42:	d8b2      	bhi.n	8015baa <_scanf_float+0x8a>
 8015c44:	2b54      	cmp	r3, #84	; 0x54
 8015c46:	d077      	beq.n	8015d38 <_scanf_float+0x218>
 8015c48:	2b59      	cmp	r3, #89	; 0x59
 8015c4a:	d199      	bne.n	8015b80 <_scanf_float+0x60>
 8015c4c:	2d07      	cmp	r5, #7
 8015c4e:	d197      	bne.n	8015b80 <_scanf_float+0x60>
 8015c50:	2508      	movs	r5, #8
 8015c52:	e029      	b.n	8015ca8 <_scanf_float+0x188>
 8015c54:	2b74      	cmp	r3, #116	; 0x74
 8015c56:	d06f      	beq.n	8015d38 <_scanf_float+0x218>
 8015c58:	2b79      	cmp	r3, #121	; 0x79
 8015c5a:	e7f6      	b.n	8015c4a <_scanf_float+0x12a>
 8015c5c:	6821      	ldr	r1, [r4, #0]
 8015c5e:	05c8      	lsls	r0, r1, #23
 8015c60:	d51a      	bpl.n	8015c98 <_scanf_float+0x178>
 8015c62:	9b02      	ldr	r3, [sp, #8]
 8015c64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015c68:	6021      	str	r1, [r4, #0]
 8015c6a:	f109 0901 	add.w	r9, r9, #1
 8015c6e:	b11b      	cbz	r3, 8015c78 <_scanf_float+0x158>
 8015c70:	3b01      	subs	r3, #1
 8015c72:	3201      	adds	r2, #1
 8015c74:	9302      	str	r3, [sp, #8]
 8015c76:	60a2      	str	r2, [r4, #8]
 8015c78:	68a3      	ldr	r3, [r4, #8]
 8015c7a:	3b01      	subs	r3, #1
 8015c7c:	60a3      	str	r3, [r4, #8]
 8015c7e:	6923      	ldr	r3, [r4, #16]
 8015c80:	3301      	adds	r3, #1
 8015c82:	6123      	str	r3, [r4, #16]
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	3b01      	subs	r3, #1
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	607b      	str	r3, [r7, #4]
 8015c8c:	f340 8084 	ble.w	8015d98 <_scanf_float+0x278>
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	3301      	adds	r3, #1
 8015c94:	603b      	str	r3, [r7, #0]
 8015c96:	e766      	b.n	8015b66 <_scanf_float+0x46>
 8015c98:	eb1a 0f05 	cmn.w	sl, r5
 8015c9c:	f47f af70 	bne.w	8015b80 <_scanf_float+0x60>
 8015ca0:	6822      	ldr	r2, [r4, #0]
 8015ca2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015ca6:	6022      	str	r2, [r4, #0]
 8015ca8:	f806 3b01 	strb.w	r3, [r6], #1
 8015cac:	e7e4      	b.n	8015c78 <_scanf_float+0x158>
 8015cae:	6822      	ldr	r2, [r4, #0]
 8015cb0:	0610      	lsls	r0, r2, #24
 8015cb2:	f57f af65 	bpl.w	8015b80 <_scanf_float+0x60>
 8015cb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015cba:	e7f4      	b.n	8015ca6 <_scanf_float+0x186>
 8015cbc:	f1ba 0f00 	cmp.w	sl, #0
 8015cc0:	d10e      	bne.n	8015ce0 <_scanf_float+0x1c0>
 8015cc2:	f1b9 0f00 	cmp.w	r9, #0
 8015cc6:	d10e      	bne.n	8015ce6 <_scanf_float+0x1c6>
 8015cc8:	6822      	ldr	r2, [r4, #0]
 8015cca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015cce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015cd2:	d108      	bne.n	8015ce6 <_scanf_float+0x1c6>
 8015cd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015cd8:	6022      	str	r2, [r4, #0]
 8015cda:	f04f 0a01 	mov.w	sl, #1
 8015cde:	e7e3      	b.n	8015ca8 <_scanf_float+0x188>
 8015ce0:	f1ba 0f02 	cmp.w	sl, #2
 8015ce4:	d055      	beq.n	8015d92 <_scanf_float+0x272>
 8015ce6:	2d01      	cmp	r5, #1
 8015ce8:	d002      	beq.n	8015cf0 <_scanf_float+0x1d0>
 8015cea:	2d04      	cmp	r5, #4
 8015cec:	f47f af48 	bne.w	8015b80 <_scanf_float+0x60>
 8015cf0:	3501      	adds	r5, #1
 8015cf2:	b2ed      	uxtb	r5, r5
 8015cf4:	e7d8      	b.n	8015ca8 <_scanf_float+0x188>
 8015cf6:	f1ba 0f01 	cmp.w	sl, #1
 8015cfa:	f47f af41 	bne.w	8015b80 <_scanf_float+0x60>
 8015cfe:	f04f 0a02 	mov.w	sl, #2
 8015d02:	e7d1      	b.n	8015ca8 <_scanf_float+0x188>
 8015d04:	b97d      	cbnz	r5, 8015d26 <_scanf_float+0x206>
 8015d06:	f1b9 0f00 	cmp.w	r9, #0
 8015d0a:	f47f af3c 	bne.w	8015b86 <_scanf_float+0x66>
 8015d0e:	6822      	ldr	r2, [r4, #0]
 8015d10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015d14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015d18:	f47f af39 	bne.w	8015b8e <_scanf_float+0x6e>
 8015d1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015d20:	6022      	str	r2, [r4, #0]
 8015d22:	2501      	movs	r5, #1
 8015d24:	e7c0      	b.n	8015ca8 <_scanf_float+0x188>
 8015d26:	2d03      	cmp	r5, #3
 8015d28:	d0e2      	beq.n	8015cf0 <_scanf_float+0x1d0>
 8015d2a:	2d05      	cmp	r5, #5
 8015d2c:	e7de      	b.n	8015cec <_scanf_float+0x1cc>
 8015d2e:	2d02      	cmp	r5, #2
 8015d30:	f47f af26 	bne.w	8015b80 <_scanf_float+0x60>
 8015d34:	2503      	movs	r5, #3
 8015d36:	e7b7      	b.n	8015ca8 <_scanf_float+0x188>
 8015d38:	2d06      	cmp	r5, #6
 8015d3a:	f47f af21 	bne.w	8015b80 <_scanf_float+0x60>
 8015d3e:	2507      	movs	r5, #7
 8015d40:	e7b2      	b.n	8015ca8 <_scanf_float+0x188>
 8015d42:	6822      	ldr	r2, [r4, #0]
 8015d44:	0591      	lsls	r1, r2, #22
 8015d46:	f57f af1b 	bpl.w	8015b80 <_scanf_float+0x60>
 8015d4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015d4e:	6022      	str	r2, [r4, #0]
 8015d50:	f8cd 9004 	str.w	r9, [sp, #4]
 8015d54:	e7a8      	b.n	8015ca8 <_scanf_float+0x188>
 8015d56:	6822      	ldr	r2, [r4, #0]
 8015d58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015d5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015d60:	d006      	beq.n	8015d70 <_scanf_float+0x250>
 8015d62:	0550      	lsls	r0, r2, #21
 8015d64:	f57f af0c 	bpl.w	8015b80 <_scanf_float+0x60>
 8015d68:	f1b9 0f00 	cmp.w	r9, #0
 8015d6c:	f43f af0f 	beq.w	8015b8e <_scanf_float+0x6e>
 8015d70:	0591      	lsls	r1, r2, #22
 8015d72:	bf58      	it	pl
 8015d74:	9901      	ldrpl	r1, [sp, #4]
 8015d76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015d7a:	bf58      	it	pl
 8015d7c:	eba9 0101 	subpl.w	r1, r9, r1
 8015d80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8015d84:	bf58      	it	pl
 8015d86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015d8a:	6022      	str	r2, [r4, #0]
 8015d8c:	f04f 0900 	mov.w	r9, #0
 8015d90:	e78a      	b.n	8015ca8 <_scanf_float+0x188>
 8015d92:	f04f 0a03 	mov.w	sl, #3
 8015d96:	e787      	b.n	8015ca8 <_scanf_float+0x188>
 8015d98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015d9c:	4639      	mov	r1, r7
 8015d9e:	4640      	mov	r0, r8
 8015da0:	4798      	blx	r3
 8015da2:	2800      	cmp	r0, #0
 8015da4:	f43f aedf 	beq.w	8015b66 <_scanf_float+0x46>
 8015da8:	e6ea      	b.n	8015b80 <_scanf_float+0x60>
 8015daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015db2:	463a      	mov	r2, r7
 8015db4:	4640      	mov	r0, r8
 8015db6:	4798      	blx	r3
 8015db8:	6923      	ldr	r3, [r4, #16]
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	6123      	str	r3, [r4, #16]
 8015dbe:	e6ec      	b.n	8015b9a <_scanf_float+0x7a>
 8015dc0:	1e6b      	subs	r3, r5, #1
 8015dc2:	2b06      	cmp	r3, #6
 8015dc4:	d825      	bhi.n	8015e12 <_scanf_float+0x2f2>
 8015dc6:	2d02      	cmp	r5, #2
 8015dc8:	d836      	bhi.n	8015e38 <_scanf_float+0x318>
 8015dca:	455e      	cmp	r6, fp
 8015dcc:	f67f aee8 	bls.w	8015ba0 <_scanf_float+0x80>
 8015dd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dd4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015dd8:	463a      	mov	r2, r7
 8015dda:	4640      	mov	r0, r8
 8015ddc:	4798      	blx	r3
 8015dde:	6923      	ldr	r3, [r4, #16]
 8015de0:	3b01      	subs	r3, #1
 8015de2:	6123      	str	r3, [r4, #16]
 8015de4:	e7f1      	b.n	8015dca <_scanf_float+0x2aa>
 8015de6:	9802      	ldr	r0, [sp, #8]
 8015de8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8015df0:	9002      	str	r0, [sp, #8]
 8015df2:	463a      	mov	r2, r7
 8015df4:	4640      	mov	r0, r8
 8015df6:	4798      	blx	r3
 8015df8:	6923      	ldr	r3, [r4, #16]
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	6123      	str	r3, [r4, #16]
 8015dfe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015e02:	fa5f fa8a 	uxtb.w	sl, sl
 8015e06:	f1ba 0f02 	cmp.w	sl, #2
 8015e0a:	d1ec      	bne.n	8015de6 <_scanf_float+0x2c6>
 8015e0c:	3d03      	subs	r5, #3
 8015e0e:	b2ed      	uxtb	r5, r5
 8015e10:	1b76      	subs	r6, r6, r5
 8015e12:	6823      	ldr	r3, [r4, #0]
 8015e14:	05da      	lsls	r2, r3, #23
 8015e16:	d52f      	bpl.n	8015e78 <_scanf_float+0x358>
 8015e18:	055b      	lsls	r3, r3, #21
 8015e1a:	d510      	bpl.n	8015e3e <_scanf_float+0x31e>
 8015e1c:	455e      	cmp	r6, fp
 8015e1e:	f67f aebf 	bls.w	8015ba0 <_scanf_float+0x80>
 8015e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015e2a:	463a      	mov	r2, r7
 8015e2c:	4640      	mov	r0, r8
 8015e2e:	4798      	blx	r3
 8015e30:	6923      	ldr	r3, [r4, #16]
 8015e32:	3b01      	subs	r3, #1
 8015e34:	6123      	str	r3, [r4, #16]
 8015e36:	e7f1      	b.n	8015e1c <_scanf_float+0x2fc>
 8015e38:	46aa      	mov	sl, r5
 8015e3a:	9602      	str	r6, [sp, #8]
 8015e3c:	e7df      	b.n	8015dfe <_scanf_float+0x2de>
 8015e3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8015e42:	6923      	ldr	r3, [r4, #16]
 8015e44:	2965      	cmp	r1, #101	; 0x65
 8015e46:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015e4a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8015e4e:	6123      	str	r3, [r4, #16]
 8015e50:	d00c      	beq.n	8015e6c <_scanf_float+0x34c>
 8015e52:	2945      	cmp	r1, #69	; 0x45
 8015e54:	d00a      	beq.n	8015e6c <_scanf_float+0x34c>
 8015e56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e5a:	463a      	mov	r2, r7
 8015e5c:	4640      	mov	r0, r8
 8015e5e:	4798      	blx	r3
 8015e60:	6923      	ldr	r3, [r4, #16]
 8015e62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8015e66:	3b01      	subs	r3, #1
 8015e68:	1eb5      	subs	r5, r6, #2
 8015e6a:	6123      	str	r3, [r4, #16]
 8015e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e70:	463a      	mov	r2, r7
 8015e72:	4640      	mov	r0, r8
 8015e74:	4798      	blx	r3
 8015e76:	462e      	mov	r6, r5
 8015e78:	6825      	ldr	r5, [r4, #0]
 8015e7a:	f015 0510 	ands.w	r5, r5, #16
 8015e7e:	d158      	bne.n	8015f32 <_scanf_float+0x412>
 8015e80:	7035      	strb	r5, [r6, #0]
 8015e82:	6823      	ldr	r3, [r4, #0]
 8015e84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e8c:	d11c      	bne.n	8015ec8 <_scanf_float+0x3a8>
 8015e8e:	9b01      	ldr	r3, [sp, #4]
 8015e90:	454b      	cmp	r3, r9
 8015e92:	eba3 0209 	sub.w	r2, r3, r9
 8015e96:	d124      	bne.n	8015ee2 <_scanf_float+0x3c2>
 8015e98:	2200      	movs	r2, #0
 8015e9a:	4659      	mov	r1, fp
 8015e9c:	4640      	mov	r0, r8
 8015e9e:	f000 ff79 	bl	8016d94 <_strtod_r>
 8015ea2:	9b03      	ldr	r3, [sp, #12]
 8015ea4:	6821      	ldr	r1, [r4, #0]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f011 0f02 	tst.w	r1, #2
 8015eac:	ec57 6b10 	vmov	r6, r7, d0
 8015eb0:	f103 0204 	add.w	r2, r3, #4
 8015eb4:	d020      	beq.n	8015ef8 <_scanf_float+0x3d8>
 8015eb6:	9903      	ldr	r1, [sp, #12]
 8015eb8:	600a      	str	r2, [r1, #0]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	e9c3 6700 	strd	r6, r7, [r3]
 8015ec0:	68e3      	ldr	r3, [r4, #12]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	60e3      	str	r3, [r4, #12]
 8015ec6:	e66c      	b.n	8015ba2 <_scanf_float+0x82>
 8015ec8:	9b04      	ldr	r3, [sp, #16]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d0e4      	beq.n	8015e98 <_scanf_float+0x378>
 8015ece:	9905      	ldr	r1, [sp, #20]
 8015ed0:	230a      	movs	r3, #10
 8015ed2:	462a      	mov	r2, r5
 8015ed4:	3101      	adds	r1, #1
 8015ed6:	4640      	mov	r0, r8
 8015ed8:	f000 ffe6 	bl	8016ea8 <_strtol_r>
 8015edc:	9b04      	ldr	r3, [sp, #16]
 8015ede:	9e05      	ldr	r6, [sp, #20]
 8015ee0:	1ac2      	subs	r2, r0, r3
 8015ee2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015ee6:	429e      	cmp	r6, r3
 8015ee8:	bf28      	it	cs
 8015eea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015eee:	4912      	ldr	r1, [pc, #72]	; (8015f38 <_scanf_float+0x418>)
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f000 f8c3 	bl	801607c <siprintf>
 8015ef6:	e7cf      	b.n	8015e98 <_scanf_float+0x378>
 8015ef8:	f011 0f04 	tst.w	r1, #4
 8015efc:	9903      	ldr	r1, [sp, #12]
 8015efe:	600a      	str	r2, [r1, #0]
 8015f00:	d1db      	bne.n	8015eba <_scanf_float+0x39a>
 8015f02:	f8d3 8000 	ldr.w	r8, [r3]
 8015f06:	ee10 2a10 	vmov	r2, s0
 8015f0a:	ee10 0a10 	vmov	r0, s0
 8015f0e:	463b      	mov	r3, r7
 8015f10:	4639      	mov	r1, r7
 8015f12:	f7ea fe0b 	bl	8000b2c <__aeabi_dcmpun>
 8015f16:	b128      	cbz	r0, 8015f24 <_scanf_float+0x404>
 8015f18:	4808      	ldr	r0, [pc, #32]	; (8015f3c <_scanf_float+0x41c>)
 8015f1a:	f000 f837 	bl	8015f8c <nanf>
 8015f1e:	ed88 0a00 	vstr	s0, [r8]
 8015f22:	e7cd      	b.n	8015ec0 <_scanf_float+0x3a0>
 8015f24:	4630      	mov	r0, r6
 8015f26:	4639      	mov	r1, r7
 8015f28:	f7ea fe5e 	bl	8000be8 <__aeabi_d2f>
 8015f2c:	f8c8 0000 	str.w	r0, [r8]
 8015f30:	e7c6      	b.n	8015ec0 <_scanf_float+0x3a0>
 8015f32:	2500      	movs	r5, #0
 8015f34:	e635      	b.n	8015ba2 <_scanf_float+0x82>
 8015f36:	bf00      	nop
 8015f38:	0801ac84 	.word	0x0801ac84
 8015f3c:	0801b0a0 	.word	0x0801b0a0

08015f40 <ldexpf>:
 8015f40:	b510      	push	{r4, lr}
 8015f42:	ed2d 8b02 	vpush	{d8}
 8015f46:	4604      	mov	r4, r0
 8015f48:	eeb0 8a40 	vmov.f32	s16, s0
 8015f4c:	f003 f8e4 	bl	8019118 <finitef>
 8015f50:	b1b8      	cbz	r0, 8015f82 <ldexpf+0x42>
 8015f52:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f5a:	d012      	beq.n	8015f82 <ldexpf+0x42>
 8015f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8015f60:	4620      	mov	r0, r4
 8015f62:	f000 f819 	bl	8015f98 <scalbnf>
 8015f66:	eeb0 8a40 	vmov.f32	s16, s0
 8015f6a:	f003 f8d5 	bl	8019118 <finitef>
 8015f6e:	b120      	cbz	r0, 8015f7a <ldexpf+0x3a>
 8015f70:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f78:	d103      	bne.n	8015f82 <ldexpf+0x42>
 8015f7a:	f7ff f927 	bl	80151cc <__errno>
 8015f7e:	2322      	movs	r3, #34	; 0x22
 8015f80:	6003      	str	r3, [r0, #0]
 8015f82:	eeb0 0a48 	vmov.f32	s0, s16
 8015f86:	ecbd 8b02 	vpop	{d8}
 8015f8a:	bd10      	pop	{r4, pc}

08015f8c <nanf>:
 8015f8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f94 <nanf+0x8>
 8015f90:	4770      	bx	lr
 8015f92:	bf00      	nop
 8015f94:	7fc00000 	.word	0x7fc00000

08015f98 <scalbnf>:
 8015f98:	ee10 3a10 	vmov	r3, s0
 8015f9c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015fa0:	d025      	beq.n	8015fee <scalbnf+0x56>
 8015fa2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015fa6:	d302      	bcc.n	8015fae <scalbnf+0x16>
 8015fa8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015fac:	4770      	bx	lr
 8015fae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015fb2:	d122      	bne.n	8015ffa <scalbnf+0x62>
 8015fb4:	4b2a      	ldr	r3, [pc, #168]	; (8016060 <scalbnf+0xc8>)
 8015fb6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016064 <scalbnf+0xcc>
 8015fba:	4298      	cmp	r0, r3
 8015fbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015fc0:	db16      	blt.n	8015ff0 <scalbnf+0x58>
 8015fc2:	ee10 3a10 	vmov	r3, s0
 8015fc6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015fca:	3a19      	subs	r2, #25
 8015fcc:	4402      	add	r2, r0
 8015fce:	2afe      	cmp	r2, #254	; 0xfe
 8015fd0:	dd15      	ble.n	8015ffe <scalbnf+0x66>
 8015fd2:	ee10 3a10 	vmov	r3, s0
 8015fd6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016068 <scalbnf+0xd0>
 8015fda:	eddf 6a24 	vldr	s13, [pc, #144]	; 801606c <scalbnf+0xd4>
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	eeb0 7a67 	vmov.f32	s14, s15
 8015fe4:	bfb8      	it	lt
 8015fe6:	eef0 7a66 	vmovlt.f32	s15, s13
 8015fea:	ee27 0a27 	vmul.f32	s0, s14, s15
 8015fee:	4770      	bx	lr
 8015ff0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016070 <scalbnf+0xd8>
 8015ff4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015ff8:	4770      	bx	lr
 8015ffa:	0dd2      	lsrs	r2, r2, #23
 8015ffc:	e7e6      	b.n	8015fcc <scalbnf+0x34>
 8015ffe:	2a00      	cmp	r2, #0
 8016000:	dd06      	ble.n	8016010 <scalbnf+0x78>
 8016002:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016006:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801600a:	ee00 3a10 	vmov	s0, r3
 801600e:	4770      	bx	lr
 8016010:	f112 0f16 	cmn.w	r2, #22
 8016014:	da1a      	bge.n	801604c <scalbnf+0xb4>
 8016016:	f24c 3350 	movw	r3, #50000	; 0xc350
 801601a:	4298      	cmp	r0, r3
 801601c:	ee10 3a10 	vmov	r3, s0
 8016020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016024:	dd0a      	ble.n	801603c <scalbnf+0xa4>
 8016026:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016068 <scalbnf+0xd0>
 801602a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801606c <scalbnf+0xd4>
 801602e:	eef0 7a40 	vmov.f32	s15, s0
 8016032:	2b00      	cmp	r3, #0
 8016034:	bf18      	it	ne
 8016036:	eeb0 0a47 	vmovne.f32	s0, s14
 801603a:	e7db      	b.n	8015ff4 <scalbnf+0x5c>
 801603c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016070 <scalbnf+0xd8>
 8016040:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016074 <scalbnf+0xdc>
 8016044:	eef0 7a40 	vmov.f32	s15, s0
 8016048:	2b00      	cmp	r3, #0
 801604a:	e7f3      	b.n	8016034 <scalbnf+0x9c>
 801604c:	3219      	adds	r2, #25
 801604e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016052:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016056:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016078 <scalbnf+0xe0>
 801605a:	ee07 3a10 	vmov	s14, r3
 801605e:	e7c4      	b.n	8015fea <scalbnf+0x52>
 8016060:	ffff3cb0 	.word	0xffff3cb0
 8016064:	4c000000 	.word	0x4c000000
 8016068:	7149f2ca 	.word	0x7149f2ca
 801606c:	f149f2ca 	.word	0xf149f2ca
 8016070:	0da24260 	.word	0x0da24260
 8016074:	8da24260 	.word	0x8da24260
 8016078:	33000000 	.word	0x33000000

0801607c <siprintf>:
 801607c:	b40e      	push	{r1, r2, r3}
 801607e:	b500      	push	{lr}
 8016080:	b09c      	sub	sp, #112	; 0x70
 8016082:	ab1d      	add	r3, sp, #116	; 0x74
 8016084:	9002      	str	r0, [sp, #8]
 8016086:	9006      	str	r0, [sp, #24]
 8016088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801608c:	4809      	ldr	r0, [pc, #36]	; (80160b4 <siprintf+0x38>)
 801608e:	9107      	str	r1, [sp, #28]
 8016090:	9104      	str	r1, [sp, #16]
 8016092:	4909      	ldr	r1, [pc, #36]	; (80160b8 <siprintf+0x3c>)
 8016094:	f853 2b04 	ldr.w	r2, [r3], #4
 8016098:	9105      	str	r1, [sp, #20]
 801609a:	6800      	ldr	r0, [r0, #0]
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	a902      	add	r1, sp, #8
 80160a0:	f002 ff0e 	bl	8018ec0 <_svfiprintf_r>
 80160a4:	9b02      	ldr	r3, [sp, #8]
 80160a6:	2200      	movs	r2, #0
 80160a8:	701a      	strb	r2, [r3, #0]
 80160aa:	b01c      	add	sp, #112	; 0x70
 80160ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80160b0:	b003      	add	sp, #12
 80160b2:	4770      	bx	lr
 80160b4:	2000042c 	.word	0x2000042c
 80160b8:	ffff0208 	.word	0xffff0208

080160bc <__sread>:
 80160bc:	b510      	push	{r4, lr}
 80160be:	460c      	mov	r4, r1
 80160c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160c4:	f002 fffc 	bl	80190c0 <_read_r>
 80160c8:	2800      	cmp	r0, #0
 80160ca:	bfab      	itete	ge
 80160cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80160ce:	89a3      	ldrhlt	r3, [r4, #12]
 80160d0:	181b      	addge	r3, r3, r0
 80160d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80160d6:	bfac      	ite	ge
 80160d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80160da:	81a3      	strhlt	r3, [r4, #12]
 80160dc:	bd10      	pop	{r4, pc}

080160de <__swrite>:
 80160de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e2:	461f      	mov	r7, r3
 80160e4:	898b      	ldrh	r3, [r1, #12]
 80160e6:	05db      	lsls	r3, r3, #23
 80160e8:	4605      	mov	r5, r0
 80160ea:	460c      	mov	r4, r1
 80160ec:	4616      	mov	r6, r2
 80160ee:	d505      	bpl.n	80160fc <__swrite+0x1e>
 80160f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f4:	2302      	movs	r3, #2
 80160f6:	2200      	movs	r2, #0
 80160f8:	f002 f8e6 	bl	80182c8 <_lseek_r>
 80160fc:	89a3      	ldrh	r3, [r4, #12]
 80160fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016106:	81a3      	strh	r3, [r4, #12]
 8016108:	4632      	mov	r2, r6
 801610a:	463b      	mov	r3, r7
 801610c:	4628      	mov	r0, r5
 801610e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016112:	f000 becb 	b.w	8016eac <_write_r>

08016116 <__sseek>:
 8016116:	b510      	push	{r4, lr}
 8016118:	460c      	mov	r4, r1
 801611a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801611e:	f002 f8d3 	bl	80182c8 <_lseek_r>
 8016122:	1c43      	adds	r3, r0, #1
 8016124:	89a3      	ldrh	r3, [r4, #12]
 8016126:	bf15      	itete	ne
 8016128:	6560      	strne	r0, [r4, #84]	; 0x54
 801612a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801612e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016132:	81a3      	strheq	r3, [r4, #12]
 8016134:	bf18      	it	ne
 8016136:	81a3      	strhne	r3, [r4, #12]
 8016138:	bd10      	pop	{r4, pc}

0801613a <__sclose>:
 801613a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801613e:	f000 bec7 	b.w	8016ed0 <_close_r>

08016142 <sulp>:
 8016142:	b570      	push	{r4, r5, r6, lr}
 8016144:	4604      	mov	r4, r0
 8016146:	460d      	mov	r5, r1
 8016148:	ec45 4b10 	vmov	d0, r4, r5
 801614c:	4616      	mov	r6, r2
 801614e:	f002 fc53 	bl	80189f8 <__ulp>
 8016152:	ec51 0b10 	vmov	r0, r1, d0
 8016156:	b17e      	cbz	r6, 8016178 <sulp+0x36>
 8016158:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801615c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016160:	2b00      	cmp	r3, #0
 8016162:	dd09      	ble.n	8016178 <sulp+0x36>
 8016164:	051b      	lsls	r3, r3, #20
 8016166:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801616a:	2400      	movs	r4, #0
 801616c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016170:	4622      	mov	r2, r4
 8016172:	462b      	mov	r3, r5
 8016174:	f7ea fa40 	bl	80005f8 <__aeabi_dmul>
 8016178:	bd70      	pop	{r4, r5, r6, pc}
 801617a:	0000      	movs	r0, r0
 801617c:	0000      	movs	r0, r0
	...

08016180 <_strtod_l>:
 8016180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016184:	b0a3      	sub	sp, #140	; 0x8c
 8016186:	461f      	mov	r7, r3
 8016188:	2300      	movs	r3, #0
 801618a:	931e      	str	r3, [sp, #120]	; 0x78
 801618c:	4ba4      	ldr	r3, [pc, #656]	; (8016420 <_strtod_l+0x2a0>)
 801618e:	9219      	str	r2, [sp, #100]	; 0x64
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	9307      	str	r3, [sp, #28]
 8016194:	4604      	mov	r4, r0
 8016196:	4618      	mov	r0, r3
 8016198:	4688      	mov	r8, r1
 801619a:	f7ea f819 	bl	80001d0 <strlen>
 801619e:	f04f 0a00 	mov.w	sl, #0
 80161a2:	4605      	mov	r5, r0
 80161a4:	f04f 0b00 	mov.w	fp, #0
 80161a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80161ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80161ae:	781a      	ldrb	r2, [r3, #0]
 80161b0:	2a2b      	cmp	r2, #43	; 0x2b
 80161b2:	d04c      	beq.n	801624e <_strtod_l+0xce>
 80161b4:	d839      	bhi.n	801622a <_strtod_l+0xaa>
 80161b6:	2a0d      	cmp	r2, #13
 80161b8:	d832      	bhi.n	8016220 <_strtod_l+0xa0>
 80161ba:	2a08      	cmp	r2, #8
 80161bc:	d832      	bhi.n	8016224 <_strtod_l+0xa4>
 80161be:	2a00      	cmp	r2, #0
 80161c0:	d03c      	beq.n	801623c <_strtod_l+0xbc>
 80161c2:	2300      	movs	r3, #0
 80161c4:	930e      	str	r3, [sp, #56]	; 0x38
 80161c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80161c8:	7833      	ldrb	r3, [r6, #0]
 80161ca:	2b30      	cmp	r3, #48	; 0x30
 80161cc:	f040 80b4 	bne.w	8016338 <_strtod_l+0x1b8>
 80161d0:	7873      	ldrb	r3, [r6, #1]
 80161d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80161d6:	2b58      	cmp	r3, #88	; 0x58
 80161d8:	d16c      	bne.n	80162b4 <_strtod_l+0x134>
 80161da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161dc:	9301      	str	r3, [sp, #4]
 80161de:	ab1e      	add	r3, sp, #120	; 0x78
 80161e0:	9702      	str	r7, [sp, #8]
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	4a8f      	ldr	r2, [pc, #572]	; (8016424 <_strtod_l+0x2a4>)
 80161e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80161e8:	a91d      	add	r1, sp, #116	; 0x74
 80161ea:	4620      	mov	r0, r4
 80161ec:	f001 fd60 	bl	8017cb0 <__gethex>
 80161f0:	f010 0707 	ands.w	r7, r0, #7
 80161f4:	4605      	mov	r5, r0
 80161f6:	d005      	beq.n	8016204 <_strtod_l+0x84>
 80161f8:	2f06      	cmp	r7, #6
 80161fa:	d12a      	bne.n	8016252 <_strtod_l+0xd2>
 80161fc:	3601      	adds	r6, #1
 80161fe:	2300      	movs	r3, #0
 8016200:	961d      	str	r6, [sp, #116]	; 0x74
 8016202:	930e      	str	r3, [sp, #56]	; 0x38
 8016204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016206:	2b00      	cmp	r3, #0
 8016208:	f040 8596 	bne.w	8016d38 <_strtod_l+0xbb8>
 801620c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801620e:	b1db      	cbz	r3, 8016248 <_strtod_l+0xc8>
 8016210:	4652      	mov	r2, sl
 8016212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016216:	ec43 2b10 	vmov	d0, r2, r3
 801621a:	b023      	add	sp, #140	; 0x8c
 801621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016220:	2a20      	cmp	r2, #32
 8016222:	d1ce      	bne.n	80161c2 <_strtod_l+0x42>
 8016224:	3301      	adds	r3, #1
 8016226:	931d      	str	r3, [sp, #116]	; 0x74
 8016228:	e7c0      	b.n	80161ac <_strtod_l+0x2c>
 801622a:	2a2d      	cmp	r2, #45	; 0x2d
 801622c:	d1c9      	bne.n	80161c2 <_strtod_l+0x42>
 801622e:	2201      	movs	r2, #1
 8016230:	920e      	str	r2, [sp, #56]	; 0x38
 8016232:	1c5a      	adds	r2, r3, #1
 8016234:	921d      	str	r2, [sp, #116]	; 0x74
 8016236:	785b      	ldrb	r3, [r3, #1]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1c4      	bne.n	80161c6 <_strtod_l+0x46>
 801623c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801623e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016242:	2b00      	cmp	r3, #0
 8016244:	f040 8576 	bne.w	8016d34 <_strtod_l+0xbb4>
 8016248:	4652      	mov	r2, sl
 801624a:	465b      	mov	r3, fp
 801624c:	e7e3      	b.n	8016216 <_strtod_l+0x96>
 801624e:	2200      	movs	r2, #0
 8016250:	e7ee      	b.n	8016230 <_strtod_l+0xb0>
 8016252:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016254:	b13a      	cbz	r2, 8016266 <_strtod_l+0xe6>
 8016256:	2135      	movs	r1, #53	; 0x35
 8016258:	a820      	add	r0, sp, #128	; 0x80
 801625a:	f002 fcd8 	bl	8018c0e <__copybits>
 801625e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016260:	4620      	mov	r0, r4
 8016262:	f002 f89d 	bl	80183a0 <_Bfree>
 8016266:	3f01      	subs	r7, #1
 8016268:	2f05      	cmp	r7, #5
 801626a:	d807      	bhi.n	801627c <_strtod_l+0xfc>
 801626c:	e8df f007 	tbb	[pc, r7]
 8016270:	1d180b0e 	.word	0x1d180b0e
 8016274:	030e      	.short	0x030e
 8016276:	f04f 0b00 	mov.w	fp, #0
 801627a:	46da      	mov	sl, fp
 801627c:	0728      	lsls	r0, r5, #28
 801627e:	d5c1      	bpl.n	8016204 <_strtod_l+0x84>
 8016280:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016284:	e7be      	b.n	8016204 <_strtod_l+0x84>
 8016286:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801628a:	e7f7      	b.n	801627c <_strtod_l+0xfc>
 801628c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016290:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801629a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801629e:	e7ed      	b.n	801627c <_strtod_l+0xfc>
 80162a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016428 <_strtod_l+0x2a8>
 80162a4:	f04f 0a00 	mov.w	sl, #0
 80162a8:	e7e8      	b.n	801627c <_strtod_l+0xfc>
 80162aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80162ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80162b2:	e7e3      	b.n	801627c <_strtod_l+0xfc>
 80162b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162b6:	1c5a      	adds	r2, r3, #1
 80162b8:	921d      	str	r2, [sp, #116]	; 0x74
 80162ba:	785b      	ldrb	r3, [r3, #1]
 80162bc:	2b30      	cmp	r3, #48	; 0x30
 80162be:	d0f9      	beq.n	80162b4 <_strtod_l+0x134>
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d09f      	beq.n	8016204 <_strtod_l+0x84>
 80162c4:	2301      	movs	r3, #1
 80162c6:	f04f 0900 	mov.w	r9, #0
 80162ca:	9304      	str	r3, [sp, #16]
 80162cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80162ce:	930a      	str	r3, [sp, #40]	; 0x28
 80162d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80162d4:	464f      	mov	r7, r9
 80162d6:	220a      	movs	r2, #10
 80162d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80162da:	7806      	ldrb	r6, [r0, #0]
 80162dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80162e0:	b2d9      	uxtb	r1, r3
 80162e2:	2909      	cmp	r1, #9
 80162e4:	d92a      	bls.n	801633c <_strtod_l+0x1bc>
 80162e6:	9907      	ldr	r1, [sp, #28]
 80162e8:	462a      	mov	r2, r5
 80162ea:	f002 ff22 	bl	8019132 <strncmp>
 80162ee:	b398      	cbz	r0, 8016358 <_strtod_l+0x1d8>
 80162f0:	2000      	movs	r0, #0
 80162f2:	4633      	mov	r3, r6
 80162f4:	463d      	mov	r5, r7
 80162f6:	9007      	str	r0, [sp, #28]
 80162f8:	4602      	mov	r2, r0
 80162fa:	2b65      	cmp	r3, #101	; 0x65
 80162fc:	d001      	beq.n	8016302 <_strtod_l+0x182>
 80162fe:	2b45      	cmp	r3, #69	; 0x45
 8016300:	d118      	bne.n	8016334 <_strtod_l+0x1b4>
 8016302:	b91d      	cbnz	r5, 801630c <_strtod_l+0x18c>
 8016304:	9b04      	ldr	r3, [sp, #16]
 8016306:	4303      	orrs	r3, r0
 8016308:	d098      	beq.n	801623c <_strtod_l+0xbc>
 801630a:	2500      	movs	r5, #0
 801630c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016310:	f108 0301 	add.w	r3, r8, #1
 8016314:	931d      	str	r3, [sp, #116]	; 0x74
 8016316:	f898 3001 	ldrb.w	r3, [r8, #1]
 801631a:	2b2b      	cmp	r3, #43	; 0x2b
 801631c:	d075      	beq.n	801640a <_strtod_l+0x28a>
 801631e:	2b2d      	cmp	r3, #45	; 0x2d
 8016320:	d07b      	beq.n	801641a <_strtod_l+0x29a>
 8016322:	f04f 0c00 	mov.w	ip, #0
 8016326:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801632a:	2909      	cmp	r1, #9
 801632c:	f240 8082 	bls.w	8016434 <_strtod_l+0x2b4>
 8016330:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016334:	2600      	movs	r6, #0
 8016336:	e09d      	b.n	8016474 <_strtod_l+0x2f4>
 8016338:	2300      	movs	r3, #0
 801633a:	e7c4      	b.n	80162c6 <_strtod_l+0x146>
 801633c:	2f08      	cmp	r7, #8
 801633e:	bfd8      	it	le
 8016340:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016342:	f100 0001 	add.w	r0, r0, #1
 8016346:	bfda      	itte	le
 8016348:	fb02 3301 	mlale	r3, r2, r1, r3
 801634c:	9309      	strle	r3, [sp, #36]	; 0x24
 801634e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016352:	3701      	adds	r7, #1
 8016354:	901d      	str	r0, [sp, #116]	; 0x74
 8016356:	e7bf      	b.n	80162d8 <_strtod_l+0x158>
 8016358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801635a:	195a      	adds	r2, r3, r5
 801635c:	921d      	str	r2, [sp, #116]	; 0x74
 801635e:	5d5b      	ldrb	r3, [r3, r5]
 8016360:	2f00      	cmp	r7, #0
 8016362:	d037      	beq.n	80163d4 <_strtod_l+0x254>
 8016364:	9007      	str	r0, [sp, #28]
 8016366:	463d      	mov	r5, r7
 8016368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801636c:	2a09      	cmp	r2, #9
 801636e:	d912      	bls.n	8016396 <_strtod_l+0x216>
 8016370:	2201      	movs	r2, #1
 8016372:	e7c2      	b.n	80162fa <_strtod_l+0x17a>
 8016374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016376:	1c5a      	adds	r2, r3, #1
 8016378:	921d      	str	r2, [sp, #116]	; 0x74
 801637a:	785b      	ldrb	r3, [r3, #1]
 801637c:	3001      	adds	r0, #1
 801637e:	2b30      	cmp	r3, #48	; 0x30
 8016380:	d0f8      	beq.n	8016374 <_strtod_l+0x1f4>
 8016382:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016386:	2a08      	cmp	r2, #8
 8016388:	f200 84db 	bhi.w	8016d42 <_strtod_l+0xbc2>
 801638c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801638e:	9007      	str	r0, [sp, #28]
 8016390:	2000      	movs	r0, #0
 8016392:	920a      	str	r2, [sp, #40]	; 0x28
 8016394:	4605      	mov	r5, r0
 8016396:	3b30      	subs	r3, #48	; 0x30
 8016398:	f100 0201 	add.w	r2, r0, #1
 801639c:	d014      	beq.n	80163c8 <_strtod_l+0x248>
 801639e:	9907      	ldr	r1, [sp, #28]
 80163a0:	4411      	add	r1, r2
 80163a2:	9107      	str	r1, [sp, #28]
 80163a4:	462a      	mov	r2, r5
 80163a6:	eb00 0e05 	add.w	lr, r0, r5
 80163aa:	210a      	movs	r1, #10
 80163ac:	4572      	cmp	r2, lr
 80163ae:	d113      	bne.n	80163d8 <_strtod_l+0x258>
 80163b0:	182a      	adds	r2, r5, r0
 80163b2:	2a08      	cmp	r2, #8
 80163b4:	f105 0501 	add.w	r5, r5, #1
 80163b8:	4405      	add	r5, r0
 80163ba:	dc1c      	bgt.n	80163f6 <_strtod_l+0x276>
 80163bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80163be:	220a      	movs	r2, #10
 80163c0:	fb02 3301 	mla	r3, r2, r1, r3
 80163c4:	9309      	str	r3, [sp, #36]	; 0x24
 80163c6:	2200      	movs	r2, #0
 80163c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163ca:	1c59      	adds	r1, r3, #1
 80163cc:	911d      	str	r1, [sp, #116]	; 0x74
 80163ce:	785b      	ldrb	r3, [r3, #1]
 80163d0:	4610      	mov	r0, r2
 80163d2:	e7c9      	b.n	8016368 <_strtod_l+0x1e8>
 80163d4:	4638      	mov	r0, r7
 80163d6:	e7d2      	b.n	801637e <_strtod_l+0x1fe>
 80163d8:	2a08      	cmp	r2, #8
 80163da:	dc04      	bgt.n	80163e6 <_strtod_l+0x266>
 80163dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80163de:	434e      	muls	r6, r1
 80163e0:	9609      	str	r6, [sp, #36]	; 0x24
 80163e2:	3201      	adds	r2, #1
 80163e4:	e7e2      	b.n	80163ac <_strtod_l+0x22c>
 80163e6:	f102 0c01 	add.w	ip, r2, #1
 80163ea:	f1bc 0f10 	cmp.w	ip, #16
 80163ee:	bfd8      	it	le
 80163f0:	fb01 f909 	mulle.w	r9, r1, r9
 80163f4:	e7f5      	b.n	80163e2 <_strtod_l+0x262>
 80163f6:	2d10      	cmp	r5, #16
 80163f8:	bfdc      	itt	le
 80163fa:	220a      	movle	r2, #10
 80163fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8016400:	e7e1      	b.n	80163c6 <_strtod_l+0x246>
 8016402:	2300      	movs	r3, #0
 8016404:	9307      	str	r3, [sp, #28]
 8016406:	2201      	movs	r2, #1
 8016408:	e77c      	b.n	8016304 <_strtod_l+0x184>
 801640a:	f04f 0c00 	mov.w	ip, #0
 801640e:	f108 0302 	add.w	r3, r8, #2
 8016412:	931d      	str	r3, [sp, #116]	; 0x74
 8016414:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016418:	e785      	b.n	8016326 <_strtod_l+0x1a6>
 801641a:	f04f 0c01 	mov.w	ip, #1
 801641e:	e7f6      	b.n	801640e <_strtod_l+0x28e>
 8016420:	0801aee0 	.word	0x0801aee0
 8016424:	0801ac8c 	.word	0x0801ac8c
 8016428:	7ff00000 	.word	0x7ff00000
 801642c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801642e:	1c59      	adds	r1, r3, #1
 8016430:	911d      	str	r1, [sp, #116]	; 0x74
 8016432:	785b      	ldrb	r3, [r3, #1]
 8016434:	2b30      	cmp	r3, #48	; 0x30
 8016436:	d0f9      	beq.n	801642c <_strtod_l+0x2ac>
 8016438:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801643c:	2908      	cmp	r1, #8
 801643e:	f63f af79 	bhi.w	8016334 <_strtod_l+0x1b4>
 8016442:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016448:	9308      	str	r3, [sp, #32]
 801644a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801644c:	1c59      	adds	r1, r3, #1
 801644e:	911d      	str	r1, [sp, #116]	; 0x74
 8016450:	785b      	ldrb	r3, [r3, #1]
 8016452:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016456:	2e09      	cmp	r6, #9
 8016458:	d937      	bls.n	80164ca <_strtod_l+0x34a>
 801645a:	9e08      	ldr	r6, [sp, #32]
 801645c:	1b89      	subs	r1, r1, r6
 801645e:	2908      	cmp	r1, #8
 8016460:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016464:	dc02      	bgt.n	801646c <_strtod_l+0x2ec>
 8016466:	4576      	cmp	r6, lr
 8016468:	bfa8      	it	ge
 801646a:	4676      	movge	r6, lr
 801646c:	f1bc 0f00 	cmp.w	ip, #0
 8016470:	d000      	beq.n	8016474 <_strtod_l+0x2f4>
 8016472:	4276      	negs	r6, r6
 8016474:	2d00      	cmp	r5, #0
 8016476:	d14f      	bne.n	8016518 <_strtod_l+0x398>
 8016478:	9904      	ldr	r1, [sp, #16]
 801647a:	4301      	orrs	r1, r0
 801647c:	f47f aec2 	bne.w	8016204 <_strtod_l+0x84>
 8016480:	2a00      	cmp	r2, #0
 8016482:	f47f aedb 	bne.w	801623c <_strtod_l+0xbc>
 8016486:	2b69      	cmp	r3, #105	; 0x69
 8016488:	d027      	beq.n	80164da <_strtod_l+0x35a>
 801648a:	dc24      	bgt.n	80164d6 <_strtod_l+0x356>
 801648c:	2b49      	cmp	r3, #73	; 0x49
 801648e:	d024      	beq.n	80164da <_strtod_l+0x35a>
 8016490:	2b4e      	cmp	r3, #78	; 0x4e
 8016492:	f47f aed3 	bne.w	801623c <_strtod_l+0xbc>
 8016496:	499e      	ldr	r1, [pc, #632]	; (8016710 <_strtod_l+0x590>)
 8016498:	a81d      	add	r0, sp, #116	; 0x74
 801649a:	f001 fe61 	bl	8018160 <__match>
 801649e:	2800      	cmp	r0, #0
 80164a0:	f43f aecc 	beq.w	801623c <_strtod_l+0xbc>
 80164a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	2b28      	cmp	r3, #40	; 0x28
 80164aa:	d12d      	bne.n	8016508 <_strtod_l+0x388>
 80164ac:	4999      	ldr	r1, [pc, #612]	; (8016714 <_strtod_l+0x594>)
 80164ae:	aa20      	add	r2, sp, #128	; 0x80
 80164b0:	a81d      	add	r0, sp, #116	; 0x74
 80164b2:	f001 fe69 	bl	8018188 <__hexnan>
 80164b6:	2805      	cmp	r0, #5
 80164b8:	d126      	bne.n	8016508 <_strtod_l+0x388>
 80164ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80164bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80164c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80164c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80164c8:	e69c      	b.n	8016204 <_strtod_l+0x84>
 80164ca:	210a      	movs	r1, #10
 80164cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80164d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80164d4:	e7b9      	b.n	801644a <_strtod_l+0x2ca>
 80164d6:	2b6e      	cmp	r3, #110	; 0x6e
 80164d8:	e7db      	b.n	8016492 <_strtod_l+0x312>
 80164da:	498f      	ldr	r1, [pc, #572]	; (8016718 <_strtod_l+0x598>)
 80164dc:	a81d      	add	r0, sp, #116	; 0x74
 80164de:	f001 fe3f 	bl	8018160 <__match>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	f43f aeaa 	beq.w	801623c <_strtod_l+0xbc>
 80164e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164ea:	498c      	ldr	r1, [pc, #560]	; (801671c <_strtod_l+0x59c>)
 80164ec:	3b01      	subs	r3, #1
 80164ee:	a81d      	add	r0, sp, #116	; 0x74
 80164f0:	931d      	str	r3, [sp, #116]	; 0x74
 80164f2:	f001 fe35 	bl	8018160 <__match>
 80164f6:	b910      	cbnz	r0, 80164fe <_strtod_l+0x37e>
 80164f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80164fa:	3301      	adds	r3, #1
 80164fc:	931d      	str	r3, [sp, #116]	; 0x74
 80164fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801672c <_strtod_l+0x5ac>
 8016502:	f04f 0a00 	mov.w	sl, #0
 8016506:	e67d      	b.n	8016204 <_strtod_l+0x84>
 8016508:	4885      	ldr	r0, [pc, #532]	; (8016720 <_strtod_l+0x5a0>)
 801650a:	f002 fded 	bl	80190e8 <nan>
 801650e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8016512:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016516:	e675      	b.n	8016204 <_strtod_l+0x84>
 8016518:	9b07      	ldr	r3, [sp, #28]
 801651a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801651c:	1af3      	subs	r3, r6, r3
 801651e:	2f00      	cmp	r7, #0
 8016520:	bf08      	it	eq
 8016522:	462f      	moveq	r7, r5
 8016524:	2d10      	cmp	r5, #16
 8016526:	9308      	str	r3, [sp, #32]
 8016528:	46a8      	mov	r8, r5
 801652a:	bfa8      	it	ge
 801652c:	f04f 0810 	movge.w	r8, #16
 8016530:	f7e9 ffe8 	bl	8000504 <__aeabi_ui2d>
 8016534:	2d09      	cmp	r5, #9
 8016536:	4682      	mov	sl, r0
 8016538:	468b      	mov	fp, r1
 801653a:	dd13      	ble.n	8016564 <_strtod_l+0x3e4>
 801653c:	4b79      	ldr	r3, [pc, #484]	; (8016724 <_strtod_l+0x5a4>)
 801653e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016542:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016546:	f7ea f857 	bl	80005f8 <__aeabi_dmul>
 801654a:	4682      	mov	sl, r0
 801654c:	4648      	mov	r0, r9
 801654e:	468b      	mov	fp, r1
 8016550:	f7e9 ffd8 	bl	8000504 <__aeabi_ui2d>
 8016554:	4602      	mov	r2, r0
 8016556:	460b      	mov	r3, r1
 8016558:	4650      	mov	r0, sl
 801655a:	4659      	mov	r1, fp
 801655c:	f7e9 fe96 	bl	800028c <__adddf3>
 8016560:	4682      	mov	sl, r0
 8016562:	468b      	mov	fp, r1
 8016564:	2d0f      	cmp	r5, #15
 8016566:	dc38      	bgt.n	80165da <_strtod_l+0x45a>
 8016568:	9b08      	ldr	r3, [sp, #32]
 801656a:	2b00      	cmp	r3, #0
 801656c:	f43f ae4a 	beq.w	8016204 <_strtod_l+0x84>
 8016570:	dd24      	ble.n	80165bc <_strtod_l+0x43c>
 8016572:	2b16      	cmp	r3, #22
 8016574:	dc0b      	bgt.n	801658e <_strtod_l+0x40e>
 8016576:	4d6b      	ldr	r5, [pc, #428]	; (8016724 <_strtod_l+0x5a4>)
 8016578:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801657c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016580:	4652      	mov	r2, sl
 8016582:	465b      	mov	r3, fp
 8016584:	f7ea f838 	bl	80005f8 <__aeabi_dmul>
 8016588:	4682      	mov	sl, r0
 801658a:	468b      	mov	fp, r1
 801658c:	e63a      	b.n	8016204 <_strtod_l+0x84>
 801658e:	9a08      	ldr	r2, [sp, #32]
 8016590:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016594:	4293      	cmp	r3, r2
 8016596:	db20      	blt.n	80165da <_strtod_l+0x45a>
 8016598:	4c62      	ldr	r4, [pc, #392]	; (8016724 <_strtod_l+0x5a4>)
 801659a:	f1c5 050f 	rsb	r5, r5, #15
 801659e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80165a2:	4652      	mov	r2, sl
 80165a4:	465b      	mov	r3, fp
 80165a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165aa:	f7ea f825 	bl	80005f8 <__aeabi_dmul>
 80165ae:	9b08      	ldr	r3, [sp, #32]
 80165b0:	1b5d      	subs	r5, r3, r5
 80165b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80165b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165ba:	e7e3      	b.n	8016584 <_strtod_l+0x404>
 80165bc:	9b08      	ldr	r3, [sp, #32]
 80165be:	3316      	adds	r3, #22
 80165c0:	db0b      	blt.n	80165da <_strtod_l+0x45a>
 80165c2:	9b07      	ldr	r3, [sp, #28]
 80165c4:	4a57      	ldr	r2, [pc, #348]	; (8016724 <_strtod_l+0x5a4>)
 80165c6:	1b9e      	subs	r6, r3, r6
 80165c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80165cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80165d0:	4650      	mov	r0, sl
 80165d2:	4659      	mov	r1, fp
 80165d4:	f7ea f93a 	bl	800084c <__aeabi_ddiv>
 80165d8:	e7d6      	b.n	8016588 <_strtod_l+0x408>
 80165da:	9b08      	ldr	r3, [sp, #32]
 80165dc:	eba5 0808 	sub.w	r8, r5, r8
 80165e0:	4498      	add	r8, r3
 80165e2:	f1b8 0f00 	cmp.w	r8, #0
 80165e6:	dd71      	ble.n	80166cc <_strtod_l+0x54c>
 80165e8:	f018 030f 	ands.w	r3, r8, #15
 80165ec:	d00a      	beq.n	8016604 <_strtod_l+0x484>
 80165ee:	494d      	ldr	r1, [pc, #308]	; (8016724 <_strtod_l+0x5a4>)
 80165f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80165f4:	4652      	mov	r2, sl
 80165f6:	465b      	mov	r3, fp
 80165f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165fc:	f7e9 fffc 	bl	80005f8 <__aeabi_dmul>
 8016600:	4682      	mov	sl, r0
 8016602:	468b      	mov	fp, r1
 8016604:	f038 080f 	bics.w	r8, r8, #15
 8016608:	d04d      	beq.n	80166a6 <_strtod_l+0x526>
 801660a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801660e:	dd22      	ble.n	8016656 <_strtod_l+0x4d6>
 8016610:	2500      	movs	r5, #0
 8016612:	462e      	mov	r6, r5
 8016614:	9509      	str	r5, [sp, #36]	; 0x24
 8016616:	9507      	str	r5, [sp, #28]
 8016618:	2322      	movs	r3, #34	; 0x22
 801661a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801672c <_strtod_l+0x5ac>
 801661e:	6023      	str	r3, [r4, #0]
 8016620:	f04f 0a00 	mov.w	sl, #0
 8016624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016626:	2b00      	cmp	r3, #0
 8016628:	f43f adec 	beq.w	8016204 <_strtod_l+0x84>
 801662c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801662e:	4620      	mov	r0, r4
 8016630:	f001 feb6 	bl	80183a0 <_Bfree>
 8016634:	9907      	ldr	r1, [sp, #28]
 8016636:	4620      	mov	r0, r4
 8016638:	f001 feb2 	bl	80183a0 <_Bfree>
 801663c:	4631      	mov	r1, r6
 801663e:	4620      	mov	r0, r4
 8016640:	f001 feae 	bl	80183a0 <_Bfree>
 8016644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016646:	4620      	mov	r0, r4
 8016648:	f001 feaa 	bl	80183a0 <_Bfree>
 801664c:	4629      	mov	r1, r5
 801664e:	4620      	mov	r0, r4
 8016650:	f001 fea6 	bl	80183a0 <_Bfree>
 8016654:	e5d6      	b.n	8016204 <_strtod_l+0x84>
 8016656:	2300      	movs	r3, #0
 8016658:	ea4f 1828 	mov.w	r8, r8, asr #4
 801665c:	4650      	mov	r0, sl
 801665e:	4659      	mov	r1, fp
 8016660:	4699      	mov	r9, r3
 8016662:	f1b8 0f01 	cmp.w	r8, #1
 8016666:	dc21      	bgt.n	80166ac <_strtod_l+0x52c>
 8016668:	b10b      	cbz	r3, 801666e <_strtod_l+0x4ee>
 801666a:	4682      	mov	sl, r0
 801666c:	468b      	mov	fp, r1
 801666e:	4b2e      	ldr	r3, [pc, #184]	; (8016728 <_strtod_l+0x5a8>)
 8016670:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016674:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016678:	4652      	mov	r2, sl
 801667a:	465b      	mov	r3, fp
 801667c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016680:	f7e9 ffba 	bl	80005f8 <__aeabi_dmul>
 8016684:	4b29      	ldr	r3, [pc, #164]	; (801672c <_strtod_l+0x5ac>)
 8016686:	460a      	mov	r2, r1
 8016688:	400b      	ands	r3, r1
 801668a:	4929      	ldr	r1, [pc, #164]	; (8016730 <_strtod_l+0x5b0>)
 801668c:	428b      	cmp	r3, r1
 801668e:	4682      	mov	sl, r0
 8016690:	d8be      	bhi.n	8016610 <_strtod_l+0x490>
 8016692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016696:	428b      	cmp	r3, r1
 8016698:	bf86      	itte	hi
 801669a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016734 <_strtod_l+0x5b4>
 801669e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80166a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80166a6:	2300      	movs	r3, #0
 80166a8:	9304      	str	r3, [sp, #16]
 80166aa:	e081      	b.n	80167b0 <_strtod_l+0x630>
 80166ac:	f018 0f01 	tst.w	r8, #1
 80166b0:	d007      	beq.n	80166c2 <_strtod_l+0x542>
 80166b2:	4b1d      	ldr	r3, [pc, #116]	; (8016728 <_strtod_l+0x5a8>)
 80166b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80166b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166bc:	f7e9 ff9c 	bl	80005f8 <__aeabi_dmul>
 80166c0:	2301      	movs	r3, #1
 80166c2:	f109 0901 	add.w	r9, r9, #1
 80166c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80166ca:	e7ca      	b.n	8016662 <_strtod_l+0x4e2>
 80166cc:	d0eb      	beq.n	80166a6 <_strtod_l+0x526>
 80166ce:	f1c8 0800 	rsb	r8, r8, #0
 80166d2:	f018 020f 	ands.w	r2, r8, #15
 80166d6:	d00a      	beq.n	80166ee <_strtod_l+0x56e>
 80166d8:	4b12      	ldr	r3, [pc, #72]	; (8016724 <_strtod_l+0x5a4>)
 80166da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80166de:	4650      	mov	r0, sl
 80166e0:	4659      	mov	r1, fp
 80166e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e6:	f7ea f8b1 	bl	800084c <__aeabi_ddiv>
 80166ea:	4682      	mov	sl, r0
 80166ec:	468b      	mov	fp, r1
 80166ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80166f2:	d0d8      	beq.n	80166a6 <_strtod_l+0x526>
 80166f4:	f1b8 0f1f 	cmp.w	r8, #31
 80166f8:	dd1e      	ble.n	8016738 <_strtod_l+0x5b8>
 80166fa:	2500      	movs	r5, #0
 80166fc:	462e      	mov	r6, r5
 80166fe:	9509      	str	r5, [sp, #36]	; 0x24
 8016700:	9507      	str	r5, [sp, #28]
 8016702:	2322      	movs	r3, #34	; 0x22
 8016704:	f04f 0a00 	mov.w	sl, #0
 8016708:	f04f 0b00 	mov.w	fp, #0
 801670c:	6023      	str	r3, [r4, #0]
 801670e:	e789      	b.n	8016624 <_strtod_l+0x4a4>
 8016710:	0801ac5d 	.word	0x0801ac5d
 8016714:	0801aca0 	.word	0x0801aca0
 8016718:	0801ac55 	.word	0x0801ac55
 801671c:	0801ade4 	.word	0x0801ade4
 8016720:	0801b0a0 	.word	0x0801b0a0
 8016724:	0801af80 	.word	0x0801af80
 8016728:	0801af58 	.word	0x0801af58
 801672c:	7ff00000 	.word	0x7ff00000
 8016730:	7ca00000 	.word	0x7ca00000
 8016734:	7fefffff 	.word	0x7fefffff
 8016738:	f018 0310 	ands.w	r3, r8, #16
 801673c:	bf18      	it	ne
 801673e:	236a      	movne	r3, #106	; 0x6a
 8016740:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016af8 <_strtod_l+0x978>
 8016744:	9304      	str	r3, [sp, #16]
 8016746:	4650      	mov	r0, sl
 8016748:	4659      	mov	r1, fp
 801674a:	2300      	movs	r3, #0
 801674c:	f018 0f01 	tst.w	r8, #1
 8016750:	d004      	beq.n	801675c <_strtod_l+0x5dc>
 8016752:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016756:	f7e9 ff4f 	bl	80005f8 <__aeabi_dmul>
 801675a:	2301      	movs	r3, #1
 801675c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016760:	f109 0908 	add.w	r9, r9, #8
 8016764:	d1f2      	bne.n	801674c <_strtod_l+0x5cc>
 8016766:	b10b      	cbz	r3, 801676c <_strtod_l+0x5ec>
 8016768:	4682      	mov	sl, r0
 801676a:	468b      	mov	fp, r1
 801676c:	9b04      	ldr	r3, [sp, #16]
 801676e:	b1bb      	cbz	r3, 80167a0 <_strtod_l+0x620>
 8016770:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016774:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016778:	2b00      	cmp	r3, #0
 801677a:	4659      	mov	r1, fp
 801677c:	dd10      	ble.n	80167a0 <_strtod_l+0x620>
 801677e:	2b1f      	cmp	r3, #31
 8016780:	f340 8128 	ble.w	80169d4 <_strtod_l+0x854>
 8016784:	2b34      	cmp	r3, #52	; 0x34
 8016786:	bfde      	ittt	le
 8016788:	3b20      	suble	r3, #32
 801678a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801678e:	fa02 f303 	lslle.w	r3, r2, r3
 8016792:	f04f 0a00 	mov.w	sl, #0
 8016796:	bfcc      	ite	gt
 8016798:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801679c:	ea03 0b01 	andle.w	fp, r3, r1
 80167a0:	2200      	movs	r2, #0
 80167a2:	2300      	movs	r3, #0
 80167a4:	4650      	mov	r0, sl
 80167a6:	4659      	mov	r1, fp
 80167a8:	f7ea f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 80167ac:	2800      	cmp	r0, #0
 80167ae:	d1a4      	bne.n	80166fa <_strtod_l+0x57a>
 80167b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80167b6:	462b      	mov	r3, r5
 80167b8:	463a      	mov	r2, r7
 80167ba:	4620      	mov	r0, r4
 80167bc:	f001 fe5c 	bl	8018478 <__s2b>
 80167c0:	9009      	str	r0, [sp, #36]	; 0x24
 80167c2:	2800      	cmp	r0, #0
 80167c4:	f43f af24 	beq.w	8016610 <_strtod_l+0x490>
 80167c8:	9b07      	ldr	r3, [sp, #28]
 80167ca:	1b9e      	subs	r6, r3, r6
 80167cc:	9b08      	ldr	r3, [sp, #32]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	bfb4      	ite	lt
 80167d2:	4633      	movlt	r3, r6
 80167d4:	2300      	movge	r3, #0
 80167d6:	9310      	str	r3, [sp, #64]	; 0x40
 80167d8:	9b08      	ldr	r3, [sp, #32]
 80167da:	2500      	movs	r5, #0
 80167dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80167e0:	9318      	str	r3, [sp, #96]	; 0x60
 80167e2:	462e      	mov	r6, r5
 80167e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167e6:	4620      	mov	r0, r4
 80167e8:	6859      	ldr	r1, [r3, #4]
 80167ea:	f001 fd99 	bl	8018320 <_Balloc>
 80167ee:	9007      	str	r0, [sp, #28]
 80167f0:	2800      	cmp	r0, #0
 80167f2:	f43f af11 	beq.w	8016618 <_strtod_l+0x498>
 80167f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167f8:	691a      	ldr	r2, [r3, #16]
 80167fa:	3202      	adds	r2, #2
 80167fc:	f103 010c 	add.w	r1, r3, #12
 8016800:	0092      	lsls	r2, r2, #2
 8016802:	300c      	adds	r0, #12
 8016804:	f7fe fd0c 	bl	8015220 <memcpy>
 8016808:	ec4b ab10 	vmov	d0, sl, fp
 801680c:	aa20      	add	r2, sp, #128	; 0x80
 801680e:	a91f      	add	r1, sp, #124	; 0x7c
 8016810:	4620      	mov	r0, r4
 8016812:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016816:	f002 f96b 	bl	8018af0 <__d2b>
 801681a:	901e      	str	r0, [sp, #120]	; 0x78
 801681c:	2800      	cmp	r0, #0
 801681e:	f43f aefb 	beq.w	8016618 <_strtod_l+0x498>
 8016822:	2101      	movs	r1, #1
 8016824:	4620      	mov	r0, r4
 8016826:	f001 fec1 	bl	80185ac <__i2b>
 801682a:	4606      	mov	r6, r0
 801682c:	2800      	cmp	r0, #0
 801682e:	f43f aef3 	beq.w	8016618 <_strtod_l+0x498>
 8016832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016834:	9904      	ldr	r1, [sp, #16]
 8016836:	2b00      	cmp	r3, #0
 8016838:	bfab      	itete	ge
 801683a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801683c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801683e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016840:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016844:	bfac      	ite	ge
 8016846:	eb03 0902 	addge.w	r9, r3, r2
 801684a:	1ad7      	sublt	r7, r2, r3
 801684c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801684e:	eba3 0801 	sub.w	r8, r3, r1
 8016852:	4490      	add	r8, r2
 8016854:	4ba3      	ldr	r3, [pc, #652]	; (8016ae4 <_strtod_l+0x964>)
 8016856:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801685a:	4598      	cmp	r8, r3
 801685c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016860:	f280 80cc 	bge.w	80169fc <_strtod_l+0x87c>
 8016864:	eba3 0308 	sub.w	r3, r3, r8
 8016868:	2b1f      	cmp	r3, #31
 801686a:	eba2 0203 	sub.w	r2, r2, r3
 801686e:	f04f 0101 	mov.w	r1, #1
 8016872:	f300 80b6 	bgt.w	80169e2 <_strtod_l+0x862>
 8016876:	fa01 f303 	lsl.w	r3, r1, r3
 801687a:	9311      	str	r3, [sp, #68]	; 0x44
 801687c:	2300      	movs	r3, #0
 801687e:	930c      	str	r3, [sp, #48]	; 0x30
 8016880:	eb09 0802 	add.w	r8, r9, r2
 8016884:	9b04      	ldr	r3, [sp, #16]
 8016886:	45c1      	cmp	r9, r8
 8016888:	4417      	add	r7, r2
 801688a:	441f      	add	r7, r3
 801688c:	464b      	mov	r3, r9
 801688e:	bfa8      	it	ge
 8016890:	4643      	movge	r3, r8
 8016892:	42bb      	cmp	r3, r7
 8016894:	bfa8      	it	ge
 8016896:	463b      	movge	r3, r7
 8016898:	2b00      	cmp	r3, #0
 801689a:	bfc2      	ittt	gt
 801689c:	eba8 0803 	subgt.w	r8, r8, r3
 80168a0:	1aff      	subgt	r7, r7, r3
 80168a2:	eba9 0903 	subgt.w	r9, r9, r3
 80168a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	dd17      	ble.n	80168dc <_strtod_l+0x75c>
 80168ac:	4631      	mov	r1, r6
 80168ae:	461a      	mov	r2, r3
 80168b0:	4620      	mov	r0, r4
 80168b2:	f001 ff37 	bl	8018724 <__pow5mult>
 80168b6:	4606      	mov	r6, r0
 80168b8:	2800      	cmp	r0, #0
 80168ba:	f43f aead 	beq.w	8016618 <_strtod_l+0x498>
 80168be:	4601      	mov	r1, r0
 80168c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80168c2:	4620      	mov	r0, r4
 80168c4:	f001 fe88 	bl	80185d8 <__multiply>
 80168c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80168ca:	2800      	cmp	r0, #0
 80168cc:	f43f aea4 	beq.w	8016618 <_strtod_l+0x498>
 80168d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80168d2:	4620      	mov	r0, r4
 80168d4:	f001 fd64 	bl	80183a0 <_Bfree>
 80168d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168da:	931e      	str	r3, [sp, #120]	; 0x78
 80168dc:	f1b8 0f00 	cmp.w	r8, #0
 80168e0:	f300 8091 	bgt.w	8016a06 <_strtod_l+0x886>
 80168e4:	9b08      	ldr	r3, [sp, #32]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	dd08      	ble.n	80168fc <_strtod_l+0x77c>
 80168ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168ec:	9907      	ldr	r1, [sp, #28]
 80168ee:	4620      	mov	r0, r4
 80168f0:	f001 ff18 	bl	8018724 <__pow5mult>
 80168f4:	9007      	str	r0, [sp, #28]
 80168f6:	2800      	cmp	r0, #0
 80168f8:	f43f ae8e 	beq.w	8016618 <_strtod_l+0x498>
 80168fc:	2f00      	cmp	r7, #0
 80168fe:	dd08      	ble.n	8016912 <_strtod_l+0x792>
 8016900:	9907      	ldr	r1, [sp, #28]
 8016902:	463a      	mov	r2, r7
 8016904:	4620      	mov	r0, r4
 8016906:	f001 ff67 	bl	80187d8 <__lshift>
 801690a:	9007      	str	r0, [sp, #28]
 801690c:	2800      	cmp	r0, #0
 801690e:	f43f ae83 	beq.w	8016618 <_strtod_l+0x498>
 8016912:	f1b9 0f00 	cmp.w	r9, #0
 8016916:	dd08      	ble.n	801692a <_strtod_l+0x7aa>
 8016918:	4631      	mov	r1, r6
 801691a:	464a      	mov	r2, r9
 801691c:	4620      	mov	r0, r4
 801691e:	f001 ff5b 	bl	80187d8 <__lshift>
 8016922:	4606      	mov	r6, r0
 8016924:	2800      	cmp	r0, #0
 8016926:	f43f ae77 	beq.w	8016618 <_strtod_l+0x498>
 801692a:	9a07      	ldr	r2, [sp, #28]
 801692c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801692e:	4620      	mov	r0, r4
 8016930:	f001 ffda 	bl	80188e8 <__mdiff>
 8016934:	4605      	mov	r5, r0
 8016936:	2800      	cmp	r0, #0
 8016938:	f43f ae6e 	beq.w	8016618 <_strtod_l+0x498>
 801693c:	68c3      	ldr	r3, [r0, #12]
 801693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016940:	2300      	movs	r3, #0
 8016942:	60c3      	str	r3, [r0, #12]
 8016944:	4631      	mov	r1, r6
 8016946:	f001 ffb3 	bl	80188b0 <__mcmp>
 801694a:	2800      	cmp	r0, #0
 801694c:	da65      	bge.n	8016a1a <_strtod_l+0x89a>
 801694e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016950:	ea53 030a 	orrs.w	r3, r3, sl
 8016954:	f040 8087 	bne.w	8016a66 <_strtod_l+0x8e6>
 8016958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801695c:	2b00      	cmp	r3, #0
 801695e:	f040 8082 	bne.w	8016a66 <_strtod_l+0x8e6>
 8016962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016966:	0d1b      	lsrs	r3, r3, #20
 8016968:	051b      	lsls	r3, r3, #20
 801696a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801696e:	d97a      	bls.n	8016a66 <_strtod_l+0x8e6>
 8016970:	696b      	ldr	r3, [r5, #20]
 8016972:	b913      	cbnz	r3, 801697a <_strtod_l+0x7fa>
 8016974:	692b      	ldr	r3, [r5, #16]
 8016976:	2b01      	cmp	r3, #1
 8016978:	dd75      	ble.n	8016a66 <_strtod_l+0x8e6>
 801697a:	4629      	mov	r1, r5
 801697c:	2201      	movs	r2, #1
 801697e:	4620      	mov	r0, r4
 8016980:	f001 ff2a 	bl	80187d8 <__lshift>
 8016984:	4631      	mov	r1, r6
 8016986:	4605      	mov	r5, r0
 8016988:	f001 ff92 	bl	80188b0 <__mcmp>
 801698c:	2800      	cmp	r0, #0
 801698e:	dd6a      	ble.n	8016a66 <_strtod_l+0x8e6>
 8016990:	9904      	ldr	r1, [sp, #16]
 8016992:	4a55      	ldr	r2, [pc, #340]	; (8016ae8 <_strtod_l+0x968>)
 8016994:	465b      	mov	r3, fp
 8016996:	2900      	cmp	r1, #0
 8016998:	f000 8085 	beq.w	8016aa6 <_strtod_l+0x926>
 801699c:	ea02 010b 	and.w	r1, r2, fp
 80169a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80169a4:	dc7f      	bgt.n	8016aa6 <_strtod_l+0x926>
 80169a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80169aa:	f77f aeaa 	ble.w	8016702 <_strtod_l+0x582>
 80169ae:	4a4f      	ldr	r2, [pc, #316]	; (8016aec <_strtod_l+0x96c>)
 80169b0:	2300      	movs	r3, #0
 80169b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80169b6:	4650      	mov	r0, sl
 80169b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80169bc:	4659      	mov	r1, fp
 80169be:	f7e9 fe1b 	bl	80005f8 <__aeabi_dmul>
 80169c2:	460b      	mov	r3, r1
 80169c4:	4303      	orrs	r3, r0
 80169c6:	bf08      	it	eq
 80169c8:	2322      	moveq	r3, #34	; 0x22
 80169ca:	4682      	mov	sl, r0
 80169cc:	468b      	mov	fp, r1
 80169ce:	bf08      	it	eq
 80169d0:	6023      	streq	r3, [r4, #0]
 80169d2:	e62b      	b.n	801662c <_strtod_l+0x4ac>
 80169d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169d8:	fa02 f303 	lsl.w	r3, r2, r3
 80169dc:	ea03 0a0a 	and.w	sl, r3, sl
 80169e0:	e6de      	b.n	80167a0 <_strtod_l+0x620>
 80169e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80169e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80169ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80169ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80169f2:	fa01 f308 	lsl.w	r3, r1, r8
 80169f6:	930c      	str	r3, [sp, #48]	; 0x30
 80169f8:	9111      	str	r1, [sp, #68]	; 0x44
 80169fa:	e741      	b.n	8016880 <_strtod_l+0x700>
 80169fc:	2300      	movs	r3, #0
 80169fe:	930c      	str	r3, [sp, #48]	; 0x30
 8016a00:	2301      	movs	r3, #1
 8016a02:	9311      	str	r3, [sp, #68]	; 0x44
 8016a04:	e73c      	b.n	8016880 <_strtod_l+0x700>
 8016a06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016a08:	4642      	mov	r2, r8
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	f001 fee4 	bl	80187d8 <__lshift>
 8016a10:	901e      	str	r0, [sp, #120]	; 0x78
 8016a12:	2800      	cmp	r0, #0
 8016a14:	f47f af66 	bne.w	80168e4 <_strtod_l+0x764>
 8016a18:	e5fe      	b.n	8016618 <_strtod_l+0x498>
 8016a1a:	465f      	mov	r7, fp
 8016a1c:	d16e      	bne.n	8016afc <_strtod_l+0x97c>
 8016a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a24:	b342      	cbz	r2, 8016a78 <_strtod_l+0x8f8>
 8016a26:	4a32      	ldr	r2, [pc, #200]	; (8016af0 <_strtod_l+0x970>)
 8016a28:	4293      	cmp	r3, r2
 8016a2a:	d128      	bne.n	8016a7e <_strtod_l+0x8fe>
 8016a2c:	9b04      	ldr	r3, [sp, #16]
 8016a2e:	4650      	mov	r0, sl
 8016a30:	b1eb      	cbz	r3, 8016a6e <_strtod_l+0x8ee>
 8016a32:	4a2d      	ldr	r2, [pc, #180]	; (8016ae8 <_strtod_l+0x968>)
 8016a34:	403a      	ands	r2, r7
 8016a36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016a3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016a3e:	d819      	bhi.n	8016a74 <_strtod_l+0x8f4>
 8016a40:	0d12      	lsrs	r2, r2, #20
 8016a42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016a46:	fa01 f303 	lsl.w	r3, r1, r3
 8016a4a:	4298      	cmp	r0, r3
 8016a4c:	d117      	bne.n	8016a7e <_strtod_l+0x8fe>
 8016a4e:	4b29      	ldr	r3, [pc, #164]	; (8016af4 <_strtod_l+0x974>)
 8016a50:	429f      	cmp	r7, r3
 8016a52:	d102      	bne.n	8016a5a <_strtod_l+0x8da>
 8016a54:	3001      	adds	r0, #1
 8016a56:	f43f addf 	beq.w	8016618 <_strtod_l+0x498>
 8016a5a:	4b23      	ldr	r3, [pc, #140]	; (8016ae8 <_strtod_l+0x968>)
 8016a5c:	403b      	ands	r3, r7
 8016a5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016a62:	f04f 0a00 	mov.w	sl, #0
 8016a66:	9b04      	ldr	r3, [sp, #16]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d1a0      	bne.n	80169ae <_strtod_l+0x82e>
 8016a6c:	e5de      	b.n	801662c <_strtod_l+0x4ac>
 8016a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a72:	e7ea      	b.n	8016a4a <_strtod_l+0x8ca>
 8016a74:	460b      	mov	r3, r1
 8016a76:	e7e8      	b.n	8016a4a <_strtod_l+0x8ca>
 8016a78:	ea53 030a 	orrs.w	r3, r3, sl
 8016a7c:	d088      	beq.n	8016990 <_strtod_l+0x810>
 8016a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a80:	b1db      	cbz	r3, 8016aba <_strtod_l+0x93a>
 8016a82:	423b      	tst	r3, r7
 8016a84:	d0ef      	beq.n	8016a66 <_strtod_l+0x8e6>
 8016a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a88:	9a04      	ldr	r2, [sp, #16]
 8016a8a:	4650      	mov	r0, sl
 8016a8c:	4659      	mov	r1, fp
 8016a8e:	b1c3      	cbz	r3, 8016ac2 <_strtod_l+0x942>
 8016a90:	f7ff fb57 	bl	8016142 <sulp>
 8016a94:	4602      	mov	r2, r0
 8016a96:	460b      	mov	r3, r1
 8016a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a9c:	f7e9 fbf6 	bl	800028c <__adddf3>
 8016aa0:	4682      	mov	sl, r0
 8016aa2:	468b      	mov	fp, r1
 8016aa4:	e7df      	b.n	8016a66 <_strtod_l+0x8e6>
 8016aa6:	4013      	ands	r3, r2
 8016aa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016aac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016ab0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016ab4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016ab8:	e7d5      	b.n	8016a66 <_strtod_l+0x8e6>
 8016aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016abc:	ea13 0f0a 	tst.w	r3, sl
 8016ac0:	e7e0      	b.n	8016a84 <_strtod_l+0x904>
 8016ac2:	f7ff fb3e 	bl	8016142 <sulp>
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	460b      	mov	r3, r1
 8016aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ace:	f7e9 fbdb 	bl	8000288 <__aeabi_dsub>
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	4682      	mov	sl, r0
 8016ad8:	468b      	mov	fp, r1
 8016ada:	f7e9 fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	d0c1      	beq.n	8016a66 <_strtod_l+0x8e6>
 8016ae2:	e60e      	b.n	8016702 <_strtod_l+0x582>
 8016ae4:	fffffc02 	.word	0xfffffc02
 8016ae8:	7ff00000 	.word	0x7ff00000
 8016aec:	39500000 	.word	0x39500000
 8016af0:	000fffff 	.word	0x000fffff
 8016af4:	7fefffff 	.word	0x7fefffff
 8016af8:	0801acb8 	.word	0x0801acb8
 8016afc:	4631      	mov	r1, r6
 8016afe:	4628      	mov	r0, r5
 8016b00:	f002 f852 	bl	8018ba8 <__ratio>
 8016b04:	ec59 8b10 	vmov	r8, r9, d0
 8016b08:	ee10 0a10 	vmov	r0, s0
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b12:	4649      	mov	r1, r9
 8016b14:	f7e9 ffec 	bl	8000af0 <__aeabi_dcmple>
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d07c      	beq.n	8016c16 <_strtod_l+0xa96>
 8016b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d04c      	beq.n	8016bbc <_strtod_l+0xa3c>
 8016b22:	4b95      	ldr	r3, [pc, #596]	; (8016d78 <_strtod_l+0xbf8>)
 8016b24:	2200      	movs	r2, #0
 8016b26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016b2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016d78 <_strtod_l+0xbf8>
 8016b2e:	f04f 0800 	mov.w	r8, #0
 8016b32:	4b92      	ldr	r3, [pc, #584]	; (8016d7c <_strtod_l+0xbfc>)
 8016b34:	403b      	ands	r3, r7
 8016b36:	9311      	str	r3, [sp, #68]	; 0x44
 8016b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b3a:	4b91      	ldr	r3, [pc, #580]	; (8016d80 <_strtod_l+0xc00>)
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	f040 80b2 	bne.w	8016ca6 <_strtod_l+0xb26>
 8016b42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016b4e:	ec4b ab10 	vmov	d0, sl, fp
 8016b52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016b56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b5a:	f001 ff4d 	bl	80189f8 <__ulp>
 8016b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b62:	ec53 2b10 	vmov	r2, r3, d0
 8016b66:	f7e9 fd47 	bl	80005f8 <__aeabi_dmul>
 8016b6a:	4652      	mov	r2, sl
 8016b6c:	465b      	mov	r3, fp
 8016b6e:	f7e9 fb8d 	bl	800028c <__adddf3>
 8016b72:	460b      	mov	r3, r1
 8016b74:	4981      	ldr	r1, [pc, #516]	; (8016d7c <_strtod_l+0xbfc>)
 8016b76:	4a83      	ldr	r2, [pc, #524]	; (8016d84 <_strtod_l+0xc04>)
 8016b78:	4019      	ands	r1, r3
 8016b7a:	4291      	cmp	r1, r2
 8016b7c:	4682      	mov	sl, r0
 8016b7e:	d95e      	bls.n	8016c3e <_strtod_l+0xabe>
 8016b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d103      	bne.n	8016b92 <_strtod_l+0xa12>
 8016b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b8c:	3301      	adds	r3, #1
 8016b8e:	f43f ad43 	beq.w	8016618 <_strtod_l+0x498>
 8016b92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8016d90 <_strtod_l+0xc10>
 8016b96:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016b9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	f001 fbff 	bl	80183a0 <_Bfree>
 8016ba2:	9907      	ldr	r1, [sp, #28]
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f001 fbfb 	bl	80183a0 <_Bfree>
 8016baa:	4631      	mov	r1, r6
 8016bac:	4620      	mov	r0, r4
 8016bae:	f001 fbf7 	bl	80183a0 <_Bfree>
 8016bb2:	4629      	mov	r1, r5
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f001 fbf3 	bl	80183a0 <_Bfree>
 8016bba:	e613      	b.n	80167e4 <_strtod_l+0x664>
 8016bbc:	f1ba 0f00 	cmp.w	sl, #0
 8016bc0:	d11b      	bne.n	8016bfa <_strtod_l+0xa7a>
 8016bc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016bc6:	b9f3      	cbnz	r3, 8016c06 <_strtod_l+0xa86>
 8016bc8:	4b6b      	ldr	r3, [pc, #428]	; (8016d78 <_strtod_l+0xbf8>)
 8016bca:	2200      	movs	r2, #0
 8016bcc:	4640      	mov	r0, r8
 8016bce:	4649      	mov	r1, r9
 8016bd0:	f7e9 ff84 	bl	8000adc <__aeabi_dcmplt>
 8016bd4:	b9d0      	cbnz	r0, 8016c0c <_strtod_l+0xa8c>
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	4649      	mov	r1, r9
 8016bda:	4b6b      	ldr	r3, [pc, #428]	; (8016d88 <_strtod_l+0xc08>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	f7e9 fd0b 	bl	80005f8 <__aeabi_dmul>
 8016be2:	4680      	mov	r8, r0
 8016be4:	4689      	mov	r9, r1
 8016be6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016bea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016bee:	931b      	str	r3, [sp, #108]	; 0x6c
 8016bf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016bf8:	e79b      	b.n	8016b32 <_strtod_l+0x9b2>
 8016bfa:	f1ba 0f01 	cmp.w	sl, #1
 8016bfe:	d102      	bne.n	8016c06 <_strtod_l+0xa86>
 8016c00:	2f00      	cmp	r7, #0
 8016c02:	f43f ad7e 	beq.w	8016702 <_strtod_l+0x582>
 8016c06:	4b61      	ldr	r3, [pc, #388]	; (8016d8c <_strtod_l+0xc0c>)
 8016c08:	2200      	movs	r2, #0
 8016c0a:	e78c      	b.n	8016b26 <_strtod_l+0x9a6>
 8016c0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016d88 <_strtod_l+0xc08>
 8016c10:	f04f 0800 	mov.w	r8, #0
 8016c14:	e7e7      	b.n	8016be6 <_strtod_l+0xa66>
 8016c16:	4b5c      	ldr	r3, [pc, #368]	; (8016d88 <_strtod_l+0xc08>)
 8016c18:	4640      	mov	r0, r8
 8016c1a:	4649      	mov	r1, r9
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	f7e9 fceb 	bl	80005f8 <__aeabi_dmul>
 8016c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c24:	4680      	mov	r8, r0
 8016c26:	4689      	mov	r9, r1
 8016c28:	b933      	cbnz	r3, 8016c38 <_strtod_l+0xab8>
 8016c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c2e:	9012      	str	r0, [sp, #72]	; 0x48
 8016c30:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016c36:	e7dd      	b.n	8016bf4 <_strtod_l+0xa74>
 8016c38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016c3c:	e7f9      	b.n	8016c32 <_strtod_l+0xab2>
 8016c3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016c42:	9b04      	ldr	r3, [sp, #16]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d1a8      	bne.n	8016b9a <_strtod_l+0xa1a>
 8016c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016c4e:	0d1b      	lsrs	r3, r3, #20
 8016c50:	051b      	lsls	r3, r3, #20
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d1a1      	bne.n	8016b9a <_strtod_l+0xa1a>
 8016c56:	4640      	mov	r0, r8
 8016c58:	4649      	mov	r1, r9
 8016c5a:	f7ea f82d 	bl	8000cb8 <__aeabi_d2lz>
 8016c5e:	f7e9 fc9d 	bl	800059c <__aeabi_l2d>
 8016c62:	4602      	mov	r2, r0
 8016c64:	460b      	mov	r3, r1
 8016c66:	4640      	mov	r0, r8
 8016c68:	4649      	mov	r1, r9
 8016c6a:	f7e9 fb0d 	bl	8000288 <__aeabi_dsub>
 8016c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c74:	ea43 030a 	orr.w	r3, r3, sl
 8016c78:	4313      	orrs	r3, r2
 8016c7a:	4680      	mov	r8, r0
 8016c7c:	4689      	mov	r9, r1
 8016c7e:	d053      	beq.n	8016d28 <_strtod_l+0xba8>
 8016c80:	a335      	add	r3, pc, #212	; (adr r3, 8016d58 <_strtod_l+0xbd8>)
 8016c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c86:	f7e9 ff29 	bl	8000adc <__aeabi_dcmplt>
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	f47f acce 	bne.w	801662c <_strtod_l+0x4ac>
 8016c90:	a333      	add	r3, pc, #204	; (adr r3, 8016d60 <_strtod_l+0xbe0>)
 8016c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c96:	4640      	mov	r0, r8
 8016c98:	4649      	mov	r1, r9
 8016c9a:	f7e9 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f43f af7b 	beq.w	8016b9a <_strtod_l+0xa1a>
 8016ca4:	e4c2      	b.n	801662c <_strtod_l+0x4ac>
 8016ca6:	9b04      	ldr	r3, [sp, #16]
 8016ca8:	b333      	cbz	r3, 8016cf8 <_strtod_l+0xb78>
 8016caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016cac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016cb0:	d822      	bhi.n	8016cf8 <_strtod_l+0xb78>
 8016cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8016d68 <_strtod_l+0xbe8>)
 8016cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cb8:	4640      	mov	r0, r8
 8016cba:	4649      	mov	r1, r9
 8016cbc:	f7e9 ff18 	bl	8000af0 <__aeabi_dcmple>
 8016cc0:	b1a0      	cbz	r0, 8016cec <_strtod_l+0xb6c>
 8016cc2:	4649      	mov	r1, r9
 8016cc4:	4640      	mov	r0, r8
 8016cc6:	f7e9 ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8016cca:	2801      	cmp	r0, #1
 8016ccc:	bf38      	it	cc
 8016cce:	2001      	movcc	r0, #1
 8016cd0:	f7e9 fc18 	bl	8000504 <__aeabi_ui2d>
 8016cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cd6:	4680      	mov	r8, r0
 8016cd8:	4689      	mov	r9, r1
 8016cda:	bb13      	cbnz	r3, 8016d22 <_strtod_l+0xba2>
 8016cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ce0:	9014      	str	r0, [sp, #80]	; 0x50
 8016ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8016ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016ce8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016cf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016cf4:	1a9b      	subs	r3, r3, r2
 8016cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8016cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016cfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016d04:	f001 fe78 	bl	80189f8 <__ulp>
 8016d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016d0c:	ec53 2b10 	vmov	r2, r3, d0
 8016d10:	f7e9 fc72 	bl	80005f8 <__aeabi_dmul>
 8016d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016d18:	f7e9 fab8 	bl	800028c <__adddf3>
 8016d1c:	4682      	mov	sl, r0
 8016d1e:	468b      	mov	fp, r1
 8016d20:	e78f      	b.n	8016c42 <_strtod_l+0xac2>
 8016d22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016d26:	e7dd      	b.n	8016ce4 <_strtod_l+0xb64>
 8016d28:	a311      	add	r3, pc, #68	; (adr r3, 8016d70 <_strtod_l+0xbf0>)
 8016d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d2e:	f7e9 fed5 	bl	8000adc <__aeabi_dcmplt>
 8016d32:	e7b4      	b.n	8016c9e <_strtod_l+0xb1e>
 8016d34:	2300      	movs	r3, #0
 8016d36:	930e      	str	r3, [sp, #56]	; 0x38
 8016d38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016d3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016d3c:	6013      	str	r3, [r2, #0]
 8016d3e:	f7ff ba65 	b.w	801620c <_strtod_l+0x8c>
 8016d42:	2b65      	cmp	r3, #101	; 0x65
 8016d44:	f43f ab5d 	beq.w	8016402 <_strtod_l+0x282>
 8016d48:	2b45      	cmp	r3, #69	; 0x45
 8016d4a:	f43f ab5a 	beq.w	8016402 <_strtod_l+0x282>
 8016d4e:	2201      	movs	r2, #1
 8016d50:	f7ff bb92 	b.w	8016478 <_strtod_l+0x2f8>
 8016d54:	f3af 8000 	nop.w
 8016d58:	94a03595 	.word	0x94a03595
 8016d5c:	3fdfffff 	.word	0x3fdfffff
 8016d60:	35afe535 	.word	0x35afe535
 8016d64:	3fe00000 	.word	0x3fe00000
 8016d68:	ffc00000 	.word	0xffc00000
 8016d6c:	41dfffff 	.word	0x41dfffff
 8016d70:	94a03595 	.word	0x94a03595
 8016d74:	3fcfffff 	.word	0x3fcfffff
 8016d78:	3ff00000 	.word	0x3ff00000
 8016d7c:	7ff00000 	.word	0x7ff00000
 8016d80:	7fe00000 	.word	0x7fe00000
 8016d84:	7c9fffff 	.word	0x7c9fffff
 8016d88:	3fe00000 	.word	0x3fe00000
 8016d8c:	bff00000 	.word	0xbff00000
 8016d90:	7fefffff 	.word	0x7fefffff

08016d94 <_strtod_r>:
 8016d94:	4b01      	ldr	r3, [pc, #4]	; (8016d9c <_strtod_r+0x8>)
 8016d96:	f7ff b9f3 	b.w	8016180 <_strtod_l>
 8016d9a:	bf00      	nop
 8016d9c:	20000494 	.word	0x20000494

08016da0 <_strtol_l.isra.0>:
 8016da0:	2b01      	cmp	r3, #1
 8016da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016da6:	d001      	beq.n	8016dac <_strtol_l.isra.0+0xc>
 8016da8:	2b24      	cmp	r3, #36	; 0x24
 8016daa:	d906      	bls.n	8016dba <_strtol_l.isra.0+0x1a>
 8016dac:	f7fe fa0e 	bl	80151cc <__errno>
 8016db0:	2316      	movs	r3, #22
 8016db2:	6003      	str	r3, [r0, #0]
 8016db4:	2000      	movs	r0, #0
 8016db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dba:	4f3a      	ldr	r7, [pc, #232]	; (8016ea4 <_strtol_l.isra.0+0x104>)
 8016dbc:	468e      	mov	lr, r1
 8016dbe:	4676      	mov	r6, lr
 8016dc0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016dc4:	5de5      	ldrb	r5, [r4, r7]
 8016dc6:	f015 0508 	ands.w	r5, r5, #8
 8016dca:	d1f8      	bne.n	8016dbe <_strtol_l.isra.0+0x1e>
 8016dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8016dce:	d134      	bne.n	8016e3a <_strtol_l.isra.0+0x9a>
 8016dd0:	f89e 4000 	ldrb.w	r4, [lr]
 8016dd4:	f04f 0801 	mov.w	r8, #1
 8016dd8:	f106 0e02 	add.w	lr, r6, #2
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d05c      	beq.n	8016e9a <_strtol_l.isra.0+0xfa>
 8016de0:	2b10      	cmp	r3, #16
 8016de2:	d10c      	bne.n	8016dfe <_strtol_l.isra.0+0x5e>
 8016de4:	2c30      	cmp	r4, #48	; 0x30
 8016de6:	d10a      	bne.n	8016dfe <_strtol_l.isra.0+0x5e>
 8016de8:	f89e 4000 	ldrb.w	r4, [lr]
 8016dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016df0:	2c58      	cmp	r4, #88	; 0x58
 8016df2:	d14d      	bne.n	8016e90 <_strtol_l.isra.0+0xf0>
 8016df4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016df8:	2310      	movs	r3, #16
 8016dfa:	f10e 0e02 	add.w	lr, lr, #2
 8016dfe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016e02:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016e06:	2600      	movs	r6, #0
 8016e08:	fbbc f9f3 	udiv	r9, ip, r3
 8016e0c:	4635      	mov	r5, r6
 8016e0e:	fb03 ca19 	mls	sl, r3, r9, ip
 8016e12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016e16:	2f09      	cmp	r7, #9
 8016e18:	d818      	bhi.n	8016e4c <_strtol_l.isra.0+0xac>
 8016e1a:	463c      	mov	r4, r7
 8016e1c:	42a3      	cmp	r3, r4
 8016e1e:	dd24      	ble.n	8016e6a <_strtol_l.isra.0+0xca>
 8016e20:	2e00      	cmp	r6, #0
 8016e22:	db1f      	blt.n	8016e64 <_strtol_l.isra.0+0xc4>
 8016e24:	45a9      	cmp	r9, r5
 8016e26:	d31d      	bcc.n	8016e64 <_strtol_l.isra.0+0xc4>
 8016e28:	d101      	bne.n	8016e2e <_strtol_l.isra.0+0x8e>
 8016e2a:	45a2      	cmp	sl, r4
 8016e2c:	db1a      	blt.n	8016e64 <_strtol_l.isra.0+0xc4>
 8016e2e:	fb05 4503 	mla	r5, r5, r3, r4
 8016e32:	2601      	movs	r6, #1
 8016e34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016e38:	e7eb      	b.n	8016e12 <_strtol_l.isra.0+0x72>
 8016e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8016e3c:	bf08      	it	eq
 8016e3e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016e42:	46a8      	mov	r8, r5
 8016e44:	bf08      	it	eq
 8016e46:	f106 0e02 	addeq.w	lr, r6, #2
 8016e4a:	e7c7      	b.n	8016ddc <_strtol_l.isra.0+0x3c>
 8016e4c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016e50:	2f19      	cmp	r7, #25
 8016e52:	d801      	bhi.n	8016e58 <_strtol_l.isra.0+0xb8>
 8016e54:	3c37      	subs	r4, #55	; 0x37
 8016e56:	e7e1      	b.n	8016e1c <_strtol_l.isra.0+0x7c>
 8016e58:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016e5c:	2f19      	cmp	r7, #25
 8016e5e:	d804      	bhi.n	8016e6a <_strtol_l.isra.0+0xca>
 8016e60:	3c57      	subs	r4, #87	; 0x57
 8016e62:	e7db      	b.n	8016e1c <_strtol_l.isra.0+0x7c>
 8016e64:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016e68:	e7e4      	b.n	8016e34 <_strtol_l.isra.0+0x94>
 8016e6a:	2e00      	cmp	r6, #0
 8016e6c:	da05      	bge.n	8016e7a <_strtol_l.isra.0+0xda>
 8016e6e:	2322      	movs	r3, #34	; 0x22
 8016e70:	6003      	str	r3, [r0, #0]
 8016e72:	4665      	mov	r5, ip
 8016e74:	b942      	cbnz	r2, 8016e88 <_strtol_l.isra.0+0xe8>
 8016e76:	4628      	mov	r0, r5
 8016e78:	e79d      	b.n	8016db6 <_strtol_l.isra.0+0x16>
 8016e7a:	f1b8 0f00 	cmp.w	r8, #0
 8016e7e:	d000      	beq.n	8016e82 <_strtol_l.isra.0+0xe2>
 8016e80:	426d      	negs	r5, r5
 8016e82:	2a00      	cmp	r2, #0
 8016e84:	d0f7      	beq.n	8016e76 <_strtol_l.isra.0+0xd6>
 8016e86:	b10e      	cbz	r6, 8016e8c <_strtol_l.isra.0+0xec>
 8016e88:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8016e8c:	6011      	str	r1, [r2, #0]
 8016e8e:	e7f2      	b.n	8016e76 <_strtol_l.isra.0+0xd6>
 8016e90:	2430      	movs	r4, #48	; 0x30
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d1b3      	bne.n	8016dfe <_strtol_l.isra.0+0x5e>
 8016e96:	2308      	movs	r3, #8
 8016e98:	e7b1      	b.n	8016dfe <_strtol_l.isra.0+0x5e>
 8016e9a:	2c30      	cmp	r4, #48	; 0x30
 8016e9c:	d0a4      	beq.n	8016de8 <_strtol_l.isra.0+0x48>
 8016e9e:	230a      	movs	r3, #10
 8016ea0:	e7ad      	b.n	8016dfe <_strtol_l.isra.0+0x5e>
 8016ea2:	bf00      	nop
 8016ea4:	0801ace1 	.word	0x0801ace1

08016ea8 <_strtol_r>:
 8016ea8:	f7ff bf7a 	b.w	8016da0 <_strtol_l.isra.0>

08016eac <_write_r>:
 8016eac:	b538      	push	{r3, r4, r5, lr}
 8016eae:	4d07      	ldr	r5, [pc, #28]	; (8016ecc <_write_r+0x20>)
 8016eb0:	4604      	mov	r4, r0
 8016eb2:	4608      	mov	r0, r1
 8016eb4:	4611      	mov	r1, r2
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	602a      	str	r2, [r5, #0]
 8016eba:	461a      	mov	r2, r3
 8016ebc:	f7f3 fa15 	bl	800a2ea <_write>
 8016ec0:	1c43      	adds	r3, r0, #1
 8016ec2:	d102      	bne.n	8016eca <_write_r+0x1e>
 8016ec4:	682b      	ldr	r3, [r5, #0]
 8016ec6:	b103      	cbz	r3, 8016eca <_write_r+0x1e>
 8016ec8:	6023      	str	r3, [r4, #0]
 8016eca:	bd38      	pop	{r3, r4, r5, pc}
 8016ecc:	20008b30 	.word	0x20008b30

08016ed0 <_close_r>:
 8016ed0:	b538      	push	{r3, r4, r5, lr}
 8016ed2:	4d06      	ldr	r5, [pc, #24]	; (8016eec <_close_r+0x1c>)
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	4604      	mov	r4, r0
 8016ed8:	4608      	mov	r0, r1
 8016eda:	602b      	str	r3, [r5, #0]
 8016edc:	f7f3 fa21 	bl	800a322 <_close>
 8016ee0:	1c43      	adds	r3, r0, #1
 8016ee2:	d102      	bne.n	8016eea <_close_r+0x1a>
 8016ee4:	682b      	ldr	r3, [r5, #0]
 8016ee6:	b103      	cbz	r3, 8016eea <_close_r+0x1a>
 8016ee8:	6023      	str	r3, [r4, #0]
 8016eea:	bd38      	pop	{r3, r4, r5, pc}
 8016eec:	20008b30 	.word	0x20008b30

08016ef0 <quorem>:
 8016ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef4:	6903      	ldr	r3, [r0, #16]
 8016ef6:	690c      	ldr	r4, [r1, #16]
 8016ef8:	42a3      	cmp	r3, r4
 8016efa:	4607      	mov	r7, r0
 8016efc:	f2c0 8081 	blt.w	8017002 <quorem+0x112>
 8016f00:	3c01      	subs	r4, #1
 8016f02:	f101 0814 	add.w	r8, r1, #20
 8016f06:	f100 0514 	add.w	r5, r0, #20
 8016f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f18:	3301      	adds	r3, #1
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016f20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8016f28:	d331      	bcc.n	8016f8e <quorem+0x9e>
 8016f2a:	f04f 0e00 	mov.w	lr, #0
 8016f2e:	4640      	mov	r0, r8
 8016f30:	46ac      	mov	ip, r5
 8016f32:	46f2      	mov	sl, lr
 8016f34:	f850 2b04 	ldr.w	r2, [r0], #4
 8016f38:	b293      	uxth	r3, r2
 8016f3a:	fb06 e303 	mla	r3, r6, r3, lr
 8016f3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	ebaa 0303 	sub.w	r3, sl, r3
 8016f48:	0c12      	lsrs	r2, r2, #16
 8016f4a:	f8dc a000 	ldr.w	sl, [ip]
 8016f4e:	fb06 e202 	mla	r2, r6, r2, lr
 8016f52:	fa13 f38a 	uxtah	r3, r3, sl
 8016f56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016f5a:	fa1f fa82 	uxth.w	sl, r2
 8016f5e:	f8dc 2000 	ldr.w	r2, [ip]
 8016f62:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8016f66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f70:	4581      	cmp	r9, r0
 8016f72:	f84c 3b04 	str.w	r3, [ip], #4
 8016f76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016f7a:	d2db      	bcs.n	8016f34 <quorem+0x44>
 8016f7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8016f80:	b92b      	cbnz	r3, 8016f8e <quorem+0x9e>
 8016f82:	9b01      	ldr	r3, [sp, #4]
 8016f84:	3b04      	subs	r3, #4
 8016f86:	429d      	cmp	r5, r3
 8016f88:	461a      	mov	r2, r3
 8016f8a:	d32e      	bcc.n	8016fea <quorem+0xfa>
 8016f8c:	613c      	str	r4, [r7, #16]
 8016f8e:	4638      	mov	r0, r7
 8016f90:	f001 fc8e 	bl	80188b0 <__mcmp>
 8016f94:	2800      	cmp	r0, #0
 8016f96:	db24      	blt.n	8016fe2 <quorem+0xf2>
 8016f98:	3601      	adds	r6, #1
 8016f9a:	4628      	mov	r0, r5
 8016f9c:	f04f 0c00 	mov.w	ip, #0
 8016fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8016fa4:	f8d0 e000 	ldr.w	lr, [r0]
 8016fa8:	b293      	uxth	r3, r2
 8016faa:	ebac 0303 	sub.w	r3, ip, r3
 8016fae:	0c12      	lsrs	r2, r2, #16
 8016fb0:	fa13 f38e 	uxtah	r3, r3, lr
 8016fb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016fc2:	45c1      	cmp	r9, r8
 8016fc4:	f840 3b04 	str.w	r3, [r0], #4
 8016fc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016fcc:	d2e8      	bcs.n	8016fa0 <quorem+0xb0>
 8016fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016fd6:	b922      	cbnz	r2, 8016fe2 <quorem+0xf2>
 8016fd8:	3b04      	subs	r3, #4
 8016fda:	429d      	cmp	r5, r3
 8016fdc:	461a      	mov	r2, r3
 8016fde:	d30a      	bcc.n	8016ff6 <quorem+0x106>
 8016fe0:	613c      	str	r4, [r7, #16]
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	b003      	add	sp, #12
 8016fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fea:	6812      	ldr	r2, [r2, #0]
 8016fec:	3b04      	subs	r3, #4
 8016fee:	2a00      	cmp	r2, #0
 8016ff0:	d1cc      	bne.n	8016f8c <quorem+0x9c>
 8016ff2:	3c01      	subs	r4, #1
 8016ff4:	e7c7      	b.n	8016f86 <quorem+0x96>
 8016ff6:	6812      	ldr	r2, [r2, #0]
 8016ff8:	3b04      	subs	r3, #4
 8016ffa:	2a00      	cmp	r2, #0
 8016ffc:	d1f0      	bne.n	8016fe0 <quorem+0xf0>
 8016ffe:	3c01      	subs	r4, #1
 8017000:	e7eb      	b.n	8016fda <quorem+0xea>
 8017002:	2000      	movs	r0, #0
 8017004:	e7ee      	b.n	8016fe4 <quorem+0xf4>
	...

08017008 <_dtoa_r>:
 8017008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801700c:	ed2d 8b02 	vpush	{d8}
 8017010:	ec57 6b10 	vmov	r6, r7, d0
 8017014:	b095      	sub	sp, #84	; 0x54
 8017016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017018:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801701c:	9105      	str	r1, [sp, #20]
 801701e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017022:	4604      	mov	r4, r0
 8017024:	9209      	str	r2, [sp, #36]	; 0x24
 8017026:	930f      	str	r3, [sp, #60]	; 0x3c
 8017028:	b975      	cbnz	r5, 8017048 <_dtoa_r+0x40>
 801702a:	2010      	movs	r0, #16
 801702c:	f001 f95e 	bl	80182ec <malloc>
 8017030:	4602      	mov	r2, r0
 8017032:	6260      	str	r0, [r4, #36]	; 0x24
 8017034:	b920      	cbnz	r0, 8017040 <_dtoa_r+0x38>
 8017036:	4bb2      	ldr	r3, [pc, #712]	; (8017300 <_dtoa_r+0x2f8>)
 8017038:	21ea      	movs	r1, #234	; 0xea
 801703a:	48b2      	ldr	r0, [pc, #712]	; (8017304 <_dtoa_r+0x2fc>)
 801703c:	f002 f898 	bl	8019170 <__assert_func>
 8017040:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017044:	6005      	str	r5, [r0, #0]
 8017046:	60c5      	str	r5, [r0, #12]
 8017048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801704a:	6819      	ldr	r1, [r3, #0]
 801704c:	b151      	cbz	r1, 8017064 <_dtoa_r+0x5c>
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	604a      	str	r2, [r1, #4]
 8017052:	2301      	movs	r3, #1
 8017054:	4093      	lsls	r3, r2
 8017056:	608b      	str	r3, [r1, #8]
 8017058:	4620      	mov	r0, r4
 801705a:	f001 f9a1 	bl	80183a0 <_Bfree>
 801705e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017060:	2200      	movs	r2, #0
 8017062:	601a      	str	r2, [r3, #0]
 8017064:	1e3b      	subs	r3, r7, #0
 8017066:	bfb9      	ittee	lt
 8017068:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801706c:	9303      	strlt	r3, [sp, #12]
 801706e:	2300      	movge	r3, #0
 8017070:	f8c8 3000 	strge.w	r3, [r8]
 8017074:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017078:	4ba3      	ldr	r3, [pc, #652]	; (8017308 <_dtoa_r+0x300>)
 801707a:	bfbc      	itt	lt
 801707c:	2201      	movlt	r2, #1
 801707e:	f8c8 2000 	strlt.w	r2, [r8]
 8017082:	ea33 0309 	bics.w	r3, r3, r9
 8017086:	d11b      	bne.n	80170c0 <_dtoa_r+0xb8>
 8017088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801708a:	f242 730f 	movw	r3, #9999	; 0x270f
 801708e:	6013      	str	r3, [r2, #0]
 8017090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017094:	4333      	orrs	r3, r6
 8017096:	f000 857a 	beq.w	8017b8e <_dtoa_r+0xb86>
 801709a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801709c:	b963      	cbnz	r3, 80170b8 <_dtoa_r+0xb0>
 801709e:	4b9b      	ldr	r3, [pc, #620]	; (801730c <_dtoa_r+0x304>)
 80170a0:	e024      	b.n	80170ec <_dtoa_r+0xe4>
 80170a2:	4b9b      	ldr	r3, [pc, #620]	; (8017310 <_dtoa_r+0x308>)
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	3308      	adds	r3, #8
 80170a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170aa:	6013      	str	r3, [r2, #0]
 80170ac:	9800      	ldr	r0, [sp, #0]
 80170ae:	b015      	add	sp, #84	; 0x54
 80170b0:	ecbd 8b02 	vpop	{d8}
 80170b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170b8:	4b94      	ldr	r3, [pc, #592]	; (801730c <_dtoa_r+0x304>)
 80170ba:	9300      	str	r3, [sp, #0]
 80170bc:	3303      	adds	r3, #3
 80170be:	e7f3      	b.n	80170a8 <_dtoa_r+0xa0>
 80170c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170c4:	2200      	movs	r2, #0
 80170c6:	ec51 0b17 	vmov	r0, r1, d7
 80170ca:	2300      	movs	r3, #0
 80170cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80170d0:	f7e9 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80170d4:	4680      	mov	r8, r0
 80170d6:	b158      	cbz	r0, 80170f0 <_dtoa_r+0xe8>
 80170d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170da:	2301      	movs	r3, #1
 80170dc:	6013      	str	r3, [r2, #0]
 80170de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f000 8551 	beq.w	8017b88 <_dtoa_r+0xb80>
 80170e6:	488b      	ldr	r0, [pc, #556]	; (8017314 <_dtoa_r+0x30c>)
 80170e8:	6018      	str	r0, [r3, #0]
 80170ea:	1e43      	subs	r3, r0, #1
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	e7dd      	b.n	80170ac <_dtoa_r+0xa4>
 80170f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80170f4:	aa12      	add	r2, sp, #72	; 0x48
 80170f6:	a913      	add	r1, sp, #76	; 0x4c
 80170f8:	4620      	mov	r0, r4
 80170fa:	f001 fcf9 	bl	8018af0 <__d2b>
 80170fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017102:	4683      	mov	fp, r0
 8017104:	2d00      	cmp	r5, #0
 8017106:	d07c      	beq.n	8017202 <_dtoa_r+0x1fa>
 8017108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801710a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801710e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017112:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017116:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801711a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801711e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017122:	4b7d      	ldr	r3, [pc, #500]	; (8017318 <_dtoa_r+0x310>)
 8017124:	2200      	movs	r2, #0
 8017126:	4630      	mov	r0, r6
 8017128:	4639      	mov	r1, r7
 801712a:	f7e9 f8ad 	bl	8000288 <__aeabi_dsub>
 801712e:	a36e      	add	r3, pc, #440	; (adr r3, 80172e8 <_dtoa_r+0x2e0>)
 8017130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017134:	f7e9 fa60 	bl	80005f8 <__aeabi_dmul>
 8017138:	a36d      	add	r3, pc, #436	; (adr r3, 80172f0 <_dtoa_r+0x2e8>)
 801713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713e:	f7e9 f8a5 	bl	800028c <__adddf3>
 8017142:	4606      	mov	r6, r0
 8017144:	4628      	mov	r0, r5
 8017146:	460f      	mov	r7, r1
 8017148:	f7e9 f9ec 	bl	8000524 <__aeabi_i2d>
 801714c:	a36a      	add	r3, pc, #424	; (adr r3, 80172f8 <_dtoa_r+0x2f0>)
 801714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017152:	f7e9 fa51 	bl	80005f8 <__aeabi_dmul>
 8017156:	4602      	mov	r2, r0
 8017158:	460b      	mov	r3, r1
 801715a:	4630      	mov	r0, r6
 801715c:	4639      	mov	r1, r7
 801715e:	f7e9 f895 	bl	800028c <__adddf3>
 8017162:	4606      	mov	r6, r0
 8017164:	460f      	mov	r7, r1
 8017166:	f7e9 fcf7 	bl	8000b58 <__aeabi_d2iz>
 801716a:	2200      	movs	r2, #0
 801716c:	4682      	mov	sl, r0
 801716e:	2300      	movs	r3, #0
 8017170:	4630      	mov	r0, r6
 8017172:	4639      	mov	r1, r7
 8017174:	f7e9 fcb2 	bl	8000adc <__aeabi_dcmplt>
 8017178:	b148      	cbz	r0, 801718e <_dtoa_r+0x186>
 801717a:	4650      	mov	r0, sl
 801717c:	f7e9 f9d2 	bl	8000524 <__aeabi_i2d>
 8017180:	4632      	mov	r2, r6
 8017182:	463b      	mov	r3, r7
 8017184:	f7e9 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8017188:	b908      	cbnz	r0, 801718e <_dtoa_r+0x186>
 801718a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801718e:	f1ba 0f16 	cmp.w	sl, #22
 8017192:	d854      	bhi.n	801723e <_dtoa_r+0x236>
 8017194:	4b61      	ldr	r3, [pc, #388]	; (801731c <_dtoa_r+0x314>)
 8017196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801719e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80171a2:	f7e9 fc9b 	bl	8000adc <__aeabi_dcmplt>
 80171a6:	2800      	cmp	r0, #0
 80171a8:	d04b      	beq.n	8017242 <_dtoa_r+0x23a>
 80171aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80171ae:	2300      	movs	r3, #0
 80171b0:	930e      	str	r3, [sp, #56]	; 0x38
 80171b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80171b4:	1b5d      	subs	r5, r3, r5
 80171b6:	1e6b      	subs	r3, r5, #1
 80171b8:	9304      	str	r3, [sp, #16]
 80171ba:	bf43      	ittte	mi
 80171bc:	2300      	movmi	r3, #0
 80171be:	f1c5 0801 	rsbmi	r8, r5, #1
 80171c2:	9304      	strmi	r3, [sp, #16]
 80171c4:	f04f 0800 	movpl.w	r8, #0
 80171c8:	f1ba 0f00 	cmp.w	sl, #0
 80171cc:	db3b      	blt.n	8017246 <_dtoa_r+0x23e>
 80171ce:	9b04      	ldr	r3, [sp, #16]
 80171d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80171d4:	4453      	add	r3, sl
 80171d6:	9304      	str	r3, [sp, #16]
 80171d8:	2300      	movs	r3, #0
 80171da:	9306      	str	r3, [sp, #24]
 80171dc:	9b05      	ldr	r3, [sp, #20]
 80171de:	2b09      	cmp	r3, #9
 80171e0:	d869      	bhi.n	80172b6 <_dtoa_r+0x2ae>
 80171e2:	2b05      	cmp	r3, #5
 80171e4:	bfc4      	itt	gt
 80171e6:	3b04      	subgt	r3, #4
 80171e8:	9305      	strgt	r3, [sp, #20]
 80171ea:	9b05      	ldr	r3, [sp, #20]
 80171ec:	f1a3 0302 	sub.w	r3, r3, #2
 80171f0:	bfcc      	ite	gt
 80171f2:	2500      	movgt	r5, #0
 80171f4:	2501      	movle	r5, #1
 80171f6:	2b03      	cmp	r3, #3
 80171f8:	d869      	bhi.n	80172ce <_dtoa_r+0x2c6>
 80171fa:	e8df f003 	tbb	[pc, r3]
 80171fe:	4e2c      	.short	0x4e2c
 8017200:	5a4c      	.short	0x5a4c
 8017202:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017206:	441d      	add	r5, r3
 8017208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801720c:	2b20      	cmp	r3, #32
 801720e:	bfc1      	itttt	gt
 8017210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017214:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017218:	fa09 f303 	lslgt.w	r3, r9, r3
 801721c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017220:	bfda      	itte	le
 8017222:	f1c3 0320 	rsble	r3, r3, #32
 8017226:	fa06 f003 	lslle.w	r0, r6, r3
 801722a:	4318      	orrgt	r0, r3
 801722c:	f7e9 f96a 	bl	8000504 <__aeabi_ui2d>
 8017230:	2301      	movs	r3, #1
 8017232:	4606      	mov	r6, r0
 8017234:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017238:	3d01      	subs	r5, #1
 801723a:	9310      	str	r3, [sp, #64]	; 0x40
 801723c:	e771      	b.n	8017122 <_dtoa_r+0x11a>
 801723e:	2301      	movs	r3, #1
 8017240:	e7b6      	b.n	80171b0 <_dtoa_r+0x1a8>
 8017242:	900e      	str	r0, [sp, #56]	; 0x38
 8017244:	e7b5      	b.n	80171b2 <_dtoa_r+0x1aa>
 8017246:	f1ca 0300 	rsb	r3, sl, #0
 801724a:	9306      	str	r3, [sp, #24]
 801724c:	2300      	movs	r3, #0
 801724e:	eba8 080a 	sub.w	r8, r8, sl
 8017252:	930d      	str	r3, [sp, #52]	; 0x34
 8017254:	e7c2      	b.n	80171dc <_dtoa_r+0x1d4>
 8017256:	2300      	movs	r3, #0
 8017258:	9308      	str	r3, [sp, #32]
 801725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801725c:	2b00      	cmp	r3, #0
 801725e:	dc39      	bgt.n	80172d4 <_dtoa_r+0x2cc>
 8017260:	f04f 0901 	mov.w	r9, #1
 8017264:	f8cd 9004 	str.w	r9, [sp, #4]
 8017268:	464b      	mov	r3, r9
 801726a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801726e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017270:	2200      	movs	r2, #0
 8017272:	6042      	str	r2, [r0, #4]
 8017274:	2204      	movs	r2, #4
 8017276:	f102 0614 	add.w	r6, r2, #20
 801727a:	429e      	cmp	r6, r3
 801727c:	6841      	ldr	r1, [r0, #4]
 801727e:	d92f      	bls.n	80172e0 <_dtoa_r+0x2d8>
 8017280:	4620      	mov	r0, r4
 8017282:	f001 f84d 	bl	8018320 <_Balloc>
 8017286:	9000      	str	r0, [sp, #0]
 8017288:	2800      	cmp	r0, #0
 801728a:	d14b      	bne.n	8017324 <_dtoa_r+0x31c>
 801728c:	4b24      	ldr	r3, [pc, #144]	; (8017320 <_dtoa_r+0x318>)
 801728e:	4602      	mov	r2, r0
 8017290:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017294:	e6d1      	b.n	801703a <_dtoa_r+0x32>
 8017296:	2301      	movs	r3, #1
 8017298:	e7de      	b.n	8017258 <_dtoa_r+0x250>
 801729a:	2300      	movs	r3, #0
 801729c:	9308      	str	r3, [sp, #32]
 801729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172a0:	eb0a 0903 	add.w	r9, sl, r3
 80172a4:	f109 0301 	add.w	r3, r9, #1
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	9301      	str	r3, [sp, #4]
 80172ac:	bfb8      	it	lt
 80172ae:	2301      	movlt	r3, #1
 80172b0:	e7dd      	b.n	801726e <_dtoa_r+0x266>
 80172b2:	2301      	movs	r3, #1
 80172b4:	e7f2      	b.n	801729c <_dtoa_r+0x294>
 80172b6:	2501      	movs	r5, #1
 80172b8:	2300      	movs	r3, #0
 80172ba:	9305      	str	r3, [sp, #20]
 80172bc:	9508      	str	r5, [sp, #32]
 80172be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80172c2:	2200      	movs	r2, #0
 80172c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80172c8:	2312      	movs	r3, #18
 80172ca:	9209      	str	r2, [sp, #36]	; 0x24
 80172cc:	e7cf      	b.n	801726e <_dtoa_r+0x266>
 80172ce:	2301      	movs	r3, #1
 80172d0:	9308      	str	r3, [sp, #32]
 80172d2:	e7f4      	b.n	80172be <_dtoa_r+0x2b6>
 80172d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80172d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80172dc:	464b      	mov	r3, r9
 80172de:	e7c6      	b.n	801726e <_dtoa_r+0x266>
 80172e0:	3101      	adds	r1, #1
 80172e2:	6041      	str	r1, [r0, #4]
 80172e4:	0052      	lsls	r2, r2, #1
 80172e6:	e7c6      	b.n	8017276 <_dtoa_r+0x26e>
 80172e8:	636f4361 	.word	0x636f4361
 80172ec:	3fd287a7 	.word	0x3fd287a7
 80172f0:	8b60c8b3 	.word	0x8b60c8b3
 80172f4:	3fc68a28 	.word	0x3fc68a28
 80172f8:	509f79fb 	.word	0x509f79fb
 80172fc:	3fd34413 	.word	0x3fd34413
 8017300:	0801adee 	.word	0x0801adee
 8017304:	0801ae05 	.word	0x0801ae05
 8017308:	7ff00000 	.word	0x7ff00000
 801730c:	0801adea 	.word	0x0801adea
 8017310:	0801ade1 	.word	0x0801ade1
 8017314:	0801ac61 	.word	0x0801ac61
 8017318:	3ff80000 	.word	0x3ff80000
 801731c:	0801af80 	.word	0x0801af80
 8017320:	0801ae64 	.word	0x0801ae64
 8017324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017326:	9a00      	ldr	r2, [sp, #0]
 8017328:	601a      	str	r2, [r3, #0]
 801732a:	9b01      	ldr	r3, [sp, #4]
 801732c:	2b0e      	cmp	r3, #14
 801732e:	f200 80ad 	bhi.w	801748c <_dtoa_r+0x484>
 8017332:	2d00      	cmp	r5, #0
 8017334:	f000 80aa 	beq.w	801748c <_dtoa_r+0x484>
 8017338:	f1ba 0f00 	cmp.w	sl, #0
 801733c:	dd36      	ble.n	80173ac <_dtoa_r+0x3a4>
 801733e:	4ac3      	ldr	r2, [pc, #780]	; (801764c <_dtoa_r+0x644>)
 8017340:	f00a 030f 	and.w	r3, sl, #15
 8017344:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017348:	ed93 7b00 	vldr	d7, [r3]
 801734c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017350:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017354:	eeb0 8a47 	vmov.f32	s16, s14
 8017358:	eef0 8a67 	vmov.f32	s17, s15
 801735c:	d016      	beq.n	801738c <_dtoa_r+0x384>
 801735e:	4bbc      	ldr	r3, [pc, #752]	; (8017650 <_dtoa_r+0x648>)
 8017360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017368:	f7e9 fa70 	bl	800084c <__aeabi_ddiv>
 801736c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017370:	f007 070f 	and.w	r7, r7, #15
 8017374:	2503      	movs	r5, #3
 8017376:	4eb6      	ldr	r6, [pc, #728]	; (8017650 <_dtoa_r+0x648>)
 8017378:	b957      	cbnz	r7, 8017390 <_dtoa_r+0x388>
 801737a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801737e:	ec53 2b18 	vmov	r2, r3, d8
 8017382:	f7e9 fa63 	bl	800084c <__aeabi_ddiv>
 8017386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801738a:	e029      	b.n	80173e0 <_dtoa_r+0x3d8>
 801738c:	2502      	movs	r5, #2
 801738e:	e7f2      	b.n	8017376 <_dtoa_r+0x36e>
 8017390:	07f9      	lsls	r1, r7, #31
 8017392:	d508      	bpl.n	80173a6 <_dtoa_r+0x39e>
 8017394:	ec51 0b18 	vmov	r0, r1, d8
 8017398:	e9d6 2300 	ldrd	r2, r3, [r6]
 801739c:	f7e9 f92c 	bl	80005f8 <__aeabi_dmul>
 80173a0:	ec41 0b18 	vmov	d8, r0, r1
 80173a4:	3501      	adds	r5, #1
 80173a6:	107f      	asrs	r7, r7, #1
 80173a8:	3608      	adds	r6, #8
 80173aa:	e7e5      	b.n	8017378 <_dtoa_r+0x370>
 80173ac:	f000 80a6 	beq.w	80174fc <_dtoa_r+0x4f4>
 80173b0:	f1ca 0600 	rsb	r6, sl, #0
 80173b4:	4ba5      	ldr	r3, [pc, #660]	; (801764c <_dtoa_r+0x644>)
 80173b6:	4fa6      	ldr	r7, [pc, #664]	; (8017650 <_dtoa_r+0x648>)
 80173b8:	f006 020f 	and.w	r2, r6, #15
 80173bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80173c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80173c8:	f7e9 f916 	bl	80005f8 <__aeabi_dmul>
 80173cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80173d0:	1136      	asrs	r6, r6, #4
 80173d2:	2300      	movs	r3, #0
 80173d4:	2502      	movs	r5, #2
 80173d6:	2e00      	cmp	r6, #0
 80173d8:	f040 8085 	bne.w	80174e6 <_dtoa_r+0x4de>
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d1d2      	bne.n	8017386 <_dtoa_r+0x37e>
 80173e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	f000 808c 	beq.w	8017500 <_dtoa_r+0x4f8>
 80173e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80173ec:	4b99      	ldr	r3, [pc, #612]	; (8017654 <_dtoa_r+0x64c>)
 80173ee:	2200      	movs	r2, #0
 80173f0:	4630      	mov	r0, r6
 80173f2:	4639      	mov	r1, r7
 80173f4:	f7e9 fb72 	bl	8000adc <__aeabi_dcmplt>
 80173f8:	2800      	cmp	r0, #0
 80173fa:	f000 8081 	beq.w	8017500 <_dtoa_r+0x4f8>
 80173fe:	9b01      	ldr	r3, [sp, #4]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d07d      	beq.n	8017500 <_dtoa_r+0x4f8>
 8017404:	f1b9 0f00 	cmp.w	r9, #0
 8017408:	dd3c      	ble.n	8017484 <_dtoa_r+0x47c>
 801740a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801740e:	9307      	str	r3, [sp, #28]
 8017410:	2200      	movs	r2, #0
 8017412:	4b91      	ldr	r3, [pc, #580]	; (8017658 <_dtoa_r+0x650>)
 8017414:	4630      	mov	r0, r6
 8017416:	4639      	mov	r1, r7
 8017418:	f7e9 f8ee 	bl	80005f8 <__aeabi_dmul>
 801741c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017420:	3501      	adds	r5, #1
 8017422:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801742a:	4628      	mov	r0, r5
 801742c:	f7e9 f87a 	bl	8000524 <__aeabi_i2d>
 8017430:	4632      	mov	r2, r6
 8017432:	463b      	mov	r3, r7
 8017434:	f7e9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8017438:	4b88      	ldr	r3, [pc, #544]	; (801765c <_dtoa_r+0x654>)
 801743a:	2200      	movs	r2, #0
 801743c:	f7e8 ff26 	bl	800028c <__adddf3>
 8017440:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017448:	9303      	str	r3, [sp, #12]
 801744a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801744c:	2b00      	cmp	r3, #0
 801744e:	d15c      	bne.n	801750a <_dtoa_r+0x502>
 8017450:	4b83      	ldr	r3, [pc, #524]	; (8017660 <_dtoa_r+0x658>)
 8017452:	2200      	movs	r2, #0
 8017454:	4630      	mov	r0, r6
 8017456:	4639      	mov	r1, r7
 8017458:	f7e8 ff16 	bl	8000288 <__aeabi_dsub>
 801745c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017460:	4606      	mov	r6, r0
 8017462:	460f      	mov	r7, r1
 8017464:	f7e9 fb58 	bl	8000b18 <__aeabi_dcmpgt>
 8017468:	2800      	cmp	r0, #0
 801746a:	f040 8296 	bne.w	801799a <_dtoa_r+0x992>
 801746e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017472:	4630      	mov	r0, r6
 8017474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017478:	4639      	mov	r1, r7
 801747a:	f7e9 fb2f 	bl	8000adc <__aeabi_dcmplt>
 801747e:	2800      	cmp	r0, #0
 8017480:	f040 8288 	bne.w	8017994 <_dtoa_r+0x98c>
 8017484:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017488:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801748c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801748e:	2b00      	cmp	r3, #0
 8017490:	f2c0 8158 	blt.w	8017744 <_dtoa_r+0x73c>
 8017494:	f1ba 0f0e 	cmp.w	sl, #14
 8017498:	f300 8154 	bgt.w	8017744 <_dtoa_r+0x73c>
 801749c:	4b6b      	ldr	r3, [pc, #428]	; (801764c <_dtoa_r+0x644>)
 801749e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80174a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80174a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f280 80e3 	bge.w	8017674 <_dtoa_r+0x66c>
 80174ae:	9b01      	ldr	r3, [sp, #4]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	f300 80df 	bgt.w	8017674 <_dtoa_r+0x66c>
 80174b6:	f040 826d 	bne.w	8017994 <_dtoa_r+0x98c>
 80174ba:	4b69      	ldr	r3, [pc, #420]	; (8017660 <_dtoa_r+0x658>)
 80174bc:	2200      	movs	r2, #0
 80174be:	4640      	mov	r0, r8
 80174c0:	4649      	mov	r1, r9
 80174c2:	f7e9 f899 	bl	80005f8 <__aeabi_dmul>
 80174c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174ca:	f7e9 fb1b 	bl	8000b04 <__aeabi_dcmpge>
 80174ce:	9e01      	ldr	r6, [sp, #4]
 80174d0:	4637      	mov	r7, r6
 80174d2:	2800      	cmp	r0, #0
 80174d4:	f040 8243 	bne.w	801795e <_dtoa_r+0x956>
 80174d8:	9d00      	ldr	r5, [sp, #0]
 80174da:	2331      	movs	r3, #49	; 0x31
 80174dc:	f805 3b01 	strb.w	r3, [r5], #1
 80174e0:	f10a 0a01 	add.w	sl, sl, #1
 80174e4:	e23f      	b.n	8017966 <_dtoa_r+0x95e>
 80174e6:	07f2      	lsls	r2, r6, #31
 80174e8:	d505      	bpl.n	80174f6 <_dtoa_r+0x4ee>
 80174ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80174ee:	f7e9 f883 	bl	80005f8 <__aeabi_dmul>
 80174f2:	3501      	adds	r5, #1
 80174f4:	2301      	movs	r3, #1
 80174f6:	1076      	asrs	r6, r6, #1
 80174f8:	3708      	adds	r7, #8
 80174fa:	e76c      	b.n	80173d6 <_dtoa_r+0x3ce>
 80174fc:	2502      	movs	r5, #2
 80174fe:	e76f      	b.n	80173e0 <_dtoa_r+0x3d8>
 8017500:	9b01      	ldr	r3, [sp, #4]
 8017502:	f8cd a01c 	str.w	sl, [sp, #28]
 8017506:	930c      	str	r3, [sp, #48]	; 0x30
 8017508:	e78d      	b.n	8017426 <_dtoa_r+0x41e>
 801750a:	9900      	ldr	r1, [sp, #0]
 801750c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801750e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017510:	4b4e      	ldr	r3, [pc, #312]	; (801764c <_dtoa_r+0x644>)
 8017512:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017516:	4401      	add	r1, r0
 8017518:	9102      	str	r1, [sp, #8]
 801751a:	9908      	ldr	r1, [sp, #32]
 801751c:	eeb0 8a47 	vmov.f32	s16, s14
 8017520:	eef0 8a67 	vmov.f32	s17, s15
 8017524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801752c:	2900      	cmp	r1, #0
 801752e:	d045      	beq.n	80175bc <_dtoa_r+0x5b4>
 8017530:	494c      	ldr	r1, [pc, #304]	; (8017664 <_dtoa_r+0x65c>)
 8017532:	2000      	movs	r0, #0
 8017534:	f7e9 f98a 	bl	800084c <__aeabi_ddiv>
 8017538:	ec53 2b18 	vmov	r2, r3, d8
 801753c:	f7e8 fea4 	bl	8000288 <__aeabi_dsub>
 8017540:	9d00      	ldr	r5, [sp, #0]
 8017542:	ec41 0b18 	vmov	d8, r0, r1
 8017546:	4639      	mov	r1, r7
 8017548:	4630      	mov	r0, r6
 801754a:	f7e9 fb05 	bl	8000b58 <__aeabi_d2iz>
 801754e:	900c      	str	r0, [sp, #48]	; 0x30
 8017550:	f7e8 ffe8 	bl	8000524 <__aeabi_i2d>
 8017554:	4602      	mov	r2, r0
 8017556:	460b      	mov	r3, r1
 8017558:	4630      	mov	r0, r6
 801755a:	4639      	mov	r1, r7
 801755c:	f7e8 fe94 	bl	8000288 <__aeabi_dsub>
 8017560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017562:	3330      	adds	r3, #48	; 0x30
 8017564:	f805 3b01 	strb.w	r3, [r5], #1
 8017568:	ec53 2b18 	vmov	r2, r3, d8
 801756c:	4606      	mov	r6, r0
 801756e:	460f      	mov	r7, r1
 8017570:	f7e9 fab4 	bl	8000adc <__aeabi_dcmplt>
 8017574:	2800      	cmp	r0, #0
 8017576:	d165      	bne.n	8017644 <_dtoa_r+0x63c>
 8017578:	4632      	mov	r2, r6
 801757a:	463b      	mov	r3, r7
 801757c:	4935      	ldr	r1, [pc, #212]	; (8017654 <_dtoa_r+0x64c>)
 801757e:	2000      	movs	r0, #0
 8017580:	f7e8 fe82 	bl	8000288 <__aeabi_dsub>
 8017584:	ec53 2b18 	vmov	r2, r3, d8
 8017588:	f7e9 faa8 	bl	8000adc <__aeabi_dcmplt>
 801758c:	2800      	cmp	r0, #0
 801758e:	f040 80b9 	bne.w	8017704 <_dtoa_r+0x6fc>
 8017592:	9b02      	ldr	r3, [sp, #8]
 8017594:	429d      	cmp	r5, r3
 8017596:	f43f af75 	beq.w	8017484 <_dtoa_r+0x47c>
 801759a:	4b2f      	ldr	r3, [pc, #188]	; (8017658 <_dtoa_r+0x650>)
 801759c:	ec51 0b18 	vmov	r0, r1, d8
 80175a0:	2200      	movs	r2, #0
 80175a2:	f7e9 f829 	bl	80005f8 <__aeabi_dmul>
 80175a6:	4b2c      	ldr	r3, [pc, #176]	; (8017658 <_dtoa_r+0x650>)
 80175a8:	ec41 0b18 	vmov	d8, r0, r1
 80175ac:	2200      	movs	r2, #0
 80175ae:	4630      	mov	r0, r6
 80175b0:	4639      	mov	r1, r7
 80175b2:	f7e9 f821 	bl	80005f8 <__aeabi_dmul>
 80175b6:	4606      	mov	r6, r0
 80175b8:	460f      	mov	r7, r1
 80175ba:	e7c4      	b.n	8017546 <_dtoa_r+0x53e>
 80175bc:	ec51 0b17 	vmov	r0, r1, d7
 80175c0:	f7e9 f81a 	bl	80005f8 <__aeabi_dmul>
 80175c4:	9b02      	ldr	r3, [sp, #8]
 80175c6:	9d00      	ldr	r5, [sp, #0]
 80175c8:	930c      	str	r3, [sp, #48]	; 0x30
 80175ca:	ec41 0b18 	vmov	d8, r0, r1
 80175ce:	4639      	mov	r1, r7
 80175d0:	4630      	mov	r0, r6
 80175d2:	f7e9 fac1 	bl	8000b58 <__aeabi_d2iz>
 80175d6:	9011      	str	r0, [sp, #68]	; 0x44
 80175d8:	f7e8 ffa4 	bl	8000524 <__aeabi_i2d>
 80175dc:	4602      	mov	r2, r0
 80175de:	460b      	mov	r3, r1
 80175e0:	4630      	mov	r0, r6
 80175e2:	4639      	mov	r1, r7
 80175e4:	f7e8 fe50 	bl	8000288 <__aeabi_dsub>
 80175e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175ea:	3330      	adds	r3, #48	; 0x30
 80175ec:	f805 3b01 	strb.w	r3, [r5], #1
 80175f0:	9b02      	ldr	r3, [sp, #8]
 80175f2:	429d      	cmp	r5, r3
 80175f4:	4606      	mov	r6, r0
 80175f6:	460f      	mov	r7, r1
 80175f8:	f04f 0200 	mov.w	r2, #0
 80175fc:	d134      	bne.n	8017668 <_dtoa_r+0x660>
 80175fe:	4b19      	ldr	r3, [pc, #100]	; (8017664 <_dtoa_r+0x65c>)
 8017600:	ec51 0b18 	vmov	r0, r1, d8
 8017604:	f7e8 fe42 	bl	800028c <__adddf3>
 8017608:	4602      	mov	r2, r0
 801760a:	460b      	mov	r3, r1
 801760c:	4630      	mov	r0, r6
 801760e:	4639      	mov	r1, r7
 8017610:	f7e9 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 8017614:	2800      	cmp	r0, #0
 8017616:	d175      	bne.n	8017704 <_dtoa_r+0x6fc>
 8017618:	ec53 2b18 	vmov	r2, r3, d8
 801761c:	4911      	ldr	r1, [pc, #68]	; (8017664 <_dtoa_r+0x65c>)
 801761e:	2000      	movs	r0, #0
 8017620:	f7e8 fe32 	bl	8000288 <__aeabi_dsub>
 8017624:	4602      	mov	r2, r0
 8017626:	460b      	mov	r3, r1
 8017628:	4630      	mov	r0, r6
 801762a:	4639      	mov	r1, r7
 801762c:	f7e9 fa56 	bl	8000adc <__aeabi_dcmplt>
 8017630:	2800      	cmp	r0, #0
 8017632:	f43f af27 	beq.w	8017484 <_dtoa_r+0x47c>
 8017636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017638:	1e6b      	subs	r3, r5, #1
 801763a:	930c      	str	r3, [sp, #48]	; 0x30
 801763c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017640:	2b30      	cmp	r3, #48	; 0x30
 8017642:	d0f8      	beq.n	8017636 <_dtoa_r+0x62e>
 8017644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017648:	e04a      	b.n	80176e0 <_dtoa_r+0x6d8>
 801764a:	bf00      	nop
 801764c:	0801af80 	.word	0x0801af80
 8017650:	0801af58 	.word	0x0801af58
 8017654:	3ff00000 	.word	0x3ff00000
 8017658:	40240000 	.word	0x40240000
 801765c:	401c0000 	.word	0x401c0000
 8017660:	40140000 	.word	0x40140000
 8017664:	3fe00000 	.word	0x3fe00000
 8017668:	4baf      	ldr	r3, [pc, #700]	; (8017928 <_dtoa_r+0x920>)
 801766a:	f7e8 ffc5 	bl	80005f8 <__aeabi_dmul>
 801766e:	4606      	mov	r6, r0
 8017670:	460f      	mov	r7, r1
 8017672:	e7ac      	b.n	80175ce <_dtoa_r+0x5c6>
 8017674:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017678:	9d00      	ldr	r5, [sp, #0]
 801767a:	4642      	mov	r2, r8
 801767c:	464b      	mov	r3, r9
 801767e:	4630      	mov	r0, r6
 8017680:	4639      	mov	r1, r7
 8017682:	f7e9 f8e3 	bl	800084c <__aeabi_ddiv>
 8017686:	f7e9 fa67 	bl	8000b58 <__aeabi_d2iz>
 801768a:	9002      	str	r0, [sp, #8]
 801768c:	f7e8 ff4a 	bl	8000524 <__aeabi_i2d>
 8017690:	4642      	mov	r2, r8
 8017692:	464b      	mov	r3, r9
 8017694:	f7e8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8017698:	4602      	mov	r2, r0
 801769a:	460b      	mov	r3, r1
 801769c:	4630      	mov	r0, r6
 801769e:	4639      	mov	r1, r7
 80176a0:	f7e8 fdf2 	bl	8000288 <__aeabi_dsub>
 80176a4:	9e02      	ldr	r6, [sp, #8]
 80176a6:	9f01      	ldr	r7, [sp, #4]
 80176a8:	3630      	adds	r6, #48	; 0x30
 80176aa:	f805 6b01 	strb.w	r6, [r5], #1
 80176ae:	9e00      	ldr	r6, [sp, #0]
 80176b0:	1bae      	subs	r6, r5, r6
 80176b2:	42b7      	cmp	r7, r6
 80176b4:	4602      	mov	r2, r0
 80176b6:	460b      	mov	r3, r1
 80176b8:	d137      	bne.n	801772a <_dtoa_r+0x722>
 80176ba:	f7e8 fde7 	bl	800028c <__adddf3>
 80176be:	4642      	mov	r2, r8
 80176c0:	464b      	mov	r3, r9
 80176c2:	4606      	mov	r6, r0
 80176c4:	460f      	mov	r7, r1
 80176c6:	f7e9 fa27 	bl	8000b18 <__aeabi_dcmpgt>
 80176ca:	b9c8      	cbnz	r0, 8017700 <_dtoa_r+0x6f8>
 80176cc:	4642      	mov	r2, r8
 80176ce:	464b      	mov	r3, r9
 80176d0:	4630      	mov	r0, r6
 80176d2:	4639      	mov	r1, r7
 80176d4:	f7e9 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80176d8:	b110      	cbz	r0, 80176e0 <_dtoa_r+0x6d8>
 80176da:	9b02      	ldr	r3, [sp, #8]
 80176dc:	07d9      	lsls	r1, r3, #31
 80176de:	d40f      	bmi.n	8017700 <_dtoa_r+0x6f8>
 80176e0:	4620      	mov	r0, r4
 80176e2:	4659      	mov	r1, fp
 80176e4:	f000 fe5c 	bl	80183a0 <_Bfree>
 80176e8:	2300      	movs	r3, #0
 80176ea:	702b      	strb	r3, [r5, #0]
 80176ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176ee:	f10a 0001 	add.w	r0, sl, #1
 80176f2:	6018      	str	r0, [r3, #0]
 80176f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	f43f acd8 	beq.w	80170ac <_dtoa_r+0xa4>
 80176fc:	601d      	str	r5, [r3, #0]
 80176fe:	e4d5      	b.n	80170ac <_dtoa_r+0xa4>
 8017700:	f8cd a01c 	str.w	sl, [sp, #28]
 8017704:	462b      	mov	r3, r5
 8017706:	461d      	mov	r5, r3
 8017708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801770c:	2a39      	cmp	r2, #57	; 0x39
 801770e:	d108      	bne.n	8017722 <_dtoa_r+0x71a>
 8017710:	9a00      	ldr	r2, [sp, #0]
 8017712:	429a      	cmp	r2, r3
 8017714:	d1f7      	bne.n	8017706 <_dtoa_r+0x6fe>
 8017716:	9a07      	ldr	r2, [sp, #28]
 8017718:	9900      	ldr	r1, [sp, #0]
 801771a:	3201      	adds	r2, #1
 801771c:	9207      	str	r2, [sp, #28]
 801771e:	2230      	movs	r2, #48	; 0x30
 8017720:	700a      	strb	r2, [r1, #0]
 8017722:	781a      	ldrb	r2, [r3, #0]
 8017724:	3201      	adds	r2, #1
 8017726:	701a      	strb	r2, [r3, #0]
 8017728:	e78c      	b.n	8017644 <_dtoa_r+0x63c>
 801772a:	4b7f      	ldr	r3, [pc, #508]	; (8017928 <_dtoa_r+0x920>)
 801772c:	2200      	movs	r2, #0
 801772e:	f7e8 ff63 	bl	80005f8 <__aeabi_dmul>
 8017732:	2200      	movs	r2, #0
 8017734:	2300      	movs	r3, #0
 8017736:	4606      	mov	r6, r0
 8017738:	460f      	mov	r7, r1
 801773a:	f7e9 f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 801773e:	2800      	cmp	r0, #0
 8017740:	d09b      	beq.n	801767a <_dtoa_r+0x672>
 8017742:	e7cd      	b.n	80176e0 <_dtoa_r+0x6d8>
 8017744:	9a08      	ldr	r2, [sp, #32]
 8017746:	2a00      	cmp	r2, #0
 8017748:	f000 80c4 	beq.w	80178d4 <_dtoa_r+0x8cc>
 801774c:	9a05      	ldr	r2, [sp, #20]
 801774e:	2a01      	cmp	r2, #1
 8017750:	f300 80a8 	bgt.w	80178a4 <_dtoa_r+0x89c>
 8017754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017756:	2a00      	cmp	r2, #0
 8017758:	f000 80a0 	beq.w	801789c <_dtoa_r+0x894>
 801775c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017760:	9e06      	ldr	r6, [sp, #24]
 8017762:	4645      	mov	r5, r8
 8017764:	9a04      	ldr	r2, [sp, #16]
 8017766:	2101      	movs	r1, #1
 8017768:	441a      	add	r2, r3
 801776a:	4620      	mov	r0, r4
 801776c:	4498      	add	r8, r3
 801776e:	9204      	str	r2, [sp, #16]
 8017770:	f000 ff1c 	bl	80185ac <__i2b>
 8017774:	4607      	mov	r7, r0
 8017776:	2d00      	cmp	r5, #0
 8017778:	dd0b      	ble.n	8017792 <_dtoa_r+0x78a>
 801777a:	9b04      	ldr	r3, [sp, #16]
 801777c:	2b00      	cmp	r3, #0
 801777e:	dd08      	ble.n	8017792 <_dtoa_r+0x78a>
 8017780:	42ab      	cmp	r3, r5
 8017782:	9a04      	ldr	r2, [sp, #16]
 8017784:	bfa8      	it	ge
 8017786:	462b      	movge	r3, r5
 8017788:	eba8 0803 	sub.w	r8, r8, r3
 801778c:	1aed      	subs	r5, r5, r3
 801778e:	1ad3      	subs	r3, r2, r3
 8017790:	9304      	str	r3, [sp, #16]
 8017792:	9b06      	ldr	r3, [sp, #24]
 8017794:	b1fb      	cbz	r3, 80177d6 <_dtoa_r+0x7ce>
 8017796:	9b08      	ldr	r3, [sp, #32]
 8017798:	2b00      	cmp	r3, #0
 801779a:	f000 809f 	beq.w	80178dc <_dtoa_r+0x8d4>
 801779e:	2e00      	cmp	r6, #0
 80177a0:	dd11      	ble.n	80177c6 <_dtoa_r+0x7be>
 80177a2:	4639      	mov	r1, r7
 80177a4:	4632      	mov	r2, r6
 80177a6:	4620      	mov	r0, r4
 80177a8:	f000 ffbc 	bl	8018724 <__pow5mult>
 80177ac:	465a      	mov	r2, fp
 80177ae:	4601      	mov	r1, r0
 80177b0:	4607      	mov	r7, r0
 80177b2:	4620      	mov	r0, r4
 80177b4:	f000 ff10 	bl	80185d8 <__multiply>
 80177b8:	4659      	mov	r1, fp
 80177ba:	9007      	str	r0, [sp, #28]
 80177bc:	4620      	mov	r0, r4
 80177be:	f000 fdef 	bl	80183a0 <_Bfree>
 80177c2:	9b07      	ldr	r3, [sp, #28]
 80177c4:	469b      	mov	fp, r3
 80177c6:	9b06      	ldr	r3, [sp, #24]
 80177c8:	1b9a      	subs	r2, r3, r6
 80177ca:	d004      	beq.n	80177d6 <_dtoa_r+0x7ce>
 80177cc:	4659      	mov	r1, fp
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 ffa8 	bl	8018724 <__pow5mult>
 80177d4:	4683      	mov	fp, r0
 80177d6:	2101      	movs	r1, #1
 80177d8:	4620      	mov	r0, r4
 80177da:	f000 fee7 	bl	80185ac <__i2b>
 80177de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	4606      	mov	r6, r0
 80177e4:	dd7c      	ble.n	80178e0 <_dtoa_r+0x8d8>
 80177e6:	461a      	mov	r2, r3
 80177e8:	4601      	mov	r1, r0
 80177ea:	4620      	mov	r0, r4
 80177ec:	f000 ff9a 	bl	8018724 <__pow5mult>
 80177f0:	9b05      	ldr	r3, [sp, #20]
 80177f2:	2b01      	cmp	r3, #1
 80177f4:	4606      	mov	r6, r0
 80177f6:	dd76      	ble.n	80178e6 <_dtoa_r+0x8de>
 80177f8:	2300      	movs	r3, #0
 80177fa:	9306      	str	r3, [sp, #24]
 80177fc:	6933      	ldr	r3, [r6, #16]
 80177fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017802:	6918      	ldr	r0, [r3, #16]
 8017804:	f000 fe82 	bl	801850c <__hi0bits>
 8017808:	f1c0 0020 	rsb	r0, r0, #32
 801780c:	9b04      	ldr	r3, [sp, #16]
 801780e:	4418      	add	r0, r3
 8017810:	f010 001f 	ands.w	r0, r0, #31
 8017814:	f000 8086 	beq.w	8017924 <_dtoa_r+0x91c>
 8017818:	f1c0 0320 	rsb	r3, r0, #32
 801781c:	2b04      	cmp	r3, #4
 801781e:	dd7f      	ble.n	8017920 <_dtoa_r+0x918>
 8017820:	f1c0 001c 	rsb	r0, r0, #28
 8017824:	9b04      	ldr	r3, [sp, #16]
 8017826:	4403      	add	r3, r0
 8017828:	4480      	add	r8, r0
 801782a:	4405      	add	r5, r0
 801782c:	9304      	str	r3, [sp, #16]
 801782e:	f1b8 0f00 	cmp.w	r8, #0
 8017832:	dd05      	ble.n	8017840 <_dtoa_r+0x838>
 8017834:	4659      	mov	r1, fp
 8017836:	4642      	mov	r2, r8
 8017838:	4620      	mov	r0, r4
 801783a:	f000 ffcd 	bl	80187d8 <__lshift>
 801783e:	4683      	mov	fp, r0
 8017840:	9b04      	ldr	r3, [sp, #16]
 8017842:	2b00      	cmp	r3, #0
 8017844:	dd05      	ble.n	8017852 <_dtoa_r+0x84a>
 8017846:	4631      	mov	r1, r6
 8017848:	461a      	mov	r2, r3
 801784a:	4620      	mov	r0, r4
 801784c:	f000 ffc4 	bl	80187d8 <__lshift>
 8017850:	4606      	mov	r6, r0
 8017852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017854:	2b00      	cmp	r3, #0
 8017856:	d069      	beq.n	801792c <_dtoa_r+0x924>
 8017858:	4631      	mov	r1, r6
 801785a:	4658      	mov	r0, fp
 801785c:	f001 f828 	bl	80188b0 <__mcmp>
 8017860:	2800      	cmp	r0, #0
 8017862:	da63      	bge.n	801792c <_dtoa_r+0x924>
 8017864:	2300      	movs	r3, #0
 8017866:	4659      	mov	r1, fp
 8017868:	220a      	movs	r2, #10
 801786a:	4620      	mov	r0, r4
 801786c:	f000 fdba 	bl	80183e4 <__multadd>
 8017870:	9b08      	ldr	r3, [sp, #32]
 8017872:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017876:	4683      	mov	fp, r0
 8017878:	2b00      	cmp	r3, #0
 801787a:	f000 818f 	beq.w	8017b9c <_dtoa_r+0xb94>
 801787e:	4639      	mov	r1, r7
 8017880:	2300      	movs	r3, #0
 8017882:	220a      	movs	r2, #10
 8017884:	4620      	mov	r0, r4
 8017886:	f000 fdad 	bl	80183e4 <__multadd>
 801788a:	f1b9 0f00 	cmp.w	r9, #0
 801788e:	4607      	mov	r7, r0
 8017890:	f300 808e 	bgt.w	80179b0 <_dtoa_r+0x9a8>
 8017894:	9b05      	ldr	r3, [sp, #20]
 8017896:	2b02      	cmp	r3, #2
 8017898:	dc50      	bgt.n	801793c <_dtoa_r+0x934>
 801789a:	e089      	b.n	80179b0 <_dtoa_r+0x9a8>
 801789c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801789e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80178a2:	e75d      	b.n	8017760 <_dtoa_r+0x758>
 80178a4:	9b01      	ldr	r3, [sp, #4]
 80178a6:	1e5e      	subs	r6, r3, #1
 80178a8:	9b06      	ldr	r3, [sp, #24]
 80178aa:	42b3      	cmp	r3, r6
 80178ac:	bfbf      	itttt	lt
 80178ae:	9b06      	ldrlt	r3, [sp, #24]
 80178b0:	9606      	strlt	r6, [sp, #24]
 80178b2:	1af2      	sublt	r2, r6, r3
 80178b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80178b6:	bfb6      	itet	lt
 80178b8:	189b      	addlt	r3, r3, r2
 80178ba:	1b9e      	subge	r6, r3, r6
 80178bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80178be:	9b01      	ldr	r3, [sp, #4]
 80178c0:	bfb8      	it	lt
 80178c2:	2600      	movlt	r6, #0
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	bfb5      	itete	lt
 80178c8:	eba8 0503 	sublt.w	r5, r8, r3
 80178cc:	9b01      	ldrge	r3, [sp, #4]
 80178ce:	2300      	movlt	r3, #0
 80178d0:	4645      	movge	r5, r8
 80178d2:	e747      	b.n	8017764 <_dtoa_r+0x75c>
 80178d4:	9e06      	ldr	r6, [sp, #24]
 80178d6:	9f08      	ldr	r7, [sp, #32]
 80178d8:	4645      	mov	r5, r8
 80178da:	e74c      	b.n	8017776 <_dtoa_r+0x76e>
 80178dc:	9a06      	ldr	r2, [sp, #24]
 80178de:	e775      	b.n	80177cc <_dtoa_r+0x7c4>
 80178e0:	9b05      	ldr	r3, [sp, #20]
 80178e2:	2b01      	cmp	r3, #1
 80178e4:	dc18      	bgt.n	8017918 <_dtoa_r+0x910>
 80178e6:	9b02      	ldr	r3, [sp, #8]
 80178e8:	b9b3      	cbnz	r3, 8017918 <_dtoa_r+0x910>
 80178ea:	9b03      	ldr	r3, [sp, #12]
 80178ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80178f0:	b9a3      	cbnz	r3, 801791c <_dtoa_r+0x914>
 80178f2:	9b03      	ldr	r3, [sp, #12]
 80178f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80178f8:	0d1b      	lsrs	r3, r3, #20
 80178fa:	051b      	lsls	r3, r3, #20
 80178fc:	b12b      	cbz	r3, 801790a <_dtoa_r+0x902>
 80178fe:	9b04      	ldr	r3, [sp, #16]
 8017900:	3301      	adds	r3, #1
 8017902:	9304      	str	r3, [sp, #16]
 8017904:	f108 0801 	add.w	r8, r8, #1
 8017908:	2301      	movs	r3, #1
 801790a:	9306      	str	r3, [sp, #24]
 801790c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801790e:	2b00      	cmp	r3, #0
 8017910:	f47f af74 	bne.w	80177fc <_dtoa_r+0x7f4>
 8017914:	2001      	movs	r0, #1
 8017916:	e779      	b.n	801780c <_dtoa_r+0x804>
 8017918:	2300      	movs	r3, #0
 801791a:	e7f6      	b.n	801790a <_dtoa_r+0x902>
 801791c:	9b02      	ldr	r3, [sp, #8]
 801791e:	e7f4      	b.n	801790a <_dtoa_r+0x902>
 8017920:	d085      	beq.n	801782e <_dtoa_r+0x826>
 8017922:	4618      	mov	r0, r3
 8017924:	301c      	adds	r0, #28
 8017926:	e77d      	b.n	8017824 <_dtoa_r+0x81c>
 8017928:	40240000 	.word	0x40240000
 801792c:	9b01      	ldr	r3, [sp, #4]
 801792e:	2b00      	cmp	r3, #0
 8017930:	dc38      	bgt.n	80179a4 <_dtoa_r+0x99c>
 8017932:	9b05      	ldr	r3, [sp, #20]
 8017934:	2b02      	cmp	r3, #2
 8017936:	dd35      	ble.n	80179a4 <_dtoa_r+0x99c>
 8017938:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801793c:	f1b9 0f00 	cmp.w	r9, #0
 8017940:	d10d      	bne.n	801795e <_dtoa_r+0x956>
 8017942:	4631      	mov	r1, r6
 8017944:	464b      	mov	r3, r9
 8017946:	2205      	movs	r2, #5
 8017948:	4620      	mov	r0, r4
 801794a:	f000 fd4b 	bl	80183e4 <__multadd>
 801794e:	4601      	mov	r1, r0
 8017950:	4606      	mov	r6, r0
 8017952:	4658      	mov	r0, fp
 8017954:	f000 ffac 	bl	80188b0 <__mcmp>
 8017958:	2800      	cmp	r0, #0
 801795a:	f73f adbd 	bgt.w	80174d8 <_dtoa_r+0x4d0>
 801795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017960:	9d00      	ldr	r5, [sp, #0]
 8017962:	ea6f 0a03 	mvn.w	sl, r3
 8017966:	f04f 0800 	mov.w	r8, #0
 801796a:	4631      	mov	r1, r6
 801796c:	4620      	mov	r0, r4
 801796e:	f000 fd17 	bl	80183a0 <_Bfree>
 8017972:	2f00      	cmp	r7, #0
 8017974:	f43f aeb4 	beq.w	80176e0 <_dtoa_r+0x6d8>
 8017978:	f1b8 0f00 	cmp.w	r8, #0
 801797c:	d005      	beq.n	801798a <_dtoa_r+0x982>
 801797e:	45b8      	cmp	r8, r7
 8017980:	d003      	beq.n	801798a <_dtoa_r+0x982>
 8017982:	4641      	mov	r1, r8
 8017984:	4620      	mov	r0, r4
 8017986:	f000 fd0b 	bl	80183a0 <_Bfree>
 801798a:	4639      	mov	r1, r7
 801798c:	4620      	mov	r0, r4
 801798e:	f000 fd07 	bl	80183a0 <_Bfree>
 8017992:	e6a5      	b.n	80176e0 <_dtoa_r+0x6d8>
 8017994:	2600      	movs	r6, #0
 8017996:	4637      	mov	r7, r6
 8017998:	e7e1      	b.n	801795e <_dtoa_r+0x956>
 801799a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801799c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80179a0:	4637      	mov	r7, r6
 80179a2:	e599      	b.n	80174d8 <_dtoa_r+0x4d0>
 80179a4:	9b08      	ldr	r3, [sp, #32]
 80179a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	f000 80fd 	beq.w	8017baa <_dtoa_r+0xba2>
 80179b0:	2d00      	cmp	r5, #0
 80179b2:	dd05      	ble.n	80179c0 <_dtoa_r+0x9b8>
 80179b4:	4639      	mov	r1, r7
 80179b6:	462a      	mov	r2, r5
 80179b8:	4620      	mov	r0, r4
 80179ba:	f000 ff0d 	bl	80187d8 <__lshift>
 80179be:	4607      	mov	r7, r0
 80179c0:	9b06      	ldr	r3, [sp, #24]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d05c      	beq.n	8017a80 <_dtoa_r+0xa78>
 80179c6:	6879      	ldr	r1, [r7, #4]
 80179c8:	4620      	mov	r0, r4
 80179ca:	f000 fca9 	bl	8018320 <_Balloc>
 80179ce:	4605      	mov	r5, r0
 80179d0:	b928      	cbnz	r0, 80179de <_dtoa_r+0x9d6>
 80179d2:	4b80      	ldr	r3, [pc, #512]	; (8017bd4 <_dtoa_r+0xbcc>)
 80179d4:	4602      	mov	r2, r0
 80179d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80179da:	f7ff bb2e 	b.w	801703a <_dtoa_r+0x32>
 80179de:	693a      	ldr	r2, [r7, #16]
 80179e0:	3202      	adds	r2, #2
 80179e2:	0092      	lsls	r2, r2, #2
 80179e4:	f107 010c 	add.w	r1, r7, #12
 80179e8:	300c      	adds	r0, #12
 80179ea:	f7fd fc19 	bl	8015220 <memcpy>
 80179ee:	2201      	movs	r2, #1
 80179f0:	4629      	mov	r1, r5
 80179f2:	4620      	mov	r0, r4
 80179f4:	f000 fef0 	bl	80187d8 <__lshift>
 80179f8:	9b00      	ldr	r3, [sp, #0]
 80179fa:	3301      	adds	r3, #1
 80179fc:	9301      	str	r3, [sp, #4]
 80179fe:	9b00      	ldr	r3, [sp, #0]
 8017a00:	444b      	add	r3, r9
 8017a02:	9307      	str	r3, [sp, #28]
 8017a04:	9b02      	ldr	r3, [sp, #8]
 8017a06:	f003 0301 	and.w	r3, r3, #1
 8017a0a:	46b8      	mov	r8, r7
 8017a0c:	9306      	str	r3, [sp, #24]
 8017a0e:	4607      	mov	r7, r0
 8017a10:	9b01      	ldr	r3, [sp, #4]
 8017a12:	4631      	mov	r1, r6
 8017a14:	3b01      	subs	r3, #1
 8017a16:	4658      	mov	r0, fp
 8017a18:	9302      	str	r3, [sp, #8]
 8017a1a:	f7ff fa69 	bl	8016ef0 <quorem>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	3330      	adds	r3, #48	; 0x30
 8017a22:	9004      	str	r0, [sp, #16]
 8017a24:	4641      	mov	r1, r8
 8017a26:	4658      	mov	r0, fp
 8017a28:	9308      	str	r3, [sp, #32]
 8017a2a:	f000 ff41 	bl	80188b0 <__mcmp>
 8017a2e:	463a      	mov	r2, r7
 8017a30:	4681      	mov	r9, r0
 8017a32:	4631      	mov	r1, r6
 8017a34:	4620      	mov	r0, r4
 8017a36:	f000 ff57 	bl	80188e8 <__mdiff>
 8017a3a:	68c2      	ldr	r2, [r0, #12]
 8017a3c:	9b08      	ldr	r3, [sp, #32]
 8017a3e:	4605      	mov	r5, r0
 8017a40:	bb02      	cbnz	r2, 8017a84 <_dtoa_r+0xa7c>
 8017a42:	4601      	mov	r1, r0
 8017a44:	4658      	mov	r0, fp
 8017a46:	f000 ff33 	bl	80188b0 <__mcmp>
 8017a4a:	9b08      	ldr	r3, [sp, #32]
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	4629      	mov	r1, r5
 8017a50:	4620      	mov	r0, r4
 8017a52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017a56:	f000 fca3 	bl	80183a0 <_Bfree>
 8017a5a:	9b05      	ldr	r3, [sp, #20]
 8017a5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a5e:	9d01      	ldr	r5, [sp, #4]
 8017a60:	ea43 0102 	orr.w	r1, r3, r2
 8017a64:	9b06      	ldr	r3, [sp, #24]
 8017a66:	430b      	orrs	r3, r1
 8017a68:	9b08      	ldr	r3, [sp, #32]
 8017a6a:	d10d      	bne.n	8017a88 <_dtoa_r+0xa80>
 8017a6c:	2b39      	cmp	r3, #57	; 0x39
 8017a6e:	d029      	beq.n	8017ac4 <_dtoa_r+0xabc>
 8017a70:	f1b9 0f00 	cmp.w	r9, #0
 8017a74:	dd01      	ble.n	8017a7a <_dtoa_r+0xa72>
 8017a76:	9b04      	ldr	r3, [sp, #16]
 8017a78:	3331      	adds	r3, #49	; 0x31
 8017a7a:	9a02      	ldr	r2, [sp, #8]
 8017a7c:	7013      	strb	r3, [r2, #0]
 8017a7e:	e774      	b.n	801796a <_dtoa_r+0x962>
 8017a80:	4638      	mov	r0, r7
 8017a82:	e7b9      	b.n	80179f8 <_dtoa_r+0x9f0>
 8017a84:	2201      	movs	r2, #1
 8017a86:	e7e2      	b.n	8017a4e <_dtoa_r+0xa46>
 8017a88:	f1b9 0f00 	cmp.w	r9, #0
 8017a8c:	db06      	blt.n	8017a9c <_dtoa_r+0xa94>
 8017a8e:	9905      	ldr	r1, [sp, #20]
 8017a90:	ea41 0909 	orr.w	r9, r1, r9
 8017a94:	9906      	ldr	r1, [sp, #24]
 8017a96:	ea59 0101 	orrs.w	r1, r9, r1
 8017a9a:	d120      	bne.n	8017ade <_dtoa_r+0xad6>
 8017a9c:	2a00      	cmp	r2, #0
 8017a9e:	ddec      	ble.n	8017a7a <_dtoa_r+0xa72>
 8017aa0:	4659      	mov	r1, fp
 8017aa2:	2201      	movs	r2, #1
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	9301      	str	r3, [sp, #4]
 8017aa8:	f000 fe96 	bl	80187d8 <__lshift>
 8017aac:	4631      	mov	r1, r6
 8017aae:	4683      	mov	fp, r0
 8017ab0:	f000 fefe 	bl	80188b0 <__mcmp>
 8017ab4:	2800      	cmp	r0, #0
 8017ab6:	9b01      	ldr	r3, [sp, #4]
 8017ab8:	dc02      	bgt.n	8017ac0 <_dtoa_r+0xab8>
 8017aba:	d1de      	bne.n	8017a7a <_dtoa_r+0xa72>
 8017abc:	07da      	lsls	r2, r3, #31
 8017abe:	d5dc      	bpl.n	8017a7a <_dtoa_r+0xa72>
 8017ac0:	2b39      	cmp	r3, #57	; 0x39
 8017ac2:	d1d8      	bne.n	8017a76 <_dtoa_r+0xa6e>
 8017ac4:	9a02      	ldr	r2, [sp, #8]
 8017ac6:	2339      	movs	r3, #57	; 0x39
 8017ac8:	7013      	strb	r3, [r2, #0]
 8017aca:	462b      	mov	r3, r5
 8017acc:	461d      	mov	r5, r3
 8017ace:	3b01      	subs	r3, #1
 8017ad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017ad4:	2a39      	cmp	r2, #57	; 0x39
 8017ad6:	d050      	beq.n	8017b7a <_dtoa_r+0xb72>
 8017ad8:	3201      	adds	r2, #1
 8017ada:	701a      	strb	r2, [r3, #0]
 8017adc:	e745      	b.n	801796a <_dtoa_r+0x962>
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	dd03      	ble.n	8017aea <_dtoa_r+0xae2>
 8017ae2:	2b39      	cmp	r3, #57	; 0x39
 8017ae4:	d0ee      	beq.n	8017ac4 <_dtoa_r+0xabc>
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	e7c7      	b.n	8017a7a <_dtoa_r+0xa72>
 8017aea:	9a01      	ldr	r2, [sp, #4]
 8017aec:	9907      	ldr	r1, [sp, #28]
 8017aee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017af2:	428a      	cmp	r2, r1
 8017af4:	d02a      	beq.n	8017b4c <_dtoa_r+0xb44>
 8017af6:	4659      	mov	r1, fp
 8017af8:	2300      	movs	r3, #0
 8017afa:	220a      	movs	r2, #10
 8017afc:	4620      	mov	r0, r4
 8017afe:	f000 fc71 	bl	80183e4 <__multadd>
 8017b02:	45b8      	cmp	r8, r7
 8017b04:	4683      	mov	fp, r0
 8017b06:	f04f 0300 	mov.w	r3, #0
 8017b0a:	f04f 020a 	mov.w	r2, #10
 8017b0e:	4641      	mov	r1, r8
 8017b10:	4620      	mov	r0, r4
 8017b12:	d107      	bne.n	8017b24 <_dtoa_r+0xb1c>
 8017b14:	f000 fc66 	bl	80183e4 <__multadd>
 8017b18:	4680      	mov	r8, r0
 8017b1a:	4607      	mov	r7, r0
 8017b1c:	9b01      	ldr	r3, [sp, #4]
 8017b1e:	3301      	adds	r3, #1
 8017b20:	9301      	str	r3, [sp, #4]
 8017b22:	e775      	b.n	8017a10 <_dtoa_r+0xa08>
 8017b24:	f000 fc5e 	bl	80183e4 <__multadd>
 8017b28:	4639      	mov	r1, r7
 8017b2a:	4680      	mov	r8, r0
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	220a      	movs	r2, #10
 8017b30:	4620      	mov	r0, r4
 8017b32:	f000 fc57 	bl	80183e4 <__multadd>
 8017b36:	4607      	mov	r7, r0
 8017b38:	e7f0      	b.n	8017b1c <_dtoa_r+0xb14>
 8017b3a:	f1b9 0f00 	cmp.w	r9, #0
 8017b3e:	9a00      	ldr	r2, [sp, #0]
 8017b40:	bfcc      	ite	gt
 8017b42:	464d      	movgt	r5, r9
 8017b44:	2501      	movle	r5, #1
 8017b46:	4415      	add	r5, r2
 8017b48:	f04f 0800 	mov.w	r8, #0
 8017b4c:	4659      	mov	r1, fp
 8017b4e:	2201      	movs	r2, #1
 8017b50:	4620      	mov	r0, r4
 8017b52:	9301      	str	r3, [sp, #4]
 8017b54:	f000 fe40 	bl	80187d8 <__lshift>
 8017b58:	4631      	mov	r1, r6
 8017b5a:	4683      	mov	fp, r0
 8017b5c:	f000 fea8 	bl	80188b0 <__mcmp>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	dcb2      	bgt.n	8017aca <_dtoa_r+0xac2>
 8017b64:	d102      	bne.n	8017b6c <_dtoa_r+0xb64>
 8017b66:	9b01      	ldr	r3, [sp, #4]
 8017b68:	07db      	lsls	r3, r3, #31
 8017b6a:	d4ae      	bmi.n	8017aca <_dtoa_r+0xac2>
 8017b6c:	462b      	mov	r3, r5
 8017b6e:	461d      	mov	r5, r3
 8017b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b74:	2a30      	cmp	r2, #48	; 0x30
 8017b76:	d0fa      	beq.n	8017b6e <_dtoa_r+0xb66>
 8017b78:	e6f7      	b.n	801796a <_dtoa_r+0x962>
 8017b7a:	9a00      	ldr	r2, [sp, #0]
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	d1a5      	bne.n	8017acc <_dtoa_r+0xac4>
 8017b80:	f10a 0a01 	add.w	sl, sl, #1
 8017b84:	2331      	movs	r3, #49	; 0x31
 8017b86:	e779      	b.n	8017a7c <_dtoa_r+0xa74>
 8017b88:	4b13      	ldr	r3, [pc, #76]	; (8017bd8 <_dtoa_r+0xbd0>)
 8017b8a:	f7ff baaf 	b.w	80170ec <_dtoa_r+0xe4>
 8017b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	f47f aa86 	bne.w	80170a2 <_dtoa_r+0x9a>
 8017b96:	4b11      	ldr	r3, [pc, #68]	; (8017bdc <_dtoa_r+0xbd4>)
 8017b98:	f7ff baa8 	b.w	80170ec <_dtoa_r+0xe4>
 8017b9c:	f1b9 0f00 	cmp.w	r9, #0
 8017ba0:	dc03      	bgt.n	8017baa <_dtoa_r+0xba2>
 8017ba2:	9b05      	ldr	r3, [sp, #20]
 8017ba4:	2b02      	cmp	r3, #2
 8017ba6:	f73f aec9 	bgt.w	801793c <_dtoa_r+0x934>
 8017baa:	9d00      	ldr	r5, [sp, #0]
 8017bac:	4631      	mov	r1, r6
 8017bae:	4658      	mov	r0, fp
 8017bb0:	f7ff f99e 	bl	8016ef0 <quorem>
 8017bb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017bb8:	f805 3b01 	strb.w	r3, [r5], #1
 8017bbc:	9a00      	ldr	r2, [sp, #0]
 8017bbe:	1aaa      	subs	r2, r5, r2
 8017bc0:	4591      	cmp	r9, r2
 8017bc2:	ddba      	ble.n	8017b3a <_dtoa_r+0xb32>
 8017bc4:	4659      	mov	r1, fp
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	220a      	movs	r2, #10
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f000 fc0a 	bl	80183e4 <__multadd>
 8017bd0:	4683      	mov	fp, r0
 8017bd2:	e7eb      	b.n	8017bac <_dtoa_r+0xba4>
 8017bd4:	0801ae64 	.word	0x0801ae64
 8017bd8:	0801ac60 	.word	0x0801ac60
 8017bdc:	0801ade1 	.word	0x0801ade1

08017be0 <rshift>:
 8017be0:	6903      	ldr	r3, [r0, #16]
 8017be2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bea:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017bee:	f100 0414 	add.w	r4, r0, #20
 8017bf2:	dd45      	ble.n	8017c80 <rshift+0xa0>
 8017bf4:	f011 011f 	ands.w	r1, r1, #31
 8017bf8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017bfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017c00:	d10c      	bne.n	8017c1c <rshift+0x3c>
 8017c02:	f100 0710 	add.w	r7, r0, #16
 8017c06:	4629      	mov	r1, r5
 8017c08:	42b1      	cmp	r1, r6
 8017c0a:	d334      	bcc.n	8017c76 <rshift+0x96>
 8017c0c:	1a9b      	subs	r3, r3, r2
 8017c0e:	009b      	lsls	r3, r3, #2
 8017c10:	1eea      	subs	r2, r5, #3
 8017c12:	4296      	cmp	r6, r2
 8017c14:	bf38      	it	cc
 8017c16:	2300      	movcc	r3, #0
 8017c18:	4423      	add	r3, r4
 8017c1a:	e015      	b.n	8017c48 <rshift+0x68>
 8017c1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017c20:	f1c1 0820 	rsb	r8, r1, #32
 8017c24:	40cf      	lsrs	r7, r1
 8017c26:	f105 0e04 	add.w	lr, r5, #4
 8017c2a:	46a1      	mov	r9, r4
 8017c2c:	4576      	cmp	r6, lr
 8017c2e:	46f4      	mov	ip, lr
 8017c30:	d815      	bhi.n	8017c5e <rshift+0x7e>
 8017c32:	1a9b      	subs	r3, r3, r2
 8017c34:	009a      	lsls	r2, r3, #2
 8017c36:	3a04      	subs	r2, #4
 8017c38:	3501      	adds	r5, #1
 8017c3a:	42ae      	cmp	r6, r5
 8017c3c:	bf38      	it	cc
 8017c3e:	2200      	movcc	r2, #0
 8017c40:	18a3      	adds	r3, r4, r2
 8017c42:	50a7      	str	r7, [r4, r2]
 8017c44:	b107      	cbz	r7, 8017c48 <rshift+0x68>
 8017c46:	3304      	adds	r3, #4
 8017c48:	1b1a      	subs	r2, r3, r4
 8017c4a:	42a3      	cmp	r3, r4
 8017c4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c50:	bf08      	it	eq
 8017c52:	2300      	moveq	r3, #0
 8017c54:	6102      	str	r2, [r0, #16]
 8017c56:	bf08      	it	eq
 8017c58:	6143      	streq	r3, [r0, #20]
 8017c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c5e:	f8dc c000 	ldr.w	ip, [ip]
 8017c62:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c66:	ea4c 0707 	orr.w	r7, ip, r7
 8017c6a:	f849 7b04 	str.w	r7, [r9], #4
 8017c6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c72:	40cf      	lsrs	r7, r1
 8017c74:	e7da      	b.n	8017c2c <rshift+0x4c>
 8017c76:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c7a:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c7e:	e7c3      	b.n	8017c08 <rshift+0x28>
 8017c80:	4623      	mov	r3, r4
 8017c82:	e7e1      	b.n	8017c48 <rshift+0x68>

08017c84 <__hexdig_fun>:
 8017c84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017c88:	2b09      	cmp	r3, #9
 8017c8a:	d802      	bhi.n	8017c92 <__hexdig_fun+0xe>
 8017c8c:	3820      	subs	r0, #32
 8017c8e:	b2c0      	uxtb	r0, r0
 8017c90:	4770      	bx	lr
 8017c92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017c96:	2b05      	cmp	r3, #5
 8017c98:	d801      	bhi.n	8017c9e <__hexdig_fun+0x1a>
 8017c9a:	3847      	subs	r0, #71	; 0x47
 8017c9c:	e7f7      	b.n	8017c8e <__hexdig_fun+0xa>
 8017c9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017ca2:	2b05      	cmp	r3, #5
 8017ca4:	d801      	bhi.n	8017caa <__hexdig_fun+0x26>
 8017ca6:	3827      	subs	r0, #39	; 0x27
 8017ca8:	e7f1      	b.n	8017c8e <__hexdig_fun+0xa>
 8017caa:	2000      	movs	r0, #0
 8017cac:	4770      	bx	lr
	...

08017cb0 <__gethex>:
 8017cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb4:	ed2d 8b02 	vpush	{d8}
 8017cb8:	b089      	sub	sp, #36	; 0x24
 8017cba:	ee08 0a10 	vmov	s16, r0
 8017cbe:	9304      	str	r3, [sp, #16]
 8017cc0:	4bbc      	ldr	r3, [pc, #752]	; (8017fb4 <__gethex+0x304>)
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	9301      	str	r3, [sp, #4]
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	468b      	mov	fp, r1
 8017cca:	4690      	mov	r8, r2
 8017ccc:	f7e8 fa80 	bl	80001d0 <strlen>
 8017cd0:	9b01      	ldr	r3, [sp, #4]
 8017cd2:	f8db 2000 	ldr.w	r2, [fp]
 8017cd6:	4403      	add	r3, r0
 8017cd8:	4682      	mov	sl, r0
 8017cda:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017cde:	9305      	str	r3, [sp, #20]
 8017ce0:	1c93      	adds	r3, r2, #2
 8017ce2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017ce6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017cea:	32fe      	adds	r2, #254	; 0xfe
 8017cec:	18d1      	adds	r1, r2, r3
 8017cee:	461f      	mov	r7, r3
 8017cf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017cf4:	9100      	str	r1, [sp, #0]
 8017cf6:	2830      	cmp	r0, #48	; 0x30
 8017cf8:	d0f8      	beq.n	8017cec <__gethex+0x3c>
 8017cfa:	f7ff ffc3 	bl	8017c84 <__hexdig_fun>
 8017cfe:	4604      	mov	r4, r0
 8017d00:	2800      	cmp	r0, #0
 8017d02:	d13a      	bne.n	8017d7a <__gethex+0xca>
 8017d04:	9901      	ldr	r1, [sp, #4]
 8017d06:	4652      	mov	r2, sl
 8017d08:	4638      	mov	r0, r7
 8017d0a:	f001 fa12 	bl	8019132 <strncmp>
 8017d0e:	4605      	mov	r5, r0
 8017d10:	2800      	cmp	r0, #0
 8017d12:	d168      	bne.n	8017de6 <__gethex+0x136>
 8017d14:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017d18:	eb07 060a 	add.w	r6, r7, sl
 8017d1c:	f7ff ffb2 	bl	8017c84 <__hexdig_fun>
 8017d20:	2800      	cmp	r0, #0
 8017d22:	d062      	beq.n	8017dea <__gethex+0x13a>
 8017d24:	4633      	mov	r3, r6
 8017d26:	7818      	ldrb	r0, [r3, #0]
 8017d28:	2830      	cmp	r0, #48	; 0x30
 8017d2a:	461f      	mov	r7, r3
 8017d2c:	f103 0301 	add.w	r3, r3, #1
 8017d30:	d0f9      	beq.n	8017d26 <__gethex+0x76>
 8017d32:	f7ff ffa7 	bl	8017c84 <__hexdig_fun>
 8017d36:	2301      	movs	r3, #1
 8017d38:	fab0 f480 	clz	r4, r0
 8017d3c:	0964      	lsrs	r4, r4, #5
 8017d3e:	4635      	mov	r5, r6
 8017d40:	9300      	str	r3, [sp, #0]
 8017d42:	463a      	mov	r2, r7
 8017d44:	4616      	mov	r6, r2
 8017d46:	3201      	adds	r2, #1
 8017d48:	7830      	ldrb	r0, [r6, #0]
 8017d4a:	f7ff ff9b 	bl	8017c84 <__hexdig_fun>
 8017d4e:	2800      	cmp	r0, #0
 8017d50:	d1f8      	bne.n	8017d44 <__gethex+0x94>
 8017d52:	9901      	ldr	r1, [sp, #4]
 8017d54:	4652      	mov	r2, sl
 8017d56:	4630      	mov	r0, r6
 8017d58:	f001 f9eb 	bl	8019132 <strncmp>
 8017d5c:	b980      	cbnz	r0, 8017d80 <__gethex+0xd0>
 8017d5e:	b94d      	cbnz	r5, 8017d74 <__gethex+0xc4>
 8017d60:	eb06 050a 	add.w	r5, r6, sl
 8017d64:	462a      	mov	r2, r5
 8017d66:	4616      	mov	r6, r2
 8017d68:	3201      	adds	r2, #1
 8017d6a:	7830      	ldrb	r0, [r6, #0]
 8017d6c:	f7ff ff8a 	bl	8017c84 <__hexdig_fun>
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d1f8      	bne.n	8017d66 <__gethex+0xb6>
 8017d74:	1bad      	subs	r5, r5, r6
 8017d76:	00ad      	lsls	r5, r5, #2
 8017d78:	e004      	b.n	8017d84 <__gethex+0xd4>
 8017d7a:	2400      	movs	r4, #0
 8017d7c:	4625      	mov	r5, r4
 8017d7e:	e7e0      	b.n	8017d42 <__gethex+0x92>
 8017d80:	2d00      	cmp	r5, #0
 8017d82:	d1f7      	bne.n	8017d74 <__gethex+0xc4>
 8017d84:	7833      	ldrb	r3, [r6, #0]
 8017d86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017d8a:	2b50      	cmp	r3, #80	; 0x50
 8017d8c:	d13b      	bne.n	8017e06 <__gethex+0x156>
 8017d8e:	7873      	ldrb	r3, [r6, #1]
 8017d90:	2b2b      	cmp	r3, #43	; 0x2b
 8017d92:	d02c      	beq.n	8017dee <__gethex+0x13e>
 8017d94:	2b2d      	cmp	r3, #45	; 0x2d
 8017d96:	d02e      	beq.n	8017df6 <__gethex+0x146>
 8017d98:	1c71      	adds	r1, r6, #1
 8017d9a:	f04f 0900 	mov.w	r9, #0
 8017d9e:	7808      	ldrb	r0, [r1, #0]
 8017da0:	f7ff ff70 	bl	8017c84 <__hexdig_fun>
 8017da4:	1e43      	subs	r3, r0, #1
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	2b18      	cmp	r3, #24
 8017daa:	d82c      	bhi.n	8017e06 <__gethex+0x156>
 8017dac:	f1a0 0210 	sub.w	r2, r0, #16
 8017db0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017db4:	f7ff ff66 	bl	8017c84 <__hexdig_fun>
 8017db8:	1e43      	subs	r3, r0, #1
 8017dba:	b2db      	uxtb	r3, r3
 8017dbc:	2b18      	cmp	r3, #24
 8017dbe:	d91d      	bls.n	8017dfc <__gethex+0x14c>
 8017dc0:	f1b9 0f00 	cmp.w	r9, #0
 8017dc4:	d000      	beq.n	8017dc8 <__gethex+0x118>
 8017dc6:	4252      	negs	r2, r2
 8017dc8:	4415      	add	r5, r2
 8017dca:	f8cb 1000 	str.w	r1, [fp]
 8017dce:	b1e4      	cbz	r4, 8017e0a <__gethex+0x15a>
 8017dd0:	9b00      	ldr	r3, [sp, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	bf14      	ite	ne
 8017dd6:	2700      	movne	r7, #0
 8017dd8:	2706      	moveq	r7, #6
 8017dda:	4638      	mov	r0, r7
 8017ddc:	b009      	add	sp, #36	; 0x24
 8017dde:	ecbd 8b02 	vpop	{d8}
 8017de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de6:	463e      	mov	r6, r7
 8017de8:	4625      	mov	r5, r4
 8017dea:	2401      	movs	r4, #1
 8017dec:	e7ca      	b.n	8017d84 <__gethex+0xd4>
 8017dee:	f04f 0900 	mov.w	r9, #0
 8017df2:	1cb1      	adds	r1, r6, #2
 8017df4:	e7d3      	b.n	8017d9e <__gethex+0xee>
 8017df6:	f04f 0901 	mov.w	r9, #1
 8017dfa:	e7fa      	b.n	8017df2 <__gethex+0x142>
 8017dfc:	230a      	movs	r3, #10
 8017dfe:	fb03 0202 	mla	r2, r3, r2, r0
 8017e02:	3a10      	subs	r2, #16
 8017e04:	e7d4      	b.n	8017db0 <__gethex+0x100>
 8017e06:	4631      	mov	r1, r6
 8017e08:	e7df      	b.n	8017dca <__gethex+0x11a>
 8017e0a:	1bf3      	subs	r3, r6, r7
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	4621      	mov	r1, r4
 8017e10:	2b07      	cmp	r3, #7
 8017e12:	dc0b      	bgt.n	8017e2c <__gethex+0x17c>
 8017e14:	ee18 0a10 	vmov	r0, s16
 8017e18:	f000 fa82 	bl	8018320 <_Balloc>
 8017e1c:	4604      	mov	r4, r0
 8017e1e:	b940      	cbnz	r0, 8017e32 <__gethex+0x182>
 8017e20:	4b65      	ldr	r3, [pc, #404]	; (8017fb8 <__gethex+0x308>)
 8017e22:	4602      	mov	r2, r0
 8017e24:	21de      	movs	r1, #222	; 0xde
 8017e26:	4865      	ldr	r0, [pc, #404]	; (8017fbc <__gethex+0x30c>)
 8017e28:	f001 f9a2 	bl	8019170 <__assert_func>
 8017e2c:	3101      	adds	r1, #1
 8017e2e:	105b      	asrs	r3, r3, #1
 8017e30:	e7ee      	b.n	8017e10 <__gethex+0x160>
 8017e32:	f100 0914 	add.w	r9, r0, #20
 8017e36:	f04f 0b00 	mov.w	fp, #0
 8017e3a:	f1ca 0301 	rsb	r3, sl, #1
 8017e3e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e42:	f8cd b000 	str.w	fp, [sp]
 8017e46:	9306      	str	r3, [sp, #24]
 8017e48:	42b7      	cmp	r7, r6
 8017e4a:	d340      	bcc.n	8017ece <__gethex+0x21e>
 8017e4c:	9802      	ldr	r0, [sp, #8]
 8017e4e:	9b00      	ldr	r3, [sp, #0]
 8017e50:	f840 3b04 	str.w	r3, [r0], #4
 8017e54:	eba0 0009 	sub.w	r0, r0, r9
 8017e58:	1080      	asrs	r0, r0, #2
 8017e5a:	0146      	lsls	r6, r0, #5
 8017e5c:	6120      	str	r0, [r4, #16]
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f000 fb54 	bl	801850c <__hi0bits>
 8017e64:	1a30      	subs	r0, r6, r0
 8017e66:	f8d8 6000 	ldr.w	r6, [r8]
 8017e6a:	42b0      	cmp	r0, r6
 8017e6c:	dd63      	ble.n	8017f36 <__gethex+0x286>
 8017e6e:	1b87      	subs	r7, r0, r6
 8017e70:	4639      	mov	r1, r7
 8017e72:	4620      	mov	r0, r4
 8017e74:	f000 feee 	bl	8018c54 <__any_on>
 8017e78:	4682      	mov	sl, r0
 8017e7a:	b1a8      	cbz	r0, 8017ea8 <__gethex+0x1f8>
 8017e7c:	1e7b      	subs	r3, r7, #1
 8017e7e:	1159      	asrs	r1, r3, #5
 8017e80:	f003 021f 	and.w	r2, r3, #31
 8017e84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017e88:	f04f 0a01 	mov.w	sl, #1
 8017e8c:	fa0a f202 	lsl.w	r2, sl, r2
 8017e90:	420a      	tst	r2, r1
 8017e92:	d009      	beq.n	8017ea8 <__gethex+0x1f8>
 8017e94:	4553      	cmp	r3, sl
 8017e96:	dd05      	ble.n	8017ea4 <__gethex+0x1f4>
 8017e98:	1eb9      	subs	r1, r7, #2
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	f000 feda 	bl	8018c54 <__any_on>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d145      	bne.n	8017f30 <__gethex+0x280>
 8017ea4:	f04f 0a02 	mov.w	sl, #2
 8017ea8:	4639      	mov	r1, r7
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f7ff fe98 	bl	8017be0 <rshift>
 8017eb0:	443d      	add	r5, r7
 8017eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017eb6:	42ab      	cmp	r3, r5
 8017eb8:	da4c      	bge.n	8017f54 <__gethex+0x2a4>
 8017eba:	ee18 0a10 	vmov	r0, s16
 8017ebe:	4621      	mov	r1, r4
 8017ec0:	f000 fa6e 	bl	80183a0 <_Bfree>
 8017ec4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	6013      	str	r3, [r2, #0]
 8017eca:	27a3      	movs	r7, #163	; 0xa3
 8017ecc:	e785      	b.n	8017dda <__gethex+0x12a>
 8017ece:	1e73      	subs	r3, r6, #1
 8017ed0:	9a05      	ldr	r2, [sp, #20]
 8017ed2:	9303      	str	r3, [sp, #12]
 8017ed4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017ed8:	4293      	cmp	r3, r2
 8017eda:	d019      	beq.n	8017f10 <__gethex+0x260>
 8017edc:	f1bb 0f20 	cmp.w	fp, #32
 8017ee0:	d107      	bne.n	8017ef2 <__gethex+0x242>
 8017ee2:	9b02      	ldr	r3, [sp, #8]
 8017ee4:	9a00      	ldr	r2, [sp, #0]
 8017ee6:	f843 2b04 	str.w	r2, [r3], #4
 8017eea:	9302      	str	r3, [sp, #8]
 8017eec:	2300      	movs	r3, #0
 8017eee:	9300      	str	r3, [sp, #0]
 8017ef0:	469b      	mov	fp, r3
 8017ef2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017ef6:	f7ff fec5 	bl	8017c84 <__hexdig_fun>
 8017efa:	9b00      	ldr	r3, [sp, #0]
 8017efc:	f000 000f 	and.w	r0, r0, #15
 8017f00:	fa00 f00b 	lsl.w	r0, r0, fp
 8017f04:	4303      	orrs	r3, r0
 8017f06:	9300      	str	r3, [sp, #0]
 8017f08:	f10b 0b04 	add.w	fp, fp, #4
 8017f0c:	9b03      	ldr	r3, [sp, #12]
 8017f0e:	e00d      	b.n	8017f2c <__gethex+0x27c>
 8017f10:	9b03      	ldr	r3, [sp, #12]
 8017f12:	9a06      	ldr	r2, [sp, #24]
 8017f14:	4413      	add	r3, r2
 8017f16:	42bb      	cmp	r3, r7
 8017f18:	d3e0      	bcc.n	8017edc <__gethex+0x22c>
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	9901      	ldr	r1, [sp, #4]
 8017f1e:	9307      	str	r3, [sp, #28]
 8017f20:	4652      	mov	r2, sl
 8017f22:	f001 f906 	bl	8019132 <strncmp>
 8017f26:	9b07      	ldr	r3, [sp, #28]
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d1d7      	bne.n	8017edc <__gethex+0x22c>
 8017f2c:	461e      	mov	r6, r3
 8017f2e:	e78b      	b.n	8017e48 <__gethex+0x198>
 8017f30:	f04f 0a03 	mov.w	sl, #3
 8017f34:	e7b8      	b.n	8017ea8 <__gethex+0x1f8>
 8017f36:	da0a      	bge.n	8017f4e <__gethex+0x29e>
 8017f38:	1a37      	subs	r7, r6, r0
 8017f3a:	4621      	mov	r1, r4
 8017f3c:	ee18 0a10 	vmov	r0, s16
 8017f40:	463a      	mov	r2, r7
 8017f42:	f000 fc49 	bl	80187d8 <__lshift>
 8017f46:	1bed      	subs	r5, r5, r7
 8017f48:	4604      	mov	r4, r0
 8017f4a:	f100 0914 	add.w	r9, r0, #20
 8017f4e:	f04f 0a00 	mov.w	sl, #0
 8017f52:	e7ae      	b.n	8017eb2 <__gethex+0x202>
 8017f54:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017f58:	42a8      	cmp	r0, r5
 8017f5a:	dd72      	ble.n	8018042 <__gethex+0x392>
 8017f5c:	1b45      	subs	r5, r0, r5
 8017f5e:	42ae      	cmp	r6, r5
 8017f60:	dc36      	bgt.n	8017fd0 <__gethex+0x320>
 8017f62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f66:	2b02      	cmp	r3, #2
 8017f68:	d02a      	beq.n	8017fc0 <__gethex+0x310>
 8017f6a:	2b03      	cmp	r3, #3
 8017f6c:	d02c      	beq.n	8017fc8 <__gethex+0x318>
 8017f6e:	2b01      	cmp	r3, #1
 8017f70:	d115      	bne.n	8017f9e <__gethex+0x2ee>
 8017f72:	42ae      	cmp	r6, r5
 8017f74:	d113      	bne.n	8017f9e <__gethex+0x2ee>
 8017f76:	2e01      	cmp	r6, #1
 8017f78:	d10b      	bne.n	8017f92 <__gethex+0x2e2>
 8017f7a:	9a04      	ldr	r2, [sp, #16]
 8017f7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f80:	6013      	str	r3, [r2, #0]
 8017f82:	2301      	movs	r3, #1
 8017f84:	6123      	str	r3, [r4, #16]
 8017f86:	f8c9 3000 	str.w	r3, [r9]
 8017f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f8c:	2762      	movs	r7, #98	; 0x62
 8017f8e:	601c      	str	r4, [r3, #0]
 8017f90:	e723      	b.n	8017dda <__gethex+0x12a>
 8017f92:	1e71      	subs	r1, r6, #1
 8017f94:	4620      	mov	r0, r4
 8017f96:	f000 fe5d 	bl	8018c54 <__any_on>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d1ed      	bne.n	8017f7a <__gethex+0x2ca>
 8017f9e:	ee18 0a10 	vmov	r0, s16
 8017fa2:	4621      	mov	r1, r4
 8017fa4:	f000 f9fc 	bl	80183a0 <_Bfree>
 8017fa8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017faa:	2300      	movs	r3, #0
 8017fac:	6013      	str	r3, [r2, #0]
 8017fae:	2750      	movs	r7, #80	; 0x50
 8017fb0:	e713      	b.n	8017dda <__gethex+0x12a>
 8017fb2:	bf00      	nop
 8017fb4:	0801aee0 	.word	0x0801aee0
 8017fb8:	0801ae64 	.word	0x0801ae64
 8017fbc:	0801ae75 	.word	0x0801ae75
 8017fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d1eb      	bne.n	8017f9e <__gethex+0x2ee>
 8017fc6:	e7d8      	b.n	8017f7a <__gethex+0x2ca>
 8017fc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d1d5      	bne.n	8017f7a <__gethex+0x2ca>
 8017fce:	e7e6      	b.n	8017f9e <__gethex+0x2ee>
 8017fd0:	1e6f      	subs	r7, r5, #1
 8017fd2:	f1ba 0f00 	cmp.w	sl, #0
 8017fd6:	d131      	bne.n	801803c <__gethex+0x38c>
 8017fd8:	b127      	cbz	r7, 8017fe4 <__gethex+0x334>
 8017fda:	4639      	mov	r1, r7
 8017fdc:	4620      	mov	r0, r4
 8017fde:	f000 fe39 	bl	8018c54 <__any_on>
 8017fe2:	4682      	mov	sl, r0
 8017fe4:	117b      	asrs	r3, r7, #5
 8017fe6:	2101      	movs	r1, #1
 8017fe8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017fec:	f007 071f 	and.w	r7, r7, #31
 8017ff0:	fa01 f707 	lsl.w	r7, r1, r7
 8017ff4:	421f      	tst	r7, r3
 8017ff6:	4629      	mov	r1, r5
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	bf18      	it	ne
 8017ffc:	f04a 0a02 	orrne.w	sl, sl, #2
 8018000:	1b76      	subs	r6, r6, r5
 8018002:	f7ff fded 	bl	8017be0 <rshift>
 8018006:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801800a:	2702      	movs	r7, #2
 801800c:	f1ba 0f00 	cmp.w	sl, #0
 8018010:	d048      	beq.n	80180a4 <__gethex+0x3f4>
 8018012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018016:	2b02      	cmp	r3, #2
 8018018:	d015      	beq.n	8018046 <__gethex+0x396>
 801801a:	2b03      	cmp	r3, #3
 801801c:	d017      	beq.n	801804e <__gethex+0x39e>
 801801e:	2b01      	cmp	r3, #1
 8018020:	d109      	bne.n	8018036 <__gethex+0x386>
 8018022:	f01a 0f02 	tst.w	sl, #2
 8018026:	d006      	beq.n	8018036 <__gethex+0x386>
 8018028:	f8d9 0000 	ldr.w	r0, [r9]
 801802c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018030:	f01a 0f01 	tst.w	sl, #1
 8018034:	d10e      	bne.n	8018054 <__gethex+0x3a4>
 8018036:	f047 0710 	orr.w	r7, r7, #16
 801803a:	e033      	b.n	80180a4 <__gethex+0x3f4>
 801803c:	f04f 0a01 	mov.w	sl, #1
 8018040:	e7d0      	b.n	8017fe4 <__gethex+0x334>
 8018042:	2701      	movs	r7, #1
 8018044:	e7e2      	b.n	801800c <__gethex+0x35c>
 8018046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018048:	f1c3 0301 	rsb	r3, r3, #1
 801804c:	9315      	str	r3, [sp, #84]	; 0x54
 801804e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018050:	2b00      	cmp	r3, #0
 8018052:	d0f0      	beq.n	8018036 <__gethex+0x386>
 8018054:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018058:	f104 0314 	add.w	r3, r4, #20
 801805c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018060:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018064:	f04f 0c00 	mov.w	ip, #0
 8018068:	4618      	mov	r0, r3
 801806a:	f853 2b04 	ldr.w	r2, [r3], #4
 801806e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8018072:	d01c      	beq.n	80180ae <__gethex+0x3fe>
 8018074:	3201      	adds	r2, #1
 8018076:	6002      	str	r2, [r0, #0]
 8018078:	2f02      	cmp	r7, #2
 801807a:	f104 0314 	add.w	r3, r4, #20
 801807e:	d13f      	bne.n	8018100 <__gethex+0x450>
 8018080:	f8d8 2000 	ldr.w	r2, [r8]
 8018084:	3a01      	subs	r2, #1
 8018086:	42b2      	cmp	r2, r6
 8018088:	d10a      	bne.n	80180a0 <__gethex+0x3f0>
 801808a:	1171      	asrs	r1, r6, #5
 801808c:	2201      	movs	r2, #1
 801808e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018092:	f006 061f 	and.w	r6, r6, #31
 8018096:	fa02 f606 	lsl.w	r6, r2, r6
 801809a:	421e      	tst	r6, r3
 801809c:	bf18      	it	ne
 801809e:	4617      	movne	r7, r2
 80180a0:	f047 0720 	orr.w	r7, r7, #32
 80180a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80180a6:	601c      	str	r4, [r3, #0]
 80180a8:	9b04      	ldr	r3, [sp, #16]
 80180aa:	601d      	str	r5, [r3, #0]
 80180ac:	e695      	b.n	8017dda <__gethex+0x12a>
 80180ae:	4299      	cmp	r1, r3
 80180b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80180b4:	d8d8      	bhi.n	8018068 <__gethex+0x3b8>
 80180b6:	68a3      	ldr	r3, [r4, #8]
 80180b8:	459b      	cmp	fp, r3
 80180ba:	db19      	blt.n	80180f0 <__gethex+0x440>
 80180bc:	6861      	ldr	r1, [r4, #4]
 80180be:	ee18 0a10 	vmov	r0, s16
 80180c2:	3101      	adds	r1, #1
 80180c4:	f000 f92c 	bl	8018320 <_Balloc>
 80180c8:	4681      	mov	r9, r0
 80180ca:	b918      	cbnz	r0, 80180d4 <__gethex+0x424>
 80180cc:	4b1a      	ldr	r3, [pc, #104]	; (8018138 <__gethex+0x488>)
 80180ce:	4602      	mov	r2, r0
 80180d0:	2184      	movs	r1, #132	; 0x84
 80180d2:	e6a8      	b.n	8017e26 <__gethex+0x176>
 80180d4:	6922      	ldr	r2, [r4, #16]
 80180d6:	3202      	adds	r2, #2
 80180d8:	f104 010c 	add.w	r1, r4, #12
 80180dc:	0092      	lsls	r2, r2, #2
 80180de:	300c      	adds	r0, #12
 80180e0:	f7fd f89e 	bl	8015220 <memcpy>
 80180e4:	4621      	mov	r1, r4
 80180e6:	ee18 0a10 	vmov	r0, s16
 80180ea:	f000 f959 	bl	80183a0 <_Bfree>
 80180ee:	464c      	mov	r4, r9
 80180f0:	6923      	ldr	r3, [r4, #16]
 80180f2:	1c5a      	adds	r2, r3, #1
 80180f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80180f8:	6122      	str	r2, [r4, #16]
 80180fa:	2201      	movs	r2, #1
 80180fc:	615a      	str	r2, [r3, #20]
 80180fe:	e7bb      	b.n	8018078 <__gethex+0x3c8>
 8018100:	6922      	ldr	r2, [r4, #16]
 8018102:	455a      	cmp	r2, fp
 8018104:	dd0b      	ble.n	801811e <__gethex+0x46e>
 8018106:	2101      	movs	r1, #1
 8018108:	4620      	mov	r0, r4
 801810a:	f7ff fd69 	bl	8017be0 <rshift>
 801810e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018112:	3501      	adds	r5, #1
 8018114:	42ab      	cmp	r3, r5
 8018116:	f6ff aed0 	blt.w	8017eba <__gethex+0x20a>
 801811a:	2701      	movs	r7, #1
 801811c:	e7c0      	b.n	80180a0 <__gethex+0x3f0>
 801811e:	f016 061f 	ands.w	r6, r6, #31
 8018122:	d0fa      	beq.n	801811a <__gethex+0x46a>
 8018124:	449a      	add	sl, r3
 8018126:	f1c6 0620 	rsb	r6, r6, #32
 801812a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801812e:	f000 f9ed 	bl	801850c <__hi0bits>
 8018132:	42b0      	cmp	r0, r6
 8018134:	dbe7      	blt.n	8018106 <__gethex+0x456>
 8018136:	e7f0      	b.n	801811a <__gethex+0x46a>
 8018138:	0801ae64 	.word	0x0801ae64

0801813c <L_shift>:
 801813c:	f1c2 0208 	rsb	r2, r2, #8
 8018140:	0092      	lsls	r2, r2, #2
 8018142:	b570      	push	{r4, r5, r6, lr}
 8018144:	f1c2 0620 	rsb	r6, r2, #32
 8018148:	6843      	ldr	r3, [r0, #4]
 801814a:	6804      	ldr	r4, [r0, #0]
 801814c:	fa03 f506 	lsl.w	r5, r3, r6
 8018150:	432c      	orrs	r4, r5
 8018152:	40d3      	lsrs	r3, r2
 8018154:	6004      	str	r4, [r0, #0]
 8018156:	f840 3f04 	str.w	r3, [r0, #4]!
 801815a:	4288      	cmp	r0, r1
 801815c:	d3f4      	bcc.n	8018148 <L_shift+0xc>
 801815e:	bd70      	pop	{r4, r5, r6, pc}

08018160 <__match>:
 8018160:	b530      	push	{r4, r5, lr}
 8018162:	6803      	ldr	r3, [r0, #0]
 8018164:	3301      	adds	r3, #1
 8018166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801816a:	b914      	cbnz	r4, 8018172 <__match+0x12>
 801816c:	6003      	str	r3, [r0, #0]
 801816e:	2001      	movs	r0, #1
 8018170:	bd30      	pop	{r4, r5, pc}
 8018172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018176:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801817a:	2d19      	cmp	r5, #25
 801817c:	bf98      	it	ls
 801817e:	3220      	addls	r2, #32
 8018180:	42a2      	cmp	r2, r4
 8018182:	d0f0      	beq.n	8018166 <__match+0x6>
 8018184:	2000      	movs	r0, #0
 8018186:	e7f3      	b.n	8018170 <__match+0x10>

08018188 <__hexnan>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	680b      	ldr	r3, [r1, #0]
 801818e:	6801      	ldr	r1, [r0, #0]
 8018190:	115e      	asrs	r6, r3, #5
 8018192:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018196:	f013 031f 	ands.w	r3, r3, #31
 801819a:	b087      	sub	sp, #28
 801819c:	bf18      	it	ne
 801819e:	3604      	addne	r6, #4
 80181a0:	2500      	movs	r5, #0
 80181a2:	1f37      	subs	r7, r6, #4
 80181a4:	4682      	mov	sl, r0
 80181a6:	4690      	mov	r8, r2
 80181a8:	9301      	str	r3, [sp, #4]
 80181aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80181ae:	46b9      	mov	r9, r7
 80181b0:	463c      	mov	r4, r7
 80181b2:	9502      	str	r5, [sp, #8]
 80181b4:	46ab      	mov	fp, r5
 80181b6:	784a      	ldrb	r2, [r1, #1]
 80181b8:	1c4b      	adds	r3, r1, #1
 80181ba:	9303      	str	r3, [sp, #12]
 80181bc:	b342      	cbz	r2, 8018210 <__hexnan+0x88>
 80181be:	4610      	mov	r0, r2
 80181c0:	9105      	str	r1, [sp, #20]
 80181c2:	9204      	str	r2, [sp, #16]
 80181c4:	f7ff fd5e 	bl	8017c84 <__hexdig_fun>
 80181c8:	2800      	cmp	r0, #0
 80181ca:	d14f      	bne.n	801826c <__hexnan+0xe4>
 80181cc:	9a04      	ldr	r2, [sp, #16]
 80181ce:	9905      	ldr	r1, [sp, #20]
 80181d0:	2a20      	cmp	r2, #32
 80181d2:	d818      	bhi.n	8018206 <__hexnan+0x7e>
 80181d4:	9b02      	ldr	r3, [sp, #8]
 80181d6:	459b      	cmp	fp, r3
 80181d8:	dd13      	ble.n	8018202 <__hexnan+0x7a>
 80181da:	454c      	cmp	r4, r9
 80181dc:	d206      	bcs.n	80181ec <__hexnan+0x64>
 80181de:	2d07      	cmp	r5, #7
 80181e0:	dc04      	bgt.n	80181ec <__hexnan+0x64>
 80181e2:	462a      	mov	r2, r5
 80181e4:	4649      	mov	r1, r9
 80181e6:	4620      	mov	r0, r4
 80181e8:	f7ff ffa8 	bl	801813c <L_shift>
 80181ec:	4544      	cmp	r4, r8
 80181ee:	d950      	bls.n	8018292 <__hexnan+0x10a>
 80181f0:	2300      	movs	r3, #0
 80181f2:	f1a4 0904 	sub.w	r9, r4, #4
 80181f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80181fa:	f8cd b008 	str.w	fp, [sp, #8]
 80181fe:	464c      	mov	r4, r9
 8018200:	461d      	mov	r5, r3
 8018202:	9903      	ldr	r1, [sp, #12]
 8018204:	e7d7      	b.n	80181b6 <__hexnan+0x2e>
 8018206:	2a29      	cmp	r2, #41	; 0x29
 8018208:	d156      	bne.n	80182b8 <__hexnan+0x130>
 801820a:	3102      	adds	r1, #2
 801820c:	f8ca 1000 	str.w	r1, [sl]
 8018210:	f1bb 0f00 	cmp.w	fp, #0
 8018214:	d050      	beq.n	80182b8 <__hexnan+0x130>
 8018216:	454c      	cmp	r4, r9
 8018218:	d206      	bcs.n	8018228 <__hexnan+0xa0>
 801821a:	2d07      	cmp	r5, #7
 801821c:	dc04      	bgt.n	8018228 <__hexnan+0xa0>
 801821e:	462a      	mov	r2, r5
 8018220:	4649      	mov	r1, r9
 8018222:	4620      	mov	r0, r4
 8018224:	f7ff ff8a 	bl	801813c <L_shift>
 8018228:	4544      	cmp	r4, r8
 801822a:	d934      	bls.n	8018296 <__hexnan+0x10e>
 801822c:	f1a8 0204 	sub.w	r2, r8, #4
 8018230:	4623      	mov	r3, r4
 8018232:	f853 1b04 	ldr.w	r1, [r3], #4
 8018236:	f842 1f04 	str.w	r1, [r2, #4]!
 801823a:	429f      	cmp	r7, r3
 801823c:	d2f9      	bcs.n	8018232 <__hexnan+0xaa>
 801823e:	1b3b      	subs	r3, r7, r4
 8018240:	f023 0303 	bic.w	r3, r3, #3
 8018244:	3304      	adds	r3, #4
 8018246:	3401      	adds	r4, #1
 8018248:	3e03      	subs	r6, #3
 801824a:	42b4      	cmp	r4, r6
 801824c:	bf88      	it	hi
 801824e:	2304      	movhi	r3, #4
 8018250:	4443      	add	r3, r8
 8018252:	2200      	movs	r2, #0
 8018254:	f843 2b04 	str.w	r2, [r3], #4
 8018258:	429f      	cmp	r7, r3
 801825a:	d2fb      	bcs.n	8018254 <__hexnan+0xcc>
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	b91b      	cbnz	r3, 8018268 <__hexnan+0xe0>
 8018260:	4547      	cmp	r7, r8
 8018262:	d127      	bne.n	80182b4 <__hexnan+0x12c>
 8018264:	2301      	movs	r3, #1
 8018266:	603b      	str	r3, [r7, #0]
 8018268:	2005      	movs	r0, #5
 801826a:	e026      	b.n	80182ba <__hexnan+0x132>
 801826c:	3501      	adds	r5, #1
 801826e:	2d08      	cmp	r5, #8
 8018270:	f10b 0b01 	add.w	fp, fp, #1
 8018274:	dd06      	ble.n	8018284 <__hexnan+0xfc>
 8018276:	4544      	cmp	r4, r8
 8018278:	d9c3      	bls.n	8018202 <__hexnan+0x7a>
 801827a:	2300      	movs	r3, #0
 801827c:	f844 3c04 	str.w	r3, [r4, #-4]
 8018280:	2501      	movs	r5, #1
 8018282:	3c04      	subs	r4, #4
 8018284:	6822      	ldr	r2, [r4, #0]
 8018286:	f000 000f 	and.w	r0, r0, #15
 801828a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801828e:	6022      	str	r2, [r4, #0]
 8018290:	e7b7      	b.n	8018202 <__hexnan+0x7a>
 8018292:	2508      	movs	r5, #8
 8018294:	e7b5      	b.n	8018202 <__hexnan+0x7a>
 8018296:	9b01      	ldr	r3, [sp, #4]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d0df      	beq.n	801825c <__hexnan+0xd4>
 801829c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80182a0:	f1c3 0320 	rsb	r3, r3, #32
 80182a4:	fa22 f303 	lsr.w	r3, r2, r3
 80182a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80182ac:	401a      	ands	r2, r3
 80182ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80182b2:	e7d3      	b.n	801825c <__hexnan+0xd4>
 80182b4:	3f04      	subs	r7, #4
 80182b6:	e7d1      	b.n	801825c <__hexnan+0xd4>
 80182b8:	2004      	movs	r0, #4
 80182ba:	b007      	add	sp, #28
 80182bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080182c0 <_localeconv_r>:
 80182c0:	4800      	ldr	r0, [pc, #0]	; (80182c4 <_localeconv_r+0x4>)
 80182c2:	4770      	bx	lr
 80182c4:	20000584 	.word	0x20000584

080182c8 <_lseek_r>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	4d07      	ldr	r5, [pc, #28]	; (80182e8 <_lseek_r+0x20>)
 80182cc:	4604      	mov	r4, r0
 80182ce:	4608      	mov	r0, r1
 80182d0:	4611      	mov	r1, r2
 80182d2:	2200      	movs	r2, #0
 80182d4:	602a      	str	r2, [r5, #0]
 80182d6:	461a      	mov	r2, r3
 80182d8:	f7f2 f84a 	bl	800a370 <_lseek>
 80182dc:	1c43      	adds	r3, r0, #1
 80182de:	d102      	bne.n	80182e6 <_lseek_r+0x1e>
 80182e0:	682b      	ldr	r3, [r5, #0]
 80182e2:	b103      	cbz	r3, 80182e6 <_lseek_r+0x1e>
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	bd38      	pop	{r3, r4, r5, pc}
 80182e8:	20008b30 	.word	0x20008b30

080182ec <malloc>:
 80182ec:	4b02      	ldr	r3, [pc, #8]	; (80182f8 <malloc+0xc>)
 80182ee:	4601      	mov	r1, r0
 80182f0:	6818      	ldr	r0, [r3, #0]
 80182f2:	f000 bd2f 	b.w	8018d54 <_malloc_r>
 80182f6:	bf00      	nop
 80182f8:	2000042c 	.word	0x2000042c

080182fc <__ascii_mbtowc>:
 80182fc:	b082      	sub	sp, #8
 80182fe:	b901      	cbnz	r1, 8018302 <__ascii_mbtowc+0x6>
 8018300:	a901      	add	r1, sp, #4
 8018302:	b142      	cbz	r2, 8018316 <__ascii_mbtowc+0x1a>
 8018304:	b14b      	cbz	r3, 801831a <__ascii_mbtowc+0x1e>
 8018306:	7813      	ldrb	r3, [r2, #0]
 8018308:	600b      	str	r3, [r1, #0]
 801830a:	7812      	ldrb	r2, [r2, #0]
 801830c:	1e10      	subs	r0, r2, #0
 801830e:	bf18      	it	ne
 8018310:	2001      	movne	r0, #1
 8018312:	b002      	add	sp, #8
 8018314:	4770      	bx	lr
 8018316:	4610      	mov	r0, r2
 8018318:	e7fb      	b.n	8018312 <__ascii_mbtowc+0x16>
 801831a:	f06f 0001 	mvn.w	r0, #1
 801831e:	e7f8      	b.n	8018312 <__ascii_mbtowc+0x16>

08018320 <_Balloc>:
 8018320:	b570      	push	{r4, r5, r6, lr}
 8018322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018324:	4604      	mov	r4, r0
 8018326:	460d      	mov	r5, r1
 8018328:	b976      	cbnz	r6, 8018348 <_Balloc+0x28>
 801832a:	2010      	movs	r0, #16
 801832c:	f7ff ffde 	bl	80182ec <malloc>
 8018330:	4602      	mov	r2, r0
 8018332:	6260      	str	r0, [r4, #36]	; 0x24
 8018334:	b920      	cbnz	r0, 8018340 <_Balloc+0x20>
 8018336:	4b18      	ldr	r3, [pc, #96]	; (8018398 <_Balloc+0x78>)
 8018338:	4818      	ldr	r0, [pc, #96]	; (801839c <_Balloc+0x7c>)
 801833a:	2166      	movs	r1, #102	; 0x66
 801833c:	f000 ff18 	bl	8019170 <__assert_func>
 8018340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018344:	6006      	str	r6, [r0, #0]
 8018346:	60c6      	str	r6, [r0, #12]
 8018348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801834a:	68f3      	ldr	r3, [r6, #12]
 801834c:	b183      	cbz	r3, 8018370 <_Balloc+0x50>
 801834e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018350:	68db      	ldr	r3, [r3, #12]
 8018352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018356:	b9b8      	cbnz	r0, 8018388 <_Balloc+0x68>
 8018358:	2101      	movs	r1, #1
 801835a:	fa01 f605 	lsl.w	r6, r1, r5
 801835e:	1d72      	adds	r2, r6, #5
 8018360:	0092      	lsls	r2, r2, #2
 8018362:	4620      	mov	r0, r4
 8018364:	f000 fc97 	bl	8018c96 <_calloc_r>
 8018368:	b160      	cbz	r0, 8018384 <_Balloc+0x64>
 801836a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801836e:	e00e      	b.n	801838e <_Balloc+0x6e>
 8018370:	2221      	movs	r2, #33	; 0x21
 8018372:	2104      	movs	r1, #4
 8018374:	4620      	mov	r0, r4
 8018376:	f000 fc8e 	bl	8018c96 <_calloc_r>
 801837a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801837c:	60f0      	str	r0, [r6, #12]
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d1e4      	bne.n	801834e <_Balloc+0x2e>
 8018384:	2000      	movs	r0, #0
 8018386:	bd70      	pop	{r4, r5, r6, pc}
 8018388:	6802      	ldr	r2, [r0, #0]
 801838a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801838e:	2300      	movs	r3, #0
 8018390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018394:	e7f7      	b.n	8018386 <_Balloc+0x66>
 8018396:	bf00      	nop
 8018398:	0801adee 	.word	0x0801adee
 801839c:	0801aef4 	.word	0x0801aef4

080183a0 <_Bfree>:
 80183a0:	b570      	push	{r4, r5, r6, lr}
 80183a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80183a4:	4605      	mov	r5, r0
 80183a6:	460c      	mov	r4, r1
 80183a8:	b976      	cbnz	r6, 80183c8 <_Bfree+0x28>
 80183aa:	2010      	movs	r0, #16
 80183ac:	f7ff ff9e 	bl	80182ec <malloc>
 80183b0:	4602      	mov	r2, r0
 80183b2:	6268      	str	r0, [r5, #36]	; 0x24
 80183b4:	b920      	cbnz	r0, 80183c0 <_Bfree+0x20>
 80183b6:	4b09      	ldr	r3, [pc, #36]	; (80183dc <_Bfree+0x3c>)
 80183b8:	4809      	ldr	r0, [pc, #36]	; (80183e0 <_Bfree+0x40>)
 80183ba:	218a      	movs	r1, #138	; 0x8a
 80183bc:	f000 fed8 	bl	8019170 <__assert_func>
 80183c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80183c4:	6006      	str	r6, [r0, #0]
 80183c6:	60c6      	str	r6, [r0, #12]
 80183c8:	b13c      	cbz	r4, 80183da <_Bfree+0x3a>
 80183ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183cc:	6862      	ldr	r2, [r4, #4]
 80183ce:	68db      	ldr	r3, [r3, #12]
 80183d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183d4:	6021      	str	r1, [r4, #0]
 80183d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183da:	bd70      	pop	{r4, r5, r6, pc}
 80183dc:	0801adee 	.word	0x0801adee
 80183e0:	0801aef4 	.word	0x0801aef4

080183e4 <__multadd>:
 80183e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183e8:	690e      	ldr	r6, [r1, #16]
 80183ea:	4607      	mov	r7, r0
 80183ec:	4698      	mov	r8, r3
 80183ee:	460c      	mov	r4, r1
 80183f0:	f101 0014 	add.w	r0, r1, #20
 80183f4:	2300      	movs	r3, #0
 80183f6:	6805      	ldr	r5, [r0, #0]
 80183f8:	b2a9      	uxth	r1, r5
 80183fa:	fb02 8101 	mla	r1, r2, r1, r8
 80183fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018402:	0c2d      	lsrs	r5, r5, #16
 8018404:	fb02 c505 	mla	r5, r2, r5, ip
 8018408:	b289      	uxth	r1, r1
 801840a:	3301      	adds	r3, #1
 801840c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018410:	429e      	cmp	r6, r3
 8018412:	f840 1b04 	str.w	r1, [r0], #4
 8018416:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801841a:	dcec      	bgt.n	80183f6 <__multadd+0x12>
 801841c:	f1b8 0f00 	cmp.w	r8, #0
 8018420:	d022      	beq.n	8018468 <__multadd+0x84>
 8018422:	68a3      	ldr	r3, [r4, #8]
 8018424:	42b3      	cmp	r3, r6
 8018426:	dc19      	bgt.n	801845c <__multadd+0x78>
 8018428:	6861      	ldr	r1, [r4, #4]
 801842a:	4638      	mov	r0, r7
 801842c:	3101      	adds	r1, #1
 801842e:	f7ff ff77 	bl	8018320 <_Balloc>
 8018432:	4605      	mov	r5, r0
 8018434:	b928      	cbnz	r0, 8018442 <__multadd+0x5e>
 8018436:	4602      	mov	r2, r0
 8018438:	4b0d      	ldr	r3, [pc, #52]	; (8018470 <__multadd+0x8c>)
 801843a:	480e      	ldr	r0, [pc, #56]	; (8018474 <__multadd+0x90>)
 801843c:	21b5      	movs	r1, #181	; 0xb5
 801843e:	f000 fe97 	bl	8019170 <__assert_func>
 8018442:	6922      	ldr	r2, [r4, #16]
 8018444:	3202      	adds	r2, #2
 8018446:	f104 010c 	add.w	r1, r4, #12
 801844a:	0092      	lsls	r2, r2, #2
 801844c:	300c      	adds	r0, #12
 801844e:	f7fc fee7 	bl	8015220 <memcpy>
 8018452:	4621      	mov	r1, r4
 8018454:	4638      	mov	r0, r7
 8018456:	f7ff ffa3 	bl	80183a0 <_Bfree>
 801845a:	462c      	mov	r4, r5
 801845c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018460:	3601      	adds	r6, #1
 8018462:	f8c3 8014 	str.w	r8, [r3, #20]
 8018466:	6126      	str	r6, [r4, #16]
 8018468:	4620      	mov	r0, r4
 801846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801846e:	bf00      	nop
 8018470:	0801ae64 	.word	0x0801ae64
 8018474:	0801aef4 	.word	0x0801aef4

08018478 <__s2b>:
 8018478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801847c:	460c      	mov	r4, r1
 801847e:	4615      	mov	r5, r2
 8018480:	461f      	mov	r7, r3
 8018482:	2209      	movs	r2, #9
 8018484:	3308      	adds	r3, #8
 8018486:	4606      	mov	r6, r0
 8018488:	fb93 f3f2 	sdiv	r3, r3, r2
 801848c:	2100      	movs	r1, #0
 801848e:	2201      	movs	r2, #1
 8018490:	429a      	cmp	r2, r3
 8018492:	db09      	blt.n	80184a8 <__s2b+0x30>
 8018494:	4630      	mov	r0, r6
 8018496:	f7ff ff43 	bl	8018320 <_Balloc>
 801849a:	b940      	cbnz	r0, 80184ae <__s2b+0x36>
 801849c:	4602      	mov	r2, r0
 801849e:	4b19      	ldr	r3, [pc, #100]	; (8018504 <__s2b+0x8c>)
 80184a0:	4819      	ldr	r0, [pc, #100]	; (8018508 <__s2b+0x90>)
 80184a2:	21ce      	movs	r1, #206	; 0xce
 80184a4:	f000 fe64 	bl	8019170 <__assert_func>
 80184a8:	0052      	lsls	r2, r2, #1
 80184aa:	3101      	adds	r1, #1
 80184ac:	e7f0      	b.n	8018490 <__s2b+0x18>
 80184ae:	9b08      	ldr	r3, [sp, #32]
 80184b0:	6143      	str	r3, [r0, #20]
 80184b2:	2d09      	cmp	r5, #9
 80184b4:	f04f 0301 	mov.w	r3, #1
 80184b8:	6103      	str	r3, [r0, #16]
 80184ba:	dd16      	ble.n	80184ea <__s2b+0x72>
 80184bc:	f104 0909 	add.w	r9, r4, #9
 80184c0:	46c8      	mov	r8, r9
 80184c2:	442c      	add	r4, r5
 80184c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80184c8:	4601      	mov	r1, r0
 80184ca:	3b30      	subs	r3, #48	; 0x30
 80184cc:	220a      	movs	r2, #10
 80184ce:	4630      	mov	r0, r6
 80184d0:	f7ff ff88 	bl	80183e4 <__multadd>
 80184d4:	45a0      	cmp	r8, r4
 80184d6:	d1f5      	bne.n	80184c4 <__s2b+0x4c>
 80184d8:	f1a5 0408 	sub.w	r4, r5, #8
 80184dc:	444c      	add	r4, r9
 80184de:	1b2d      	subs	r5, r5, r4
 80184e0:	1963      	adds	r3, r4, r5
 80184e2:	42bb      	cmp	r3, r7
 80184e4:	db04      	blt.n	80184f0 <__s2b+0x78>
 80184e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184ea:	340a      	adds	r4, #10
 80184ec:	2509      	movs	r5, #9
 80184ee:	e7f6      	b.n	80184de <__s2b+0x66>
 80184f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80184f4:	4601      	mov	r1, r0
 80184f6:	3b30      	subs	r3, #48	; 0x30
 80184f8:	220a      	movs	r2, #10
 80184fa:	4630      	mov	r0, r6
 80184fc:	f7ff ff72 	bl	80183e4 <__multadd>
 8018500:	e7ee      	b.n	80184e0 <__s2b+0x68>
 8018502:	bf00      	nop
 8018504:	0801ae64 	.word	0x0801ae64
 8018508:	0801aef4 	.word	0x0801aef4

0801850c <__hi0bits>:
 801850c:	0c03      	lsrs	r3, r0, #16
 801850e:	041b      	lsls	r3, r3, #16
 8018510:	b9d3      	cbnz	r3, 8018548 <__hi0bits+0x3c>
 8018512:	0400      	lsls	r0, r0, #16
 8018514:	2310      	movs	r3, #16
 8018516:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801851a:	bf04      	itt	eq
 801851c:	0200      	lsleq	r0, r0, #8
 801851e:	3308      	addeq	r3, #8
 8018520:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018524:	bf04      	itt	eq
 8018526:	0100      	lsleq	r0, r0, #4
 8018528:	3304      	addeq	r3, #4
 801852a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801852e:	bf04      	itt	eq
 8018530:	0080      	lsleq	r0, r0, #2
 8018532:	3302      	addeq	r3, #2
 8018534:	2800      	cmp	r0, #0
 8018536:	db05      	blt.n	8018544 <__hi0bits+0x38>
 8018538:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801853c:	f103 0301 	add.w	r3, r3, #1
 8018540:	bf08      	it	eq
 8018542:	2320      	moveq	r3, #32
 8018544:	4618      	mov	r0, r3
 8018546:	4770      	bx	lr
 8018548:	2300      	movs	r3, #0
 801854a:	e7e4      	b.n	8018516 <__hi0bits+0xa>

0801854c <__lo0bits>:
 801854c:	6803      	ldr	r3, [r0, #0]
 801854e:	f013 0207 	ands.w	r2, r3, #7
 8018552:	4601      	mov	r1, r0
 8018554:	d00b      	beq.n	801856e <__lo0bits+0x22>
 8018556:	07da      	lsls	r2, r3, #31
 8018558:	d424      	bmi.n	80185a4 <__lo0bits+0x58>
 801855a:	0798      	lsls	r0, r3, #30
 801855c:	bf49      	itett	mi
 801855e:	085b      	lsrmi	r3, r3, #1
 8018560:	089b      	lsrpl	r3, r3, #2
 8018562:	2001      	movmi	r0, #1
 8018564:	600b      	strmi	r3, [r1, #0]
 8018566:	bf5c      	itt	pl
 8018568:	600b      	strpl	r3, [r1, #0]
 801856a:	2002      	movpl	r0, #2
 801856c:	4770      	bx	lr
 801856e:	b298      	uxth	r0, r3
 8018570:	b9b0      	cbnz	r0, 80185a0 <__lo0bits+0x54>
 8018572:	0c1b      	lsrs	r3, r3, #16
 8018574:	2010      	movs	r0, #16
 8018576:	f013 0fff 	tst.w	r3, #255	; 0xff
 801857a:	bf04      	itt	eq
 801857c:	0a1b      	lsreq	r3, r3, #8
 801857e:	3008      	addeq	r0, #8
 8018580:	071a      	lsls	r2, r3, #28
 8018582:	bf04      	itt	eq
 8018584:	091b      	lsreq	r3, r3, #4
 8018586:	3004      	addeq	r0, #4
 8018588:	079a      	lsls	r2, r3, #30
 801858a:	bf04      	itt	eq
 801858c:	089b      	lsreq	r3, r3, #2
 801858e:	3002      	addeq	r0, #2
 8018590:	07da      	lsls	r2, r3, #31
 8018592:	d403      	bmi.n	801859c <__lo0bits+0x50>
 8018594:	085b      	lsrs	r3, r3, #1
 8018596:	f100 0001 	add.w	r0, r0, #1
 801859a:	d005      	beq.n	80185a8 <__lo0bits+0x5c>
 801859c:	600b      	str	r3, [r1, #0]
 801859e:	4770      	bx	lr
 80185a0:	4610      	mov	r0, r2
 80185a2:	e7e8      	b.n	8018576 <__lo0bits+0x2a>
 80185a4:	2000      	movs	r0, #0
 80185a6:	4770      	bx	lr
 80185a8:	2020      	movs	r0, #32
 80185aa:	4770      	bx	lr

080185ac <__i2b>:
 80185ac:	b510      	push	{r4, lr}
 80185ae:	460c      	mov	r4, r1
 80185b0:	2101      	movs	r1, #1
 80185b2:	f7ff feb5 	bl	8018320 <_Balloc>
 80185b6:	4602      	mov	r2, r0
 80185b8:	b928      	cbnz	r0, 80185c6 <__i2b+0x1a>
 80185ba:	4b05      	ldr	r3, [pc, #20]	; (80185d0 <__i2b+0x24>)
 80185bc:	4805      	ldr	r0, [pc, #20]	; (80185d4 <__i2b+0x28>)
 80185be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80185c2:	f000 fdd5 	bl	8019170 <__assert_func>
 80185c6:	2301      	movs	r3, #1
 80185c8:	6144      	str	r4, [r0, #20]
 80185ca:	6103      	str	r3, [r0, #16]
 80185cc:	bd10      	pop	{r4, pc}
 80185ce:	bf00      	nop
 80185d0:	0801ae64 	.word	0x0801ae64
 80185d4:	0801aef4 	.word	0x0801aef4

080185d8 <__multiply>:
 80185d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185dc:	4614      	mov	r4, r2
 80185de:	690a      	ldr	r2, [r1, #16]
 80185e0:	6923      	ldr	r3, [r4, #16]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	bfb8      	it	lt
 80185e6:	460b      	movlt	r3, r1
 80185e8:	460d      	mov	r5, r1
 80185ea:	bfbc      	itt	lt
 80185ec:	4625      	movlt	r5, r4
 80185ee:	461c      	movlt	r4, r3
 80185f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80185f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80185f8:	68ab      	ldr	r3, [r5, #8]
 80185fa:	6869      	ldr	r1, [r5, #4]
 80185fc:	eb0a 0709 	add.w	r7, sl, r9
 8018600:	42bb      	cmp	r3, r7
 8018602:	b085      	sub	sp, #20
 8018604:	bfb8      	it	lt
 8018606:	3101      	addlt	r1, #1
 8018608:	f7ff fe8a 	bl	8018320 <_Balloc>
 801860c:	b930      	cbnz	r0, 801861c <__multiply+0x44>
 801860e:	4602      	mov	r2, r0
 8018610:	4b42      	ldr	r3, [pc, #264]	; (801871c <__multiply+0x144>)
 8018612:	4843      	ldr	r0, [pc, #268]	; (8018720 <__multiply+0x148>)
 8018614:	f240 115d 	movw	r1, #349	; 0x15d
 8018618:	f000 fdaa 	bl	8019170 <__assert_func>
 801861c:	f100 0614 	add.w	r6, r0, #20
 8018620:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018624:	4633      	mov	r3, r6
 8018626:	2200      	movs	r2, #0
 8018628:	4543      	cmp	r3, r8
 801862a:	d31e      	bcc.n	801866a <__multiply+0x92>
 801862c:	f105 0c14 	add.w	ip, r5, #20
 8018630:	f104 0314 	add.w	r3, r4, #20
 8018634:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018638:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801863c:	9202      	str	r2, [sp, #8]
 801863e:	ebac 0205 	sub.w	r2, ip, r5
 8018642:	3a15      	subs	r2, #21
 8018644:	f022 0203 	bic.w	r2, r2, #3
 8018648:	3204      	adds	r2, #4
 801864a:	f105 0115 	add.w	r1, r5, #21
 801864e:	458c      	cmp	ip, r1
 8018650:	bf38      	it	cc
 8018652:	2204      	movcc	r2, #4
 8018654:	9201      	str	r2, [sp, #4]
 8018656:	9a02      	ldr	r2, [sp, #8]
 8018658:	9303      	str	r3, [sp, #12]
 801865a:	429a      	cmp	r2, r3
 801865c:	d808      	bhi.n	8018670 <__multiply+0x98>
 801865e:	2f00      	cmp	r7, #0
 8018660:	dc55      	bgt.n	801870e <__multiply+0x136>
 8018662:	6107      	str	r7, [r0, #16]
 8018664:	b005      	add	sp, #20
 8018666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801866a:	f843 2b04 	str.w	r2, [r3], #4
 801866e:	e7db      	b.n	8018628 <__multiply+0x50>
 8018670:	f8b3 a000 	ldrh.w	sl, [r3]
 8018674:	f1ba 0f00 	cmp.w	sl, #0
 8018678:	d020      	beq.n	80186bc <__multiply+0xe4>
 801867a:	f105 0e14 	add.w	lr, r5, #20
 801867e:	46b1      	mov	r9, r6
 8018680:	2200      	movs	r2, #0
 8018682:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018686:	f8d9 b000 	ldr.w	fp, [r9]
 801868a:	b2a1      	uxth	r1, r4
 801868c:	fa1f fb8b 	uxth.w	fp, fp
 8018690:	fb0a b101 	mla	r1, sl, r1, fp
 8018694:	4411      	add	r1, r2
 8018696:	f8d9 2000 	ldr.w	r2, [r9]
 801869a:	0c24      	lsrs	r4, r4, #16
 801869c:	0c12      	lsrs	r2, r2, #16
 801869e:	fb0a 2404 	mla	r4, sl, r4, r2
 80186a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80186a6:	b289      	uxth	r1, r1
 80186a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80186ac:	45f4      	cmp	ip, lr
 80186ae:	f849 1b04 	str.w	r1, [r9], #4
 80186b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80186b6:	d8e4      	bhi.n	8018682 <__multiply+0xaa>
 80186b8:	9901      	ldr	r1, [sp, #4]
 80186ba:	5072      	str	r2, [r6, r1]
 80186bc:	9a03      	ldr	r2, [sp, #12]
 80186be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80186c2:	3304      	adds	r3, #4
 80186c4:	f1b9 0f00 	cmp.w	r9, #0
 80186c8:	d01f      	beq.n	801870a <__multiply+0x132>
 80186ca:	6834      	ldr	r4, [r6, #0]
 80186cc:	f105 0114 	add.w	r1, r5, #20
 80186d0:	46b6      	mov	lr, r6
 80186d2:	f04f 0a00 	mov.w	sl, #0
 80186d6:	880a      	ldrh	r2, [r1, #0]
 80186d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80186dc:	fb09 b202 	mla	r2, r9, r2, fp
 80186e0:	4492      	add	sl, r2
 80186e2:	b2a4      	uxth	r4, r4
 80186e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80186e8:	f84e 4b04 	str.w	r4, [lr], #4
 80186ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80186f0:	f8be 2000 	ldrh.w	r2, [lr]
 80186f4:	0c24      	lsrs	r4, r4, #16
 80186f6:	fb09 2404 	mla	r4, r9, r4, r2
 80186fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80186fe:	458c      	cmp	ip, r1
 8018700:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018704:	d8e7      	bhi.n	80186d6 <__multiply+0xfe>
 8018706:	9a01      	ldr	r2, [sp, #4]
 8018708:	50b4      	str	r4, [r6, r2]
 801870a:	3604      	adds	r6, #4
 801870c:	e7a3      	b.n	8018656 <__multiply+0x7e>
 801870e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018712:	2b00      	cmp	r3, #0
 8018714:	d1a5      	bne.n	8018662 <__multiply+0x8a>
 8018716:	3f01      	subs	r7, #1
 8018718:	e7a1      	b.n	801865e <__multiply+0x86>
 801871a:	bf00      	nop
 801871c:	0801ae64 	.word	0x0801ae64
 8018720:	0801aef4 	.word	0x0801aef4

08018724 <__pow5mult>:
 8018724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018728:	4615      	mov	r5, r2
 801872a:	f012 0203 	ands.w	r2, r2, #3
 801872e:	4606      	mov	r6, r0
 8018730:	460f      	mov	r7, r1
 8018732:	d007      	beq.n	8018744 <__pow5mult+0x20>
 8018734:	4c25      	ldr	r4, [pc, #148]	; (80187cc <__pow5mult+0xa8>)
 8018736:	3a01      	subs	r2, #1
 8018738:	2300      	movs	r3, #0
 801873a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801873e:	f7ff fe51 	bl	80183e4 <__multadd>
 8018742:	4607      	mov	r7, r0
 8018744:	10ad      	asrs	r5, r5, #2
 8018746:	d03d      	beq.n	80187c4 <__pow5mult+0xa0>
 8018748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801874a:	b97c      	cbnz	r4, 801876c <__pow5mult+0x48>
 801874c:	2010      	movs	r0, #16
 801874e:	f7ff fdcd 	bl	80182ec <malloc>
 8018752:	4602      	mov	r2, r0
 8018754:	6270      	str	r0, [r6, #36]	; 0x24
 8018756:	b928      	cbnz	r0, 8018764 <__pow5mult+0x40>
 8018758:	4b1d      	ldr	r3, [pc, #116]	; (80187d0 <__pow5mult+0xac>)
 801875a:	481e      	ldr	r0, [pc, #120]	; (80187d4 <__pow5mult+0xb0>)
 801875c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018760:	f000 fd06 	bl	8019170 <__assert_func>
 8018764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018768:	6004      	str	r4, [r0, #0]
 801876a:	60c4      	str	r4, [r0, #12]
 801876c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018774:	b94c      	cbnz	r4, 801878a <__pow5mult+0x66>
 8018776:	f240 2171 	movw	r1, #625	; 0x271
 801877a:	4630      	mov	r0, r6
 801877c:	f7ff ff16 	bl	80185ac <__i2b>
 8018780:	2300      	movs	r3, #0
 8018782:	f8c8 0008 	str.w	r0, [r8, #8]
 8018786:	4604      	mov	r4, r0
 8018788:	6003      	str	r3, [r0, #0]
 801878a:	f04f 0900 	mov.w	r9, #0
 801878e:	07eb      	lsls	r3, r5, #31
 8018790:	d50a      	bpl.n	80187a8 <__pow5mult+0x84>
 8018792:	4639      	mov	r1, r7
 8018794:	4622      	mov	r2, r4
 8018796:	4630      	mov	r0, r6
 8018798:	f7ff ff1e 	bl	80185d8 <__multiply>
 801879c:	4639      	mov	r1, r7
 801879e:	4680      	mov	r8, r0
 80187a0:	4630      	mov	r0, r6
 80187a2:	f7ff fdfd 	bl	80183a0 <_Bfree>
 80187a6:	4647      	mov	r7, r8
 80187a8:	106d      	asrs	r5, r5, #1
 80187aa:	d00b      	beq.n	80187c4 <__pow5mult+0xa0>
 80187ac:	6820      	ldr	r0, [r4, #0]
 80187ae:	b938      	cbnz	r0, 80187c0 <__pow5mult+0x9c>
 80187b0:	4622      	mov	r2, r4
 80187b2:	4621      	mov	r1, r4
 80187b4:	4630      	mov	r0, r6
 80187b6:	f7ff ff0f 	bl	80185d8 <__multiply>
 80187ba:	6020      	str	r0, [r4, #0]
 80187bc:	f8c0 9000 	str.w	r9, [r0]
 80187c0:	4604      	mov	r4, r0
 80187c2:	e7e4      	b.n	801878e <__pow5mult+0x6a>
 80187c4:	4638      	mov	r0, r7
 80187c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187ca:	bf00      	nop
 80187cc:	0801b048 	.word	0x0801b048
 80187d0:	0801adee 	.word	0x0801adee
 80187d4:	0801aef4 	.word	0x0801aef4

080187d8 <__lshift>:
 80187d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187dc:	460c      	mov	r4, r1
 80187de:	6849      	ldr	r1, [r1, #4]
 80187e0:	6923      	ldr	r3, [r4, #16]
 80187e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80187e6:	68a3      	ldr	r3, [r4, #8]
 80187e8:	4607      	mov	r7, r0
 80187ea:	4691      	mov	r9, r2
 80187ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80187f0:	f108 0601 	add.w	r6, r8, #1
 80187f4:	42b3      	cmp	r3, r6
 80187f6:	db0b      	blt.n	8018810 <__lshift+0x38>
 80187f8:	4638      	mov	r0, r7
 80187fa:	f7ff fd91 	bl	8018320 <_Balloc>
 80187fe:	4605      	mov	r5, r0
 8018800:	b948      	cbnz	r0, 8018816 <__lshift+0x3e>
 8018802:	4602      	mov	r2, r0
 8018804:	4b28      	ldr	r3, [pc, #160]	; (80188a8 <__lshift+0xd0>)
 8018806:	4829      	ldr	r0, [pc, #164]	; (80188ac <__lshift+0xd4>)
 8018808:	f240 11d9 	movw	r1, #473	; 0x1d9
 801880c:	f000 fcb0 	bl	8019170 <__assert_func>
 8018810:	3101      	adds	r1, #1
 8018812:	005b      	lsls	r3, r3, #1
 8018814:	e7ee      	b.n	80187f4 <__lshift+0x1c>
 8018816:	2300      	movs	r3, #0
 8018818:	f100 0114 	add.w	r1, r0, #20
 801881c:	f100 0210 	add.w	r2, r0, #16
 8018820:	4618      	mov	r0, r3
 8018822:	4553      	cmp	r3, sl
 8018824:	db33      	blt.n	801888e <__lshift+0xb6>
 8018826:	6920      	ldr	r0, [r4, #16]
 8018828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801882c:	f104 0314 	add.w	r3, r4, #20
 8018830:	f019 091f 	ands.w	r9, r9, #31
 8018834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018838:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801883c:	d02b      	beq.n	8018896 <__lshift+0xbe>
 801883e:	f1c9 0e20 	rsb	lr, r9, #32
 8018842:	468a      	mov	sl, r1
 8018844:	2200      	movs	r2, #0
 8018846:	6818      	ldr	r0, [r3, #0]
 8018848:	fa00 f009 	lsl.w	r0, r0, r9
 801884c:	4302      	orrs	r2, r0
 801884e:	f84a 2b04 	str.w	r2, [sl], #4
 8018852:	f853 2b04 	ldr.w	r2, [r3], #4
 8018856:	459c      	cmp	ip, r3
 8018858:	fa22 f20e 	lsr.w	r2, r2, lr
 801885c:	d8f3      	bhi.n	8018846 <__lshift+0x6e>
 801885e:	ebac 0304 	sub.w	r3, ip, r4
 8018862:	3b15      	subs	r3, #21
 8018864:	f023 0303 	bic.w	r3, r3, #3
 8018868:	3304      	adds	r3, #4
 801886a:	f104 0015 	add.w	r0, r4, #21
 801886e:	4584      	cmp	ip, r0
 8018870:	bf38      	it	cc
 8018872:	2304      	movcc	r3, #4
 8018874:	50ca      	str	r2, [r1, r3]
 8018876:	b10a      	cbz	r2, 801887c <__lshift+0xa4>
 8018878:	f108 0602 	add.w	r6, r8, #2
 801887c:	3e01      	subs	r6, #1
 801887e:	4638      	mov	r0, r7
 8018880:	612e      	str	r6, [r5, #16]
 8018882:	4621      	mov	r1, r4
 8018884:	f7ff fd8c 	bl	80183a0 <_Bfree>
 8018888:	4628      	mov	r0, r5
 801888a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801888e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018892:	3301      	adds	r3, #1
 8018894:	e7c5      	b.n	8018822 <__lshift+0x4a>
 8018896:	3904      	subs	r1, #4
 8018898:	f853 2b04 	ldr.w	r2, [r3], #4
 801889c:	f841 2f04 	str.w	r2, [r1, #4]!
 80188a0:	459c      	cmp	ip, r3
 80188a2:	d8f9      	bhi.n	8018898 <__lshift+0xc0>
 80188a4:	e7ea      	b.n	801887c <__lshift+0xa4>
 80188a6:	bf00      	nop
 80188a8:	0801ae64 	.word	0x0801ae64
 80188ac:	0801aef4 	.word	0x0801aef4

080188b0 <__mcmp>:
 80188b0:	b530      	push	{r4, r5, lr}
 80188b2:	6902      	ldr	r2, [r0, #16]
 80188b4:	690c      	ldr	r4, [r1, #16]
 80188b6:	1b12      	subs	r2, r2, r4
 80188b8:	d10e      	bne.n	80188d8 <__mcmp+0x28>
 80188ba:	f100 0314 	add.w	r3, r0, #20
 80188be:	3114      	adds	r1, #20
 80188c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80188c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80188c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80188cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80188d0:	42a5      	cmp	r5, r4
 80188d2:	d003      	beq.n	80188dc <__mcmp+0x2c>
 80188d4:	d305      	bcc.n	80188e2 <__mcmp+0x32>
 80188d6:	2201      	movs	r2, #1
 80188d8:	4610      	mov	r0, r2
 80188da:	bd30      	pop	{r4, r5, pc}
 80188dc:	4283      	cmp	r3, r0
 80188de:	d3f3      	bcc.n	80188c8 <__mcmp+0x18>
 80188e0:	e7fa      	b.n	80188d8 <__mcmp+0x28>
 80188e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80188e6:	e7f7      	b.n	80188d8 <__mcmp+0x28>

080188e8 <__mdiff>:
 80188e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ec:	460c      	mov	r4, r1
 80188ee:	4606      	mov	r6, r0
 80188f0:	4611      	mov	r1, r2
 80188f2:	4620      	mov	r0, r4
 80188f4:	4617      	mov	r7, r2
 80188f6:	f7ff ffdb 	bl	80188b0 <__mcmp>
 80188fa:	1e05      	subs	r5, r0, #0
 80188fc:	d110      	bne.n	8018920 <__mdiff+0x38>
 80188fe:	4629      	mov	r1, r5
 8018900:	4630      	mov	r0, r6
 8018902:	f7ff fd0d 	bl	8018320 <_Balloc>
 8018906:	b930      	cbnz	r0, 8018916 <__mdiff+0x2e>
 8018908:	4b39      	ldr	r3, [pc, #228]	; (80189f0 <__mdiff+0x108>)
 801890a:	4602      	mov	r2, r0
 801890c:	f240 2132 	movw	r1, #562	; 0x232
 8018910:	4838      	ldr	r0, [pc, #224]	; (80189f4 <__mdiff+0x10c>)
 8018912:	f000 fc2d 	bl	8019170 <__assert_func>
 8018916:	2301      	movs	r3, #1
 8018918:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801891c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018920:	bfa4      	itt	ge
 8018922:	463b      	movge	r3, r7
 8018924:	4627      	movge	r7, r4
 8018926:	4630      	mov	r0, r6
 8018928:	6879      	ldr	r1, [r7, #4]
 801892a:	bfa6      	itte	ge
 801892c:	461c      	movge	r4, r3
 801892e:	2500      	movge	r5, #0
 8018930:	2501      	movlt	r5, #1
 8018932:	f7ff fcf5 	bl	8018320 <_Balloc>
 8018936:	b920      	cbnz	r0, 8018942 <__mdiff+0x5a>
 8018938:	4b2d      	ldr	r3, [pc, #180]	; (80189f0 <__mdiff+0x108>)
 801893a:	4602      	mov	r2, r0
 801893c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018940:	e7e6      	b.n	8018910 <__mdiff+0x28>
 8018942:	693e      	ldr	r6, [r7, #16]
 8018944:	60c5      	str	r5, [r0, #12]
 8018946:	6925      	ldr	r5, [r4, #16]
 8018948:	f107 0114 	add.w	r1, r7, #20
 801894c:	f104 0914 	add.w	r9, r4, #20
 8018950:	f100 0e14 	add.w	lr, r0, #20
 8018954:	f107 0210 	add.w	r2, r7, #16
 8018958:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801895c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018960:	46f2      	mov	sl, lr
 8018962:	2700      	movs	r7, #0
 8018964:	f859 3b04 	ldr.w	r3, [r9], #4
 8018968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801896c:	fa1f f883 	uxth.w	r8, r3
 8018970:	fa17 f78b 	uxtah	r7, r7, fp
 8018974:	0c1b      	lsrs	r3, r3, #16
 8018976:	eba7 0808 	sub.w	r8, r7, r8
 801897a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801897e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018982:	fa1f f888 	uxth.w	r8, r8
 8018986:	141f      	asrs	r7, r3, #16
 8018988:	454d      	cmp	r5, r9
 801898a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801898e:	f84a 3b04 	str.w	r3, [sl], #4
 8018992:	d8e7      	bhi.n	8018964 <__mdiff+0x7c>
 8018994:	1b2b      	subs	r3, r5, r4
 8018996:	3b15      	subs	r3, #21
 8018998:	f023 0303 	bic.w	r3, r3, #3
 801899c:	3304      	adds	r3, #4
 801899e:	3415      	adds	r4, #21
 80189a0:	42a5      	cmp	r5, r4
 80189a2:	bf38      	it	cc
 80189a4:	2304      	movcc	r3, #4
 80189a6:	4419      	add	r1, r3
 80189a8:	4473      	add	r3, lr
 80189aa:	469e      	mov	lr, r3
 80189ac:	460d      	mov	r5, r1
 80189ae:	4565      	cmp	r5, ip
 80189b0:	d30e      	bcc.n	80189d0 <__mdiff+0xe8>
 80189b2:	f10c 0203 	add.w	r2, ip, #3
 80189b6:	1a52      	subs	r2, r2, r1
 80189b8:	f022 0203 	bic.w	r2, r2, #3
 80189bc:	3903      	subs	r1, #3
 80189be:	458c      	cmp	ip, r1
 80189c0:	bf38      	it	cc
 80189c2:	2200      	movcc	r2, #0
 80189c4:	441a      	add	r2, r3
 80189c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80189ca:	b17b      	cbz	r3, 80189ec <__mdiff+0x104>
 80189cc:	6106      	str	r6, [r0, #16]
 80189ce:	e7a5      	b.n	801891c <__mdiff+0x34>
 80189d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80189d4:	fa17 f488 	uxtah	r4, r7, r8
 80189d8:	1422      	asrs	r2, r4, #16
 80189da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80189de:	b2a4      	uxth	r4, r4
 80189e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80189e4:	f84e 4b04 	str.w	r4, [lr], #4
 80189e8:	1417      	asrs	r7, r2, #16
 80189ea:	e7e0      	b.n	80189ae <__mdiff+0xc6>
 80189ec:	3e01      	subs	r6, #1
 80189ee:	e7ea      	b.n	80189c6 <__mdiff+0xde>
 80189f0:	0801ae64 	.word	0x0801ae64
 80189f4:	0801aef4 	.word	0x0801aef4

080189f8 <__ulp>:
 80189f8:	b082      	sub	sp, #8
 80189fa:	ed8d 0b00 	vstr	d0, [sp]
 80189fe:	9b01      	ldr	r3, [sp, #4]
 8018a00:	4912      	ldr	r1, [pc, #72]	; (8018a4c <__ulp+0x54>)
 8018a02:	4019      	ands	r1, r3
 8018a04:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018a08:	2900      	cmp	r1, #0
 8018a0a:	dd05      	ble.n	8018a18 <__ulp+0x20>
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	460b      	mov	r3, r1
 8018a10:	ec43 2b10 	vmov	d0, r2, r3
 8018a14:	b002      	add	sp, #8
 8018a16:	4770      	bx	lr
 8018a18:	4249      	negs	r1, r1
 8018a1a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018a1e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018a22:	f04f 0200 	mov.w	r2, #0
 8018a26:	f04f 0300 	mov.w	r3, #0
 8018a2a:	da04      	bge.n	8018a36 <__ulp+0x3e>
 8018a2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018a30:	fa41 f300 	asr.w	r3, r1, r0
 8018a34:	e7ec      	b.n	8018a10 <__ulp+0x18>
 8018a36:	f1a0 0114 	sub.w	r1, r0, #20
 8018a3a:	291e      	cmp	r1, #30
 8018a3c:	bfda      	itte	le
 8018a3e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018a42:	fa20 f101 	lsrle.w	r1, r0, r1
 8018a46:	2101      	movgt	r1, #1
 8018a48:	460a      	mov	r2, r1
 8018a4a:	e7e1      	b.n	8018a10 <__ulp+0x18>
 8018a4c:	7ff00000 	.word	0x7ff00000

08018a50 <__b2d>:
 8018a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a52:	6905      	ldr	r5, [r0, #16]
 8018a54:	f100 0714 	add.w	r7, r0, #20
 8018a58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018a5c:	1f2e      	subs	r6, r5, #4
 8018a5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018a62:	4620      	mov	r0, r4
 8018a64:	f7ff fd52 	bl	801850c <__hi0bits>
 8018a68:	f1c0 0320 	rsb	r3, r0, #32
 8018a6c:	280a      	cmp	r0, #10
 8018a6e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018aec <__b2d+0x9c>
 8018a72:	600b      	str	r3, [r1, #0]
 8018a74:	dc14      	bgt.n	8018aa0 <__b2d+0x50>
 8018a76:	f1c0 0e0b 	rsb	lr, r0, #11
 8018a7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018a7e:	42b7      	cmp	r7, r6
 8018a80:	ea41 030c 	orr.w	r3, r1, ip
 8018a84:	bf34      	ite	cc
 8018a86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018a8a:	2100      	movcs	r1, #0
 8018a8c:	3015      	adds	r0, #21
 8018a8e:	fa04 f000 	lsl.w	r0, r4, r0
 8018a92:	fa21 f10e 	lsr.w	r1, r1, lr
 8018a96:	ea40 0201 	orr.w	r2, r0, r1
 8018a9a:	ec43 2b10 	vmov	d0, r2, r3
 8018a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018aa0:	42b7      	cmp	r7, r6
 8018aa2:	bf3a      	itte	cc
 8018aa4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018aa8:	f1a5 0608 	subcc.w	r6, r5, #8
 8018aac:	2100      	movcs	r1, #0
 8018aae:	380b      	subs	r0, #11
 8018ab0:	d017      	beq.n	8018ae2 <__b2d+0x92>
 8018ab2:	f1c0 0c20 	rsb	ip, r0, #32
 8018ab6:	fa04 f500 	lsl.w	r5, r4, r0
 8018aba:	42be      	cmp	r6, r7
 8018abc:	fa21 f40c 	lsr.w	r4, r1, ip
 8018ac0:	ea45 0504 	orr.w	r5, r5, r4
 8018ac4:	bf8c      	ite	hi
 8018ac6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018aca:	2400      	movls	r4, #0
 8018acc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018ad0:	fa01 f000 	lsl.w	r0, r1, r0
 8018ad4:	fa24 f40c 	lsr.w	r4, r4, ip
 8018ad8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018adc:	ea40 0204 	orr.w	r2, r0, r4
 8018ae0:	e7db      	b.n	8018a9a <__b2d+0x4a>
 8018ae2:	ea44 030c 	orr.w	r3, r4, ip
 8018ae6:	460a      	mov	r2, r1
 8018ae8:	e7d7      	b.n	8018a9a <__b2d+0x4a>
 8018aea:	bf00      	nop
 8018aec:	3ff00000 	.word	0x3ff00000

08018af0 <__d2b>:
 8018af0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018af4:	4689      	mov	r9, r1
 8018af6:	2101      	movs	r1, #1
 8018af8:	ec57 6b10 	vmov	r6, r7, d0
 8018afc:	4690      	mov	r8, r2
 8018afe:	f7ff fc0f 	bl	8018320 <_Balloc>
 8018b02:	4604      	mov	r4, r0
 8018b04:	b930      	cbnz	r0, 8018b14 <__d2b+0x24>
 8018b06:	4602      	mov	r2, r0
 8018b08:	4b25      	ldr	r3, [pc, #148]	; (8018ba0 <__d2b+0xb0>)
 8018b0a:	4826      	ldr	r0, [pc, #152]	; (8018ba4 <__d2b+0xb4>)
 8018b0c:	f240 310a 	movw	r1, #778	; 0x30a
 8018b10:	f000 fb2e 	bl	8019170 <__assert_func>
 8018b14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018b18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018b1c:	bb35      	cbnz	r5, 8018b6c <__d2b+0x7c>
 8018b1e:	2e00      	cmp	r6, #0
 8018b20:	9301      	str	r3, [sp, #4]
 8018b22:	d028      	beq.n	8018b76 <__d2b+0x86>
 8018b24:	4668      	mov	r0, sp
 8018b26:	9600      	str	r6, [sp, #0]
 8018b28:	f7ff fd10 	bl	801854c <__lo0bits>
 8018b2c:	9900      	ldr	r1, [sp, #0]
 8018b2e:	b300      	cbz	r0, 8018b72 <__d2b+0x82>
 8018b30:	9a01      	ldr	r2, [sp, #4]
 8018b32:	f1c0 0320 	rsb	r3, r0, #32
 8018b36:	fa02 f303 	lsl.w	r3, r2, r3
 8018b3a:	430b      	orrs	r3, r1
 8018b3c:	40c2      	lsrs	r2, r0
 8018b3e:	6163      	str	r3, [r4, #20]
 8018b40:	9201      	str	r2, [sp, #4]
 8018b42:	9b01      	ldr	r3, [sp, #4]
 8018b44:	61a3      	str	r3, [r4, #24]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	bf14      	ite	ne
 8018b4a:	2202      	movne	r2, #2
 8018b4c:	2201      	moveq	r2, #1
 8018b4e:	6122      	str	r2, [r4, #16]
 8018b50:	b1d5      	cbz	r5, 8018b88 <__d2b+0x98>
 8018b52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018b56:	4405      	add	r5, r0
 8018b58:	f8c9 5000 	str.w	r5, [r9]
 8018b5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018b60:	f8c8 0000 	str.w	r0, [r8]
 8018b64:	4620      	mov	r0, r4
 8018b66:	b003      	add	sp, #12
 8018b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018b70:	e7d5      	b.n	8018b1e <__d2b+0x2e>
 8018b72:	6161      	str	r1, [r4, #20]
 8018b74:	e7e5      	b.n	8018b42 <__d2b+0x52>
 8018b76:	a801      	add	r0, sp, #4
 8018b78:	f7ff fce8 	bl	801854c <__lo0bits>
 8018b7c:	9b01      	ldr	r3, [sp, #4]
 8018b7e:	6163      	str	r3, [r4, #20]
 8018b80:	2201      	movs	r2, #1
 8018b82:	6122      	str	r2, [r4, #16]
 8018b84:	3020      	adds	r0, #32
 8018b86:	e7e3      	b.n	8018b50 <__d2b+0x60>
 8018b88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018b8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018b90:	f8c9 0000 	str.w	r0, [r9]
 8018b94:	6918      	ldr	r0, [r3, #16]
 8018b96:	f7ff fcb9 	bl	801850c <__hi0bits>
 8018b9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018b9e:	e7df      	b.n	8018b60 <__d2b+0x70>
 8018ba0:	0801ae64 	.word	0x0801ae64
 8018ba4:	0801aef4 	.word	0x0801aef4

08018ba8 <__ratio>:
 8018ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bac:	4688      	mov	r8, r1
 8018bae:	4669      	mov	r1, sp
 8018bb0:	4681      	mov	r9, r0
 8018bb2:	f7ff ff4d 	bl	8018a50 <__b2d>
 8018bb6:	a901      	add	r1, sp, #4
 8018bb8:	4640      	mov	r0, r8
 8018bba:	ec55 4b10 	vmov	r4, r5, d0
 8018bbe:	f7ff ff47 	bl	8018a50 <__b2d>
 8018bc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018bc6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018bca:	eba3 0c02 	sub.w	ip, r3, r2
 8018bce:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018bd2:	1a9b      	subs	r3, r3, r2
 8018bd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018bd8:	ec51 0b10 	vmov	r0, r1, d0
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	bfd6      	itet	le
 8018be0:	460a      	movle	r2, r1
 8018be2:	462a      	movgt	r2, r5
 8018be4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018be8:	468b      	mov	fp, r1
 8018bea:	462f      	mov	r7, r5
 8018bec:	bfd4      	ite	le
 8018bee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018bf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018bf6:	4620      	mov	r0, r4
 8018bf8:	ee10 2a10 	vmov	r2, s0
 8018bfc:	465b      	mov	r3, fp
 8018bfe:	4639      	mov	r1, r7
 8018c00:	f7e7 fe24 	bl	800084c <__aeabi_ddiv>
 8018c04:	ec41 0b10 	vmov	d0, r0, r1
 8018c08:	b003      	add	sp, #12
 8018c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018c0e <__copybits>:
 8018c0e:	3901      	subs	r1, #1
 8018c10:	b570      	push	{r4, r5, r6, lr}
 8018c12:	1149      	asrs	r1, r1, #5
 8018c14:	6914      	ldr	r4, [r2, #16]
 8018c16:	3101      	adds	r1, #1
 8018c18:	f102 0314 	add.w	r3, r2, #20
 8018c1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018c20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018c24:	1f05      	subs	r5, r0, #4
 8018c26:	42a3      	cmp	r3, r4
 8018c28:	d30c      	bcc.n	8018c44 <__copybits+0x36>
 8018c2a:	1aa3      	subs	r3, r4, r2
 8018c2c:	3b11      	subs	r3, #17
 8018c2e:	f023 0303 	bic.w	r3, r3, #3
 8018c32:	3211      	adds	r2, #17
 8018c34:	42a2      	cmp	r2, r4
 8018c36:	bf88      	it	hi
 8018c38:	2300      	movhi	r3, #0
 8018c3a:	4418      	add	r0, r3
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	4288      	cmp	r0, r1
 8018c40:	d305      	bcc.n	8018c4e <__copybits+0x40>
 8018c42:	bd70      	pop	{r4, r5, r6, pc}
 8018c44:	f853 6b04 	ldr.w	r6, [r3], #4
 8018c48:	f845 6f04 	str.w	r6, [r5, #4]!
 8018c4c:	e7eb      	b.n	8018c26 <__copybits+0x18>
 8018c4e:	f840 3b04 	str.w	r3, [r0], #4
 8018c52:	e7f4      	b.n	8018c3e <__copybits+0x30>

08018c54 <__any_on>:
 8018c54:	f100 0214 	add.w	r2, r0, #20
 8018c58:	6900      	ldr	r0, [r0, #16]
 8018c5a:	114b      	asrs	r3, r1, #5
 8018c5c:	4298      	cmp	r0, r3
 8018c5e:	b510      	push	{r4, lr}
 8018c60:	db11      	blt.n	8018c86 <__any_on+0x32>
 8018c62:	dd0a      	ble.n	8018c7a <__any_on+0x26>
 8018c64:	f011 011f 	ands.w	r1, r1, #31
 8018c68:	d007      	beq.n	8018c7a <__any_on+0x26>
 8018c6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018c6e:	fa24 f001 	lsr.w	r0, r4, r1
 8018c72:	fa00 f101 	lsl.w	r1, r0, r1
 8018c76:	428c      	cmp	r4, r1
 8018c78:	d10b      	bne.n	8018c92 <__any_on+0x3e>
 8018c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018c7e:	4293      	cmp	r3, r2
 8018c80:	d803      	bhi.n	8018c8a <__any_on+0x36>
 8018c82:	2000      	movs	r0, #0
 8018c84:	bd10      	pop	{r4, pc}
 8018c86:	4603      	mov	r3, r0
 8018c88:	e7f7      	b.n	8018c7a <__any_on+0x26>
 8018c8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018c8e:	2900      	cmp	r1, #0
 8018c90:	d0f5      	beq.n	8018c7e <__any_on+0x2a>
 8018c92:	2001      	movs	r0, #1
 8018c94:	e7f6      	b.n	8018c84 <__any_on+0x30>

08018c96 <_calloc_r>:
 8018c96:	b513      	push	{r0, r1, r4, lr}
 8018c98:	434a      	muls	r2, r1
 8018c9a:	4611      	mov	r1, r2
 8018c9c:	9201      	str	r2, [sp, #4]
 8018c9e:	f000 f859 	bl	8018d54 <_malloc_r>
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	b118      	cbz	r0, 8018cae <_calloc_r+0x18>
 8018ca6:	9a01      	ldr	r2, [sp, #4]
 8018ca8:	2100      	movs	r1, #0
 8018caa:	f7fc fac7 	bl	801523c <memset>
 8018cae:	4620      	mov	r0, r4
 8018cb0:	b002      	add	sp, #8
 8018cb2:	bd10      	pop	{r4, pc}

08018cb4 <_free_r>:
 8018cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cb6:	2900      	cmp	r1, #0
 8018cb8:	d048      	beq.n	8018d4c <_free_r+0x98>
 8018cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cbe:	9001      	str	r0, [sp, #4]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8018cc6:	bfb8      	it	lt
 8018cc8:	18e4      	addlt	r4, r4, r3
 8018cca:	f000 fc55 	bl	8019578 <__malloc_lock>
 8018cce:	4a20      	ldr	r2, [pc, #128]	; (8018d50 <_free_r+0x9c>)
 8018cd0:	9801      	ldr	r0, [sp, #4]
 8018cd2:	6813      	ldr	r3, [r2, #0]
 8018cd4:	4615      	mov	r5, r2
 8018cd6:	b933      	cbnz	r3, 8018ce6 <_free_r+0x32>
 8018cd8:	6063      	str	r3, [r4, #4]
 8018cda:	6014      	str	r4, [r2, #0]
 8018cdc:	b003      	add	sp, #12
 8018cde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ce2:	f000 bc4f 	b.w	8019584 <__malloc_unlock>
 8018ce6:	42a3      	cmp	r3, r4
 8018ce8:	d90b      	bls.n	8018d02 <_free_r+0x4e>
 8018cea:	6821      	ldr	r1, [r4, #0]
 8018cec:	1862      	adds	r2, r4, r1
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	bf04      	itt	eq
 8018cf2:	681a      	ldreq	r2, [r3, #0]
 8018cf4:	685b      	ldreq	r3, [r3, #4]
 8018cf6:	6063      	str	r3, [r4, #4]
 8018cf8:	bf04      	itt	eq
 8018cfa:	1852      	addeq	r2, r2, r1
 8018cfc:	6022      	streq	r2, [r4, #0]
 8018cfe:	602c      	str	r4, [r5, #0]
 8018d00:	e7ec      	b.n	8018cdc <_free_r+0x28>
 8018d02:	461a      	mov	r2, r3
 8018d04:	685b      	ldr	r3, [r3, #4]
 8018d06:	b10b      	cbz	r3, 8018d0c <_free_r+0x58>
 8018d08:	42a3      	cmp	r3, r4
 8018d0a:	d9fa      	bls.n	8018d02 <_free_r+0x4e>
 8018d0c:	6811      	ldr	r1, [r2, #0]
 8018d0e:	1855      	adds	r5, r2, r1
 8018d10:	42a5      	cmp	r5, r4
 8018d12:	d10b      	bne.n	8018d2c <_free_r+0x78>
 8018d14:	6824      	ldr	r4, [r4, #0]
 8018d16:	4421      	add	r1, r4
 8018d18:	1854      	adds	r4, r2, r1
 8018d1a:	42a3      	cmp	r3, r4
 8018d1c:	6011      	str	r1, [r2, #0]
 8018d1e:	d1dd      	bne.n	8018cdc <_free_r+0x28>
 8018d20:	681c      	ldr	r4, [r3, #0]
 8018d22:	685b      	ldr	r3, [r3, #4]
 8018d24:	6053      	str	r3, [r2, #4]
 8018d26:	4421      	add	r1, r4
 8018d28:	6011      	str	r1, [r2, #0]
 8018d2a:	e7d7      	b.n	8018cdc <_free_r+0x28>
 8018d2c:	d902      	bls.n	8018d34 <_free_r+0x80>
 8018d2e:	230c      	movs	r3, #12
 8018d30:	6003      	str	r3, [r0, #0]
 8018d32:	e7d3      	b.n	8018cdc <_free_r+0x28>
 8018d34:	6825      	ldr	r5, [r4, #0]
 8018d36:	1961      	adds	r1, r4, r5
 8018d38:	428b      	cmp	r3, r1
 8018d3a:	bf04      	itt	eq
 8018d3c:	6819      	ldreq	r1, [r3, #0]
 8018d3e:	685b      	ldreq	r3, [r3, #4]
 8018d40:	6063      	str	r3, [r4, #4]
 8018d42:	bf04      	itt	eq
 8018d44:	1949      	addeq	r1, r1, r5
 8018d46:	6021      	streq	r1, [r4, #0]
 8018d48:	6054      	str	r4, [r2, #4]
 8018d4a:	e7c7      	b.n	8018cdc <_free_r+0x28>
 8018d4c:	b003      	add	sp, #12
 8018d4e:	bd30      	pop	{r4, r5, pc}
 8018d50:	20006290 	.word	0x20006290

08018d54 <_malloc_r>:
 8018d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d56:	1ccd      	adds	r5, r1, #3
 8018d58:	f025 0503 	bic.w	r5, r5, #3
 8018d5c:	3508      	adds	r5, #8
 8018d5e:	2d0c      	cmp	r5, #12
 8018d60:	bf38      	it	cc
 8018d62:	250c      	movcc	r5, #12
 8018d64:	2d00      	cmp	r5, #0
 8018d66:	4606      	mov	r6, r0
 8018d68:	db01      	blt.n	8018d6e <_malloc_r+0x1a>
 8018d6a:	42a9      	cmp	r1, r5
 8018d6c:	d903      	bls.n	8018d76 <_malloc_r+0x22>
 8018d6e:	230c      	movs	r3, #12
 8018d70:	6033      	str	r3, [r6, #0]
 8018d72:	2000      	movs	r0, #0
 8018d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d76:	f000 fbff 	bl	8019578 <__malloc_lock>
 8018d7a:	4921      	ldr	r1, [pc, #132]	; (8018e00 <_malloc_r+0xac>)
 8018d7c:	680a      	ldr	r2, [r1, #0]
 8018d7e:	4614      	mov	r4, r2
 8018d80:	b99c      	cbnz	r4, 8018daa <_malloc_r+0x56>
 8018d82:	4f20      	ldr	r7, [pc, #128]	; (8018e04 <_malloc_r+0xb0>)
 8018d84:	683b      	ldr	r3, [r7, #0]
 8018d86:	b923      	cbnz	r3, 8018d92 <_malloc_r+0x3e>
 8018d88:	4621      	mov	r1, r4
 8018d8a:	4630      	mov	r0, r6
 8018d8c:	f000 f9b4 	bl	80190f8 <_sbrk_r>
 8018d90:	6038      	str	r0, [r7, #0]
 8018d92:	4629      	mov	r1, r5
 8018d94:	4630      	mov	r0, r6
 8018d96:	f000 f9af 	bl	80190f8 <_sbrk_r>
 8018d9a:	1c43      	adds	r3, r0, #1
 8018d9c:	d123      	bne.n	8018de6 <_malloc_r+0x92>
 8018d9e:	230c      	movs	r3, #12
 8018da0:	6033      	str	r3, [r6, #0]
 8018da2:	4630      	mov	r0, r6
 8018da4:	f000 fbee 	bl	8019584 <__malloc_unlock>
 8018da8:	e7e3      	b.n	8018d72 <_malloc_r+0x1e>
 8018daa:	6823      	ldr	r3, [r4, #0]
 8018dac:	1b5b      	subs	r3, r3, r5
 8018dae:	d417      	bmi.n	8018de0 <_malloc_r+0x8c>
 8018db0:	2b0b      	cmp	r3, #11
 8018db2:	d903      	bls.n	8018dbc <_malloc_r+0x68>
 8018db4:	6023      	str	r3, [r4, #0]
 8018db6:	441c      	add	r4, r3
 8018db8:	6025      	str	r5, [r4, #0]
 8018dba:	e004      	b.n	8018dc6 <_malloc_r+0x72>
 8018dbc:	6863      	ldr	r3, [r4, #4]
 8018dbe:	42a2      	cmp	r2, r4
 8018dc0:	bf0c      	ite	eq
 8018dc2:	600b      	streq	r3, [r1, #0]
 8018dc4:	6053      	strne	r3, [r2, #4]
 8018dc6:	4630      	mov	r0, r6
 8018dc8:	f000 fbdc 	bl	8019584 <__malloc_unlock>
 8018dcc:	f104 000b 	add.w	r0, r4, #11
 8018dd0:	1d23      	adds	r3, r4, #4
 8018dd2:	f020 0007 	bic.w	r0, r0, #7
 8018dd6:	1ac2      	subs	r2, r0, r3
 8018dd8:	d0cc      	beq.n	8018d74 <_malloc_r+0x20>
 8018dda:	1a1b      	subs	r3, r3, r0
 8018ddc:	50a3      	str	r3, [r4, r2]
 8018dde:	e7c9      	b.n	8018d74 <_malloc_r+0x20>
 8018de0:	4622      	mov	r2, r4
 8018de2:	6864      	ldr	r4, [r4, #4]
 8018de4:	e7cc      	b.n	8018d80 <_malloc_r+0x2c>
 8018de6:	1cc4      	adds	r4, r0, #3
 8018de8:	f024 0403 	bic.w	r4, r4, #3
 8018dec:	42a0      	cmp	r0, r4
 8018dee:	d0e3      	beq.n	8018db8 <_malloc_r+0x64>
 8018df0:	1a21      	subs	r1, r4, r0
 8018df2:	4630      	mov	r0, r6
 8018df4:	f000 f980 	bl	80190f8 <_sbrk_r>
 8018df8:	3001      	adds	r0, #1
 8018dfa:	d1dd      	bne.n	8018db8 <_malloc_r+0x64>
 8018dfc:	e7cf      	b.n	8018d9e <_malloc_r+0x4a>
 8018dfe:	bf00      	nop
 8018e00:	20006290 	.word	0x20006290
 8018e04:	20006294 	.word	0x20006294

08018e08 <__ssputs_r>:
 8018e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e0c:	688e      	ldr	r6, [r1, #8]
 8018e0e:	429e      	cmp	r6, r3
 8018e10:	4682      	mov	sl, r0
 8018e12:	460c      	mov	r4, r1
 8018e14:	4690      	mov	r8, r2
 8018e16:	461f      	mov	r7, r3
 8018e18:	d838      	bhi.n	8018e8c <__ssputs_r+0x84>
 8018e1a:	898a      	ldrh	r2, [r1, #12]
 8018e1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e20:	d032      	beq.n	8018e88 <__ssputs_r+0x80>
 8018e22:	6825      	ldr	r5, [r4, #0]
 8018e24:	6909      	ldr	r1, [r1, #16]
 8018e26:	eba5 0901 	sub.w	r9, r5, r1
 8018e2a:	6965      	ldr	r5, [r4, #20]
 8018e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e34:	3301      	adds	r3, #1
 8018e36:	444b      	add	r3, r9
 8018e38:	106d      	asrs	r5, r5, #1
 8018e3a:	429d      	cmp	r5, r3
 8018e3c:	bf38      	it	cc
 8018e3e:	461d      	movcc	r5, r3
 8018e40:	0553      	lsls	r3, r2, #21
 8018e42:	d531      	bpl.n	8018ea8 <__ssputs_r+0xa0>
 8018e44:	4629      	mov	r1, r5
 8018e46:	f7ff ff85 	bl	8018d54 <_malloc_r>
 8018e4a:	4606      	mov	r6, r0
 8018e4c:	b950      	cbnz	r0, 8018e64 <__ssputs_r+0x5c>
 8018e4e:	230c      	movs	r3, #12
 8018e50:	f8ca 3000 	str.w	r3, [sl]
 8018e54:	89a3      	ldrh	r3, [r4, #12]
 8018e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e5a:	81a3      	strh	r3, [r4, #12]
 8018e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e64:	6921      	ldr	r1, [r4, #16]
 8018e66:	464a      	mov	r2, r9
 8018e68:	f7fc f9da 	bl	8015220 <memcpy>
 8018e6c:	89a3      	ldrh	r3, [r4, #12]
 8018e6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e76:	81a3      	strh	r3, [r4, #12]
 8018e78:	6126      	str	r6, [r4, #16]
 8018e7a:	6165      	str	r5, [r4, #20]
 8018e7c:	444e      	add	r6, r9
 8018e7e:	eba5 0509 	sub.w	r5, r5, r9
 8018e82:	6026      	str	r6, [r4, #0]
 8018e84:	60a5      	str	r5, [r4, #8]
 8018e86:	463e      	mov	r6, r7
 8018e88:	42be      	cmp	r6, r7
 8018e8a:	d900      	bls.n	8018e8e <__ssputs_r+0x86>
 8018e8c:	463e      	mov	r6, r7
 8018e8e:	4632      	mov	r2, r6
 8018e90:	6820      	ldr	r0, [r4, #0]
 8018e92:	4641      	mov	r1, r8
 8018e94:	f000 fb56 	bl	8019544 <memmove>
 8018e98:	68a3      	ldr	r3, [r4, #8]
 8018e9a:	6822      	ldr	r2, [r4, #0]
 8018e9c:	1b9b      	subs	r3, r3, r6
 8018e9e:	4432      	add	r2, r6
 8018ea0:	60a3      	str	r3, [r4, #8]
 8018ea2:	6022      	str	r2, [r4, #0]
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	e7db      	b.n	8018e60 <__ssputs_r+0x58>
 8018ea8:	462a      	mov	r2, r5
 8018eaa:	f000 fb71 	bl	8019590 <_realloc_r>
 8018eae:	4606      	mov	r6, r0
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	d1e1      	bne.n	8018e78 <__ssputs_r+0x70>
 8018eb4:	6921      	ldr	r1, [r4, #16]
 8018eb6:	4650      	mov	r0, sl
 8018eb8:	f7ff fefc 	bl	8018cb4 <_free_r>
 8018ebc:	e7c7      	b.n	8018e4e <__ssputs_r+0x46>
	...

08018ec0 <_svfiprintf_r>:
 8018ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec4:	4698      	mov	r8, r3
 8018ec6:	898b      	ldrh	r3, [r1, #12]
 8018ec8:	061b      	lsls	r3, r3, #24
 8018eca:	b09d      	sub	sp, #116	; 0x74
 8018ecc:	4607      	mov	r7, r0
 8018ece:	460d      	mov	r5, r1
 8018ed0:	4614      	mov	r4, r2
 8018ed2:	d50e      	bpl.n	8018ef2 <_svfiprintf_r+0x32>
 8018ed4:	690b      	ldr	r3, [r1, #16]
 8018ed6:	b963      	cbnz	r3, 8018ef2 <_svfiprintf_r+0x32>
 8018ed8:	2140      	movs	r1, #64	; 0x40
 8018eda:	f7ff ff3b 	bl	8018d54 <_malloc_r>
 8018ede:	6028      	str	r0, [r5, #0]
 8018ee0:	6128      	str	r0, [r5, #16]
 8018ee2:	b920      	cbnz	r0, 8018eee <_svfiprintf_r+0x2e>
 8018ee4:	230c      	movs	r3, #12
 8018ee6:	603b      	str	r3, [r7, #0]
 8018ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018eec:	e0d1      	b.n	8019092 <_svfiprintf_r+0x1d2>
 8018eee:	2340      	movs	r3, #64	; 0x40
 8018ef0:	616b      	str	r3, [r5, #20]
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ef6:	2320      	movs	r3, #32
 8018ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f00:	2330      	movs	r3, #48	; 0x30
 8018f02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80190ac <_svfiprintf_r+0x1ec>
 8018f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f0a:	f04f 0901 	mov.w	r9, #1
 8018f0e:	4623      	mov	r3, r4
 8018f10:	469a      	mov	sl, r3
 8018f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f16:	b10a      	cbz	r2, 8018f1c <_svfiprintf_r+0x5c>
 8018f18:	2a25      	cmp	r2, #37	; 0x25
 8018f1a:	d1f9      	bne.n	8018f10 <_svfiprintf_r+0x50>
 8018f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8018f20:	d00b      	beq.n	8018f3a <_svfiprintf_r+0x7a>
 8018f22:	465b      	mov	r3, fp
 8018f24:	4622      	mov	r2, r4
 8018f26:	4629      	mov	r1, r5
 8018f28:	4638      	mov	r0, r7
 8018f2a:	f7ff ff6d 	bl	8018e08 <__ssputs_r>
 8018f2e:	3001      	adds	r0, #1
 8018f30:	f000 80aa 	beq.w	8019088 <_svfiprintf_r+0x1c8>
 8018f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f36:	445a      	add	r2, fp
 8018f38:	9209      	str	r2, [sp, #36]	; 0x24
 8018f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	f000 80a2 	beq.w	8019088 <_svfiprintf_r+0x1c8>
 8018f44:	2300      	movs	r3, #0
 8018f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f4e:	f10a 0a01 	add.w	sl, sl, #1
 8018f52:	9304      	str	r3, [sp, #16]
 8018f54:	9307      	str	r3, [sp, #28]
 8018f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8018f5c:	4654      	mov	r4, sl
 8018f5e:	2205      	movs	r2, #5
 8018f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f64:	4851      	ldr	r0, [pc, #324]	; (80190ac <_svfiprintf_r+0x1ec>)
 8018f66:	f7e7 f93b 	bl	80001e0 <memchr>
 8018f6a:	9a04      	ldr	r2, [sp, #16]
 8018f6c:	b9d8      	cbnz	r0, 8018fa6 <_svfiprintf_r+0xe6>
 8018f6e:	06d0      	lsls	r0, r2, #27
 8018f70:	bf44      	itt	mi
 8018f72:	2320      	movmi	r3, #32
 8018f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f78:	0711      	lsls	r1, r2, #28
 8018f7a:	bf44      	itt	mi
 8018f7c:	232b      	movmi	r3, #43	; 0x2b
 8018f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f82:	f89a 3000 	ldrb.w	r3, [sl]
 8018f86:	2b2a      	cmp	r3, #42	; 0x2a
 8018f88:	d015      	beq.n	8018fb6 <_svfiprintf_r+0xf6>
 8018f8a:	9a07      	ldr	r2, [sp, #28]
 8018f8c:	4654      	mov	r4, sl
 8018f8e:	2000      	movs	r0, #0
 8018f90:	f04f 0c0a 	mov.w	ip, #10
 8018f94:	4621      	mov	r1, r4
 8018f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f9a:	3b30      	subs	r3, #48	; 0x30
 8018f9c:	2b09      	cmp	r3, #9
 8018f9e:	d94e      	bls.n	801903e <_svfiprintf_r+0x17e>
 8018fa0:	b1b0      	cbz	r0, 8018fd0 <_svfiprintf_r+0x110>
 8018fa2:	9207      	str	r2, [sp, #28]
 8018fa4:	e014      	b.n	8018fd0 <_svfiprintf_r+0x110>
 8018fa6:	eba0 0308 	sub.w	r3, r0, r8
 8018faa:	fa09 f303 	lsl.w	r3, r9, r3
 8018fae:	4313      	orrs	r3, r2
 8018fb0:	9304      	str	r3, [sp, #16]
 8018fb2:	46a2      	mov	sl, r4
 8018fb4:	e7d2      	b.n	8018f5c <_svfiprintf_r+0x9c>
 8018fb6:	9b03      	ldr	r3, [sp, #12]
 8018fb8:	1d19      	adds	r1, r3, #4
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	9103      	str	r1, [sp, #12]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	bfbb      	ittet	lt
 8018fc2:	425b      	neglt	r3, r3
 8018fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8018fc8:	9307      	strge	r3, [sp, #28]
 8018fca:	9307      	strlt	r3, [sp, #28]
 8018fcc:	bfb8      	it	lt
 8018fce:	9204      	strlt	r2, [sp, #16]
 8018fd0:	7823      	ldrb	r3, [r4, #0]
 8018fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8018fd4:	d10c      	bne.n	8018ff0 <_svfiprintf_r+0x130>
 8018fd6:	7863      	ldrb	r3, [r4, #1]
 8018fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8018fda:	d135      	bne.n	8019048 <_svfiprintf_r+0x188>
 8018fdc:	9b03      	ldr	r3, [sp, #12]
 8018fde:	1d1a      	adds	r2, r3, #4
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	9203      	str	r2, [sp, #12]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	bfb8      	it	lt
 8018fe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018fec:	3402      	adds	r4, #2
 8018fee:	9305      	str	r3, [sp, #20]
 8018ff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80190bc <_svfiprintf_r+0x1fc>
 8018ff4:	7821      	ldrb	r1, [r4, #0]
 8018ff6:	2203      	movs	r2, #3
 8018ff8:	4650      	mov	r0, sl
 8018ffa:	f7e7 f8f1 	bl	80001e0 <memchr>
 8018ffe:	b140      	cbz	r0, 8019012 <_svfiprintf_r+0x152>
 8019000:	2340      	movs	r3, #64	; 0x40
 8019002:	eba0 000a 	sub.w	r0, r0, sl
 8019006:	fa03 f000 	lsl.w	r0, r3, r0
 801900a:	9b04      	ldr	r3, [sp, #16]
 801900c:	4303      	orrs	r3, r0
 801900e:	3401      	adds	r4, #1
 8019010:	9304      	str	r3, [sp, #16]
 8019012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019016:	4826      	ldr	r0, [pc, #152]	; (80190b0 <_svfiprintf_r+0x1f0>)
 8019018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801901c:	2206      	movs	r2, #6
 801901e:	f7e7 f8df 	bl	80001e0 <memchr>
 8019022:	2800      	cmp	r0, #0
 8019024:	d038      	beq.n	8019098 <_svfiprintf_r+0x1d8>
 8019026:	4b23      	ldr	r3, [pc, #140]	; (80190b4 <_svfiprintf_r+0x1f4>)
 8019028:	bb1b      	cbnz	r3, 8019072 <_svfiprintf_r+0x1b2>
 801902a:	9b03      	ldr	r3, [sp, #12]
 801902c:	3307      	adds	r3, #7
 801902e:	f023 0307 	bic.w	r3, r3, #7
 8019032:	3308      	adds	r3, #8
 8019034:	9303      	str	r3, [sp, #12]
 8019036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019038:	4433      	add	r3, r6
 801903a:	9309      	str	r3, [sp, #36]	; 0x24
 801903c:	e767      	b.n	8018f0e <_svfiprintf_r+0x4e>
 801903e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019042:	460c      	mov	r4, r1
 8019044:	2001      	movs	r0, #1
 8019046:	e7a5      	b.n	8018f94 <_svfiprintf_r+0xd4>
 8019048:	2300      	movs	r3, #0
 801904a:	3401      	adds	r4, #1
 801904c:	9305      	str	r3, [sp, #20]
 801904e:	4619      	mov	r1, r3
 8019050:	f04f 0c0a 	mov.w	ip, #10
 8019054:	4620      	mov	r0, r4
 8019056:	f810 2b01 	ldrb.w	r2, [r0], #1
 801905a:	3a30      	subs	r2, #48	; 0x30
 801905c:	2a09      	cmp	r2, #9
 801905e:	d903      	bls.n	8019068 <_svfiprintf_r+0x1a8>
 8019060:	2b00      	cmp	r3, #0
 8019062:	d0c5      	beq.n	8018ff0 <_svfiprintf_r+0x130>
 8019064:	9105      	str	r1, [sp, #20]
 8019066:	e7c3      	b.n	8018ff0 <_svfiprintf_r+0x130>
 8019068:	fb0c 2101 	mla	r1, ip, r1, r2
 801906c:	4604      	mov	r4, r0
 801906e:	2301      	movs	r3, #1
 8019070:	e7f0      	b.n	8019054 <_svfiprintf_r+0x194>
 8019072:	ab03      	add	r3, sp, #12
 8019074:	9300      	str	r3, [sp, #0]
 8019076:	462a      	mov	r2, r5
 8019078:	4b0f      	ldr	r3, [pc, #60]	; (80190b8 <_svfiprintf_r+0x1f8>)
 801907a:	a904      	add	r1, sp, #16
 801907c:	4638      	mov	r0, r7
 801907e:	f7fc f985 	bl	801538c <_printf_float>
 8019082:	1c42      	adds	r2, r0, #1
 8019084:	4606      	mov	r6, r0
 8019086:	d1d6      	bne.n	8019036 <_svfiprintf_r+0x176>
 8019088:	89ab      	ldrh	r3, [r5, #12]
 801908a:	065b      	lsls	r3, r3, #25
 801908c:	f53f af2c 	bmi.w	8018ee8 <_svfiprintf_r+0x28>
 8019090:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019092:	b01d      	add	sp, #116	; 0x74
 8019094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019098:	ab03      	add	r3, sp, #12
 801909a:	9300      	str	r3, [sp, #0]
 801909c:	462a      	mov	r2, r5
 801909e:	4b06      	ldr	r3, [pc, #24]	; (80190b8 <_svfiprintf_r+0x1f8>)
 80190a0:	a904      	add	r1, sp, #16
 80190a2:	4638      	mov	r0, r7
 80190a4:	f7fc fc16 	bl	80158d4 <_printf_i>
 80190a8:	e7eb      	b.n	8019082 <_svfiprintf_r+0x1c2>
 80190aa:	bf00      	nop
 80190ac:	0801b054 	.word	0x0801b054
 80190b0:	0801b05e 	.word	0x0801b05e
 80190b4:	0801538d 	.word	0x0801538d
 80190b8:	08018e09 	.word	0x08018e09
 80190bc:	0801b05a 	.word	0x0801b05a

080190c0 <_read_r>:
 80190c0:	b538      	push	{r3, r4, r5, lr}
 80190c2:	4d07      	ldr	r5, [pc, #28]	; (80190e0 <_read_r+0x20>)
 80190c4:	4604      	mov	r4, r0
 80190c6:	4608      	mov	r0, r1
 80190c8:	4611      	mov	r1, r2
 80190ca:	2200      	movs	r2, #0
 80190cc:	602a      	str	r2, [r5, #0]
 80190ce:	461a      	mov	r2, r3
 80190d0:	f7f1 f8ee 	bl	800a2b0 <_read>
 80190d4:	1c43      	adds	r3, r0, #1
 80190d6:	d102      	bne.n	80190de <_read_r+0x1e>
 80190d8:	682b      	ldr	r3, [r5, #0]
 80190da:	b103      	cbz	r3, 80190de <_read_r+0x1e>
 80190dc:	6023      	str	r3, [r4, #0]
 80190de:	bd38      	pop	{r3, r4, r5, pc}
 80190e0:	20008b30 	.word	0x20008b30
 80190e4:	00000000 	.word	0x00000000

080190e8 <nan>:
 80190e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80190f0 <nan+0x8>
 80190ec:	4770      	bx	lr
 80190ee:	bf00      	nop
 80190f0:	00000000 	.word	0x00000000
 80190f4:	7ff80000 	.word	0x7ff80000

080190f8 <_sbrk_r>:
 80190f8:	b538      	push	{r3, r4, r5, lr}
 80190fa:	4d06      	ldr	r5, [pc, #24]	; (8019114 <_sbrk_r+0x1c>)
 80190fc:	2300      	movs	r3, #0
 80190fe:	4604      	mov	r4, r0
 8019100:	4608      	mov	r0, r1
 8019102:	602b      	str	r3, [r5, #0]
 8019104:	f7f1 f942 	bl	800a38c <_sbrk>
 8019108:	1c43      	adds	r3, r0, #1
 801910a:	d102      	bne.n	8019112 <_sbrk_r+0x1a>
 801910c:	682b      	ldr	r3, [r5, #0]
 801910e:	b103      	cbz	r3, 8019112 <_sbrk_r+0x1a>
 8019110:	6023      	str	r3, [r4, #0]
 8019112:	bd38      	pop	{r3, r4, r5, pc}
 8019114:	20008b30 	.word	0x20008b30

08019118 <finitef>:
 8019118:	b082      	sub	sp, #8
 801911a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801911e:	9801      	ldr	r0, [sp, #4]
 8019120:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019124:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019128:	bfac      	ite	ge
 801912a:	2000      	movge	r0, #0
 801912c:	2001      	movlt	r0, #1
 801912e:	b002      	add	sp, #8
 8019130:	4770      	bx	lr

08019132 <strncmp>:
 8019132:	b510      	push	{r4, lr}
 8019134:	b16a      	cbz	r2, 8019152 <strncmp+0x20>
 8019136:	3901      	subs	r1, #1
 8019138:	1884      	adds	r4, r0, r2
 801913a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801913e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019142:	4293      	cmp	r3, r2
 8019144:	d103      	bne.n	801914e <strncmp+0x1c>
 8019146:	42a0      	cmp	r0, r4
 8019148:	d001      	beq.n	801914e <strncmp+0x1c>
 801914a:	2b00      	cmp	r3, #0
 801914c:	d1f5      	bne.n	801913a <strncmp+0x8>
 801914e:	1a98      	subs	r0, r3, r2
 8019150:	bd10      	pop	{r4, pc}
 8019152:	4610      	mov	r0, r2
 8019154:	e7fc      	b.n	8019150 <strncmp+0x1e>

08019156 <__ascii_wctomb>:
 8019156:	b149      	cbz	r1, 801916c <__ascii_wctomb+0x16>
 8019158:	2aff      	cmp	r2, #255	; 0xff
 801915a:	bf85      	ittet	hi
 801915c:	238a      	movhi	r3, #138	; 0x8a
 801915e:	6003      	strhi	r3, [r0, #0]
 8019160:	700a      	strbls	r2, [r1, #0]
 8019162:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019166:	bf98      	it	ls
 8019168:	2001      	movls	r0, #1
 801916a:	4770      	bx	lr
 801916c:	4608      	mov	r0, r1
 801916e:	4770      	bx	lr

08019170 <__assert_func>:
 8019170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019172:	4614      	mov	r4, r2
 8019174:	461a      	mov	r2, r3
 8019176:	4b09      	ldr	r3, [pc, #36]	; (801919c <__assert_func+0x2c>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	4605      	mov	r5, r0
 801917c:	68d8      	ldr	r0, [r3, #12]
 801917e:	b14c      	cbz	r4, 8019194 <__assert_func+0x24>
 8019180:	4b07      	ldr	r3, [pc, #28]	; (80191a0 <__assert_func+0x30>)
 8019182:	9100      	str	r1, [sp, #0]
 8019184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019188:	4906      	ldr	r1, [pc, #24]	; (80191a4 <__assert_func+0x34>)
 801918a:	462b      	mov	r3, r5
 801918c:	f000 f9a6 	bl	80194dc <fiprintf>
 8019190:	f000 fc3e 	bl	8019a10 <abort>
 8019194:	4b04      	ldr	r3, [pc, #16]	; (80191a8 <__assert_func+0x38>)
 8019196:	461c      	mov	r4, r3
 8019198:	e7f3      	b.n	8019182 <__assert_func+0x12>
 801919a:	bf00      	nop
 801919c:	2000042c 	.word	0x2000042c
 80191a0:	0801b065 	.word	0x0801b065
 80191a4:	0801b072 	.word	0x0801b072
 80191a8:	0801b0a0 	.word	0x0801b0a0

080191ac <__sflush_r>:
 80191ac:	898a      	ldrh	r2, [r1, #12]
 80191ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191b2:	4605      	mov	r5, r0
 80191b4:	0710      	lsls	r0, r2, #28
 80191b6:	460c      	mov	r4, r1
 80191b8:	d458      	bmi.n	801926c <__sflush_r+0xc0>
 80191ba:	684b      	ldr	r3, [r1, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	dc05      	bgt.n	80191cc <__sflush_r+0x20>
 80191c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	dc02      	bgt.n	80191cc <__sflush_r+0x20>
 80191c6:	2000      	movs	r0, #0
 80191c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191ce:	2e00      	cmp	r6, #0
 80191d0:	d0f9      	beq.n	80191c6 <__sflush_r+0x1a>
 80191d2:	2300      	movs	r3, #0
 80191d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191d8:	682f      	ldr	r7, [r5, #0]
 80191da:	602b      	str	r3, [r5, #0]
 80191dc:	d032      	beq.n	8019244 <__sflush_r+0x98>
 80191de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191e0:	89a3      	ldrh	r3, [r4, #12]
 80191e2:	075a      	lsls	r2, r3, #29
 80191e4:	d505      	bpl.n	80191f2 <__sflush_r+0x46>
 80191e6:	6863      	ldr	r3, [r4, #4]
 80191e8:	1ac0      	subs	r0, r0, r3
 80191ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80191ec:	b10b      	cbz	r3, 80191f2 <__sflush_r+0x46>
 80191ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80191f0:	1ac0      	subs	r0, r0, r3
 80191f2:	2300      	movs	r3, #0
 80191f4:	4602      	mov	r2, r0
 80191f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191f8:	6a21      	ldr	r1, [r4, #32]
 80191fa:	4628      	mov	r0, r5
 80191fc:	47b0      	blx	r6
 80191fe:	1c43      	adds	r3, r0, #1
 8019200:	89a3      	ldrh	r3, [r4, #12]
 8019202:	d106      	bne.n	8019212 <__sflush_r+0x66>
 8019204:	6829      	ldr	r1, [r5, #0]
 8019206:	291d      	cmp	r1, #29
 8019208:	d82c      	bhi.n	8019264 <__sflush_r+0xb8>
 801920a:	4a2a      	ldr	r2, [pc, #168]	; (80192b4 <__sflush_r+0x108>)
 801920c:	40ca      	lsrs	r2, r1
 801920e:	07d6      	lsls	r6, r2, #31
 8019210:	d528      	bpl.n	8019264 <__sflush_r+0xb8>
 8019212:	2200      	movs	r2, #0
 8019214:	6062      	str	r2, [r4, #4]
 8019216:	04d9      	lsls	r1, r3, #19
 8019218:	6922      	ldr	r2, [r4, #16]
 801921a:	6022      	str	r2, [r4, #0]
 801921c:	d504      	bpl.n	8019228 <__sflush_r+0x7c>
 801921e:	1c42      	adds	r2, r0, #1
 8019220:	d101      	bne.n	8019226 <__sflush_r+0x7a>
 8019222:	682b      	ldr	r3, [r5, #0]
 8019224:	b903      	cbnz	r3, 8019228 <__sflush_r+0x7c>
 8019226:	6560      	str	r0, [r4, #84]	; 0x54
 8019228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801922a:	602f      	str	r7, [r5, #0]
 801922c:	2900      	cmp	r1, #0
 801922e:	d0ca      	beq.n	80191c6 <__sflush_r+0x1a>
 8019230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019234:	4299      	cmp	r1, r3
 8019236:	d002      	beq.n	801923e <__sflush_r+0x92>
 8019238:	4628      	mov	r0, r5
 801923a:	f7ff fd3b 	bl	8018cb4 <_free_r>
 801923e:	2000      	movs	r0, #0
 8019240:	6360      	str	r0, [r4, #52]	; 0x34
 8019242:	e7c1      	b.n	80191c8 <__sflush_r+0x1c>
 8019244:	6a21      	ldr	r1, [r4, #32]
 8019246:	2301      	movs	r3, #1
 8019248:	4628      	mov	r0, r5
 801924a:	47b0      	blx	r6
 801924c:	1c41      	adds	r1, r0, #1
 801924e:	d1c7      	bne.n	80191e0 <__sflush_r+0x34>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d0c4      	beq.n	80191e0 <__sflush_r+0x34>
 8019256:	2b1d      	cmp	r3, #29
 8019258:	d001      	beq.n	801925e <__sflush_r+0xb2>
 801925a:	2b16      	cmp	r3, #22
 801925c:	d101      	bne.n	8019262 <__sflush_r+0xb6>
 801925e:	602f      	str	r7, [r5, #0]
 8019260:	e7b1      	b.n	80191c6 <__sflush_r+0x1a>
 8019262:	89a3      	ldrh	r3, [r4, #12]
 8019264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019268:	81a3      	strh	r3, [r4, #12]
 801926a:	e7ad      	b.n	80191c8 <__sflush_r+0x1c>
 801926c:	690f      	ldr	r7, [r1, #16]
 801926e:	2f00      	cmp	r7, #0
 8019270:	d0a9      	beq.n	80191c6 <__sflush_r+0x1a>
 8019272:	0793      	lsls	r3, r2, #30
 8019274:	680e      	ldr	r6, [r1, #0]
 8019276:	bf08      	it	eq
 8019278:	694b      	ldreq	r3, [r1, #20]
 801927a:	600f      	str	r7, [r1, #0]
 801927c:	bf18      	it	ne
 801927e:	2300      	movne	r3, #0
 8019280:	eba6 0807 	sub.w	r8, r6, r7
 8019284:	608b      	str	r3, [r1, #8]
 8019286:	f1b8 0f00 	cmp.w	r8, #0
 801928a:	dd9c      	ble.n	80191c6 <__sflush_r+0x1a>
 801928c:	6a21      	ldr	r1, [r4, #32]
 801928e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019290:	4643      	mov	r3, r8
 8019292:	463a      	mov	r2, r7
 8019294:	4628      	mov	r0, r5
 8019296:	47b0      	blx	r6
 8019298:	2800      	cmp	r0, #0
 801929a:	dc06      	bgt.n	80192aa <__sflush_r+0xfe>
 801929c:	89a3      	ldrh	r3, [r4, #12]
 801929e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192a2:	81a3      	strh	r3, [r4, #12]
 80192a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192a8:	e78e      	b.n	80191c8 <__sflush_r+0x1c>
 80192aa:	4407      	add	r7, r0
 80192ac:	eba8 0800 	sub.w	r8, r8, r0
 80192b0:	e7e9      	b.n	8019286 <__sflush_r+0xda>
 80192b2:	bf00      	nop
 80192b4:	20400001 	.word	0x20400001

080192b8 <_fflush_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	690b      	ldr	r3, [r1, #16]
 80192bc:	4605      	mov	r5, r0
 80192be:	460c      	mov	r4, r1
 80192c0:	b913      	cbnz	r3, 80192c8 <_fflush_r+0x10>
 80192c2:	2500      	movs	r5, #0
 80192c4:	4628      	mov	r0, r5
 80192c6:	bd38      	pop	{r3, r4, r5, pc}
 80192c8:	b118      	cbz	r0, 80192d2 <_fflush_r+0x1a>
 80192ca:	6983      	ldr	r3, [r0, #24]
 80192cc:	b90b      	cbnz	r3, 80192d2 <_fflush_r+0x1a>
 80192ce:	f000 f887 	bl	80193e0 <__sinit>
 80192d2:	4b14      	ldr	r3, [pc, #80]	; (8019324 <_fflush_r+0x6c>)
 80192d4:	429c      	cmp	r4, r3
 80192d6:	d11b      	bne.n	8019310 <_fflush_r+0x58>
 80192d8:	686c      	ldr	r4, [r5, #4]
 80192da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d0ef      	beq.n	80192c2 <_fflush_r+0xa>
 80192e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192e4:	07d0      	lsls	r0, r2, #31
 80192e6:	d404      	bmi.n	80192f2 <_fflush_r+0x3a>
 80192e8:	0599      	lsls	r1, r3, #22
 80192ea:	d402      	bmi.n	80192f2 <_fflush_r+0x3a>
 80192ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80192ee:	f000 f927 	bl	8019540 <__retarget_lock_acquire_recursive>
 80192f2:	4628      	mov	r0, r5
 80192f4:	4621      	mov	r1, r4
 80192f6:	f7ff ff59 	bl	80191ac <__sflush_r>
 80192fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80192fc:	07da      	lsls	r2, r3, #31
 80192fe:	4605      	mov	r5, r0
 8019300:	d4e0      	bmi.n	80192c4 <_fflush_r+0xc>
 8019302:	89a3      	ldrh	r3, [r4, #12]
 8019304:	059b      	lsls	r3, r3, #22
 8019306:	d4dd      	bmi.n	80192c4 <_fflush_r+0xc>
 8019308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801930a:	f000 f91a 	bl	8019542 <__retarget_lock_release_recursive>
 801930e:	e7d9      	b.n	80192c4 <_fflush_r+0xc>
 8019310:	4b05      	ldr	r3, [pc, #20]	; (8019328 <_fflush_r+0x70>)
 8019312:	429c      	cmp	r4, r3
 8019314:	d101      	bne.n	801931a <_fflush_r+0x62>
 8019316:	68ac      	ldr	r4, [r5, #8]
 8019318:	e7df      	b.n	80192da <_fflush_r+0x22>
 801931a:	4b04      	ldr	r3, [pc, #16]	; (801932c <_fflush_r+0x74>)
 801931c:	429c      	cmp	r4, r3
 801931e:	bf08      	it	eq
 8019320:	68ec      	ldreq	r4, [r5, #12]
 8019322:	e7da      	b.n	80192da <_fflush_r+0x22>
 8019324:	0801b0c4 	.word	0x0801b0c4
 8019328:	0801b0e4 	.word	0x0801b0e4
 801932c:	0801b0a4 	.word	0x0801b0a4

08019330 <std>:
 8019330:	2300      	movs	r3, #0
 8019332:	b510      	push	{r4, lr}
 8019334:	4604      	mov	r4, r0
 8019336:	e9c0 3300 	strd	r3, r3, [r0]
 801933a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801933e:	6083      	str	r3, [r0, #8]
 8019340:	8181      	strh	r1, [r0, #12]
 8019342:	6643      	str	r3, [r0, #100]	; 0x64
 8019344:	81c2      	strh	r2, [r0, #14]
 8019346:	6183      	str	r3, [r0, #24]
 8019348:	4619      	mov	r1, r3
 801934a:	2208      	movs	r2, #8
 801934c:	305c      	adds	r0, #92	; 0x5c
 801934e:	f7fb ff75 	bl	801523c <memset>
 8019352:	4b05      	ldr	r3, [pc, #20]	; (8019368 <std+0x38>)
 8019354:	6263      	str	r3, [r4, #36]	; 0x24
 8019356:	4b05      	ldr	r3, [pc, #20]	; (801936c <std+0x3c>)
 8019358:	62a3      	str	r3, [r4, #40]	; 0x28
 801935a:	4b05      	ldr	r3, [pc, #20]	; (8019370 <std+0x40>)
 801935c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801935e:	4b05      	ldr	r3, [pc, #20]	; (8019374 <std+0x44>)
 8019360:	6224      	str	r4, [r4, #32]
 8019362:	6323      	str	r3, [r4, #48]	; 0x30
 8019364:	bd10      	pop	{r4, pc}
 8019366:	bf00      	nop
 8019368:	080160bd 	.word	0x080160bd
 801936c:	080160df 	.word	0x080160df
 8019370:	08016117 	.word	0x08016117
 8019374:	0801613b 	.word	0x0801613b

08019378 <_cleanup_r>:
 8019378:	4901      	ldr	r1, [pc, #4]	; (8019380 <_cleanup_r+0x8>)
 801937a:	f000 b8c1 	b.w	8019500 <_fwalk_reent>
 801937e:	bf00      	nop
 8019380:	080192b9 	.word	0x080192b9

08019384 <__sfmoreglue>:
 8019384:	b570      	push	{r4, r5, r6, lr}
 8019386:	1e4a      	subs	r2, r1, #1
 8019388:	2568      	movs	r5, #104	; 0x68
 801938a:	4355      	muls	r5, r2
 801938c:	460e      	mov	r6, r1
 801938e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019392:	f7ff fcdf 	bl	8018d54 <_malloc_r>
 8019396:	4604      	mov	r4, r0
 8019398:	b140      	cbz	r0, 80193ac <__sfmoreglue+0x28>
 801939a:	2100      	movs	r1, #0
 801939c:	e9c0 1600 	strd	r1, r6, [r0]
 80193a0:	300c      	adds	r0, #12
 80193a2:	60a0      	str	r0, [r4, #8]
 80193a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80193a8:	f7fb ff48 	bl	801523c <memset>
 80193ac:	4620      	mov	r0, r4
 80193ae:	bd70      	pop	{r4, r5, r6, pc}

080193b0 <__sfp_lock_acquire>:
 80193b0:	4801      	ldr	r0, [pc, #4]	; (80193b8 <__sfp_lock_acquire+0x8>)
 80193b2:	f000 b8c5 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193b6:	bf00      	nop
 80193b8:	20008b3c 	.word	0x20008b3c

080193bc <__sfp_lock_release>:
 80193bc:	4801      	ldr	r0, [pc, #4]	; (80193c4 <__sfp_lock_release+0x8>)
 80193be:	f000 b8c0 	b.w	8019542 <__retarget_lock_release_recursive>
 80193c2:	bf00      	nop
 80193c4:	20008b3c 	.word	0x20008b3c

080193c8 <__sinit_lock_acquire>:
 80193c8:	4801      	ldr	r0, [pc, #4]	; (80193d0 <__sinit_lock_acquire+0x8>)
 80193ca:	f000 b8b9 	b.w	8019540 <__retarget_lock_acquire_recursive>
 80193ce:	bf00      	nop
 80193d0:	20008b37 	.word	0x20008b37

080193d4 <__sinit_lock_release>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__sinit_lock_release+0x8>)
 80193d6:	f000 b8b4 	b.w	8019542 <__retarget_lock_release_recursive>
 80193da:	bf00      	nop
 80193dc:	20008b37 	.word	0x20008b37

080193e0 <__sinit>:
 80193e0:	b510      	push	{r4, lr}
 80193e2:	4604      	mov	r4, r0
 80193e4:	f7ff fff0 	bl	80193c8 <__sinit_lock_acquire>
 80193e8:	69a3      	ldr	r3, [r4, #24]
 80193ea:	b11b      	cbz	r3, 80193f4 <__sinit+0x14>
 80193ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f0:	f7ff bff0 	b.w	80193d4 <__sinit_lock_release>
 80193f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80193f8:	6523      	str	r3, [r4, #80]	; 0x50
 80193fa:	4b13      	ldr	r3, [pc, #76]	; (8019448 <__sinit+0x68>)
 80193fc:	4a13      	ldr	r2, [pc, #76]	; (801944c <__sinit+0x6c>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	62a2      	str	r2, [r4, #40]	; 0x28
 8019402:	42a3      	cmp	r3, r4
 8019404:	bf04      	itt	eq
 8019406:	2301      	moveq	r3, #1
 8019408:	61a3      	streq	r3, [r4, #24]
 801940a:	4620      	mov	r0, r4
 801940c:	f000 f820 	bl	8019450 <__sfp>
 8019410:	6060      	str	r0, [r4, #4]
 8019412:	4620      	mov	r0, r4
 8019414:	f000 f81c 	bl	8019450 <__sfp>
 8019418:	60a0      	str	r0, [r4, #8]
 801941a:	4620      	mov	r0, r4
 801941c:	f000 f818 	bl	8019450 <__sfp>
 8019420:	2200      	movs	r2, #0
 8019422:	60e0      	str	r0, [r4, #12]
 8019424:	2104      	movs	r1, #4
 8019426:	6860      	ldr	r0, [r4, #4]
 8019428:	f7ff ff82 	bl	8019330 <std>
 801942c:	68a0      	ldr	r0, [r4, #8]
 801942e:	2201      	movs	r2, #1
 8019430:	2109      	movs	r1, #9
 8019432:	f7ff ff7d 	bl	8019330 <std>
 8019436:	68e0      	ldr	r0, [r4, #12]
 8019438:	2202      	movs	r2, #2
 801943a:	2112      	movs	r1, #18
 801943c:	f7ff ff78 	bl	8019330 <std>
 8019440:	2301      	movs	r3, #1
 8019442:	61a3      	str	r3, [r4, #24]
 8019444:	e7d2      	b.n	80193ec <__sinit+0xc>
 8019446:	bf00      	nop
 8019448:	0801ac4c 	.word	0x0801ac4c
 801944c:	08019379 	.word	0x08019379

08019450 <__sfp>:
 8019450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019452:	4607      	mov	r7, r0
 8019454:	f7ff ffac 	bl	80193b0 <__sfp_lock_acquire>
 8019458:	4b1e      	ldr	r3, [pc, #120]	; (80194d4 <__sfp+0x84>)
 801945a:	681e      	ldr	r6, [r3, #0]
 801945c:	69b3      	ldr	r3, [r6, #24]
 801945e:	b913      	cbnz	r3, 8019466 <__sfp+0x16>
 8019460:	4630      	mov	r0, r6
 8019462:	f7ff ffbd 	bl	80193e0 <__sinit>
 8019466:	3648      	adds	r6, #72	; 0x48
 8019468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801946c:	3b01      	subs	r3, #1
 801946e:	d503      	bpl.n	8019478 <__sfp+0x28>
 8019470:	6833      	ldr	r3, [r6, #0]
 8019472:	b30b      	cbz	r3, 80194b8 <__sfp+0x68>
 8019474:	6836      	ldr	r6, [r6, #0]
 8019476:	e7f7      	b.n	8019468 <__sfp+0x18>
 8019478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801947c:	b9d5      	cbnz	r5, 80194b4 <__sfp+0x64>
 801947e:	4b16      	ldr	r3, [pc, #88]	; (80194d8 <__sfp+0x88>)
 8019480:	60e3      	str	r3, [r4, #12]
 8019482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019486:	6665      	str	r5, [r4, #100]	; 0x64
 8019488:	f000 f859 	bl	801953e <__retarget_lock_init_recursive>
 801948c:	f7ff ff96 	bl	80193bc <__sfp_lock_release>
 8019490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019498:	6025      	str	r5, [r4, #0]
 801949a:	61a5      	str	r5, [r4, #24]
 801949c:	2208      	movs	r2, #8
 801949e:	4629      	mov	r1, r5
 80194a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80194a4:	f7fb feca 	bl	801523c <memset>
 80194a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80194ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80194b0:	4620      	mov	r0, r4
 80194b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194b4:	3468      	adds	r4, #104	; 0x68
 80194b6:	e7d9      	b.n	801946c <__sfp+0x1c>
 80194b8:	2104      	movs	r1, #4
 80194ba:	4638      	mov	r0, r7
 80194bc:	f7ff ff62 	bl	8019384 <__sfmoreglue>
 80194c0:	4604      	mov	r4, r0
 80194c2:	6030      	str	r0, [r6, #0]
 80194c4:	2800      	cmp	r0, #0
 80194c6:	d1d5      	bne.n	8019474 <__sfp+0x24>
 80194c8:	f7ff ff78 	bl	80193bc <__sfp_lock_release>
 80194cc:	230c      	movs	r3, #12
 80194ce:	603b      	str	r3, [r7, #0]
 80194d0:	e7ee      	b.n	80194b0 <__sfp+0x60>
 80194d2:	bf00      	nop
 80194d4:	0801ac4c 	.word	0x0801ac4c
 80194d8:	ffff0001 	.word	0xffff0001

080194dc <fiprintf>:
 80194dc:	b40e      	push	{r1, r2, r3}
 80194de:	b503      	push	{r0, r1, lr}
 80194e0:	4601      	mov	r1, r0
 80194e2:	ab03      	add	r3, sp, #12
 80194e4:	4805      	ldr	r0, [pc, #20]	; (80194fc <fiprintf+0x20>)
 80194e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194ea:	6800      	ldr	r0, [r0, #0]
 80194ec:	9301      	str	r3, [sp, #4]
 80194ee:	f000 f89f 	bl	8019630 <_vfiprintf_r>
 80194f2:	b002      	add	sp, #8
 80194f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194f8:	b003      	add	sp, #12
 80194fa:	4770      	bx	lr
 80194fc:	2000042c 	.word	0x2000042c

08019500 <_fwalk_reent>:
 8019500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019504:	4606      	mov	r6, r0
 8019506:	4688      	mov	r8, r1
 8019508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801950c:	2700      	movs	r7, #0
 801950e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019512:	f1b9 0901 	subs.w	r9, r9, #1
 8019516:	d505      	bpl.n	8019524 <_fwalk_reent+0x24>
 8019518:	6824      	ldr	r4, [r4, #0]
 801951a:	2c00      	cmp	r4, #0
 801951c:	d1f7      	bne.n	801950e <_fwalk_reent+0xe>
 801951e:	4638      	mov	r0, r7
 8019520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019524:	89ab      	ldrh	r3, [r5, #12]
 8019526:	2b01      	cmp	r3, #1
 8019528:	d907      	bls.n	801953a <_fwalk_reent+0x3a>
 801952a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801952e:	3301      	adds	r3, #1
 8019530:	d003      	beq.n	801953a <_fwalk_reent+0x3a>
 8019532:	4629      	mov	r1, r5
 8019534:	4630      	mov	r0, r6
 8019536:	47c0      	blx	r8
 8019538:	4307      	orrs	r7, r0
 801953a:	3568      	adds	r5, #104	; 0x68
 801953c:	e7e9      	b.n	8019512 <_fwalk_reent+0x12>

0801953e <__retarget_lock_init_recursive>:
 801953e:	4770      	bx	lr

08019540 <__retarget_lock_acquire_recursive>:
 8019540:	4770      	bx	lr

08019542 <__retarget_lock_release_recursive>:
 8019542:	4770      	bx	lr

08019544 <memmove>:
 8019544:	4288      	cmp	r0, r1
 8019546:	b510      	push	{r4, lr}
 8019548:	eb01 0402 	add.w	r4, r1, r2
 801954c:	d902      	bls.n	8019554 <memmove+0x10>
 801954e:	4284      	cmp	r4, r0
 8019550:	4623      	mov	r3, r4
 8019552:	d807      	bhi.n	8019564 <memmove+0x20>
 8019554:	1e43      	subs	r3, r0, #1
 8019556:	42a1      	cmp	r1, r4
 8019558:	d008      	beq.n	801956c <memmove+0x28>
 801955a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801955e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019562:	e7f8      	b.n	8019556 <memmove+0x12>
 8019564:	4402      	add	r2, r0
 8019566:	4601      	mov	r1, r0
 8019568:	428a      	cmp	r2, r1
 801956a:	d100      	bne.n	801956e <memmove+0x2a>
 801956c:	bd10      	pop	{r4, pc}
 801956e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019576:	e7f7      	b.n	8019568 <memmove+0x24>

08019578 <__malloc_lock>:
 8019578:	4801      	ldr	r0, [pc, #4]	; (8019580 <__malloc_lock+0x8>)
 801957a:	f7ff bfe1 	b.w	8019540 <__retarget_lock_acquire_recursive>
 801957e:	bf00      	nop
 8019580:	20008b38 	.word	0x20008b38

08019584 <__malloc_unlock>:
 8019584:	4801      	ldr	r0, [pc, #4]	; (801958c <__malloc_unlock+0x8>)
 8019586:	f7ff bfdc 	b.w	8019542 <__retarget_lock_release_recursive>
 801958a:	bf00      	nop
 801958c:	20008b38 	.word	0x20008b38

08019590 <_realloc_r>:
 8019590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019592:	4607      	mov	r7, r0
 8019594:	4614      	mov	r4, r2
 8019596:	460e      	mov	r6, r1
 8019598:	b921      	cbnz	r1, 80195a4 <_realloc_r+0x14>
 801959a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801959e:	4611      	mov	r1, r2
 80195a0:	f7ff bbd8 	b.w	8018d54 <_malloc_r>
 80195a4:	b922      	cbnz	r2, 80195b0 <_realloc_r+0x20>
 80195a6:	f7ff fb85 	bl	8018cb4 <_free_r>
 80195aa:	4625      	mov	r5, r4
 80195ac:	4628      	mov	r0, r5
 80195ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195b0:	f000 fa9a 	bl	8019ae8 <_malloc_usable_size_r>
 80195b4:	42a0      	cmp	r0, r4
 80195b6:	d20f      	bcs.n	80195d8 <_realloc_r+0x48>
 80195b8:	4621      	mov	r1, r4
 80195ba:	4638      	mov	r0, r7
 80195bc:	f7ff fbca 	bl	8018d54 <_malloc_r>
 80195c0:	4605      	mov	r5, r0
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d0f2      	beq.n	80195ac <_realloc_r+0x1c>
 80195c6:	4631      	mov	r1, r6
 80195c8:	4622      	mov	r2, r4
 80195ca:	f7fb fe29 	bl	8015220 <memcpy>
 80195ce:	4631      	mov	r1, r6
 80195d0:	4638      	mov	r0, r7
 80195d2:	f7ff fb6f 	bl	8018cb4 <_free_r>
 80195d6:	e7e9      	b.n	80195ac <_realloc_r+0x1c>
 80195d8:	4635      	mov	r5, r6
 80195da:	e7e7      	b.n	80195ac <_realloc_r+0x1c>

080195dc <__sfputc_r>:
 80195dc:	6893      	ldr	r3, [r2, #8]
 80195de:	3b01      	subs	r3, #1
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	b410      	push	{r4}
 80195e4:	6093      	str	r3, [r2, #8]
 80195e6:	da08      	bge.n	80195fa <__sfputc_r+0x1e>
 80195e8:	6994      	ldr	r4, [r2, #24]
 80195ea:	42a3      	cmp	r3, r4
 80195ec:	db01      	blt.n	80195f2 <__sfputc_r+0x16>
 80195ee:	290a      	cmp	r1, #10
 80195f0:	d103      	bne.n	80195fa <__sfputc_r+0x1e>
 80195f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80195f6:	f000 b94b 	b.w	8019890 <__swbuf_r>
 80195fa:	6813      	ldr	r3, [r2, #0]
 80195fc:	1c58      	adds	r0, r3, #1
 80195fe:	6010      	str	r0, [r2, #0]
 8019600:	7019      	strb	r1, [r3, #0]
 8019602:	4608      	mov	r0, r1
 8019604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019608:	4770      	bx	lr

0801960a <__sfputs_r>:
 801960a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960c:	4606      	mov	r6, r0
 801960e:	460f      	mov	r7, r1
 8019610:	4614      	mov	r4, r2
 8019612:	18d5      	adds	r5, r2, r3
 8019614:	42ac      	cmp	r4, r5
 8019616:	d101      	bne.n	801961c <__sfputs_r+0x12>
 8019618:	2000      	movs	r0, #0
 801961a:	e007      	b.n	801962c <__sfputs_r+0x22>
 801961c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019620:	463a      	mov	r2, r7
 8019622:	4630      	mov	r0, r6
 8019624:	f7ff ffda 	bl	80195dc <__sfputc_r>
 8019628:	1c43      	adds	r3, r0, #1
 801962a:	d1f3      	bne.n	8019614 <__sfputs_r+0xa>
 801962c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019630 <_vfiprintf_r>:
 8019630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019634:	460d      	mov	r5, r1
 8019636:	b09d      	sub	sp, #116	; 0x74
 8019638:	4614      	mov	r4, r2
 801963a:	4698      	mov	r8, r3
 801963c:	4606      	mov	r6, r0
 801963e:	b118      	cbz	r0, 8019648 <_vfiprintf_r+0x18>
 8019640:	6983      	ldr	r3, [r0, #24]
 8019642:	b90b      	cbnz	r3, 8019648 <_vfiprintf_r+0x18>
 8019644:	f7ff fecc 	bl	80193e0 <__sinit>
 8019648:	4b89      	ldr	r3, [pc, #548]	; (8019870 <_vfiprintf_r+0x240>)
 801964a:	429d      	cmp	r5, r3
 801964c:	d11b      	bne.n	8019686 <_vfiprintf_r+0x56>
 801964e:	6875      	ldr	r5, [r6, #4]
 8019650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019652:	07d9      	lsls	r1, r3, #31
 8019654:	d405      	bmi.n	8019662 <_vfiprintf_r+0x32>
 8019656:	89ab      	ldrh	r3, [r5, #12]
 8019658:	059a      	lsls	r2, r3, #22
 801965a:	d402      	bmi.n	8019662 <_vfiprintf_r+0x32>
 801965c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801965e:	f7ff ff6f 	bl	8019540 <__retarget_lock_acquire_recursive>
 8019662:	89ab      	ldrh	r3, [r5, #12]
 8019664:	071b      	lsls	r3, r3, #28
 8019666:	d501      	bpl.n	801966c <_vfiprintf_r+0x3c>
 8019668:	692b      	ldr	r3, [r5, #16]
 801966a:	b9eb      	cbnz	r3, 80196a8 <_vfiprintf_r+0x78>
 801966c:	4629      	mov	r1, r5
 801966e:	4630      	mov	r0, r6
 8019670:	f000 f960 	bl	8019934 <__swsetup_r>
 8019674:	b1c0      	cbz	r0, 80196a8 <_vfiprintf_r+0x78>
 8019676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019678:	07dc      	lsls	r4, r3, #31
 801967a:	d50e      	bpl.n	801969a <_vfiprintf_r+0x6a>
 801967c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019680:	b01d      	add	sp, #116	; 0x74
 8019682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019686:	4b7b      	ldr	r3, [pc, #492]	; (8019874 <_vfiprintf_r+0x244>)
 8019688:	429d      	cmp	r5, r3
 801968a:	d101      	bne.n	8019690 <_vfiprintf_r+0x60>
 801968c:	68b5      	ldr	r5, [r6, #8]
 801968e:	e7df      	b.n	8019650 <_vfiprintf_r+0x20>
 8019690:	4b79      	ldr	r3, [pc, #484]	; (8019878 <_vfiprintf_r+0x248>)
 8019692:	429d      	cmp	r5, r3
 8019694:	bf08      	it	eq
 8019696:	68f5      	ldreq	r5, [r6, #12]
 8019698:	e7da      	b.n	8019650 <_vfiprintf_r+0x20>
 801969a:	89ab      	ldrh	r3, [r5, #12]
 801969c:	0598      	lsls	r0, r3, #22
 801969e:	d4ed      	bmi.n	801967c <_vfiprintf_r+0x4c>
 80196a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196a2:	f7ff ff4e 	bl	8019542 <__retarget_lock_release_recursive>
 80196a6:	e7e9      	b.n	801967c <_vfiprintf_r+0x4c>
 80196a8:	2300      	movs	r3, #0
 80196aa:	9309      	str	r3, [sp, #36]	; 0x24
 80196ac:	2320      	movs	r3, #32
 80196ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80196b6:	2330      	movs	r3, #48	; 0x30
 80196b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801987c <_vfiprintf_r+0x24c>
 80196bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196c0:	f04f 0901 	mov.w	r9, #1
 80196c4:	4623      	mov	r3, r4
 80196c6:	469a      	mov	sl, r3
 80196c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80196cc:	b10a      	cbz	r2, 80196d2 <_vfiprintf_r+0xa2>
 80196ce:	2a25      	cmp	r2, #37	; 0x25
 80196d0:	d1f9      	bne.n	80196c6 <_vfiprintf_r+0x96>
 80196d2:	ebba 0b04 	subs.w	fp, sl, r4
 80196d6:	d00b      	beq.n	80196f0 <_vfiprintf_r+0xc0>
 80196d8:	465b      	mov	r3, fp
 80196da:	4622      	mov	r2, r4
 80196dc:	4629      	mov	r1, r5
 80196de:	4630      	mov	r0, r6
 80196e0:	f7ff ff93 	bl	801960a <__sfputs_r>
 80196e4:	3001      	adds	r0, #1
 80196e6:	f000 80aa 	beq.w	801983e <_vfiprintf_r+0x20e>
 80196ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80196ec:	445a      	add	r2, fp
 80196ee:	9209      	str	r2, [sp, #36]	; 0x24
 80196f0:	f89a 3000 	ldrb.w	r3, [sl]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	f000 80a2 	beq.w	801983e <_vfiprintf_r+0x20e>
 80196fa:	2300      	movs	r3, #0
 80196fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019704:	f10a 0a01 	add.w	sl, sl, #1
 8019708:	9304      	str	r3, [sp, #16]
 801970a:	9307      	str	r3, [sp, #28]
 801970c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019710:	931a      	str	r3, [sp, #104]	; 0x68
 8019712:	4654      	mov	r4, sl
 8019714:	2205      	movs	r2, #5
 8019716:	f814 1b01 	ldrb.w	r1, [r4], #1
 801971a:	4858      	ldr	r0, [pc, #352]	; (801987c <_vfiprintf_r+0x24c>)
 801971c:	f7e6 fd60 	bl	80001e0 <memchr>
 8019720:	9a04      	ldr	r2, [sp, #16]
 8019722:	b9d8      	cbnz	r0, 801975c <_vfiprintf_r+0x12c>
 8019724:	06d1      	lsls	r1, r2, #27
 8019726:	bf44      	itt	mi
 8019728:	2320      	movmi	r3, #32
 801972a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801972e:	0713      	lsls	r3, r2, #28
 8019730:	bf44      	itt	mi
 8019732:	232b      	movmi	r3, #43	; 0x2b
 8019734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019738:	f89a 3000 	ldrb.w	r3, [sl]
 801973c:	2b2a      	cmp	r3, #42	; 0x2a
 801973e:	d015      	beq.n	801976c <_vfiprintf_r+0x13c>
 8019740:	9a07      	ldr	r2, [sp, #28]
 8019742:	4654      	mov	r4, sl
 8019744:	2000      	movs	r0, #0
 8019746:	f04f 0c0a 	mov.w	ip, #10
 801974a:	4621      	mov	r1, r4
 801974c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019750:	3b30      	subs	r3, #48	; 0x30
 8019752:	2b09      	cmp	r3, #9
 8019754:	d94e      	bls.n	80197f4 <_vfiprintf_r+0x1c4>
 8019756:	b1b0      	cbz	r0, 8019786 <_vfiprintf_r+0x156>
 8019758:	9207      	str	r2, [sp, #28]
 801975a:	e014      	b.n	8019786 <_vfiprintf_r+0x156>
 801975c:	eba0 0308 	sub.w	r3, r0, r8
 8019760:	fa09 f303 	lsl.w	r3, r9, r3
 8019764:	4313      	orrs	r3, r2
 8019766:	9304      	str	r3, [sp, #16]
 8019768:	46a2      	mov	sl, r4
 801976a:	e7d2      	b.n	8019712 <_vfiprintf_r+0xe2>
 801976c:	9b03      	ldr	r3, [sp, #12]
 801976e:	1d19      	adds	r1, r3, #4
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	9103      	str	r1, [sp, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	bfbb      	ittet	lt
 8019778:	425b      	neglt	r3, r3
 801977a:	f042 0202 	orrlt.w	r2, r2, #2
 801977e:	9307      	strge	r3, [sp, #28]
 8019780:	9307      	strlt	r3, [sp, #28]
 8019782:	bfb8      	it	lt
 8019784:	9204      	strlt	r2, [sp, #16]
 8019786:	7823      	ldrb	r3, [r4, #0]
 8019788:	2b2e      	cmp	r3, #46	; 0x2e
 801978a:	d10c      	bne.n	80197a6 <_vfiprintf_r+0x176>
 801978c:	7863      	ldrb	r3, [r4, #1]
 801978e:	2b2a      	cmp	r3, #42	; 0x2a
 8019790:	d135      	bne.n	80197fe <_vfiprintf_r+0x1ce>
 8019792:	9b03      	ldr	r3, [sp, #12]
 8019794:	1d1a      	adds	r2, r3, #4
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	9203      	str	r2, [sp, #12]
 801979a:	2b00      	cmp	r3, #0
 801979c:	bfb8      	it	lt
 801979e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80197a2:	3402      	adds	r4, #2
 80197a4:	9305      	str	r3, [sp, #20]
 80197a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801988c <_vfiprintf_r+0x25c>
 80197aa:	7821      	ldrb	r1, [r4, #0]
 80197ac:	2203      	movs	r2, #3
 80197ae:	4650      	mov	r0, sl
 80197b0:	f7e6 fd16 	bl	80001e0 <memchr>
 80197b4:	b140      	cbz	r0, 80197c8 <_vfiprintf_r+0x198>
 80197b6:	2340      	movs	r3, #64	; 0x40
 80197b8:	eba0 000a 	sub.w	r0, r0, sl
 80197bc:	fa03 f000 	lsl.w	r0, r3, r0
 80197c0:	9b04      	ldr	r3, [sp, #16]
 80197c2:	4303      	orrs	r3, r0
 80197c4:	3401      	adds	r4, #1
 80197c6:	9304      	str	r3, [sp, #16]
 80197c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80197cc:	482c      	ldr	r0, [pc, #176]	; (8019880 <_vfiprintf_r+0x250>)
 80197ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80197d2:	2206      	movs	r2, #6
 80197d4:	f7e6 fd04 	bl	80001e0 <memchr>
 80197d8:	2800      	cmp	r0, #0
 80197da:	d03f      	beq.n	801985c <_vfiprintf_r+0x22c>
 80197dc:	4b29      	ldr	r3, [pc, #164]	; (8019884 <_vfiprintf_r+0x254>)
 80197de:	bb1b      	cbnz	r3, 8019828 <_vfiprintf_r+0x1f8>
 80197e0:	9b03      	ldr	r3, [sp, #12]
 80197e2:	3307      	adds	r3, #7
 80197e4:	f023 0307 	bic.w	r3, r3, #7
 80197e8:	3308      	adds	r3, #8
 80197ea:	9303      	str	r3, [sp, #12]
 80197ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ee:	443b      	add	r3, r7
 80197f0:	9309      	str	r3, [sp, #36]	; 0x24
 80197f2:	e767      	b.n	80196c4 <_vfiprintf_r+0x94>
 80197f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80197f8:	460c      	mov	r4, r1
 80197fa:	2001      	movs	r0, #1
 80197fc:	e7a5      	b.n	801974a <_vfiprintf_r+0x11a>
 80197fe:	2300      	movs	r3, #0
 8019800:	3401      	adds	r4, #1
 8019802:	9305      	str	r3, [sp, #20]
 8019804:	4619      	mov	r1, r3
 8019806:	f04f 0c0a 	mov.w	ip, #10
 801980a:	4620      	mov	r0, r4
 801980c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019810:	3a30      	subs	r2, #48	; 0x30
 8019812:	2a09      	cmp	r2, #9
 8019814:	d903      	bls.n	801981e <_vfiprintf_r+0x1ee>
 8019816:	2b00      	cmp	r3, #0
 8019818:	d0c5      	beq.n	80197a6 <_vfiprintf_r+0x176>
 801981a:	9105      	str	r1, [sp, #20]
 801981c:	e7c3      	b.n	80197a6 <_vfiprintf_r+0x176>
 801981e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019822:	4604      	mov	r4, r0
 8019824:	2301      	movs	r3, #1
 8019826:	e7f0      	b.n	801980a <_vfiprintf_r+0x1da>
 8019828:	ab03      	add	r3, sp, #12
 801982a:	9300      	str	r3, [sp, #0]
 801982c:	462a      	mov	r2, r5
 801982e:	4b16      	ldr	r3, [pc, #88]	; (8019888 <_vfiprintf_r+0x258>)
 8019830:	a904      	add	r1, sp, #16
 8019832:	4630      	mov	r0, r6
 8019834:	f7fb fdaa 	bl	801538c <_printf_float>
 8019838:	4607      	mov	r7, r0
 801983a:	1c78      	adds	r0, r7, #1
 801983c:	d1d6      	bne.n	80197ec <_vfiprintf_r+0x1bc>
 801983e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019840:	07d9      	lsls	r1, r3, #31
 8019842:	d405      	bmi.n	8019850 <_vfiprintf_r+0x220>
 8019844:	89ab      	ldrh	r3, [r5, #12]
 8019846:	059a      	lsls	r2, r3, #22
 8019848:	d402      	bmi.n	8019850 <_vfiprintf_r+0x220>
 801984a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801984c:	f7ff fe79 	bl	8019542 <__retarget_lock_release_recursive>
 8019850:	89ab      	ldrh	r3, [r5, #12]
 8019852:	065b      	lsls	r3, r3, #25
 8019854:	f53f af12 	bmi.w	801967c <_vfiprintf_r+0x4c>
 8019858:	9809      	ldr	r0, [sp, #36]	; 0x24
 801985a:	e711      	b.n	8019680 <_vfiprintf_r+0x50>
 801985c:	ab03      	add	r3, sp, #12
 801985e:	9300      	str	r3, [sp, #0]
 8019860:	462a      	mov	r2, r5
 8019862:	4b09      	ldr	r3, [pc, #36]	; (8019888 <_vfiprintf_r+0x258>)
 8019864:	a904      	add	r1, sp, #16
 8019866:	4630      	mov	r0, r6
 8019868:	f7fc f834 	bl	80158d4 <_printf_i>
 801986c:	e7e4      	b.n	8019838 <_vfiprintf_r+0x208>
 801986e:	bf00      	nop
 8019870:	0801b0c4 	.word	0x0801b0c4
 8019874:	0801b0e4 	.word	0x0801b0e4
 8019878:	0801b0a4 	.word	0x0801b0a4
 801987c:	0801b054 	.word	0x0801b054
 8019880:	0801b05e 	.word	0x0801b05e
 8019884:	0801538d 	.word	0x0801538d
 8019888:	0801960b 	.word	0x0801960b
 801988c:	0801b05a 	.word	0x0801b05a

08019890 <__swbuf_r>:
 8019890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019892:	460e      	mov	r6, r1
 8019894:	4614      	mov	r4, r2
 8019896:	4605      	mov	r5, r0
 8019898:	b118      	cbz	r0, 80198a2 <__swbuf_r+0x12>
 801989a:	6983      	ldr	r3, [r0, #24]
 801989c:	b90b      	cbnz	r3, 80198a2 <__swbuf_r+0x12>
 801989e:	f7ff fd9f 	bl	80193e0 <__sinit>
 80198a2:	4b21      	ldr	r3, [pc, #132]	; (8019928 <__swbuf_r+0x98>)
 80198a4:	429c      	cmp	r4, r3
 80198a6:	d12b      	bne.n	8019900 <__swbuf_r+0x70>
 80198a8:	686c      	ldr	r4, [r5, #4]
 80198aa:	69a3      	ldr	r3, [r4, #24]
 80198ac:	60a3      	str	r3, [r4, #8]
 80198ae:	89a3      	ldrh	r3, [r4, #12]
 80198b0:	071a      	lsls	r2, r3, #28
 80198b2:	d52f      	bpl.n	8019914 <__swbuf_r+0x84>
 80198b4:	6923      	ldr	r3, [r4, #16]
 80198b6:	b36b      	cbz	r3, 8019914 <__swbuf_r+0x84>
 80198b8:	6923      	ldr	r3, [r4, #16]
 80198ba:	6820      	ldr	r0, [r4, #0]
 80198bc:	1ac0      	subs	r0, r0, r3
 80198be:	6963      	ldr	r3, [r4, #20]
 80198c0:	b2f6      	uxtb	r6, r6
 80198c2:	4283      	cmp	r3, r0
 80198c4:	4637      	mov	r7, r6
 80198c6:	dc04      	bgt.n	80198d2 <__swbuf_r+0x42>
 80198c8:	4621      	mov	r1, r4
 80198ca:	4628      	mov	r0, r5
 80198cc:	f7ff fcf4 	bl	80192b8 <_fflush_r>
 80198d0:	bb30      	cbnz	r0, 8019920 <__swbuf_r+0x90>
 80198d2:	68a3      	ldr	r3, [r4, #8]
 80198d4:	3b01      	subs	r3, #1
 80198d6:	60a3      	str	r3, [r4, #8]
 80198d8:	6823      	ldr	r3, [r4, #0]
 80198da:	1c5a      	adds	r2, r3, #1
 80198dc:	6022      	str	r2, [r4, #0]
 80198de:	701e      	strb	r6, [r3, #0]
 80198e0:	6963      	ldr	r3, [r4, #20]
 80198e2:	3001      	adds	r0, #1
 80198e4:	4283      	cmp	r3, r0
 80198e6:	d004      	beq.n	80198f2 <__swbuf_r+0x62>
 80198e8:	89a3      	ldrh	r3, [r4, #12]
 80198ea:	07db      	lsls	r3, r3, #31
 80198ec:	d506      	bpl.n	80198fc <__swbuf_r+0x6c>
 80198ee:	2e0a      	cmp	r6, #10
 80198f0:	d104      	bne.n	80198fc <__swbuf_r+0x6c>
 80198f2:	4621      	mov	r1, r4
 80198f4:	4628      	mov	r0, r5
 80198f6:	f7ff fcdf 	bl	80192b8 <_fflush_r>
 80198fa:	b988      	cbnz	r0, 8019920 <__swbuf_r+0x90>
 80198fc:	4638      	mov	r0, r7
 80198fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019900:	4b0a      	ldr	r3, [pc, #40]	; (801992c <__swbuf_r+0x9c>)
 8019902:	429c      	cmp	r4, r3
 8019904:	d101      	bne.n	801990a <__swbuf_r+0x7a>
 8019906:	68ac      	ldr	r4, [r5, #8]
 8019908:	e7cf      	b.n	80198aa <__swbuf_r+0x1a>
 801990a:	4b09      	ldr	r3, [pc, #36]	; (8019930 <__swbuf_r+0xa0>)
 801990c:	429c      	cmp	r4, r3
 801990e:	bf08      	it	eq
 8019910:	68ec      	ldreq	r4, [r5, #12]
 8019912:	e7ca      	b.n	80198aa <__swbuf_r+0x1a>
 8019914:	4621      	mov	r1, r4
 8019916:	4628      	mov	r0, r5
 8019918:	f000 f80c 	bl	8019934 <__swsetup_r>
 801991c:	2800      	cmp	r0, #0
 801991e:	d0cb      	beq.n	80198b8 <__swbuf_r+0x28>
 8019920:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019924:	e7ea      	b.n	80198fc <__swbuf_r+0x6c>
 8019926:	bf00      	nop
 8019928:	0801b0c4 	.word	0x0801b0c4
 801992c:	0801b0e4 	.word	0x0801b0e4
 8019930:	0801b0a4 	.word	0x0801b0a4

08019934 <__swsetup_r>:
 8019934:	4b32      	ldr	r3, [pc, #200]	; (8019a00 <__swsetup_r+0xcc>)
 8019936:	b570      	push	{r4, r5, r6, lr}
 8019938:	681d      	ldr	r5, [r3, #0]
 801993a:	4606      	mov	r6, r0
 801993c:	460c      	mov	r4, r1
 801993e:	b125      	cbz	r5, 801994a <__swsetup_r+0x16>
 8019940:	69ab      	ldr	r3, [r5, #24]
 8019942:	b913      	cbnz	r3, 801994a <__swsetup_r+0x16>
 8019944:	4628      	mov	r0, r5
 8019946:	f7ff fd4b 	bl	80193e0 <__sinit>
 801994a:	4b2e      	ldr	r3, [pc, #184]	; (8019a04 <__swsetup_r+0xd0>)
 801994c:	429c      	cmp	r4, r3
 801994e:	d10f      	bne.n	8019970 <__swsetup_r+0x3c>
 8019950:	686c      	ldr	r4, [r5, #4]
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019958:	0719      	lsls	r1, r3, #28
 801995a:	d42c      	bmi.n	80199b6 <__swsetup_r+0x82>
 801995c:	06dd      	lsls	r5, r3, #27
 801995e:	d411      	bmi.n	8019984 <__swsetup_r+0x50>
 8019960:	2309      	movs	r3, #9
 8019962:	6033      	str	r3, [r6, #0]
 8019964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019968:	81a3      	strh	r3, [r4, #12]
 801996a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801996e:	e03e      	b.n	80199ee <__swsetup_r+0xba>
 8019970:	4b25      	ldr	r3, [pc, #148]	; (8019a08 <__swsetup_r+0xd4>)
 8019972:	429c      	cmp	r4, r3
 8019974:	d101      	bne.n	801997a <__swsetup_r+0x46>
 8019976:	68ac      	ldr	r4, [r5, #8]
 8019978:	e7eb      	b.n	8019952 <__swsetup_r+0x1e>
 801997a:	4b24      	ldr	r3, [pc, #144]	; (8019a0c <__swsetup_r+0xd8>)
 801997c:	429c      	cmp	r4, r3
 801997e:	bf08      	it	eq
 8019980:	68ec      	ldreq	r4, [r5, #12]
 8019982:	e7e6      	b.n	8019952 <__swsetup_r+0x1e>
 8019984:	0758      	lsls	r0, r3, #29
 8019986:	d512      	bpl.n	80199ae <__swsetup_r+0x7a>
 8019988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801998a:	b141      	cbz	r1, 801999e <__swsetup_r+0x6a>
 801998c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019990:	4299      	cmp	r1, r3
 8019992:	d002      	beq.n	801999a <__swsetup_r+0x66>
 8019994:	4630      	mov	r0, r6
 8019996:	f7ff f98d 	bl	8018cb4 <_free_r>
 801999a:	2300      	movs	r3, #0
 801999c:	6363      	str	r3, [r4, #52]	; 0x34
 801999e:	89a3      	ldrh	r3, [r4, #12]
 80199a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80199a4:	81a3      	strh	r3, [r4, #12]
 80199a6:	2300      	movs	r3, #0
 80199a8:	6063      	str	r3, [r4, #4]
 80199aa:	6923      	ldr	r3, [r4, #16]
 80199ac:	6023      	str	r3, [r4, #0]
 80199ae:	89a3      	ldrh	r3, [r4, #12]
 80199b0:	f043 0308 	orr.w	r3, r3, #8
 80199b4:	81a3      	strh	r3, [r4, #12]
 80199b6:	6923      	ldr	r3, [r4, #16]
 80199b8:	b94b      	cbnz	r3, 80199ce <__swsetup_r+0x9a>
 80199ba:	89a3      	ldrh	r3, [r4, #12]
 80199bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80199c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199c4:	d003      	beq.n	80199ce <__swsetup_r+0x9a>
 80199c6:	4621      	mov	r1, r4
 80199c8:	4630      	mov	r0, r6
 80199ca:	f000 f84d 	bl	8019a68 <__smakebuf_r>
 80199ce:	89a0      	ldrh	r0, [r4, #12]
 80199d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80199d4:	f010 0301 	ands.w	r3, r0, #1
 80199d8:	d00a      	beq.n	80199f0 <__swsetup_r+0xbc>
 80199da:	2300      	movs	r3, #0
 80199dc:	60a3      	str	r3, [r4, #8]
 80199de:	6963      	ldr	r3, [r4, #20]
 80199e0:	425b      	negs	r3, r3
 80199e2:	61a3      	str	r3, [r4, #24]
 80199e4:	6923      	ldr	r3, [r4, #16]
 80199e6:	b943      	cbnz	r3, 80199fa <__swsetup_r+0xc6>
 80199e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80199ec:	d1ba      	bne.n	8019964 <__swsetup_r+0x30>
 80199ee:	bd70      	pop	{r4, r5, r6, pc}
 80199f0:	0781      	lsls	r1, r0, #30
 80199f2:	bf58      	it	pl
 80199f4:	6963      	ldrpl	r3, [r4, #20]
 80199f6:	60a3      	str	r3, [r4, #8]
 80199f8:	e7f4      	b.n	80199e4 <__swsetup_r+0xb0>
 80199fa:	2000      	movs	r0, #0
 80199fc:	e7f7      	b.n	80199ee <__swsetup_r+0xba>
 80199fe:	bf00      	nop
 8019a00:	2000042c 	.word	0x2000042c
 8019a04:	0801b0c4 	.word	0x0801b0c4
 8019a08:	0801b0e4 	.word	0x0801b0e4
 8019a0c:	0801b0a4 	.word	0x0801b0a4

08019a10 <abort>:
 8019a10:	b508      	push	{r3, lr}
 8019a12:	2006      	movs	r0, #6
 8019a14:	f000 f898 	bl	8019b48 <raise>
 8019a18:	2001      	movs	r0, #1
 8019a1a:	f7f0 fc3f 	bl	800a29c <_exit>

08019a1e <__swhatbuf_r>:
 8019a1e:	b570      	push	{r4, r5, r6, lr}
 8019a20:	460e      	mov	r6, r1
 8019a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a26:	2900      	cmp	r1, #0
 8019a28:	b096      	sub	sp, #88	; 0x58
 8019a2a:	4614      	mov	r4, r2
 8019a2c:	461d      	mov	r5, r3
 8019a2e:	da07      	bge.n	8019a40 <__swhatbuf_r+0x22>
 8019a30:	2300      	movs	r3, #0
 8019a32:	602b      	str	r3, [r5, #0]
 8019a34:	89b3      	ldrh	r3, [r6, #12]
 8019a36:	061a      	lsls	r2, r3, #24
 8019a38:	d410      	bmi.n	8019a5c <__swhatbuf_r+0x3e>
 8019a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a3e:	e00e      	b.n	8019a5e <__swhatbuf_r+0x40>
 8019a40:	466a      	mov	r2, sp
 8019a42:	f000 f89d 	bl	8019b80 <_fstat_r>
 8019a46:	2800      	cmp	r0, #0
 8019a48:	dbf2      	blt.n	8019a30 <__swhatbuf_r+0x12>
 8019a4a:	9a01      	ldr	r2, [sp, #4]
 8019a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019a54:	425a      	negs	r2, r3
 8019a56:	415a      	adcs	r2, r3
 8019a58:	602a      	str	r2, [r5, #0]
 8019a5a:	e7ee      	b.n	8019a3a <__swhatbuf_r+0x1c>
 8019a5c:	2340      	movs	r3, #64	; 0x40
 8019a5e:	2000      	movs	r0, #0
 8019a60:	6023      	str	r3, [r4, #0]
 8019a62:	b016      	add	sp, #88	; 0x58
 8019a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08019a68 <__smakebuf_r>:
 8019a68:	898b      	ldrh	r3, [r1, #12]
 8019a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a6c:	079d      	lsls	r5, r3, #30
 8019a6e:	4606      	mov	r6, r0
 8019a70:	460c      	mov	r4, r1
 8019a72:	d507      	bpl.n	8019a84 <__smakebuf_r+0x1c>
 8019a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019a78:	6023      	str	r3, [r4, #0]
 8019a7a:	6123      	str	r3, [r4, #16]
 8019a7c:	2301      	movs	r3, #1
 8019a7e:	6163      	str	r3, [r4, #20]
 8019a80:	b002      	add	sp, #8
 8019a82:	bd70      	pop	{r4, r5, r6, pc}
 8019a84:	ab01      	add	r3, sp, #4
 8019a86:	466a      	mov	r2, sp
 8019a88:	f7ff ffc9 	bl	8019a1e <__swhatbuf_r>
 8019a8c:	9900      	ldr	r1, [sp, #0]
 8019a8e:	4605      	mov	r5, r0
 8019a90:	4630      	mov	r0, r6
 8019a92:	f7ff f95f 	bl	8018d54 <_malloc_r>
 8019a96:	b948      	cbnz	r0, 8019aac <__smakebuf_r+0x44>
 8019a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a9c:	059a      	lsls	r2, r3, #22
 8019a9e:	d4ef      	bmi.n	8019a80 <__smakebuf_r+0x18>
 8019aa0:	f023 0303 	bic.w	r3, r3, #3
 8019aa4:	f043 0302 	orr.w	r3, r3, #2
 8019aa8:	81a3      	strh	r3, [r4, #12]
 8019aaa:	e7e3      	b.n	8019a74 <__smakebuf_r+0xc>
 8019aac:	4b0d      	ldr	r3, [pc, #52]	; (8019ae4 <__smakebuf_r+0x7c>)
 8019aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8019ab0:	89a3      	ldrh	r3, [r4, #12]
 8019ab2:	6020      	str	r0, [r4, #0]
 8019ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ab8:	81a3      	strh	r3, [r4, #12]
 8019aba:	9b00      	ldr	r3, [sp, #0]
 8019abc:	6163      	str	r3, [r4, #20]
 8019abe:	9b01      	ldr	r3, [sp, #4]
 8019ac0:	6120      	str	r0, [r4, #16]
 8019ac2:	b15b      	cbz	r3, 8019adc <__smakebuf_r+0x74>
 8019ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ac8:	4630      	mov	r0, r6
 8019aca:	f000 f86b 	bl	8019ba4 <_isatty_r>
 8019ace:	b128      	cbz	r0, 8019adc <__smakebuf_r+0x74>
 8019ad0:	89a3      	ldrh	r3, [r4, #12]
 8019ad2:	f023 0303 	bic.w	r3, r3, #3
 8019ad6:	f043 0301 	orr.w	r3, r3, #1
 8019ada:	81a3      	strh	r3, [r4, #12]
 8019adc:	89a0      	ldrh	r0, [r4, #12]
 8019ade:	4305      	orrs	r5, r0
 8019ae0:	81a5      	strh	r5, [r4, #12]
 8019ae2:	e7cd      	b.n	8019a80 <__smakebuf_r+0x18>
 8019ae4:	08019379 	.word	0x08019379

08019ae8 <_malloc_usable_size_r>:
 8019ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019aec:	1f18      	subs	r0, r3, #4
 8019aee:	2b00      	cmp	r3, #0
 8019af0:	bfbc      	itt	lt
 8019af2:	580b      	ldrlt	r3, [r1, r0]
 8019af4:	18c0      	addlt	r0, r0, r3
 8019af6:	4770      	bx	lr

08019af8 <_raise_r>:
 8019af8:	291f      	cmp	r1, #31
 8019afa:	b538      	push	{r3, r4, r5, lr}
 8019afc:	4604      	mov	r4, r0
 8019afe:	460d      	mov	r5, r1
 8019b00:	d904      	bls.n	8019b0c <_raise_r+0x14>
 8019b02:	2316      	movs	r3, #22
 8019b04:	6003      	str	r3, [r0, #0]
 8019b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b0a:	bd38      	pop	{r3, r4, r5, pc}
 8019b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019b0e:	b112      	cbz	r2, 8019b16 <_raise_r+0x1e>
 8019b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019b14:	b94b      	cbnz	r3, 8019b2a <_raise_r+0x32>
 8019b16:	4620      	mov	r0, r4
 8019b18:	f000 f830 	bl	8019b7c <_getpid_r>
 8019b1c:	462a      	mov	r2, r5
 8019b1e:	4601      	mov	r1, r0
 8019b20:	4620      	mov	r0, r4
 8019b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b26:	f000 b817 	b.w	8019b58 <_kill_r>
 8019b2a:	2b01      	cmp	r3, #1
 8019b2c:	d00a      	beq.n	8019b44 <_raise_r+0x4c>
 8019b2e:	1c59      	adds	r1, r3, #1
 8019b30:	d103      	bne.n	8019b3a <_raise_r+0x42>
 8019b32:	2316      	movs	r3, #22
 8019b34:	6003      	str	r3, [r0, #0]
 8019b36:	2001      	movs	r0, #1
 8019b38:	e7e7      	b.n	8019b0a <_raise_r+0x12>
 8019b3a:	2400      	movs	r4, #0
 8019b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019b40:	4628      	mov	r0, r5
 8019b42:	4798      	blx	r3
 8019b44:	2000      	movs	r0, #0
 8019b46:	e7e0      	b.n	8019b0a <_raise_r+0x12>

08019b48 <raise>:
 8019b48:	4b02      	ldr	r3, [pc, #8]	; (8019b54 <raise+0xc>)
 8019b4a:	4601      	mov	r1, r0
 8019b4c:	6818      	ldr	r0, [r3, #0]
 8019b4e:	f7ff bfd3 	b.w	8019af8 <_raise_r>
 8019b52:	bf00      	nop
 8019b54:	2000042c 	.word	0x2000042c

08019b58 <_kill_r>:
 8019b58:	b538      	push	{r3, r4, r5, lr}
 8019b5a:	4d07      	ldr	r5, [pc, #28]	; (8019b78 <_kill_r+0x20>)
 8019b5c:	2300      	movs	r3, #0
 8019b5e:	4604      	mov	r4, r0
 8019b60:	4608      	mov	r0, r1
 8019b62:	4611      	mov	r1, r2
 8019b64:	602b      	str	r3, [r5, #0]
 8019b66:	f7f0 fb89 	bl	800a27c <_kill>
 8019b6a:	1c43      	adds	r3, r0, #1
 8019b6c:	d102      	bne.n	8019b74 <_kill_r+0x1c>
 8019b6e:	682b      	ldr	r3, [r5, #0]
 8019b70:	b103      	cbz	r3, 8019b74 <_kill_r+0x1c>
 8019b72:	6023      	str	r3, [r4, #0]
 8019b74:	bd38      	pop	{r3, r4, r5, pc}
 8019b76:	bf00      	nop
 8019b78:	20008b30 	.word	0x20008b30

08019b7c <_getpid_r>:
 8019b7c:	f7f0 bb76 	b.w	800a26c <_getpid>

08019b80 <_fstat_r>:
 8019b80:	b538      	push	{r3, r4, r5, lr}
 8019b82:	4d07      	ldr	r5, [pc, #28]	; (8019ba0 <_fstat_r+0x20>)
 8019b84:	2300      	movs	r3, #0
 8019b86:	4604      	mov	r4, r0
 8019b88:	4608      	mov	r0, r1
 8019b8a:	4611      	mov	r1, r2
 8019b8c:	602b      	str	r3, [r5, #0]
 8019b8e:	f7f0 fbd4 	bl	800a33a <_fstat>
 8019b92:	1c43      	adds	r3, r0, #1
 8019b94:	d102      	bne.n	8019b9c <_fstat_r+0x1c>
 8019b96:	682b      	ldr	r3, [r5, #0]
 8019b98:	b103      	cbz	r3, 8019b9c <_fstat_r+0x1c>
 8019b9a:	6023      	str	r3, [r4, #0]
 8019b9c:	bd38      	pop	{r3, r4, r5, pc}
 8019b9e:	bf00      	nop
 8019ba0:	20008b30 	.word	0x20008b30

08019ba4 <_isatty_r>:
 8019ba4:	b538      	push	{r3, r4, r5, lr}
 8019ba6:	4d06      	ldr	r5, [pc, #24]	; (8019bc0 <_isatty_r+0x1c>)
 8019ba8:	2300      	movs	r3, #0
 8019baa:	4604      	mov	r4, r0
 8019bac:	4608      	mov	r0, r1
 8019bae:	602b      	str	r3, [r5, #0]
 8019bb0:	f7f0 fbd3 	bl	800a35a <_isatty>
 8019bb4:	1c43      	adds	r3, r0, #1
 8019bb6:	d102      	bne.n	8019bbe <_isatty_r+0x1a>
 8019bb8:	682b      	ldr	r3, [r5, #0]
 8019bba:	b103      	cbz	r3, 8019bbe <_isatty_r+0x1a>
 8019bbc:	6023      	str	r3, [r4, #0]
 8019bbe:	bd38      	pop	{r3, r4, r5, pc}
 8019bc0:	20008b30 	.word	0x20008b30

08019bc4 <_init>:
 8019bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bc6:	bf00      	nop
 8019bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bca:	bc08      	pop	{r3}
 8019bcc:	469e      	mov	lr, r3
 8019bce:	4770      	bx	lr

08019bd0 <_fini>:
 8019bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bd2:	bf00      	nop
 8019bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bd6:	bc08      	pop	{r3}
 8019bd8:	469e      	mov	lr, r3
 8019bda:	4770      	bx	lr
